uint64_t sub_1000BBB28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__custodianStorage;
  v2 = sub_100009F04(&qword_100321FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__storageController;
  v4 = sub_100009F04(&qword_100322950);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__versionProvider;
  v6 = sub_100009F04(&qword_100325528);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocClassInstance();
}

uint64_t sub_1000BBC5C()
{
  return type metadata accessor for CustodianHealthCheck();
}

uint64_t type metadata accessor for CustodianHealthCheck()
{
  uint64_t result = qword_1003253B8;
  if (!qword_1003253B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000BBCB0()
{
  sub_10001BF34(319, (unint64_t *)&qword_100327F30, &qword_100322470);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&unk_100327F70, &qword_100322490);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&unk_1003253C8, &qword_10032D700);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_1000BBDE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C174C(a3, a4);
}

void sub_1000BBE10(uint64_t a1, int a2, uint64_t a3, dispatch_group_t group)
{
  if (a1)
  {
    v6 = (uint64_t *)(a3 + *(int *)(type metadata accessor for CustodianshipInfoRecord() + 24));
    uint64_t v11 = *v6;
    uint64_t v12 = v6[1];
    swift_errorRetain();
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = 58;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = group;
    v10 = group;
    sub_10019F5F4(v11, v12, a1, (uint64_t)sub_1000C311C, v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_errorRelease();
  }
  else
  {
    dispatch_group_leave(group);
  }
}

uint64_t sub_1000BBF54(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a6;
  uint64_t v38 = type metadata accessor for CustodianshipInfoRecord();
  __chkstk_darwin(v38, v10);
  uint64_t v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CustodianRecoveryRecords(0);
  __chkstk_darwin(v13 - 8, v14);
  v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100009F04(&qword_100325510);
  __chkstk_darwin(v17, v18);
  v20 = (void *)((char *)v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v20, &qword_100325510);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v36 = a3;
    v37 = (void (*)(uint64_t))a4;
    v35[1] = a5;
    uint64_t v21 = *v20;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E778);
    sub_1000C26A4(v39, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      v26 = (void *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      v41[0] = v39;
      *(_DWORD *)uint64_t v25 = 136315650;
      if (qword_100320C08 != -1) {
        swift_once();
      }
      uint64_t v28 = qword_100325368;
      unint64_t v27 = unk_100325370;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_100135190(v28, v27, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A668((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = sub_100135190(v29, v30, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C274C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      *(_WORD *)(v25 + 22) = 2112;
      uint64_t v31 = _convertErrorToNSError(_:)();
      uint64_t v40 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v26 = v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "   %s - error fetching health check record for    %s: %@", (uint8_t *)v25, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000C274C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    _convertErrorToNSError(_:)();
    v33 = &v36[qword_10032F900];
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v34 = v37;
    if (*(void *)((*(void *)v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v33 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    sub_100267790();
    swift_errorRetain();
    v34(v21);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_1000C2AD4((uint64_t)v20, (uint64_t)v16, type metadata accessor for CustodianRecoveryRecords);
    sub_1000BC4D0((uint64_t)v16, a3, a4, a5);
    return sub_1000C274C((uint64_t)v16, type metadata accessor for CustodianRecoveryRecords);
  }
}

uint64_t sub_1000BC4D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v8 = type metadata accessor for CustodianRecoveryRecords(0);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1 + *(int *)(v8 + 20);
  uint64_t v21 = type metadata accessor for CustodianRecoveryInfoRecord();
  sub_100019730(v20 + *(int *)(v21 + 44), (uint64_t)v19, (uint64_t *)&unk_100321CE0);
  uint64_t v22 = type metadata accessor for UUID();
  LOBYTE(v20) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v19, 1, v22) != 1;
  sub_100006574((uint64_t)v19, (uint64_t *)&unk_100321CE0);
  v44 = a2;
  *((unsigned char *)a2 + qword_10032F908) = v20;
  uint64_t v23 = a1 + *(int *)(v8 + 24);
  if (sub_1000BCB98(v23))
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E778);
    sub_1000C26A4(a1, (uint64_t)v15, type metadata accessor for CustodianRecoveryRecords);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v43 = v5;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v48 = v42;
      *(_DWORD *)uint64_t v27 = 136315394;
      if (qword_100320C08 != -1) {
        swift_once();
      }
      uint64_t v29 = qword_100325368;
      unint64_t v28 = unk_100325370;
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_100135190(v29, v28, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      sub_10000A668((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v47 = sub_100135190(v30, v31, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C274C((uint64_t)v15, type metadata accessor for CustodianRecoveryRecords);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s - custodian %s is due for a health check.", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000C274C((uint64_t)v15, type metadata accessor for CustodianRecoveryRecords);
    }
    return sub_1000BD0F4(a1, v44, v45, v46);
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E778);
    sub_1000C26A4(a1, (uint64_t)v12, type metadata accessor for CustodianRecoveryRecords);
    v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v43 = v5;
      uint64_t v35 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v48 = v42;
      *(_DWORD *)uint64_t v35 = 136315394;
      if (qword_100320C08 != -1) {
        swift_once();
      }
      uint64_t v37 = qword_100325368;
      unint64_t v36 = unk_100325370;
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_100135190(v37, v36, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      sub_10000A668((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v47 = sub_100135190(v38, v39, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C274C((uint64_t)v12, type metadata accessor for CustodianRecoveryRecords);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, " %s - custodian %s has  had a recent health check, ending check early.", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000C274C((uint64_t)v12, type metadata accessor for CustodianRecoveryRecords);
    }
    return sub_1000BD59C(v23, 0, 0xF000000000000000, 1, v44, 0, v45, v46);
  }
}

uint64_t sub_1000BCB98(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v12 = sub_100009F04(&qword_100325528);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([self isNeverSkipCustodianCheckEnabled])
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E778);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preference set to never skip health check", v20, 2u);
      swift_slowDealloc();
    }

    char v21 = 1;
  }
  else
  {
    sub_1000E3148();
    uint64_t v22 = type metadata accessor for CustodianHealthRecord();
    uint64_t v23 = a1 + *(int *)(v22 + 40);
    if ((*(unsigned char *)(v23 + 8) & 1) == 0)
    {
      uint64_t v24 = a1;
      uint64_t v25 = *(void *)v23;
      uint64_t v46 = v1;
      uint64_t v47 = v22;
      v44 = *(void (**)(char *))(v13 + 16);
      uint64_t v45 = v1 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__versionProvider;
      uint64_t v41 = v13 + 16;
      v44(v16);
      Dependency.wrappedValue.getter();
      uint64_t v43 = *(void (**)(char *, uint64_t))(v13 + 8);
      v43(v16, v12);
      os_log_type_t v26 = sub_100008EF8(v48, v49);
      id v27 = sub_1001EAFC8(*v26);
      sub_100008EA8((uint64_t)v48);
      uint64_t v22 = v47;
      uint64_t v42 = v25;
      BOOL v28 = (uint64_t)v27 < v25;
      a1 = v24;
      if (v28)
      {
        if (qword_100320B98 != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        sub_100007288(v29, (uint64_t)qword_10033E778);
        swift_retain();
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.default.getter();
        int v40 = v31;
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v39 = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 134218240;
          v48[0] = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v32 = v39;
          *(_WORD *)(v39 + 12) = 2048;
          uint64_t v42 = v32 + 14;
          ((void (*)(char *, uint64_t, uint64_t))v44)(v16, v45, v12);
          v33 = v30;
          Dependency.wrappedValue.getter();
          v43(v16, v12);
          os_log_type_t v34 = sub_100008EF8(v48, v49);
          id v35 = sub_1001EAFC8(*v34);
          sub_100008EA8((uint64_t)v48);
          unint64_t v36 = (uint8_t *)v39;
          v48[0] = v35;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v40, " Last HealthCheck v%ld which is greater than current  known v%ld. Taking extended time  for eligibility.", v36, 0x16u);
          swift_slowDealloc();
        }
        else
        {

          swift_release();
        }
        sub_1000E3454();
        uint64_t v22 = v47;
      }
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v8, a1 + *(int *)(v22 + 24), v3);
    Date.init(timeInterval:since:)();
    Date.init()();
    sub_10000A668((unint64_t *)&unk_100325530, (void (*)(uint64_t))&type metadata accessor for Date);
    char v21 = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
    uint64_t v37 = *(void (**)(char *, uint64_t))(v4 + 8);
    v37(v8, v3);
    v37(v11, v3);
  }
  return v21 & 1;
}

uint64_t sub_1000BD0F4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for CustodianHealthRecord();
  __chkstk_darwin(v10, v11);
  int v40 = &v34[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for CustodianRecoveryRecords(0);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = &v34[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1 + *(int *)(v15 + 20);
  uint64_t v19 = v18 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord() + 32);
  unint64_t v20 = *(void *)(v19 + 8);
  if (v20 >> 60 == 15)
  {
    uint64_t v38 = a3;
    uint64_t v39 = a4;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E778);
    sub_1000C26A4(a1, (uint64_t)v17, type metadata accessor for CustodianRecoveryRecords);
    uint64_t v22 = Logger.logObject.getter();
    int v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, (os_log_type_t)v23))
    {
      int v35 = v23;
      unint64_t v36 = a2;
      uint64_t v37 = v5;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315394;
      if (qword_100320C08 != -1) {
        swift_once();
      }
      uint64_t v25 = qword_100325368;
      unint64_t v26 = unk_100325370;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_100135190(v25, v26, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A668((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = sub_100135190(v27, v28, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C274C((uint64_t)v17, type metadata accessor for CustodianRecoveryRecords);
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v35, "%s - custodian %s has no recovery key, update timestamp.", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a2 = v36;
    }
    else
    {
      sub_1000C274C((uint64_t)v17, type metadata accessor for CustodianRecoveryRecords);
    }
    uint64_t v31 = a1 + *(int *)(v13 + 24);
    uint64_t v32 = v40;
    sub_1000C26A4(v31, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v38;
    *(void *)(v33 + 24) = v39;
    swift_retain();
    sub_1000BD59C((uint64_t)v32, 0, 0xF000000000000000, 0, a2, 3, (uint64_t)sub_1000C2744, v33);
    swift_release();
    return sub_1000C274C((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  }
  else
  {
    uint64_t v29 = *(void *)v19;
    sub_100013140(*(void *)v19, *(void *)(v19 + 8));
    sub_1000BE114(a1, v29, v20, a2, a3, a4);
    return sub_1000196A0(v29, v20);
  }
}

uint64_t sub_1000BD59C(uint64_t a1, uint64_t a2, unint64_t a3, int a4, void *a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v118 = a8;
  uint64_t v113 = a7;
  LODWORD(v115) = a6;
  v119 = a5;
  int v114 = a4;
  uint64_t v128 = a2;
  unint64_t v129 = a3;
  uint64_t v123 = a1;
  uint64_t v112 = *v8;
  uint64_t v10 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v10 - 8, v11);
  v117 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100009F04(&qword_100322950);
  v108 = *(uint64_t (**)())(v109 - 8);
  __chkstk_darwin(v109, v13);
  v105 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for CustodianHealthRecord();
  uint64_t v106 = *(void *)(v122 - 8);
  uint64_t v16 = __chkstk_darwin(v122, v15);
  uint64_t v116 = (uint64_t)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v121 = (uint64_t)&v101 - v20;
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v111 = (uint64_t)&v101 - v23;
  uint64_t v107 = v24;
  __chkstk_darwin(v22, v25);
  uint64_t v101 = (uint64_t)&v101 - v26;
  uint64_t v27 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(void *)(v28 + 64);
  uint64_t v31 = __chkstk_darwin(v27, v30);
  uint64_t v33 = __chkstk_darwin(v31, v32);
  int v35 = (char *)&v101 - v34;
  __chkstk_darwin(v33, v36);
  uint64_t v38 = (char *)&v101 - v37;
  uint64_t v39 = sub_100009F04(&qword_100325528);
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39, v41);
  uint64_t v43 = (char *)&v101 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v43, (uint64_t)v9 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__versionProvider, v39);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v39);
  v44 = sub_100008EF8(v131, v132);
  id v45 = sub_1001EAFC8(*v44);
  sub_100008EA8((uint64_t)v131);
  Date.init()();
  uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v120 = v38;
  v46(v35, v38, v27);
  v125 = (char *)&v101 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = v28 + 16;
  v102 = v46;
  v46(v125, v35, v27);
  unint64_t v47 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  unint64_t v48 = (v29 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v49 = (v48 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v50 = swift_allocObject();
  uint64_t v126 = v28;
  uint64_t v127 = v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v50 + v47, v35, v27);
  v51 = (void *)(v50 + v48);
  uint64_t v53 = v128;
  unint64_t v52 = v129;
  void *v51 = v128;
  v51[1] = v52;
  uint64_t v124 = v50;
  uint64_t v104 = (uint64_t)v45;
  *(void *)(v50 + v49) = v45;
  sub_1000196B4(v53, v52);
  sub_1000196B4(v53, v52);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  sub_100007288(v54, (uint64_t)qword_10033E748);
  uint64_t v55 = v123;
  uint64_t v56 = v101;
  sub_1000C26A4(v123, v101, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc();
    v131[0] = swift_slowAlloc();
    *(_DWORD *)v59 = 136315138;
    type metadata accessor for UUID();
    sub_10000A668((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v130 = sub_100135190(v60, v61, v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000C274C(v56, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Updating custodian health record %s.", v59, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000C274C(v56, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  }

  v62 = v108;
  v63 = v105;
  uint64_t v64 = v109;
  (*((void (**)(char *, uint64_t, uint64_t))v108 + 2))(v105, (uint64_t)v110 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__storageController, v109);
  Dependency.wrappedValue.getter();
  (*((void (**)(char *, uint64_t))v62 + 1))(v63, v64);
  v65 = sub_100008EF8(v131, v132);
  uint64_t v66 = v111;
  sub_1000C26A4(v55, v111, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  uint64_t v67 = *(unsigned __int8 *)(v106 + 80);
  uint64_t v68 = (v67 + 16) & ~v67;
  uint64_t v109 = v67 | 7;
  v110 = (void *)(v107 + 7);
  unint64_t v69 = (v107 + 7 + v68) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v70 = (v69 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v71 = v55;
  unint64_t v72 = (v70 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v73 = swift_allocObject();
  v108 = type metadata accessor for CustodianHealthRecord;
  sub_1000C2AD4(v66, v73 + v68, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  v74 = (void *)(v73 + v69);
  uint64_t v75 = v118;
  void *v74 = v113;
  v74[1] = v75;
  unint64_t v76 = v73 + v70;
  v77 = v119;
  *(void *)unint64_t v76 = v119;
  *(unsigned char *)(v76 + 8) = v114 & 1;
  *(unsigned char *)(v76 + 9) = (_BYTE)v115;
  *(void *)(v73 + v72) = v112;
  uint64_t v78 = *v65;
  v115 = sub_100008EF8((void *)(*v65 + 56), *(void *)(*v65 + 80));
  sub_1000C26A4(v71, v66, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  uint64_t v79 = (uint64_t)v117;
  uint64_t v80 = v127;
  v102(v117, v125, v127);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56))(v79, 0, 1, v80);
  uint64_t v82 = v128;
  unint64_t v81 = v129;
  sub_1000196B4(v128, v129);
  v83 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v124;
  swift_retain();
  swift_retain();
  id v84 = v77;
  uint64_t v85 = v121;
  sub_1001B98C0(v66, v79, v82, v81, 2u, v104, 0, v121);
  uint64_t v86 = v116;
  v87 = v108;
  sub_1000C26A4(v123, v116, (uint64_t (*)(void))v108);
  uint64_t v88 = (v67 + 48) & ~v67;
  unint64_t v89 = ((unint64_t)v110 + v88) & 0xFFFFFFFFFFFFFFF8;
  v90 = (void *)swift_allocObject();
  v90[2] = v78;
  v90[3] = sub_1000C2B3C;
  v90[4] = v73;
  v90[5] = 0;
  sub_1000C2AD4(v86, (uint64_t)v90 + v88, (uint64_t (*)(void))v87);
  v91 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v90 + v89);
  *v91 = sub_1000C2864;
  v91[1] = v83;
  uint64_t v92 = qword_100320CC8;
  swift_retain();
  swift_retain();
  swift_retain();
  if (v92 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(v85 + *(int *)(v122 + 36)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    v93 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    v93 = &qword_10033E9F8;
  }
  uint64_t v95 = *v93;
  unint64_t v94 = v93[1];
  swift_bridgeObjectRetain();
  id v96 = sub_10028CC20(v95, v94);
  id v97 = [v96 sharedCloudDatabase];
  swift_bridgeObjectRelease();

  sub_100066284(v85, v97, (uint64_t)sub_1000C2C04, (uint64_t)v90);
  swift_release();

  sub_1000C274C(v85, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  swift_release_n();
  swift_release();
  v98 = *(void (**)(char *, uint64_t))(v126 + 8);
  uint64_t v99 = v127;
  v98(v125, v127);
  sub_1000196A0(v128, v129);
  v98(v120, v99);
  return sub_100008EA8((uint64_t)v131);
}

uint64_t sub_1000BE114(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v100 = a6;
  uint64_t v99 = a5;
  v98 = a4;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v103 = *(void *)(v9 - 8);
  uint64_t v104 = v9;
  __chkstk_darwin(v9, v10);
  v102 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CustodianRecoveryRecords(0);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v89 - v18;
  uint64_t v20 = type metadata accessor for SHA256();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  SHA256.init()();
  uint64_t v25 = sub_100254E08((uint64_t)v24, a2, a3);
  unint64_t v27 = v26;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  uint64_t v28 = *(int *)(v12 + 24);
  uint64_t v101 = a1;
  uint64_t v29 = a1 + v28;
  uint64_t v95 = type metadata accessor for CustodianHealthRecord();
  uint64_t v30 = *(int *)(v95 + 28);
  uint64_t v97 = v29;
  uint64_t v31 = (uint64_t *)(v29 + v30);
  uint64_t v33 = *v31;
  unint64_t v32 = v31[1];
  unint64_t v93 = v32 >> 60;
  uint64_t v96 = v12;
  if (v32 >> 60 == 15)
  {
    sub_100013140(v25, v27);
    uint64_t v34 = v33;
    sub_1000196A0(v33, v32);
    uint64_t v35 = v25;
    sub_1000196A0(v25, v27);
    unint64_t v36 = v27;
LABEL_10:
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v47 = v104;
    uint64_t v48 = sub_100007288(v104, (uint64_t)qword_10033E778);
    unint64_t v49 = v102;
    uint64_t v50 = v103;
    v51 = *(void (**)(char *))(v103 + 16);
    uint64_t v94 = v48;
    v51(v102);
    sub_1000C26A4(v101, (uint64_t)v16, type metadata accessor for CustodianRecoveryRecords);
    sub_1000196B4(v34, v32);
    uint64_t v40 = v35;
    uint64_t v52 = v35;
    unint64_t v42 = v36;
    sub_100013140(v52, v36);
    sub_1000196B4(v34, v32);
    sub_100013140(v40, v36);
    uint64_t v53 = Logger.logObject.getter();
    LODWORD(v101) = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, (os_log_type_t)v101))
    {
      uint64_t v92 = v40;
      os_log_t v90 = v53;
      unint64_t v91 = v42 >> 62;
      uint64_t v54 = swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      uint64_t v112 = v89;
      *(_DWORD *)uint64_t v54 = 136315906;
      if (qword_100320C08 != -1) {
        swift_once();
      }
      uint64_t v56 = qword_100325368;
      unint64_t v55 = unk_100325370;
      swift_bridgeObjectRetain();
      v110[0] = sub_100135190(v56, v55, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v54 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A668((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      v110[0] = sub_100135190(v57, v58, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C274C((uint64_t)v16, type metadata accessor for CustodianRecoveryRecords);
      uint64_t v96 = v54;
      *(_WORD *)(v54 + 22) = 2080;
      if (v93 <= 0xE) {
        uint64_t v59 = v34;
      }
      else {
        uint64_t v59 = 0;
      }
      if (v93 <= 0xE) {
        unint64_t v60 = v32;
      }
      else {
        unint64_t v60 = 0xC000000000000000;
      }
      uint64_t v40 = v92;
      switch(v60 >> 62)
      {
        case 1uLL:
          if (v59 >> 32 < (int)v59)
          {
            __break(1u);
LABEL_63:
            __break(1u);
          }
          sub_1000196B4(v34, v32);
          sub_100013140(v59, v60);
          uint64_t v63 = sub_1000C1454((int)v59, v59 >> 32, v60 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000C1714);
          unint64_t v65 = v67;
          sub_100013198(v59, v60);
          if (v65) {
            goto LABEL_38;
          }
          goto LABEL_32;
        case 2uLL:
          uint64_t v61 = *(void *)(v59 + 16);
          uint64_t v62 = *(void *)(v59 + 24);
          sub_1000196B4(v34, v32);
          swift_retain();
          swift_retain();
          uint64_t v63 = sub_1000C1454(v61, v62, v60 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000C1714);
          unint64_t v65 = v64;
          swift_release();
          swift_release();
          if (v65) {
            goto LABEL_38;
          }
LABEL_32:
          uint64_t v108 = v59;
          unint64_t v109 = v60;
          sub_100013140(v59, v60);
          sub_100009F04(&qword_100325518);
          if (swift_dynamicCast())
          {
            sub_100041E8C(&v105, (uint64_t)v110);
            sub_100008EF8(v110, v111);
            if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
            {
              sub_100008EF8(v110, v111);
              dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
              sub_100013198(v59, v60);
              unint64_t v65 = *((void *)&v105 + 1);
              uint64_t v63 = v105;
              sub_100008EA8((uint64_t)v110);
              goto LABEL_39;
            }
            sub_100008EA8((uint64_t)v110);
          }
          else
          {
            uint64_t v107 = 0;
            long long v105 = 0u;
            long long v106 = 0u;
            sub_100006574((uint64_t)&v105, &qword_100325520);
          }
          uint64_t v63 = sub_1000C13A0(v59, v60);
          unint64_t v65 = v68;
LABEL_38:
          sub_100013198(v59, v60);
LABEL_39:
          uint64_t v69 = v96;
          v110[0] = sub_100135190(v63, v65, &v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000196A0(v34, v32);
          uint64_t v70 = v34;
          uint64_t v71 = (uint8_t *)v69;
          sub_1000196A0(v70, v32);
          *(_WORD *)(v69 + 32) = 2080;
          uint64_t v73 = v103;
          uint64_t v72 = v104;
          switch((int)v91)
          {
            case 1:
              if (v40 >> 32 < (int)v40) {
                goto LABEL_63;
              }
              sub_100013140(v40, v42);
              uint64_t v76 = sub_1000C1454((int)v40, v40 >> 32, v42 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000C1714);
              unint64_t v78 = v81;
              if (v81) {
                goto LABEL_54;
              }
LABEL_47:
              uint64_t v108 = v40;
              unint64_t v109 = v42;
              sub_100013140(v40, v42);
              sub_100009F04(&qword_100325518);
              if (swift_dynamicCast())
              {
                sub_100041E8C(&v105, (uint64_t)v110);
                sub_100008EF8(v110, v111);
                if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
                {
                  sub_100008EF8(v110, v111);
                  dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
                  sub_100013198(v40, v42);
                  unint64_t v78 = *((void *)&v105 + 1);
                  uint64_t v76 = v105;
                  sub_100008EA8((uint64_t)v110);
                  goto LABEL_55;
                }
                sub_100008EA8((uint64_t)v110);
              }
              else
              {
                uint64_t v107 = 0;
                long long v105 = 0u;
                long long v106 = 0u;
                sub_100006574((uint64_t)&v105, &qword_100325520);
              }
              uint64_t v79 = sub_1000C13A0(v40, v42);
LABEL_53:
              uint64_t v76 = v79;
              unint64_t v78 = v80;
LABEL_54:
              sub_100013198(v40, v42);
LABEL_55:
              v110[0] = sub_100135190(v76, v78, &v112);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_100013198(v40, v42);
              sub_100013198(v40, v42);
              os_log_t v82 = v90;
              _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v101, "%s - checksum has changed for %s. Old Hash: %s New Hash: %s", v71, 0x2Au);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(char *, uint64_t))(v73 + 8))(v102, v72);
              break;
            case 2:
              uint64_t v74 = *(void *)(v40 + 16);
              uint64_t v75 = *(void *)(v40 + 24);
              sub_100013140(v40, v42);
              swift_retain();
              swift_retain();
              uint64_t v76 = sub_1000C1454(v74, v75, v42 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000C1714);
              unint64_t v78 = v77;
              swift_release();
              swift_release();
              if (!v78) {
                goto LABEL_47;
              }
              goto LABEL_54;
            case 3:
              memset(v110, 0, 14);
              goto LABEL_44;
            default:
              v110[0] = v40;
              LOWORD(v110[1]) = v42;
              BYTE2(v110[1]) = BYTE2(v42);
              BYTE3(v110[1]) = BYTE3(v42);
              BYTE4(v110[1]) = BYTE4(v42);
              BYTE5(v110[1]) = BYTE5(v42);
LABEL_44:
              uint64_t v79 = static String._fromUTF8Repairing(_:)();
              goto LABEL_53;
          }
          break;
        case 3uLL:
          memset(v110, 0, 14);
          sub_1000196B4(v34, v32);
          goto LABEL_29;
        default:
          v110[0] = v59;
          LOWORD(v110[1]) = v60;
          BYTE2(v110[1]) = BYTE2(v60);
          BYTE3(v110[1]) = BYTE3(v60);
          BYTE4(v110[1]) = BYTE4(v60);
          BYTE5(v110[1]) = BYTE5(v60);
          sub_1000196B4(v34, v32);
LABEL_29:
          uint64_t v63 = static String._fromUTF8Repairing(_:)();
          unint64_t v65 = v66;
          sub_100013198(v59, v60);
          goto LABEL_39;
      }
    }
    else
    {
      sub_1000C274C((uint64_t)v16, type metadata accessor for CustodianRecoveryRecords);
      sub_1000196A0(v34, v32);
      sub_1000196A0(v34, v32);
      sub_100013198(v40, v42);
      sub_100013198(v40, v42);

      (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v47);
    }
    v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      v110[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v85 = 136315138;
      if (qword_100320C08 != -1) {
        swift_once();
      }
      uint64_t v86 = qword_100325368;
      unint64_t v87 = unk_100325370;
      swift_bridgeObjectRetain();
      *(void *)&long long v105 = sub_100135190(v86, v87, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "%s - updating health record with new checksum", v85, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100013140(v40, v42);
    sub_1000BD59C(v97, v40, v42, 1, v98, 2, v99, v100);
    sub_100013198(v40, v42);
    return sub_100013198(v40, v42);
  }
  sub_1000196B4(v33, v32);
  sub_100013140(v25, v27);
  char v37 = sub_100012680(v33, v32, v25, v27);
  uint64_t v35 = v25;
  sub_100013198(v25, v27);
  uint64_t v34 = v33;
  sub_1000196A0(v33, v32);
  unint64_t v36 = v27;
  if ((v37 & 1) == 0) {
    goto LABEL_10;
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  sub_100007288(v104, (uint64_t)qword_10033E778);
  sub_1000C26A4(v101, (uint64_t)v19, type metadata accessor for CustodianRecoveryRecords);
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  uint64_t v40 = v35;
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v41 = swift_slowAlloc();
    uint64_t v104 = swift_slowAlloc();
    v110[0] = v104;
    *(_DWORD *)uint64_t v41 = 136315394;
    unint64_t v42 = v36;
    if (qword_100320C08 != -1) {
      swift_once();
    }
    uint64_t v44 = qword_100325368;
    unint64_t v43 = unk_100325370;
    swift_bridgeObjectRetain();
    *(void *)&long long v105 = sub_100135190(v44, v43, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2080;
    type metadata accessor for UUID();
    sub_10000A668((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v105 = sub_100135190(v45, v46, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000C274C((uint64_t)v19, type metadata accessor for CustodianRecoveryRecords);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - custodian %s recovery key checksum is valid.", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000C274C((uint64_t)v19, type metadata accessor for CustodianRecoveryRecords);

    unint64_t v42 = v36;
  }
  sub_1000BD59C(v97, 0, 0xF000000000000000, 1, v98, 1, v99, v100);
  return sub_100013198(v40, v42);
}

void sub_1000BF2E4(uint64_t a1, void (*a2)())
{
  type metadata accessor for AACustodianError(0);
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10000A668((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
  _BridgedStoredNSError.init(_:userInfo:)();
  a2();
}

uint64_t sub_1000BF3A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CustodianHealthRecord();
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C26A4(a1, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v15, a2, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v15, 0, 1, v20);
  sub_1000196B4(a3, a4);
  return sub_1001B98C0((uint64_t)v19, (uint64_t)v15, a3, a4, 2u, a5, 0, a6);
}

uint64_t sub_1000BF54C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, int a6, int a7)
{
  v44[3] = a6;
  LODWORD(v45) = a7;
  uint64_t v48 = a5;
  uint64_t v11 = type metadata accessor for CustodianHealthRecord();
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)v44 - v17;
  uint64_t v19 = sub_100009F04(&qword_100323580);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (uint64_t *)((char *)v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v22, &qword_100323580);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v46 = a4;
    uint64_t v47 = a3;
    uint64_t v23 = *v22;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E778);
    sub_1000C26A4(a2, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      v50[0] = v45;
      *(_DWORD *)uint64_t v27 = 136315650;
      if (qword_100320C08 != -1) {
        swift_once();
      }
      uint64_t v29 = qword_100325368;
      unint64_t v30 = unk_100325370;
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_100135190(v29, v30, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A668((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_100135190(v31, v32, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C274C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      *(_WORD *)(v27 + 22) = 2112;
      uint64_t v33 = _convertErrorToNSError(_:)();
      uint64_t v49 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s - error updating custodian health record %s: %@", (uint8_t *)v27, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000C274C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    _convertErrorToNSError(_:)();
    unint64_t v42 = (void *)(v48 + qword_10032F900);
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    sub_100267790();
    swift_errorRetain();
    v47(v23);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E778);
    sub_1000C26A4(a2, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v46 = a4;
      uint64_t v47 = a3;
      uint64_t v37 = swift_slowAlloc();
      v50[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315394;
      if (qword_100320C08 != -1) {
        swift_once();
      }
      uint64_t v38 = qword_100325368;
      unint64_t v39 = unk_100325370;
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_100135190(v38, v39, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A668((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_100135190(v40, v41, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C274C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "%s - custodian health record %s was updated.", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v47;
    }
    else
    {
      sub_1000C274C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    }
    [self postRecoveryContactChangedNotification];
    a3(0);
    sub_100267790();
    return sub_100006574((uint64_t)v22, &qword_100323580);
  }
}

uint64_t sub_1000BFD0C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v150 = a6;
  uint64_t v156 = a5;
  v157 = a3;
  uint64_t v148 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148, v13);
  v145 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for DispatchQoS();
  uint64_t v144 = *(void *)(v146 - 8);
  __chkstk_darwin(v146, v15);
  v143 = (char *)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for DispatchTime();
  v154 = *(void **)(v151 - 8);
  uint64_t v18 = __chkstk_darwin(v151, v17);
  v141 = (char *)&v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v142 = (char *)&v126 - v21;
  uint64_t v140 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v138 = *(void *)(v140 - 8);
  __chkstk_darwin(v140, v22);
  v137 = (char *)&v126 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100009F04((uint64_t *)&unk_10032E120);
  __chkstk_darwin(v24 - 8, v25);
  v155 = (char *)&v126 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for CustodianHealthRecord();
  uint64_t v149 = *(void *)(v136 - 8);
  uint64_t v27 = *(void *)(v149 + 64);
  uint64_t v29 = __chkstk_darwin(v136, v28);
  uint64_t v139 = (uint64_t)&v126 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29, v30);
  uint64_t v133 = (uint64_t)&v126 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  v134 = (char *)&v126 - v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v132 = (uint64_t)&v126 - v38;
  uint64_t v40 = __chkstk_darwin(v37, v39);
  uint64_t v135 = (uint64_t)&v126 - v41;
  __chkstk_darwin(v40, v42);
  uint64_t v44 = (char *)&v126 - v43;
  uint64_t v45 = sub_100009F04(&qword_100323580);
  uint64_t v47 = __chkstk_darwin(v45, v46);
  v153 = (uint64_t *)((char *)&v126 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v47, v49);
  v51 = (uint64_t *)((char *)&v126 - v50);
  sub_100019730(a1, (uint64_t)&v126 - v50, &qword_100323580);
  uint64_t v152 = v45;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v129 = a7;
    uint64_t v130 = a8;
    uint64_t v52 = *v51;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    uint64_t v54 = sub_100007288(v53, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v128 = v54;
    unint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    BOOL v57 = os_log_type_enabled(v55, v56);
    uint64_t v131 = a2;
    if (v57)
    {
      unint64_t v58 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v58 = 136315138;
      id v127 = v58 + 4;
      uint64_t v159 = v52;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v59 = String.init<A>(describing:)();
      uint64_t v159 = sub_100135190(v59, v60, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Error saving to shared DB: %s", v58, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v66 = (uint64_t)v155;
    if (v156 <= 2 && (swift_getErrorValue(), (uint64_t v67 = sub_1001A84EC(v160)) != 0))
    {
      unint64_t v68 = (void *)v67;
      type metadata accessor for CKError(0);
      uint64_t v159 = 14;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10000A668((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v69 = (void *)aBlock[0];
      aBlock[6] = aBlock[0];
      _BridgedStoredNSError.code.getter();

      uint64_t v70 = (void *)sub_1001A8B9C(v159, v68);
      uint64_t v71 = v149;
      uint64_t v126 = v52;
      id v127 = v68;
      if (v70)
      {
        uint64_t v72 = (void *)sub_1001A85D0(v68);
        if (v72)
        {
          uint64_t v73 = v71;
          uint64_t v74 = v136;
          int v75 = *(unsigned __int8 *)(v150 + *(int *)(v136 + 36));
          id v76 = v72;
          sub_1001B9B90(v76, v75, v66);
          v154 = v76;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v66, 0, 1, v74);
          uint64_t v100 = v135;
          sub_1000C2AD4(v66, v135, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
          uint64_t v101 = v132;
          sub_1000C26A4(v100, v132, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
          v102 = Logger.logObject.getter();
          os_log_type_t v103 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v102, v103))
          {
            long long v105 = (uint8_t *)swift_slowAlloc();
            aBlock[0] = swift_slowAlloc();
            *(_DWORD *)long long v105 = 136315138;
            uint64_t v106 = UUID.uuidString.getter();
            uint64_t v159 = sub_100135190(v106, v107, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000C274C(v101, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
            _os_log_impl((void *)&_mh_execute_header, v102, v103, "Trying to resave to shared DB after conflict resolution %s", v105, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_1000C274C(v101, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
          }

          uint64_t v108 = v131;
          v155 = (char *)(v156 + 1);
          uint64_t v156 = (uint64_t)sub_100008EF8((void *)(v131 + 56), *(void *)(v131 + 80));
          uint64_t v109 = v135;
          uint64_t v110 = v130;
          uint64_t v111 = v129;
          v129(v135);
          uint64_t v112 = v133;
          sub_1000C26A4(v109, v133, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
          unint64_t v113 = (*(unsigned __int8 *)(v149 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80);
          int v114 = (void *)swift_allocObject();
          v115 = v157;
          v114[2] = v108;
          v114[3] = v115;
          uint64_t v116 = v155;
          v114[4] = a4;
          v114[5] = v116;
          sub_1000C2AD4(v112, (uint64_t)v114 + v113, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
          v117 = (void *)((char *)v114 + ((v27 + v113 + 7) & 0xFFFFFFFFFFFFFFF8));
          void *v117 = v111;
          v117[1] = v110;
          uint64_t v118 = qword_100320CC8;
          swift_retain();
          swift_retain();
          swift_retain();
          if (v118 != -1) {
            swift_once();
          }
          uint64_t v119 = (uint64_t)v134;
          v120 = v154;
          if (v134[*(int *)(v136 + 36)] == 1)
          {
            if (qword_100320CD8 != -1) {
              swift_once();
            }
            uint64_t v121 = &qword_10033EA08;
          }
          else
          {
            if (qword_100320CD0 != -1) {
              swift_once();
            }
            uint64_t v121 = &qword_10033E9F8;
          }
          uint64_t v123 = *v121;
          unint64_t v122 = v121[1];
          swift_bridgeObjectRetain();
          id v124 = sub_10028CC20(v123, v122);
          id v125 = [v124 sharedCloudDatabase:v126];
          swift_bridgeObjectRelease();

          sub_100066284(v119, v125, (uint64_t)sub_1000C2C04, (uint64_t)v114);
          swift_release();

          sub_1000C274C(v119, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
          swift_errorRelease();
          return sub_1000C274C(v135, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        }
      }
      if (sub_1001A8AB4(v68) || sub_1001A8ABC(v68) || sub_1001A8AC4(v68) || sub_1001A8ACC(v68) || sub_1001A8AD4(v68))
      {
        sub_1001A89C0((uint64_t)v68);
        sub_1000093D0();
        uint64_t v77 = v138;
        unint64_t v78 = v137;
        uint64_t v79 = v140;
        (*(void (**)(char *, void, uint64_t))(v138 + 104))(v137, enum case for DispatchQoS.QoSClass.default(_:), v140);
        v153 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
        unint64_t v80 = v141;
        static DispatchTime.now()();
        unint64_t v81 = v142;
        + infix(_:_:)();
        os_log_t v82 = (char *)v154[1];
        ++v154;
        v155 = v82;
        ((void (*)(char *, uint64_t))v82)(v80, v151);
        uint64_t v83 = v139;
        sub_1000C26A4(v150, v139, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        unint64_t v84 = (*(unsigned __int8 *)(v71 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        unint64_t v85 = (v27 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v86 = a4;
        unint64_t v87 = (v85 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v88 = (v87 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v89 = swift_allocObject();
        sub_1000C2AD4(v83, v89 + v84, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        *(void *)(v89 + v85) = v131;
        os_log_t v90 = (void *)(v89 + v87);
        uint64_t v91 = v130;
        void *v90 = v129;
        v90[1] = v91;
        uint64_t v92 = v157;
        *(void *)(v89 + v88) = v156;
        unint64_t v93 = (void *)(v89 + ((v88 + 15) & 0xFFFFFFFFFFFFFFF8));
        void *v93 = v92;
        v93[1] = v86;
        aBlock[4] = (uint64_t)sub_1000C2DD0;
        aBlock[5] = v89;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100007244;
        aBlock[3] = (uint64_t)&unk_1002F99F8;
        uint64_t v94 = _Block_copy(aBlock);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v95 = v143;
        static DispatchQoS.unspecified.getter();
        uint64_t v159 = (uint64_t)_swiftEmptyArrayStorage;
        sub_10000A668((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100009F04(&qword_10032BB00);
        sub_10000A534();
        uint64_t v96 = v145;
        uint64_t v97 = v148;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        v98 = v153;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();

        _Block_release(v94);
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v147 + 8))(v96, v97);
        (*(void (**)(char *, uint64_t))(v144 + 8))(v95, v146);
        ((void (*)(char *, uint64_t))v155)(v81, v151);
        return swift_release();
      }
      uint64_t v99 = (uint64_t)v153;
      void *v153 = v52;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v157(v99);
    }
    else
    {
      uint64_t v99 = (uint64_t)v153;
      void *v153 = v52;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v157(v99);
    }
    swift_errorRelease();
    return sub_100006574(v99, &qword_100323580);
  }
  sub_1000C2AD4((uint64_t)v51, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  sub_100007288(v61, (uint64_t)qword_10033E7A8);
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    unint64_t v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Cloud record saved to shared DB in CloudKitStorage.", v64, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
  sub_10005E978((uint64_t)v44, 0, 2, (uint64_t)v157, a4);
  return sub_1000C274C((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
}

uint64_t sub_1000C0EA4(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v51 = a7;
  uint64_t v52 = a4;
  uint64_t v48 = a3;
  uint64_t v50 = a2;
  uint64_t v49 = type metadata accessor for CustodianHealthRecord();
  uint64_t v45 = *(void *)(v49 - 8);
  uint64_t v10 = *(void **)(v45 + 64);
  uint64_t v12 = __chkstk_darwin(v49, v11);
  uint64_t v47 = (uint64_t)&v44 - (((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v53 = (uint64_t)&v44 - v15;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v44 - v17;
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E7A8);
  sub_1000C26A4(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v46 = a1;
  if (v22)
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    uint64_t v44 = a5;
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v24 = UUID.uuidString.getter();
    uint64_t v54 = sub_100135190(v24, v25, &v55);
    a5 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000C274C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Trying to resave to shared DB after a delay following a recoverable/transient error %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000C274C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  }

  uint64_t v26 = (char *)a5 + 1;
  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v27 = v50;
    uint64_t v44 = sub_100008EF8((void *)(v50 + 56), *(void *)(v50 + 80));
    uint64_t v28 = v52;
    uint64_t v29 = v46;
    uint64_t v30 = v48;
    v48(v46);
    uint64_t v31 = v29;
    uint64_t v32 = v47;
    sub_1000C26A4(v31, v47, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    unint64_t v33 = (*(unsigned __int8 *)(v45 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
    unint64_t v34 = ((unint64_t)v10 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v27;
    v10[3] = a6;
    v10[4] = v51;
    v10[5] = v26;
    sub_1000C2AD4(v32, (uint64_t)v10 + v33, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    uint64_t v35 = (void *)((char *)v10 + v34);
    *uint64_t v35 = v30;
    v35[1] = v28;
    uint64_t v36 = qword_100320CC8;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v36 == -1) {
      goto LABEL_8;
    }
  }
  swift_once();
LABEL_8:
  if (*(unsigned char *)(v53 + *(int *)(v49 + 36)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v37 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v37 = &qword_10033E9F8;
  }
  uint64_t v39 = *v37;
  unint64_t v38 = v37[1];
  swift_bridgeObjectRetain();
  id v40 = sub_10028CC20(v39, v38);
  id v41 = [v40 sharedCloudDatabase];
  swift_bridgeObjectRelease();

  uint64_t v42 = v53;
  sub_100066284(v53, v41, (uint64_t)sub_1000C2C04, (uint64_t)v10);
  swift_release();

  return sub_1000C274C(v42, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
}

uint64_t sub_1000C13A0(uint64_t a1, unint64_t a2)
{
  sub_100013140(a1, a2);
  sub_1000C1558(a1, a2);
  sub_100013198(a1, a2);
  uint64_t v4 = static String._fromUTF8Repairing(_:)();
  swift_release();
  return v4;
}

uint64_t sub_1000C1418@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000C1454(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t result = (uint64_t)sub_1000C1504(v9, v15, a4);
  if (v4) {
    return v16;
  }
  return result;
}

void *sub_1000C1504(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

void *sub_1000C1558(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v10 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v10)
      {
        if (v10 >= 1)
        {
          sub_100009F04((uint64_t *)&unk_1003216A0);
          uint64_t v9 = (void *)swift_allocObject();
          size_t v13 = j__malloc_size(v9);
          v9[2] = v10;
          v9[3] = 2 * v13 - 64;
        }
        sub_100013140(a1, a2);
        uint64_t v14 = Data._copyContents(initializing:)();
        sub_100013198(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        if (v14 != v10)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x1000C1704);
        }
      }
      return v9;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v10 = v11 - v12;
      if (!__OFSUB__(v11, v12)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v9;
    default:
      uint64_t v10 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1000C1714@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000C174C(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = a1;
  uint64_t v35 = *v2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  unint64_t v38 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v39 = (char *)&v32 - v10;
  uint64_t v11 = sub_100009F04(&qword_100321FF8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007288(v16, (uint64_t)qword_10033E778);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v32 = a2;
    uint64_t v33 = v5;
    uint64_t v34 = v4;
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    v41[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315138;
    if (qword_100320C08 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_100325368;
    unint64_t v21 = unk_100325370;
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_100135190(v20, v21, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s - started.", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = v33;
    uint64_t v4 = v34;
    a2 = v32;
  }
  else
  {
  }
  uint64_t v22 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v37 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__custodianStorage, v11);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t v23 = sub_100008EF8(v41, v41[3]);
  uint64_t v24 = (void *)swift_allocObject();
  uint64_t v25 = v36;
  v24[2] = v22;
  v24[3] = v25;
  uint64_t v26 = v35;
  v24[4] = a2;
  v24[5] = v26;
  uint64_t v27 = sub_100008EF8((void *)(*v23 + 16), *(void *)(*v23 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  swift_retain();
  uint64_t v28 = v38;
  sub_10000A280();
  uint64_t v29 = (uint64_t)v39;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v30(v28, v4);
  sub_100008EF8((void *)(*v27 + 16), *(void *)(*v27 + 40));
  sub_1000B3370(v29, (uint64_t)sub_1000C1BD4, (uint64_t)v24);
  v30((char *)v29, v4);
  swift_release();
  return sub_100008EA8((uint64_t)v41);
}

uint64_t sub_1000C1BCC()
{
  return sub_10007032C(48);
}

uint64_t sub_1000C1BD4(uint64_t a1, char a2)
{
  return sub_1000B9F30(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1000C1BE4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a4;
  uint64_t v8 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v34 + 64);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v35 = (uint64_t)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v37 = a2;
  dispatch_group_enter(a2);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E778);
  sub_1000C26A4(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v31 = a1;
    uint64_t v32 = a3;
    uint64_t v33 = v4;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v39 = v30;
    *(_DWORD *)uint64_t v18 = 136315394;
    if (qword_100320C08 != -1) {
      swift_once();
    }
    uint64_t v19 = qword_100325368;
    unint64_t v20 = unk_100325370;
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_100135190(v19, v20, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    type metadata accessor for UUID();
    sub_10000A668((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = sub_100135190(v21, v22, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000C274C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s - performing health check for %s.", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v31;
  }
  else
  {
    sub_1000C274C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  }
  uint64_t v23 = v35;
  sub_1000C26A4(a1, v35, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  unint64_t v24 = (*(unsigned __int8 *)(v34 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v36;
  sub_1000C2AD4(v23, v25 + v24, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  uint64_t v26 = v37;
  *(void *)(v25 + ((v9 + v24 + 7) & 0xFFFFFFFFFFFFFFF8)) = v37;
  swift_retain();
  uint64_t v27 = v26;
  sub_1000BB1AC(a1, sub_1000C2194, v25);
  return swift_release();
}

uint64_t sub_1000C2014()
{
  return sub_10007032C(40);
}

uint64_t sub_1000C201C()
{
  return sub_10019FA5C(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000C2048()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_1000C2194(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(NSObject **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1000BBE10(a1, v5, v1 + v4, v6);
}

uint64_t sub_1000C2234()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();

  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000C2380(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v4 = v1[2];
  unint64_t v5 = (char *)v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000BBF54(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000C2424()
{
  uint64_t v1 = *(void *)(type metadata accessor for FetchRecoveryRecordsRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_1000C2560(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for FetchRecoveryRecordsRequest(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = (uint64_t *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100025248;
  return sub_100238028(a1, v7, v8, v10, v9, v12, v13);
}

uint64_t sub_1000C26A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C270C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000C2744(uint64_t a1)
{
  sub_1000BF2E4(a1, *(void (**)())(v1 + 16));
}

uint64_t sub_1000C274C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000C27AC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  unint64_t v6 = *(void *)(v0 + v5 + 8);
  if (v6 >> 60 != 15) {
    sub_100013198(*(void *)(v0 + v5), v6);
  }

  return _swift_deallocObject(v0, ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1000C2864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + v7);
  unint64_t v9 = *(void *)(v2 + v7 + 8);
  uint64_t v10 = *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000BF3A0(a1, v2 + v6, v8, v9, v10, a2);
}

uint64_t sub_1000C2920()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianHealthRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  v6(v0 + v3 + v1[5], v5);
  uint64_t v7 = v0 + v3 + v1[6];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  unint64_t v9 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  unint64_t v11 = (((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_100013198(*(void *)(v0 + v3 + v1[8]), *(void *)(v0 + v3 + v1[8] + 8));
  swift_release();

  return _swift_deallocObject(v0, ((v11 + 17) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1000C2AD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C2B3C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianHealthRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void (**)(uint64_t))(v1 + v5);
  uint64_t v8 = *(void *)(v1 + v5 + 8);
  uint64_t v9 = *(void *)(v1 + v6);
  int v10 = *(unsigned __int8 *)(v1 + v6 + 8);
  int v11 = *(unsigned __int8 *)(v1 + v6 + 9);

  return sub_1000BF54C(a1, v1 + v4, v7, v8, v9, v10, v11);
}

uint64_t sub_1000C2C08()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianHealthRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  v6(v0 + v3 + v1[5], v5);
  uint64_t v7 = v0 + v3 + v1[6];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v0 + v3 + v1[8]), *(void *)(v0 + v3 + v1[8] + 8));
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 16, v2 | 7);
}

uint64_t sub_1000C2DD0()
{
  uint64_t v1 = *(void *)(type metadata accessor for CustodianHealthRecord() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v2;
  uint64_t v7 = *(void *)(v0 + v3);
  uint64_t v8 = *(void (**)(void))(v0 + v4);
  uint64_t v9 = *(void *)(v0 + v4 + 8);
  unint64_t v10 = *(void **)(v0 + v5);
  int v11 = (uint64_t *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];

  return sub_1000C0EA4(v6, v7, v8, v9, v10, v12, v13);
}

uint64_t sub_1000C2E90()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianHealthRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  v6(v0 + v3 + v1[5], v5);
  uint64_t v7 = v0 + v3 + v1[6];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v0 + v3 + v1[8]), *(void *)(v0 + v3 + v1[8] + 8));
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1000C303C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianHealthRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1[2];
  uint64_t v6 = (void (*)(void))v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + v4;
  unint64_t v10 = (char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v11 = *(void (**)(void))v10;
  uint64_t v12 = *((void *)v10 + 1);

  return sub_1000BFD0C(a1, v5, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000C30E4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000C311C()
{
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_1000C3124()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000C3204(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = (void (*)(uint64_t))v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000BAB78(a1, v4, v5, v6, v7);
}

void sub_1000C32B0(void *a1@<X8>)
{
  *a1 = &off_1002F4110;
}

id sub_1000C32C0()
{
  id v0 = sub_1000C3864();
  uint64_t v1 = (objc_class *)type metadata accessor for AppInstallObserver();
  uint64_t v2 = (char *)objc_allocWithZone(v1);
  *(void *)&v2[OBJC_IVAR____TtC13appleaccountd18AppInstallObserver_observers] = v0;
  v4.receiver = v2;
  v4.super_class = v1;
  id result = [super init];
  qword_10033E840 = (uint64_t)result;
  return result;
}

uint64_t sub_1000C3320(void *a1)
{
  uint64_t v3 = v1;
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E700);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "AppInstallObserver: Handling distributed notification.", v8, 2u);
    swift_slowDealloc();
  }

  if (!xpc_dictionary_get_string(a1, _xpc_event_key_name))
  {
    sub_1000C3ADC();
    swift_allocError();
    char v19 = 5;
LABEL_17:
    *uint64_t v18 = v19;
    return swift_willThrow();
  }
  uint64_t v10 = String.init(cString:)();
  unint64_t v11 = v9;
  if (v10 == 0xD00000000000002ELL && v9 == 0x800000010029C180
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    int v12 = 1;
    goto LABEL_10;
  }
  if ((v10 != 0xD000000000000030 || v11 != 0x800000010029C1B0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(v10, v11, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "AppInstallObserver: Ignoring event %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_1000C3ADC();
    swift_allocError();
    char v19 = 4;
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  int v12 = 0;
LABEL_10:
  uint64_t result = sub_1000C3B30(a1);
  if (v2) {
    return result;
  }
  uint64_t v14 = result;
  uint64_t v15 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd18AppInstallObserver_observers);
  uint64_t v16 = *(void *)(v15 + 16);
  if (v12)
  {
    if (v16)
    {
      os_log_type_t v17 = (void *)(v15 + 32);
      swift_bridgeObjectRetain();
      do
      {
        sub_100008EF8(v17, v17[3]);
        sub_10019D558(v14);
        v17 += 5;
        --v16;
      }
      while (v16);
LABEL_24:
      swift_bridgeObjectRelease();
    }
  }
  else if (v16)
  {
    unint64_t v20 = (void *)(v15 + 32);
    swift_bridgeObjectRetain();
    do
    {
      sub_100008EF8(v20, v20[3]);
      sub_10019D558(v14);
      v20 += 5;
      --v16;
    }
    while (v16);
    goto LABEL_24;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C3718(int a1, xpc_object_t xstring)
{
  if (xpc_string_get_string_ptr(xstring))
  {
    Swift::Int v2 = String.init(cString:)();
    sub_10027FE90(&v5, v2, v3);
    swift_bridgeObjectRelease();
  }
  return 1;
}

uint64_t sub_1000C3774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

id sub_1000C37FC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppInstallObserver();
  return [super dealloc];
}

uint64_t type metadata accessor for AppInstallObserver()
{
  return self;
}

id sub_1000C3864()
{
  sub_100009F04(&qword_100325570);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1002A9C00;
  uint64_t v1 = type metadata accessor for DaemonAccountStore();
  uint64_t v2 = swift_allocObject();
  id result = [self defaultStore];
  if (result)
  {
    *(void *)(v2 + 16) = result;
    *(void *)(v2 + 24) = [self sharedInstance];
    v17[3] = v1;
    v17[4] = &off_1002F66C0;
    v17[0] = v2;
    uint64_t v15 = type metadata accessor for DaemonTaskDispatcher();
    uint64_t v16 = &off_1002F68F8;
    *(void *)&long long v14 = swift_allocObject();
    uint64_t v4 = type metadata accessor for DataclassAppInstallObserving();
    Swift::Int v5 = (void *)swift_allocObject();
    uint64_t v6 = sub_1000084BC((uint64_t)v17, v1);
    __chkstk_darwin(v6, v6);
    uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    uint64_t v10 = *v8;
    v5[11] = v1;
    v5[12] = &off_1002F66C0;
    v5[8] = v10;
    unint64_t v11 = self;
    swift_retain();
    swift_retain();
    id v12 = [v11 dataclassBundleMap:v14];
    uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v5[7] = sub_1001211A8(v13);
    sub_100041E8C(&v14, (uint64_t)(v5 + 2));
    sub_100008EA8((uint64_t)v17);
    swift_release();
    swift_release();
    *(void *)(v0 + 56) = v4;
    *(void *)(v0 + 64) = &off_1002FEA98;
    *(void *)(v0 + 32) = v5;
    return (id)v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1000C3ADC()
{
  unint64_t result = qword_100325578;
  if (!qword_100325578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100325578);
  }
  return result;
}

uint64_t sub_1000C3B30(void *a1)
{
  xpc_object_t v2 = xpc_dictionary_get_dictionary(a1, "UserInfo");
  if (v2)
  {
    Swift::Int v3 = v2;
    xpc_object_t v4 = xpc_dictionary_get_array(v2, "bundleIDs");
    if (v4)
    {
      Swift::Int v5 = v4;
      if (xpc_dictionary_get_BOOL(v3, "isPlaceholder"))
      {
        sub_1000C3ADC();
        swift_allocError();
        char v7 = 1;
LABEL_16:
        char *v6 = v7;
        swift_willThrow();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        return v1;
      }
      if (xpc_dictionary_get_BOOL(v3, "isForcedUpdate"))
      {
        sub_1000C3ADC();
        swift_allocError();
        char v7 = 2;
        goto LABEL_16;
      }
      uint64_t v16 = &_swiftEmptySetSingleton;
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = &v16;
      uint64_t v1 = swift_allocObject();
      *(void *)(v1 + 16) = sub_1000C3EA4;
      *(void *)(v1 + 24) = v9;
      aBlock[4] = sub_1000C3EBC;
      aBlock[5] = v1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000C3774;
      aBlock[3] = &unk_1002F9B40;
      uint64_t v10 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      xpc_array_apply(v5, v10);
      _Block_release(v10);
      LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v10)
      {
        __break(1u);
      }
      else
      {
        uint64_t v1 = (uint64_t)v16;
        swift_release();
        if (*(void *)(v1 + 16))
        {
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          return v1;
        }
        swift_bridgeObjectRelease();
        if (qword_100320B70 == -1)
        {
LABEL_13:
          uint64_t v11 = type metadata accessor for Logger();
          sub_100007288(v11, (uint64_t)qword_10033E700);
          id v12 = Logger.logObject.getter();
          os_log_type_t v13 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v12, v13))
          {
            uint64_t v1 = swift_slowAlloc();
            *(_WORD *)uint64_t v1 = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, v13, "AppInstallObserver: Missing bundleIDs for notification.", (uint8_t *)v1, 2u);
            swift_slowDealloc();
          }

          sub_1000C3ADC();
          swift_allocError();
          char v7 = 3;
          goto LABEL_16;
        }
      }
      swift_once();
      goto LABEL_13;
    }
    swift_unknownObjectRelease();
  }
  sub_1000C3ADC();
  swift_allocError();
  *uint64_t v8 = 0;
  swift_willThrow();
  return v1;
}

uint64_t sub_1000C3E94()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C3EA4(int a1, void *a2)
{
  return sub_1000C3718(a1, a2);
}

uint64_t sub_1000C3EAC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C3EBC()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

unsigned char *storeEnumTagSinglePayload for AppInstallObserverError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C3FB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppInstallObserverError()
{
  return &type metadata for AppInstallObserverError;
}

unint64_t sub_1000C3FF0()
{
  unint64_t result = qword_100325580;
  if (!qword_100325580)
  {
    sub_1000112CC(&qword_100325588);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100325580);
  }
  return result;
}

unint64_t sub_1000C4050()
{
  unint64_t result = qword_100325590;
  if (!qword_100325590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100325590);
  }
  return result;
}

uint64_t type metadata accessor for CustodianPreflightEvent()
{
  uint64_t result = qword_1003255E0;
  if (!qword_1003255E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000C40F0()
{
  sub_1000C520C();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

unint64_t sub_1000C41BC(char a1)
{
  unint64_t result = 0x4B52436B63656863;
  switch(a1)
  {
    case 2:
      unint64_t result = 0x6146726961706572;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x725064656C696166;
      break;
    case 5:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000C42F4(uint64_t a1, char a2)
{
  *(void *)&v2[qword_1003255A0] = _swiftEmptyArrayStorage;
  v2[qword_1003255B0] = 0;
  uint64_t v5 = &v2[qword_1003255B8];
  *uint64_t v5 = 0;
  v5[1] = 0;
  unsigned int v6 = &v2[qword_1003255C0];
  *(void *)unsigned int v6 = 0;
  v6[8] = 1;
  char v7 = &v2[qword_1003255C8];
  *char v7 = 0;
  v7[1] = 0;
  uint64_t v8 = &v2[qword_1003255D0];
  *uint64_t v8 = 0;
  v8[1] = 0;
  uint64_t v9 = v2;
  sub_100009F04((uint64_t *)&unk_10032A630);
  Dependency.init(dependencyId:config:)();
  uint64_t v10 = &v9[qword_1003255A8];
  *(void *)uint64_t v10 = a1;
  v10[8] = a2 & 1;

  sub_1000800D0((uint64_t)_swiftEmptyArrayStorage);
  return AAFTimedAnalyticsEvent.init(eventName:initialData:)();
}

uint64_t sub_1000C440C(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = sub_100009F04(&qword_100325360);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = AAUnderTest.getter();
  if (result) {
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v5 + qword_1003255D8, v7);
  Dependency.wrappedValue.getter();
  long long v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  os_log_type_t v13 = (char **)(v8 + 8);
  v14(v11, v7);
  sub_100008EF8(v62, v62[3]);
  sub_100009F04((uint64_t *)&unk_100325630);
  OS_dispatch_queue.sync<A>(execute:)();
  sub_10024EC08(v61);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  unint64_t v63 = v16;
  sub_100008EA8((uint64_t)v62);
  NSString v17 = String._bridgeToObjectiveC()();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v62[0] = v63;
  unint64_t v63 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v17, 0x6E6F6973726576, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
  unint64_t v63 = v62[0];
  swift_bridgeObjectRelease();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  v62[0] = v63;
  unint64_t v63 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v19, 0x6E6F73616572, 0xE600000000000000, v20);
  unint64_t v63 = v62[0];
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v5 + qword_1003255A8 + 8))
  {
  }
  else
  {
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    v62[0] = v63;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C((uint64_t)isa, 0xD000000000000012, 0x800000010029C2A0, v22);
    unint64_t v63 = v62[0];
    swift_bridgeObjectRelease();
  }
  Class v23 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  v62[0] = v63;
  unint64_t v63 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v23, 0x7564656863537369, 0xEB0000000064656CLL, v24);
  unint64_t v63 = v62[0];
  swift_bridgeObjectRelease();
  Class v25 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  v62[0] = v63;
  unint64_t v63 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v25, 0x6961706552646964, 0xE900000000000072, v26);
  unint64_t v63 = v62[0];
  swift_bridgeObjectRelease();
  if (*(void *)(v5 + qword_1003255B8 + 8))
  {
    swift_bridgeObjectRetain();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    v62[0] = v63;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C((uint64_t)v27, 0x646C6975426B7263, 0xEF6E6F6973726556, v28);
    unint64_t v63 = v62[0];
    swift_bridgeObjectRelease();
  }
  else
  {
  }
  if (*(unsigned char *)(v5 + qword_1003255C0 + 8))
  {
  }
  else
  {
    Class v29 = UInt._bridgeToObjectiveC()().super.super.isa;
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    v62[0] = v63;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C((uint64_t)v29, 0x6F43726961706572, 0xEB00000000746E75, v30);
    unint64_t v63 = v62[0];
    swift_bridgeObjectRelease();
  }
  uint64_t v31 = (unint64_t *)(v5 + qword_1003255A0);
  swift_beginAccess();
  unint64_t v32 = *v31;
  if (*v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v32 = *v31;
    if (v56 < 2) {
      goto LABEL_30;
    }
  }
  else if (*(uint64_t *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
  {
    goto LABEL_30;
  }
  if ((v32 & 0xC000000000000001) != 0) {
    goto LABEL_44;
  }
  if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_46;
  }
  id v33 = *(id *)(v32 + 40);
  while (1)
  {
    uint64_t v34 = (void *)sub_10016B5B0();

    a3 = &off_10031D000;
    [v34 code];
    Class v35 = Int._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess();
    char v36 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = v63;
    unint64_t v4 = 0x8000000000000000;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C((uint64_t)v35, 0xD000000000000014, 0x800000010029C400, v36);
    unint64_t v63 = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();
    os_log_type_t v13 = &off_10031D000;
    id v37 = [v34 domain];
    if (!v37) {
      goto LABEL_54;
    }
    uint64_t v38 = (uint64_t)v37;
    swift_beginAccess();
    char v39 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = v63;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C(v38, 0xD000000000000016, 0x800000010029C420, v39);
    unint64_t v63 = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();

    unint64_t v32 = *v31;
    if (*v31 >> 62)
    {
LABEL_46:
      swift_bridgeObjectRetain();
      uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v32 = *v31;
      if (v57 < 3) {
        goto LABEL_30;
      }
    }
    else if (*(uint64_t *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3)
    {
      goto LABEL_30;
    }
    if ((v32 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL)
      {
        __break(1u);
LABEL_50:
        swift_bridgeObjectRetain();
        uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        unint64_t v32 = *v31;
        if (v58 < 4) {
          goto LABEL_30;
        }
        goto LABEL_25;
      }
      id v40 = *(id *)(v32 + 48);
    }
    id v41 = (void *)sub_10016B5B0();

    [v41 a3[168]];
    Class v42 = Int._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess();
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = v63;
    unint64_t v63 = v4;
    sub_10022C68C((uint64_t)v42, 0xD000000000000014, 0x800000010029C440, v43);
    unint64_t v63 = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();
    id v44 = [v41 v13[182]];
    if (!v44) {
      goto LABEL_55;
    }
    uint64_t v45 = (uint64_t)v44;
    swift_beginAccess();
    char v46 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = v63;
    unint64_t v63 = v4;
    sub_10022C68C(v45, 0xD000000000000016, 0x800000010029C460, v46);
    unint64_t v63 = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();

    unint64_t v32 = *v31;
    if (*v31 >> 62) {
      goto LABEL_50;
    }
    if (*(uint64_t *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < 4) {
      goto LABEL_30;
    }
LABEL_25:
    if ((v32 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < 4uLL)
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        JUMPOUT(0x1000C5008);
      }
      id v47 = *(id *)(v32 + 56);
    }
    uint64_t v48 = (void *)sub_10016B5B0();

    [v48 a3[168]];
    Class v49 = Int._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess();
    char v50 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = v63;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C((uint64_t)v49, 0xD000000000000014, 0x800000010029C480, v50);
    unint64_t v63 = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();
    id v51 = [v48 v13[182]];
    if (!v51) {
      goto LABEL_56;
    }
    uint64_t v52 = (uint64_t)v51;
    swift_beginAccess();
    char v53 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = v63;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C(v52, 0xD000000000000016, 0x800000010029C4A0, v53);
    unint64_t v63 = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();

    unint64_t v32 = *v31;
LABEL_30:
    if (v32 >> 62) {
      break;
    }
    uint64_t v31 = *(unint64_t **)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v31) {
      goto LABEL_39;
    }
LABEL_32:
    if ((v32 & 0xC000000000000001) != 0)
    {
      id v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_35;
    }
    if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v54 = *(id *)(v32 + 32);
LABEL_35:
      uint64_t v55 = v54;
      swift_bridgeObjectRelease();
      uint64_t v31 = (unint64_t *)sub_10016B5B0();

      goto LABEL_40;
    }
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v31 = (unint64_t *)_CocoaArrayWrapper.endIndex.getter();
  if (v31) {
    goto LABEL_32;
  }
LABEL_39:
  swift_bridgeObjectRelease();
LABEL_40:
  swift_beginAccess();
  swift_bridgeObjectRetain();
  dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_1000C5028()
{
}

uint64_t sub_1000C5058()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_1003255D8;
  uint64_t v2 = sub_100009F04(&qword_100325360);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

id sub_1000C5114()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianPreflightEvent();
  return [super dealloc];
}

uint64_t sub_1000C514C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + qword_1003255D8;
  uint64_t v3 = sub_100009F04(&qword_100325360);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void sub_1000C520C()
{
  if (!qword_100325158)
  {
    sub_1000112CC((uint64_t *)&unk_10032A630);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100325158);
    }
  }
}

uint64_t sub_1000C5268()
{
  return type metadata accessor for CustodianPreflightEvent();
}

uint64_t (*sub_1000C5270())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000C52D0@<X0>(void *a1@<X8>)
{
  return sub_1000849EC(v1, a1);
}

void sub_1000C52EC(objc_class *a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000C5300(objc_class *a1, uint64_t a2, uint64_t a3)
{
}

char *sub_1000C5314()
{
  type metadata accessor for DaemonStorageFactory();
  swift_initStackObject();
  id v1 = v0;
  id v37 = v1;
  sub_1000E4E84(v42);
  sub_100008A94((uint64_t)v42, (uint64_t)v39);
  uint64_t v2 = sub_1000084BC((uint64_t)v39, v40);
  __chkstk_darwin(v2, v2);
  unint64_t v4 = (void *)((char *)&v38[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v5 + 16))(v4);
  uint64_t v6 = *v4;
  uint64_t v7 = type metadata accessor for StorageController();
  v38[3] = v7;
  v38[4] = &off_1002FBC50;
  v38[0] = v6;
  type metadata accessor for InheritanceStorageController();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = sub_1000084BC((uint64_t)v38, v7);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (void *)((char *)&v38[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = *v11;
  long long v14 = (void *)(v8 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController);
  v14[3] = v7;
  v14[4] = &off_1002FBC50;
  *long long v14 = v13;
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100008EA8((uint64_t)v38);
  sub_100008EA8((uint64_t)v39);
  type metadata accessor for InheritanceSecurityController();
  uint64_t v15 = swift_allocObject();
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100320D40);
  Dependency.init(dependencyId:config:)();
  *(void *)(v15 + 16) = [objc_allocWithZone((Class)CDPInheritanceTrustController) init];
  id v16 = [self sharedService];
  uint64_t v17 = type metadata accessor for DaemonDestinationBuilder();
  uint64_t v18 = swift_allocObject();
  uint64_t v40 = v17;
  id v41 = &off_1002FAE40;
  v39[0] = v18;
  uint64_t v19 = type metadata accessor for DaemonIDSMessenger();
  char v20 = (void *)swift_allocObject();
  uint64_t v21 = sub_1000084BC((uint64_t)v39, v17);
  __chkstk_darwin(v21, v21);
  Class v23 = (void *)((char *)&v38[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = *v23;
  v20[6] = v17;
  v20[7] = &off_1002FAE40;
  v20[2] = v16;
  v20[3] = v25;
  id v26 = v16;
  swift_retain();
  sub_100008EA8((uint64_t)v39);

  id v27 = [objc_allocWithZone((Class)AKInheritanceController) init];
  uint64_t v40 = v19;
  id v41 = &off_1002F7F58;
  v39[0] = v20;
  type metadata accessor for InheritanceSetupMessenger();
  char v28 = (void *)swift_allocObject();
  uint64_t v29 = sub_1000084BC((uint64_t)v39, v19);
  __chkstk_darwin(v29, v29);
  uint64_t v31 = (void *)((char *)&v38[-1] - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v32 + 16))(v31);
  uint64_t v33 = *v31;
  v28[5] = v19;
  v28[6] = &off_1002F7F58;
  v28[2] = v33;
  swift_retain_n();
  id v34 = v26;
  swift_retain();
  sub_100008EA8((uint64_t)v39);
  Class v35 = sub_1000D5F98(v27, v8, v34, (uint64_t)v20, (uint64_t)v28, v15);
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  sub_100008EA8((uint64_t)v42);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v35;
}

id sub_1000C58D8()
{
  uint64_t v1 = sub_100009F04(&qword_100325870);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__accountStore, v1);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  id v6 = [*(id *)(*sub_100008EF8(v18, v18[3]) + 16) aa_primaryAppleAccount];
  if (v6 && (uint64_t v7 = v6, v8 = objc_msgSend(v6, "aa_altDSID"), v7, v8))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100008EA8((uint64_t)v18);
    id v9 = objc_allocWithZone((Class)AKInheritanceContext);
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = [v9 initWithOwnerAltDSID:v10];
  }
  else
  {
    sub_100008EA8((uint64_t)v18);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E760);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Error creating inheritance context. No altDSID for owner found.", v15, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v11;
}

void sub_1000C5B48(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1)
  {
    uint64_t v16 = a1;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for InheritanceError(0);
    if (swift_dynamicCast())
    {
      uint64_t v16 = (uint64_t)v15;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      char v4 = static _BridgedStoredNSError.== infix(_:_:)();

      if (v4)
      {
        if (qword_100320B90 != -1) {
          swift_once();
        }
        uint64_t v5 = type metadata accessor for Logger();
        sub_100007288(v5, (uint64_t)qword_10033E760);
        id v6 = Logger.logObject.getter();
        os_log_type_t v7 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v6, v7))
        {
          id v8 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v8 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, v7, "CleanupBeneficiary completed.", v8, 2u);
          swift_slowDealloc();
        }

        [self postInheritanceContactChangedNotification];
        a2(0);

        return;
      }
    }
  }
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E760);
  swift_errorRetain();
  swift_errorRetain();
  NSString v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_10032B480);
    uint64_t v13 = String.init<A>(describing:)();
    sub_100135190(v13, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "CleanupBeneficiary completed with error : %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  [self postInheritanceContactChangedNotification];
  a2(a1);
}

uint64_t sub_1000C5F10(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_100325848);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  unint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E760);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    v22[0] = v9;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Starting cleaning up benefactor...", v18, 2u);
    uint64_t v9 = (char *)v22[0];
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v22[1] + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__cleanupController, v10);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  id v19 = [a1 beneficiaryID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v23;
  *(void *)(v20 + 24) = a3;
  swift_retain();
  sub_1001D85FC((uint64_t)v9, (uint64_t)sub_1000D9CC0, v20);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

id sub_1000C6220()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceRequestManager();
  return [super dealloc];
}

uint64_t sub_1000C65D0()
{
  return type metadata accessor for InheritanceRequestManager();
}

uint64_t type metadata accessor for InheritanceRequestManager()
{
  uint64_t result = qword_100325710;
  if (!qword_100325710) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000C6624()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_1000C69A8(319, &qword_100325730, (void (*)(uint64_t))type metadata accessor for InheritanceCleanupController);
    if (v1 <= 0x3F)
    {
      sub_1000C69A8(319, &qword_100325738, (void (*)(uint64_t))type metadata accessor for BeneficiaryDeclinedStatusHandler);
      if (v2 <= 0x3F)
      {
        sub_1000C69A8(319, &qword_100325740, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationResponseHandler);
        if (v3 <= 0x3F)
        {
          sub_1000C69A8(319, &qword_100325748, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationHandler);
          if (v4 <= 0x3F)
          {
            sub_1000C69A8(319, &qword_100325750, (void (*)(uint64_t))type metadata accessor for InheritanceAccessKeyMessageHandler);
            if (v5 <= 0x3F)
            {
              sub_1000C69A8(319, &qword_100325758, (void (*)(uint64_t))type metadata accessor for BeneficiaryRemovedMessageHandler);
              if (v6 <= 0x3F)
              {
                sub_10001BF34(319, (unint64_t *)&unk_100325760, &qword_10032AD10);
                if (v7 <= 0x3F)
                {
                  sub_1000C69FC();
                  if (v8 <= 0x3F) {
                    swift_updateClassMetadata2();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1000C69A8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Dependency();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1000C69FC()
{
  if (!qword_100325770)
  {
    sub_10000850C(255, (unint64_t *)&unk_1003218F0);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100325770);
    }
  }
}

uint64_t sub_1000C6AB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136315138;
      swift_getErrorValue();
      uint64_t v9 = Error.localizedDescription.getter();
      sub_100135190(v9, v10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error fetching dataclass rules from Inheritance Controller: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return a3(0, a2);
}

uint64_t sub_1000C6E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!a2)
  {
    os_log_type_t v7 = 0;
    if (AAUnderTest.getter()) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  os_log_type_t v7 = (void *)_convertErrorToNSError(_:)();
  if ((AAUnderTest.getter() & 1) == 0)
  {
LABEL_3:
    sub_100009F04(&qword_100324668);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    strcpy((char *)(inited + 32), "numOfRelation");
    *(_WORD *)(inited + 46) = -4864;
    *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
    sub_10022175C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
    swift_bridgeObjectRelease();
  }
LABEL_4:

  return a4(a1, a2);
}

uint64_t sub_1000C6F24(uint64_t a1, uint64_t (*a2)(void, uint64_t), uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  type metadata accessor for InheritanceError(0);
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
  _BridgedStoredNSError.init(_:userInfo:)();
  char v14 = static _BridgedStoredNSError.== infix(_:_:)();

  if (v14)
  {
    swift_getObjectType();
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = a2;
    v15[3] = a3;
    v15[4] = a4;
    swift_retain();
    sub_1000D4870(a5, a6, a7, a8, (void (*)(void, void))sub_1000D9AF8, (uint64_t)v15, (uint64_t)a4);
    return swift_release();
  }
  else
  {
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)();
    char v17 = static _BridgedStoredNSError.== infix(_:_:)();

    if (v17)
    {
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100007288(v18, (uint64_t)qword_10033E760);
      id v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Saving an existing beneficiary is not allowed.", v21, 2u);
        swift_slowDealloc();
      }
    }
    return a2(0, a1);
  }
}

void sub_1000C71BC(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E760);
    swift_errorRetain();
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v10 = 138412290;
      uint64_t v25 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v25;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error setting up the new beneficiary: %@", v10, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    ((void (*)(void, uint64_t))a3)(0, a2);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E760);
    char v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Successfully Setup Beneficiary.", v16, 2u);
      swift_slowDealloc();
    }

    if (a1)
    {
      char v17 = (void *)swift_allocObject();
      v17[2] = a3;
      v17[3] = a4;
      v17[4] = a1;
      uint64_t v18 = swift_allocObject();
      swift_unknownObjectWeakInit();
      id v19 = (void *)swift_allocObject();
      v19[2] = sub_1000D9C30;
      v19[3] = v17;
      v19[4] = a1;
      v19[5] = v18;
      id v20 = a1;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000F02FC((uint64_t)sub_1000D9C88, (uint64_t)v19);

      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Created Beneficiary is nil", v23, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for InheritanceError(0);
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      a3(0);
    }
  }
}

uint64_t sub_1000C7648(uint64_t a1, void (*a2)(id, uint64_t), uint64_t a3, void *a4)
{
  uint64_t v38 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v12, v13);
  os_log_type_t v15 = (void *)((char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v15, &qword_100321CF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = *v15;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v39 = v16;
      uint64_t v40 = v21;
      *(_DWORD *)id v20 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v39 = sub_100135190(v22, v23, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error persisting new beneficiary in Inheritance Storage: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    v38(0, v16);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v37 = a3;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E760);
    id v25 = a4;
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      char v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v40 = v36;
      *(_DWORD *)char v28 = 136315138;
      v34[1] = v28 + 4;
      Class v35 = v28;
      id v29 = [v25 beneficiaryID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000D9CC8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v32 = v31;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      uint64_t v39 = sub_100135190(v30, v32, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Successfully saved beneficiary to storage : beneficiaryID - %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    v38(v25, 0);
    return sub_100006574((uint64_t)v15, &qword_100321CF0);
  }
}

void sub_1000C7CD8(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, void *a5)
{
  if (a1)
  {
    id v8 = a1;
    [a5 setAccessKey:v8];
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v10 = (void *)Strong;
      uint64_t v11 = *(void **)(Strong + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller);
      swift_unknownObjectRetain();

      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = a3;
      *(void *)(v12 + 24) = a4;
      aBlock[4] = (uint64_t)sub_1000D9998;
      aBlock[5] = v12;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10025ED44;
      aBlock[3] = (uint64_t)&unk_1002FA5A0;
      uint64_t v13 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v11 updateBeneficiaryWithInheritanceContext:a5 completion:v13];
      swift_unknownObjectRelease();

      _Block_release(v13);
    }
    else
    {
    }
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v19 = Error.localizedDescription.getter();
        unint64_t v21 = v20;
      }
      else
      {
        uint64_t v19 = 0;
        unint64_t v21 = 0xE000000000000000;
      }
      void aBlock[6] = sub_100135190(v19, v21, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error generating new access code: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    a3(a2);
  }
}

uint64_t sub_1000C800C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!a1)
  {
    uint64_t v5 = 0;
    if (AAUnderTest.getter()) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = (void *)_convertErrorToNSError(_:)();
  if ((AAUnderTest.getter() & 1) == 0)
  {
LABEL_3:
    sub_100009F04(&qword_100324668);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    strcpy((char *)(inited + 32), "numOfRelation");
    *(_WORD *)(inited + 46) = -4864;
    *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
    sub_10022175C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
    swift_bridgeObjectRelease();
  }
LABEL_4:

  return a3(a1);
}

void sub_1000C8114(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v45 = a4;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v15 = (void *)swift_dynamicCastObjCClass();
  if (v15 && (id v16 = [v15 handle]) != 0)
  {
    os_log_type_t v17 = v16;
    Class v42 = v5;
    uint64_t v43 = a2;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v44 = v11;
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E760);
    swift_bridgeObjectRetain_n();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v40 = a5;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v38 = a3;
      uint64_t v24 = (uint8_t *)v23;
      id v47 = (void *)swift_slowAlloc();
      uint64_t v39 = v10;
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v25 = v41;
      uint64_t v46 = sub_100135190(v41, v19, (uint64_t *)&v47);
      uint64_t v26 = v25;
      uint64_t v10 = v39;
      a5 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Notifying beneficiary %s to remove via IDS.", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v38;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v26 = v41;
    }
    unint64_t v32 = v42;
    uint64_t v33 = sub_100008EF8(&v42[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger], *(void *)&v42[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger + 24]);
    id v34 = [a1 beneficiaryID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v35 = *v33;
    id v36 = v32;
    id v37 = a1;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10019A4E0((uint64_t)v14, v26, v19, v35, v36, v37, v43, a3, v45, a5);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v14, v10);
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E760);
    char v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Beneficiary doesn't have a handle. Beneficiary Removal Complete!", v30, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v46 = 15;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v31 = v47;
    v45((uint64_t)v47);
  }
}

uint64_t sub_1000C85D8(uint64_t a1, char *a2, void *a3, void *a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  char v50 = a4;
  uint64_t v13 = type metadata accessor for InheritanceInvitationRecord();
  __chkstk_darwin(v13 - 8, v14);
  id v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (uint64_t *)((char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v20, &qword_100325890);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    Class v49 = a6;
    uint64_t v21 = *v20;
    swift_getErrorValue();
    id v22 = sub_100034F88(v52[2], v52[3]);
    type metadata accessor for InheritanceError(0);
    uint64_t v51 = 3;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v23 = (void *)v52[0];
    uint64_t v51 = v52[0];
    sub_1000D9CC8((unint64_t *)&unk_1003259A0, type metadata accessor for InheritanceError);
    id v24 = v23;
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
    }
    else
    {
      swift_allocError();
      uint64_t *v33 = v51;
    }
    id v34 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    id v35 = [v34 code];

    if (v22 == v35)
    {
      id v36 = v49;
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_100007288(v37, (uint64_t)qword_10033E760);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Invitation record doesn't exist. Begin removal without declining status.", v40, 2u);
        swift_slowDealloc();
      }

      sub_1000C8114(a3, (uint64_t)v50, a5, v36, a7);
    }
    else
    {
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      sub_100007288(v41, (uint64_t)qword_10033E760);
      swift_errorRetain();
      swift_errorRetain();
      Class v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        uint64_t v51 = v21;
        v52[0] = v45;
        *(_DWORD *)uint64_t v44 = 136315138;
        swift_errorRetain();
        sub_100009F04((uint64_t *)&unk_100325850);
        uint64_t v46 = String.init<A>(describing:)();
        uint64_t v51 = sub_100135190(v46, v47, v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Cannot proceed to remove beneficiary. Error fetching beneficiary -\n%s", v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v48 = v49;
      swift_errorRetain();
      v48(v21);
      swift_errorRelease();
    }
    return swift_errorRelease();
  }
  else
  {
    sub_1000D9388((uint64_t)v20, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E760);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      char v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Fetched InheritanceInvitationRecord. Declining record...", v28, 2u);
      swift_slowDealloc();
    }

    uint64_t v29 = *sub_100008EF8(&a2[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController], *(void *)&a2[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24]);
    swift_retain();
    uint64_t v30 = a2;
    id v31 = a3;
    swift_bridgeObjectRetain();
    sub_1000F09BC((uint64_t)v16, v29, a6, a7, v30, v31, v50, a5);
    swift_release();

    swift_bridgeObjectRelease();
    return sub_1000D93F0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }
}

void sub_1000C8C2C(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      id v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      swift_errorRetain();
      uint64_t v23 = (void *)_swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v22 = v23;
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Aborting deletion flow. Failed to decline fetched record. Error: %@.", v21, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
    }

    type metadata accessor for InheritanceError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    a3((uint64_t)v23);
    sub_100080A98(a1, 1);
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E760);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Successfully declined beneficiary invitation record.", v16, 2u);
      swift_slowDealloc();
    }

    sub_1000C8114(a6, a7, a8, a3, a4);
  }
}

uint64_t sub_1000C9014(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v44 = a4;
  uint64_t v45 = a6;
  uint64_t v41 = a2;
  id v42 = a3;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  os_log_type_t v43 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100009F04(&qword_100325848);
  uint64_t v14 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v15);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = &unk_100320000;
  if (a1)
  {
    uint64_t v39 = a5;
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v38 = a7;
      uint64_t v23 = (uint8_t *)v22;
      id v36 = (void *)swift_slowAlloc();
      uint64_t v37 = v10;
      *(_DWORD *)uint64_t v23 = 138412290;
      swift_errorRetain();
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v46 = v24;
      uint64_t v10 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v36 = v24;
      uint64_t v18 = (void *)&unk_100320000;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error while sending beneficiary removed IDS message %@", v23, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      a7 = v38;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    a5 = v39;
  }
  uint64_t v25 = v18[370];
  swift_retain_n();
  if (v25 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_100007288(v26, (uint64_t)qword_10033E760);
  os_log_type_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Starting cleaning up beneficiary...", v29, 2u);
    swift_slowDealloc();
  }

  uint64_t v30 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v41 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__cleanupController, v40);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v30);
  uint64_t v31 = v46;
  id v32 = [v42 beneficiaryID];
  uint64_t v33 = (uint64_t)v43;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  sub_1001DCA8C(v33, v44, a5, v31, v45, a7);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v33, v10);
  return swift_release_n();
}

uint64_t sub_1000C94B0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E760);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Beneficiary Cleanup Complete!", v7, 2u);
    swift_slowDealloc();
  }

  return a2(a1);
}

uint64_t sub_1000C95AC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v45 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_100007288(v12, (uint64_t)qword_10033E760);
  id v14 = a1;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v41 = v13;
    uint64_t v18 = v17;
    uint64_t v40 = swift_slowAlloc();
    uint64_t v47 = v40;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v46 = type metadata accessor for InheritanceRequestManager();
    sub_100009F04((uint64_t *)&unk_100325878);
    uint64_t v42 = a2;
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v43 = a3;
    uint64_t v46 = sub_100135190(v19, v20, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    v39[1] = v18 + 14;
    id v21 = [v14 beneficiaryID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000D9CC8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = v45;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v24 = v4;
    unint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v22);
    uint64_t v46 = sub_100135190(v23, v26, &v47);
    a2 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v4 = v24;
    a3 = v43;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - Removing Benefactor with beneficiaryID: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v27 = objc_allocWithZone((Class)type metadata accessor for InheritanceInvitationActionAnalyticsEvent());
  os_log_type_t v28 = (void *)sub_1001BE15C();
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = v28;
  v29[3] = a2;
  v29[4] = a3;
  id v30 = v28;
  swift_retain();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Fetching benefactor to remove...", v33, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8(&v4[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController], *(void *)&v4[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24]);
  id v34 = [v14 beneficiaryID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v35 = (void *)swift_allocObject();
  void v35[2] = sub_1000D9478;
  v35[3] = v29;
  v35[4] = v4;
  v35[5] = v14;
  id v36 = v14;
  swift_retain();
  uint64_t v37 = v4;
  sub_1000EAD74((uint64_t)v11, (uint64_t)sub_1000D94CC, (uint64_t)v35);

  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v11, v45);
}

uint64_t sub_1000C9A78(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (a1) {
    uint64_t v5 = (void *)_convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  sub_1001BE230();

  return a3(a1);
}

uint64_t sub_1000C9AF8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, char *a4, void *a5)
{
  id v66 = a5;
  uint64_t v67 = a2;
  uint64_t v68 = a3;
  uint64_t v7 = sub_100009F04(&qword_100321C70);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v63 = v12;
  uint64_t v64 = v13;
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v65 = (uint64_t)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v63 - v18;
  uint64_t v20 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (uint64_t *)((char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v23, (uint64_t *)&unk_100325860);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = *v23;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      uint64_t v69 = v24;
      id v70 = v29;
      *(_DWORD *)os_log_type_t v28 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v69 = sub_100135190(v30, v31, (uint64_t *)&v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to fetch benefactor. Cannot remove benefactor. %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    v67(v24);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_1000D9388((uint64_t)v23, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, &a4[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__preferences], v7);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    id v32 = v70;
    unsigned int v33 = [v70 isLCDeletionChangeCKStatusToDeclinedEnabled];

    uint64_t v34 = (uint64_t)v19;
    if (v33)
    {
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_100007288(v35, (uint64_t)qword_10033E760);
      id v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Successfully fetched BenefactorRecord. Declining....", v38, 2u);
        swift_slowDealloc();
      }

      sub_100008EF8(&a4[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController], *(void *)&a4[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24]);
      uint64_t v39 = (uint64_t)v19;
      uint64_t v40 = v65;
      sub_1000D9320(v39, v65, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      unint64_t v41 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
      unint64_t v42 = (v14 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v44 = swift_allocObject();
      uint64_t v45 = v68;
      *(void *)(v44 + 16) = v67;
      *(void *)(v44 + 24) = v45;
      sub_1000D9388(v40, v44 + v41, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      *(void *)(v44 + v42) = a4;
      id v46 = v66;
      *(void *)(v44 + v43) = v66;
      swift_retain();
      uint64_t v47 = a4;
      id v48 = v46;
      sub_1000D3D5C(v34, (void (*)(void, void))sub_1000D9634, v44);
      swift_release();
      uint64_t v49 = v34;
    }
    else
    {
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      sub_100007288(v51, (uint64_t)qword_10033E760);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v52, v53))
      {
        id v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "LCDeletionChangeCKStatusToDeclined feature is not enabled. Begin removal without declining the record.", v54, 2u);
        swift_slowDealloc();
      }

      uint64_t v55 = sub_100008EF8(&a4[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger], *(void *)&a4[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger + 24]);
      uint64_t v56 = (uint64_t *)&v19[*(int *)(v63 + 20)];
      uint64_t v57 = *v56;
      uint64_t v58 = v56[1];
      uint64_t v59 = *v55;
      uint64_t v60 = v68;
      swift_retain();
      uint64_t v61 = a4;
      id v62 = v66;
      sub_10019AF3C(v57, v58, (uint64_t)v19, 0, v59, v61, v62, (uint64_t)v67, v60);

      swift_release();
      uint64_t v49 = (uint64_t)v19;
    }
    return sub_1000D93F0(v49, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
}

void sub_1000CA214(uint64_t a1, char a2, void (*a3)(void), uint64_t a4, uint64_t a5, char *a6, void *a7)
{
  uint64_t v14 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v45 = a3;
      uint64_t v30 = (uint8_t *)v29;
      unint64_t v31 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 138412290;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v47 = (void *)v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v31 = v32;
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Aborting deletion flow. Failed to decline fetched record. Error: %@.", v30, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v45;
      swift_slowDealloc();
    }
    else
    {
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v46 = 2113;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v41 = v47;
    a3(v47);
    sub_100080A98(a1, 1);
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E760);
    sub_1000D9320(a5, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      unint64_t v42 = a6;
      uint64_t v22 = (uint8_t *)v21;
      uint64_t v23 = swift_slowAlloc();
      unint64_t v43 = a7;
      uint64_t v47 = (void *)v23;
      uint64_t v44 = a4;
      uint64_t v45 = a3;
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v24 = sub_1001BFF58();
      uint64_t v46 = sub_100135190(v24, v25, (uint64_t *)&v47);
      a4 = v44;
      a3 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000D93F0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Successfully declined benefactor record: %s", v22, 0xCu);
      swift_arrayDestroy();
      a7 = v43;
      swift_slowDealloc();
      a6 = v42;
      swift_slowDealloc();
    }
    else
    {
      sub_1000D93F0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    }

    unsigned int v33 = sub_100008EF8(&a6[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger], *(void *)&a6[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger + 24]);
    uint64_t v34 = (uint64_t *)(a5 + *(int *)(v14 + 20));
    uint64_t v35 = a6;
    uint64_t v36 = *v34;
    uint64_t v37 = v34[1];
    uint64_t v38 = *v33;
    id v39 = v35;
    id v40 = a7;
    swift_retain();
    sub_10019AF3C(v36, v37, a5, 0, v38, v39, v40, (uint64_t)a3, a4);

    swift_release();
  }
}

uint64_t sub_1000CA7BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v12 = String.init<A>(describing:)();
      sub_100135190(v12, v13, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error declining invitation: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return sub_1000C5F10(a3, a4, a5);
}

uint64_t sub_1000CA9E8(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, const char *a4)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v10 = 136315138;
      swift_getErrorValue();
      uint64_t v11 = Error.localizedDescription.getter();
      sub_100135190(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, a4, v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return a2(a1);
}

void sub_1000CAC08(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  swift_unknownObjectRetain();
  id v9 = a1;
  a5(a3, v9, v8);
  _Block_release(v8);
  _Block_release(v8);
  swift_unknownObjectRelease();
}

uint64_t sub_1000CACA0(uint64_t a1, char a2, void (*a3)(void, uint64_t), uint64_t a4)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007288(v10, (uint64_t)qword_10033E760);
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v13 = 138412290;
      uint64_t v15 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v15;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error fetching beneficiaries from storage: %@", v13, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a3(0, a1);
    sub_100007844(a1, 1);
    return sub_100007844(a1, 1);
  }
  else if (*(void *)(a1 + 16))
  {
    swift_beginAccess();
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      uint64_t v8 = (void *)result;
      id v9 = (void *)swift_allocObject();
      v9[2] = a1;
      v9[3] = a3;
      v9[4] = a4;
      sub_100007850(a1, 0);
      swift_retain();
      sub_1000D2248((uint64_t)sub_1000D92FC, (uint64_t)v9);

      return swift_release();
    }
  }
  else
  {
    return ((uint64_t (*)(void *, void))a3)(_swiftEmptyArrayStorage, 0);
  }
  return result;
}

uint64_t sub_1000CB160(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100007288(v10, (uint64_t)qword_10033E760);
  swift_unknownObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v26 = v3;
    uint64_t v14 = v13;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v30 = v25;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v29 = type metadata accessor for InheritanceRequestManager();
    sub_100009F04((uint64_t *)&unk_100325878);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v29 = sub_100135190(v15, v16, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v24[1] = v14 + 14;
    id v17 = [a1 beneficiaryID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000D9CC8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t v29 = sub_100135190(v18, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s - Sending invitation to beneficiaryID - %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  uint64_t v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v22 = (void *)swift_allocObject();
  void v22[2] = v27;
  v22[3] = v28;
  v22[4] = v21;
  swift_retain();
  swift_retain();
  sub_1000CBDB0(a1, (uint64_t)sub_1000D8F4C, (uint64_t)v22);
  swift_release();
  return swift_release();
}

uint64_t sub_1000CB50C(uint64_t a1, void (*a2)(uint64_t), void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v57 = a4;
  uint64_t v7 = sub_100009F04(&qword_100325870);
  uint64_t v56 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v54 + 64);
  uint64_t v14 = __chkstk_darwin(v11 - 8, v13);
  uint64_t v55 = (uint64_t)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  id v17 = (char *)&v53 - v16;
  uint64_t v18 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (uint64_t *)((char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v21, &qword_100325890);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = *v21;
    swift_errorRetain();
    a2(v22);
    swift_errorRelease();
    return swift_errorRelease();
  }
  os_log_type_t v53 = a2;
  sub_1000D9388((uint64_t)v21, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v25 = v17;
  if (!Strong) {
    goto LABEL_10;
  }
  uint64_t v26 = (void *)Strong;
  uint64_t v27 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v10, Strong + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__accountStore, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v7);

  id v28 = [*(id *)(*sub_100008EF8(v59, v60) + 16) aa_primaryAppleAccount];
  if (!v28)
  {
    sub_100008EA8((uint64_t)v59);
LABEL_10:
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100007288(v45, (uint64_t)qword_10033E760);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    BOOL v48 = os_log_type_enabled(v46, v47);
    uint64_t v49 = v53;
    if (v48)
    {
      char v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "No altDSID for owner found.", v50, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v58 = 5;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v51 = (void *)v59[0];
    v49(v59[0]);

    uint64_t v52 = (uint64_t)v25;
    return sub_1000D93F0(v52, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }
  uint64_t v29 = v28;
  uint64_t v30 = (uint64_t)v17;
  id v31 = [v28 aa_altDSID];

  if (!v31)
  {
    sub_100008EA8((uint64_t)v59);
    uint64_t v25 = v17;
    goto LABEL_10;
  }
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  sub_100008EA8((uint64_t)v59);
  swift_beginAccess();
  uint64_t v35 = swift_unknownObjectWeakLoadStrong();
  if (v35)
  {
    uint64_t v36 = (void *)v35;
    sub_100008A94(v35 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger, (uint64_t)v59);

    sub_100008EF8(v59, v60);
    uint64_t v37 = v30;
    uint64_t v38 = v55;
    sub_1000D9320(v30, v55, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    unint64_t v39 = (*(unsigned __int8 *)(v54 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    uint64_t v40 = v12 + v39 + 7;
    uint64_t v41 = v34;
    unint64_t v42 = v40 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v43 = swift_allocObject();
    sub_1000D9388(v38, v43 + v39, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    uint64_t v44 = (void (**)(uint64_t))(v43 + v42);
    uint8_t *v44 = v53;
    v44[1] = a3;
    swift_retain();
    sub_100197984(v37, v32, v41, sub_1000D91A4, v43);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000D93F0(v37, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    return sub_100008EA8((uint64_t)v59);
  }
  swift_bridgeObjectRelease();
  uint64_t v52 = v30;
  return sub_1000D93F0(v52, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
}

uint64_t sub_1000CBB08(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (a1)
  {
    Swift::String v5 = *(Swift::String *)(a2 + *(int *)(type metadata accessor for InheritanceInvitationRecord() + 20));
    String.append(_:)(v5);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = 58;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    uint64_t v9 = v8;
    v16[0] = 0xD000000000000020;
    v16[1] = 0x800000010029C810;
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E760);
    swift_bridgeObjectRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      v16[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(0xD000000000000020, 0x800000010029C810, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
    }
  }
  return a3(a1);
}

uint64_t sub_1000CBDB0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007288(v13, (uint64_t)qword_10033E760);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Fetching for existing invitation..", v16, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(v4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController), *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24));
  id v17 = [a1 beneficiaryID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v18;
  v19[3] = a1;
  v19[4] = a2;
  v19[5] = a3;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  sub_1000E53EC((uint64_t)v12, (uint64_t)sub_1000D8FA0, (uint64_t)v19);
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return swift_release();
}

uint64_t sub_1000CC0B8(uint64_t a1, char a2, void (*a3)(void, uint64_t), uint64_t a4)
{
  uint64_t v50 = type metadata accessor for PersonNameComponents();
  uint64_t v8 = *(void *)(v50 - 8);
  __chkstk_darwin(v50, v9);
  uint64_t v49 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v41 - v18;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E760);
    swift_errorRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 138412290;
      uint64_t v39 = _convertErrorToNSError(_:)();
      uint64_t v54 = (void *)v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v38 = v39;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Error fetching invitations from storage: %@", v37, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a3(0, a1);
    sub_100007844(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    uint64_t v43 = a4;
    uint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = _swiftEmptyArrayStorage;
    if (v20)
    {
      unint64_t v42 = a3;
      uint64_t v54 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v22 = self;
      uint64_t v23 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      uint64_t v45 = *(void *)(v12 + 72);
      id v46 = v22;
      uint64_t v44 = (void (**)(char *, uint64_t))(v8 + 8);
      os_log_type_t v47 = v19;
      uint64_t v48 = v11;
      do
      {
        sub_1000D9320(v23, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        sub_1000D9320((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        NSString v52 = String._bridgeToObjectiveC()();
        if (*(void *)&v16[*(int *)(v11 + 24) + 8])
        {
          swift_bridgeObjectRetain();
          NSString v51 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v51 = 0;
        }
        if (*(void *)&v16[*(int *)(v11 + 28) + 8])
        {
          swift_bridgeObjectRetain();
          NSString v24 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v24 = 0;
        }
        id v25 = objc_allocWithZone((Class)AAInheritanceInvitation);
        uint64_t v26 = v49;
        PersonNameComponents.init()();
        swift_bridgeObjectRetain();
        PersonNameComponents.givenName.setter();
        swift_bridgeObjectRetain();
        PersonNameComponents.familyName.setter();
        Class v27 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        id v28 = [v46 localizedStringFromPersonNameComponents:v27 style:0 options:0];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        (*v44)(v26, v50);
        NSString v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v30 = v25;
        uint64_t v11 = v48;
        uint64_t v32 = v52;
        Class v31 = isa;
        uint64_t v33 = v51;
        [v30 initWithBeneficiaryID:isa beneficiaryHandle:v52 beneficiaryFirstName:v51 beneficiaryLastName:v24 beneficiaryDisplayName:v29 status:*(void *)&v16[*(int *)(v48 + 32)]];

        sub_1000D93F0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        uint64_t v19 = v47;
        sub_1000D93F0((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v23 += v45;
        --v20;
      }
      while (v20);
      uint64_t v21 = v54;
      a3 = v42;
    }
    a3(v21, 0);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000CC75C(uint64_t a1, void (*a2)(void, void), uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a4;
  uint64_t v56 = a3;
  uint64_t v54 = type metadata accessor for PersonNameComponents();
  uint64_t v6 = *(void *)(v54 - 8);
  __chkstk_darwin(v54, v7);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for InheritanceInvitationRecord();
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v49 - v16;
  uint64_t v18 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (uint64_t *)((char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v21, &qword_100325890);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = *v21;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E760);
    swift_errorRetain();
    NSString v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      Class v27 = a2;
      id v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138412290;
      uint64_t v29 = _convertErrorToNSError(_:)();
      uint64_t v58 = (void *)v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v28 = v29;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error fetching invitation from storage: %@", v26, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      a2 = v27;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(0, v22);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_1000D9388((uint64_t)v21, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    NSString v52 = v17;
    sub_1000D9320((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    v30.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
    NSString v51 = String._bridgeToObjectiveC()();
    if (*(void *)&v14[v10[6] + 8])
    {
      swift_bridgeObjectRetain();
      NSString v50 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v50 = 0;
    }
    os_log_type_t v53 = (void (*)(void *, void))a2;
    if (*(void *)&v14[v10[7] + 8])
    {
      swift_bridgeObjectRetain();
      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v32 = 0;
    }
    id v49 = objc_allocWithZone((Class)AAInheritanceInvitation);
    PersonNameComponents.init()();
    swift_bridgeObjectRetain();
    PersonNameComponents.givenName.setter();
    swift_bridgeObjectRetain();
    PersonNameComponents.familyName.setter();
    uint64_t v33 = self;
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    id v35 = [v33 localizedStringFromPersonNameComponents:isa style:0 options:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v54);
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v37 = v50;
    uint64_t v38 = v51;
    id v39 = [v49 initWithBeneficiaryID:v30.super.isa beneficiaryHandle:v51 beneficiaryFirstName:v50 beneficiaryLastName:v32 beneficiaryDisplayName:v36 status:*(void *)&v14[v10[8]]];
    Class v40 = v30.super.isa;
    uint64_t v41 = v39;

    sub_1000D93F0((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    uint64_t v42 = (uint64_t)v52;
    if (static UUID.== infix(_:_:)())
    {
      id v43 = v41;
      v53(v41, 0);
    }
    else
    {
      uint64_t v44 = (void (*)(void, void *))v53;
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      sub_100007288(v45, (uint64_t)qword_10033E760);
      id v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Fetched invitation did not match record.", v48, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for InheritanceError(0);
      uint64_t v57 = 2;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      id v43 = v58;
      v44(0, v58);
    }
    return sub_1000D93F0(v42, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }
}

uint64_t sub_1000CD044(uint64_t a1, char a2, void *a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for InheritanceInvitationRecord() - 8;
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v19, v22);
  __chkstk_darwin(v23, v24);
  uint64_t result = a1;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E760);
    swift_errorRetain();
    id v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 138412290;
      uint64_t v39 = _convertErrorToNSError(_:)();
      uint64_t v53 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v38 = v39;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Error removing invitation from storage: %@", v37, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!a4) {
        return sub_100007844(a1, 1);
      }
    }
    else
    {
      sub_100007844(a1, 1);

      if (!a4) {
        return sub_100007844(a1, 1);
      }
    }
    swift_errorRetain();
    a4(a1);
    sub_100007844(a1, 1);
    return sub_100007844(a1, 1);
  }
  uint64_t v29 = *(void *)(a1 + 16);
  if (v29)
  {
    uint64_t v47 = v27;
    uint64_t v48 = (uint64_t)&v46 - v26;
    uint64_t v49 = a6;
    uint64_t v50 = result;
    uint64_t v51 = a5;
    NSString v52 = a4;
    uint64_t v30 = result + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
    Class v31 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v32 = *(void *)(v25 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000D9320(v30, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      id v33 = [a3 beneficiaryID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v33) = static UUID.== infix(_:_:)();
      (*v31)(v16, v12);
      if (v33) {
        break;
      }
      sub_1000D93F0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      v30 += v32;
      if (!--v29)
      {
        uint64_t result = sub_100007844(v50, 0);
        a4 = v52;
        goto LABEL_7;
      }
    }
    sub_100007844(v50, 0);
    uint64_t v40 = v47;
    sub_1000D9388((uint64_t)v21, v47, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    uint64_t v41 = v40;
    uint64_t v42 = v48;
    sub_1000D9388(v41, v48, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    sub_100008EF8((void *)(v49 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController), *(void *)(v49 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24));
    uint64_t v43 = swift_allocObject();
    uint64_t v45 = v51;
    uint64_t v44 = (uint64_t)v52;
    *(void *)(v43 + 16) = v52;
    *(void *)(v43 + 24) = v45;
    sub_100011D2C(v44);
    sub_1000E6700(v42, (uint64_t)sub_1000D8D64, v43);
    swift_release();
    return sub_1000D93F0(v42, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }
  else
  {
LABEL_7:
    if (a4) {
      return ((uint64_t (*)(void))a4)(0);
    }
  }
  return result;
}

uint64_t sub_1000CD670(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  char v6 = a2;
  int v35 = a2;
  uint64_t v36 = a1;
  uint64_t v34 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v34 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v34, v10);
  uint64_t v30 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_invitationResponder;
  id v12 = objc_allocWithZone((Class)type metadata accessor for InheritanceInvitationActionAnalyticsEvent());
  uint64_t v13 = (void *)sub_1001BE15C();
  uint64_t v14 = swift_allocObject();
  *(unsigned char *)(v14 + 16) = v6;
  uint64_t v15 = v31;
  *(void *)(v14 + 24) = v13;
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = a4;
  id v33 = sub_100008EF8((void *)(v11 + 40), *(void *)(v11 + 64));
  sub_1000D7478((_OWORD *)v11, v37);
  uint64_t v16 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v34);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 136) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v18 = (v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  long long v20 = v37[5];
  *(_OWORD *)(v19 + 80) = v37[4];
  *(_OWORD *)(v19 + 96) = v20;
  *(_OWORD *)(v19 + 112) = v37[6];
  *(void *)(v19 + 128) = v38;
  long long v21 = v37[1];
  *(_OWORD *)(v19 + 16) = v37[0];
  *(_OWORD *)(v19 + 32) = v21;
  long long v22 = v37[3];
  *(_OWORD *)(v19 + 48) = v37[2];
  *(_OWORD *)(v19 + 64) = v22;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v19 + v17, v30, v16);
  *(void *)(v19 + v18) = v13;
  unint64_t v23 = v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = v32;
  *(void *)unint64_t v23 = v15;
  *(void *)(v23 + 8) = v24;
  *(unsigned char *)(v23 + 16) = v35;
  uint64_t v25 = (void *)(v19 + ((v18 + 39) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v25 = sub_1000D9D4C;
  v25[1] = v14;
  id v26 = v13;
  sub_100011D2C(v15);
  id v27 = v26;
  sub_100011D2C(v15);
  swift_retain();
  sub_1000EAD74(v36, (uint64_t)sub_1000D74B4, v19);
  swift_release();

  return swift_release();
}

uint64_t sub_1000CDA60(uint64_t a1, char a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  char v6 = v5;
  uint64_t v43 = a4;
  int v11 = a3;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v42 - 8);
  uint64_t v12 = *(void *)(v41 + 64);
  __chkstk_darwin(v42, v13);
  uint64_t v14 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = objc_allocWithZone((Class)type metadata accessor for InheritanceInvitationActionAnalyticsEvent());
  uint64_t v16 = sub_1001BE15C();
  if (v11 != 4)
  {
    sub_100009F04(&qword_100324668);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    strcpy((char *)(inited + 32), "didCDPRepair");
    *(unsigned char *)(inited + 45) = 0;
    *(_WORD *)(inited + 46) = -5120;
    LOBYTE(v44[0]) = a3;
    String.init<A>(describing:)();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 48) = v18;
    sub_10022175C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.appendEvent(data:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = swift_allocObject();
  int v40 = a2 & 1;
  *(unsigned char *)(v19 + 16) = a2 & 1;
  uint64_t v39 = (void *)v16;
  uint64_t v20 = v43;
  *(void *)(v19 + 24) = v16;
  *(void *)(v19 + 32) = v20;
  uint64_t v21 = a5;
  *(void *)(v19 + 40) = a5;
  sub_100008A94((uint64_t)v6 + 40, (uint64_t)v46);
  v37[1] = sub_100008EF8(v46, v46[3]);
  sub_1000D7478(v6, v44);
  uint64_t v22 = v41;
  uint64_t v23 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))((char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v42);
  unint64_t v24 = (*(unsigned __int8 *)(v22 + 80) + 136) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v25 = (v12 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = a1;
  v37[0] = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = swift_allocObject();
  long long v27 = v44[5];
  long long v28 = v44[6];
  *(_OWORD *)(v26 + 80) = v44[4];
  *(_OWORD *)(v26 + 96) = v27;
  *(_OWORD *)(v26 + 112) = v28;
  *(void *)(v26 + 128) = v45;
  long long v29 = v44[1];
  *(_OWORD *)(v26 + 16) = v44[0];
  *(_OWORD *)(v26 + 32) = v29;
  long long v30 = v44[3];
  *(_OWORD *)(v26 + 48) = v44[2];
  *(_OWORD *)(v26 + 64) = v30;
  (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v26 + v24, v14, v23);
  uint64_t v31 = v39;
  *(void *)(v26 + v25) = v39;
  uint64_t v32 = v26 + v37[0];
  *(void *)uint64_t v32 = v20;
  *(void *)(v32 + 8) = v21;
  *(unsigned char *)(v32 + 16) = v40;
  id v33 = (void (**)(uint64_t))(v26 + ((v25 + 39) & 0xFFFFFFFFFFFFFFF8));
  void *v33 = sub_1000D7468;
  v33[1] = (void (*)(uint64_t))v19;
  id v34 = v31;
  sub_100011D2C(v20);
  id v35 = v34;
  sub_100011D2C(v20);
  swift_retain();
  sub_1000EAD74(v38, (uint64_t)sub_1000D74B4, v26);
  swift_release();

  swift_release();
  return sub_100008EA8((uint64_t)v46);
}

uint64_t sub_1000CDDF4(uint64_t a1, char a2, void (*a3)(void, uint64_t), uint64_t a4)
{
  uint64_t v8 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v8 - 8, v9);
  int v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E760);
    swift_errorRetain();
    long long v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      long long v29 = (uint8_t *)swift_slowAlloc();
      long long v30 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v29 = 138412290;
      uint64_t v31 = _convertErrorToNSError(_:)();
      id v35 = (void *)v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v30 = v31;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Error fetching health records from storage: %@", v29, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a3(0, a1);
    sub_100007844(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 16);
    NSString v18 = _swiftEmptyArrayStorage;
    if (v17)
    {
      v33[1] = a4;
      id v34 = a3;
      id v35 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v19 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      uint64_t v20 = *(void *)(v13 + 72);
      do
      {
        sub_1000D9320(v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        uint64_t v21 = &v16[*(int *)(v12 + 20)];
        uint64_t v22 = type metadata accessor for Date();
        uint64_t v23 = *(void *)(v22 - 8);
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v11, v21, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v11, 0, 1, v22);
        v24.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        Class isa = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v22) != 1)
        {
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v22);
        }
        [objc_allocWithZone((Class)AATrustedContactHealthInfo) initWithID:v24.super.isa lastValidCheckTimeStamp:isa];

        sub_1000D93F0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v19 += v20;
        --v17;
      }
      while (v17);
      a3 = v34;
      NSString v18 = v35;
    }
    a3(v18, 0);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000CE36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E760);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    int v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)int v11 = 136315138;
    type metadata accessor for InheritanceRequestManager();
    sub_100009F04((uint64_t *)&unk_100325878);
    uint64_t v12 = String.init<A>(describing:)();
    sub_100135190(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s - Displaying Inheritance Invitation UI using Springboard.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(v4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController), *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24));
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = v14;
  swift_retain();
  swift_retain();
  sub_1000EAD74(a1, (uint64_t)sub_1000D89FC, (uint64_t)v15);
  swift_release();
  return swift_release();
}

uint64_t sub_1000CE5C0(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v10, v11);
  unint64_t v13 = (uint64_t *)((char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v13, (uint64_t *)&unk_100325860);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = *v13;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      NSString v18 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)NSString v18 = 136315138;
      uint64_t v35 = v14;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v19 = String.init<A>(describing:)();
      uint64_t v35 = sub_100135190(v19, v20, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error fetching benefactor record: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(v14);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_1000D9388((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    uint64_t v21 = *(void *)&v9[*(int *)(v6 + 24)];
    id v22 = objc_allocWithZone((Class)AACustodianshipInfo);
    swift_bridgeObjectRetain();
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v25 = [v22 initWithID:isa status:v21 ownerHandle:v24];

    id v26 = [objc_allocWithZone((Class)AAOBInheritanceInvitationModel) initWithBenefactorInfo:v25];
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      os_log_type_t v28 = (void *)Strong;
      long long v29 = *(void **)(Strong + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_flowPresenter);
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = a2;
      *(void *)(v30 + 24) = a3;
      aBlock[4] = (uint64_t)sub_1000D8A08;
      aBlock[5] = v30;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10025ED44;
      aBlock[3] = (uint64_t)&unk_1002F9EC0;
      uint64_t v31 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v29 presentModel:v26 completion:v31];
      _Block_release(v31);

      id v25 = v28;
    }

    return sub_1000D93F0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
}

uint64_t sub_1000CEB88(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100007288(v4, (uint64_t)qword_10033E760);
    swift_errorRetain();
    Swift::String v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      uint64_t v14 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v14;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error occurred displaying Inheritance Invitation UI: %@", v7, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E760);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Successfully displayed inheritance invite UI", v12, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(void))a2)(0);
  }
}

void sub_1000CEE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  v38[0] = a5;
  v38[2] = a4;
  uint64_t v17 = sub_100009F04(&qword_100325870);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v13 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__accountStore, v17);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  id v22 = sub_100008EF8(aBlock, (uint64_t)v41);
  id v23 = [*(id *)(*v22 + 16) aa_primaryAppleAccount:v38[0]];
  NSString v24 = v23;
  uint64_t v39 = v13;
  v38[1] = a7;
  if (v23)
  {
    id v25 = [v23 aa_altDSID];

    if (v25)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  sub_100008EA8((uint64_t)aBlock);
  id v26 = objc_allocWithZone((Class)AKInheritanceCLIContext);
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v28 = [v26 initWithOwnerAltDSID:v27];

  NSString v29 = String._bridgeToObjectiveC()();
  [v28 setAccessKeyString:v29];

  NSString v30 = String._bridgeToObjectiveC()();
  [v28 setBeneficiaryPassword:v30];

  if (a6) {
    NSString v31 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v31 = 0;
  }
  [v28 setBeneficiaryFirstName:v31];

  if (a8) {
    NSString v32 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v32 = 0;
  }
  [v28 setBeneficiaryLastName:v32];

  id v33 = v28;
  NSString v34 = String._bridgeToObjectiveC()();
  [v33 setBeneficiarySetupToken:v34];

  uint64_t v35 = *(void **)(v39 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller);
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = a11;
  *(void *)(v36 + 24) = a12;
  uint64_t v42 = sub_1000D89B8;
  uint64_t v43 = v36;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  uint64_t v41 = &unk_1002F9DF8;
  uint64_t v37 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v35 _setupBeneficiaryAliasWithInheritanceContext:v33 completion:v37];
  _Block_release(v37);
}

void sub_1000CF1CC(id a1, uint64_t a2, void (*a3)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E760);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error occurred while creating beneficiary alias", v8, 2u);
      swift_slowDealloc();
    }

    swift_errorRetain();
    a3(0, 0, 0, 0, a2);
    swift_errorRelease();
    swift_errorRelease();
    return;
  }
  if (a1)
  {
    id v10 = [a1 beneficiaryAltDSID];
    if (v10)
    {
      os_log_type_t v11 = v10;
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      id v15 = [a1 beneficiaryAccountName];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v19 = v18;

        if (qword_100320B90 != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        sub_100007288(v20, (uint64_t)qword_10033E760);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = swift_slowAlloc();
          uint64_t v28 = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136315394;
          swift_bridgeObjectRetain();
          sub_100135190(v12, v14, &v28);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v23 + 12) = 2080;
          swift_bridgeObjectRetain();
          sub_100135190(v17, v19, &v28);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Beneficiary Alias setup successfully:\nbeneficiaryAltDSID - %s\nbeneficiaryAccountName - %s", (uint8_t *)v23, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        a3(v12, v14, v17, v19, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
    }
  }
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100007288(v24, (uint64_t)qword_10033E760);
  oslog = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v25))
  {
    id v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v25, "Setup Beneficiary Alias returned with empty result", v26, 2u);
    swift_slowDealloc();
  }
}

uint64_t destroy for InheritanceInvitationResponder(uint64_t a1)
{
  sub_100008EA8(a1);
  sub_100008EA8(a1 + 40);

  return sub_100008EA8(a1 + 80);
}

_OWORD *initializeWithCopy for InheritanceInvitationResponder(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

uint64_t *assignWithCopy for InheritanceInvitationResponder(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *sub_1000CF984(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        os_log_type_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for InheritanceInvitationResponder(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for InheritanceInvitationResponder(uint64_t a1, uint64_t a2)
{
  sub_100008EA8(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_100008EA8(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_100008EA8(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for InheritanceInvitationResponder(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InheritanceInvitationResponder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceInvitationResponder()
{
  return &type metadata for InheritanceInvitationResponder;
}

void sub_1000CFD08(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  NSString v8 = a4;
  if (a2)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  NSString v9 = 0;
  if (a4) {
LABEL_3:
  }
    NSString v8 = String._bridgeToObjectiveC()();
LABEL_4:
  if (a5) {
    uint64_t v10 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v10 = 0;
  }
  id v11 = (id)v10;
  (*(void (**)(uint64_t, NSString, NSString))(a6 + 16))(a6, v9, v8);
}

void sub_1000CFDC8(void *a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v47 = a7;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v43 = a3;
    uint64_t v44 = a4;
    uint64_t v45 = a9;
    uint64_t v46 = a8;
    uint64_t v21 = qword_100320B90;
    id v22 = a1;
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E760);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      id v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Successfully created accessKey. Setting up beneficiary with IdMS...", v26, 2u);
      swift_slowDealloc();
    }

    [a5 setAccessKey:v22];
    id v27 = [a6 beneficiaryID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [a5 setBeneficiaryIdentifier:v28];

    [a5 setManifest:v47];
    NSString v29 = String._bridgeToObjectiveC()();
    [a5 setBeneficiarySetupToken:v29];

    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      NSString v31 = (void *)Strong;
      NSString v32 = *(void **)(Strong + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller);
      swift_unknownObjectRetain();

      id v33 = (void *)swift_allocObject();
      void v33[2] = a6;
      v33[3] = v22;
      uint64_t v34 = v44;
      v33[4] = v43;
      v33[5] = v34;
      aBlock[4] = (uint64_t)sub_1000D9BE0;
      aBlock[5] = (uint64_t)v33;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10025ED44;
      void aBlock[3] = (uint64_t)&unk_1002FA780;
      uint64_t v35 = _Block_copy(aBlock);
      id v36 = v22;
      swift_unknownObjectRetain();
      swift_retain();
      swift_release();
      [v32 setupBeneficiaryWithInheritanceContext:a5 completion:v35];
      swift_unknownObjectRelease();

      _Block_release(v35);
    }
    else
    {
    }
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_100007288(v37, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      int v40 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)int v40 = 136315138;
      uint64_t v49 = a2;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_10032B480);
      uint64_t v41 = String.init<A>(describing:)();
      uint64_t v49 = sub_100135190(v41, v42, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Error generating access key: %s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    a3(0, a2);
  }
}

uint64_t sub_1000D0308(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    NSString v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v20 = a3;
      uint64_t v21 = a2;
      *(_DWORD *)id v11 = 136315138;
      swift_getErrorValue();
      uint64_t v12 = Error.localizedDescription.getter();
      uint64_t v22 = sub_100135190(v12, v13, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error persisting manifest with Inheritance Controller: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E760);
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Successfully setup up beneficiary with IdMS", v17, 2u);
      swift_slowDealloc();
    }
  }
  [a2 setAccessKey:a3 v20, v21, v22];
  self;
  uint64_t v18 = swift_dynamicCastObjCClass();
  return a4(v18, a1);
}

uint64_t sub_1000D0610(uint64_t a1, char a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v8 - 8, v9);
  id v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v12, v13);
  id v15 = (void *)((char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E760);
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      NSString v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unable to determine Manatee state - aborting benficiary creation...", v28, 2u);
      swift_slowDealloc();
    }

    *id v15 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v15);
    sub_100080A98(a1, 1);
    return sub_100006574((uint64_t)v15, &qword_100321CF0);
  }
  else
  {
    int v16 = a1 & 1;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E760);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 67109120;
      LODWORD(v29[0]) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving BeneficiaryInfoRecord in manatee? %{BOOL}d", v20, 8u);
      swift_slowDealloc();
    }

    uint64_t v21 = (void *)swift_unknownObjectRetain();
    sub_100014B40(v21, v16, (uint64_t)v11);
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v23 = (void *)Strong;
      sub_100008A94(Strong + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController, (uint64_t)v29);

      sub_100008EF8(v29, v29[3]);
      sub_1000E80F4((uint64_t)v11, (uint64_t)a3, a4);
      sub_1000D93F0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      return sub_100008EA8((uint64_t)v29);
    }
    else
    {
      return sub_1000D93F0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }
  }
}

void sub_1000D09A4(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4, uint64_t a5)
{
  uint64_t v49 = a3;
  uint64_t v8 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  id v15 = (char *)&v46 - v14;
  uint64_t v16 = sub_100009F04(&qword_100325890);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (uint64_t *)((char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (uint64_t *)((char *)&v46 - v22);
  sub_100019730(a1, (uint64_t)&v46 - v22, &qword_100325890);
  uint64_t v50 = v16;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v51[0] = *v23;
    uint64_t v24 = v51[0];
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for InheritanceError(0);
    if (swift_dynamicCast())
    {
      uint64_t v47 = a5;
      uint64_t v48 = a4;
      uint64_t v25 = (void *)v53;
      v51[0] = v53;
      uint64_t v52 = 3;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      id v26 = (void *)v53;
      uint64_t v52 = v53;
      char v27 = static _BridgedStoredNSError.== infix(_:_:)();

      if (v27)
      {
        if (qword_100320B90 != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        sub_100007288(v28, (uint64_t)qword_10033E760);
        NSString v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v29, v30))
        {
          NSString v31 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)NSString v31 = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "No existing invitation found. Creating new Invitation...", v31, 2u);
          swift_slowDealloc();
        }

        swift_beginAccess();
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        if (Strong)
        {
          id v33 = (void *)Strong;
          sub_1000D10F4(v49, v48, v47);
          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
        }

        return;
      }

      a5 = v47;
      a4 = v48;
    }
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100007288(v40, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v47 = a5;
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      v51[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315138;
      uint64_t v53 = v24;
      swift_errorRetain();
      uint64_t v44 = String.init<A>(describing:)();
      uint64_t v53 = sub_100135190(v44, v45, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Error fetching invitation - %s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t *v20 = v24;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    ((void (*)(uint64_t *))a4)(v20);
    swift_errorRelease();
    sub_100006574((uint64_t)v20, &qword_100325890);
  }
  else
  {
    sub_1000D9388((uint64_t)v23, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E760);
    sub_1000D9320((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      v51[0] = swift_slowAlloc();
      uint64_t v48 = a4;
      uint64_t v49 = v20;
      *(_DWORD *)uint64_t v37 = 136315138;
      uint64_t v38 = sub_100290048();
      uint64_t v53 = sub_100135190(v38, v39, v51);
      a4 = v48;
      uint64_t v20 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000D93F0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Found existing invitation - %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000D93F0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    }

    sub_1000D9320((uint64_t)v15, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    swift_storeEnumTagMultiPayload();
    ((void (*)(uint64_t *))a4)(v20);
    sub_100006574((uint64_t)v20, &qword_100325890);
    sub_1000D93F0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }
}

void sub_1000D10F4(void *a1, NSObject *a2, uint64_t a3)
{
  id v6 = [a1 handle];
  if (v6)
  {
    long long v7 = v6;
    os_log_t oslog = a2;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    type metadata accessor for ContactsHelper();
    swift_allocObject();
    sub_100009F04((uint64_t *)&unk_100325960);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_100324D30);
    Dependency.wrappedValue.getter();
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v24 contactForHandle:v11];

    swift_unknownObjectRelease();
    if (v12)
    {
      id v13 = objc_allocWithZone((Class)AALocalContactInfo);
      swift_bridgeObjectRetain();
      id v14 = v12;
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v12 = [v13 initWithHandle:v15 contact:v14];
      swift_release();
    }
    else
    {
      swift_release();
    }
    uint64_t v19 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = oslog;
    v20[3] = a3;
    v20[4] = a1;
    v20[5] = v8;
    v20[6] = v10;
    v20[7] = v12;
    v20[8] = v19;
    id v21 = v12;
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    sub_1000F02FC((uint64_t)sub_1000D9004, (uint64_t)v20);

    swift_release();
    swift_release();
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E760);
    osloga = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(osloga, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, osloga, v17, "Unable to find the handle for the beneficiary.", v18, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000D1410(uint64_t a1, char a2, void (*a3)(void *), uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  id v73 = a8;
  uint64_t v74 = a6;
  uint64_t v76 = a7;
  uint64_t v75 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v75 - 8);
  __chkstk_darwin(v75, v15);
  os_log_type_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (int *)type metadata accessor for InheritanceInvitationRecord();
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v77 = (uint64_t)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v25 = (char *)&v66 - v24;
  __chkstk_darwin(v23, v26);
  uint64_t v78 = (uint64_t)&v66 - v27;
  uint64_t v28 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v28, v28);
  os_log_type_t v30 = (uint64_t *)((char *)&v66 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    *os_log_type_t v30 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v30);
    return sub_100006574((uint64_t)v30, &qword_100325890);
  }
  else
  {
    uint64_t v71 = (void (*)(void))a3;
    uint64_t v72 = a4;
    uint64_t v31 = a9;
    id v32 = [a5 beneficiaryID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v33 = v73;
    uint64_t v69 = v17;
    uint64_t v70 = a1 & 1;
    if (v73)
    {
      id v34 = [v73 firstName];
      uint64_t v67 = a9;
      if (v34)
      {
        uint64_t v35 = v34;
        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v38 = v37;
      }
      else
      {
        uint64_t v36 = 0;
        uint64_t v38 = 0;
      }
      uint64_t v40 = v14;
      id v44 = [v33 lastName:v38];
      if (v44)
      {
        unint64_t v45 = v44;
        uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v41 = v46;
      }
      else
      {
        uint64_t v68 = 0;
        uint64_t v41 = 0;
      }
      uint64_t v42 = v36;
      uint64_t v43 = v66;
      uint64_t v31 = v67;
    }
    else
    {
      uint64_t v40 = v14;
      uint64_t v68 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
    }
    id v73 = (id)(v31 + 16);
    uint64_t v47 = &v25[v18[6]];
    uint64_t v48 = (uint64_t *)&v25[v18[7]];
    uint64_t v49 = v69;
    uint64_t v50 = v75;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v25, v69, v75);
    uint64_t v51 = &v25[v18[5]];
    uint64_t v52 = v76;
    *(void *)uint64_t v51 = v74;
    *((void *)v51 + 1) = v52;
    *(void *)uint64_t v47 = v42;
    *((void *)v47 + 1) = v43;
    *uint64_t v48 = v68;
    v48[1] = v41;
    *(void *)&v25[v18[8]] = 1;
    swift_bridgeObjectRetain();
    UUID.init()();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v49, v50);
    *(_OWORD *)&v25[v18[10]] = xmmword_1002A9C60;
    int v53 = v70;
    v25[v18[11]] = v70;
    uint64_t v54 = v78;
    sub_1000D9388((uint64_t)v25, v78, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_100007288(v55, (uint64_t)qword_10033E760);
    uint64_t v56 = v77;
    sub_1000D9320(v54, v77, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = swift_slowAlloc();
      v79[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 136315394;
      uint64_t v60 = sub_100290048();
      uint64_t v80 = sub_100135190(v60, v61, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000D93F0(v56, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      *(_WORD *)(v59 + 12) = 1024;
      LODWORD(v80) = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "New invitation created - %s in manatee? %{BOOL}d", (uint8_t *)v59, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000D93F0(v56, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    }

    uint64_t v63 = (uint64_t)v71;
    uint64_t v62 = v72;
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v65 = (void *)Strong;
      sub_100008A94(Strong + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController, (uint64_t)v79);

      sub_100008EF8(v79, v79[3]);
      sub_1000E5FA8(v54, v63, v62);
      sub_1000D93F0(v54, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      return sub_100008EA8((uint64_t)v79);
    }
    else
    {
      return sub_1000D93F0(v54, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    }
  }
}

uint64_t sub_1000D1A24(uint64_t a1, char a2, uint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)v27 - v17;
  if (a2)
  {
    uint64_t v20 = *(void *)(a3 + 16);
    uint64_t v19 = _swiftEmptyArrayStorage;
    if (v20)
    {
      v27[1] = a5;
      uint64_t v28 = a4;
      uint64_t v29 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v21 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      uint64_t v22 = *(void *)(v11 + 72);
      do
      {
        sub_1000D9320(v21, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        sub_1000D9320((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        id v23 = objc_allocWithZone((Class)AABenefactorInfo);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        NSString v25 = String._bridgeToObjectiveC()();
        [v23 initWithBeneficiaryID:isa handle:v25 status:*(void *)&v15[*(int *)(v10 + 24)]];

        sub_1000D93F0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        sub_1000D93F0((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v21 += v22;
        --v20;
      }
      while (v20);
      a4 = v28;
      uint64_t v19 = v29;
    }
  }
  else
  {
    sub_100007850(a1, 0);
    uint64_t v19 = sub_1000D50B8(a3, a1);
    sub_100007844(a1, 0);
  }
  a4(v19, 0);
  return swift_bridgeObjectRelease();
}

void sub_1000D1C84(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v51 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v50 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v12 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = (void (*)(char *, uint64_t))a1;
  sub_1000D9320(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  id v17 = objc_allocWithZone((Class)AABenefactorInfo);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v17 initWithBeneficiaryID:isa handle:v19 status:*(void *)&v16[*(int *)(v13 + 32)]];

  id v21 = v20;
  sub_1000D93F0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  id v22 = [v20 beneficiaryID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(a2 + 16) && (unint64_t v23 = sub_1001359C4((uint64_t)v11), (v24 & 1) != 0))
  {
    id v49 = v21;
    NSString v25 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v23);
    uint64_t v26 = *v25;
    unint64_t v27 = v25[1];
    sub_100013140(*v25, v27);
    uint64_t v28 = v52;
    uint64_t v29 = *(void (**)(char *, uint64_t))(v52 + 8);
    v29(v11, v5);
    sub_100013140(v26, v27);
    sub_100012A68(v26, v27, v53);
    uint64_t v30 = v53[0];
    unint64_t v31 = v53[1];
    sub_1000190C0((uint64_t)v53, (uint64_t)&v54);
    if (*((void *)&v55 + 1))
    {
      v57[0] = v54;
      v57[1] = v55;
      v57[2] = v56;
      sub_10000850C(0, (unint64_t *)&qword_100325980);
      uint64_t v32 = (uint64_t)v50;
      (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v28 + 16))(v50, v48, v5);
      sub_100013140(v30, v31);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v33 = sub_10001214C(v32, (uint64_t)v57);
      id v21 = v49;
      [v49 setAccessKey:v33];
      sub_100013198(v26, v27);
      sub_100019168((uint64_t)v53);

      goto LABEL_11;
    }
    sub_100013198(v26, v27);
    id v21 = v49;
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, uint64_t))(v52 + 8);
    v29(v11, v5);
  }
  uint64_t v48 = v29;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_100007288(v34, (uint64_t)qword_10033E760);
  id v35 = v21;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    id v49 = v21;
    unint64_t v39 = (uint8_t *)v38;
    uint64_t v40 = v5;
    uint64_t v47 = swift_slowAlloc();
    *(void *)&v57[0] = v47;
    *(_DWORD *)unint64_t v39 = 136315138;
    id v41 = [v35 beneficiaryID:v39 + 4, v47, v48];
    uint64_t v42 = v50;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000D9CC8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v45 = v44;
    v48(v42, v40);
    uint64_t v58 = sub_100135190(v43, v45, (uint64_t *)v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "No InheritanceAccessKeyRecord for beneficiaryID - %s.", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v21 = v49;
    swift_slowDealloc();
  }
  else
  {
  }
LABEL_11:
  void *v51 = v21;
}

uint64_t sub_1000D2248(uint64_t a1, uint64_t a2)
{
  long long v3 = v2;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E760);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Fetching AccessKey info from Shared BeneficiaryInfoRecords", v9, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8(&v3[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController], *(void *)&v3[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24]);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = v3;
  swift_retain();
  uint64_t v11 = v3;
  sub_1000E6F88((uint64_t)sub_1000D9310, (uint64_t)v10);

  return swift_release();
}

uint64_t sub_1000D23AC(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, void *a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v49 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v53 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
LABEL_26:
    }
      swift_once();
    uint64_t v38 = type metadata accessor for Logger();
    sub_100007288(v38, (uint64_t)qword_10033E760);
    swift_errorRetain();
    unint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = (void *)swift_slowAlloc();
      *(_DWORD *)id v41 = 138412290;
      uint64_t v43 = _convertErrorToNSError(_:)();
      long long v56 = (void *)v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v42 = v43;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Error fetching beneficiaries from storage: %@", v41, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a3(a1, 1);
    sub_100007844(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    uint64_t v48 = a4;
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)sub_1002219C4((uint64_t)_swiftEmptyArrayStorage);
    id v14 = a5;
    uint64_t v15 = sub_1000D4CB0(a1, (uint64_t)v14);

    sub_100007844(a1, 0);
    uint64_t v16 = v15[2];
    if (v16)
    {
      uint64_t v47 = a3;
      uint64_t v52 = type metadata accessor for BeneficiaryInfoRecord();
      uint64_t v17 = *(void *)(v52 - 8);
      unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      uint64_t v46 = v15;
      a3 = (void (*)(uint64_t, uint64_t))((char *)v15 + v18);
      uint64_t v51 = *(void *)(v17 + 72);
      long long v54 = *(void (**)(uint64_t, char *, uint64_t))(v49 + 16);
      uint64_t v55 = v49 + 16;
      uint64_t v50 = (void (**)(uint64_t, uint64_t))(v49 + 8);
      a1 = v53;
      while (1)
      {
        uint64_t v20 = v10;
        v54(a1, (char *)a3, v10);
        id v21 = (uint64_t *)((char *)a3 + *(int *)(v52 + 28));
        uint64_t v23 = *v21;
        unint64_t v22 = v21[1];
        sub_100013140(*v21, v22);
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v25 = a1;
        a1 = isUniquelyReferenced_nonNull_native;
        long long v56 = v13;
        unint64_t v27 = sub_1001359C4(v25);
        uint64_t v28 = v13[2];
        BOOL v29 = (v26 & 1) == 0;
        uint64_t v30 = v28 + v29;
        if (__OFADD__(v28, v29))
        {
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
        char v31 = v26;
        if (v13[3] >= v30)
        {
          if ((a1 & 1) == 0) {
            sub_10022D59C();
          }
          a1 = v53;
          uint64_t v13 = v56;
          if (v31) {
            goto LABEL_4;
          }
        }
        else
        {
          sub_10022A794(v30, a1);
          a1 = v53;
          unint64_t v32 = sub_1001359C4(v53);
          if ((v31 & 1) != (v33 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v27 = v32;
          uint64_t v13 = v56;
          if (v31)
          {
LABEL_4:
            uint64_t v19 = v13[7] + 16 * v27;
            sub_100013198(*(void *)v19, *(void *)(v19 + 8));
            *(void *)uint64_t v19 = v23;
            *(void *)(v19 + 8) = v22;
            uint64_t v10 = v20;
            goto LABEL_5;
          }
        }
        v13[(v27 >> 6) + 8] |= 1 << v27;
        uint64_t v10 = v20;
        v54(v13[6] + *(void *)(v49 + 72) * v27, (char *)a1, v20);
        uint64_t v34 = (uint64_t *)(v13[7] + 16 * v27);
        *uint64_t v34 = v23;
        v34[1] = v22;
        uint64_t v35 = v13[2];
        BOOL v36 = __OFADD__(v35, 1);
        uint64_t v37 = v35 + 1;
        if (v36) {
          goto LABEL_25;
        }
        v13[2] = v37;
LABEL_5:
        a3 = (void (*)(uint64_t, uint64_t))((char *)a3 + v51);
        swift_bridgeObjectRelease();
        (*v50)(a1, v10);
        if (!--v16)
        {
          swift_bridgeObjectRelease();
          a3 = v47;
          goto LABEL_23;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_23:
    uint64_t v45 = swift_bridgeObjectRetain();
    a3(v45, 0);
    return swift_bridgeObjectRelease_n();
  }
}

void sub_1000D28D0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (a1)
  {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)();
    if (AAUnderTest.getter()) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v6 = 0;
  if ((AAUnderTest.getter() & 1) == 0)
  {
LABEL_3:
    sub_100009F04(&qword_100324668);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
    strcpy((char *)(inited + 32), "inviteAction");
    *(unsigned char *)(inited + 45) = 0;
    *(_WORD *)(inited + 46) = -5120;
    String.init<A>(describing:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 48) = v8;
    strcpy((char *)(inited + 56), "numOfRelation");
    *(_WORD *)(inited + 70) = -4864;
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    sub_10022175C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
    swift_bridgeObjectRelease();
  }
LABEL_4:

  if (a4) {
    a4(a1);
  }
}

uint64_t sub_1000D2A3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, int a7, void (*a8)(uint64_t), uint64_t a9)
{
  uint64_t v78 = a8;
  int v74 = a7;
  uint64_t v77 = a6;
  uint64_t v76 = a5;
  id v75 = a4;
  uint64_t v79 = a3;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v70 - v18;
  uint64_t v20 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (uint64_t *)((char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v23, (uint64_t *)&unk_100325860);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = *v23;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E760);
    swift_errorRetain();
    char v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      BOOL v29 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138412290;
      uint64_t v30 = _convertErrorToNSError(_:)();
      *(void *)&v80[0] = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v29 = v30;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Error responding to the invitation: %@", v28, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    v78(v24);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v71 = type metadata accessor for BenefactorInfoRecord();
    uint64_t v31 = swift_allocBox();
    uint64_t v72 = v32;
    sub_1000D9388((uint64_t)v23, v32, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    uint64_t v73 = a2;
    sub_100008A94(a2, (uint64_t)v83);
    char v33 = sub_100008EF8(v83, v83[3]);
    uint64_t v34 = *v33;
    uint64_t v35 = *(void **)(*v33 + 16);
    id v36 = [v35 aa_primaryAppleAccount];
    if (v36
      && (uint64_t v37 = v36,
          id v38 = objc_msgSend(v36, "aa_altDSID"),
          id v39 = objc_msgSend(v35, "aa_authKitAccountForAltDSID:", v38),
          v37,
          v38,
          v39)
      && (unsigned int v40 = [*(id *)(v34 + 24) canBeBeneficiaryForAccount:v39], v39,
                                                                                                   v40))
    {
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      sub_100007288(v41, (uint64_t)qword_10033E760);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      BOOL v44 = os_log_type_enabled(v42, v43);
      uint64_t v45 = (_OWORD *)v73;
      if (v44)
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Notifying owner of invitation response...", v46, 2u);
        swift_slowDealloc();
      }

      sub_100008A94((uint64_t)(v45 + 5), (uint64_t)v82);
      sub_100008EF8(v82, v82[3]);
      uint64_t v47 = (uint64_t *)(v72 + *(int *)(v71 + 20));
      uint64_t v48 = v47[1];
      uint64_t v79 = *v47;
      (*(void (**)(char *))(v12 + 16))(v19);
      sub_1000D7478(v45, v80);
      uint64_t v49 = swift_allocObject();
      uint64_t v50 = v78;
      *(void *)(v49 + 16) = v31;
      *(void *)(v49 + 24) = v50;
      *(void *)(v49 + 32) = a9;
      char v51 = v74 & 1;
      *(unsigned char *)(v49 + 40) = v74 & 1;
      long long v52 = v80[5];
      *(_OWORD *)(v49 + 112) = v80[4];
      *(_OWORD *)(v49 + 128) = v52;
      *(_OWORD *)(v49 + 144) = v80[6];
      *(void *)(v49 + 160) = v81;
      long long v53 = v80[1];
      *(_OWORD *)(v49 + 48) = v80[0];
      *(_OWORD *)(v49 + 64) = v53;
      long long v54 = v80[3];
      *(_OWORD *)(v49 + 80) = v80[2];
      *(_OWORD *)(v49 + 96) = v54;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      sub_1001982F0(v79, v48, (uint64_t)v19, v51, sub_1000D898C, v49);
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
      sub_100008EA8((uint64_t)v82);
    }
    else
    {
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v55 = type metadata accessor for Logger();
      sub_100007288(v55, (uint64_t)qword_10033E760);
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, v79, v11);
      long long v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        *(void *)&v80[0] = swift_slowAlloc();
        uint64_t v78 = (void (*)(uint64_t))v31;
        *(_DWORD *)uint64_t v58 = 136315138;
        sub_1000D9CC8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
        v82[0] = sub_100135190(v59, v60, (uint64_t *)v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "User is not eligible to be a beneficiary, replying rejected for beneficiaryID: %s", v58, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
      }

      uint64_t v62 = sub_100008EF8((void *)(v73 + 80), *(void *)(v73 + 104));
      uint64_t v63 = (uint64_t *)(v72 + *(int *)(v71 + 20));
      uint64_t v64 = *v63;
      uint64_t v65 = v63[1];
      uint64_t v66 = *v62;
      id v67 = v75;
      uint64_t v68 = v76;
      uint64_t v69 = v77;
      sub_100011D2C(v76);
      swift_bridgeObjectRetain();
      sub_10019B960(v64, v65, v79, 0, v66, v67, v68, v69);
      sub_100011358(v68);
      swift_bridgeObjectRelease();
    }
    sub_100008EA8((uint64_t)v83);
    return swift_release();
  }
}

void sub_1000D32F4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (a1)
  {
    uint64_t v5 = (void *)_convertErrorToNSError(_:)();
    if (AAUnderTest.getter()) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if ((AAUnderTest.getter() & 1) == 0)
  {
LABEL_3:
    sub_100009F04(&qword_100324668);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
    strcpy((char *)(inited + 32), "inviteAction");
    *(unsigned char *)(inited + 45) = 0;
    *(_WORD *)(inited + 46) = -5120;
    String.init<A>(describing:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 48) = v7;
    strcpy((char *)(inited + 56), "numOfRelation");
    *(_WORD *)(inited + 70) = -4864;
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    sub_10022175C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
    swift_bridgeObjectRelease();
  }
LABEL_4:

  if (a3) {
    a3(a1);
  }
}

uint64_t sub_1000D3458(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, char a5, uint64_t a6)
{
  unsigned int v40 = a3;
  uint64_t v41 = a4;
  uint64_t v10 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_projectBox();
  if (a1)
  {
    swift_beginAccess();
    Swift::String v15 = *(Swift::String *)(v14 + *(int *)(v10 + 20));
    uint64_t v44 = 0xD000000000000028;
    unint64_t v45 = 0x800000010029C7A0;
    String.append(_:)(v15);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = 58;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v17 = v44;
    unint64_t v18 = v45;
    swift_getErrorValue();
    uint64_t v19 = Error.localizedDescription.getter();
    uint64_t v21 = v20;
    uint64_t v44 = v17;
    unint64_t v45 = v18;
    swift_bridgeObjectRetain();
    v22._countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = v44;
    unint64_t v23 = v45;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E760);
    swift_bridgeObjectRetain();
    char v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_100135190(v24, v23, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_errorRetain();
    v40(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E760);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Notified owner of invitation response.", v32, 2u);
      swift_slowDealloc();
    }

    char v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Updating status of Benefactor...", v35, 2u);
      swift_slowDealloc();
    }

    if (a5) {
      uint64_t v36 = 2;
    }
    else {
      uint64_t v36 = 4;
    }
    swift_beginAccess();
    *(void *)(v14 + *(int *)(v10 + 24)) = v36;
    sub_100008A94(a6 + 40, (uint64_t)v43);
    sub_100008EF8(v43, v43[3]);
    swift_beginAccess();
    sub_1000D9320(v14, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    uint64_t v37 = (void *)swift_allocObject();
    void v37[2] = v40;
    v37[3] = v41;
    v37[4] = a2;
    swift_retain();
    swift_retain();
    sub_1000EB800((uint64_t)v13, (uint64_t)sub_1000D89A4, (uint64_t)v37);
    swift_release();
    sub_1000D93F0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    return sub_100008EA8((uint64_t)v43);
  }
}

uint64_t sub_1000D3974(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (void *)((char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v9, (uint64_t *)&unk_100325860);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *v9;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v28 = v10;
      v29[0] = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v16 = String.init<A>(describing:)();
      uint64_t v28 = sub_100135190(v16, v17, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error updating Benefactor status - %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(v10);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E760);
    swift_retain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v27[1] = a3;
      uint64_t v21 = a2;
      Swift::String v22 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)Swift::String v22 = 134217984;
      uint64_t v23 = type metadata accessor for BenefactorInfoRecord();
      uint64_t v24 = swift_projectBox();
      swift_beginAccess();
      uint64_t v25 = *(void *)(v24 + *(int *)(v23 + 24));
      a2 = v21;
      uint64_t v28 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Updated Benefactor status to %ld", v22, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    a2(0);
    return sub_100006574((uint64_t)v9, (uint64_t *)&unk_100325860);
  }
}

void sub_1000D3D5C(uint64_t a1, void (*a2)(void, void), uint64_t a3)
{
  uint64_t v76 = a3;
  uint64_t v74 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v72 = *(void *)(v74 - 8);
  uint64_t v6 = __chkstk_darwin(v74, v5);
  uint64_t v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v12 = (char *)&v68 - v11;
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v16 = (char *)&v68 - v15;
  uint64_t v18 = __chkstk_darwin(v14, v17);
  uint64_t v75 = (uint64_t)&v68 - v19;
  uint64_t v73 = v20;
  __chkstk_darwin(v18, v21);
  uint64_t v77 = (uint64_t)&v68 - v22;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100007288(v23, (uint64_t)qword_10033E760);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    char v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Changing CK record status to declined...", v26, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v27 = sub_100058F80();
  uint64_t v28 = CKRecord.recordType.getter();
  uint64_t v30 = v29;

  if (v28 != 0xD00000000000001FLL || v30 != 0x800000010029B110)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
      os_log_type_t v31 = a2;
      uint64_t v32 = v12;
      uint64_t v70 = v8;
      goto LABEL_10;
    }
    if (v28 == 0xD00000000000001BLL && v30 == 0x800000010029B0C0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v62 & 1) == 0)
      {
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v65 = 0;
          uint64_t v66 = "Cannot recognize record type! Failed to change CKRecord trusted contact status to declined.";
          goto LABEL_28;
        }
LABEL_29:

        type metadata accessor for InheritanceError(0);
        uint64_t v78 = 2;
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        id v67 = v79;
        a2(v79, 1);

        return;
      }
    }
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      uint64_t v66 = "Invalid Record! Failed to change CKRecord trusted contact status to declined.";
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v63, v64, v66, v65, 2u);
      swift_slowDealloc();
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  os_log_type_t v31 = a2;
  uint64_t v32 = v12;
  uint64_t v70 = v8;
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v33 = v77;
  sub_1000D9320(a1, v77, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  os_log_type_t v34 = sub_100008EF8((void *)((char *)v71 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)((char *)v71 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v76;
  *(void *)(v35 + 16) = v31;
  *(void *)(v35 + 24) = v36;
  uint64_t v69 = *v34;
  uint64_t v71 = sub_100008EF8((void *)(v69 + 56), *(void *)(v69 + 80));
  sub_1000D9320(v33, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v37 = type metadata accessor for UUID();
  id v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16);
  uint64_t v39 = (uint64_t)v32;
  v38(v32, v16, v37);
  unsigned int v40 = (int *)v74;
  v38((char *)(v39 + *(int *)(v74 + 28)), &v16[*(int *)(v74 + 28)], v37);
  uint64_t v41 = v40[8];
  uint64_t v42 = *(void *)&v16[v41];
  unint64_t v43 = *(void *)&v16[v41 + 8];
  uint64_t v44 = (uint64_t *)(v39 + v41);
  uint64_t *v44 = v42;
  v44[1] = v43;
  uint64_t v45 = v40[5];
  uint64_t v46 = *(void *)&v16[v45];
  uint64_t v47 = *(void *)&v16[v45 + 8];
  uint64_t v48 = (void *)(v39 + v45);
  *uint64_t v48 = v46;
  v48[1] = v47;
  *(void *)(v39 + v40[6]) = 4;
  char v49 = v16[v40[9]];
  swift_retain();
  sub_100013140(v42, v43);
  swift_bridgeObjectRetain();
  sub_1000D93F0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  *(unsigned char *)(v39 + v40[9]) = v49;
  uint64_t v50 = v75;
  sub_1000D9388(v39, v75, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v51 = (uint64_t)v70;
  sub_1000D9320(v77, (uint64_t)v70, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  unint64_t v52 = (*(unsigned __int8 *)(v72 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
  unint64_t v53 = (v73 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v54 = (void *)swift_allocObject();
  v54[2] = v69;
  v54[3] = sub_1000D96F0;
  v54[4] = v35;
  v54[5] = 0;
  sub_1000D9388(v51, (uint64_t)v54 + v52, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v55 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v54 + v53);
  *uint64_t v55 = sub_1000EE208;
  v55[1] = 0;
  uint64_t v56 = qword_100320CC8;
  swift_retain();
  swift_retain();
  if (v56 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(v50 + v40[9]) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    os_log_type_t v57 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    os_log_type_t v57 = &qword_10033EA18;
  }
  uint64_t v59 = *v57;
  unint64_t v58 = v57[1];
  swift_bridgeObjectRetain();
  id v60 = sub_10028CC20(v59, v58);
  id v61 = [v60 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_1000672BC(v50, v61, (uint64_t)sub_1000D986C, (uint64_t)v54);
  swift_release();

  sub_1000D93F0(v50, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  swift_release();
  sub_1000D93F0(v77, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_1000D4534(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  return sub_1000D4540(a1, a2, a3, &qword_100325890);
}

uint64_t sub_1000D4540(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_100009F04(a4);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (void *)((char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v10, a4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = *v10;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E760);
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412290;
      uint64_t v17 = _convertErrorToNSError(_:)();
      v23[1] = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v16 = v17;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to update CKRecord record status to removed: %@", v15, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(v11, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E760);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Successfully to updated CKRecord record status!", v21, 2u);
      swift_slowDealloc();
    }

    [self postInheritanceContactChangedNotification];
    a2(0, 0);
    return sub_100006574((uint64_t)v10, a4);
  }
}

void sub_1000D4870(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void), uint64_t a6, uint64_t a7)
{
  id v14 = sub_1000C58D8();
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v33 = a6;
    uint64_t v16 = a5;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E760);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Creating AccessKey...", v20, 2u);
      swift_slowDealloc();
    }

    uint64_t v21 = *(void **)(a7 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_securityManager);
    uint64_t v22 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v23 = (void *)swift_allocObject();
    void v23[2] = v16;
    v23[3] = v33;
    v23[4] = v15;
    v23[5] = a2;
    v23[6] = a1;
    v23[7] = a3;
    v23[8] = a4;
    v23[9] = v22;
    aBlock[4] = sub_1000D9B64;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10004DAE8;
    void aBlock[3] = &unk_1002FA730;
    uint64_t v24 = _Block_copy(aBlock);
    swift_retain();
    os_log_type_t v25 = v15;
    swift_unknownObjectRetain();
    id v26 = a1;
    swift_bridgeObjectRetain();
    swift_release();
    [v21 createInheritanceAccessKeyForContact:a2 completion:v24];
    _Block_release(v24);
  }
  else
  {
    type metadata accessor for InheritanceError(0);
    uint64_t aBlock[6] = (id)5;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E760);
    uint64_t v28 = aBlock[0];
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v34 = (id *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v31 = 138412290;
      uint64_t v32 = v28;
      aBlock[0] = (id)_swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v34 = aBlock[0];

      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Error creating inheritanceContext: %@", v31, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v29 = v28;
    }

    os_log_type_t v25 = v28;
    a5(0, v28);
  }
}

void *sub_1000D4CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100009F04(&qword_100325870);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v11 = __chkstk_darwin(v46, v10);
  uint64_t v47 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t result = _swiftEmptyArrayStorage;
  char v49 = _swiftEmptyArrayStorage;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    uint64_t v39 = v2;
    unsigned int v40 = v9;
    uint64_t v44 = a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__accountStore;
    unint64_t v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v20 = a1 + v19;
    uint64_t v21 = *(void *)(v14 + 72);
    unint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    unint64_t v41 = v19;
    uint64_t v42 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v45 = v21;
    while (1)
    {
      sub_1000D9320(v20, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      uint64_t v23 = &v16[*(int *)(v46 + 24)];
      uint64_t v25 = *(void *)v23;
      uint64_t v24 = *((void *)v23 + 1);
      (*v43)(v9, v44, v5);
      swift_bridgeObjectRetain();
      Dependency.wrappedValue.getter();
      (*v42)(v9, v5);
      id v26 = [*(id *)(*sub_100008EF8(v48, v48[3]) + 16) aa_primaryAppleAccount];
      if (!v26) {
        break;
      }
      uint64_t v27 = v26;
      id v28 = [v26 aa_altDSID];

      if (!v28) {
        break;
      }
      uint64_t v29 = v5;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      if (v25 == v30 && v24 == v32)
      {
        swift_bridgeObjectRelease_n();
        sub_100008EA8((uint64_t)v48);
        uint64_t v5 = v29;
        uint64_t v9 = v40;
      }
      else
      {
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100008EA8((uint64_t)v48);
        uint64_t v5 = v29;
        uint64_t v9 = v40;
        if ((v34 & 1) == 0) {
          goto LABEL_15;
        }
      }
      sub_1000D93F0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      uint64_t v22 = v45;
LABEL_5:
      v20 += v22;
      if (!--v18) {
        return v49;
      }
    }
    swift_bridgeObjectRelease();
    sub_100008EA8((uint64_t)v48);
LABEL_15:
    sub_1000D9388((uint64_t)v16, v47, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v35 = v49;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100228A74(0, v35[2] + 1, 1);
      uint64_t v35 = v49;
    }
    unint64_t v37 = v35[2];
    unint64_t v36 = v35[3];
    if (v37 >= v36 >> 1)
    {
      sub_100228A74(v36 > 1, v37 + 1, 1);
      uint64_t v35 = v49;
    }
    void v35[2] = v37 + 1;
    id v38 = (char *)v35 + v41;
    uint64_t v22 = v45;
    sub_1000D9388(v47, (uint64_t)&v38[v37 * v45], (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    goto LABEL_5;
  }
  return result;
}

void *sub_1000D50B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v8 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    while (1)
    {
      sub_1000D1C84(v9, a2, &v11);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v9 += v10;
      if (!--v5) {
        return v12;
      }
    }
    return (void *)swift_release();
  }
  return result;
}

char *sub_1000D51F0(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14 = sub_100009F04(&qword_100325A40);
  uint64_t v98 = *(void *)(v14 - 8);
  uint64_t v99 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v97 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for DependencyRegistry.Entry();
  uint64_t v112 = *(void *)(v106 - 8);
  __chkstk_darwin(v106, v17);
  unint64_t v19 = (uint64_t *)((char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v127 = type metadata accessor for InheritanceStorageController();
  uint64_t v128 = &off_1002FAF10;
  v126[0] = a2;
  v125[3] = type metadata accessor for DaemonIDSMessenger();
  v125[4] = &off_1002F7F58;
  v125[0] = a4;
  uint64_t v123 = type metadata accessor for InheritanceSetupMessenger();
  id v124 = &off_1002FEA68;
  v122[0] = a5;
  uint64_t v20 = a7;
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  type metadata accessor for InheritanceCleanupController();
  Dependency.init(dependencyId:config:)();
  type metadata accessor for BeneficiaryDeclinedStatusHandler();
  Dependency.init(dependencyId:config:)();
  type metadata accessor for InheritanceInvitationResponseHandler();
  Dependency.init(dependencyId:config:)();
  type metadata accessor for InheritanceInvitationHandler();
  Dependency.init(dependencyId:config:)();
  type metadata accessor for InheritanceAccessKeyMessageHandler();
  Dependency.init(dependencyId:config:)();
  type metadata accessor for BeneficiaryRemovedMessageHandler();
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032AD10);
  Dependency.init(dependencyId:config:)();
  sub_10000850C(0, (unint64_t *)&unk_1003218F0);
  Dependency.init(dependencyId:config:)();
  uint64_t v21 = &v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_ownerHandle];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  *(void *)&v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller] = a1;
  sub_100008A94((uint64_t)v126, (uint64_t)&v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController]);
  *(void *)&v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_securityController] = a6;
  *(void *)&v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_messagingService] = a3;
  sub_100008A94((uint64_t)v125, (uint64_t)&v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_idsMessenger]);
  uint64_t v110 = v20;
  sub_100008A94((uint64_t)v122, (uint64_t)&v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger]);
  uint64_t v22 = qword_100320C28;
  id v100 = a1;
  swift_retain();
  id v23 = a3;
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_10033E870;
  uint64_t v25 = type metadata accessor for CloudKitStore();
  *((void *)&v118 + 1) = v25;
  *(void *)&v119[0] = &off_1002FE7A0;
  *(void *)&long long v117 = v24;
  uint64_t v104 = type metadata accessor for InheritanceCloudSharingController();
  id v26 = (void *)swift_allocObject();
  uint64_t v27 = sub_1000084BC((uint64_t)&v117, v25);
  __chkstk_darwin(v27, v27);
  uint64_t v29 = (uint64_t *)((char *)&v97 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  uint64_t v31 = *v29;
  v26[5] = v25;
  v26[6] = &off_1002FE7A0;
  v26[2] = v31;
  swift_retain();
  sub_100008EA8((uint64_t)&v117);
  uint64_t v103 = OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_cloudSharingController;
  uint64_t v32 = v110;
  *(void *)&v110[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_cloudSharingController] = v26;
  uint64_t v33 = v32;
  type metadata accessor for InheritanceSecurityManager();
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a6;
  uint64_t v101 = a6;
  uint64_t v102 = OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_securityManager;
  *(void *)&v33[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_securityManager] = v34;
  uint64_t v35 = type metadata accessor for DependencyRegistry();
  sub_100009F04((uint64_t *)&unk_100325960);
  id v36 = objc_allocWithZone((Class)AAContactsManager);
  swift_unknownObjectRetain();
  id v37 = [v36 init];
  v19[3] = sub_10000850C(0, &qword_100325A48);
  *unint64_t v19 = (uint64_t)v37;
  uint64_t v38 = enum case for DependencyRegistry.Entry.exact(_:);
  uint64_t v39 = v112;
  uint64_t v40 = v112 + 104;
  unint64_t v41 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v112 + 104);
  unsigned int v109 = enum case for DependencyRegistry.Entry.exact(_:);
  uint64_t v42 = v106;
  v41(v19, enum case for DependencyRegistry.Entry.exact(_:), v106);
  unint64_t v107 = v41;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  long long v105 = *(void (**)(uint64_t *, uint64_t))(v39 + 8);
  v105(v19, v42);
  sub_100009F04((uint64_t *)&unk_100325A50);
  uint64_t v43 = (uint64_t)v100;
  v19[3] = swift_getObjectType();
  *unint64_t v19 = v43;
  v41(v19, v38, v42);
  swift_unknownObjectRetain();
  uint64_t v111 = v35;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  uint64_t v44 = v42;
  uint64_t v45 = v42;
  uint64_t v46 = v105;
  v105(v19, v45);
  sub_100009F04((uint64_t *)&unk_100321850);
  uint64_t v47 = v127;
  uint64_t v48 = sub_100008EF8(v126, v127);
  v19[3] = v47;
  char v49 = sub_10003584C(v19);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v47 - 8) + 16))(v49, v48, v47);
  uint64_t v50 = v109;
  uint64_t v51 = v107;
  v107(v19, v109, v44);
  uint64_t v108 = v40;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  uint64_t v52 = v44;
  v46(v19, v44);
  type metadata accessor for InheritanceSecurityController();
  uint64_t v53 = v101;
  v19[3] = swift_getObjectType();
  *unint64_t v19 = v53;
  v51(v19, v50, v52);
  swift_unknownObjectRetain();
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  uint64_t v112 = v39 + 8;
  v46(v19, v52);
  sub_100009F04((uint64_t *)&unk_100325A60);
  uint64_t v54 = v123;
  uint64_t v55 = sub_100008EF8(v122, v123);
  v19[3] = v54;
  uint64_t v56 = sub_10003584C(v19);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v54 - 8) + 16))(v56, v55, v54);
  uint64_t v57 = v109;
  v107(v19, v109, v52);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  unint64_t v58 = v105;
  v105(v19, v52);
  sub_100009F04(&qword_1003218C0);
  uint64_t v59 = v110;
  uint64_t v60 = *(void *)&v110[v102];
  v19[3] = swift_getObjectType();
  *unint64_t v19 = v60;
  id v61 = v107;
  v107(v19, v57, v52);
  swift_unknownObjectRetain();
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  uint64_t v62 = v106;
  v58(v19, v106);
  sub_100009F04((uint64_t *)&unk_100325A70);
  uint64_t v63 = *(void *)&v59[v103];
  v19[3] = v104;
  *unint64_t v19 = v63;
  uint64_t v64 = v57;
  uint64_t v65 = v62;
  v61(v19, v64, v62);
  swift_retain();
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v58(v19, v62);
  uint64_t v66 = v58;
  sub_100009F04((uint64_t *)&unk_100323710);
  uint64_t v67 = type metadata accessor for BeneficiaryAccessKeyRepairHandlerFactory();
  uint64_t v68 = swift_allocObject();
  v19[3] = v67;
  v19[4] = sub_1000D9CC8((unint64_t *)&unk_100325A80, (void (*)(uint64_t))type metadata accessor for BeneficiaryAccessKeyRepairHandlerFactory);
  *unint64_t v19 = v68;
  v61(v19, enum case for DependencyRegistry.Entry.factory(_:), v65);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v66(v19, v65);
  sub_100009F04(&qword_1003218D0);
  uint64_t v69 = type metadata accessor for BeneficiaryInfoVerifier();
  uint64_t v70 = swift_allocObject();
  v19[3] = v69;
  *unint64_t v19 = v70;
  v61(v19, v109, v65);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v66(v19, v65);
  sub_100008A94((uint64_t)v126, (uint64_t)&v117);
  type metadata accessor for DaemonFamilyRequester();
  uint64_t v71 = swift_allocObject();
  uint64_t v72 = sub_1000084BC((uint64_t)&v117, *((uint64_t *)&v118 + 1));
  __chkstk_darwin(v72, v72);
  uint64_t v74 = (uint64_t *)((char *)&v97 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v75 + 16))(v74);
  uint64_t v76 = sub_1001B7C48(*v74, v71);
  sub_100008EA8((uint64_t)&v117);
  uint64_t v77 = v110;
  uint64_t v78 = &v110[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_familyManager];
  *((void *)v78 + 3) = type metadata accessor for InheritanceFamilyManager();
  *((void *)v78 + 4) = &off_100300D58;
  *(void *)uint64_t v78 = v76;
  id v79 = [objc_allocWithZone((Class)AATrustedContactFlowPresenter) init];
  *(void *)&v77[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_flowPresenter] = v79;
  uint64_t v80 = type metadata accessor for DaemonAccountStore();
  uint64_t v81 = swift_allocObject();
  uint64_t result = (char *)[self defaultStore];
  if (result)
  {
    *(void *)(v81 + 16) = result;
    *(void *)(v81 + 24) = [self sharedInstance];
    uint64_t v115 = v80;
    uint64_t v116 = &off_1002F66C0;
    *(void *)&long long v114 = v81;
    sub_100008A94((uint64_t)v126, (uint64_t)v119 + 8);
    sub_100008A94((uint64_t)v122, (uint64_t)v120);
    sub_100041E8C(&v114, (uint64_t)&v117);
    uint64_t v83 = &v77[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_invitationResponder];
    long long v84 = v119[1];
    long long v85 = v118;
    long long v86 = v117;
    *((_OWORD *)v83 + 2) = v119[0];
    *((_OWORD *)v83 + 3) = v84;
    *(_OWORD *)uint64_t v83 = v86;
    *((_OWORD *)v83 + 1) = v85;
    long long v87 = v120[0];
    long long v88 = v120[1];
    long long v89 = v119[2];
    *((void *)v83 + 14) = v121;
    *((_OWORD *)v83 + 5) = v87;
    *((_OWORD *)v83 + 6) = v88;
    *((_OWORD *)v83 + 4) = v89;

    os_log_t v90 = (objc_class *)type metadata accessor for InheritanceRequestManager();
    v113.receiver = v77;
    v113.super_class = v90;
    uint64_t v91 = (char *)[super init];
    uint64_t v92 = *(void **)&v91[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_messagingService];
    uint64_t v94 = v97;
    uint64_t v93 = v98;
    uint64_t v95 = v99;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v97, &v91[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__messageProcessor], v99);
    uint64_t v96 = v91;
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v94, v95);
    [v92 setInheritanceDelegate:(void)v117];
    swift_unknownObjectRelease();

    sub_100008EA8((uint64_t)v125);
    sub_100008EA8((uint64_t)v122);
    sub_100008EA8((uint64_t)v126);
    return v96;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1000D5F98(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = type metadata accessor for InheritanceStorageController();
  id v36 = &off_1002FAF10;
  v34[0] = a2;
  uint64_t v32 = type metadata accessor for DaemonIDSMessenger();
  uint64_t v33 = &off_1002F7F58;
  v31[0] = a4;
  uint64_t v29 = type metadata accessor for InheritanceSetupMessenger();
  uint64_t v30 = &off_1002FEA68;
  v28[0] = a5;
  id v12 = objc_allocWithZone((Class)type metadata accessor for InheritanceRequestManager());
  uint64_t v13 = sub_1000084BC((uint64_t)v34, v35);
  __chkstk_darwin(v13, v13);
  uint64_t v15 = (void *)((char *)&v28[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_1000084BC((uint64_t)v31, v32);
  __chkstk_darwin(v17, v17);
  unint64_t v19 = (void *)((char *)&v28[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = sub_1000084BC((uint64_t)v28, v29);
  __chkstk_darwin(v21, v21);
  id v23 = (void *)((char *)&v28[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = sub_1000D51F0(a1, *v15, a3, *v19, *v23, a6, v12);
  sub_100008EA8((uint64_t)v28);
  sub_100008EA8((uint64_t)v31);
  sub_100008EA8((uint64_t)v34);
  return v25;
}

void sub_1000D624C(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1)
  {
    uint64_t v22 = a1;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for InheritanceError(0);
    if (swift_dynamicCast())
    {
      uint64_t v22 = (uint64_t)v21;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      char v4 = static _BridgedStoredNSError.== infix(_:_:)();

      if (v4)
      {
        if (qword_100320B90 != -1) {
          swift_once();
        }
        uint64_t v5 = type metadata accessor for Logger();
        sub_100007288(v5, (uint64_t)qword_10033E760);
        uint64_t v6 = Logger.logObject.getter();
        os_log_type_t v7 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v6, v7))
        {
          uint64_t v8 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v8 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, v7, "CleanupBeneficiary completed.", v8, 2u);
          swift_slowDealloc();
        }

        [self postInheritanceContactChangedNotification];
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Beneficiary Cleanup Complete!", v11, 2u);
          swift_slowDealloc();
        }

        a2(0);
        return;
      }
    }
  }
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E760);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_10032B480);
    uint64_t v16 = String.init<A>(describing:)();
    sub_100135190(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "CleanupBeneficiary completed with error : %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  [self postInheritanceContactChangedNotification];
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Beneficiary Cleanup Complete!", v20, 2u);
    swift_slowDealloc();
  }

  a2(a1);
}

void sub_1000D66F4(uint64_t a1, void (**a2)(void, void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  _Block_copy(a2);
  id v5 = sub_1000C58D8();
  if (v5)
  {
    uint64_t v6 = v5;
    os_log_type_t v7 = *(void **)(a1 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller);
    uint64_t v8 = (void *)swift_allocObject();
    v8[2] = sub_10009F7C4;
    v8[3] = v4;
    aBlock[4] = sub_1000D9CB8;
    aBlock[5] = v8;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000C6CC0;
    void aBlock[3] = &unk_1002FA848;
    uint64_t v9 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v7 fetchManifestOptionsWithInheritanceContext:v6 completion:v9];
    _Block_release(v9);
    swift_release();
  }
  else
  {
    type metadata accessor for InheritanceError(0);
    uint64_t aBlock[6] = (id)5;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v10 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a2)[2](a2, 0, v10);
    swift_release();
  }
}

void sub_1000D68E4(void *a1, void *a2, uint64_t a3, uint64_t a4, char *a5, void (**a6)(void, void, void))
{
  uint64_t v55 = a3;
  uint64_t v56 = a5;
  uint64_t v57 = a1;
  uint64_t v58 = a4;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = a6;
  _Block_copy(a6);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = sub_100007288(v13, (uint64_t)qword_10033E760);
  swift_unknownObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    *(void *)&long long v54 = a6;
    uint64_t v18 = v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v53[3] = v14;
    v53[2] = v19;
    id v61 = (void *)v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v20 = v9;
    uint64_t v60 = type metadata accessor for InheritanceRequestManager();
    sub_100009F04((uint64_t *)&unk_100325878);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v60 = sub_100135190(v21, v22, (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    v53[1] = v18 + 14;
    id v23 = [a2 beneficiaryID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000D9CC8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v8);
    uint64_t v60 = sub_100135190(v24, v26, (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - Setup Beneficiary with UUID - %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a6 = (void (**)(void, void, void))v54;
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  id v27 = objc_allocWithZone((Class)type metadata accessor for InheritanceInviteAnalyticsEvent());
  sub_100009F04(&qword_100324668);
  uint64_t inited = swift_initStackObject();
  long long v54 = xmmword_1002A9C00;
  *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
  *(void *)(inited + 32) = 0x766F6D6552736177;
  *(void *)(inited + 40) = 0xEF6E6F6974634165;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  sub_10022175C(inited);
  uint64_t v29 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)();
  uint64_t v30 = (void *)swift_allocObject();
  v30[2] = v29;
  v30[3] = sub_10009EED8;
  v30[4] = v59;
  swift_retain();
  id v31 = v29;
  id v32 = [a2 handle];
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;

    *(void *)&long long v54 = v31;
    id v37 = a2;
    uint64_t v38 = v56;
    sub_100008EF8(&v56[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController], *(void *)&v56[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24]);
    uint64_t v39 = (void *)swift_allocObject();
    void v39[2] = sub_1000D9A24;
    void v39[3] = v30;
    unint64_t v41 = v57;
    uint64_t v40 = v58;
    v39[4] = v38;
    v39[5] = v41;
    uint64_t v42 = v55;
    v39[6] = v37;
    v39[7] = v42;
    v39[8] = v40;
    uint64_t v43 = (void *)swift_allocObject();
    v43[2] = v34;
    v43[3] = v36;
    v43[4] = sub_1000D9A88;
    void v43[5] = v39;
    swift_unknownObjectRetain();
    swift_retain();
    id v44 = v38;
    id v45 = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100008810((uint64_t)sub_1000D9ADC, (uint64_t)v43);
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Contact handle is nil.", v48, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v60 = 2108;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    char v49 = v61;
    uint64_t v50 = (void *)_convertErrorToNSError(_:)();
    if (AAUnderTest.getter())
    {
    }
    else
    {
      uint64_t v51 = swift_initStackObject();
      *(_OWORD *)(v51 + 16) = v54;
      strcpy((char *)(v51 + 32), "numOfRelation");
      *(_WORD *)(v51 + 46) = -4864;
      *(NSNumber *)(v51 + 48) = Int._bridgeToObjectiveC()();
      sub_10022175C(v51);
      dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();

      swift_bridgeObjectRelease();
    }
    uint64_t v52 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a6)[2](a6, 0, v52);
    swift_release();

    swift_release();
  }
}

void sub_1000D7044(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  _Block_copy(a3);
  id v7 = sub_1000C58D8();
  if (v7)
  {
    uint64_t v8 = v7;
    [v7 setManifest:a1];
    uint64_t v9 = *(void **)(a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller);
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = sub_10009F7CC;
    v10[3] = v6;
    aBlock[4] = sub_1000D99BC;
    aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10025ED44;
    void aBlock[3] = &unk_1002FA618;
    uint64_t v11 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v9 updateBeneficiaryWithInheritanceContext:v8 completion:v11];
    _Block_release(v11);
    swift_release();
  }
  else
  {
    type metadata accessor for InheritanceError(0);
    uint64_t aBlock[6] = (id)5;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v12 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a3)[2](a3, v12);
    swift_release();
  }
}

void sub_1000D7244(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  _Block_copy(a3);
  id v7 = sub_1000C58D8();
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void **)(a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_securityManager);
    uint64_t v10 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = sub_10009F7CC;
    v11[3] = v6;
    v11[4] = v8;
    v11[5] = v10;
    aBlock[4] = sub_1000D998C;
    aBlock[5] = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10004DAE8;
    void aBlock[3] = &unk_1002FA550;
    uint64_t v12 = _Block_copy(aBlock);
    swift_retain();
    id v13 = v8;
    swift_release();
    [v9 createInheritanceAccessKeyForContact:a1 completion:v12];
    _Block_release(v12);
    swift_release();
  }
  else
  {
    type metadata accessor for InheritanceError(0);
    uint64_t aBlock[6] = (id)5;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v14 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a3)[2](a3, v14);
    swift_release();
  }
}

void sub_1000D7468(uint64_t a1)
{
  sub_1000D28D0(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

_OWORD *sub_1000D7478(_OWORD *a1, _OWORD *a2)
{
  return a2;
}

void sub_1000D74B8(void *a1, uint64_t a2, uint64_t a3, char *a4, void *a5, void (**a6)(void, void))
{
  uint64_t v51 = a4;
  uint64_t v53 = a2;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a6;
  os_log_type_t v16 = (void *)swift_allocObject();
  uint64_t v16[2] = a5;
  v16[3] = sub_10009F7CC;
  v16[4] = v15;
  self;
  id v52 = a1;
  uint64_t v17 = (void *)swift_dynamicCastObjCClass();
  _Block_copy(a6);
  id v18 = a5;
  swift_retain();
  if (v17 && (id v19 = [v17 handle]) != 0)
  {
    uint64_t v20 = v19;
    uint64_t v48 = v11;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;

    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v49 = a3;
    uint64_t v50 = v21;
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E760);
    swift_bridgeObjectRetain_n();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      id v47 = v18;
      id v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v46 = v10;
      uint64_t v55 = (void *)v28;
      *(_DWORD *)id v27 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v54 = sub_100135190(v50, v23, (uint64_t *)&v55);
      id v18 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Notifying beneficiary %s to remove via IDS.", v27, 0xCu);
      swift_arrayDestroy();
      uint64_t v10 = v46;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v37 = v51;
    uint64_t v38 = sub_100008EF8(&v51[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger], *(void *)&v51[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger + 24]);
    id v39 = v52;
    id v40 = [v52 beneficiaryID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v41 = *v38;
    id v42 = v37;
    id v43 = v39;
    uint64_t v44 = v49;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10019A4E0((uint64_t)v14, v50, v23, v41, v42, v43, v53, v44, (void (*)(uint64_t))sub_1000D9D48, (uint64_t)v16);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v10);
    swift_release();

    swift_release();
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E760);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Beneficiary doesn't have a handle. Beneficiary Removal Complete!", v32, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v54 = 15;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v33 = v55;
    _Block_copy(a6);
    uint64_t v34 = (void *)_convertErrorToNSError(_:)();
    if (AAUnderTest.getter())
    {
    }
    else
    {
      sub_100009F04(&qword_100324668);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
      strcpy((char *)(inited + 32), "numOfRelation");
      *(_WORD *)(inited + 46) = -4864;
      *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
      sub_10022175C(inited);
      dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();

      swift_bridgeObjectRelease();
    }
    uint64_t v36 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a6)[2](a6, v36);

    _Block_release(a6);
    swift_release();

    swift_release();
  }
}

void sub_1000D7AD0(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v75 = sub_100009F04(&qword_100321C70);
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75, v6);
  uint64_t v73 = (char *)v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_100009F04(&qword_100325870);
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83, v8);
  uint64_t v81 = (char *)v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78, v10);
  uint64_t v76 = (char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = swift_allocObject();
  *(void *)(v85 + 16) = a3;
  _Block_copy(a3);
  _Block_copy(a3);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E760);
  id v84 = a1;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    os_log_type_t v16 = (void *)swift_slowAlloc();
    id v80 = a3;
    v72[1] = v16;
    v87[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v86 = type metadata accessor for InheritanceRequestManager();
    sub_100009F04((uint64_t *)&unk_100325878);
    *(void *)&long long v79 = a2;
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v86 = sub_100135190(v17, v18, (uint64_t *)v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    id v19 = v84;
    id v20 = [v84 beneficiaryID:v15 + 14];
    uint64_t v21 = v76;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000D9CC8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = v78;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v25 = v24;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v21, v22);
    uint64_t v86 = sub_100135190(v23, v25, (uint64_t *)v87);
    a2 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - Removing Beneficiary with beneficiaryID: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    a3 = (void (**)(void, void))v80;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    os_log_type_t v26 = v84;
  }
  id v27 = objc_allocWithZone((Class)type metadata accessor for InheritanceInviteAnalyticsEvent());
  sub_100009F04(&qword_100324668);
  uint64_t inited = swift_initStackObject();
  long long v79 = xmmword_1002A9C00;
  *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
  *(void *)(inited + 32) = 0x766F6D6552736177;
  *(void *)(inited + 40) = 0xEF6E6F6974634165;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  sub_10022175C(inited);
  uint64_t v29 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)();
  uint64_t v30 = (void *)swift_allocObject();
  v30[2] = v29;
  v30[3] = sub_10009F7CC;
  v30[4] = v85;
  uint64_t v31 = v82;
  id v32 = v81;
  uint64_t v33 = v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__accountStore, v83);
  id v34 = v29;
  swift_retain_n();
  id v80 = v34;
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  id v35 = [*(id *)(*sub_100008EF8(v87, (uint64_t)v87[3]) + 16) aa_primaryAppleAccount];
  if (v35
    && (uint64_t v36 = v35, v37 = objc_msgSend(v35, "aa_altDSID"), v36, v37))
  {
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v39;

    sub_100008EA8((uint64_t)v87);
    *(void *)&long long v79 = a2;
    uint64_t v41 = v74;
    id v42 = v73;
    uint64_t v43 = v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v73, a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__preferences, v75);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
    id v44 = v87[0];
    unsigned int v45 = [v87[0] isLCDeletionChangeCKStatusToDeclinedEnabled];

    uint64_t v46 = Logger.logObject.getter();
    if (v45)
    {
      uint64_t v83 = v38;
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      BOOL v48 = os_log_type_enabled(v46, v47);
      uint64_t v49 = v80;
      if (v48)
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Fetching beneficiary to delete...", v50, 2u);
        swift_slowDealloc();
      }

      uint64_t v51 = (void *)v79;
      sub_100008EF8((void *)(v79 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController), *(void *)(v79 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24));
      id v52 = v84;
      id v53 = [v84 beneficiaryID];
      uint64_t v54 = (uint64_t)v76;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v55 = (void *)swift_allocObject();
      v55[2] = v51;
      v55[3] = v52;
      v55[4] = v83;
      v55[5] = v40;
      v55[6] = sub_1000D9918;
      v55[7] = v30;
      id v56 = v52;
      id v57 = v51;
      swift_retain();
      sub_1000E53EC(v54, (uint64_t)sub_1000D9974, (uint64_t)v55);
      swift_release();

      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v54, v78);
      swift_release();
    }
    else
    {
      os_log_type_t v67 = static os_log_type_t.default.getter();
      BOOL v68 = os_log_type_enabled(v46, v67);
      uint64_t v69 = v80;
      if (v68)
      {
        uint64_t v70 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v70 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v67, "LCDeletionChangeCKStatusToDeclined feature is not enabled.", v70, 2u);
        swift_slowDealloc();
      }

      _Block_copy(a3);
      swift_retain();
      id v71 = v69;
      sub_1000D74B8(v84, v38, v40, (char *)v79, v71, a3);
      _Block_release(a3);

      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
    }
  }
  else
  {
    sub_100008EA8((uint64_t)v87);
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Error removing the beneficiary. No altDSID for owner found.", v60, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v86 = 5;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v61 = v87[0];
    uint64_t v62 = (void *)_convertErrorToNSError(_:)();
    char v63 = AAUnderTest.getter();
    uint64_t v64 = v80;
    if (v63)
    {
    }
    else
    {
      uint64_t v65 = swift_initStackObject();
      *(_OWORD *)(v65 + 16) = v79;
      strcpy((char *)(v65 + 32), "numOfRelation");
      *(_WORD *)(v65 + 46) = -4864;
      *(NSNumber *)(v65 + 48) = Int._bridgeToObjectiveC()();
      sub_10022175C(v65);
      dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();

      swift_bridgeObjectRelease();
    }
    uint64_t v66 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a3)[2](a3, v66);

    swift_release_n();
    swift_release();
  }
  _Block_release(a3);
}

void sub_1000D8630(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  _Block_copy(a3);
  id v12 = sub_1000C58D8();
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = [a1 beneficiaryID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v15 = objc_allocWithZone((Class)AKInheritanceAccessKey);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v17 = [v15 initWithBeneficiairyIdentifier:isa];

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    [v13 setAccessKey:v17];

    unint64_t v18 = *(void **)(a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_10009F7CC;
    *(void *)(v19 + 24) = v11;
    aBlock[4] = sub_1000D9450;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10025ED44;
    void aBlock[3] = &unk_1002FA320;
    id v20 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v18 removeBeneficiaryWithInheritanceContext:v13 completion:v20];
    _Block_release(v20);
    swift_release();
  }
  else
  {
    type metadata accessor for InheritanceError(0);
    uint64_t aBlock[6] = 5;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D9CC8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v21 = (void *)aBlock[0];
    uint64_t v13 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a3)[2](a3, v13);
    swift_release();
  }
}

uint64_t sub_1000D8934()
{
  swift_release();
  swift_release();
  sub_100008EA8(v0 + 48);
  sub_100008EA8(v0 + 88);
  sub_100008EA8(v0 + 128);

  return _swift_deallocObject(v0, 168, 7);
}

uint64_t sub_1000D898C(uint64_t a1)
{
  return sub_1000D3458(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), v1 + 48);
}

uint64_t sub_1000D89A4(uint64_t a1)
{
  return sub_1000D3974(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

void sub_1000D89B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  sub_1000CFD08(a1, a2, a3, a4, a5, *(void *)(v5 + 16));
}

void sub_1000D89B8(void *a1, uint64_t a2)
{
  sub_1000CF1CC(a1, a2, *(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1000D89C0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D89FC(uint64_t a1)
{
  return sub_1000CE5C0(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000D8A08(uint64_t a1)
{
  return sub_1000CEB88(a1, *(void (**)(uint64_t))(v1 + 16));
}

void sub_1000D8A10(objc_class *a1, uint64_t a2)
{
  sub_100005864(a1, a2, *(void *)(v2 + 16), &qword_100325888);
}

uint64_t sub_1000D8A3C(uint64_t a1, char a2)
{
  return sub_1000CDDF4(a1, a2 & 1, *(void (**)(void, uint64_t))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000D8A4C()
{
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D8A98()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 136) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100008EA8(v0 + 16);
  sub_100008EA8(v0 + 56);
  sub_100008EA8(v0 + 96);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  if (*(void *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8))) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, ((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1000D8BC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 136) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000D2A3C(a1, v1 + 16, v1 + v4, *(void **)(v1 + v5), *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), *(void (**)(uint64_t))(v1 + ((v5 + 39) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000D8C84()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D8CD4(uint64_t a1, char a2)
{
  return sub_1000D9CA0(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1000CD044);
}

uint64_t sub_1000D8CEC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D8D24()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D8D64()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1(0);
  }
  return result;
}

uint64_t sub_1000D8D98()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000D8E64(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void (**)(void, void))(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000CC75C(a1, v4, v5, v6);
}

void sub_1000D8ED8(objc_class *a1, uint64_t a2)
{
  sub_100005864(a1, a2, *(void *)(v2 + 16), &qword_100325898);
}

uint64_t sub_1000D8F04()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D8F3C(uint64_t a1, char a2)
{
  return sub_1000CC0B8(a1, a2 & 1, *(void (**)(void, uint64_t))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000D8F4C(uint64_t a1)
{
  return sub_1000CB50C(a1, *(void (**)(uint64_t))(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000D8F58()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000D8FA0(uint64_t a1)
{
  sub_1000D09A4(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24), *(NSObject **)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000D8FAC()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000D9004(uint64_t a1, char a2)
{
  return sub_1000D1410(a1, a2 & 1, *(void (**)(void *))(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void **)(v2 + 56), *(void *)(v2 + 64));
}

uint64_t sub_1000D903C()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000D91A4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = *(uint64_t (**)(uint64_t))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000CBB08(a1, v1 + v4, v5);
}

void sub_1000D9244(objc_class *a1, uint64_t a2)
{
  sub_100005864(a1, a2, *(void *)(v2 + 16), (unint64_t *)&unk_100325970);
}

uint64_t sub_1000D9270(uint64_t a1, char a2)
{
  return sub_10008E208(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

void sub_1000D927C(objc_class *a1, uint64_t a2)
{
  sub_100005864(a1, a2, *(void *)(v2 + 16), &qword_100325988);
}

uint64_t sub_1000D92AC(uint64_t a1, char a2)
{
  return sub_1000CACA0(a1, a2 & 1, *(void (**)(void, uint64_t))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000D92BC()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D92FC(uint64_t a1, char a2)
{
  return sub_1000D1A24(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void, void))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1000D9310(uint64_t a1, char a2)
{
  return sub_1000D23AC(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1000D9320(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000D9388(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000D93F0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000D9450(uint64_t a1)
{
  return sub_1000CA9E8(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), "Error removing access code with Inheritance Controller:%s");
}

uint64_t sub_1000D9478(uint64_t a1)
{
  return sub_1000C9A78(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1000D9484()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D94CC(uint64_t a1)
{
  return sub_1000C9AF8(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_1000D94D8()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v7 = v0 + v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease();
  v9(v7 + v1[9], v8);
  sub_100013198(*(void *)(v7 + v1[10]), *(void *)(v7 + v1[10] + 8));

  return _swift_deallocObject(v0, v6 + 8, v4);
}

void sub_1000D9634(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void (**)(void))(v2 + 16);
  uint64_t v9 = *(void *)(v2 + 24);
  uint64_t v10 = *(char **)(v2 + v7);
  uint64_t v11 = *(void **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_1000CA214(a1, v4, v8, v9, v2 + v6, v10, v11);
}

uint64_t sub_1000D96F0(uint64_t a1)
{
  return sub_1000D4540(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), (uint64_t *)&unk_100325860);
}

uint64_t sub_1000D9714()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000D986C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1[2];
  uint64_t v6 = (void (*)(void))v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + v4;
  uint64_t v10 = (char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void (**)(void))v10;
  uint64_t v12 = *((void *)v10 + 1);

  return sub_10026F3DC(a1, v5, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000D9918(uint64_t a1)
{
  return sub_1000C800C(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1000D9924()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000D9974(uint64_t a1)
{
  return sub_1000C85D8(a1, *(char **)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void (**)(uint64_t))(v1 + 48), *(void *)(v1 + 56));
}

void sub_1000D998C(void *a1, uint64_t a2)
{
  sub_1000C7CD8(a1, a2, *(void (**)(uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1000D9998(uint64_t a1)
{
  return sub_1000CA9E8(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), "Error updating access code with Inheritance Controller: %s");
}

uint64_t sub_1000D99BC(uint64_t a1)
{
  return sub_1000CA9E8(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), "Error updating manifest with Inheritance Controller: %s");
}

uint64_t sub_1000D99E4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D9A24(uint64_t a1, uint64_t a2)
{
  return sub_1000C6E14(a1, a2, *(void *)(v2 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_1000D9A30()
{
  swift_release();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000D9A88(uint64_t a1)
{
  return sub_1000C6F24(a1, *(uint64_t (**)(void, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_1000D9A9C()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D9ADC(uint64_t a1, char a2)
{
  return sub_1000D9CA0(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1000E7900);
}

void sub_1000D9AF8(void *a1, uint64_t a2)
{
  sub_1000C71BC(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000D9B04()
{
  swift_release();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

void sub_1000D9B64(void *a1, uint64_t a2)
{
  sub_1000CFDC8(a1, a2, *(void (**)(void, void))(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void **)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64));
}

uint64_t sub_1000D9B98()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D9BE0(uint64_t a1)
{
  return sub_1000D0308(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32));
}

uint64_t sub_1000D9BF0()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D9C30(uint64_t a1)
{
  return sub_1000C7648(a1, *(void (**)(id, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1000D9C40()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D9C88(uint64_t a1, char a2)
{
  return sub_1000D9CA0(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1000D0610);
}

uint64_t sub_1000D9CA0(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, void, void, void, void, void))
{
  return a3(a1, a2 & 1, v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_1000D9CB8(uint64_t a1, uint64_t a2)
{
  return sub_1000C6AB8(a1, a2, *(uint64_t (**)(void, uint64_t))(v2 + 16));
}

uint64_t sub_1000D9CC0(uint64_t a1)
{
  return sub_1001D83F8(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1000D9CC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D9D10(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000D9E04()
{
  type metadata accessor for CloudDataProtectionHealthCheck();
  sub_100009F04(&qword_100325C70);
  uint64_t result = String.init<A>(describing:)();
  qword_100325AC0 = result;
  *(void *)algn_100325AC8 = v1;
  return result;
}

void sub_1000D9E50(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *v4;
  uint64_t v41 = a1;
  uint64_t v42 = v9;
  uint64_t v10 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v40 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100009F04(&qword_100325870);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  id v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v39 = sub_100007288(v18, (uint64_t)qword_10033E778);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v35 = v5;
    uint64_t v36 = a2;
    id v37 = a3;
    uint64_t v38 = a4;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    if (qword_100320C18 != -1) {
      swift_once();
    }
    uint64_t v22 = qword_100325AC0;
    unint64_t v23 = *(void *)algn_100325AC8;
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_100135190(v22, v23, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - started.", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a3 = v37;
    a4 = v38;
    uint64_t v5 = v35;
    a2 = v36;
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, (uint64_t)v5 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__accountStore, v13);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  id v24 = [[*(id *)(*sub_100008EF8(v44, v44[3]) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)v44);
  if (v24)
  {
    uint64_t v25 = type metadata accessor for TaskPriority();
    uint64_t v26 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v40, 1, 1, v25);
    id v27 = (void *)swift_allocObject();
    void v27[2] = 0;
    v27[3] = 0;
    uint64_t v28 = v41;
    v27[4] = v5;
    v27[5] = v28;
    v27[6] = a2;
    v27[7] = v24;
    v27[8] = a3;
    v27[9] = a4;
    v27[10] = v42;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100225A54(v26, (uint64_t)&unk_100325C60, (uint64_t)v27);
    swift_release();
  }
  else
  {
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      v44[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      if (qword_100320C18 != -1) {
        swift_once();
      }
      uint64_t v32 = qword_100325AC0;
      unint64_t v33 = *(void *)algn_100325AC8;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_100135190(v32, v33, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - Primary account is not available, bailing from health check...", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for AAError(0);
    uint64_t v43 = -4404;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000DB23C();
    _BridgedStoredNSError.init(_:userInfo:)();
    id v34 = (void *)v44[0];
    a3(v44[0]);
  }
}

uint64_t sub_1000DA3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[40] = a8;
  v8[41] = v13;
  v8[38] = a6;
  v8[39] = a7;
  v8[36] = a4;
  v8[37] = a5;
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v8[42] = v9;
  v8[43] = *(void *)(v9 - 8);
  v8[44] = swift_task_alloc();
  uint64_t v10 = sub_100009F04(&qword_100325C68);
  v8[45] = v10;
  v8[46] = *(void *)(v10 - 8);
  v8[47] = swift_task_alloc();
  return _swift_task_switch(sub_1000DA520, 0, 0);
}

uint64_t sub_1000DA520()
{
  uint64_t v2 = v0[46];
  uint64_t v1 = v0[47];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[36];
  uint64_t v5 = OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__edpAdpHealthChecks;
  v0[48] = OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__edpAdpHealthChecks;
  uint64_t v6 = v4 + v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[49] = v7;
  v0[50] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v6, v3);
  Dependency.wrappedValue.getter();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[51] = v8;
  v0[52] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v1, v3);
  uint64_t v9 = v0[20];
  uint64_t v10 = v0[21];
  sub_100008EF8(v0 + 17, v9);
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 16)
                                                                            + **(int **)(v10 + 16));
  uint64_t v11 = (void *)swift_task_alloc();
  v0[53] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000DA6AC;
  uint64_t v12 = v0[38];
  uint64_t v13 = v0[39];
  uint64_t v14 = v0[37];
  return v16(v14, v12, v13, v9, v10);
}

uint64_t sub_1000DA6AC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 432) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000DA7AC, 0, 0);
}

uint64_t sub_1000DA7AC()
{
  uint64_t v26 = v0;
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 288);
  sub_100008EA8(v0 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController, v3);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  LOBYTE(v1) = sub_100057CD4();
  sub_100008EA8(v0 + 96);
  if (v1)
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 408);
    uint64_t v6 = *(void *)(v0 + 376);
    uint64_t v7 = *(void *)(v0 + 360);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 392))(v6, *(void *)(v0 + 288) + *(void *)(v0 + 384), v7);
    Dependency.wrappedValue.getter();
    v5(v6, v7);
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 208);
    sub_100008EF8((void *)(v0 + 176), v8);
    id v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 8) + **(int **)(v9 + 8));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v10;
    void *v10 = v0;
    v10[1] = sub_1000DABA0;
    uint64_t v11 = *(void *)(v0 + 304);
    uint64_t v12 = *(void *)(v0 + 312);
    uint64_t v13 = *(void *)(v0 + 296);
    return v24(v13, v11, v12, v8, v9);
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E778);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      if (qword_100320C18 != -1) {
        swift_once();
      }
      uint64_t v19 = qword_100325AC0;
      unint64_t v20 = *(void *)algn_100325AC8;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 272) = sub_100135190(v19, v20, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s - EDP was never enabled on this account.", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v21 = *(void *)(v0 + 432);
    uint64_t v22 = *(void (**)(uint64_t))(v0 + 320);
    if (v21)
    {
      swift_errorRetain();
      swift_errorRetain();
      v22(v21);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      v22(0);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
}

uint64_t sub_1000DABA0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 448) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000DACA0, 0, 0);
}

uint64_t sub_1000DACA0()
{
  sub_100008EA8((uint64_t)(v0 + 22));
  uint64_t v1 = v0[56];
  if (v0[54])
  {
    uint64_t v2 = v0[54];
    if (v1)
    {
      os_log_type_t v17 = (void (*)(id))v0[40];
      sub_100009F04((uint64_t *)&unk_10032E130);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v4;
      swift_getErrorValue();
      uint64_t v5 = v0[27];
      uint64_t v6 = v0[28];
      *(void *)(inited + 72) = v6;
      uint64_t v7 = sub_10003584C((uint64_t *)(inited + 48));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v7, v5, v6);
      swift_errorRetain();
      swift_errorRetain();
      sub_100220CAC(inited);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_getErrorValue();
      id v8 = sub_100034F88(v0[31], v0[32]);
      id v9 = objc_allocWithZone((Class)NSError);
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v12 = [v9 initWithDomain:v10 code:v8 userInfo:isa];

      id v13 = v12;
      v17(v12);
      swift_errorRelease();
      swift_errorRelease();

      swift_errorRelease();
LABEL_6:
      swift_errorRelease();
      goto LABEL_7;
    }
LABEL_5:
    uint64_t v14 = (void (*)(uint64_t))v0[40];
    swift_errorRetain();
    swift_errorRetain();
    v14(v2);
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_6;
  }
  uint64_t v2 = v0[56];
  if (v1) {
    goto LABEL_5;
  }
  ((void (*)(void))v0[40])(0);
LABEL_7:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1000DAF5C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__edpAdpHealthChecks;
  uint64_t v4 = sub_100009F04(&qword_100325C68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_1003228A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocClassInstance();
}

uint64_t sub_1000DB090()
{
  return type metadata accessor for CloudDataProtectionHealthCheck();
}

uint64_t type metadata accessor for CloudDataProtectionHealthCheck()
{
  uint64_t result = qword_100325B10;
  if (!qword_100325B10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000DB0E4()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, &qword_100325B20, (uint64_t *)&unk_100325B28);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, qword_100327FA0, (uint64_t *)&unk_100321910);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_1000DB218(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
}

unint64_t sub_1000DB23C()
{
  unint64_t result = qword_100321140;
  if (!qword_100321140)
  {
    type metadata accessor for AAError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321140);
  }
  return result;
}

uint64_t sub_1000DB294()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000DB2EC(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  NSString v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100025248;
  return sub_1000DA3EC(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000DB3E0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_100325D18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100008EF8(a1, a1[3]);
  sub_1000DC0E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[15] = *v3;
  v11[14] = 0;
  sub_1000DC13C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for BeneficiaryRemovedMessage();
    v11[13] = 1;
    type metadata accessor for UUID();
    sub_100007004(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000DB5B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100009F04(&qword_100325D28);
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BeneficiaryRemovedMessage();
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1000DC0E8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v23 = v10;
    uint64_t v14 = v13;
    uint64_t v15 = v26;
    uint64_t v16 = v27;
    char v30 = 0;
    sub_1000DC190();
    uint64_t v17 = v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v22 = v14;
    *uint64_t v14 = v31;
    char v29 = 1;
    sub_100007004((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v17);
    uint64_t v18 = v24;
    uint64_t v19 = (uint64_t)v22;
    (*(void (**)(unsigned char *, char *, uint64_t))(v25 + 32))(&v22[*(int *)(v23 + 20)], v6, v16);
    sub_1000DC1E4(v19, v18);
  }
  return sub_100008EA8((uint64_t)a1);
}

uint64_t sub_1000DB8BC()
{
  if (*v0) {
    return 0x69636966656E6562;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1000DB8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000DC454(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000DB924(uint64_t a1)
{
  unint64_t v2 = sub_1000DC0E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DB960(uint64_t a1)
{
  unint64_t v2 = sub_1000DC0E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DB99C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DB5B0(a1, a2);
}

uint64_t sub_1000DB9B4(void *a1)
{
  return sub_1000DB3E0(a1);
}

uint64_t sub_1000DB9CC()
{
  _StringGuts.grow(_:)(23);
  type metadata accessor for BeneficiaryRemovedMessage();
  sub_100009F04(&qword_100325C78);
  uint64_t v0 = String.init<A>(describing:)();
  swift_bridgeObjectRelease();
  v1._object = (void *)0x800000010029C900;
  v1._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  sub_100007004((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t type metadata accessor for BeneficiaryRemovedMessage()
{
  uint64_t result = qword_100325CD8;
  if (!qword_100325CD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_1000DBB34(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1000DBC00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UUID();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

unsigned char *sub_1000DBC68(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1000DBCE4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1000DBD60(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1000DBDDC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000DBE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DBE6C);
}

uint64_t sub_1000DBE6C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 251)
  {
    unsigned int v4 = *a1;
    if (v4 >= 5) {
      return v4 - 4;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = &a1[*(int *)(a3 + 20)];
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000DBF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DBF28);
}

unsigned char *sub_1000DBF28(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 251)
  {
    *uint64_t result = a2 + 4;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000DBFCC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000DC064(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007004(&qword_10032CFE0, (void (*)(uint64_t))type metadata accessor for BeneficiaryRemovedMessage);
  uint64_t result = sub_100007004(&qword_100325D10, (void (*)(uint64_t))type metadata accessor for BeneficiaryRemovedMessage);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000DC0E8()
{
  unint64_t result = qword_100325D20;
  if (!qword_100325D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100325D20);
  }
  return result;
}

unint64_t sub_1000DC13C()
{
  unint64_t result = qword_10032D050;
  if (!qword_10032D050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032D050);
  }
  return result;
}

unint64_t sub_1000DC190()
{
  unint64_t result = qword_10032D040;
  if (!qword_10032D040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032D040);
  }
  return result;
}

uint64_t sub_1000DC1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeneficiaryRemovedMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for BeneficiaryRemovedMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DC314);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeneficiaryRemovedMessage.CodingKeys()
{
  return &type metadata for BeneficiaryRemovedMessage.CodingKeys;
}

unint64_t sub_1000DC350()
{
  unint64_t result = qword_100325D30;
  if (!qword_100325D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100325D30);
  }
  return result;
}

unint64_t sub_1000DC3A8()
{
  unint64_t result = qword_100325D38;
  if (!qword_100325D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100325D38);
  }
  return result;
}

unint64_t sub_1000DC400()
{
  unint64_t result = qword_100325D40;
  if (!qword_100325D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100325D40);
  }
  return result;
}

uint64_t sub_1000DC454(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unsigned char *storeEnumTagSinglePayload for AAFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DC628);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AAFeatureFlags()
{
  return &type metadata for AAFeatureFlags;
}

unint64_t sub_1000DC664()
{
  unint64_t result = qword_100325D48;
  if (!qword_100325D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100325D48);
  }
  return result;
}

const char *sub_1000DC6B8()
{
  return "AppleAccount";
}

const char *sub_1000DC6CC()
{
  unint64_t result = "RunAppleAccountdOntvOS";
  switch(*v0)
  {
    case 1:
      unint64_t result = "OverrideAppleIDHealthCheckInterval";
      break;
    case 2:
      unint64_t result = "DecoupleOTPeerID";
      break;
    case 3:
      unint64_t result = "AABranding";
      break;
    case 4:
      unint64_t result = "LegacyContactAutoHealing";
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000DC760()
{
  uint64_t v1 = OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler____lazy_storage___activityProvider;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler____lazy_storage___activityProvider))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler____lazy_storage___activityProvider);
  }
  else
  {
    uint64_t v3 = sub_1000DDAB4();
    type metadata accessor for TrustedContactsPreflightActivityProvider();
    uint64_t v2 = swift_allocObject();
    sub_100009F04(&qword_100322490);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_10032A630);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_100321920);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_10032A640);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_1003224C0);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_100322530);
    Dependency.init(dependencyId:config:)();
    *(void *)(v2 + 16) = v3;
    if (qword_100320C78 != -1) {
      swift_once();
    }
    [(id)qword_10032A5A0 setMaxConcurrentOperationCount:1];
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000DC954()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v28[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100321600);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v28[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E778);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Scheduling Trusted Contacts preflight activity", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v1 + OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler__xpcActivityScheduler, v6);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v15 = sub_100008EF8(v28, v28[3]);
  sub_1000DC760();
  uint64_t v16 = *v15;
  swift_retain();
  uint64_t v17 = static String._fromUTF8Repairing(_:)();
  uint64_t v19 = v18;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  swift_bridgeObjectRetain();
  static DispatchQoS.background.getter();
  uint64_t v21 = swift_allocObject();
  *(_WORD *)(v21 + 16) = 1;
  *(_OWORD *)(v21 + 24) = xmmword_1002AC650;
  *(_OWORD *)(v21 + 40) = xmmword_1002AC660;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1000DD664;
  *(void *)(v22 + 24) = v20;
  type metadata accessor for XPCActivity();
  swift_allocObject();
  swift_retain();
  uint64_t v23 = sub_100033778(v17, v19, (uint64_t)v5, (uint64_t)sub_100014B28, v21, (uint64_t)sub_100014B30, v22);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)(v16 + 16) = v23;
  swift_release();
  uint64_t v24 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for OSTransaction();
  swift_allocObject();
  uint64_t v25 = sub_100104754("com.apple.appleaccountd.trustedContacts.preflight", 49, 2);
  sub_1001DDECC(v25, v24);
  swift_release_n();
  swift_release();
  swift_release();
  return sub_100008EA8((uint64_t)v28);
}

uint64_t sub_1000DCD48(char a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1 & 1;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E778);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v14 = v10;
    if (v5) {
      uint64_t v11 = 0x656C756465686353;
    }
    else {
      uint64_t v11 = 0x6E616D6544206E4FLL;
    }
    sub_100135190(v11, 0xE900000000000064, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Starting %s Trusted Contacts preflight activity", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000DC760();
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = v5;
  *(void *)(v12 + 24) = a2;
  *(void *)(v12 + 32) = a3;
  swift_retain();
  sub_1001A9778(v5, (uint64_t)sub_1000DD620, v12);
  swift_release();
  return swift_release();
}

void sub_1000DCF64(uint64_t a1, uint64_t a2, char a3, void (*a4)(void))
{
  if (*(void *)(a2 + 16))
  {
    type metadata accessor for AAError(0);
    sub_100009F04((uint64_t *)&unk_10032E130);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v8;
    *(void *)(inited + 72) = sub_100009F04((uint64_t *)&unk_100321C80);
    *(void *)(inited + 48) = a2;
    swift_bridgeObjectRetain();
    sub_100220CAC(inited);
    sub_1000DB23C();
    _BridgedStoredNSError.init(_:userInfo:)();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E778);
    id v10 = v25;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = a4;
      uint64_t v15 = (void *)swift_slowAlloc();
      id v25 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      if (a3) {
        uint64_t v16 = 0x656C756465686353;
      }
      else {
        uint64_t v16 = 0x6E616D6544206E4FLL;
      }
      sub_100135190(v16, 0xE900000000000064, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2112;
      uint64_t v24 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v24;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Overall %s Trusted Contacts preflight activity failed: %@", (uint8_t *)v13, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      a4 = v14;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v23 = v10;
    a4(v10);
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E778);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      id v25 = v21;
      if (a3) {
        uint64_t v22 = 0x656C756465686353;
      }
      else {
        uint64_t v22 = 0x6E616D6544206E4FLL;
      }
      sub_100135190(v22, 0xE900000000000064, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Overall %s Trusted Contacts preflight activity completed successfully.", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    a4(0);
  }
}

uint64_t sub_1000DD3F4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler__xpcActivityScheduler;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100321600);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1000DD4A8()
{
  return type metadata accessor for TrustedContactsPreflightScheduler();
}

uint64_t type metadata accessor for TrustedContactsPreflightScheduler()
{
  uint64_t result = qword_100325D88;
  if (!qword_100325D88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000DD4FC()
{
  sub_10001465C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1000DD594()
{
  return sub_1000DC954();
}

uint64_t sub_1000DD5B8(uint64_t a1, uint64_t a2)
{
  return sub_1000DCD48(0, a1, a2);
}

uint64_t sub_1000DD5E8()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000DD620(uint64_t a1, uint64_t a2)
{
  sub_1000DCF64(a1, a2, *(unsigned char *)(v2 + 16), *(void (**)(void))(v2 + 24));
}

uint64_t sub_1000DD62C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000DD664(uint64_t a1)
{
}

uint64_t sub_1000DD66C()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000DD67C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DD6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DependencyRegistry.Entry();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (void *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100009F04((uint64_t *)&unk_100321850);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_1003218C0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100320D40);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_1003218D0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_1003218E0);
  Dependency.init(dependencyId:config:)();
  uint64_t v9 = sub_10000850C(0, (unint64_t *)&unk_1003218F0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321900);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321910);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_10000850C(0, (unint64_t *)&qword_100321930);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321940);
  Dependency.init(dependencyId:config:)();
  uint64_t v10 = OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_queue;
  id v11 = [objc_allocWithZone((Class)NSOperationQueue) init];
  *(void *)(a2 + v10) = v11;
  os_log_type_t v12 = (uint64_t *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
  v16[1] = type metadata accessor for InheritancePreflightHealthCheck();
  sub_100009F04(&qword_100325EA8);
  *os_log_type_t v12 = String.init<A>(describing:)();
  v12[1] = v13;
  *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_analyticsReporter) = a1;
  swift_unknownObjectRetain();
  [v11 setMaxConcurrentOperationCount:1];
  type metadata accessor for DependencyRegistry();
  id v14 = [objc_allocWithZone((Class)AAPreferences) init];
  v8[3] = v9;
  *uint64_t v8 = v14;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DependencyRegistry.Entry.exact(_:), v4);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  return a2;
}

uint64_t sub_1000DDAB4()
{
  sub_100009F04(&qword_100325EA0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1002A9F00;
  uint64_t v1 = type metadata accessor for CustodianPreflightHealthCheck();
  swift_allocObject();
  os_log_type_t v12 = &off_1002FCB20;
  uint64_t v13 = &off_1002FCA98;
  uint64_t v11 = v1;
  *(void *)&long long v10 = sub_100136330();
  uint64_t v2 = type metadata accessor for CustodianPreflightHealthCheckSequoiaB();
  uint64_t v3 = swift_allocObject();
  swift_retain();
  sub_100009F04((uint64_t *)&unk_1003224C0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100322530);
  Dependency.init(dependencyId:config:)();
  sub_1000DDC54(&v10, (_OWORD *)(v3 + 16));
  swift_release();
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = &off_1002F67B8;
  *(void *)(v0 + 32) = v3;
  id v4 = objc_allocWithZone((Class)type metadata accessor for AnalyticsRTCReporter());
  id v5 = [v4 init:v10];
  uint64_t v6 = type metadata accessor for InheritancePreflightHealthCheck();
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = sub_1000DD6B4((uint64_t)v5, v7);

  *(void *)(v0 + 96) = v6;
  *(void *)(v0 + 104) = &off_1002F4F08;
  *(void *)(v0 + 72) = v8;
  return v0;
}

_OWORD *sub_1000DDC54(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_1000DDC70()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DaemonSetupServiceURLBag()
{
  return self;
}

uint64_t type metadata accessor for AnalyticsEventFactory()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for PushHelperServiceError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PushHelperServiceError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PushHelperServiceError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000DDD54(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000DDD70(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PushHelperServiceError()
{
  return &type metadata for PushHelperServiceError;
}

uint64_t sub_1000DDDA0()
{
  swift_errorRelease();
  swift_errorRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EnhancedAndAdvancedDataProtectionChecksMock()
{
  return self;
}

uint64_t sub_1000DDE04()
{
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_1000DDE28, 0, 0);
}

uint64_t sub_1000DDE28()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(unsigned char *)(v1 + 16) = 1;
  uint64_t v2 = *(void *)(v1 + 24);
  swift_errorRetain();
  char v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000DDE9C()
{
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_1000DDEC0, 0, 0);
}

uint64_t sub_1000DDEC0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(unsigned char *)(v1 + 32) = 1;
  uint64_t v2 = *(void *)(v1 + 40);
  swift_errorRetain();
  char v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t type metadata accessor for InheritancePrintKeyAnalyticsEvent()
{
  uint64_t result = qword_100326158;
  if (!qword_100326158) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000DDF80()
{
  return swift_initClassMetadata2();
}

void sub_1000DDFC0()
{
}

id sub_1000DDFF0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritancePrintKeyAnalyticsEvent();
  return [super dealloc];
}

uint64_t sub_1000DE02C()
{
  return type metadata accessor for InheritancePrintKeyAnalyticsEvent();
}

uint64_t sub_1000DE034(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = a1;
  uint64_t v70 = a2;
  uint64_t v72 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v75 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v2);
  id v71 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  __chkstk_darwin(v4, v5);
  BOOL v68 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v66 = *(void *)(v7 - 8);
  uint64_t v67 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v65 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v63 = *(void *)(v10 - 8);
  uint64_t v64 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v62 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v59 - 8);
  uint64_t v15 = __chkstk_darwin(v59, v14);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v57 - v19;
  uint64_t v21 = sub_100009F04(&qword_100321FF8);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  id v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = 0;
  uint64_t v60 = swift_allocObject();
  *(unsigned char *)(v60 + 16) = 0;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = 0;
  uint64_t v28 = dispatch_group_create();
  dispatch_group_enter(v28);
  char v29 = (void *)swift_allocObject();
  v29[2] = v28;
  uint64_t v29[3] = v26;
  uint64_t v61 = v26;
  v29[4] = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v76 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__custodianStorage, v21);
  dispatch_group_t v58 = v28;
  swift_retain();
  uint64_t v30 = v27;
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  char v31 = sub_100008EF8(aBlock, (uint64_t)v79);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = sub_1000DEDA0;
  *(void *)(v32 + 24) = v29;
  unint64_t v33 = sub_100008EF8((void *)(*v31 + 16), *(void *)(*v31 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  id v34 = *(void (**)(char *, uint64_t))(v13 + 8);
  id v35 = v17;
  uint64_t v36 = v59;
  v34(v35, v59);
  sub_100008EF8((void *)(*v33 + 16), *(void *)(*v33 + 40));
  sub_1000B3744((uint64_t)v20, (uint64_t)sub_1000DEDE8, v32);
  v34(v20, v36);
  swift_release();
  sub_100008EA8((uint64_t)aBlock);
  swift_release();
  dispatch_group_t v37 = v58;
  dispatch_group_enter(v58);
  uint64_t v39 = v63;
  uint64_t v38 = v64;
  uint64_t v40 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v76 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__cdpController, v64);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
  uint64_t v41 = *sub_100008EF8(aBlock, (uint64_t)v79);
  uint64_t v42 = v37;
  uint64_t v43 = v60;
  swift_retain();
  sub_10005721C(v41, v43, v42);
  swift_release();

  sub_100008EA8((uint64_t)aBlock);
  sub_1000093D0();
  unsigned int v45 = v65;
  uint64_t v44 = v66;
  uint64_t v46 = v67;
  (*(void (**)(char *, void, uint64_t))(v66 + 104))(v65, enum case for DispatchQoS.QoSClass.default(_:), v67);
  os_log_type_t v47 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  BOOL v48 = (void *)swift_allocObject();
  uint64_t v57 = v30;
  uint64_t v49 = v69;
  uint64_t v50 = v70;
  v48[2] = v30;
  void v48[3] = v49;
  uint64_t v51 = v61;
  v48[4] = v50;
  void v48[5] = v51;
  v48[6] = v43;
  id v80 = sub_1000DEE44;
  uint64_t v81 = v48;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  long long v79 = &unk_1002FACF8;
  id v52 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v53 = v68;
  static DispatchQoS.unspecified.getter();
  uint64_t v77 = _swiftEmptyArrayStorage;
  sub_1000DEE54();
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  uint64_t v55 = v71;
  uint64_t v54 = v72;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v52);

  (*(void (**)(char *, uint64_t))(v75 + 8))(v55, v54);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v53, v74);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_1000DE858(uint64_t a1, char a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_beginAccess();
    *(void *)(a5 + 16) = a1;
    swift_errorRetain();
    swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    *(unsigned char *)(a4 + 16) = a1 & 1;
  }
  dispatch_group_leave(a3);
}

void sub_1000DE8EC(char a1, uint64_t a2, NSObject *a3)
{
  *(unsigned char *)(a2 + 16) = a1;
  dispatch_group_leave(a3);
}

uint64_t sub_1000DE944(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    swift_errorRetain();
    a2(v9, 1);
    return swift_errorRelease();
  }
  swift_beginAccess();
  if (*(unsigned char *)(a4 + 16)) {
    uint64_t v11 = 2;
  }
  else {
    uint64_t v11 = 1;
  }
  swift_beginAccess();
  if (*(unsigned char *)(a5 + 16))
  {
    uint64_t v12 = 4;
LABEL_10:
    v11 |= v12;
    return ((uint64_t (*)(uint64_t, void))a2)(v11, 0);
  }
  if ((v11 & 1) == 0)
  {
    uint64_t v12 = 1;
    goto LABEL_10;
  }
  return ((uint64_t (*)(uint64_t, void))a2)(v11, 0);
}

uint64_t sub_1000DEA34(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    a3(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      uint64_t v12 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      uint64_t v13 = *(void *)(v8 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_10002F4D4(v12, (uint64_t)v10);
        uint64_t v14 = *(void *)&v10[*(int *)(v6 + 36)];
        sub_10002F538((uint64_t)v10);
        if (v14 == 2) {
          break;
        }
        v12 += v13;
        if (!--v11)
        {
          sub_100007844(a1, 0);
          goto LABEL_7;
        }
      }
      sub_100007844(a1, 0);
      uint64_t v15 = 1;
    }
    else
    {
LABEL_7:
      uint64_t v15 = 0;
    }
    return ((uint64_t (*)(uint64_t, void))a3)(v15, 0);
  }
}

uint64_t sub_1000DEBD4()
{
  return type metadata accessor for RecoveryFactorsController();
}

void sub_1000DEBDC()
{
  sub_10001BF34(319, (unint64_t *)&qword_100327F30, &qword_100322470);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&unk_100324060, (uint64_t *)&unk_10032ACC0);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, qword_100327FA0, (uint64_t *)&unk_100321910);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_1000DED10()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000DED20()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DED58()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000DEDA0(uint64_t a1, char a2)
{
  sub_1000DE858(a1, a2 & 1, *(NSObject **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1000DEDB0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DEDE8(uint64_t a1, char a2)
{
  return sub_1000DEA34(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1000DEDF4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000DEE44()
{
  return sub_1000DE944(*(void *)(v0 + 16), *(void (**)(uint64_t, uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

unint64_t sub_1000DEE54()
{
  unint64_t result = qword_1003229B0;
  if (!qword_1003229B0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003229B0);
  }
  return result;
}

uint64_t sub_1000DEEAC()
{
  uint64_t v0 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = 0;
  id v2 = [v0 dataWithJSONObject:isa options:1 error:&v7];

  id v3 = v7;
  if (v2)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v5 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
  return v4;
}

void sub_1000DEFCC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a6;
  v32[1] = a2;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  unint64_t v33 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v32 - v12;
  uint64_t v14 = type metadata accessor for URLResourceValues();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v35;
  Data.write(to:options:)();
  if (v19)
  {
    uint64_t v20 = v36;
    uint64_t v22 = v33;
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E700);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, v7);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    int v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v38 = v35;
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v36 = 0;
      sub_1000B67E8();
      LODWORD(v34) = v26;
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v37 = sub_100135190(v28, v29, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v7);
      *(_WORD *)(v27 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v30 = Error.localizedDescription.getter();
      uint64_t v37 = sub_100135190(v30, v31, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v34, "Failed to write data to url: %s with error %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v7);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v35 = v15;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    uint64_t v21 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v13, a1, v7);
    URL.setResourceValues(_:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v7);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v14);
  }
}

void sub_1000DF48C(void *a1@<X0>, int a2@<W1>, char *a3@<X8>)
{
  int v109 = a2;
  uint64_t v5 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v111 = (char *)v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v112 = v8;
  uint64_t v113 = v9;
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v108 = (char *)v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v110 = (void *)((char *)v102 - v14);
  uint64_t v15 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v17 = __chkstk_darwin(v15 - 8, v16);
  uint64_t v19 = (char *)v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)v102 - v21;
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v26 = __chkstk_darwin(v23, v25);
  long long v114 = (char *)v102 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v28);
  uint64_t v115 = (char *)v102 - v29;
  if (CKRecord.recordType.getter() == 0xD000000000000017 && v30 == 0x80000001002ACAB0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0)
    {
LABEL_7:
      type metadata accessor for InheritanceError(0);
      uint64_t v118 = 2;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_1000E2158((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      return;
    }
  }
  long long v105 = a3;
  id v32 = [a1 recordID];
  id v33 = [v32 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v34(v22, 1, v23) == 1)
  {
    sub_100006574((uint64_t)v22, (uint64_t *)&unk_100321CE0);
    goto LABEL_7;
  }
  uint64_t v104 = v24;
  uint64_t v35 = v23;
  uint64_t v36 = *(void (**)(char *, char *))(v24 + 32);
  uint64_t v106 = v35;
  v36(v115, v22);
  id v37 = [a1 encryptedValuesByKey];
  NSString v38 = String._bridgeToObjectiveC()();
  id v107 = v37;
  id v39 = [v37 objectForKeyedSubscript:v38];

  if (!v39) {
    goto LABEL_12;
  }
  uint64_t v118 = (uint64_t)v39;
  uint64_t v40 = sub_100009F04(&qword_1003239A0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_12;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v41 = v106;
  if (v34(v19, 1, v106) == 1)
  {
    sub_100006574((uint64_t)v19, (uint64_t *)&unk_100321CE0);
LABEL_12:
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_100007288(v42, (uint64_t)qword_10033E760);
    uint64_t v43 = a1;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v47 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 138412290;
      uint64_t v116 = v43;
      BOOL v48 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v47 = v43;

      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Missing beneficiaryID - %@", v46, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v44 = v43;
    }
    uint64_t v49 = v104;

    type metadata accessor for InheritanceError(0);
    uint64_t v118 = 2;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E2158((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v49 + 8))(v115, v106);
    return;
  }
  v102[1] = v40;
  uint64_t v50 = v114;
  ((void (*)(char *, char *, uint64_t))v36)(v114, v19, v41);
  uint64_t v103 = (int *)type metadata accessor for InheritanceHealthRecord();
  uint64_t v52 = v104;
  uint64_t v51 = v105;
  id v53 = *(void (**)(void))(v104 + 16);
  v102[0] = &v105[v103[7]];
  v53();
  ((void (*)(char *, char *, uint64_t))v53)(v51, v50, v41);
  NSString v54 = String._bridgeToObjectiveC()();
  uint64_t v55 = [v107 objectForKeyedSubscript:v54];

  if (!v55)
  {
    uint64_t v57 = v112;
    uint64_t v59 = v113;
    uint64_t v56 = (uint64_t)v111;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v113 + 56))(v111, 1, 1, v112);
    goto LABEL_22;
  }
  uint64_t v116 = v55;
  uint64_t v56 = (uint64_t)v111;
  uint64_t v57 = v112;
  int v58 = swift_dynamicCast();
  uint64_t v59 = v113;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v113 + 56))(v56, v58 ^ 1u, 1, v57);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v56, 1, v57) == 1)
  {
LABEL_22:
    Date.init(timeIntervalSince1970:)();
    sub_100006574(v56, &qword_100324D80);
    uint64_t v60 = *(void (**)(void))(v59 + 32);
    goto LABEL_23;
  }
  uint64_t v60 = *(void (**)(void))(v59 + 32);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v60)(v110, v56, v57);
LABEL_23:
  uint64_t v61 = v51;
  uint64_t v62 = v103;
  uint64_t v111 = &v51[v103[5]];
  v60();
  id v63 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v63];
  [v63 finishEncoding];
  id v64 = [v63 encodedData];
  uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v66;

  BOOL v68 = (uint64_t *)&v61[v62[8]];
  *BOOL v68 = v65;
  v68[1] = v67;
  NSString v69 = String._bridgeToObjectiveC()();
  id v70 = [v107 objectForKeyedSubscript:v69];

  if (v70 && (uint64_t v118 = (uint64_t)v70, (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v71 = (uint64_t)v116;
    unint64_t v72 = v117;
    sub_100013140((uint64_t)v116, v117);
    uint64_t v73 = sub_1001FBBD8(v71, v72);
    if (v76 == 1)
    {
      uint64_t v77 = v103;
      uint64_t v78 = v105;
      long long v79 = (uint64_t *)&v105[v103[6]];
      *long long v79 = v71;
      v79[1] = v72;
      sub_100013140(v71, v72);
      id v80 = v108;
      Date.init(timeIntervalSince1970:)();
      swift_unknownObjectRelease();

      sub_100013198(v71, v72);
      uint64_t v81 = *(void (**)(char *, uint64_t))(v52 + 8);
      uint64_t v82 = v106;
      v81(v114, v106);
      uint64_t v83 = v82;
      id v84 = v77;
      v81(v115, v83);
      (*(void (**)(char *, char *, uint64_t))(v113 + 40))(v111, v80, v112);
    }
    else
    {
      uint64_t v95 = v73;
      unint64_t v96 = v74;
      uint64_t v97 = v75;
      uint64_t v98 = v76;
      swift_unknownObjectRelease();

      sub_100013198(v71, v72);
      uint64_t v99 = *(void (**)(char *, uint64_t))(v52 + 8);
      uint64_t v100 = v106;
      v99(v114, v106);
      v99(v115, v100);
      sub_100013140(v95, v96);
      sub_1000E1F44(v95, v96, v97, v98);
      id v84 = v103;
      uint64_t v78 = v105;
      uint64_t v101 = (uint64_t *)&v105[v103[6]];
      *uint64_t v101 = v95;
      v101[1] = v96;
    }
    v78[v84[9]] = v109 & 1;
  }
  else
  {
    uint64_t v110 = v68;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for Logger();
    sub_100007288(v85, (uint64_t)qword_10033E760);
    uint64_t v86 = a1;
    long long v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v88))
    {
      long long v89 = (uint8_t *)swift_slowAlloc();
      os_log_t v90 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v89 = 138412290;
      uint64_t v116 = v86;
      uint64_t v91 = v86;
      uint64_t v52 = v104;
      uint64_t v61 = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v90 = v86;

      uint64_t v57 = v112;
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Missing access key hash - %@", v89, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      long long v87 = v86;
    }
    uint64_t v92 = v113;

    type metadata accessor for InheritanceError(0);
    uint64_t v118 = 2;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E2158((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();

    uint64_t v93 = *(void (**)(char *, uint64_t))(v52 + 8);
    uint64_t v94 = v106;
    v93(v114, v106);
    v93(v115, v94);
    v93(v61, v94);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v111, v57);
    v93((char *)v102[0], v94);
    sub_100013198(*v110, v110[1]);
  }
}

uint64_t sub_1000E0214(id *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v60 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  NSString v54 = &v52[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v59 = sub_100009F04(&qword_100326350);
  __chkstk_darwin(v59, v6);
  uint64_t v8 = &v52[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_100009F04(&qword_100324D80);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v55 = &v52[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = &v52[-v15];
  __chkstk_darwin(v14, v17);
  uint64_t v19 = &v52[-v18];
  id v20 = [*a1 encryptedValuesByKey];
  uint64_t ObjectType = swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v21 = v66;
  unint64_t v22 = v67;
  uint64_t v61 = v1;
  uint64_t v23 = UUID.uuidString.getter();
  if (!v22)
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = v61;
LABEL_7:
    uint64_t v27 = UUID.uuidString.getter();
    NSString v69 = &type metadata for String;
    id v70 = &protocol witness table for String;
    uint64_t v66 = v27;
    unint64_t v67 = v28;
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_8;
  }
  if (v21 == v23 && v22 == v24)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v25 = v61;
    goto LABEL_8;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = v61;
  if ((v26 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_8:
  int v58 = "ntd25RecoveryFactorsController";
  id v62 = v20;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v29 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v30 = v25 + *(int *)(v29 + 20);
  uint64_t v31 = v60;
  uint64_t v56 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v60 + 16);
  uint64_t v57 = v30;
  ((void (*)(unsigned char *))v56)(v16);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v31 + 56))(v16, 0, 1, v3);
  uint64_t v32 = (uint64_t)&v8[*(int *)(v59 + 48)];
  sub_1000E1F88((uint64_t)v19, (uint64_t)v8);
  sub_1000E1F88((uint64_t)v16, v32);
  id v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (v33((uint64_t)v8, 1, v3) == 1)
  {
    sub_100006574((uint64_t)v16, &qword_100324D80);
    sub_100006574((uint64_t)v19, &qword_100324D80);
    if (v33(v32, 1, v3) == 1)
    {
      sub_100006574((uint64_t)v8, &qword_100324D80);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  uint64_t v59 = v29;
  uint64_t v34 = v55;
  sub_1000E1F88((uint64_t)v8, (uint64_t)v55);
  if (v33(v32, 1, v3) == 1)
  {
    sub_100006574((uint64_t)v16, &qword_100324D80);
    sub_100006574((uint64_t)v19, &qword_100324D80);
    (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v34, v3);
    uint64_t v29 = v59;
LABEL_13:
    sub_100006574((uint64_t)v8, &qword_100326350);
LABEL_14:
    NSString v69 = (void *)v3;
    id v70 = &protocol witness table for Date;
    uint64_t v35 = sub_10003584C(&v66);
    v56(v35, v57, v3);
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_15;
  }
  uint64_t v49 = v60;
  uint64_t v50 = v54;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v60 + 32))(v54, v32, v3);
  sub_1000E2158(&qword_100326360, (void (*)(uint64_t))&type metadata accessor for Date);
  int v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v51 = *(void (**)(unsigned char *, uint64_t))(v49 + 8);
  v51(v50, v3);
  sub_100006574((uint64_t)v16, &qword_100324D80);
  sub_100006574((uint64_t)v19, &qword_100324D80);
  v51(v34, v3);
  sub_100006574((uint64_t)v8, &qword_100324D80);
  uint64_t v29 = v59;
  if ((v53 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v36 = (uint64_t *)(v61 + *(int *)(v29 + 24));
  uint64_t v38 = *v36;
  unint64_t v37 = v36[1];
  sub_100013140(*v36, v37);
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v40 = v64;
  unint64_t v39 = v65;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v66 = v38;
  unint64_t v67 = v37;
  sub_1000E1FF0();
  uint64_t v68 = 0;
  NSString v69 = 0;
  uint64_t v41 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v43 = v42;
  swift_release();
  if (v39 >> 60 == 15)
  {
    sub_1000196A0(v40, v39);
    sub_1000196A0(v41, v43);
LABEL_19:
    swift_allocObject();
    JSONEncoder.init()();
    uint64_t v66 = v38;
    unint64_t v67 = v37;
    uint64_t v68 = 0;
    NSString v69 = 0;
    uint64_t v45 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v47 = v46;
    swift_release();
    NSString v69 = &type metadata for Data;
    id v70 = &protocol witness table for Data;
    uint64_t v66 = v45;
    unint64_t v67 = v47;
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    sub_100013198(v38, v37);
    return swift_bridgeObjectRelease();
  }
  sub_1000196B4(v40, v39);
  char v44 = sub_100012680(v40, v39, v41, v43);
  sub_100013198(v41, v43);
  sub_1000196A0(v40, v39);
  sub_1000196A0(v40, v39);
  if ((v44 & 1) == 0) {
    goto LABEL_19;
  }
  sub_100013198(v38, v37);
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000E0A54(char a1)
{
  unint64_t result = 0x444964726F636572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x69636966656E6562;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x654B737365636361;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000E0B44()
{
  return sub_1000E0A54(*v0);
}

uint64_t sub_1000E0B4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E2E18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000E0B74(uint64_t a1)
{
  unint64_t v2 = sub_1000E2044();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E0BB0(uint64_t a1)
{
  unint64_t v2 = sub_1000E2044();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E0BEC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v64 = *(void *)(v3 - 8);
  uint64_t v65 = v3;
  uint64_t v5 = __chkstk_darwin(v3, v4);
  id v62 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v66 = (char *)v57 - v8;
  uint64_t v69 = type metadata accessor for UUID();
  uint64_t v67 = *(void *)(v69 - 8);
  uint64_t v10 = __chkstk_darwin(v69, v9);
  uint64_t v12 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  id v70 = (char *)v57 - v14;
  uint64_t v15 = sub_100009F04(&qword_100326380);
  uint64_t v68 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for InheritanceHealthRecord();
  __chkstk_darwin(v19, v20);
  unint64_t v22 = (char *)v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1000E2044();
  uint64_t v23 = v71;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23) {
    return sub_100008EA8((uint64_t)a1);
  }
  uint64_t v59 = v12;
  uint64_t v60 = v22;
  uint64_t v61 = (int *)v19;
  uint64_t v71 = a1;
  LOBYTE(v72) = 0;
  sub_1000E2158((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v25 = v69;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v26 = v60;
  uint64_t v27 = v15;
  unint64_t v28 = v18;
  unint64_t v29 = (unint64_t)&v60[v61[7]];
  uint64_t v30 = v70;
  id v70 = *(char **)(v67 + 32);
  ((void (*)(unint64_t, char *, uint64_t))v70)(v29, v30, v25);
  LOBYTE(v72) = 1;
  uint64_t v31 = (uint64_t)v59;
  uint64_t v58 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v57[1] = v29;
  ((void (*)(char *, uint64_t, uint64_t))v70)(v26, v31, v25);
  LOBYTE(v72) = 2;
  sub_1000E2158((unint64_t *)&unk_10032AD60, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v33 = v65;
  uint64_t v32 = v66;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v34 = v26;
  uint64_t v35 = v61;
  uint64_t v36 = &v26[v61[5]];
  uint64_t v37 = v64;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v34[v61[5]], v32, v33);
  char v73 = 3;
  sub_1000130EC();
  id v70 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)&v34[v35[8]] = v72;
  char v73 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v66 = v28;
  unsigned long long v38 = v72;
  sub_100013140(v72, *((unint64_t *)&v72 + 1));
  uint64_t v39 = sub_1001FBBD8(v38, *((unint64_t *)&v38 + 1));
  v57[0] = v38 >> 64;
  uint64_t v59 = (char *)v38;
  if (v42 == 1)
  {
    *(_OWORD *)&v60[v61[6]] = v38;
    sub_100013140(v38, *((unint64_t *)&v38 + 1));
    unint64_t v43 = v62;
    Date.init(timeIntervalSince1970:)();
    (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v36, v43, v33);
  }
  else
  {
    uint64_t v44 = v39;
    unint64_t v45 = v40;
    uint64_t v46 = v42;
    uint64_t v47 = v41;
    sub_100013140(v39, v40);
    sub_1000E1F44(v44, v45, v47, v46);
    BOOL v48 = (uint64_t *)&v60[v61[6]];
    *BOOL v48 = v44;
    v48[1] = v45;
  }
  uint64_t v49 = v68;
  uint64_t v50 = (uint64_t)v71;
  uint64_t v51 = v63;
  LOBYTE(v72) = 5;
  uint64_t v52 = v58;
  int v53 = v66;
  char v54 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v53, v52);
  sub_100013198((uint64_t)v59, v57[0]);
  char v55 = v54 & 1;
  uint64_t v56 = (uint64_t)v60;
  v60[v61[9]] = v55;
  sub_1000E2098(v56, v51);
  sub_100008EA8(v50);
  return sub_1000E20FC(v56);
}

uint64_t sub_1000E13E8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_100326398);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1000E2044();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v10 = type metadata accessor for InheritanceHealthRecord();
  LOBYTE(v22) = 0;
  type metadata accessor for UUID();
  sub_1000E2158(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  LOBYTE(v22) = 1;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v22) = 2;
  type metadata accessor for Date();
  sub_1000E2158((unint64_t *)&unk_10032AD80, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  long long v22 = *(_OWORD *)(v3 + *(int *)(v10 + 32));
  char v25 = 3;
  unint64_t v11 = sub_1000131F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v19[1] = v11;
  uint64_t v12 = (uint64_t *)(v3 + *(int *)(v10 + 24));
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  sub_100013140(v13, v14);
  JSONEncoder.init()();
  uint64_t v20 = v13;
  unint64_t v21 = v14;
  *(void *)&long long v22 = v13;
  *((void *)&v22 + 1) = v14;
  sub_1000E1FF0();
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v15 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v17 = v16;
  swift_release();
  *(void *)&long long v22 = v15;
  *((void *)&v22 + 1) = v17;
  char v25 = 4;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  sub_100013198(v15, v17);
  LOBYTE(v22) = 5;
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  sub_100013198(v20, v21);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E1810()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v4 = __chkstk_darwin(v1, v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = v0 + *(int *)(type metadata accessor for InheritanceHealthRecord() + 20);
  unint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v11(v9, v10, v1);
  Date.init(timeIntervalSince1970:)();
  sub_1000E2158(&qword_100326360, (void (*)(uint64_t))&type metadata accessor for Date);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v2 + 8);
  v13(v6, v1);
  v13(v9, v1);
  if (v12)
  {
    char v14 = 1;
  }
  else
  {
    sub_1000E3454();
    v11(v6, v10, v1);
    Date.init(timeInterval:since:)();
    Date.init()();
    char v14 = static Date.< infix(_:_:)();
    v13(v6, v1);
    v13(v9, v1);
  }
  return v14 & 1;
}

uint64_t sub_1000E1A30()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v4 = __chkstk_darwin(v1, v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for InheritanceHealthRecord();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v9, v0 + *(int *)(v10 + 20), v1);
  Date.init(timeIntervalSince1970:)();
  sub_1000E2158(&qword_100326360, (void (*)(uint64_t))&type metadata accessor for Date);
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v12 = *(void (**)(char *, uint64_t))(v2 + 8);
  v12(v6, v1);
  v12(v9, v1);
  if (v11) {
    return -1;
  }
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v15 = v14;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v12)(v9, v1);
  if ((~*(void *)&v15 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v15 < 9.22337204e18) {
    return (uint64_t)v15;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000E1C44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E0BEC(a1, a2);
}

uint64_t sub_1000E1C5C(void *a1)
{
  return sub_1000E13E8(a1);
}

uint64_t sub_1000E1C74()
{
  _StringGuts.grow(_:)(53);
  type metadata accessor for InheritanceHealthRecord();
  sub_100009F04((uint64_t *)&unk_100326368);
  v0._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000100299EF0;
  v1._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  sub_1000E2158((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0xD00000000000001CLL;
  v3._object = (void *)0x800000010029CD20;
  String.append(_:)(v3);
  type metadata accessor for Date();
  sub_1000E2158(&qword_100326378, (void (*)(uint64_t))&type metadata accessor for Date);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000E1E1C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000E2158((unint64_t *)&unk_100326330, (void (*)(uint64_t))type metadata accessor for InheritanceHealthRecord);
  uint64_t result = sub_1000E2158(&qword_100323570, (void (*)(uint64_t))type metadata accessor for InheritanceHealthRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for InheritanceHealthRecord()
{
  uint64_t result = qword_100326400;
  if (!qword_100326400) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E1EEC(uint64_t a1)
{
  uint64_t result = sub_1000E2158((unint64_t *)&unk_100326340, (void (*)(uint64_t))type metadata accessor for InheritanceHealthRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000E1F44(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    sub_100013198(result, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000E1F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100324D80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000E1FF0()
{
  unint64_t result = qword_100326358;
  if (!qword_100326358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326358);
  }
  return result;
}

unint64_t sub_1000E2044()
{
  unint64_t result = qword_100326388;
  if (!qword_100326388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326388);
  }
  return result;
}

uint64_t sub_1000E2098(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InheritanceHealthRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E20FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InheritanceHealthRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E2158(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for InheritanceHealthRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E226CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceHealthRecord.CodingKeys()
{
  return &type metadata for InheritanceHealthRecord.CodingKeys;
}

void *sub_1000E22A4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (void *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    char v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[6];
    double v14 = (void *)((char *)a1 + v13);
    double v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    sub_100013140(*v15, v17);
    *double v14 = v16;
    v14[1] = v17;
    v8((void *)((char *)a1 + a3[7]), (void *)((char *)a2 + a3[7]), v7);
    uint64_t v18 = a3[8];
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    sub_100013140(*v20, v22);
    *uint64_t v19 = v21;
    v19[1] = v22;
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_1000E2430(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  sub_100013198(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  v5(a1 + a2[7], v4);
  uint64_t v8 = (uint64_t *)(a1 + a2[8]);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];

  return sub_100013198(v9, v10);
}

uint64_t sub_1000E2524(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  double v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_100013140(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  v7(a1 + a3[7], a2 + a3[7], v6);
  uint64_t v17 = a3[8];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_100013140(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000E2660(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  double v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_100013140(*v14, v16);
  uint64_t v17 = *v13;
  unint64_t v18 = v13[1];
  *uint64_t v13 = v15;
  v13[1] = v16;
  sub_100013198(v17, v18);
  v7(a1 + a3[7], a2 + a3[7], v6);
  uint64_t v19 = a3[8];
  uint64_t v20 = (uint64_t *)(a1 + v19);
  unint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  sub_100013140(*v21, v23);
  uint64_t v24 = *v20;
  unint64_t v25 = v20[1];
  uint64_t *v20 = v22;
  v20[1] = v23;
  sub_100013198(v24, v25);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000E27AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v7(a1 + v12, a2 + v12, v6);
  uint64_t v13 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t sub_1000E28B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = *(void *)(a1 + v12);
  unint64_t v14 = *(void *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_100013198(v13, v14);
  v7(a1 + a3[7], a2 + a3[7], v6);
  uint64_t v15 = a3[8];
  uint64_t v16 = *(void *)(a1 + v15);
  unint64_t v17 = *(void *)(a1 + v15 + 8);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  sub_100013198(v16, v17);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000E29D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E29E8);
}

uint64_t sub_1000E29E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
      if (v14 >= 2) {
        return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1000E2B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E2B20);
}

uint64_t sub_1000E2B20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for Date();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 36)) = a2 + 1;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000E2C30()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000E2D14()
{
  unint64_t result = qword_100326448;
  if (!qword_100326448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326448);
  }
  return result;
}

unint64_t sub_1000E2D6C()
{
  unint64_t result = qword_100326450;
  if (!qword_100326450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326450);
  }
  return result;
}

unint64_t sub_1000E2DC4()
{
  unint64_t result = qword_100326458;
  if (!qword_100326458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326458);
  }
  return result;
}

uint64_t sub_1000E2E18(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444964726F636572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000010029CC80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010029A0E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x654B737365636361 && a2 == 0xED00006873614879 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010029A100)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1000E30C8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000E30F0(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

double sub_1000E3148()
{
  Swift::String v0 = self;
  if ([v0 isCustomHealthCheckIntervalEnabled])
  {
    id v1 = [v0 customHealthCheckIntervalMinutes];
    if ((uint64_t)v1 <= 0) {
      uint64_t v2 = 10;
    }
    else {
      uint64_t v2 = (uint64_t)v1;
    }
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007288(v3, (uint64_t)qword_10033E778);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      char v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v6 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Using Health Check interval - Custom %ld mins", v6, 0xCu);
      swift_slowDealloc();
    }

    swift_beginAccess();
    return (double)v2 * 60.0;
  }
  else if ([self isInternalBuild])
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E778);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Using Health Check interval - One Day", v11, 2u);
      swift_slowDealloc();
    }

    return 86400.0;
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E778);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Using Health Check interval - One Week", v16, 2u);
      swift_slowDealloc();
    }

    return 604800.0;
  }
}

double sub_1000E3454()
{
  id v0 = [self customHealthCheckReachabilityIntervalMinutes];
  if (!v0) {
    return 2419200.0;
  }
  uint64_t v1 = (uint64_t)v0;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  double v2 = (double)v1;
  uint64_t v3 = type metadata accessor for Logger();
  sub_100007288(v3, (uint64_t)qword_10033E778);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    char v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v6 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Using Custom Health Check reachability interval - %f", v6, 0xCu);
    swift_slowDealloc();
  }

  return v2;
}

uint64_t type metadata accessor for DaemonDestinationBuilder()
{
  return self;
}

uint64_t sub_1000E35C0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_1003265C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100008EF8(a1, a1[3]);
  sub_1000E48FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[15] = *v3;
  v11[14] = 0;
  sub_1000DC13C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for InheritanceAccessKeyMessage();
    v11[13] = 1;
    type metadata accessor for UUID();
    sub_10000704C(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[12] = 2;
    type metadata accessor for CloudShareInfo();
    sub_10000704C(&qword_1003265D0, (void (*)(uint64_t))type metadata accessor for CloudShareInfo);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000E380C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v25 = type metadata accessor for CloudShareInfo();
  __chkstk_darwin(v25, v3);
  uint64_t v24 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100009F04(&qword_1003265B0);
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v8);
  os_log_type_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for InheritanceAccessKeyMessage();
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1000E48FC();
  uint64_t v15 = (uint64_t)v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    return sub_100008EA8((uint64_t)a1);
  }
  uint64_t v16 = v7;
  unint64_t v29 = a1;
  uint64_t v18 = v26;
  uint64_t v17 = v27;
  char v32 = 0;
  sub_1000DC190();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = (uint64_t)v14;
  *uint64_t v14 = v33;
  char v31 = 1;
  sub_10000704C((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, char *, uint64_t))(v23 + 32))(&v14[*(int *)(v11 + 20)], v16, v17);
  char v30 = 2;
  sub_10000704C(&qword_1003265C0, (void (*)(uint64_t))type metadata accessor for CloudShareInfo);
  uint64_t v20 = (uint64_t)v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v28);
  sub_1000E4950(v20, v19 + *(int *)(v11 + 24));
  sub_1000E49B4(v19, v22);
  sub_100008EA8((uint64_t)v29);
  return sub_1000E4A18(v19);
}

uint64_t sub_1000E3C2C()
{
  uint64_t v1 = 0x69636966656E6562;
  if (*v0 != 1) {
    uint64_t v1 = 0x666E496572616873;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1000E3C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E4C80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000E3CB8(uint64_t a1)
{
  unint64_t v2 = sub_1000E48FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E3CF4(uint64_t a1)
{
  unint64_t v2 = sub_1000E48FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E3D30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E380C(a1, a2);
}

uint64_t sub_1000E3D48(void *a1)
{
  return sub_1000E35C0(a1);
}

uint64_t sub_1000E3D60()
{
  _StringGuts.grow(_:)(23);
  type metadata accessor for InheritanceAccessKeyMessage();
  sub_100009F04(&qword_100326500);
  uint64_t v0 = String.init<A>(describing:)();
  swift_bridgeObjectRelease();
  v1._object = (void *)0x800000010029C900;
  v1._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  sub_10000704C((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t type metadata accessor for InheritanceAccessKeyMessage()
{
  uint64_t result = qword_100326560;
  if (!qword_100326560) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_1000E3EC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    uint64_t v15 = type metadata accessor for CloudShareInfo();
    uint64_t v16 = *(int *)(v15 + 20);
    uint64_t v17 = &v12[v16];
    uint64_t v18 = &v13[v16];
    uint64_t v20 = *(void *)v18;
    uint64_t v19 = *((void *)v18 + 1);
    *(void *)uint64_t v17 = v20;
    *((void *)v17 + 1) = v19;
    uint64_t v21 = *(int *)(v15 + 24);
    uint64_t v22 = *(void **)&v13[v21];
    *(void *)&v12[v21] = v22;
    swift_bridgeObjectRetain();
    id v23 = v22;
  }
  return v4;
}

void sub_1000E4020(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = type metadata accessor for CloudShareInfo();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void **)(v6 + *(int *)(v8 + 24));
}

unsigned char *sub_1000E4100(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = type metadata accessor for CloudShareInfo();
  uint64_t v15 = *(int *)(v14 + 20);
  uint64_t v16 = &v11[v15];
  uint64_t v17 = (uint64_t *)&v12[v15];
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  void *v16 = v19;
  v16[1] = v18;
  uint64_t v20 = *(int *)(v14 + 24);
  uint64_t v21 = *(void **)&v12[v20];
  *(void *)&v11[v20] = v21;
  swift_bridgeObjectRetain();
  id v22 = v21;
  return a1;
}

unsigned char *sub_1000E4208(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = type metadata accessor for CloudShareInfo();
  uint64_t v15 = *(int *)(v14 + 20);
  uint64_t v16 = &v11[v15];
  uint64_t v17 = &v12[v15];
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(int *)(v14 + 24);
  uint64_t v19 = *(void **)&v11[v18];
  uint64_t v20 = *(void **)&v12[v18];
  *(void *)&v11[v18] = v20;
  id v21 = v20;

  return a1;
}

unsigned char *sub_1000E432C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = type metadata accessor for CloudShareInfo();
  *(_OWORD *)&v11[*(int *)(v14 + 20)] = *(_OWORD *)&v12[*(int *)(v14 + 20)];
  *(void *)&v11[*(int *)(v14 + 24)] = *(void *)&v12[*(int *)(v14 + 24)];
  return a1;
}

unsigned char *sub_1000E4420(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = type metadata accessor for CloudShareInfo();
  uint64_t v15 = *(int *)(v14 + 20);
  uint64_t v16 = &v11[v15];
  uint64_t v17 = (uint64_t *)&v12[v15];
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  void *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(int *)(v14 + 24);
  id v21 = *(void **)&v11[v20];
  *(void *)&v11[v20] = *(void *)&v12[v20];

  return a1;
}

uint64_t sub_1000E4530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E4544);
}

uint64_t sub_1000E4544(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 251)
  {
    unsigned int v4 = *a1;
    if (v4 >= 5) {
      return v4 - 4;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = &a1[*(int *)(a3 + 20)];
      uint64_t v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for CloudShareInfo();
      uint64_t v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = &a1[*(int *)(a3 + 24)];
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000E4668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E467C);
}

unsigned char *sub_1000E467C(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 251)
  {
    *uint64_t result = a2 + 4;
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = &v5[*(int *)(a4 + 20)];
      uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (unsigned char *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for CloudShareInfo();
      uint64_t v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = &v5[*(int *)(a4 + 24)];
      return (unsigned char *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_1000E47A4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CloudShareInfo();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000E4878(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10000704C(&qword_1003265A0, (void (*)(uint64_t))type metadata accessor for InheritanceAccessKeyMessage);
  uint64_t result = sub_10000704C(&qword_1003265A8, (void (*)(uint64_t))type metadata accessor for InheritanceAccessKeyMessage);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000E48FC()
{
  unint64_t result = qword_1003265B8;
  if (!qword_1003265B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003265B8);
  }
  return result;
}

uint64_t sub_1000E4950(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudShareInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E49B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InheritanceAccessKeyMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E4A18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InheritanceAccessKeyMessage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for InheritanceAccessKeyMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E4B40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceAccessKeyMessage.CodingKeys()
{
  return &type metadata for InheritanceAccessKeyMessage.CodingKeys;
}

unint64_t sub_1000E4B7C()
{
  unint64_t result = qword_1003265D8;
  if (!qword_1003265D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003265D8);
  }
  return result;
}

unint64_t sub_1000E4BD4()
{
  unint64_t result = qword_1003265E0;
  if (!qword_1003265E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003265E0);
  }
  return result;
}

unint64_t sub_1000E4C2C()
{
  unint64_t result = qword_1003265E8;
  if (!qword_1003265E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003265E8);
  }
  return result;
}

uint64_t sub_1000E4C80(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x666E496572616873 && a2 == 0xE90000000000006FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_1000E4DF8()
{
  type metadata accessor for LocalCache();
  swift_allocObject();
  unint64_t result = sub_10016BF40();
  qword_10033E868 = (uint64_t)result;
  return result;
}

uint64_t sub_1000E4E38()
{
  type metadata accessor for CloudKitStore();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0;
  uint64_t result = swift_unknownObjectWeakInit();
  qword_10033E870 = v0;
  return result;
}

uint64_t sub_1000E4E84@<X0>(void *a1@<X8>)
{
  id v21 = a1;
  if (qword_100320C20 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10033E868;
  uint64_t v2 = qword_100320C28;
  swift_retain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_10033E870;
  uint64_t v4 = type metadata accessor for LocalCache();
  v25[3] = v4;
  v25[4] = &off_1002FDDF8;
  v25[0] = v1;
  uint64_t v5 = type metadata accessor for CloudKitStore();
  uint64_t v23 = v5;
  uint64_t v24 = &off_100301908;
  v22[0] = v3;
  uint64_t v6 = type metadata accessor for StorageController();
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = sub_1000084BC((uint64_t)v25, v4);
  uint64_t v20 = (uint64_t)&v20;
  __chkstk_darwin(v8, v8);
  uint64_t v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  uint64_t v12 = sub_1000084BC((uint64_t)v22, v23);
  __chkstk_darwin(v12, v12);
  uint64_t v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = *v10;
  uint64_t v17 = *v14;
  v7[5] = v4;
  v7[6] = &off_1002FDDF8;
  v7[2] = v16;
  v7[10] = v5;
  v7[11] = &off_100301908;
  v7[7] = v17;
  swift_retain_n();
  swift_retain();
  sub_100008EA8((uint64_t)v22);
  sub_100008EA8((uint64_t)v25);
  swift_release();
  uint64_t result = swift_release();
  uint64_t v19 = v21;
  v21[3] = v6;
  v19[4] = &off_1002FBC50;
  *uint64_t v19 = v7;
  return result;
}

uint64_t type metadata accessor for DaemonStorageFactory()
{
  return self;
}

uint64_t sub_1000E5174(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v23 - v13;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E760);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetching stored InheritanceInvitationRecords...", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = sub_100008EF8((void *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v11, v6);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  sub_100008EF8((void *)(*v19 + 16), *(void *)(*v19 + 40));
  swift_retain();
  sub_1000B376C((uint64_t)v14, (uint64_t)sub_1000F2868, v21);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v6);
}

uint64_t sub_1000E53EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E7590(a1, a2, a3, "Fetching stored InheritanceInvitationRecord with beneficiaryID: %s...", (uint64_t)&unk_1002FB470, (uint64_t)sub_1000F27B8, (void (*)(void, void))sub_1000E5174);
}

uint64_t sub_1000E5428(uint64_t a1, char a2, uint64_t a3, uint8_t *a4, uint64_t a5)
{
  uint64_t v87 = a5;
  uint64_t v85 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v85, v9);
  uint64_t v86 = (uint64_t *)((char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v83 = v11;
  uint64_t v84 = v12;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v14, v17);
  id v80 = (char *)&v79 - v19;
  __chkstk_darwin(v18, v20);
  id v22 = (char *)&v79 - v21;
  uint64_t v23 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v28 = (char *)&v79 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v29);
  uint64_t v82 = (uint64_t)&v79 - v30;
  uint64_t v31 = sub_100009F04(&qword_1003235F8);
  uint64_t v33 = __chkstk_darwin(v31 - 8, v32);
  uint64_t v35 = (char *)&v79 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v36);
  uint64_t v88 = (uint64_t)&v79 - v37;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_100007288(v42, (uint64_t)qword_10033E760);
    uint64_t v43 = v83;
    uint64_t v44 = v84;
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v16, a3, v83);
    sub_100007850(a1, 1);
    swift_errorRetain();
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      uint64_t v81 = a4;
      uint64_t v90 = v48;
      *(_DWORD *)uint64_t v47 = 136315394;
      sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v89 = sub_100135190(v49, v50, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      a4 = v81;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v43);
      *(_WORD *)(v47 + 12) = 2080;
      uint64_t v89 = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v51 = String.init<A>(describing:)();
      uint64_t v89 = sub_100135190(v51, v52, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Error fetching InheritanceInvitationRecord with\nbeneficiaryID: %s. Error: %s", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v43);
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
    }

    int v53 = v86;
    *uint64_t v86 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    ((void (*)(uint64_t *))a4)(v53);
    sub_100007844(a1, 1);
    char v54 = &qword_100325890;
    uint64_t v55 = (uint64_t)v53;
  }
  else
  {
    uint64_t v38 = *(void *)(a1 + 16);
    if (v38)
    {
      uint64_t v81 = a4;
      uint64_t v39 = a1 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
      uint64_t v40 = *(void *)(v24 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000F2334(v39, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        if (static UUID.== infix(_:_:)()) {
          break;
        }
        sub_1000F239C((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        v39 += v40;
        if (!--v38)
        {
          sub_100007844(a1, 0);
          uint64_t v41 = 1;
          goto LABEL_15;
        }
      }
      sub_100007844(a1, 0);
      sub_1000F25B4((uint64_t)v28, v88, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      uint64_t v41 = 0;
LABEL_15:
      a4 = v81;
    }
    else
    {
      uint64_t v41 = 1;
    }
    uint64_t v56 = v88;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v88, v41, 1, v23);
    sub_100019730(v56, (uint64_t)v35, &qword_1003235F8);
    int v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v35, 1, v23);
    uint64_t v58 = v83;
    if (v57 == 1)
    {
      sub_100006574((uint64_t)v35, &qword_1003235F8);
      uint64_t v59 = v84;
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      sub_100007288(v60, (uint64_t)qword_10033E760);
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v22, a3, v58);
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v64 = swift_slowAlloc();
        uint64_t v81 = a4;
        uint64_t v90 = v64;
        *(_DWORD *)uint64_t v63 = 136315138;
        sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v89 = sub_100135190(v65, v66, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        a4 = v81;
        (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v58);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "No InheritanceInvitationRecord found with beneficiaryID: %s", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v58);
      }

      type metadata accessor for InheritanceError(0);
      uint64_t v89 = 3;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100007094((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v75 = v86;
      *uint64_t v86 = v90;
      swift_storeEnumTagMultiPayload();
      ((void (*)(uint64_t *))a4)(v75);
      sub_100006574((uint64_t)v75, &qword_100325890);
    }
    else
    {
      sub_1000F25B4((uint64_t)v35, v82, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      uint64_t v67 = v84;
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v68 = type metadata accessor for Logger();
      sub_100007288(v68, (uint64_t)qword_10033E760);
      uint64_t v69 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v80, a3, v58);
      id v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v70, v71))
      {
        unsigned long long v72 = (uint8_t *)swift_slowAlloc();
        uint64_t v90 = swift_slowAlloc();
        *(_DWORD *)unsigned long long v72 = 136315138;
        uint64_t v81 = v72 + 4;
        sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v89 = sub_100135190(v73, v74, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v58);
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Found InheritanceInvitationRecord with beneficiaryID: %s", v72, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v58);
      }

      uint64_t v76 = v82;
      uint64_t v77 = v86;
      sub_1000F2334(v82, (uint64_t)v86, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      swift_storeEnumTagMultiPayload();
      ((void (*)(uint64_t *))a4)(v77);
      sub_100006574((uint64_t)v77, &qword_100325890);
      sub_1000F239C(v76, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    }
    char v54 = &qword_1003235F8;
    uint64_t v55 = v88;
  }
  return sub_100006574(v55, v54);
}

uint64_t sub_1000E5FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for InheritanceInvitationRecord();
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E760);
  sub_1000F2334(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v21 = v3;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    *(_DWORD *)uint64_t v15 = 136315138;
    type metadata accessor for UUID();
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v24 = sub_100135190(v16, v17, &v25);
    a2 = v22;
    a3 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v21;
    swift_bridgeObjectRelease();
    sub_1000F239C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Saving InheritanceInvitationRecord with beneficiaryID - %s...", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000F239C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }

  sub_100008EF8((void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  swift_retain();
  sub_100269488(a1, (uint64_t)sub_1000F2704, v18);
  return swift_release();
}

uint64_t sub_1000E62A0(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InheritanceInvitationRecord();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_100325890);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  os_log_type_t v14 = (void *)((char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12, v15);
  unint64_t v17 = (void *)((char *)v31 - v16);
  sub_100019730(a1, (uint64_t)v31 - v16, &qword_100325890);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v31[1] = a3;
      uint64_t v32 = v18;
      uint64_t v33 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      v31[0] = v22 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v32 = sub_100135190(v24, v25, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error saving InheritanceInvitationRecord : %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *os_log_type_t v14 = v18;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v14);
    swift_errorRelease();
    return sub_100006574((uint64_t)v14, &qword_100325890);
  }
  else
  {
    sub_1000F25B4((uint64_t)v17, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E760);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Successfully saved InheritanceInvitationRecord.", v29, 2u);
      swift_slowDealloc();
    }

    [self postInheritanceContactChangedNotification];
    sub_1000F2334((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    swift_storeEnumTagMultiPayload();
    a2(v14);
    sub_100006574((uint64_t)v14, &qword_100325890);
    return sub_1000F239C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }
}

uint64_t sub_1000E6700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v6 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v10 = __chkstk_darwin(v6 - 8, v9);
  uint64_t v34 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v31 - v12;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100007288(v14, (uint64_t)qword_10033E760);
  sub_1000F2334(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v31 = v3;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v32 = v7;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v38 = swift_slowAlloc();
    uint64_t v33 = a1;
    *(_DWORD *)uint64_t v18 = 136315138;
    type metadata accessor for UUID();
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v37 = sub_100135190(v19, v20, &v38);
    uint64_t v4 = v31;
    a1 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000F239C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Deleting InheritanceInvitationRecord with beneficiaryID - %s...", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v32;
    swift_slowDealloc();
  }
  else
  {
    sub_1000F239C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }

  os_log_type_t v21 = sub_100008EF8((void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  uint64_t v22 = swift_allocObject();
  uint64_t v24 = v35;
  uint64_t v23 = v36;
  *(void *)(v22 + 16) = v35;
  *(void *)(v22 + 24) = v23;
  uint64_t v25 = *v21;
  uint64_t v26 = v34;
  sub_1000F2334(a1, v34, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  unint64_t v27 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v25;
  sub_1000F25B4(v26, v28 + v27, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  uint64_t v29 = (uint64_t (**)(uint64_t))(v28 + ((v8 + v27 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v29 = sub_1000F243C;
  v29[1] = (uint64_t (*)(uint64_t))v22;
  sub_100011D2C(v24);
  swift_retain();
  swift_retain();
  sub_1001D3AD4(a1, (uint64_t)sub_1000F261C, v28);
  swift_release();
  return swift_release();
}

uint64_t sub_1000E6AE8(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_1003229D0);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (uint64_t *)((char *)&v32 - v17);
  sub_100019730(a1, (uint64_t)&v32 - v17, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v32 = a3;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = v19;
      uint64_t v35 = v24;
      uint64_t v33 = a2;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v34 = sub_100135190(v25, v26, &v35);
      a2 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error deleting InheritanceInvitationRecord : %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (a2)
      {
LABEL_6:
        *uint64_t v15 = v19;
        swift_storeEnumTagMultiPayload();
        swift_errorRetain();
        a2(v15);
        swift_errorRelease();
        return sub_100006574((uint64_t)v15, &qword_1003229D0);
      }
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      if (a2) {
        goto LABEL_6;
      }
    }
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v10, v18, v6);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E760);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Successfully deleted InheritanceInvitationRecord.", v31, 2u);
      swift_slowDealloc();
    }

    if (a2)
    {
      (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(v15, v10, v6);
      swift_storeEnumTagMultiPayload();
      a2(v15);
      sub_100006574((uint64_t)v15, &qword_1003229D0);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1000E6F88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v23 - v13;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E760);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetching stored BeneficiaryInfoRecords...", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = sub_100008EF8((void *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v11, v6);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  sub_100008EF8((void *)(*v19 + 16), *(void *)(*v19 + 40));
  swift_retain();
  sub_10000A7D0((uint64_t)v14, (uint64_t)sub_1000F2304, v21);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v6);
}

uint64_t sub_1000E7200(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, const char *a5, const char *a6)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v17 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v18 = String.init<A>(describing:)();
      sub_100135190(v18, v19, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, a5, v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a3(a1, 1);
    sub_100007844(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E760);
    swift_bridgeObjectRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 134217984;
      uint64_t v21 = *(void *)(a1 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100007844(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, a6, v12, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 0);
    }

    return ((uint64_t (*)(uint64_t, void))a3)(a1, 0);
  }
}

uint64_t sub_1000E7554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E7590(a1, a2, a3, "Fetching stored BeneficiaryInfoRecord with beneficiaryID: %s", (uint64_t)&unk_1002FB380, (uint64_t)sub_1000F21C4, (void (*)(void, void))sub_100008810);
}

uint64_t sub_1000E7590(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, void (*a7)(void, void))
{
  uint64_t v41 = a6;
  uint64_t v38 = a5;
  uint64_t v39 = a2;
  uint64_t v35 = a4;
  uint64_t v40 = a3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  uint64_t v37 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  os_log_type_t v16 = (char *)&v31 - v15;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100007288(v17, (uint64_t)qword_10033E760);
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v36(v16, a1, v9);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v34 = a7;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v43 = v32;
    uint64_t v33 = a1;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v31 = v21 + 4;
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v42 = sub_100135190(v22, v23, &v43);
    a1 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v35, v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a7 = v34;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  }

  uint64_t v24 = v37;
  v36(v37, a1, v9);
  unint64_t v25 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v26 = (v11 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v27 + v25, v24, v9);
  uint64_t v28 = (void *)(v27 + v26);
  uint64_t v29 = v40;
  *uint64_t v28 = v39;
  v28[1] = v29;
  swift_retain();
  a7(v41, v27);
  return swift_release();
}

void sub_1000E7900(uint64_t a1, char a2, uint64_t a3, unint64_t a4, void (*a5)(void *), uint64_t a6)
{
  uint64_t v12 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  os_log_type_t v16 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100009F04(&qword_1003235F0);
  __chkstk_darwin(v17 - 8, v18);
  uint64_t v20 = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100007288(v31, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v47 = a1;
      uint64_t v48 = (void *)v35;
      *(_DWORD *)uint64_t v34 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v36 = String.init<A>(describing:)();
      uint64_t v47 = sub_100135190(v36, v37, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Error fetching BeneficiaryInfoRecord : %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v47 = 2107;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100007094((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v38 = v48;
    a5(v48);
    sub_100007844(a1, 1);
  }
  else
  {
    v46[0] = a5;
    v46[1] = a6;
    uint64_t v21 = *(void *)(a1 + 16);
    if (v21)
    {
      uint64_t v22 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      uint64_t v23 = *(void *)(v13 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000F2334(v22, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        uint64_t v24 = &v16[*(int *)(v12 + 20)];
        uint64_t v25 = *((void *)v24 + 1);
        if (v25)
        {
          BOOL v26 = *(void *)v24 == a3 && v25 == a4;
          if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
        }
        sub_1000F239C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        v22 += v23;
        if (!--v21)
        {
          sub_100007844(a1, 0);
          goto LABEL_22;
        }
      }
      sub_100007844(a1, 0);
      sub_1000F25B4((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_100007288(v27, (uint64_t)qword_10033E760);
      swift_bridgeObjectRetain_n();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v28, v29))
      {
        os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v30 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v47 = sub_100135190(a3, a4, (uint64_t *)&v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Found BeneficiaryInfoRecord with handle: %s", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v43 = (void (*)(void *))v46[0];
      type metadata accessor for InheritanceError(0);
      uint64_t v44 = 6;
    }
    else
    {
LABEL_22:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v20, 1, 1, v12);
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_100007288(v39, (uint64_t)qword_10033E760);
      swift_bridgeObjectRetain_n();
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v47 = sub_100135190(a3, a4, (uint64_t *)&v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "No BeneficiaryInfoRecord found with handle: %s", v42, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v43 = (void (*)(void *))v46[0];
      type metadata accessor for InheritanceError(0);
      uint64_t v44 = 3;
    }
    uint64_t v47 = v44;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100007094((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v45 = v48;
    v43(v48);

    sub_100006574((uint64_t)v20, &qword_1003235F0);
  }
}

uint64_t sub_1000E80F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E760);
  sub_1000F2334(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v21 = v3;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    *(_DWORD *)uint64_t v15 = 136315138;
    type metadata accessor for UUID();
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v24 = sub_100135190(v16, v17, &v25);
    a2 = v22;
    a3 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v21;
    swift_bridgeObjectRelease();
    sub_1000F239C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Saving BeneficiaryInfoRecord with beneficiaryID - %s...", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000F239C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }

  sub_100008EF8((void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  swift_retain();
  sub_100269820(a1, (uint64_t)sub_1000F21B8, v18);
  return swift_release();
}

uint64_t sub_1000E83EC(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_100321CF0);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  os_log_type_t v14 = (void *)((char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12, v15);
  unint64_t v17 = (void *)((char *)v31 - v16);
  sub_100019730(a1, (uint64_t)v31 - v16, &qword_100321CF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v31[1] = a3;
      uint64_t v32 = v18;
      uint64_t v33 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      v31[0] = v22 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v32 = sub_100135190(v24, v25, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error saving BeneficiaryInfoRecord : %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *os_log_type_t v14 = v18;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v14);
    swift_errorRelease();
    return sub_100006574((uint64_t)v14, &qword_100321CF0);
  }
  else
  {
    sub_1000F25B4((uint64_t)v17, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E760);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Successfully saved BeneficiaryInfoRecord.", v29, 2u);
      swift_slowDealloc();
    }

    [self postInheritanceContactChangedNotification];
    sub_1000F2334((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    swift_storeEnumTagMultiPayload();
    a2(v14);
    sub_100006574((uint64_t)v14, &qword_100321CF0);
    return sub_1000F239C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
}

uint64_t sub_1000E884C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v37 = a3;
  uint64_t v7 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v11 = __chkstk_darwin(v7 - 8, v10);
  uint64_t v36 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  os_log_type_t v14 = (char *)&v32 - v13;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E760);
  sub_1000F2334(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v33 = v3;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v34 = a2;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v35 = a1;
    uint64_t v39 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v32 = v19 + 4;
    type metadata accessor for UUID();
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v4 = v33;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = sub_100135190(v21, v22, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000F239C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Deleting BeneficiaryInfoRecord with beneficiaryID - %s...", v19, 0xCu);
    swift_arrayDestroy();
    a1 = v35;
    swift_slowDealloc();
    a2 = v34;
    swift_slowDealloc();
  }
  else
  {
    sub_1000F239C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }

  uint64_t v23 = sub_100008EF8((void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  uint64_t v24 = swift_allocObject();
  uint64_t v26 = (uint64_t)v36;
  uint64_t v25 = v37;
  *(void *)(v24 + 16) = a2;
  *(void *)(v24 + 24) = v25;
  uint64_t v27 = *v23;
  sub_1000F2334(a1, v26, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v28 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v27;
  sub_1000F25B4(v26, v29 + v28, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  os_log_type_t v30 = (uint64_t (**)(uint64_t))(v29 + ((v9 + v28 + 7) & 0xFFFFFFFFFFFFFFF8));
  *os_log_type_t v30 = sub_1000F1F68;
  v30[1] = (uint64_t (*)(uint64_t))v24;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1001D3DBC(a1, (uint64_t)sub_1000F218C, v29);
  swift_release();
  return swift_release();
}

uint64_t sub_1000E8C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = a2;
  uint64_t v62 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v67 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v67 + 64);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  unint64_t v66 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v54 - v11;
  uint64_t v64 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v60 = *(void *)(v64 - 8);
  uint64_t v14 = __chkstk_darwin(v64, v13);
  uint64_t v63 = (uint64_t)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v65 = (uint64_t)&v54 - v18;
  uint64_t v61 = v19;
  __chkstk_darwin(v17, v20);
  unint64_t v22 = (char *)&v54 - v21;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100007288(v23, (uint64_t)qword_10033E760);
  sub_1000F2334(a1, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v56 = a1;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v69 = swift_slowAlloc();
    uint64_t v55 = a4;
    *(_DWORD *)uint64_t v27 = 136315138;
    char v54 = v27 + 4;
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v68 = sub_100135190(v28, v29, &v69);
    a4 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000F239C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Adding OTPeerID to BeneficiaryInfoRecord with beneficiaryID - %s...", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v56;
    swift_slowDealloc();
  }
  else
  {
    sub_1000F239C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }

  uint64_t v30 = v67;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
  v31(v12, v58, v6);
  uint64_t v32 = (uint64_t)v66;
  v31(v66, (uint64_t)v12, v6);
  unint64_t v33 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v34 = swift_allocObject();
  uint64_t v35 = v6;
  uint64_t v57 = v6;
  uint64_t v36 = v34;
  (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v34 + v33, v12, v35);
  uint64_t v37 = sub_100008EF8((void *)(v59 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v59 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v62;
  *(void *)(v38 + 24) = a4;
  uint64_t v39 = *v37;
  sub_100008EF8((void *)(v39 + 56), *(void *)(v39 + 80));
  swift_retain();
  swift_retain();
  uint64_t v40 = v65;
  sub_1000E9310(a1, v32, v65);
  uint64_t v41 = v63;
  sub_1000F2334(a1, v63, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v42 = (*(unsigned __int8 *)(v60 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  unint64_t v43 = (v61 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = (void *)swift_allocObject();
  v44[2] = v39;
  v44[3] = sub_1000F1D34;
  _DWORD v44[4] = v38;
  uint64_t v44[5] = 0;
  sub_1000F25B4(v41, (uint64_t)v44 + v42, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v45 = (id (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v44 + v43);
  *unint64_t v45 = sub_1000F1CB4;
  v45[1] = (id (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v36;
  uint64_t v46 = qword_100320CC8;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v47 = v57;
  if (v46 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(v40 + *(int *)(v64 + 40)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v48 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v48 = &qword_10033EA18;
  }
  uint64_t v50 = *v48;
  unint64_t v49 = v48[1];
  swift_bridgeObjectRetain();
  id v51 = sub_10028CC20(v50, v49);
  id v52 = [v51 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_100065FD0(v40, v52, (uint64_t)sub_1000F1F3C, (uint64_t)v44);
  swift_release();

  sub_1000F239C(v40, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  swift_release_n();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v66, v47);
}

id sub_1000E9310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000F2334(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v13, a2, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v18);
  Date.init()();
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v9, 0, 1, v20);
  id result = [self currentInfo];
  if (result)
  {
    unint64_t v22 = result;
    id v23 = [result buildVersion];

    if (v23)
    {
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v26 = 0;
    }
    return (id)sub_100014F58((uint64_t)v17, 0, 0, 0, 0xF000000000000000, 2u, (uint64_t)v13, (uint64_t)v9, a3, v24, v26, 1u);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E95B0(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v8 = __chkstk_darwin(v6 - 8, v7);
  uint64_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)v38 - v12;
  uint64_t v14 = sub_100009F04(&qword_100321CF0);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (void *)((char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (void *)((char *)v38 - v20);
  sub_100019730(a1, (uint64_t)v38 - v20, &qword_100321CF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = *v21;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E760);
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v40 = a2;
      uint64_t v28 = (void *)v27;
      uint64_t v39 = a3;
      *(_DWORD *)uint64_t v26 = 138412290;
      uint64_t v29 = _convertErrorToNSError(_:)();
      uint64_t v42 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v29;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "CKRecord record was not updated with otPeerID %@", v26, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      a2 = v40;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    *uint64_t v18 = v22;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v18);
    swift_errorRelease();
    return sub_100006574((uint64_t)v18, &qword_100321CF0);
  }
  else
  {
    sub_1000F25B4((uint64_t)v21, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E760);
    sub_1000F2334((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v40 = a2;
      uint64_t v34 = (uint8_t *)v33;
      uint64_t v42 = swift_slowAlloc();
      v38[1] = v14;
      uint64_t v39 = a3;
      *(_DWORD *)uint64_t v34 = 136315138;
      uint64_t v35 = sub_1000187A8();
      uint64_t v41 = sub_100135190(v35, v36, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000F239C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "CKRecord record updated with otPeerID. %s!", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v40;
      swift_slowDealloc();
    }
    else
    {
      sub_1000F239C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }

    [self postInheritanceContactChangedNotification];
    sub_1000F2334((uint64_t)v13, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    swift_storeEnumTagMultiPayload();
    a2(v18);
    sub_100006574((uint64_t)v18, &qword_100321CF0);
    return sub_1000F239C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
}

uint64_t sub_1000E9AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v63 = a2;
  uint64_t v7 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v62 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v60 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v60 + 64);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v61 = (uint64_t)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v65 = (uint64_t)&v52 - v16;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v64 = (uint64_t)&v52 - v19;
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v23 = (char *)&v52 - v22;
  __chkstk_darwin(v21, v24);
  uint64_t v26 = (char *)&v52 - v25;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100007288(v27, (uint64_t)qword_10033E760);
  sub_1000F2334(a1, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  sub_1000F2334(a1, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  sub_1000F2334(a1, v64, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  sub_1000F2334(a1, v65, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  int v30 = v29;
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v31 = swift_slowAlloc();
    uint64_t v59 = a3;
    uint64_t v32 = v31;
    uint64_t v58 = swift_slowAlloc();
    uint64_t v67 = v58;
    *(_DWORD *)uint64_t v32 = 136315906;
    int v57 = v30;
    uint64_t v55 = type metadata accessor for UUID();
    uint64_t v54 = sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_t v56 = v28;
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v66 = sub_100135190(v33, v34, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000F239C((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v32 + 12) = 2080;
    uint64_t v35 = (uint64_t *)&v23[*(int *)(v10 + 20)];
    uint64_t v53 = v10;
    uint64_t v36 = a1;
    uint64_t v37 = v4;
    uint64_t v39 = *v35;
    unint64_t v38 = v35[1];
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_100135190(v39, v38, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v37;
    a1 = v36;
    swift_bridgeObjectRelease();
    sub_1000F239C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v32 + 22) = 2080;
    uint64_t v40 = v53;
    uint64_t v41 = v64;
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v66 = sub_100135190(v42, v43, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000F239C(v41, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v32 + 32) = 2048;
    uint64_t v44 = *(void *)(v65 + *(int *)(v40 + 24));
    sub_1000F239C(v65, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    uint64_t v66 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v28 = v56;
    _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v57, "Fetching stored BenefactorInfoRecord with beneficiaryID: %s\nhandle: %s\nrecordID: %s\nstatus: %ld", (uint8_t *)v32, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v59;
    swift_slowDealloc();
  }
  else
  {
    sub_1000F239C(v65, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_1000F239C((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_1000F239C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_1000F239C(v64, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }

  uint64_t v45 = type metadata accessor for TaskPriority();
  uint64_t v46 = (uint64_t)v62;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v62, 1, 1, v45);
  uint64_t v47 = v61;
  sub_1000F2334(a1, v61, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  unint64_t v48 = (*(unsigned __int8 *)(v60 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  unint64_t v49 = (void *)swift_allocObject();
  v49[2] = 0;
  v49[3] = 0;
  v49[4] = v4;
  sub_1000F25B4(v47, (uint64_t)v49 + v48, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v50 = (void *)((char *)v49 + ((v11 + v48 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v50 = v63;
  v50[1] = a3;
  swift_retain();
  swift_retain();
  sub_100225A54(v46, (uint64_t)&unk_100326858, (uint64_t)v49);
  return swift_release();
}

uint64_t sub_1000EA0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v7[12] = sub_100009F04((uint64_t *)&unk_100325860);
  v7[13] = swift_task_alloc();
  v7[14] = type metadata accessor for BenefactorInfoRecord();
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  v7[17] = swift_task_alloc();
  v7[18] = swift_task_alloc();
  v7[19] = swift_task_alloc();
  return _swift_task_switch(sub_1000EA1E8, 0, 0);
}

uint64_t sub_1000EA1E8()
{
  sub_100008EF8((void *)(v0[8] + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v0[8] + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100326860 + dword_100326860);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[20] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000EA2B0;
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[9];
  return v5(v2, v3);
}

uint64_t sub_1000EA2B0()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000EA864;
  }
  else {
    uint64_t v2 = sub_1000EA3C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000EA3C4()
{
  uint64_t v32 = v0;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v4 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[9];
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E760);
  sub_1000F2334(v5, v2, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  sub_1000F2334(v5, v1, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  sub_1000F2334(v5, v3, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  sub_1000F2334(v5, v4, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = v0[17];
  uint64_t v10 = v0[18];
  uint64_t v12 = v0[16];
  if (v9)
  {
    uint64_t v30 = v0[15];
    uint64_t v27 = v0[14];
    uint64_t v29 = v0[16];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315906;
    type metadata accessor for UUID();
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_100135190(v14, v15, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000F239C(v10, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v16 = (uint64_t *)(v11 + *(int *)(v27 + 20));
    os_log_type_t type = v8;
    uint64_t v18 = *v16;
    unint64_t v17 = v16[1];
    swift_bridgeObjectRetain();
    v0[5] = sub_100135190(v18, v17, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000F239C(v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v13 + 22) = 2080;
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_100135190(v19, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000F239C(v29, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v13 + 32) = 2048;
    uint64_t v21 = *(void *)(v30 + *(int *)(v27 + 24));
    sub_1000F239C(v30, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    v0[7] = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Successfully fetched BenefactorInfoRecord with beneficiaryID: %s\nhandle: %s\nrecordID: %s\nstatus: %ld", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000F239C(v0[15], (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_1000F239C(v10, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_1000F239C(v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_1000F239C(v12, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
  uint64_t v22 = v0[19];
  uint64_t v23 = v0[13];
  uint64_t v24 = (void (*)(uint64_t))v0[10];
  sub_1000F2334(v22, v23, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  swift_storeEnumTagMultiPayload();
  v24(v23);
  sub_100006574(v23, (uint64_t *)&unk_100325860);
  sub_1000F239C(v22, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_1000EA864()
{
  uint64_t v14 = v0;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E760);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[21];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[2] = v5;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v7 = String.init<A>(describing:)();
    v0[3] = sub_100135190(v7, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error fetching BenefactorInfoRecord : %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  BOOL v9 = (void *)v0[13];
  uint64_t v10 = (void (*)(void *))v0[10];
  *BOOL v9 = v0[21];
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v10(v9);
  swift_errorRelease();
  sub_100006574((uint64_t)v9, (uint64_t *)&unk_100325860);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1000EAAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v23 - v13;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E760);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetching stored BenefactorInfoRecords...", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = sub_100008EF8((void *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  unint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v11, v6);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  sub_100008EF8((void *)(*v19 + 16), *(void *)(*v19 + 40));
  swift_retain();
  sub_1000B3398((uint64_t)v14, (uint64_t)sub_1000F1500, v21);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v6);
}

uint64_t sub_1000EAD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E7590(a1, a2, a3, "Fetching stored BenefactorInfoRecord with beneficiaryID: %s...", (uint64_t)&unk_1002FB1A0, (uint64_t)sub_1000F1400, (void (*)(void, void))sub_1000EAAFC);
}

uint64_t sub_1000EADB0(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t *a6, uint64_t (*a7)(void), uint64_t *a8, uint64_t (*a9)(void), const char *a10, const char *a11, const char *a12)
{
  uint64_t v14 = a6;
  uint64_t v93 = a5;
  uint64_t v91 = sub_100009F04(a6);
  __chkstk_darwin(v91, v19);
  uint64_t v92 = (uint64_t *)((char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v86 = *(void *)(v21 - 8);
  uint64_t v87 = v21;
  uint64_t v23 = __chkstk_darwin(v21, v22);
  uint64_t v84 = (char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v83 = (char *)&v82 - v26;
  uint64_t v27 = a7(0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v32 = (char *)&v82 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v33);
  uint64_t v85 = (char *)&v82 - v34;
  uint64_t v35 = sub_100009F04(a8);
  uint64_t v37 = __chkstk_darwin(v35 - 8, v36);
  uint64_t v39 = (char *)&v82 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37, v40);
  uint64_t v90 = (char *)&v82 - v41;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100007288(v46, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v90 = a12;
      unint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      uint64_t v89 = v14;
      uint64_t v94 = a1;
      uint64_t v95 = v50;
      *(_DWORD *)unint64_t v49 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v51 = String.init<A>(describing:)();
      uint64_t v94 = sub_100135190(v51, v52, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, v90, v49, 0xCu);
      swift_arrayDestroy();
      uint64_t v14 = v89;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
    }

    uint64_t v53 = v92;
    *uint64_t v92 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a4(v53);
    sub_100007844(a1, 1);
    uint64_t v54 = (uint64_t)v53;
    uint64_t v55 = v14;
  }
  else
  {
    uint64_t v88 = a8;
    uint64_t v89 = v14;
    uint64_t v42 = *(void *)(a1 + 16);
    uint64_t v82 = a4;
    if (v42)
    {
      uint64_t v43 = a1 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
      uint64_t v44 = *(void *)(v28 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000F2334(v43, (uint64_t)v32, a9);
        if (static UUID.== infix(_:_:)()) {
          break;
        }
        sub_1000F239C((uint64_t)v32, a9);
        v43 += v44;
        if (!--v42)
        {
          sub_100007844(a1, 0);
          uint64_t v45 = 1;
          uint64_t v14 = v89;
          a4 = v82;
          goto LABEL_14;
        }
      }
      sub_100007844(a1, 0);
      uint64_t v57 = (uint64_t)v32;
      os_log_t v56 = v90;
      sub_1000F25B4(v57, (uint64_t)v90, a9);
      uint64_t v45 = 0;
      uint64_t v14 = v89;
      a4 = v82;
    }
    else
    {
      uint64_t v45 = 1;
LABEL_14:
      os_log_t v56 = v90;
    }
    (*(void (**)(const char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v56, v45, 1, v27);
    uint64_t v58 = v88;
    sub_100019730((uint64_t)v56, (uint64_t)v39, v88);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v39, 1, v27) == 1)
    {
      sub_100006574((uint64_t)v39, v58);
      uint64_t v59 = v86;
      uint64_t v60 = v87;
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v61 = type metadata accessor for Logger();
      sub_100007288(v61, (uint64_t)qword_10033E760);
      uint64_t v62 = v83;
      (*(void (**)(const char *, uint64_t, uint64_t))(v59 + 16))(v83, a3, v60);
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v85 = a11;
        uint64_t v65 = (uint8_t *)swift_slowAlloc();
        uint64_t v95 = swift_slowAlloc();
        *(_DWORD *)uint64_t v65 = 136315138;
        sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v94 = sub_100135190(v66, v67, &v95);
        os_log_t v56 = v90;
        a4 = v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(const char *, uint64_t))(v59 + 8))(v83, v60);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, v85, v65, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(const char *, uint64_t))(v59 + 8))(v62, v60);
      }

      type metadata accessor for InheritanceError(0);
      uint64_t v94 = 3;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100007094((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v77 = v92;
      *uint64_t v92 = v95;
      swift_storeEnumTagMultiPayload();
      a4(v77);
      sub_100006574((uint64_t)v77, v14);
    }
    else
    {
      sub_1000F25B4((uint64_t)v39, (uint64_t)v85, a9);
      uint64_t v68 = v86;
      uint64_t v69 = v87;
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v70 = type metadata accessor for Logger();
      sub_100007288(v70, (uint64_t)qword_10033E760);
      os_log_type_t v71 = v84;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v84, a3, v69);
      unsigned long long v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v83 = a10;
        unint64_t v74 = (uint8_t *)swift_slowAlloc();
        uint64_t v95 = swift_slowAlloc();
        *(_DWORD *)unint64_t v74 = 136315138;
        sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v94 = sub_100135190(v75, v76, &v95);
        os_log_t v56 = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v84, v69);
        _os_log_impl((void *)&_mh_execute_header, v72, v73, v83, v74, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v68 + 8))(v71, v69);
      }

      uint64_t v78 = v82;
      uint64_t v79 = v85;
      id v80 = v92;
      sub_1000F2334((uint64_t)v85, (uint64_t)v92, a9);
      swift_storeEnumTagMultiPayload();
      v78(v80);
      sub_100006574((uint64_t)v80, v89);
      sub_1000F239C((uint64_t)v79, a9);
    }
    uint64_t v54 = (uint64_t)v56;
    uint64_t v55 = v88;
  }
  return sub_100006574(v54, v55);
}

uint64_t sub_1000EB800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E760);
  sub_1000F2334(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v21 = v3;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    *(_DWORD *)uint64_t v15 = 136315138;
    type metadata accessor for UUID();
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v24 = sub_100135190(v16, v17, &v25);
    a2 = v22;
    a3 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v21;
    swift_bridgeObjectRelease();
    sub_1000F239C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Saving BenefactorInfoRecord with beneficiaryID - %s...", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000F239C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }

  sub_100008EF8((void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  swift_retain();
  sub_1002699EC(a1, (uint64_t)sub_1000F13F4, v18);
  return swift_release();
}

uint64_t sub_1000EBAF8(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100325860);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  os_log_type_t v14 = (void *)((char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12, v15);
  unint64_t v17 = (void *)((char *)v31 - v16);
  sub_100019730(a1, (uint64_t)v31 - v16, (uint64_t *)&unk_100325860);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v31[1] = a3;
      uint64_t v32 = v18;
      uint64_t v33 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      v31[0] = v22 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v32 = sub_100135190(v24, v25, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error saving BenefactorInfoRecord : %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *os_log_type_t v14 = v18;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v14);
    swift_errorRelease();
    return sub_100006574((uint64_t)v14, (uint64_t *)&unk_100325860);
  }
  else
  {
    sub_1000F25B4((uint64_t)v17, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E760);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Successfully saved BenefactorInfoRecord.", v29, 2u);
      swift_slowDealloc();
    }

    [self postInheritanceContactChangedNotification];
    sub_1000F2334((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    swift_storeEnumTagMultiPayload();
    a2(v14);
    sub_100006574((uint64_t)v14, (uint64_t *)&unk_100325860);
    return sub_1000F239C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
}

uint64_t sub_1000EBF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v37 = a3;
  uint64_t v7 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v11 = __chkstk_darwin(v7 - 8, v10);
  uint64_t v36 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  os_log_type_t v14 = (char *)&v32 - v13;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E760);
  sub_1000F2334(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v33 = v3;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v34 = a2;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v35 = a1;
    uint64_t v39 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v32 = v19 + 4;
    type metadata accessor for UUID();
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v4 = v33;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = sub_100135190(v21, v22, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000F239C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Deleting BenefactorInfoRecord with beneficiaryID - %s...", v19, 0xCu);
    swift_arrayDestroy();
    a1 = v35;
    swift_slowDealloc();
    a2 = v34;
    swift_slowDealloc();
  }
  else
  {
    sub_1000F239C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }

  uint64_t v23 = sub_100008EF8((void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  uint64_t v24 = swift_allocObject();
  uint64_t v26 = (uint64_t)v36;
  uint64_t v25 = v37;
  *(void *)(v24 + 16) = a2;
  *(void *)(v24 + 24) = v25;
  uint64_t v27 = *v23;
  sub_1000F2334(a1, v26, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  unint64_t v28 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v27;
  sub_1000F25B4(v26, v29 + v28, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v30 = (uint64_t (**)(uint64_t))(v29 + ((v9 + v28 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v30 = sub_1000F124C;
  v30[1] = (uint64_t (*)(uint64_t))v24;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1001D4600(a1, (uint64_t)sub_1000F13C8, v29);
  swift_release();
  return swift_release();
}

uint64_t sub_1000EC348(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, const char *a4, const char *a5)
{
  uint64_t v36 = a4;
  uint64_t v37 = a3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100009F04(&qword_1003229D0);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  os_log_type_t v17 = (void *)((char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (void *)((char *)v35 - v19);
  sub_100019730(a1, (uint64_t)v35 - v19, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = *v20;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v38 = v21;
      uint64_t v39 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      v35[1] = v25 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v38 = sub_100135190(v27, v28, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, v36, v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *os_log_type_t v17 = v21;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v17);
    swift_errorRelease();
    return sub_100006574((uint64_t)v17, &qword_1003229D0);
  }
  else
  {
    uint64_t v29 = a2;
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v12, v20, v8);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E760);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, a5, v33, 2u);
      swift_slowDealloc();
    }

    [self postInheritanceContactChangedNotification];
    (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(v17, v12, v8);
    swift_storeEnumTagMultiPayload();
    v29(v17);
    sub_100006574((uint64_t)v17, &qword_1003229D0);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

uint64_t sub_1000EC7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v23 - v13;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E760);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetching stored InheritanceHealthRecords...", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = sub_100008EF8((void *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v11, v6);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  sub_100008EF8((void *)(*v19 + 16), *(void *)(*v19 + 40));
  swift_retain();
  sub_1000B380C((uint64_t)v14, (uint64_t)sub_1000F121C, v21);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v6);
}

uint64_t sub_1000ECA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v51 = a3;
  uint64_t v49 = a2;
  uint64_t v52 = type metadata accessor for URL();
  uint64_t v6 = *(void **)(v52 - 8);
  uint64_t v8 = __chkstk_darwin(v52, v7);
  uint64_t v46 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v50 = (char *)&v41 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v47 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v16;
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v41 - v18;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100007288(v20, (uint64_t)qword_10033E760);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v48 = a1;
  uint64_t v44 = v21;
  v21(v19, a1, v12);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v42 = v3;
    uint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v43 = v6;
    uint64_t v54 = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    uint64_t v41 = v25 + 4;
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v53 = sub_100135190(v27, v28, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Fetching stored InheritanceHealthRecord with beneficiaryID: %s...", v25, 0xCu);
    swift_arrayDestroy();
    uint64_t v6 = v43;
    swift_slowDealloc();
    uint64_t v4 = v42;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  }

  uint64_t v29 = v12;
  uint64_t v43 = sub_100008EF8((void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  type metadata accessor for LocalCache();
  uint64_t v30 = v46;
  sub_10000A280();
  uint64_t v31 = (uint64_t)v50;
  URL.appendingPathComponent(_:isDirectory:)();
  os_log_type_t v32 = (void (*)(char *, uint64_t))v6[1];
  uint64_t v33 = v52;
  v32(v30, v52);
  uint64_t v34 = v47;
  v44(v47, v48, v29);
  unint64_t v35 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v36 = (v45 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v37 + v35, v34, v29);
  uint64_t v38 = (void *)(v37 + v36);
  uint64_t v39 = v51;
  *uint64_t v38 = v49;
  v38[1] = v39;
  sub_100008EF8((void *)(*v43 + 16), *(void *)(*v43 + 40));
  swift_retain();
  sub_1000B380C(v31, (uint64_t)sub_1000F111C, v37);
  swift_release();
  return ((uint64_t (*)(uint64_t, uint64_t))v32)(v31, v33);
}

uint64_t sub_1000ECF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for InheritanceHealthRecord();
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E760);
  sub_1000F2334(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v21 = v3;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    *(_DWORD *)uint64_t v15 = 136315138;
    type metadata accessor for UUID();
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v24 = sub_100135190(v16, v17, &v25);
    a2 = v22;
    a3 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v21;
    swift_bridgeObjectRelease();
    sub_1000F239C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Saving BenefactorInfoRecord with beneficiaryID - %s...", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000F239C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }

  sub_100008EF8((void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  swift_retain();
  sub_100269BB8(a1, (uint64_t)sub_1000F1110, v18);
  return swift_release();
}

uint64_t sub_1000ED224(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InheritanceHealthRecord();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_10032B730);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  os_log_type_t v14 = (void *)((char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12, v15);
  unint64_t v17 = (void *)((char *)v31 - v16);
  sub_100019730(a1, (uint64_t)v31 - v16, &qword_10032B730);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v31[1] = a3;
      uint64_t v32 = v18;
      uint64_t v33 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      v31[0] = v22 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v32 = sub_100135190(v24, v25, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error saving InheritanceHealthRecord : %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *os_log_type_t v14 = v18;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v14);
    swift_errorRelease();
    return sub_100006574((uint64_t)v14, &qword_10032B730);
  }
  else
  {
    sub_1000F25B4((uint64_t)v17, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E760);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Successfully saved InheritanceHealthRecord.", v29, 2u);
      swift_slowDealloc();
    }

    sub_1000F2334((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    swift_storeEnumTagMultiPayload();
    a2(v14);
    sub_100006574((uint64_t)v14, &qword_10032B730);
    return sub_1000F239C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }
}

uint64_t sub_1000ED66C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v37 = a3;
  uint64_t v7 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v11 = __chkstk_darwin(v7 - 8, v10);
  unint64_t v36 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  os_log_type_t v14 = (char *)&v32 - v13;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E760);
  sub_1000F2334(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v33 = v3;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v34 = a2;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v35 = a1;
    uint64_t v39 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v32 = v19 + 4;
    type metadata accessor for UUID();
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v4 = v33;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = sub_100135190(v21, v22, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000F239C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Deleting InheritanceHealthRecord with beneficiaryID - %s...", v19, 0xCu);
    swift_arrayDestroy();
    a1 = v35;
    swift_slowDealloc();
    a2 = v34;
    swift_slowDealloc();
  }
  else
  {
    sub_1000F239C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }

  uint64_t v23 = sub_100008EF8((void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  uint64_t v24 = swift_allocObject();
  uint64_t v26 = (uint64_t)v36;
  uint64_t v25 = v37;
  *(void *)(v24 + 16) = a2;
  *(void *)(v24 + 24) = v25;
  uint64_t v27 = *v23;
  sub_1000F2334(a1, v26, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  unint64_t v28 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v27;
  sub_1000F25B4(v26, v29 + v28, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  uint64_t v30 = (uint64_t (**)(uint64_t))(v29 + ((v9 + v28 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v30 = sub_1000F05A0;
  v30[1] = (uint64_t (*)(uint64_t))v24;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1001D48E8(a1, (uint64_t)sub_1000F0738, v29);
  swift_release();
  return swift_release();
}

uint64_t sub_1000EDA5C(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_1003229D0);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (uint64_t *)((char *)&v32 - v17);
  sub_100019730(a1, (uint64_t)&v32 - v17, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v32 = a3;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = v19;
      uint64_t v35 = v24;
      uint64_t v33 = a2;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v34 = sub_100135190(v25, v26, &v35);
      a2 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error deleting InheritanceHealthRecord : %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *uint64_t v15 = v19;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v15);
    swift_errorRelease();
    return sub_100006574((uint64_t)v15, &qword_1003229D0);
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v10, v18, v6);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E760);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully deleted InheritanceHealthRecord.", v30, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(v15, v10, v6);
    swift_storeEnumTagMultiPayload();
    a2(v15);
    sub_100006574((uint64_t)v15, &qword_1003229D0);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1000EDEE0(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v15 = String.init<A>(describing:)();
      sub_100135190(v15, v16, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error fetching manatee status : %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
    }

    swift_errorRetain();
    a3(a1, 1);
    sub_100080A98(a1, 1);
    return sub_100080A98(a1, 1);
  }
  else
  {
    uint64_t v5 = a1 & 1;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E760);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67109120;
      LODWORD(v17) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Successfully fetched Manatee status - %{BOOL}d.", v9, 8u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(uint64_t, void))a3)(v5, 0);
  }
}

uint64_t sub_1000EE208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v5 = (int *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  os_log_type_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000F2334(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(a2, v8, v9);
  v10(a2 + v5[9], &v8[v5[9]], v9);
  uint64_t v11 = v5[10];
  uint64_t v12 = *(void *)&v8[v11];
  unint64_t v13 = *(void *)&v8[v11 + 8];
  uint64_t v14 = (uint64_t *)(a2 + v11);
  *uint64_t v14 = v12;
  v14[1] = v13;
  uint64_t v15 = v5[7];
  uint64_t v16 = *(void *)&v8[v15];
  uint64_t v17 = *(void *)&v8[v15 + 8];
  uint64_t v18 = (void *)(a2 + v15);
  *uint64_t v18 = v16;
  v18[1] = v17;
  *(void *)(a2 + v5[8]) = 4;
  LOBYTE(v10) = v8[v5[11]];
  sub_100013140(v12, v13);
  swift_bridgeObjectRetain();
  uint64_t result = sub_1000F239C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  *(unsigned char *)(a2 + v5[11]) = (_BYTE)v10;
  return result;
}

uint64_t sub_1000EE36C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for InheritanceInvitationRecord();
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000F2334(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  return sub_10028E1F4((uint64_t)v7, 0, 0, 4, 0, 2, a2);
}

uint64_t sub_1000EE420()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100008EA8(v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController);

  return swift_deallocClassInstance();
}

uint64_t sub_1000EE4D4()
{
  return type metadata accessor for InheritanceStorageController();
}

uint64_t type metadata accessor for InheritanceStorageController()
{
  uint64_t result = qword_1003266C0;
  if (!qword_1003266C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000EE528()
{
  sub_1000A7C50();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1000EE5C0(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_1000EE684, 0, 0);
}

uint64_t sub_1000EE684()
{
  sub_100008EF8((void *)(v0[6] + 56), *(void *)(v0[6] + 80));
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100326868 + dword_100326868);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[10] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000EE740;
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  return v5(v2, v3);
}

uint64_t sub_1000EE740()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000EE87C, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000EE87C()
{
  *(void *)(v0 + 16) = *(void *)(v0 + 88);
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  type metadata accessor for CKError(0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    uint64_t v1 = *(void **)(v0 + 24);
    *(void *)(v0 + 96) = v1;
    if (sub_1001A84E4(v1))
    {
      uint64_t v2 = (int8x16_t *)swift_task_alloc();
      *(void *)(v0 + 104) = v2;
      v2[1] = vextq_s8(*(int8x16_t *)(v0 + 40), *(int8x16_t *)(v0 + 40), 8uLL);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_1000EEA4C;
      uint64_t v4 = *(void *)(v0 + 72);
      uint64_t v5 = *(void *)(v0 + 56);
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x3A5F286863746566, 0xE900000000000029, sub_1000F17C4, v2, v5);
    }
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1000EEA4C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000EEC00;
  }
  else
  {
    (*(void (**)(void, void))(v2[8] + 8))(v2[9], v2[7]);
    swift_task_dealloc();
    uint64_t v3 = sub_1000EEB84;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000EEB84()
{
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EEC00()
{
  swift_task_dealloc();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EEC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100009F04(&qword_100326870);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  sub_100232300(a3, (uint64_t)sub_1000F1860, v11);
  return swift_release();
}

uint64_t sub_1000EEDD8(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = type metadata accessor for BenefactorInfoRecord();
  v3[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000EEECC, 0, 0);
}

uint64_t sub_1000EEECC()
{
  uint64_t v40 = v0;
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(*(void *)(v0 + 40) + *(int *)(*(void *)(v0 + 80) + 36)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v1 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v1 = &qword_10033EA18;
  }
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  id v5 = sub_10028CC20(v4, v3);
  id v6 = [v5 privateCloudDatabase];
  *(void *)(v0 + 96) = v6;

  swift_bridgeObjectRelease();
  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = sub_10028CFBC(v7, v8);
  *(void *)(v0 + 104) = v9;
  swift_bridgeObjectRelease();
  sub_1000F18D4();
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  uint64_t v13 = v9;
  v14._countAndFlagsBits = v10;
  v14._object = v12;
  v15.super.Class isa = CKRecordID.init(recordName:zoneID:)(v14, (CKRecordZoneID)v13).super.isa;
  *(CKRecordID *)(v0 + 112) = v15;
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v16 = *(void *)(v0 + 88);
  uint64_t v17 = *(void *)(v0 + 40);
  uint64_t v18 = type metadata accessor for Logger();
  sub_100007288(v18, (uint64_t)qword_10033E718);
  sub_1000F2334(v17, v16, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v22 = *(void *)(v0 + 88);
  if (v21)
  {
    os_log_type_t type = v20;
    Class isa = v15.super.isa;
    uint64_t v24 = *(void *)(v0 + 64);
    uint64_t v23 = *(void *)(v0 + 72);
    uint64_t v25 = *(void *)(v0 + 56);
    id v38 = v6;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315394;
    *(void *)(v0 + 16) = sub_100135190(0xD000000000000014, 0x800000010029B150, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v26 + 12) = 2080;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v22 + *(int *)(v2 + 28), v25);
    sub_1000F239C(v22, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v29 = v28;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    v15.super.Class isa = isa;
    *(void *)(v0 + 24) = sub_100135190(v27, v29, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, type, "%s recordID:%s one-off record fetch", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v6 = v38;
    swift_slowDealloc();
  }
  else
  {
    sub_1000F239C(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }

  uint64_t v30 = swift_task_alloc();
  *(void *)(v0 + 120) = v30;
  long long v31 = *(_OWORD *)(v0 + 40);
  *(void *)(v30 + 16) = v6;
  *(CKRecordID *)(v30 + 24) = v15;
  *(_OWORD *)(v30 + 32) = v31;
  uint64_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v32;
  *uint64_t v32 = v0;
  v32[1] = sub_1000EF3E4;
  uint64_t v33 = *(void *)(v0 + 80);
  uint64_t v34 = *(void *)(v0 + 32);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v34, 0, 0, 0x3A5F286863746566, 0xE900000000000029, sub_1000F1914, v30, v33);
}

uint64_t sub_1000EF3E4()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000EF58C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1000EF500;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000EF500()
{
  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = *(void **)(v0 + 96);

  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000EF58C()
{
  uint64_t v2 = *(void **)(v0 + 96);
  uint64_t v1 = *(void **)(v0 + 104);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void sub_1000EF62C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v24 = a2;
  uint64_t v7 = sub_100009F04(&qword_100326878);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  uint64_t v11 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8, v15);
  sub_1000F2334(a4, (uint64_t)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + *(unsigned __int8 *)(v8 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v18 = (v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  sub_1000F25B4((uint64_t)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v16, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v19 + v17, v11, v7);
  os_log_type_t v20 = v24;
  *(void *)(v19 + v18) = v25;
  *(void *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8)) = v20;
  aBlock[4] = sub_1000F1B04;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  void aBlock[3] = &unk_1002FB258;
  BOOL v21 = _Block_copy(aBlock);
  swift_retain();
  id v22 = v20;
  swift_release();
  [v22 fetchRecordWithID:v26 completionHandler:v21];
  _Block_release(v21);
}

uint64_t sub_1000EF8D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v93 = a4;
  uint64_t v11 = sub_100009F04(&qword_1003235E8);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v91 = *(void *)(v15 - 8);
  uint64_t v92 = v15;
  __chkstk_darwin(v15, v16);
  uint64_t v90 = (char *)v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v23 = __chkstk_darwin(v21, v22);
  uint64_t v25 = (char *)v79 - v24;
  uint64_t v27 = __chkstk_darwin(v23, v26);
  unint64_t v29 = (char *)v79 - v28;
  uint64_t v31 = __chkstk_darwin(v27, v30);
  uint64_t result = __chkstk_darwin(v31, v32);
  uint64_t v37 = (char *)v79 - v36;
  if (a2)
  {
    uint64_t v38 = result;
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100007288(v39, (uint64_t)qword_10033E718);
    sub_1000F2334(a3, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v88 = (void *)swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      v95[0] = v89;
      *(_DWORD *)uint64_t v42 = 136315650;
      uint64_t v94 = sub_100135190(0xD000000000000014, 0x800000010029B150, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2080;
      uint64_t v87 = v42 + 14;
      uint64_t v43 = &v37[*(int *)(v38 + 28)];
      uint64_t v44 = v90;
      uint64_t v45 = v91;
      uint64_t v46 = v92;
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v90, v43, v92);
      sub_1000F239C((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v49 = v48;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v46);
      uint64_t v94 = sub_100135190(v47, v49, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 22) = 2112;
      swift_errorRetain();
      uint64_t v50 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v94 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v88 = v50;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s recordID:%s one-off record fetch failed %@", (uint8_t *)v42, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000F239C((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    v95[0] = a2;
    sub_100009F04(&qword_100326878);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    uint64_t v88 = a5;
    uint64_t v89 = a6;
    if (a1)
    {
      uint64_t v86 = v34;
      uint64_t v87 = v35;
      int v51 = *(unsigned __int8 *)(a3 + *(int *)(result + 36));
      uint64_t v52 = result;
      id v53 = a1;
      sub_1001BE70C(v53, v51, (uint64_t)v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, v52);
      uint64_t v54 = v87;
      sub_1000F25B4((uint64_t)v14, v87, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v55 = type metadata accessor for Logger();
      sub_100007288(v55, (uint64_t)qword_10033E718);
      sub_1000F2334(a3, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      sub_1000F2334(v54, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      os_log_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.debug.getter();
      int v58 = v57;
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v59 = swift_slowAlloc();
        os_log_t v83 = v56;
        uint64_t v60 = v59;
        uint64_t v84 = swift_slowAlloc();
        v95[0] = v84;
        *(_DWORD *)uint64_t v60 = 136315650;
        int v82 = v58;
        uint64_t v94 = sub_100135190(0xD000000000000014, 0x800000010029B150, v95);
        v79[2] = v95;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v60 + 12) = 2080;
        v79[3] = v60 + 14;
        id v85 = v53;
        uint64_t v61 = v52;
        uint64_t v62 = &v29[*(int *)(v52 + 28)];
        uint64_t v63 = v90;
        uint64_t v64 = v91;
        uint64_t v81 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
        uint64_t v65 = v92;
        v81(v90, v62, v92);
        id v80 = type metadata accessor for BenefactorInfoRecord;
        sub_1000F239C((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        v79[1] = sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v68 = v67;
        uint64_t v91 = *(void *)(v64 + 8);
        ((void (*)(char *, uint64_t))v91)(v63, v65);
        uint64_t v94 = sub_100135190(v66, v68, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 22) = 2080;
        uint64_t v69 = *(int *)(v61 + 28);
        id v53 = v85;
        v81(v63, &v25[v69], v65);
        sub_1000F239C((uint64_t)v25, (uint64_t (*)(void))v80);
        uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v72 = v71;
        ((void (*)(char *, uint64_t))v91)(v63, v65);
        uint64_t v94 = sub_100135190(v70, v72, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v73 = v83;
        _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v82, "%s recordID:%s one-off record fetch success newRecordID: %s", (uint8_t *)v60, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1000F239C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        sub_1000F239C((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      }
      unint64_t v74 = (void *)v89;
      if (sub_100215548())
      {
        sub_100009F04((uint64_t *)&unk_100328470);
        uint64_t v75 = swift_allocObject();
        *(_OWORD *)(v75 + 16) = xmmword_1002AB070;
        *(void *)(v75 + 32) = v53;
        v95[0] = v75;
        specialized Array._endMutation()();
        unint64_t v76 = v95[0];
        id v77 = v53;
        sub_10015AEB8(v74, v76);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      uint64_t v78 = v87;
      sub_1000F2334(v87, v86, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      sub_100009F04(&qword_100326878);
      CheckedContinuation.resume(returning:)();

      return sub_1000F239C(v78, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    }
  }
  return result;
}

void sub_1000F02FC(uint64_t a1, uint64_t a2)
{
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E760);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Checking manatee status...", v7, 2u);
    swift_slowDealloc();
  }

  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = qword_100320CC8;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  if (qword_100320CD8 != -1) {
    swift_once();
  }
  id v10 = sub_10028CC20(qword_10033EA08, unk_10033EA10);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1000F058C;
  *(void *)(v11 + 24) = v8;
  v13[4] = sub_1000F0598;
  v13[5] = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10004DAE8;
  v13[3] = &unk_1002FB028;
  uint64_t v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [v10 accountInfoWithCompletionHandler:v12];
  _Block_release(v12);
  swift_release();
}

uint64_t sub_1000F0554()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F058C(uint64_t a1, char a2)
{
  return sub_1000EDEE0(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

void sub_1000F0598(void *a1, uint64_t a2)
{
  sub_100216084(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1000F05A0(uint64_t a1)
{
  return sub_1000EDA5C(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000F05A8()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + v1[7];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  sub_100013198(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000F0738(uint64_t a1)
{
  return sub_1000F2648(a1, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002312E0);
}

unint64_t *sub_1000F0764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v8 = __chkstk_darwin(v26, v7);
  uint64_t v27 = (uint64_t)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t result = (unint64_t *)&_swiftEmptyArrayStorage;
  uint64_t v28 = (unint64_t *)&_swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v17 = *(void *)(v11 + 72);
    uint64_t v24 = v3;
    uint64_t v25 = (v16 + 32) & ~v16;
    uint64_t v18 = a1 + v25;
    uint64_t v19 = (unint64_t *)&_swiftEmptyArrayStorage;
    do
    {
      sub_1000F2334(v18, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      if (a3
        && ((v20 = &v13[*(int *)(v26 + 24)], *(void *)v20 == a2) ? (BOOL v21 = *((void *)v20 + 1) == a3) : (BOOL v21 = 0),
            v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        sub_1000F25B4((uint64_t)v13, v27, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100228A74(0, v19[2] + 1, 1);
        }
        uint64_t v19 = v28;
        unint64_t v23 = v28[2];
        unint64_t v22 = v28[3];
        if (v23 >= v22 >> 1)
        {
          sub_100228A74(v22 > 1, v23 + 1, 1);
          uint64_t v19 = v28;
        }
        void v19[2] = v23 + 1;
        sub_1000F25B4(v27, (uint64_t)v19 + v25 + v23 * v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      }
      else
      {
        sub_1000F239C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      }
      v18 += v17;
      --v15;
    }
    while (v15);
    return v28;
  }
  return result;
}

void sub_1000F09BC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, void *a5, void *a6, void *a7, uint64_t a8)
{
  uint64_t v60 = a2;
  uint64_t v64 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v62 = *(void *)(v64 - 8);
  uint64_t v15 = *(void *)(v62 + 64);
  uint64_t v17 = __chkstk_darwin(v64, v16);
  uint64_t v63 = (uint64_t)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v61 = (uint64_t)&v59 - v20;
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v65 = (uint64_t)&v59 - v23;
  __chkstk_darwin(v22, v24);
  uint64_t v66 = (uint64_t)&v59 - v25;
  uint64_t v26 = (void *)swift_allocObject();
  uint64_t v69 = a3;
  uint64_t v70 = a7;
  v26[2] = a3;
  v26[3] = a4;
  v26[4] = a5;
  v26[5] = a6;
  v26[6] = a7;
  v26[7] = a8;
  uint64_t v27 = qword_100320B90;
  swift_retain();
  id v68 = a5;
  id v67 = a6;
  swift_bridgeObjectRetain();
  if (v27 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_100007288(v28, (uint64_t)qword_10033E760);
  unint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Changing CK record status to declined...", v31, 2u);
    swift_slowDealloc();
  }

  uint64_t v32 = sub_1000595E8();
  uint64_t v33 = CKRecord.recordType.getter();
  uint64_t v35 = v34;

  if (v33 == 0xD00000000000001FLL && v35 == 0x800000010029B110
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v37))
    {
LABEL_11:

      type metadata accessor for InheritanceError(0);
      uint64_t v71 = 2;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100007094((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v40 = v72;
      sub_1000C8C2C((uint64_t)v72, 1, v69, a4, (uint64_t)v68, v67, (uint64_t)v70, a8);
      swift_release();

      return;
    }
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    uint64_t v39 = "Invalid Record! Failed to change CKRecord trusted contact status to declined.";
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v36, v37, v39, v38, 2u);
    swift_slowDealloc();
    goto LABEL_11;
  }
  if (v33 == 0xD00000000000001BLL && v35 == 0x800000010029B0C0)
  {
    swift_bridgeObjectRelease();
    uint64_t v41 = v66;
  }
  else
  {
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v41 = v66;
    if ((v42 & 1) == 0)
    {
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v36, v37)) {
        goto LABEL_11;
      }
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      uint64_t v39 = "Cannot recognize record type! Failed to change CKRecord trusted contact status to declined.";
      goto LABEL_10;
    }
  }
  uint64_t v43 = v41;
  sub_1000F2334(a1, v41, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  uint64_t v44 = sub_100008EF8((void *)(v60 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v60 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = sub_1000F28E8;
  *(void *)(v45 + 24) = v26;
  uint64_t v46 = *v44;
  uint64_t v70 = sub_100008EF8((void *)(*v44 + 56), *(void *)(*v44 + 80));
  uint64_t v47 = v61;
  sub_1000F2334(v43, v61, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  swift_retain();
  uint64_t v48 = v65;
  sub_10028E1F4(v47, 0, 0, 4, 0, 2, v65);
  uint64_t v49 = v63;
  sub_1000F2334(v43, v63, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  unint64_t v50 = (*(unsigned __int8 *)(v62 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
  int v51 = (void *)swift_allocObject();
  v51[2] = v46;
  uint64_t v51[3] = sub_1000F28FC;
  v51[4] = v45;
  v51[5] = 0;
  sub_1000F25B4(v49, (uint64_t)v51 + v50, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  uint64_t v52 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v51 + ((v15 + v50 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v52 = sub_1000EE36C;
  v52[1] = 0;
  uint64_t v53 = qword_100320CC8;
  swift_retain();
  swift_retain();
  if (v53 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(v48 + *(int *)(v64 + 44)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v54 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v54 = &qword_10033EA18;
  }
  uint64_t v56 = *v54;
  unint64_t v55 = v54[1];
  swift_bridgeObjectRetain();
  id v57 = sub_10028CC20(v56, v55);
  id v58 = [v57 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_100066D54(v48, v58, (uint64_t)sub_1000F2A7C, (uint64_t)v51);
  swift_release();

  sub_1000F239C(v48, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  swift_release();
  sub_1000F239C(v66, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  swift_release();
}

uint64_t sub_1000F1110(uint64_t a1)
{
  return sub_1000ED224(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000F111C(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + v6;
  uint64_t v8 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000EADB0(a1, v4, v7, *(void (**)(uint64_t *))v8, *(void *)(v8 + 8), &qword_10032B730, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, &qword_100323550, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, "Found InheritanceHealthRecord with beneficiaryID: %s", "No InheritanceHealthRecord found with beneficiaryID: %s", "Error fetching InheritanceHealthRecord : %s");
}

uint64_t sub_1000F121C(uint64_t a1, char a2)
{
  return sub_1000E7200(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), "Error fetching InheritanceHealthRecords : %s", "Successfully fetched %ld InheritanceHealthRecords.");
}

uint64_t sub_1000F124C(uint64_t a1)
{
  return sub_1000EC348(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), "Error deleting BenefactorInfoRecord : %s", "Successfully deleted BenefactorInfoRecord.");
}

uint64_t sub_1000F1278()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000F13C8(uint64_t a1)
{
  return sub_1000F2648(a1, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002312C8);
}

uint64_t sub_1000F13F4(uint64_t a1)
{
  return sub_1000EBAF8(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000F1400(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + v6;
  uint64_t v8 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000EADB0(a1, v4, v7, *(void (**)(uint64_t *))v8, *(void *)(v8 + 8), (uint64_t *)&unk_100325860, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, &qword_1003235E8, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, "Found BenefactorInfoRecord with beneficiaryID: %s", "No BenefactorInfoRecord found with beneficiaryID: %s", "Error fetching BenefactorInfoRecord : %s");
}

uint64_t sub_1000F1500(uint64_t a1, char a2)
{
  return sub_1000E7200(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), "Error fetching BenefactorInfoRecords : %s", "Successfully fetched %ld BenefactorInfoRecords.");
}

uint64_t sub_1000F1530()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000F1688(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_100025248;
  return sub_1000EA0E8(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000F17C4(uint64_t a1)
{
  return sub_1000EEC7C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000F17CC()
{
  uint64_t v1 = sub_100009F04(&qword_100326870);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F1860(uint64_t a1)
{
  sub_100009F04(&qword_100326870);

  return sub_10010EC40(a1);
}

unint64_t sub_1000F18D4()
{
  unint64_t result = qword_10032B4B0;
  if (!qword_10032B4B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10032B4B0);
  }
  return result;
}

void sub_1000F1914(uint64_t a1)
{
  sub_1000EF62C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000F1920()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v13 = sub_100009F04(&qword_100326878);
  uint64_t v5 = *(void *)(v13 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6) & ~v6;
  uint64_t v14 = v2 | v6 | 7;
  unint64_t v8 = (((*(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v0 + v3;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  swift_bridgeObjectRelease();
  v11(v9 + v1[9], v10);
  sub_100013198(*(void *)(v9 + v1[10]), *(void *)(v9 + v1[10] + 8));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v13);
  swift_release();

  return _swift_deallocObject(v0, v8 + 8, v14);
}

uint64_t sub_1000F1B04(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_100009F04(&qword_100326878) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void **)(v2 + v10);
  uint64_t v12 = *(void *)(v2 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000EF8D4(a1, a2, v2 + v6, v2 + v9, v11, v12);
}

uint64_t sub_1000F1C24()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

id sub_1000F1CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000E9310(a1, v6, a2);
}

uint64_t sub_1000F1D34(uint64_t a1)
{
  return sub_1000E95B0(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000F1D3C()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1000F1F3C(uint64_t a1)
{
  return sub_1000F2AA8(a1, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))sub_10026BEC4);
}

uint64_t sub_1000F1F68(uint64_t a1)
{
  return sub_1000EC348(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), "Error deleting BeneficiaryInfoRecord : %s", "Successfully deleted BeneficiaryInfoRecord.");
}

uint64_t sub_1000F1F94()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1000F218C(uint64_t a1)
{
  return sub_1000F2648(a1, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100230D94);
}

uint64_t sub_1000F21B8(uint64_t a1)
{
  return sub_1000E83EC(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000F21C4(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + v6;
  uint64_t v8 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000EADB0(a1, v4, v7, *(void (**)(uint64_t *))v8, *(void *)(v8 + 8), &qword_100321CF0, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, &qword_1003235F0, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, "Found BeneficiaryInfoRecord with beneficiaryID: %s", "No BeneficiaryInfoRecord found with beneficiaryID: %s", "Error fetching BeneficiaryInfoRecord : %s");
}

uint64_t sub_1000F22C4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F2304(uint64_t a1, char a2)
{
  return sub_1000E7200(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), "Error fetching BeneficiaryInfoRecords : %s", "Successfully fetched %ld BeneficiaryInfoRecords.");
}

uint64_t sub_1000F2334(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000F239C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000F23FC()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F243C(uint64_t a1)
{
  return sub_1000E6AE8(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000F2444()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000F25B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000F261C(uint64_t a1)
{
  return sub_1000F2648(a1, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100230D7C);
}

uint64_t sub_1000F2648(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = v3 + v6;
  unint64_t v9 = (uint64_t *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return a3(a1, v7, v8, v10, v11);
}

uint64_t sub_1000F2704(uint64_t a1)
{
  return sub_1000E62A0(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000F2710()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000F27B8(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + v6;
  uint64_t v8 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *(uint8_t **)v8;
  uint64_t v10 = *(void *)(v8 + 8);

  return sub_1000E5428(a1, v4, v7, v9, v10);
}

uint64_t sub_1000F2868(uint64_t a1, char a2)
{
  return sub_1000E7200(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), "Error fetching InheritanceInvitationRecords : %s", "Successfully fetched %ld InheritanceInvitationRecords.");
}

uint64_t sub_1000F2898()
{
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1000F28E8(uint64_t a1, char a2)
{
  sub_1000C8C2C(a1, a2 & 1, *(void (**)(uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t sub_1000F28FC(uint64_t a1)
{
  return sub_1000D4534(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000F2904()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000F2A7C(uint64_t a1)
{
  return sub_1000F2AA8(a1, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))sub_10026E228);
}

uint64_t sub_1000F2AA8(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *((void *)v3 + 2);
  uint64_t v9 = *((void *)v3 + 3);
  uint64_t v10 = *((void *)v3 + 4);
  uint64_t v11 = *((void *)v3 + 5);
  uint64_t v12 = *(void *)&v3[v7];
  uint64_t v13 = *(void *)&v3[v7 + 8];

  return a3(a1, v8, v9, v10, v11, &v3[v6], v12, v13);
}

uint64_t sub_1000F2BA8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CustodianRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v12 = __chkstk_darwin(v8 - 8, v11);
  uint64_t v13 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v30 - v15;
  sub_100008A94(v3 + 16, (uint64_t)v32);
  uint64_t v17 = sub_100008EF8(v32, v32[3]);
  sub_10002F4D4(a1, (uint64_t)v16);
  sub_10002F4D4((uint64_t)v16, (uint64_t)v13);
  unint64_t v18 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v19 = (v10 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = a3;
  *(void *)(v20 + 24) = v4;
  sub_10002F79C((uint64_t)v16, v20 + v18);
  *(void *)(v20 + v19) = a2;
  uint64_t v21 = *(void **)(*sub_100008EF8((void *)(*v17 + 16), *(void *)(*v17 + 40)) + 16);
  swift_retain_n();
  id v22 = [v21 aa_primaryAppleAccount];
  if (v22)
  {
    uint64_t v23 = v22;
    sub_10002CF38(a1, v22, (uint64_t)sub_1000F3E3C, v20);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E700);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Not logged in to AppleAccount, unable to perform cleanup", v27, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    v30[1] = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10004A318();
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v28 = v31;
    sub_1000F2ED0((uint64_t)v31, a3 & 1, v4, (uint64_t)v13, a2);
    swift_release();
    swift_release();
  }
  sub_1000F4530((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  return sub_100008EA8((uint64_t)v32);
}

uint64_t sub_1000F2ED0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E700);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v10, v11))
  {
    swift_errorRelease();
    swift_errorRelease();

    if ((a2 & 1) == 0) {
      return sub_1000F3608();
    }
    goto LABEL_10;
  }
  uint64_t v17 = a4;
  uint64_t v12 = a5;
  uint64_t v13 = (uint8_t *)swift_slowAlloc();
  uint64_t v14 = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v13 = 138412290;
  if (a1)
  {
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
  }
  else
  {
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v15 = 0;
  }
  *uint64_t v14 = v15;
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error cleaning up declined custodians %@", v13, 0xCu);
  sub_100009F04((uint64_t *)&unk_1003216C0);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  a5 = v12;
  a4 = v17;
  if (a2) {
LABEL_10:
  }
    sub_1000F3114(a4, a5);
  return sub_1000F3608();
}

uint64_t sub_1000F3114(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a1;
  uint64_t v3 = type metadata accessor for CustodianRecord();
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v39 + 64);
  __chkstk_darwin(v3 - 8, v5);
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_100322CE0);
  uint64_t v40 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TrustedContactUserNotification();
  uint64_t result = __chkstk_darwin(v15, v16);
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)&v33 - v19;
  if (a2 == 2)
  {
    uint64_t v37 = v4;
    uint64_t v38 = (uint64_t)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v35 = *(void (**)(char *))(v7 + 16);
    uint64_t v36 = v42 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__cdpRequestController;
    v35(v10);
    Dependency.wrappedValue.getter();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21(v10, v6);
    id v22 = *(void **)(*sub_100008EF8(&v44, v45) + 16);
    v43[0] = 0;
    id v23 = [v22 walrusStatus:v43];
    if (v43[0])
    {
      id v24 = v43[0];
      swift_willThrow();

      sub_100008EA8((uint64_t)&v44);
    }
    else
    {
      uint64_t v34 = v21;
      id v25 = v23;
      sub_100008EA8((uint64_t)&v44);
      if (v25 == (id)1)
      {
        uint64_t v26 = v38;
        sub_10002F4D4(v41, v38);
        unint64_t v27 = (*(unsigned __int8 *)(v39 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
        unint64_t v28 = (v37 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v29 = swift_allocObject();
        sub_10002F79C(v26, v29 + v27);
        uint64_t v30 = v42;
        *(void *)(v29 + v28) = v42;
        ((void (*)(char *, uint64_t, uint64_t))v35)(v10, v36, v6);
        swift_retain();
        Dependency.wrappedValue.getter();
        v34(v10, v6);
        uint64_t v31 = *sub_100008EF8(&v44, v45);
        swift_retain();
        swift_retain();
        sub_100057554(v31, (uint64_t (*)(uint64_t, void))sub_1000F478C, v29, v30);
        swift_release();
        swift_release();
        sub_100008EA8((uint64_t)&v44);
        return swift_release();
      }
    }
    sub_10002F4D4(v41, (uint64_t)v20);
  }
  else
  {
    if (a2 != 1) {
      return result;
    }
    sub_10002F4D4(v41, (uint64_t)&v33 - v19);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v14, v42 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__notificationManager, v11);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v11);
  sub_100008EF8(v43, (uint64_t)v43[3]);
  sub_1001C1B88((uint64_t)&v44);
  sub_10024F5C4(&v44, 0, 0);
  sub_10004CF70((uint64_t)&v44);
  sub_1000F4530((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for TrustedContactUserNotification);
  return sub_100008EA8((uint64_t)v43);
}

uint64_t sub_1000F3608()
{
  uint64_t v1 = sub_100009F04(&qword_100325870);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v21[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__accountStore, v1);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  id v6 = [*(id *)(*sub_100008EF8(v21, v21[3]) + 16) aa_primaryAppleAccount];
  if (v6 && (uint64_t v7 = v6, v8 = objc_msgSend(v6, "aa_altDSID"), v7, v8))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v10)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  id v13 = [self analyticsEventWithName:v11 altDSID:v12 flowID:0];

  uint64_t result = sub_100008EA8((uint64_t)v21);
  if (v13)
  {
    id v15 = v13;
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    [v15 setObject:isa forKeyedSubscript:kAAFDidSucceed];

    id v17 = objc_allocWithZone((Class)type metadata accessor for AnalyticsRTCReporter());
    id v18 = v15;
    id v19 = [v17 init];
    [objc_msgSend(self, "reporter") sendEvent:v18];

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000F38C0()
{
  sub_100008EA8(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__notificationManager;
  uint64_t v4 = sub_100009F04(&qword_100322CE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__cdpRequestController;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_1003228A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__custodianStorageController;
  uint64_t v8 = sub_100009F04(&qword_100321FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return swift_deallocClassInstance();
}

uint64_t sub_1000F3A44()
{
  return type metadata accessor for DeclinedStatusHandler();
}

uint64_t type metadata accessor for DeclinedStatusHandler()
{
  uint64_t result = qword_1003268C8;
  if (!qword_1003268C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000F3A98()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_100322C50, (uint64_t *)&unk_10032ACA0);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, qword_100327FA0, (uint64_t *)&unk_100321910);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, (unint64_t *)&qword_100327F30, &qword_100322470);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t sub_1000F3C24(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1000F2BA8(a1, a2, a3);
}

uint64_t sub_1000F3C48()
{
  unint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1000F3E3C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000F2ED0(a1, v5, v6, v1 + v4, v7);
}

uint64_t sub_1000F3EE0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100009F04(&qword_100322CE0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v19[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TrustedContactUserNotification();
  uint64_t result = __chkstk_darwin(v12, v13);
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v17 = (char *)&v19[-1] - v16;
  if ((a2 & 1) == 0)
  {
    sub_10002F4D4(a3, (uint64_t)&v19[-1] - v16);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a4 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__notificationManager, v7);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    sub_100008EF8(v19, v19[3]);
    sub_1001C1B88((uint64_t)v20);
    sub_10024F5C4(v20, 0, 0);
    sub_10004CF70((uint64_t)v20);
    sub_1000F4530((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for TrustedContactUserNotification);
    return sub_100008EA8((uint64_t)v19);
  }
  return result;
}

uint64_t sub_1000F40D4(char a1, uint64_t (*a2)(uint64_t, void), uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a2;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v27[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v27[-1] - v14;
  uint64_t v16 = sub_100009F04(&qword_100321FF8);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v27[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1) {
    return v26(1, 0);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a4 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__custodianStorageController, v16);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  id v22 = sub_100008EF8(v27, v27[3]);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v26;
  *(void *)(v23 + 24) = a3;
  id v24 = sub_100008EF8((void *)(*v22 + 16), *(void *)(*v22 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  id v25 = *(void (**)(char *, uint64_t))(v8 + 8);
  v25(v12, v7);
  sub_100008EF8((void *)(*v24 + 16), *(void *)(*v24 + 40));
  sub_1000B3744((uint64_t)v15, (uint64_t)sub_1000F4870, v23);
  v25(v15, v7);
  swift_release();
  return sub_100008EA8((uint64_t)v27);
}

uint64_t sub_1000F43AC(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = a2 & 1;
  uint64_t v7 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v7, v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      uint64_t v14 = *(void *)(v9 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_10002F4D4(v13, (uint64_t)v11);
        uint64_t v15 = *(void *)&v11[*(int *)(v7 + 36)];
        sub_1000F4530((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        if (v15 == 2) {
          break;
        }
        v13 += v14;
        if (!--v12)
        {
          sub_100007844(a1, 0);
          goto LABEL_8;
        }
      }
      sub_100007844(a1, 0);
      a1 = 1;
    }
    else
    {
LABEL_8:
      a1 = 0;
    }
  }
  a3(a1, v6);
  return sub_100080A98(a1, v6);
}

uint64_t sub_1000F4530(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000F4590()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1000F478C(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000F3EE0(a1, v4, v2 + v6, v7);
}

uint64_t sub_1000F4838()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F4870(uint64_t a1, char a2)
{
  return sub_1000F43AC(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1000F487C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v48 = a5;
  unint64_t v49 = a4;
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  uint64_t v41 = a6;
  uint64_t v7 = type metadata accessor for P384.KeyAgreement.PublicKey();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v46 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v43 = type metadata accessor for HPKE.Sender();
  uint64_t v47 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v15);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for HPKE.Ciphersuite();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  uint64_t v26 = (char *)&v40 - v25;
  static HPKE.Ciphersuite.P384_SHA384_AES_GCM_256.getter();
  uint64_t v42 = v8;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v48, v7);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v23, v26, v18);
  sub_100013140(a3, v49);
  uint64_t v48 = v17;
  unint64_t v27 = v7;
  uint64_t v28 = v53;
  HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
  if (v28) {
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v26, v18);
  }
  uint64_t v30 = v44;
  uint64_t v31 = v45;
  uint64_t v53 = v18;
  uint64_t v32 = v43;
  uint64_t v51 = HPKE.Sender.encapsulatedKey.getter();
  uint64_t v52 = v33;
  uint64_t v34 = v46;
  P384.KeyAgreement.PublicKey.init<A>(x963Representation:)();
  unint64_t v49 = v27;
  uint64_t v51 = v30;
  uint64_t v52 = v31;
  long long v50 = xmmword_1002A9C60;
  sub_1000F4C68();
  uint64_t v35 = HPKE.Sender.seal<A, B>(_:authenticating:)();
  uint64_t v37 = v36;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v32);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v53);
  uint64_t v38 = type metadata accessor for HPKEEnvelope();
  uint64_t v39 = v41;
  uint64_t result = (*(uint64_t (**)(char *, char *, unint64_t))(v42 + 32))((char *)v41 + *(int *)(v38 + 20), v34, v49);
  *uint64_t v39 = v35;
  v39[1] = v37;
  return result;
}

unint64_t sub_1000F4C68()
{
  unint64_t result = qword_100326A50;
  if (!qword_100326A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326A50);
  }
  return result;
}

uint64_t type metadata accessor for HPKEEnvelope()
{
  uint64_t result = qword_100326AB0;
  if (!qword_100326AB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_1000F4D08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100013140(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for P384.KeyAgreement.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_1000F4DF0(uint64_t a1, uint64_t a2)
{
  sub_100013198(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for P384.KeyAgreement.PublicKey();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_1000F4E6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100013140(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_1000F4F04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100013140(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100013198(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_1000F4FA4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_1000F5020(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100013198(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000F50B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F50C4);
}

uint64_t sub_1000F50C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for P384.KeyAgreement.PublicKey();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000F5180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F5194);
}

void *sub_1000F5194(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for P384.KeyAgreement.PublicKey();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000F5244()
{
  uint64_t result = type metadata accessor for P384.KeyAgreement.PublicKey();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000F52DC()
{
  if (*v0) {
    return 0x6C75737061636E65;
  }
  else {
    return 0x6554726568706963;
  }
}

uint64_t sub_1000F5328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000F5C28(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000F5350(uint64_t a1)
{
  unint64_t v2 = sub_1000F5908();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F538C(uint64_t a1)
{
  unint64_t v2 = sub_1000F5908();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F53C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v4 = type metadata accessor for P384.KeyAgreement.PublicKey();
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04(&qword_100326AE8);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for HPKEEnvelope();
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  uint64_t v31 = a1;
  sub_100008EF8(a1, v16);
  sub_1000F5908();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100008EA8((uint64_t)v31);
  }
  uint64_t v26 = v15;
  uint64_t v17 = v29;
  char v34 = 0;
  sub_1000130EC();
  uint64_t v18 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v19 = v33;
  uint64_t v20 = v26;
  v25[0] = v33;
  v25[1] = v32;
  void *v26 = v32;
  v20[1] = v19;
  char v34 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v21 = v32;
  unint64_t v22 = v33;
  sub_100013140(v32, v33);
  sub_1000A3B90();
  P384.KeyAgreement.PublicKey.init<A>(derRepresentation:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v18);
  sub_100013198(v21, v22);
  uint64_t v23 = (uint64_t)v26;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))((char *)v26 + *(int *)(v12 + 20), v7, v4);
  sub_1000F595C(v23, v28);
  sub_100008EA8((uint64_t)v31);
  return sub_1000F59C0(v23);
}

uint64_t sub_1000F5724(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_100326AF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1000F5908();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v16 = *v3;
  char v15 = 0;
  sub_1000131F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for HPKEEnvelope();
    uint64_t v10 = P384.KeyAgreement.PublicKey.derRepresentation.getter();
    unint64_t v12 = v11;
    *(void *)&long long v16 = v10;
    *((void *)&v16 + 1) = v11;
    char v15 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_100013198(v10, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000F58D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F53C8(a1, a2);
}

uint64_t sub_1000F58F0(void *a1)
{
  return sub_1000F5724(a1);
}

unint64_t sub_1000F5908()
{
  unint64_t result = qword_100326AF0;
  if (!qword_100326AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326AF0);
  }
  return result;
}

uint64_t sub_1000F595C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HPKEEnvelope();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F59C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HPKEEnvelope();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for HPKEEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F5AE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKEEnvelope.CodingKeys()
{
  return &type metadata for HPKEEnvelope.CodingKeys;
}

unint64_t sub_1000F5B24()
{
  unint64_t result = qword_100326B00;
  if (!qword_100326B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326B00);
  }
  return result;
}

unint64_t sub_1000F5B7C()
{
  unint64_t result = qword_100326B08;
  if (!qword_100326B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326B08);
  }
  return result;
}

unint64_t sub_1000F5BD4()
{
  unint64_t result = qword_100326B10;
  if (!qword_100326B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326B10);
  }
  return result;
}

uint64_t sub_1000F5C28(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6554726568706963 && a2 == 0xEA00000000007478;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C75737061636E65 && a2 == 0xEF79654B64657461)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000F5D4C()
{
  type metadata accessor for BeneficiaryHealthCheck();
  sub_100009F04(&qword_100326C60);
  uint64_t result = String.init<A>(describing:)();
  qword_100326B18 = result;
  unk_100326B20 = v1;
  return result;
}

void sub_1000F5D98(uint64_t a1, char a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  id v85 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for DispatchQoS();
  uint64_t v84 = *(void *)(v86 - 8);
  __chkstk_darwin(v86, v15);
  os_log_t v83 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v81 = *(void *)(v17 - 8);
  uint64_t v82 = v17;
  __chkstk_darwin(v17, v18);
  id v80 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v21 = (void *)Strong;
    if (a2)
    {
      swift_errorRetain();
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      uint64_t v37 = sub_100007288(v36, (uint64_t)qword_10033E778);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v86 = v37;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v78 = a5;
        uint64_t v79 = a4;
        uint64_t v40 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136315394;
        uint64_t v88 = (void *)a1;
        swift_errorRetain();
        sub_100009F04((uint64_t *)&unk_100325850);
        uint64_t v41 = String.init<A>(describing:)();
        uint64_t v88 = (void *)sub_100135190(v41, v42, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100007844(a1, 1);
        sub_100007844(a1, 1);
        *(_WORD *)(v40 + 12) = 2080;
        if (qword_100320C30 != -1) {
          swift_once();
        }
        uint64_t v44 = qword_100326B18;
        unint64_t v43 = unk_100326B20;
        swift_bridgeObjectRetain();
        uint64_t v88 = (void *)sub_100135190(v44, v43, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Fetching beneficiaries error: %s. Aborting %s", (uint8_t *)v40, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        a4 = v79;
      }
      else
      {
        sub_100007844(a1, 1);
        sub_100007844(a1, 1);
      }
      if (*(void *)(*(void *)((char *)v21
                                 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData)
                     + 16))
      {
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v47 = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "idMS has MORE number of beneficiaries registered.", v47, 2u);
          swift_slowDealloc();
        }
      }
      swift_errorRetain();
      a4(a1);
      swift_release();
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
    }
    else
    {
      uint64_t v77 = v12;
      uint64_t v22 = *(void *)(a1 + 16);
      if (v22)
      {
        uint64_t v76 = v11;
        if (qword_100320B98 != -1) {
          swift_once();
        }
        uint64_t v78 = a5;
        uint64_t v23 = type metadata accessor for Logger();
        sub_100007288(v23, (uint64_t)qword_10033E778);
        swift_bridgeObjectRetain();
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.info.getter();
        BOOL v26 = os_log_type_enabled(v24, v25);
        uint64_t v79 = a4;
        if (v26)
        {
          os_log_t v75 = v24;
          uint64_t v27 = swift_slowAlloc();
          uint64_t v74 = swift_slowAlloc();
          aBlock[0] = v74;
          *(_DWORD *)uint64_t v27 = 136315394;
          if (qword_100320C30 != -1) {
            swift_once();
          }
          uint64_t v28 = qword_100326B18;
          unint64_t v29 = unk_100326B20;
          swift_bridgeObjectRetain();
          uint64_t v88 = (void *)sub_100135190(v28, v29, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v27 + 12) = 2048;
          uint64_t v88 = (void *)v22;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_100007844(a1, 0);
          uint64_t v24 = v75;
          _os_log_impl((void *)&_mh_execute_header, v75, v25, "%s - performing health check on %ld beneficiaries", (uint8_t *)v27, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100007844(a1, 0);
        }

        uint64_t v54 = dispatch_group_create();
        unint64_t v55 = (void *)sub_100101B3C(*(void *)(*(void *)((char *)v21+ OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData)+ 16), v22);
        uint64_t v56 = swift_allocObject();
        *(void *)(v56 + 16) = 0;
        uint64_t v57 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
        uint64_t v58 = a1 + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80));
        uint64_t v59 = *(void *)(v57 + 72);
        swift_bridgeObjectRetain();
        do
        {
          sub_1000F6AE8(v58, v21, v55, v54, v56, a6);
          v58 += v59;
          --v22;
        }
        while (v22);
        sub_100007844(a1, 0);
        sub_10000850C(0, (unint64_t *)&qword_10032A860);
        uint64_t v61 = v80;
        uint64_t v60 = v81;
        uint64_t v62 = v82;
        (*(void (**)(char *, void, uint64_t))(v81 + 104))(v80, enum case for DispatchQoS.QoSClass.default(_:), v82);
        uint64_t v63 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
        uint64_t v64 = (void *)swift_allocObject();
        uint64_t v65 = v78;
        v64[2] = v79;
        v64[3] = v65;
        v64[4] = v56;
        aBlock[4] = (uint64_t)sub_10004CEB8;
        aBlock[5] = (uint64_t)v64;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100007244;
        void aBlock[3] = (uint64_t)&unk_1002FB780;
        uint64_t v66 = _Block_copy(aBlock);
        swift_retain();
        swift_retain();
        id v67 = v83;
        static DispatchQoS.unspecified.getter();
        uint64_t v88 = _swiftEmptyArrayStorage;
        sub_10000A6B0((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100009F04(&qword_10032BB00);
        sub_10000A534();
        id v68 = v85;
        uint64_t v69 = v76;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_group.notify(qos:flags:queue:execute:)();

        _Block_release(v66);
        swift_release();

        (*(void (**)(char *, uint64_t))(v77 + 8))(v68, v69);
        (*(void (**)(char *, uint64_t))(v84 + 8))(v67, v86);
        swift_release();
      }
      else
      {
        if (qword_100320B98 != -1) {
          swift_once();
        }
        uint64_t v48 = type metadata accessor for Logger();
        sub_100007288(v48, (uint64_t)qword_10033E778);
        unint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v79 = a4;
          uint64_t v51 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v51 = 136315138;
          if (qword_100320C30 != -1) {
            swift_once();
          }
          uint64_t v52 = qword_100326B18;
          unint64_t v53 = unk_100326B20;
          swift_bridgeObjectRetain();
          uint64_t v88 = (void *)sub_100135190(v52, v53, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s - no beneficiaries found. Skipping Beneficiary Health Check", v51, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a4 = v79;
        }
        else
        {
        }
        if (*(void *)(*(void *)((char *)v21
                                   + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData)
                       + 16))
        {
          uint64_t v70 = Logger.logObject.getter();
          os_log_type_t v71 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v70, v71))
          {
            unint64_t v72 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v72 = 0;
            _os_log_impl((void *)&_mh_execute_header, v70, v71, "idMS has MORE number of beneficiaries registered.", v72, 2u);
            swift_slowDealloc();
          }
        }
        a4(0);
      }
      swift_release();
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E778);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v33 = 136315138;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v34 = qword_100326B18;
      unint64_t v35 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v88 = (void *)sub_100135190(v34, v35, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - Self is nil. Aborting.", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

void sub_1000F6AE8(uint64_t a1, void *a2, void *a3, NSObject *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v66 = a1;
  uint64_t v63 = a6;
  uint64_t v64 = a5;
  dispatch_group_t v68 = a4;
  uint64_t v65 = a3;
  uint64_t v7 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v8 = v7 - 8;
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v57 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v11;
  __chkstk_darwin(v10, v12);
  uint64_t v62 = (uint64_t)&v57 - v13;
  uint64_t v14 = sub_100009F04(&qword_100321CD0);
  uint64_t v58 = *(void *)(v14 - 8);
  uint64_t v59 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100009F04(&qword_100321CF8);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100009F04(&qword_100323190);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v67 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, (uint64_t)a2 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__analyticsEventFactory, v23);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  id v28 = objc_allocWithZone((Class)type metadata accessor for InheritanceHealthCheckAnalyticsEvent());
  unint64_t v29 = (void *)sub_100204174();
  sub_100008EA8((uint64_t)v69);
  *(void *)((char *)v29 + qword_10032C780) = v65;
  dispatch_group_enter(v68);
  uint64_t v30 = *(int *)(v8 + 28);
  uint64_t v31 = v66;
  if (*(void *)(v66 + v30 + 8))
  {
    os_log_type_t v32 = v67;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, (char *)v67 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__beneficiaryInfoVerificationProtocol, v18);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    unint64_t v33 = sub_100008EF8(v69, v69[3]);
    uint64_t v34 = v32;
    uint64_t v35 = *(void *)((char *)v32 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData);
    uint64_t v37 = v58;
    uint64_t v36 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v17, (uint64_t)v34 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__securityController, v59);
    swift_bridgeObjectRetain();
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v17, v36);
    uint64_t v38 = (void *)v70;
    uint64_t v39 = *v33;
    uint64_t v65 = v29;
    uint64_t v40 = v63;
    sub_100255248(v31, v35, v38, v39, (uint64_t)v65, (uint64_t)&off_100301088, v63);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_100008EA8((uint64_t)v69);
    uint64_t v41 = v62;
    sub_1001042F0(v31, v62, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    unint64_t v42 = (*(unsigned __int8 *)(v60 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    unint64_t v43 = (v61 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v45 = swift_allocObject();
    sub_1001044FC(v41, v45 + v42, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    *(void *)(v45 + v43) = v64;
    dispatch_group_t v46 = v68;
    *(void *)(v45 + v44) = v68;
    *(void *)(v45 + ((v44 + 15) & 0xFFFFFFFFFFFFFFF8)) = v40;
    swift_retain();
    uint64_t v47 = v46;
    sub_100100D0C(v31, v65, (uint64_t)sub_100101FD0, v45, v67);
    swift_release();
  }
  else
  {
    uint64_t v48 = (uint64_t)v57;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    sub_100007288(v49, (uint64_t)qword_10033E778);
    uint64_t v50 = v31;
    uint64_t v51 = v48;
    sub_1001042F0(v50, v48, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      id v67 = v29;
      *(_DWORD *)uint64_t v54 = 136315138;
      type metadata accessor for UUID();
      sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v70 = sub_100135190(v55, v56, v69);
      unint64_t v29 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10010465C(v51, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Handle is nil. BeneficiaryID:%s does not require health check", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10010465C(v51, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }

    dispatch_group_leave(v68);
    sub_10020428C(0);
  }
}

void sub_1000F7204(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = (void *)(a3 + 16);
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E778);
    sub_1001042F0(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v28 = a4;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      v29[0] = v27;
      *(_DWORD *)uint64_t v16 = 136315394;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v18 = qword_100326B18;
      unint64_t v17 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_100135190(v18, v17, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v30 = sub_100135190(v19, v20, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10010465C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - failed for beneficiary - %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v28;
    }
    else
    {
      sub_10010465C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }
    swift_beginAccess();
    *uint64_t v12 = a1;
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E778);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v25 = qword_100326B18;
      unint64_t v26 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_100135190(v25, v26, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s completed.", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  dispatch_group_leave(a4);
}

uint64_t sub_1000F76BC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__cloudStorage;
  uint64_t v2 = sub_100009F04(&qword_100324680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__inheritanceStorage;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_10032B720);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__securityController;
  uint64_t v6 = sub_100009F04(&qword_100321CD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__accessKeyRepairHandler;
  uint64_t v8 = sub_100009F04(&qword_1003237C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__accountStore;
  uint64_t v10 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__akAccountManager;
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_100321CB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__analyticsEventFactory;
  uint64_t v14 = sub_100009F04(&qword_100323190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__beneficiaryInfoVerificationProtocol;
  uint64_t v16 = sub_100009F04(&qword_100321CF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000F7968()
{
  return type metadata accessor for BeneficiaryHealthCheck();
}

uint64_t type metadata accessor for BeneficiaryHealthCheck()
{
  uint64_t result = qword_100326B98;
  if (!qword_100326B98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000F79BC()
{
  sub_10001BF34(319, (unint64_t *)&unk_100324030, (uint64_t *)&unk_1003224B0);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_10032B5D0, (uint64_t *)&unk_100321850);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, qword_10032B5E0, &qword_1003218C0);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, (unint64_t *)&qword_100323708, (uint64_t *)&unk_100323710);
        if (v3 <= 0x3F)
        {
          sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
          if (v4 <= 0x3F)
          {
            sub_1000F7C68();
            if (v5 <= 0x3F)
            {
              sub_10001BF34(319, qword_100323030, (uint64_t *)&unk_1003224C0);
              if (v6 <= 0x3F)
              {
                sub_10001BF34(319, &qword_1003218C8, &qword_1003218D0);
                if (v7 <= 0x3F) {
                  swift_updateClassMetadata2();
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1000F7C68()
{
  if (!qword_100327F90)
  {
    sub_10000850C(255, (unint64_t *)&qword_100321930);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100327F90);
    }
  }
}

void *initializeWithCopy for IdMSBeneficiaryCryptoData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IdMSBeneficiaryCryptoData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for IdMSBeneficiaryCryptoData(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IdMSBeneficiaryCryptoData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdMSBeneficiaryCryptoData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdMSBeneficiaryCryptoData()
{
  return &type metadata for IdMSBeneficiaryCryptoData;
}

uint64_t sub_1000F7E60()
{
  sub_100009F04((uint64_t *)&unk_1003224B0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321850);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_1003218C0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100323710);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_10000850C(0, (unint64_t *)&qword_100321930);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_1003224C0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_1003218D0);
  Dependency.init(dependencyId:config:)();
  uint64_t v1 = OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData;
  *(void *)(v0 + v1) = sub_100220864((uint64_t)_swiftEmptyArrayStorage);
  return v0;
}

uint64_t sub_1000F8024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10010146C(a3, a4);
}

uint64_t sub_1000F8050(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void (*a5)(uint64_t), uint64_t (*a6)(), void *a7, uint64_t a8)
{
  uint64_t v91 = a8;
  uint64_t v92 = a7;
  uint64_t v97 = a6;
  uint64_t v101 = a4;
  uint64_t v102 = a5;
  uint64_t v99 = a3;
  uint64_t v100 = a2;
  uint64_t v98 = type metadata accessor for UUID();
  uint64_t v95 = *(void *)(v98 - 8);
  __chkstk_darwin(v98, v9);
  uint64_t v94 = (uint64_t)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin(v87, v11);
  id v85 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v88 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v88 + 64);
  uint64_t v16 = __chkstk_darwin(v13 - 8, v15);
  uint64_t v90 = (uint64_t)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  uint64_t v93 = (uint64_t)&v85 - v18;
  uint64_t v19 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  uint64_t v23 = __chkstk_darwin(v19, v22);
  uint64_t v89 = (uint64_t)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  uint64_t v96 = (uint64_t)&v85 - v25;
  uint64_t v26 = sub_100009F04(&qword_1003235F8);
  uint64_t v28 = __chkstk_darwin(v26 - 8, v27);
  uint64_t v30 = (char *)&v85 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v31);
  unint64_t v33 = (char *)&v85 - v32;
  uint64_t v34 = sub_100009F04(&qword_100326C68);
  __chkstk_darwin(v34, v35);
  uint64_t v37 = (uint64_t *)((char *)&v85 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v37, &qword_100326C68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v38 = *v37;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100007288(v39, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      v103[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315394;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v43 = qword_100326B18;
      unint64_t v44 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v104 = sub_100135190(v43, v44, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2080;
      uint64_t v104 = v38;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v45 = String.init<A>(describing:)();
      uint64_t v104 = sub_100135190(v45, v46, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s - error fetching InheritanceInvitationRecord. Abandoning Health Check - %s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t ObjectType = swift_getObjectType();
    type metadata accessor for InheritanceError(0);
    v103[0] = 2103;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10000A6B0((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v59 = (void *)v104;
    _convertErrorToNSError(_:)();

    uint64_t v60 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t))(v99 + 24))(v103, ObjectType);
    uint64_t v62 = v61;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v60(v103, 0);
    swift_errorRetain();
    v101(v38);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_1001024D8((uint64_t)v37, (uint64_t)v33);
    sub_100019730((uint64_t)v33, (uint64_t)v30, &qword_1003235F8);
    uint64_t v47 = (uint64_t)v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v30, 1, v19) == 1)
    {
      sub_100006574((uint64_t)v30, &qword_1003235F8);
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      sub_100007288(v48, (uint64_t)qword_10033E778);
      uint64_t v49 = v93;
      sub_1001042F0((uint64_t)v97, v93, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = v33;
        uint64_t v53 = swift_slowAlloc();
        v103[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v53 = 136315394;
        if (qword_100320C30 != -1) {
          swift_once();
        }
        uint64_t v54 = qword_100326B18;
        unint64_t v55 = unk_100326B20;
        swift_bridgeObjectRetain();
        uint64_t v104 = sub_100135190(v54, v55, v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v53 + 12) = 2080;
        sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v104 = sub_100135190(v56, v57, v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10010465C(v49, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s - skipping Health Check for Beneficiary - %s", (uint8_t *)v53, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v47 = (uint64_t)v52;
      }
      else
      {
        sub_10010465C(v49, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      }
      *(unsigned char *)(v100 + qword_10032C788) = 1;
      sub_10020428C(1);
      v101(0);
    }
    else
    {
      uint64_t v64 = v20;
      uint64_t v65 = v96;
      sub_1001044FC((uint64_t)v30, v96, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v67 = v86;
        dispatch_group_t v68 = v85;
        uint64_t v69 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v85, Strong + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__inheritanceStorage, v87);
        Dependency.wrappedValue.getter();
        swift_release();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
        uint64_t v92 = sub_100008EF8(v103, v103[3]);
        uint64_t v70 = v97;
        (*(void (**)(uint64_t, uint64_t (*)(), uint64_t))(v95 + 16))(v94, v97, v98);
        uint64_t v71 = swift_allocObject();
        swift_beginAccess();
        swift_weakLoadStrong();
        uint64_t v93 = v47;
        swift_weakInit();
        swift_release();
        uint64_t v72 = v90;
        sub_1001042F0((uint64_t)v70, v90, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        uint64_t v97 = type metadata accessor for InheritanceInvitationRecord;
        uint64_t v73 = v89;
        sub_1001042F0(v65, v89, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        unint64_t v74 = (*(unsigned __int8 *)(v88 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
        unint64_t v75 = (v14 + v74 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v76 = (v75 + 23) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v77 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v78 = (*(unsigned __int8 *)(v64 + 80) + v77 + 8) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
        uint64_t v79 = swift_allocObject();
        sub_1001044FC(v72, v79 + v74, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        id v80 = (void *)(v79 + v75);
        uint64_t v81 = v99;
        *id v80 = v100;
        v80[1] = v81;
        uint64_t v82 = (void (**)(uint64_t))(v79 + v76);
        os_log_t v83 = v102;
        *uint64_t v82 = v101;
        v82[1] = v83;
        *(void *)(v79 + v77) = v71;
        sub_1001044FC(v73, v79 + v78, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        *(void *)(v79 + ((v21 + v78 + 7) & 0xFFFFFFFFFFFFFFF8)) = v91;
        swift_unknownObjectRetain();
        swift_retain();
        swift_retain();
        uint64_t v84 = v94;
        sub_1000ECA54(v94, (uint64_t)sub_100102850, v79);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v84, v98);
        sub_10010465C(v96, (uint64_t (*)(void))v97);
        sub_100006574(v93, &qword_1003235F8);
        swift_release();
        return sub_100008EA8((uint64_t)v103);
      }
      sub_10010465C(v65, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    }
    return sub_100006574(v47, &qword_1003235F8);
  }
}

uint64_t sub_1000F8D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = a8;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v12 = type metadata accessor for InheritanceHealthRecord();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100009F04(&qword_10032B730);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (uint64_t *)((char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v23, &qword_10032B730);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v37 = a3;
    uint64_t v24 = *v23;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E778);
    sub_1001042F0(a2, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315650;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v29 = qword_100326B18;
      unint64_t v30 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_100135190(v29, v30, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = sub_100135190(v31, v32, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10010465C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      *(_WORD *)(v28 + 22) = 2080;
      uint64_t v40 = v24;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v33 = String.init<A>(describing:)();
      uint64_t v40 = sub_100135190(v33, v34, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - failed to fetch InheritanceHealthRecord for %s. Error :- %s", (uint8_t *)v28, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10010465C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    *(unsigned char *)(v37 + qword_10032C790) = 1;
    sub_10020428C(0);
    swift_errorRetain();
    v38(v24);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_1001044FC((uint64_t)v23, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    *(void *)(a3 + qword_10032C7A8) = sub_1000E1A30();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1000F9294(a2, v37, (uint64_t)v15, a3, a4, (uint64_t)v38, v39);
      swift_release();
    }
    return sub_10010465C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }
}

uint64_t sub_1000F9294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v42 = a6;
  uint64_t v43 = a7;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v34 = a3;
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v9 = *v7;
  uint64_t v38 = v7;
  uint64_t v41 = v9;
  uint64_t v10 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v37 + 64);
  __chkstk_darwin(v10 - 8, v12);
  uint64_t v32 = (uint64_t)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v33 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v33 + 64);
  __chkstk_darwin(v13 - 8, v15);
  uint64_t v16 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  __chkstk_darwin(v17 - 8, v20);
  uint64_t v21 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_allocObject();
  swift_weakInit();
  sub_1001042F0(v35, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  sub_1001042F0(v36, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  sub_1001042F0(a3, (uint64_t)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  unint64_t v23 = (*(unsigned __int8 *)(v18 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  unint64_t v24 = (v19 + *(unsigned __int8 *)(v33 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  unint64_t v25 = (v14 + *(unsigned __int8 *)(v37 + 80) + v24) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  unint64_t v26 = (v11 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v40;
  *(void *)(v27 + 16) = v39;
  *(void *)(v27 + 24) = v28;
  *(void *)(v27 + 32) = v22;
  sub_1001044FC((uint64_t)v21, v27 + v23, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  sub_1001044FC((uint64_t)v16, v27 + v24, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  sub_1001044FC(v32, v27 + v25, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  uint64_t v29 = (void *)(v27 + v26);
  uint64_t v30 = v43;
  *uint64_t v29 = v42;
  v29[1] = v30;
  *(void *)(v27 + ((v26 + 23) & 0xFFFFFFFFFFFFFFF8)) = v41;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000FCF00(v34, (uint64_t (*)(uint64_t))sub_100102D88, (uint64_t (*)(uint64_t))v27);
  swift_release();
  return swift_release();
}

uint64_t sub_1000F9628(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v165 = a7;
  uint64_t v164 = a6;
  v173 = a5;
  uint64_t v182 = a4;
  uint64_t v176 = a2;
  uint64_t v166 = type metadata accessor for InheritanceInvitationMessage();
  uint64_t v10 = __chkstk_darwin(v166, v9);
  v168 = (char *)&v158 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v169 = (char *)&v158 - v13;
  uint64_t v172 = sub_100009F04(&qword_100325870);
  uint64_t v171 = *(void *)(v172 - 8);
  __chkstk_darwin(v172, v14);
  v170 = (char *)&v158 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v177 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v175 = *(void *)(v177 - 8);
  uint64_t v17 = __chkstk_darwin(v177, v16);
  uint64_t v167 = (uint64_t)&v158 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v163 = (uint64_t)&v158 - v21;
  uint64_t v23 = __chkstk_darwin(v20, v22);
  unint64_t v25 = (char *)&v158 - v24;
  uint64_t v27 = __chkstk_darwin(v23, v26);
  uint64_t v29 = (char *)&v158 - v28;
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (char *)&v158 - v31;
  uint64_t v180 = sub_100009F04(&qword_100326C68);
  __chkstk_darwin(v180, v33);
  v181 = (uint64_t *)((char *)&v158 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = type metadata accessor for UUID();
  v178 = *(void **)(v35 - 8);
  uint64_t v179 = v35;
  uint64_t v37 = __chkstk_darwin(v35, v36);
  uint64_t v39 = (char *)&v158 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37, v40);
  uint64_t v42 = (char *)&v158 - v41;
  uint64_t v43 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v43, v44);
  unint64_t v46 = (uint64_t *)((char *)&v158 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v46, &qword_100325890);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1001044FC((uint64_t)v46, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    uint64_t v65 = (uint64_t)v32;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v162 = type metadata accessor for Logger();
    uint64_t v66 = sub_100007288(v162, (uint64_t)qword_10033E778);
    dispatch_group_t v68 = v178;
    uint64_t v67 = v179;
    uint64_t v69 = (void (*)(char *, uint64_t, uint64_t))v178[2];
    v161 = v178 + 2;
    uint64_t v160 = v69;
    v69(v39, v176, v179);
    sub_1001042F0((uint64_t)v32, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    uint64_t v176 = v66;
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v159 = v65;
      v174 = a3;
      uint64_t v72 = swift_slowAlloc();
      uint64_t v158 = swift_slowAlloc();
      uint64_t v185 = v158;
      *(_DWORD *)uint64_t v72 = 136315650;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v73 = qword_100326B18;
      unint64_t v74 = unk_100326B20;
      swift_bridgeObjectRetain();
      v184 = sub_100135190(v73, v74, &v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2080;
      sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v75 = v179;
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
      v184 = sub_100135190(v76, v77, &v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v178[1])(v39, v75);
      *(_WORD *)(v72 + 22) = 2048;
      uint64_t v78 = v177;
      uint64_t v79 = *(void *)&v29[*(int *)(v177 + 32)];
      sub_10010465C((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      v184 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "%s - inheritanceInvitationRecord for beneficiaryID - %s is in %ld status", (uint8_t *)v72, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v174;
      uint64_t v65 = v159;
    }
    else
    {
      sub_10010465C((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      ((void (*)(char *, uint64_t))v68[1])(v39, v67);

      uint64_t v78 = v177;
    }
    uint64_t v80 = *(int *)(v78 + 32);
    uint64_t v81 = *(void *)(v65 + v80);
    sub_1001042F0(v65, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    if (v81 == 2)
    {
      sub_10010465C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    }
    else
    {
      uint64_t v82 = *(void *)&v25[*(int *)(v78 + 32)];
      sub_10010465C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      if (v82 != 3)
      {
        if (*(void *)(v65 + v80) == 1)
        {
          uint64_t v95 = v171;
          uint64_t v96 = v170;
          uint64_t v97 = v172;
          (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v170, &v173[OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__accountStore], v172);
          Dependency.wrappedValue.getter();
          (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v97);
          id v98 = [[*(id *)(*sub_100008EF8(&v185, v186) + 16) aa_primaryAppleAccount];
          if (v98)
          {
            uint64_t v99 = v98;
            id v100 = [v98 aa_altDSID];

            if (v100)
            {
              uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v171 = v101;

              sub_100008EA8((uint64_t)&v185);
              uint64_t v102 = v163;
              sub_1001042F0(v65, v163, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
              uint64_t v103 = Logger.logObject.getter();
              os_log_type_t v104 = static os_log_type_t.info.getter();
              BOOL v105 = os_log_type_enabled(v103, v104);
              v174 = a3;
              if (v105)
              {
                uint64_t v106 = (uint8_t *)swift_slowAlloc();
                uint64_t v185 = swift_slowAlloc();
                *(_DWORD *)uint64_t v106 = 136315138;
                sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
                uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter();
                v184 = sub_100135190(v107, v108, &v185);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_10010465C(v102, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
                _os_log_impl((void *)&_mh_execute_header, v103, v104, "Beneficiary id %s is pending. Resending CK share...", v106, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                sub_10010465C(v102, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
              }

              uint64_t v111 = (uint64_t)v168;
              uint64_t ObjectType = swift_getObjectType();
              type metadata accessor for InheritanceError(0);
              uint64_t v185 = 2106;
              sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
              sub_10000A6B0((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
              _BridgedStoredNSError.init(_:userInfo:)();
              uint64_t v113 = v184;
              _convertErrorToNSError(_:)();

              long long v114 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t))(v165 + 24))(&v185, ObjectType);
              uint64_t v116 = v115;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((*v116 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v116 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              v114(&v185, 0);
              id v117 = [self sharedService];
              uint64_t v118 = type metadata accessor for DaemonDestinationBuilder();
              uint64_t v119 = swift_allocObject();
              uint64_t v186 = v118;
              v187 = &off_1002FAE40;
              uint64_t v185 = v119;
              type metadata accessor for DaemonIDSMessenger();
              uint64_t inited = (void *)swift_initStackObject();
              uint64_t v121 = sub_1000084BC((uint64_t)&v185, v186);
              __chkstk_darwin(v121, v121);
              uint64_t v123 = (uint64_t *)((char *)&v158 - ((v122 + 15) & 0xFFFFFFFFFFFFFFF0));
              (*(void (**)(uint64_t *))(v124 + 16))(v123);
              uint64_t v125 = *v123;
              inited[6] = v118;
              inited[7] = &off_1002FAE40;
              inited[2] = v117;
              inited[3] = v125;
              v178 = inited;
              v173 = (char *)v117;
              v170 = (char *)v119;
              swift_retain();
              sub_100008EA8((uint64_t)&v185);
              uint64_t v126 = v166;
              uint64_t v127 = v169;
              v160(&v169[*(int *)(v166 + 20)], v65, v179);
              *uint64_t v127 = 4;
              uint64_t v128 = (uint64_t *)&v127[*(int *)(v126 + 24)];
              uint64_t v129 = v171;
              *uint64_t v128 = v172;
              v128[1] = v129;
              uint64_t v130 = v167;
              sub_1001042F0(v65, v167, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
              uint64_t v131 = Logger.logObject.getter();
              os_log_type_t v132 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v131, v132))
              {
                uint64_t v133 = (uint8_t *)swift_slowAlloc();
                v184 = swift_slowAlloc();
                *(_DWORD *)uint64_t v133 = 136315138;
                uint64_t v134 = sub_100290048();
                uint64_t v183 = sub_100135190(v134, v135, (uint64_t *)&v184);
                uint64_t v127 = v169;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_10010465C(v130, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
                _os_log_impl((void *)&_mh_execute_header, v131, v132, "invitation %s", v133, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                sub_10010465C(v130, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
              }

              uint64_t v136 = v177;
              sub_1001042F0((uint64_t)v127, v111, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
              v137 = Logger.logObject.getter();
              os_log_type_t v138 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v137, v138))
              {
                uint64_t v139 = (uint8_t *)swift_slowAlloc();
                v184 = swift_slowAlloc();
                *(_DWORD *)uint64_t v139 = 136315138;
                uint64_t v140 = sub_1001FABF8();
                uint64_t v183 = sub_100135190(v140, v141, (uint64_t *)&v184);
                uint64_t v127 = v169;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_10010465C(v111, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
                _os_log_impl((void *)&_mh_execute_header, v137, v138, "invitationMessage %s", v139, 0xCu);
                uint64_t v136 = v177;
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                sub_10010465C(v111, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
              }

              v142 = (void (*)(uint64_t *))v174;
              id v143 = objc_allocWithZone((Class)AAMessagingDestination);
              swift_bridgeObjectRetain();
              NSString v144 = String._bridgeToObjectiveC()();
              id v145 = [v143 initWithHandle:v144];

              if (v145)
              {
                uint64_t v146 = qword_100320B70;
                id v147 = v145;
                if (v146 != -1) {
                  swift_once();
                }
                sub_100007288(v162, (uint64_t)qword_10033E700);
                uint64_t v148 = Logger.logObject.getter();
                os_log_type_t v149 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v148, v149))
                {
                  uint64_t v150 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v150 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v148, v149, "Destination is valid!", v150, 2u);
                  swift_slowDealloc();
                }

                sub_1001978F4((uint64_t)v127, v147, (uint64_t)&_swiftEmptySetSingleton);
                v154 = Logger.logObject.getter();
                os_log_type_t v155 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v154, v155))
                {
                  uint64_t v156 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v156 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v154, v155, "Sent the IDS message for Inheritance Invitation successfully.", v156, 2u);
                  swift_slowDealloc();
                }
                swift_bridgeObjectRelease();
              }
              else
              {
                if (qword_100320B88 != -1) {
                  swift_once();
                }
                sub_100007288(v162, (uint64_t)qword_10033E748);
                uint64_t v151 = Logger.logObject.getter();
                os_log_type_t v152 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v151, v152))
                {
                  v153 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)v153 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v151, v152, "Unable to generate destination from handle.", v153, 2u);
                  swift_slowDealloc();
                }

                type metadata accessor for AACustodianError(0);
                uint64_t v183 = -7004;
                sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
                sub_10000A6B0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
                _BridgedStoredNSError.init(_:userInfo:)();
                v154 = v184;
                sub_1000FB168((uint64_t)v184);
                swift_bridgeObjectRelease();
              }

              v157 = v181;
              sub_1001042F0(v65, (uint64_t)v181, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
              (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v175 + 56))(v157, 0, 1, v136);
              swift_storeEnumTagMultiPayload();
              v142(v157);

              swift_release();
              swift_release();
              sub_100006574((uint64_t)v157, &qword_100326C68);
              sub_10010465C((uint64_t)v127, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
              goto LABEL_21;
            }
          }
          sub_100008EA8((uint64_t)&v185);
        }
        uint64_t v110 = v181;
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v175 + 56))(v181, 1, 1, v78);
        swift_storeEnumTagMultiPayload();
        a3(v110);
        sub_100006574((uint64_t)v110, &qword_100326C68);
        uint64_t v84 = v65;
        return sub_10010465C(v84, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      }
    }
    os_log_t v83 = v181;
    sub_1001042F0(v65, (uint64_t)v181, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v175 + 56))(v83, 0, 1, v78);
    swift_storeEnumTagMultiPayload();
    a3(v83);
    sub_100006574((uint64_t)v83, &qword_100326C68);
LABEL_21:
    uint64_t v84 = v65;
    return sub_10010465C(v84, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }
  uint64_t v185 = *v46;
  uint64_t v47 = v185;
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  type metadata accessor for InheritanceError(0);
  if (swift_dynamicCast())
  {
    v174 = a3;
    uint64_t v48 = v184;
    uint64_t v185 = (uint64_t)v184;
    uint64_t v183 = 3;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10000A6B0((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v49 = v184;
    uint64_t v183 = (uint64_t)v184;
    char v50 = static _BridgedStoredNSError.== infix(_:_:)();

    if (v50)
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      sub_100007288(v51, (uint64_t)qword_10033E778);
      uint64_t v53 = v178;
      uint64_t v52 = v179;
      ((void (*)(char *, uint64_t, uint64_t))v178[2])(v42, v176, v179);
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.info.getter();
      BOOL v56 = os_log_type_enabled(v54, v55);
      unint64_t v57 = (void (*)(uint64_t *))v174;
      uint64_t v58 = v177;
      if (v56)
      {
        uint64_t v59 = swift_slowAlloc();
        uint64_t v176 = swift_slowAlloc();
        uint64_t v185 = v176;
        *(_DWORD *)uint64_t v59 = 136315394;
        if (qword_100320C30 != -1) {
          swift_once();
        }
        uint64_t v60 = qword_100326B18;
        unint64_t v61 = unk_100326B20;
        swift_bridgeObjectRetain();
        v184 = sub_100135190(v60, v61, &v185);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v59 + 12) = 2080;
        sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v62 = v179;
        uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
        v184 = sub_100135190(v63, v64, &v185);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v178[1])(v42, v62);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "%s - there is no InheritanceInvitationRecord for beneficiaryID - %s.", (uint8_t *)v59, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v57 = (void (*)(uint64_t *))v174;
        uint64_t v58 = v177;
      }
      else
      {
        ((void (*)(char *, uint64_t))v53[1])(v42, v52);
      }
      int v109 = v181;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v175 + 56))(v181, 1, 1, v58);
      swift_storeEnumTagMultiPayload();
      v57(v109);

      swift_errorRelease();
      return sub_100006574((uint64_t)v109, &qword_100326C68);
    }

    a3 = v174;
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v85 = type metadata accessor for Logger();
  sub_100007288(v85, (uint64_t)qword_10033E778);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v86, v87))
  {
    uint64_t v88 = swift_slowAlloc();
    uint64_t v185 = swift_slowAlloc();
    *(_DWORD *)uint64_t v88 = 136315394;
    if (qword_100320C30 != -1) {
      swift_once();
    }
    uint64_t v89 = qword_100326B18;
    unint64_t v90 = unk_100326B20;
    swift_bridgeObjectRetain();
    v184 = sub_100135190(v89, v90, &v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v88 + 12) = 2080;
    v184 = v47;
    swift_errorRetain();
    uint64_t v91 = String.init<A>(describing:)();
    v184 = sub_100135190(v91, v92, &v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "%s - error fetching InheritanceInvitationRecord - %s", (uint8_t *)v88, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v93 = v181;
  uint64_t *v181 = v47;
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  a3(v93);
  swift_errorRelease();
  return sub_100006574((uint64_t)v93, &qword_100326C68);
}

void sub_1000FB168(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100007288(v1, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v4 = String.init<A>(describing:)();
      sub_100135190(v4, v5, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Error sending IDS Message for Inheritance Invitation: %s", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E778);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Sent the IDS message for Inheritance Invitation successfully.", v8, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000FB42C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9)
{
  uint64_t v67 = a8;
  uint64_t v68 = a5;
  uint64_t v69 = a7;
  uint64_t v65 = a6;
  uint64_t v66 = a3;
  uint64_t v11 = a9;
  uint64_t v12 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v62 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v63 = v14;
  uint64_t v64 = (uint64_t)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04(&qword_1003237C0);
  uint64_t v61 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v20 = *(void *)(*(void *)(v19 - 8) + 64);
  uint64_t v22 = __chkstk_darwin(v19 - 8, v21);
  __chkstk_darwin(v22, v23);
  uint64_t v27 = (char *)v53 - v26;
  if (a1)
  {
    *(unsigned char *)(a2 + qword_10032C778) = 1;
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      sub_1000FBBA8(v68, v65, v69, a2, v66, v67, a9);
      return swift_release();
    }
  }
  else
  {
    uint64_t v58 = v25;
    uint64_t v59 = v24;
    uint64_t v60 = a2;
    *(unsigned char *)(a2 + qword_10032C778) = 0;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E778);
    sub_1001042F0(v69, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    uint64_t v30 = Logger.logObject.getter();
    int v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, (os_log_type_t)v31))
    {
      int v55 = v31;
      BOOL v56 = (void *)v12;
      uint64_t v57 = a9;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      v70[0] = v54;
      *(_DWORD *)uint64_t v32 = 136315394;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v34 = qword_100326B18;
      unint64_t v33 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v71 = sub_100135190(v34, v33, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      v53[1] = v32 + 14;
      type metadata accessor for UUID();
      sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v71 = sub_100135190(v35, v36, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10010465C((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v55, "%s - marking beneficiary %s as not reachable, and attempting to re-share.", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v11 = v57;
      uint64_t v12 = (uint64_t)v56;
    }
    else
    {
      sub_10010465C((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    }
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    uint64_t v37 = v60;
    if (result)
    {
      uint64_t v38 = v61;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v18, result + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__accessKeyRepairHandler, v15);
      Dependency.wrappedValue.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v15);
      BOOL v56 = sub_100008EF8(v70, v70[3]);
      uint64_t v39 = v65;
      uint64_t v40 = (uint64_t *)(v65 + *(int *)(v12 + 20));
      uint64_t v42 = *v40;
      uint64_t v41 = v40[1];
      uint64_t v61 = v42;
      uint64_t v57 = v41;
      uint64_t v43 = swift_allocObject();
      swift_beginAccess();
      swift_weakLoadStrong();
      swift_weakInit();
      swift_release();
      uint64_t v44 = v64;
      sub_1001042F0(v39, v64, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      uint64_t v45 = v59;
      sub_1001042F0(v69, v59, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      unint64_t v46 = (*(unsigned __int8 *)(v62 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      unint64_t v47 = (v63 + *(unsigned __int8 *)(v58 + 80) + v46) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
      unint64_t v48 = (v20 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 16) = v43;
      sub_1001044FC(v44, v49 + v46, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      sub_1001044FC(v45, v49 + v47, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      char v50 = (uint64_t *)(v49 + v48);
      uint64_t v51 = v66;
      *char v50 = v37;
      v50[1] = v51;
      uint64_t v52 = (void *)(v49 + ((v48 + 23) & 0xFFFFFFFFFFFFFFF8));
      *uint64_t v52 = v67;
      v52[1] = v11;
      swift_retain();
      swift_unknownObjectRetain();
      swift_retain();
      sub_1001CBF8C(v68, v61, v57, (void (*)(void))sub_100103C00, v49);
      swift_release();
      swift_release();
      return sub_100008EA8((uint64_t)v70);
    }
  }
  return result;
}

uint64_t sub_1000FBBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t a7)
{
  uint64_t v115 = a2;
  uint64_t v119 = a7;
  v120 = a6;
  uint64_t v118 = a4;
  uint64_t v9 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v109 = (uint64_t)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v112 = (uint64_t)&v107 - v14;
  uint64_t v121 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v121 - 8);
  uint64_t v17 = __chkstk_darwin(v121, v16);
  id v117 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v107 - v20;
  uint64_t v22 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v114 = (uint64_t)&v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v113 = (uint64_t)&v107 - v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v111 = (uint64_t)&v107 - v31;
  __chkstk_darwin(v30, v32);
  uint64_t v34 = (char *)&v107 - v33;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v36 = sub_100007288(v35, (uint64_t)qword_10033E778);
  uint64_t v122 = a3;
  sub_1001042F0(a3, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v110 = v36;
    uint64_t v116 = v22;
    uint64_t v108 = a1;
    uint64_t v39 = swift_slowAlloc();
    uint64_t v107 = swift_slowAlloc();
    v124[0] = v107;
    *(_DWORD *)uint64_t v39 = 136315394;
    if (qword_100320C30 != -1) {
      swift_once();
    }
    uint64_t v41 = qword_100326B18;
    unint64_t v40 = unk_100326B20;
    swift_bridgeObjectRetain();
    uint64_t v123 = sub_100135190(v41, v40, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 12) = 2080;
    type metadata accessor for UUID();
    sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v123 = sub_100135190(v42, v43, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10010465C((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s - verifying beneficiary health record for beneficiaryID - %s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v108;
    uint64_t v22 = v116;
    uint64_t v36 = v110;
  }
  else
  {
    sub_10010465C((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }
  uint64_t v45 = v121;
  uint64_t v44 = v122;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v21, v122 + *(int *)(v22 + 20), v121);
  unint64_t v46 = v117;
  Date.init(timeIntervalSince1970:)();
  sub_10000A6B0(&qword_100326360, (void (*)(uint64_t))&type metadata accessor for Date);
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v48 = *(void (**)(char *, uint64_t))(v15 + 8);
  v48(v46, v45);
  v48(v21, v45);
  if (v47)
  {
    uint64_t v49 = v114;
    sub_1001042F0(v44, v114, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    char v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      v124[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136315394;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v53 = qword_100326B18;
      unint64_t v54 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v123 = sub_100135190(v53, v54, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v123 = sub_100135190(v55, v56, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10010465C(v49, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      os_log_type_t v57 = v51;
      uint64_t v58 = "%s - beneficiary %s hasn't updated to a version that has Health Check enabled. Skipping Health Check.";
LABEL_46:
      _os_log_impl((void *)&_mh_execute_header, v50, v57, v58, (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_49:

      int v101 = 1;
LABEL_50:
      sub_10020428C(v101);
      return v120(0);
    }
    uint64_t v68 = type metadata accessor for InheritanceHealthRecord;
    goto LABEL_48;
  }
  if (sub_1000E1810())
  {
    uint64_t v116 = v22;
    uint64_t v59 = v112;
    sub_1001042F0(a1, v112, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v110 = v36;
      uint64_t v62 = swift_slowAlloc();
      v124[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 136315394;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v63 = qword_100326B18;
      unint64_t v64 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v123 = sub_100135190(v63, v64, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v62 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v65 = v112;
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v123 = sub_100135190(v66, v67, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10010465C(v65, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "%s - beneficiary %s has checked in recently, continue health check.", (uint8_t *)v62, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v44 = v122;
    }
    else
    {
      sub_10010465C(v59, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      v124[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v84 = 136315138;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v85 = qword_100326B18;
      unint64_t v86 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v123 = sub_100135190(v85, v86, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "%s - verifying accessKeyHash...", v84, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v44 = v122;
    }
    else
    {
    }
    sub_1000FD360(v115);
    uint64_t v88 = sub_100018390();
    unint64_t v90 = v89;
    char v91 = sub_100012680(v88, v89, *(void *)(v44 + *(int *)(v116 + 24)), *(void *)(v44 + *(int *)(v116 + 24) + 8));
    sub_100013198(v88, v90);
    unint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.info.getter();
    BOOL v94 = os_log_type_enabled(v92, v93);
    if ((v91 & 1) == 0)
    {
      if (v94)
      {
        id v98 = (uint8_t *)swift_slowAlloc();
        v124[0] = swift_slowAlloc();
        *(_DWORD *)id v98 = 136315138;
        if (qword_100320C30 != -1) {
          swift_once();
        }
        uint64_t v99 = qword_100326B18;
        unint64_t v100 = unk_100326B20;
        swift_bridgeObjectRetain();
        uint64_t v123 = sub_100135190(v99, v100, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "%s - accessKeyHash doesn't match with healthRecord. No action taken at the moment", v98, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      *(unsigned char *)(v118 + qword_10032C798) = 1;
      int v101 = 0;
      goto LABEL_50;
    }
    if (v94)
    {
      uint64_t v95 = (uint8_t *)swift_slowAlloc();
      v124[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v95 = 136315138;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v96 = qword_100326B18;
      unint64_t v97 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v123 = sub_100135190(v96, v97, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "%s - verified accessKeyHash matches with healthRecord. We're good.", v95, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v49 = v109;
    sub_1001042F0(a1, v109, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    char v50 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v50, v102))
    {
      uint64_t v52 = swift_slowAlloc();
      v124[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136315394;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v103 = qword_100326B18;
      unint64_t v104 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v123 = sub_100135190(v103, v104, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v123 = sub_100135190(v105, v106, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10010465C(v49, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      os_log_type_t v57 = v102;
      uint64_t v58 = "%s - beneficiary %s is healthy!";
      goto LABEL_46;
    }
    uint64_t v68 = type metadata accessor for BeneficiaryInfoRecord;
LABEL_48:
    sub_10010465C(v49, (uint64_t (*)(void))v68);
    goto LABEL_49;
  }
  uint64_t v69 = v111;
  sub_1001042F0(v44, v111, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  uint64_t v70 = v113;
  sub_1001042F0(v44, v113, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  uint64_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v116 = v22;
    uint64_t v73 = swift_slowAlloc();
    v124[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v73 = 136315650;
    if (qword_100320C30 != -1) {
      swift_once();
    }
    uint64_t v74 = qword_100326B18;
    unint64_t v75 = unk_100326B20;
    swift_bridgeObjectRetain();
    uint64_t v123 = sub_100135190(v74, v75, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v73 + 12) = 2080;
    type metadata accessor for UUID();
    sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v76 = v111;
    uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v123 = sub_100135190(v77, v78, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10010465C(v76, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    *(_WORD *)(v73 + 22) = 2080;
    uint64_t v79 = v113;
    sub_10000A6B0(&qword_100326378, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v123 = sub_100135190(v80, v81, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10010465C(v79, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "%s - beneficiary %s last check in was %s, marking as not reachable.", (uint8_t *)v73, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10010465C(v69, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    sub_10010465C(v70, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }

  *(unsigned char *)(v118 + qword_10032C798) = 0;
  sub_10020428C(0);
  return sub_1000FD790(v115, 3, v120, v119);
}

uint64_t sub_1000FCE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(unsigned char *)(a5 + qword_10032C798) = a1 == 0;
    sub_10020428C(0);
    sub_1000FD790(a3, 3, a7, a8);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000FCF00(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t))
{
  uint64_t v29 = *v3;
  uint64_t v7 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8, v10);
  uint64_t v11 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100009F04(&qword_100324680);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__cloudStorage, v12);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  sub_100009F04((uint64_t *)&unk_1003224B0);
  sub_100009F04(&qword_100322940);
  if (swift_dynamicCast())
  {
    sub_100041E8C(v30, (uint64_t)v33);
    sub_1001042F0(a1, (uint64_t)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    unint64_t v18 = (v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = swift_allocObject();
    sub_1001044FC((uint64_t)v11, v19 + v17, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    uint64_t v20 = (uint64_t (**)(uint64_t))(v19 + v18);
    void *v20 = a2;
    v20[1] = a3;
    *(void *)(v19 + ((v18 + 23) & 0xFFFFFFFFFFFFFFF8)) = v29;
    swift_retain();
    sub_100103420(a1, (uint64_t)sub_100103094, v19);
    swift_release();
    return sub_100008EA8((uint64_t)v33);
  }
  else
  {
    uint64_t v31 = 0;
    memset(v30, 0, sizeof(v30));
    sub_100006574((uint64_t)v30, (uint64_t *)&unk_10032B4A0);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E778);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      v33[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v26 = qword_100326B18;
      unint64_t v27 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_100135190(v26, v27, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - isSharedAndAccepted unable to obtain pointer to CloudKitSharing", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return a2(1);
  }
}

uint64_t sub_1000FD360(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v8 = __chkstk_darwin(v4 - 8, v7);
  uint64_t v9 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)v24 - v12;
  if (*(void *)(a1 + *(int *)(result + 40)) == 3)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E778);
    sub_1001042F0(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    uint64_t v15 = Logger.logObject.getter();
    int v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, (os_log_type_t)v16))
    {
      int v26 = v16;
      uint64_t v27 = v5;
      uint64_t v28 = v3;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v30 = v25;
      *(_DWORD *)uint64_t v17 = 136315394;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v19 = qword_100326B18;
      unint64_t v18 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v29 = sub_100135190(v19, v18, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      v24[1] = v17 + 14;
      type metadata accessor for UUID();
      sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v29 = sub_100135190(v20, v21, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10010465C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v26, "%s - beneficiary %s was marked as not reachable, marking as accepted again.", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v5 = v27;
      uint64_t v3 = v28;
    }
    else
    {
      sub_10010465C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    }
    sub_1001042F0(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    unint64_t v22 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v23 = swift_allocObject();
    sub_1001044FC((uint64_t)v9, v23 + v22, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    *(void *)(v23 + ((v6 + v22 + 7) & 0xFFFFFFFFFFFFFFF8)) = v3;
    sub_1000FD790(a1, 2, (uint64_t (*)(void))sub_100103E6C, v23);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000FD790(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v5;
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v45 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = &v36[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  unint64_t v22 = &v36[-v21];
  uint64_t v23 = *(int *)(v19 + 32);
  uint64_t v44 = a1;
  if (*(void *)(a1 + v23) == a2) {
    return a3(0);
  }
  uint64_t v41 = v20;
  uint64_t v42 = a2;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v43 = v10;
  uint64_t v25 = type metadata accessor for Logger();
  sub_100007288(v25, (uint64_t)qword_10033E778);
  int v26 = Logger.logObject.getter();
  int v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, (os_log_type_t)v27))
  {
    int v37 = v27;
    os_log_t v38 = v26;
    uint64_t v39 = a3;
    uint64_t v40 = a4;
    uint64_t v28 = swift_slowAlloc();
    v47[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315394;
    if (qword_100320C30 != -1) {
      swift_once();
    }
    uint64_t v30 = qword_100326B18;
    unint64_t v29 = unk_100326B20;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_100135190(v30, v29, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2048;
    uint64_t v31 = v42;
    uint64_t v46 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v32 = v38;
    _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v37, "%s - updating invitation to %ld", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a3 = v39;
    a4 = v40;
  }
  else
  {

    uint64_t v31 = v42;
  }
  sub_1001042F0(v44, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  *(void *)&v22[*(int *)(v15 + 32)] = v31;
  uint64_t v33 = v45;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v45 + 16))(v14, (uint64_t)v5 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__inheritanceStorage, v11);
  Dependency.wrappedValue.getter();
  (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v14, v11);
  sub_100008EF8(v47, v47[3]);
  uint64_t v34 = v41;
  sub_1001042F0((uint64_t)v22, v41, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  uint64_t v35 = (void *)swift_allocObject();
  void v35[2] = a3;
  v35[3] = a4;
  v35[4] = v43;
  swift_retain();
  sub_1000E5FA8(v34, (uint64_t)sub_100103F40, (uint64_t)v35);
  swift_release();
  sub_10010465C(v34, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  sub_10010465C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  return sub_100008EA8((uint64_t)v47);
}

void sub_1000FDC04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v30 - v10;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E778);
    sub_1001042F0(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v33 = v31;
      *(_DWORD *)uint64_t v15 = 136315650;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v17 = qword_100326B18;
      unint64_t v18 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_100135190(v17, v18, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v32 = sub_100135190(v19, v20, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10010465C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      *(_WORD *)(v15 + 22) = 2112;
      uint64_t v21 = _convertErrorToNSError(_:)();
      uint64_t v32 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v16 = v21;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - failed to mark Beneficiary %s as accepted (after being not reachable). Error: %@", (uint8_t *)v15, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10010465C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E778);
    sub_1001042F0(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315394;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v26 = qword_100326B18;
      unint64_t v27 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_100135190(v26, v27, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v32 = sub_100135190(v28, v29, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10010465C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - successfully marked Beneficiary %s as accepted (after being not reachable).", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10010465C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    }
  }
}

uint64_t sub_1000FE23C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v7, &qword_100325890);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = *v7;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v13 = qword_100326B18;
      unint64_t v14 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_100135190(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v18 = v8;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v15 = String.init<A>(describing:)();
      uint64_t v18 = sub_100135190(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s - failed to save invitation. Unable to update status - %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(v8);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    a2(0);
    return sub_100006574((uint64_t)v7, &qword_100325890);
  }
}

uint64_t sub_1000FE55C(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  unint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v50 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v50 - v20;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100007288(v31, (uint64_t)qword_10033E778);
    sub_1001042F0(a3, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    sub_10010397C(a1, 1);
    swift_errorRetain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v52 = a4;
      uint64_t v53 = a5;
      uint64_t v34 = swift_slowAlloc();
      uint64_t v35 = (void *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v55 = v51;
      *(_DWORD *)uint64_t v34 = 136315650;
      if (qword_100320C30 != -1) {
        swift_once();
      }
      uint64_t v36 = qword_100326B18;
      unint64_t v37 = unk_100326B20;
      swift_bridgeObjectRetain();
      uint64_t v54 = sub_100135190(v36, v37, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v54 = sub_100135190(v38, v39, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10010465C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      *(_WORD *)(v34 + 22) = 2112;
      uint64_t v40 = _convertErrorToNSError(_:)();
      uint64_t v54 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v35 = v40;
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s - beneficiary %s failed to check if shared and accepted, assuming accepted for now. Error: %@", (uint8_t *)v34, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v52(1);
    }
    else
    {
      sub_10010465C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);

      a4(1);
    }
    return sub_100080A98(a1, 1);
  }
  else
  {
    if (a1)
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      sub_100007288(v41, (uint64_t)qword_10033E778);
      sub_1001042F0(a3, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v53 = a5;
        uint64_t v44 = swift_slowAlloc();
        uint64_t v55 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 136315394;
        if (qword_100320C30 != -1) {
          swift_once();
        }
        uint64_t v45 = qword_100326B18;
        unint64_t v46 = unk_100326B20;
        swift_bridgeObjectRetain();
        uint64_t v54 = sub_100135190(v45, v46, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2080;
        type metadata accessor for UUID();
        sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v54 = sub_100135190(v47, v48, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10010465C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s - beneficiary %s is shared and accepted", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10010465C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      }
      uint64_t v30 = 1;
    }
    else
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_100007288(v22, (uint64_t)qword_10033E778);
      sub_1001042F0(a3, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v53 = a5;
        uint64_t v25 = swift_slowAlloc();
        uint64_t v55 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136315394;
        if (qword_100320C30 != -1) {
          swift_once();
        }
        uint64_t v26 = qword_100326B18;
        unint64_t v27 = unk_100326B20;
        swift_bridgeObjectRetain();
        uint64_t v54 = sub_100135190(v26, v27, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2080;
        type metadata accessor for UUID();
        sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v54 = sub_100135190(v28, v29, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10010465C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - beneficiary %s is NOT shared and accepted", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v30 = 0;
      }
      else
      {
        sub_10010465C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);

        uint64_t v30 = 0;
      }
    }
    return ((uint64_t (*)(uint64_t))a4)(v30);
  }
}

void sub_1000FEE74(void *a1, unint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v99 = a6;
  unint64_t v100 = a5;
  uint64_t v10 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  unint64_t v14 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  unint64_t v18 = (unint64_t)&v93 - v17;
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v22 = (char *)&v93 - v21;
  uint64_t v24 = __chkstk_darwin(v20, v23);
  uint64_t v26 = (char *)&v93 - v25;
  __chkstk_darwin(v24, v27);
  unint64_t v29 = (char *)&v93 - v28;
  if (!a1 || (self, (uint64_t v30 = swift_dynamicCastObjCClass()) == 0))
  {
    if (!a2) {
      goto LABEL_41;
    }
    uint64_t v102 = a2;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      uint64_t v42 = (void *)v101;
      sub_10000A6B0((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
      _BridgedStoredNSError.code.getter();
      if (v102 == 11)
      {
        if (qword_100320B78 != -1) {
          swift_once();
        }
        uint64_t v43 = type metadata accessor for Logger();
        sub_100007288(v43, (uint64_t)qword_10033E718);
        sub_1001042F0(a4, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        id v44 = a3;
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = swift_slowAlloc();
          unint64_t v48 = (void *)swift_slowAlloc();
          uint64_t v97 = swift_slowAlloc();
          uint64_t v101 = (uint64_t)v44;
          uint64_t v102 = v97;
          *(_DWORD *)uint64_t v47 = 138412546;
          id v49 = v44;
          id v98 = v42;
          id v50 = v49;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v48 = v44;

          *(_WORD *)(v47 + 12) = 2080;
          uint64_t v51 = UUID.uuidString.getter();
          uint64_t v101 = sub_100135190(v51, v52, &v102);
          uint64_t v42 = v98;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10010465C((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "No CKShareRecord %@ exists for zone %s when checking isSharedAndAccepted, zone is not shared.", (uint8_t *)v47, 0x16u);
          sub_100009F04((uint64_t *)&unk_1003216C0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10010465C((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        }

        v100(0, 0);
        return;
      }
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v70 = type metadata accessor for Logger();
      sub_100007288(v70, (uint64_t)qword_10033E718);
      sub_1001042F0(a4, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      id v71 = a3;
      id v72 = v42;
      id v73 = v71;
      uint64_t v60 = v72;
      uint64_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.error.getter();
      int v76 = v75;
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v77 = swift_slowAlloc();
        BOOL v94 = (void *)swift_slowAlloc();
        uint64_t v97 = swift_slowAlloc();
        uint64_t v101 = (uint64_t)v73;
        uint64_t v102 = v97;
        *(_DWORD *)uint64_t v77 = 138412802;
        os_log_t v96 = v74;
        id v98 = (id)a4;
        id v78 = v73;
        LODWORD(v95) = v76;
        id v79 = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v80 = v94;
        *BOOL v94 = v73;

        *(_WORD *)(v77 + 12) = 2080;
        uint64_t v81 = UUID.uuidString.getter();
        uint64_t v101 = sub_100135190(v81, v82, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10010465C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        *(_WORD *)(v77 + 22) = 2112;
        uint64_t v83 = _convertErrorToNSError(_:)();
        uint64_t v101 = v83;
        a4 = (uint64_t)v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v80[1] = v83;

        os_log_t v84 = v96;
        _os_log_impl((void *)&_mh_execute_header, v96, (os_log_type_t)v95, "Query for CKShareRecord %@ for zone %s failed with ckerror %@", (uint8_t *)v77, 0x20u);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_41;
      }

      sub_10010465C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    }
    else
    {
      swift_errorRetain();
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      sub_100007288(v57, (uint64_t)qword_10033E718);
      sub_1001042F0(a4, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      swift_errorRetain();
      id v58 = a3;
      swift_errorRetain();
      id v59 = v58;
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.error.getter();
      int v62 = v61;
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v63 = swift_slowAlloc();
        unint64_t v64 = (void *)swift_slowAlloc();
        uint64_t v97 = swift_slowAlloc();
        uint64_t v101 = (uint64_t)v59;
        uint64_t v102 = v97;
        *(_DWORD *)uint64_t v63 = 138412802;
        LODWORD(v96) = v62;
        os_log_t v95 = v60;
        id v98 = (id)a4;
        id v65 = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v64 = v59;

        *(_WORD *)(v63 + 12) = 2080;
        uint64_t v66 = UUID.uuidString.getter();
        uint64_t v101 = sub_100135190(v66, v67, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10010465C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        *(_WORD *)(v63 + 22) = 2112;
        uint64_t v68 = _convertErrorToNSError(_:)();
        uint64_t v101 = v68;
        a4 = (uint64_t)v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v64[1] = v68;
        swift_errorRelease();
        swift_errorRelease();
        os_log_t v69 = v95;
        _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v96, "Query for CKShareRecord %@ for zone %s failed with error %@", (uint8_t *)v63, 0x20u);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        goto LABEL_41;
      }
      swift_errorRelease();

      sub_10010465C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

LABEL_41:
    if (qword_100320B78 == -1)
    {
LABEL_42:
      uint64_t v85 = type metadata accessor for Logger();
      sub_100007288(v85, (uint64_t)qword_10033E718);
      sub_1001042F0(a4, v18, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      unint64_t v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v86, v87))
      {
        uint64_t v88 = (uint8_t *)swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        *(_DWORD *)uint64_t v88 = 136315138;
        uint64_t v89 = UUID.uuidString.getter();
        uint64_t v101 = sub_100135190(v89, v90, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10010465C(v18, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "Returning failure for isSharedAndAccepted. Zone: %s", v88, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10010465C(v18, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      }

      char v91 = v100;
      if (a2)
      {
        uint64_t v92 = a2;
      }
      else
      {
        type metadata accessor for AACustodianError(0);
        uint64_t v101 = -7003;
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_10000A6B0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v92 = v102;
      }
      swift_errorRetain();
      v91(v92, 1);
      swift_errorRelease();
      return;
    }
LABEL_50:
    swift_once();
    goto LABEL_42;
  }
  uint64_t v31 = (void *)v30;
  id v32 = a1;
  id v33 = [v31 participants];
  sub_10000850C(0, &qword_1003236B8);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_100007288(v34, (uint64_t)qword_10033E718);
  sub_1001042F0(a4, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  swift_bridgeObjectRetain_n();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.info.getter();
  unint64_t v37 = v18 >> 62;
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v102 = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 134218242;
    id v98 = v32;
    if (v37)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v39 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v101 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2080;
    uint64_t v40 = UUID.uuidString.getter();
    uint64_t v101 = sub_100135190(v40, v41, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10010465C((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Found %ld participants for zone %s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v32 = v98;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_10010465C((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }
  if (v37)
  {
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v53)
    {
LABEL_19:
      a2 = v18 & 0xC000000000000001;
      a4 = 4;
      while (1)
      {
        id v54 = a2 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v18 + 8 * a4);
        uint64_t v55 = v54;
        uint64_t v56 = a4 - 3;
        if (__OFADD__(a4 - 4, 1)) {
          break;
        }
        if (([v54 isCurrentUser] & 1) == 0
          && [v55 acceptanceStatus] == (id)2)
        {
          swift_bridgeObjectRelease();
          v100(1, 0);

          goto LABEL_53;
        }

        ++a4;
        if (v56 == v53) {
          goto LABEL_52;
        }
      }
      __break(1u);
      goto LABEL_50;
    }
  }
  else
  {
    uint64_t v53 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v53) {
      goto LABEL_19;
    }
  }
LABEL_52:
  swift_bridgeObjectRelease();
  v100(0, 0);
LABEL_53:
}

void sub_1000FFD94(void *a1, uint64_t a2, void *a3, uint64_t a4, char **a5, uint64_t a6)
{
  uint64_t v99 = a6;
  id v100 = (id)a4;
  uint64_t v98 = type metadata accessor for CustodianHealthRecord();
  uint64_t v11 = __chkstk_darwin(v98, v10);
  unint64_t v13 = (unint64_t)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v17 = (char *)&v93 - v16;
  uint64_t v19 = __chkstk_darwin(v15, v18);
  uint64_t v21 = (char *)&v93 - v20;
  uint64_t v23 = __chkstk_darwin(v19, v22);
  uint64_t v25 = (char *)&v93 - v24;
  __chkstk_darwin(v23, v26);
  uint64_t v28 = (char *)&v93 - v27;
  if (!a1 || (self, (uint64_t v29 = swift_dynamicCastObjCClass()) == 0))
  {
    if (a2)
    {
      id v102 = (id)a2;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      type metadata accessor for CKError(0);
      if (swift_dynamicCast())
      {
        uint64_t v42 = (void *)v101;
        sub_10000A6B0((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
        _BridgedStoredNSError.code.getter();
        if (v102 == (id)11)
        {
          id v96 = v42;
          uint64_t v97 = a5;
          if (qword_100320B78 != -1) {
            swift_once();
          }
          uint64_t v43 = type metadata accessor for Logger();
          sub_100007288(v43, (uint64_t)qword_10033E718);
          sub_1001042F0((uint64_t)v100, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
          id v44 = a3;
          uint64_t v45 = Logger.logObject.getter();
          os_log_type_t v46 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v45, v46))
          {
            uint64_t v47 = swift_slowAlloc();
            unint64_t v48 = (void *)swift_slowAlloc();
            id v100 = (id)swift_slowAlloc();
            uint64_t v101 = (uint64_t)v44;
            id v102 = v100;
            *(_DWORD *)uint64_t v47 = 138412546;
            id v49 = v44;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *unint64_t v48 = v44;

            *(_WORD *)(v47 + 12) = 2080;
            uint64_t v50 = UUID.uuidString.getter();
            uint64_t v101 = sub_100135190(v50, v51, (uint64_t *)&v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10010465C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
            _os_log_impl((void *)&_mh_execute_header, v45, v46, "No CKShareRecord %@ exists for zone %s when checking isSharedAndAccepted, zone is not shared.", (uint8_t *)v47, 0x16u);
            sub_100009F04((uint64_t *)&unk_1003216C0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            sub_10010465C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
          }

          ((void (*)(void, void))v97)(0, 0);
          return;
        }
        if (qword_100320B78 != -1) {
          swift_once();
        }
        uint64_t v69 = type metadata accessor for Logger();
        sub_100007288(v69, (uint64_t)qword_10033E718);
        sub_1001042F0((uint64_t)v100, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        id v70 = a3;
        id v71 = v42;
        id v72 = v70;
        os_log_t v73 = (os_log_t)v71;
        uint64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.error.getter();
        int v76 = v75;
        if (os_log_type_enabled(v74, v75))
        {
          uint64_t v77 = swift_slowAlloc();
          id v78 = (void *)swift_slowAlloc();
          id v96 = (id)swift_slowAlloc();
          uint64_t v101 = (uint64_t)v72;
          id v102 = v96;
          *(_DWORD *)uint64_t v77 = 138412802;
          os_log_t v95 = v74;
          os_log_t v93 = v73;
          uint64_t v97 = a5;
          id v79 = v72;
          LODWORD(v94) = v76;
          id v80 = v79;
          a5 = v97;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v78 = v72;

          *(_WORD *)(v77 + 12) = 2080;
          uint64_t v81 = UUID.uuidString.getter();
          uint64_t v101 = sub_100135190(v81, v82, (uint64_t *)&v102);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10010465C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
          *(_WORD *)(v77 + 22) = 2112;
          os_log_t v83 = v93;
          uint64_t v84 = _convertErrorToNSError(_:)();
          uint64_t v101 = v84;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v78[1] = v84;

          os_log_t v85 = v83;
          os_log_t v73 = v95;
          _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v94, "Query for CKShareRecord %@ for zone %s failed with ckerror %@", (uint8_t *)v77, 0x20u);
          sub_100009F04((uint64_t *)&unk_1003216C0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10010465C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        }
      }
      else
      {
        swift_errorRetain();
        if (qword_100320B78 != -1) {
          swift_once();
        }
        uint64_t v56 = type metadata accessor for Logger();
        sub_100007288(v56, (uint64_t)qword_10033E718);
        sub_1001042F0((uint64_t)v100, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        swift_errorRetain();
        id v57 = a3;
        swift_errorRetain();
        id v58 = v57;
        id v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.error.getter();
        int v61 = v60;
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v62 = swift_slowAlloc();
          uint64_t v63 = (void *)swift_slowAlloc();
          id v96 = (id)swift_slowAlloc();
          uint64_t v101 = (uint64_t)v58;
          id v102 = v96;
          *(_DWORD *)uint64_t v62 = 138412802;
          os_log_t v94 = v59;
          LODWORD(v95) = v61;
          uint64_t v97 = a5;
          id v64 = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v63 = v58;

          *(_WORD *)(v62 + 12) = 2080;
          uint64_t v65 = UUID.uuidString.getter();
          uint64_t v101 = sub_100135190(v65, v66, (uint64_t *)&v102);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10010465C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
          *(_WORD *)(v62 + 22) = 2112;
          uint64_t v67 = _convertErrorToNSError(_:)();
          uint64_t v101 = v67;
          a5 = v97;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v63[1] = v67;
          swift_errorRelease();
          swift_errorRelease();
          os_log_t v68 = v94;
          _os_log_impl((void *)&_mh_execute_header, v94, (os_log_type_t)v95, "Query for CKShareRecord %@ for zone %s failed with error %@", (uint8_t *)v62, 0x20u);
          sub_100009F04((uint64_t *)&unk_1003216C0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();

          sub_10010465C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
          swift_errorRelease();
          swift_errorRelease();
        }
      }
    }
    if (qword_100320B78 == -1)
    {
LABEL_42:
      uint64_t v86 = type metadata accessor for Logger();
      sub_100007288(v86, (uint64_t)qword_10033E718);
      sub_1001042F0((uint64_t)v100, v13, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      os_log_type_t v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v87, v88))
      {
        uint64_t v89 = (uint8_t *)swift_slowAlloc();
        id v102 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v89 = 136315138;
        uint64_t v90 = UUID.uuidString.getter();
        uint64_t v101 = sub_100135190(v90, v91, (uint64_t *)&v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10010465C(v13, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Returning failure for isSharedAndAccepted. Zone: %s", v89, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10010465C(v13, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      }

      if (a2)
      {
        uint64_t v92 = a2;
      }
      else
      {
        type metadata accessor for AACustodianError(0);
        uint64_t v101 = -7003;
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_10000A6B0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v92 = (uint64_t)v102;
      }
      swift_errorRetain();
      ((void (*)(uint64_t, uint64_t))a5)(v92, 1);
      swift_errorRelease();
      return;
    }
LABEL_50:
    swift_once();
    goto LABEL_42;
  }
  uint64_t v30 = (void *)v29;
  id v31 = a1;
  id v32 = [v30 participants];
  sub_10000850C(0, &qword_1003236B8);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_100007288(v33, (uint64_t)qword_10033E718);
  sub_1001042F0((uint64_t)v100, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  unint64_t v37 = v13 >> 62;
  uint64_t v97 = a5;
  if (v36)
  {
    id v100 = v31;
    uint64_t v38 = swift_slowAlloc();
    id v102 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 134218242;
    if (v37)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v39 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v101 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2080;
    uint64_t v40 = UUID.uuidString.getter();
    uint64_t v101 = sub_100135190(v40, v41, (uint64_t *)&v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10010465C((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Found %ld participants for zone %s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v31 = v100;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_10010465C((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  }
  if (v37)
  {
    swift_bridgeObjectRetain();
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v52)
    {
LABEL_19:
      a2 = 4;
      a5 = &off_10031D000;
      while (1)
      {
        id v53 = (v13 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v13 + 8 * a2);
        id v54 = v53;
        uint64_t v55 = a2 - 3;
        if (__OFADD__(a2 - 4, 1)) {
          break;
        }
        if (([v53 isCurrentUser] & 1) == 0
          && [v54 acceptanceStatus] == (id)2)
        {
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, void))v97)(1, 0);

          goto LABEL_53;
        }

        ++a2;
        if (v55 == v52) {
          goto LABEL_52;
        }
      }
      __break(1u);
      goto LABEL_50;
    }
  }
  else
  {
    uint64_t v52 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v52) {
      goto LABEL_19;
    }
  }
LABEL_52:
  swift_bridgeObjectRelease();
  ((void (*)(void, void))v97)(0, 0);
LABEL_53:
}

uint64_t sub_100100D0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v65 = a4;
  uint64_t v61 = a3;
  id v63 = a2;
  uint64_t v6 = *a5;
  uint64_t v69 = a5;
  uint64_t v70 = v6;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v66 = *(void *)(v7 - 8);
  uint64_t v67 = (void *)v7;
  __chkstk_darwin(v7, v8);
  uint64_t v62 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v71 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  os_log_t v68 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = v13;
  __chkstk_darwin(v12, v14);
  uint64_t v72 = (uint64_t)&v56 - v15;
  uint64_t v16 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v59 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v59 + 64);
  uint64_t v19 = __chkstk_darwin(v16 - 8, v18);
  uint64_t v60 = (uint64_t)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v56 - v21;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100007288(v23, (uint64_t)qword_10033E778);
  sub_1001042F0(a1, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v58 = a1;
    uint64_t v26 = swift_slowAlloc();
    v74[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315394;
    if (qword_100320C30 != -1) {
      swift_once();
    }
    uint64_t v28 = qword_100326B18;
    unint64_t v27 = unk_100326B20;
    swift_bridgeObjectRetain();
    uint64_t v73 = sub_100135190(v28, v27, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    sub_10000A6B0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v73 = sub_100135190(v29, v30, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10010465C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s - fetching health record for beneficiaryID: %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v58;
  }
  else
  {
    sub_10010465C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
  id v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16);
  uint64_t v56 = v10;
  v57(v72, a1, v10);
  uint64_t v31 = swift_allocObject();
  id v32 = v69;
  swift_weakInit();
  uint64_t v33 = v60;
  sub_1001042F0(a1, v60, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v34 = (*(unsigned __int8 *)(v59 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  unint64_t v35 = (v17 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v36 = (uint64_t (*)(uint64_t))swift_allocObject();
  unint64_t v37 = v63;
  *((void *)v36 + 2) = v63;
  *((void *)v36 + 3) = &off_100301088;
  uint64_t v38 = v65;
  *((void *)v36 + 4) = v61;
  *((void *)v36 + 5) = v38;
  sub_1001044FC(v33, (uint64_t)v36 + v34, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t v58 = v31;
  *(void *)((char *)v36 + v35) = v31;
  *(void *)((char *)v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8)) = v70;
  uint64_t v40 = v66;
  uint64_t v39 = v67;
  unint64_t v41 = v62;
  (*(void (**)(char *, uint64_t, void *))(v66 + 16))(v62, (uint64_t)v32 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__inheritanceStorage, v67);
  id v63 = v37;
  swift_retain();
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, void *))(v40 + 8))(v41, v39);
  uint64_t v67 = sub_100008EF8(v74, v74[3]);
  uint64_t v42 = v68;
  uint64_t v43 = v56;
  v57((uint64_t)v68, v72, v56);
  uint64_t v44 = v71;
  unint64_t v45 = (*(unsigned __int8 *)(v71 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
  unint64_t v46 = (v64 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v47 = (v46 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v48 = (v47 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v49 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v49 + v45, v42, v43);
  uint64_t v50 = (uint64_t (**)(uint64_t))(v49 + v46);
  *uint64_t v50 = sub_100102288;
  v50[1] = v36;
  *(void *)(v49 + v47) = v69;
  unint64_t v51 = (void *)(v49 + v48);
  uint64_t v52 = v63;
  void *v51 = v63;
  v51[1] = &off_100301088;
  *(void *)(v49 + ((v48 + 23) & 0xFFFFFFFFFFFFFFF8)) = v70;
  id v53 = v52;
  swift_retain();
  swift_retain();
  uint64_t v54 = v72;
  sub_1000E53EC(v72, (uint64_t)sub_100102410, v49);
  swift_release();
  sub_100008EA8((uint64_t)v74);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v54, v43);
  return swift_release();
}

uint64_t sub_10010146C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v54 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  id v53 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100321CB0);
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v52 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v50 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100009F04(&qword_100325870);
  uint64_t v48 = *(void *)(v13 - 8);
  uint64_t v49 = v13;
  __chkstk_darwin(v13, v14);
  unint64_t v47 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04(&qword_100321CF8);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100007288(v21, (uint64_t)qword_10033E778);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v43 = v7;
    uint64_t v44 = v6;
    uint64_t v45 = a1;
    uint64_t v46 = a2;
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    v57[0] = v42;
    *(_DWORD *)uint64_t v24 = 136315138;
    if (qword_100320C30 != -1) {
      swift_once();
    }
    uint64_t v26 = qword_100326B18;
    unint64_t v25 = unk_100326B20;
    swift_bridgeObjectRetain();
    v56[0] = sub_100135190(v26, v25, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - started.", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v45;
    a2 = v46;
    uint64_t v6 = v44;
    uint64_t v7 = v43;
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__beneficiaryInfoVerificationProtocol, v16);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  unint64_t v27 = v47;
  uint64_t v28 = v48;
  uint64_t v29 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__accountStore, v49);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v29);
  unint64_t v30 = v50;
  uint64_t v31 = v51;
  uint64_t v32 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__akAccountManager, v52);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
  uint64_t v33 = v55;
  unint64_t v34 = sub_100008EF8(v56, v56[3]);
  unint64_t v35 = sub_100023E8C(*v34, v33);

  sub_100008EA8((uint64_t)v56);
  *(void *)((char *)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData) = v35;
  swift_bridgeObjectRelease();
  sub_100008EA8((uint64_t)v57);
  unint64_t v37 = v53;
  uint64_t v36 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__inheritanceStorage, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v7);
  sub_100008EF8(v57, v57[3]);
  uint64_t v38 = swift_allocObject();
  swift_weakInit();
  uint64_t v39 = (void *)swift_allocObject();
  void v39[2] = v38;
  void v39[3] = a1;
  v39[4] = a2;
  v39[5] = v6;
  swift_retain();
  swift_retain();
  sub_100008810((uint64_t)sub_100101B2C, (uint64_t)v39);
  swift_release();
  swift_release();
  return sub_100008EA8((uint64_t)v57);
}

uint64_t sub_100101AB4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100101AEC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100101B2C(uint64_t a1, char a2)
{
  sub_1000F5D98(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_100101B3C(uint64_t a1, uint64_t a2)
{
  if (a2 >= a1)
  {
    if (a1 >= a2)
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_100007288(v10, (uint64_t)qword_10033E778);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v5, v6)) {
        goto LABEL_15;
      }
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      uint64_t v8 = "idMS has EQUAL number of beneficiaries registered.";
    }
    else
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_100007288(v9, (uint64_t)qword_10033E778);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v5, v6)) {
        goto LABEL_15;
      }
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      uint64_t v8 = "idMS has LESS number of beneficiaries registered.";
    }
    goto LABEL_14;
  }
  if (qword_100320B98 != -1) {
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v4 = type metadata accessor for Logger();
    sub_100007288(v4, (uint64_t)qword_10033E778);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      uint64_t v8 = "idMS has MORE number of beneficiaries registered.";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
      swift_slowDealloc();
    }
LABEL_15:

    uint64_t result = a1 - a2;
    if (!__OFSUB__(a1, a2)) {
      break;
    }
    __break(1u);
LABEL_18:
    swift_once();
  }
  return result;
}

uint64_t sub_100101D54()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100101D8C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100101DCC()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v11 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  unint64_t v9 = (((v11 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void sub_100101FD0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + v5);
  uint64_t v7 = *(NSObject **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_1000F7204(a1, v1 + v4, v6, v7);
}

uint64_t sub_100102084()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100102288(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = (void (*)(uint64_t))v1[4];
  unint64_t v9 = (void (*)(uint64_t))v1[5];
  uint64_t v10 = *(void **)((char *)v1 + v5);
  uint64_t v11 = *(void *)((char *)v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000F8050(a1, v6, v7, v8, v9, (uint64_t (*)())((char *)v1 + v4), v10, v11);
}

uint64_t sub_100102338()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100102410(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void (**)(void))(v1 + v5);
  uint64_t v9 = *(void *)(v1 + v5 + 8);
  uint64_t v10 = *(char **)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + v7);
  uint64_t v12 = *(void *)(v1 + v7 + 8);

  return sub_1000F9628(a1, v1 + v4, v8, v9, v10, v11, v12);
}

uint64_t sub_1001024D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_1003235F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100102540()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v14 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = (v14 + 16) & ~v14;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v3 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v12 = *(void *)(*(void *)(v3 - 8) + 64);
  uint64_t v15 = v0;
  unint64_t v5 = v0 + v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(unint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v5 + v1[7]), *(void *)(v5 + v1[7] + 8));
  v8(v5 + v1[8], v6);
  sub_100013198(*(void *)(v5 + v1[9]), *(void *)(v5 + v1[9] + 8));
  unint64_t v9 = v5 + v1[11];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6)) {
    v8(v9, v6);
  }
  unint64_t v10 = (v4 + ((((((v13 + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  v8(v15 + v10, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v15 + v10 + *(int *)(v3 + 36), v6);
  sub_100013198(*(void *)(v15 + v10 + *(int *)(v3 + 40)), *(void *)(v15 + v10 + *(int *)(v3 + 40) + 8));

  return _swift_deallocObject(v15, ((v12 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v14 | v4 | 7);
}

uint64_t sub_100102850(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  return sub_1000F8D54(a1, v1 + v4, *(void *)(v1 + v5), *(void *)(v1 + v5 + 8), *(void (**)(uint64_t))(v1 + v6), *(void *)(v1 + v6 + 8), *(void *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), v1+ ((*(unsigned __int8 *)(v7 + 80) + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
}

uint64_t sub_100102988()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v22 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v18 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v2 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v19 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v17 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v23 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v23 - 8) + 80);
  uint64_t v16 = *(void *)(*(void *)(v23 - 8) + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v20 = (v22 + 40) & ~v22;
  uint64_t v4 = v0 + v20;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v20, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v20 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v20 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  uint64_t v9 = (v20 + v18 + v19) & ~v19;
  uint64_t v10 = (v9 + v17 + v3) & ~v3;
  unint64_t v21 = ((((v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7(v0 + v9, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7(v0 + v9 + *(int *)(v2 + 36), v5);
  sub_100013198(*(void *)(v0 + v9 + *(int *)(v2 + 40)), *(void *)(v0 + v9 + *(int *)(v2 + 40) + 8));
  uint64_t v11 = v0 + v10;
  v7(v0 + v10, v5);
  uint64_t v12 = v23;
  uint64_t v13 = v11 + *(int *)(v23 + 20);
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  sub_100013198(*(void *)(v11 + *(int *)(v12 + 24)), *(void *)(v11 + *(int *)(v12 + 24) + 8));
  v7(v11 + *(int *)(v23 + 28), v5);
  sub_100013198(*(void *)(v11 + *(int *)(v12 + 32)), *(void *)(v11 + *(int *)(v12 + 32) + 8));
  swift_release();

  return _swift_deallocObject(v0, v21, v22 | v19 | v3 | 7);
}

uint64_t sub_100102D88(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(type metadata accessor for InheritanceHealthRecord() - 8);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000FB42C(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + v4, (uint64_t)v1 + v7, (uint64_t)v1 + v10, *(uint64_t (**)(void))((char *)v1 + v11), *(uint64_t *)((char *)v1 + v11 + 8));
}

uint64_t sub_100102F04()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + v1[7];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  sub_100013198(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100103094(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for InheritanceHealthRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void (**)(uint64_t))(v2 + v7);
  uint64_t v9 = *(void *)(v2 + v7 + 8);

  return sub_1000FE55C(a1, v4, v2 + v6, v8, v9);
}

void sub_100103150(char a1, void *a2, uint64_t a3)
{
  *(unsigned char *)(a3 + qword_10032C768) = a1;
  uint64_t v4 = qword_10032C760;
  uint64_t v5 = *(void **)(a3 + qword_10032C760);
  *(void *)(a3 + qword_10032C760) = a2;
  id v6 = a2;

  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007288(v7, (uint64_t)qword_10033E778);
  swift_unknownObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    unint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    if (qword_100320C30 != -1) {
      swift_once();
    }
    uint64_t v12 = qword_100326B18;
    unint64_t v13 = unk_100326B20;
    swift_bridgeObjectRetain();
    sub_100135190(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2112;
    uint64_t v14 = *(void **)(a3 + v4);
    if (v14) {
      id v15 = v14;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v11 = v14;
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s: claimCodeVerificationError appended to the event\n%@", (uint8_t *)v10, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
}

void sub_100103420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a2;
  uint64_t v5 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v31 + 64);
  __chkstk_darwin(v5, v7);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v5 + 36)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v8 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v8 = &qword_10033EA18;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  swift_bridgeObjectRetain();
  id v11 = sub_10028CC20(v9, v10);
  id v12 = [v11 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_10000850C(0, &qword_100323560);
  uint64_t v13 = UUID.uuidString.getter();
  id v15 = v14;
  v16._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16._object = v17;
  v18._countAndFlagsBits = v13;
  v18._object = v15;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v16).super.isa;
  sub_10000850C(0, (unint64_t *)&qword_10032B4B0);
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  uint64_t v23 = isa;
  v24._countAndFlagsBits = v20;
  v24._object = v22;
  Class v25 = CKRecordID.init(recordName:zoneID:)(v24, (CKRecordZoneID)v23).super.isa;
  sub_1001042F0(a1, (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  unint64_t v26 = (*(unsigned __int8 *)(v31 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v25;
  sub_1001044FC((uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v26, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  uint64_t v28 = (void *)(v27 + ((v6 + v26 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v28 = v32;
  v28[1] = a3;
  aBlock[4] = sub_100103950;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  void aBlock[3] = &unk_1002FB8C0;
  uint64_t v29 = _Block_copy(aBlock);
  unint64_t v30 = v25;
  swift_retain();
  swift_release();
  [v12 fetchRecordWithID:v30 completionHandler:v29];
  _Block_release(v29);
}

uint64_t sub_1001037C0()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + v1[7];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  sub_100013198(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100103950(uint64_t a1, uint64_t a2)
{
  return sub_100104590(a1, a2, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000FEE74);
}

uint64_t sub_10010397C(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_100103988()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  unint64_t v5 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  unint64_t v15 = ((((*(void *)(*(void *)v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v16 = v2 | v6 | 7;
  swift_release();
  uint64_t v8 = v0 + v3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10(v8 + v1[11], v9);
  sub_100013198(*(void *)(v8 + v1[12]), *(void *)(v8 + v1[12] + 8));
  uint64_t v11 = v0 + v7;
  v10(v0 + v7, v9);
  uint64_t v12 = v0 + v7 + v5[7];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_100013198(*(void *)(v11 + v5[8]), *(void *)(v11 + v5[8] + 8));
  v10(v0 + v7 + v5[9], v9);
  sub_100013198(*(void *)(v11 + v5[10]), *(void *)(v11 + v5[10] + 8));
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v15, v16);
}

uint64_t sub_100103C00(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for InheritanceHealthRecord() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = v1 + v7;
  uint64_t v11 = *(void *)(v1 + v8);
  uint64_t v12 = *(void *)(v1 + v8 + 8);
  uint64_t v13 = v1 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = *(uint64_t (**)(void))v13;
  uint64_t v15 = *(void *)(v13 + 8);

  return sub_1000FCE50(a1, v9, v1 + v4, v10, v11, v12, v14, v15);
}

uint64_t sub_100103D18()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));

  return _swift_deallocObject(v0, v5, v4);
}

void sub_100103E6C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_1000FDC04(a1, v4);
}

uint64_t sub_100103F08()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100103F40(uint64_t a1)
{
  return sub_1000FE23C(a1, *(void (**)(uint64_t))(v1 + 16));
}

void sub_100103F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a2;
  uint64_t v5 = type metadata accessor for CustodianHealthRecord();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v31 + 64);
  __chkstk_darwin(v5, v7);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v5 + 36)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    unint64_t v8 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    unint64_t v8 = &qword_10033E9F8;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  swift_bridgeObjectRetain();
  id v11 = sub_10028CC20(v9, v10);
  id v12 = [v11 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_10000850C(0, &qword_100323560);
  uint64_t v13 = UUID.uuidString.getter();
  uint64_t v15 = v14;
  v16._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16._object = v17;
  v18._countAndFlagsBits = v13;
  v18._object = v15;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v16).super.isa;
  sub_10000850C(0, (unint64_t *)&qword_10032B4B0);
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  uint64_t v23 = isa;
  v24._countAndFlagsBits = v20;
  v24._object = v22;
  Class v25 = CKRecordID.init(recordName:zoneID:)(v24, (CKRecordZoneID)v23).super.isa;
  sub_1001042F0(a1, (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  unint64_t v26 = (*(unsigned __int8 *)(v31 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v25;
  sub_1001044FC((uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v26, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  uint64_t v28 = (void *)(v27 + ((v6 + v26 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v28 = v32;
  v28[1] = a3;
  aBlock[4] = sub_100104564;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  void aBlock[3] = &unk_1002FB988;
  uint64_t v29 = _Block_copy(aBlock);
  unint64_t v30 = v25;
  swift_retain();
  swift_release();
  [v12 fetchRecordWithID:v30 completionHandler:v29];
  _Block_release(v29);
}

uint64_t sub_1001042F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100104358()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianHealthRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);

  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  v6(v0 + v3 + v1[5], v5);
  uint64_t v7 = v0 + v3 + v1[6];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v0 + v3 + v1[8]), *(void *)(v0 + v3 + v1[8] + 8));
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1001044FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100104564(uint64_t a1, uint64_t a2)
{
  return sub_100104590(a1, a2, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000FFD94);
}

uint64_t sub_100104590(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a3(0) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v10 = v4 + v8;
  id v11 = (uint64_t *)(v4 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];

  return a4(a1, a2, v9, v10, v12, v13);
}

uint64_t sub_10010465C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t static OSTransaction.named(_:block:)(char *a1, uint64_t a2, int a3, void (*a4)(void))
{
  swift_allocObject();
  sub_100104754(a1, a2, a3);
  a4();

  return swift_release();
}

{
  swift_initStackObject();
  sub_100104754(a1, a2, a3);
  a4();
  return swift_release();
}

uint64_t sub_100104754(char *a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = __chkstk_darwin(v8, v10);
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = (char *)&v34 - v13;
  int v35 = a3;
  uint64_t v34 = a2;
  if (a3)
  {
    unint64_t v13 = (unint64_t)a1 >> 32;
    if (!((unint64_t)a1 >> 32))
    {
      if (a1 >> 11 != 27)
      {
        LODWORD(v13) = a1 >> 16;
        if (a1 >> 16 > 0x10)
        {
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
        if ((a1 & 0xFFFFFF80) != 0)
        {
LABEL_16:
          int v29 = (a1 & 0x3F) << 8;
          unsigned int v30 = (v29 | (a1 >> 6)) + 33217;
          unsigned int v31 = (v29 | (a1 >> 6) & 0x3F) << 8;
          unsigned int v32 = (((v31 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
          unsigned int v33 = (v31 | (a1 >> 12)) + 8487393;
          if (v13) {
            unsigned int v15 = v32;
          }
          else {
            unsigned int v15 = v33;
          }
          if (a1 < 0x800) {
            unsigned int v15 = v30;
          }
          goto LABEL_10;
        }
        if (a1 <= 0xFF)
        {
          unsigned int v15 = ((_BYTE)a1 + 1);
LABEL_10:
          uint64_t v36 = (v15 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v15) >> 3)) & 7)));
          goto LABEL_11;
        }
        __break(1u);
      }
      __break(1u);
      goto LABEL_24;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v36 = static String._fromUTF8Repairing(_:)();
  uint64_t v37 = v16;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 46;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = v36;
  uint64_t v19 = v37;
  UUID.init()();
  uint64_t v20 = UUID.uuidString.getter();
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  uint64_t v36 = v18;
  uint64_t v37 = v19;
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = v36;
  uint64_t v24 = v37;
  v4[2] = v36;
  v4[3] = v24;
  swift_bridgeObjectRetain();
  static os_log_type_t.default.getter();
  sub_100009F04(&qword_100326D20);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1002A9C00;
  *(void *)(v26 + 56) = &type metadata for String;
  *(void *)(v26 + 64) = sub_100104CE8();
  *(void *)(v26 + 32) = v25;
  *(void *)(v26 + 40) = v24;
  sub_100104D3C();
  swift_bridgeObjectRetain();
  uint64_t v27 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v28 = os_transaction_create();
  uint64_t result = swift_release();
  if (v28)
  {
    v4[4] = v28;
    type metadata accessor for OSActivity();
    swift_allocObject();
    v4[5] = sub_1001A7860(a1, v34, v35);
    return (uint64_t)v4;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_100104AC0()
{
  uint64_t v1 = v0;
  static os_log_type_t.default.getter();
  sub_100009F04(&qword_100326D20);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1002A9C00;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_100104CE8();
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = v3;
  sub_100104D3C();
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  uint64_t v6 = (os_activity_scope_state_s *)(*(void *)(v1 + 40) + 24);
  swift_beginAccess();
  os_activity_scope_leave(v6);
  return swift_endAccess();
}

uint64_t OSTransaction.deinit()
{
  sub_100104AC0();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t OSTransaction.__deallocating_deinit()
{
  sub_100104AC0();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OSTransaction()
{
  return self;
}

unint64_t sub_100104CE8()
{
  unint64_t result = qword_100326D28;
  if (!qword_100326D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326D28);
  }
  return result;
}

unint64_t sub_100104D3C()
{
  unint64_t result = qword_100326D30;
  if (!qword_100326D30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100326D30);
  }
  return result;
}

void *sub_100104D7C(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    uint64_t v10 = a3[7];
    __dst = (char *)a1 + v10;
    id v11 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v48(v11, 1, v12))
    {
      uint64_t v14 = sub_100009F04((uint64_t *)&unk_100321CE0);
      memcpy(__dst, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v16 = a3[8];
    uint64_t v17 = a3[9];
    uint64_t v18 = (void *)((char *)v4 + v16);
    uint64_t v19 = (void *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    unint64_t v21 = (void *)((char *)v4 + v17);
    uint64_t v22 = (void *)((char *)a2 + v17);
    uint64_t v23 = v22[1];
    *unint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = a3[10];
    uint64_t v25 = (char *)v4 + v24;
    uint64_t v26 = (void *)((char *)a2 + v24);
    unint64_t v27 = *(void *)((char *)a2 + v24 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    }
    else
    {
      uint64_t v28 = *v26;
      sub_100013140(*v26, v27);
      *(void *)uint64_t v25 = v28;
      *((void *)v25 + 1) = v27;
    }
    uint64_t v29 = a3[11];
    unsigned int v30 = (char *)v4 + v29;
    unsigned int v31 = (char *)a2 + v29;
    unint64_t v32 = *((void *)v31 + 1);
    if (v32 >> 60 == 15)
    {
      *(_OWORD *)unsigned int v30 = *(_OWORD *)v31;
    }
    else
    {
      uint64_t v33 = *(void *)v31;
      sub_100013140(*(void *)v31, *((void *)v31 + 1));
      *(void *)unsigned int v30 = v33;
      *((void *)v30 + 1) = v32;
    }
    uint64_t v34 = a3[12];
    int v35 = (char *)v4 + v34;
    uint64_t v36 = (char *)a2 + v34;
    unint64_t v37 = *((void *)v36 + 1);
    if (v37 >> 60 == 15)
    {
      *(_OWORD *)int v35 = *(_OWORD *)v36;
    }
    else
    {
      uint64_t v38 = *(void *)v36;
      sub_100013140(*(void *)v36, *((void *)v36 + 1));
      *(void *)int v35 = v38;
      *((void *)v35 + 1) = v37;
    }
    uint64_t v39 = a3[13];
    uint64_t v40 = a3[14];
    uint64_t v41 = (char *)v4 + v39;
    uint64_t v42 = (char *)a2 + v39;
    *(void *)uint64_t v41 = *(void *)v42;
    v41[8] = v42[8];
    *((unsigned char *)v4 + v40) = *((unsigned char *)a2 + v40);
    uint64_t v43 = a3[16];
    *(void *)((char *)v4 + a3[15]) = *(void *)((char *)a2 + a3[15]);
    uint64_t v44 = (void *)((char *)v4 + v43);
    uint64_t v45 = (void *)((char *)a2 + v43);
    uint64_t v46 = v45[1];
    void *v44 = *v45;
    v44[1] = v46;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100105064(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(a1 + a2[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  uint64_t v9 = (uint64_t *)(a1 + a2[11]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  id v11 = (uint64_t *)(a1 + a2[12]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_100013198(*v11, v12);
  }

  return swift_bridgeObjectRelease();
}

void *sub_1001051C8(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  uint64_t v9 = a3[7];
  __dst = (char *)a1 + v9;
  unint64_t v10 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v46(v10, 1, v11))
  {
    uint64_t v13 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v14 = a3[8];
  uint64_t v15 = a3[9];
  uint64_t v16 = (void *)((char *)a1 + v14);
  uint64_t v17 = (void *)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  void *v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = (void *)((char *)a1 + v15);
  uint64_t v20 = (void *)((char *)a2 + v15);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = a3[10];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (void *)((char *)a2 + v22);
  unint64_t v25 = *(void *)((char *)a2 + v22 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }
  else
  {
    uint64_t v26 = *v24;
    sub_100013140(*v24, v25);
    *(void *)uint64_t v23 = v26;
    *((void *)v23 + 1) = v25;
  }
  uint64_t v27 = a3[11];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  unint64_t v30 = *((void *)v29 + 1);
  if (v30 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  }
  else
  {
    uint64_t v31 = *(void *)v29;
    sub_100013140(*(void *)v29, *((void *)v29 + 1));
    *(void *)uint64_t v28 = v31;
    *((void *)v28 + 1) = v30;
  }
  uint64_t v32 = a3[12];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  unint64_t v35 = *((void *)v34 + 1);
  if (v35 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  }
  else
  {
    uint64_t v36 = *(void *)v34;
    sub_100013140(*(void *)v34, *((void *)v34 + 1));
    *(void *)uint64_t v33 = v36;
    *((void *)v33 + 1) = v35;
  }
  uint64_t v37 = a3[13];
  uint64_t v38 = a3[14];
  uint64_t v39 = (char *)a1 + v37;
  uint64_t v40 = (char *)a2 + v37;
  *(void *)uint64_t v39 = *(void *)v40;
  v39[8] = v40[8];
  *((unsigned char *)a1 + v38) = *((unsigned char *)a2 + v38);
  uint64_t v41 = a3[16];
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  uint64_t v42 = (void *)((char *)a1 + v41);
  uint64_t v43 = (void *)((char *)a2 + v41);
  uint64_t v44 = v43[1];
  *uint64_t v42 = *v43;
  v42[1] = v44;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100105460(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[8];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[10];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  unint64_t v24 = *(void *)((char *)a2 + v21 + 8);
  if (*(void *)((char *)a1 + v21 + 8) >> 60 == 15)
  {
    if (v24 >> 60 != 15)
    {
      uint64_t v25 = *v23;
      sub_100013140(v25, v24);
      *uint64_t v22 = v25;
      v22[1] = v24;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v24 >> 60 == 15)
  {
    sub_1000AD378((uint64_t)v22);
LABEL_12:
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    goto LABEL_14;
  }
  uint64_t v26 = *v23;
  sub_100013140(v26, v24);
  uint64_t v27 = *v22;
  unint64_t v28 = v22[1];
  *uint64_t v22 = v26;
  v22[1] = v24;
  sub_100013198(v27, v28);
LABEL_14:
  uint64_t v29 = a3[11];
  unint64_t v30 = (void *)((char *)a1 + v29);
  uint64_t v31 = (void *)((char *)a2 + v29);
  unint64_t v32 = *(void *)((char *)a2 + v29 + 8);
  if (*(void *)((char *)a1 + v29 + 8) >> 60 == 15)
  {
    if (v32 >> 60 != 15)
    {
      uint64_t v33 = *v31;
      sub_100013140(v33, v32);
      *unint64_t v30 = v33;
      v30[1] = v32;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v32 >> 60 == 15)
  {
    sub_1000AD378((uint64_t)v30);
LABEL_19:
    *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
    goto LABEL_21;
  }
  uint64_t v34 = *v31;
  sub_100013140(v34, v32);
  uint64_t v35 = *v30;
  unint64_t v36 = v30[1];
  *unint64_t v30 = v34;
  v30[1] = v32;
  sub_100013198(v35, v36);
LABEL_21:
  uint64_t v37 = a3[12];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  unint64_t v40 = *(void *)((char *)a2 + v37 + 8);
  if (*(void *)((char *)a1 + v37 + 8) >> 60 != 15)
  {
    if (v40 >> 60 != 15)
    {
      uint64_t v42 = *v39;
      sub_100013140(v42, v40);
      uint64_t v43 = *v38;
      unint64_t v44 = v38[1];
      *uint64_t v38 = v42;
      v38[1] = v40;
      sub_100013198(v43, v44);
      goto LABEL_28;
    }
    sub_1000AD378((uint64_t)v38);
    goto LABEL_26;
  }
  if (v40 >> 60 == 15)
  {
LABEL_26:
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
    goto LABEL_28;
  }
  uint64_t v41 = *v39;
  sub_100013140(v41, v40);
  *uint64_t v38 = v41;
  v38[1] = v40;
LABEL_28:
  uint64_t v45 = a3[13];
  uint64_t v46 = (char *)a1 + v45;
  unint64_t v47 = (char *)a2 + v45;
  uint64_t v48 = *(void *)v47;
  v46[8] = v47[8];
  *(void *)uint64_t v46 = v48;
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  uint64_t v49 = a3[16];
  uint64_t v50 = (void *)((char *)a1 + v49);
  uint64_t v51 = (void *)((char *)a2 + v49);
  *uint64_t v50 = *v51;
  v50[1] = v51[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100105878(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  uint64_t v14 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  uint64_t v15 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = *(void *)v17;
  uint64_t v18 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  *(_OWORD *)((char *)a1 + a3[16]) = *(_OWORD *)((char *)a2 + a3[16]);
  return a1;
}

void *sub_100105A10(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[9];
  unint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *unint64_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[10];
  uint64_t v29 = (uint64_t)a1 + v28;
  unint64_t v30 = (char *)a2 + v28;
  unint64_t v31 = *(void *)((char *)a1 + v28 + 8);
  if (v31 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    goto LABEL_12;
  }
  unint64_t v32 = *((void *)v30 + 1);
  if (v32 >> 60 == 15)
  {
    sub_1000AD378(v29);
    goto LABEL_10;
  }
  uint64_t v33 = *(void *)v29;
  *(void *)uint64_t v29 = *(void *)v30;
  *(void *)(v29 + 8) = v32;
  sub_100013198(v33, v31);
LABEL_12:
  uint64_t v34 = a3[11];
  uint64_t v35 = (uint64_t)a1 + v34;
  unint64_t v36 = (char *)a2 + v34;
  unint64_t v37 = *(void *)((char *)a1 + v34 + 8);
  if (v37 >> 60 == 15)
  {
LABEL_15:
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    goto LABEL_17;
  }
  unint64_t v38 = *((void *)v36 + 1);
  if (v38 >> 60 == 15)
  {
    sub_1000AD378(v35);
    goto LABEL_15;
  }
  uint64_t v39 = *(void *)v35;
  *(void *)uint64_t v35 = *(void *)v36;
  *(void *)(v35 + 8) = v38;
  sub_100013198(v39, v37);
LABEL_17:
  uint64_t v40 = a3[12];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  unint64_t v43 = *(void *)((char *)a1 + v40 + 8);
  if (v43 >> 60 != 15)
  {
    unint64_t v44 = v42[1];
    if (v44 >> 60 != 15)
    {
      uint64_t v45 = *v41;
      *uint64_t v41 = *v42;
      v41[1] = v44;
      sub_100013198(v45, v43);
      goto LABEL_22;
    }
    sub_1000AD378((uint64_t)v41);
  }
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
LABEL_22:
  uint64_t v46 = a3[13];
  uint64_t v47 = a3[14];
  uint64_t v48 = (char *)a1 + v46;
  uint64_t v49 = (char *)a2 + v46;
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v49[8];
  *((unsigned char *)a1 + v47) = *((unsigned char *)a2 + v47);
  uint64_t v50 = a3[16];
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  uint64_t v51 = (void *)((char *)a1 + v50);
  uint64_t v52 = (void *)((char *)a2 + v50);
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  void *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100105D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100105D44);
}

uint64_t sub_100105D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100009F04((uint64_t *)&unk_100321CE0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 28);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_100105E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100105E18);
}

uint64_t sub_100105E18(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = sub_100009F04((uint64_t *)&unk_100321CE0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CustodianRecoveryData()
{
  uint64_t result = qword_100326D98;
  if (!qword_100326D98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100105F10()
{
  sub_10001AAF8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100105FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v69 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for CustodianRecoveryData();
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  uint64_t v8 = a2 + v7[7];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  uint64_t v68 = v8;
  v10(v8, 1, 1, v9);
  uint64_t v11 = (void *)(a2 + v7[8]);
  *uint64_t v11 = 0;
  v11[1] = 0;
  uint64_t v72 = v11;
  uint64_t v12 = (void *)(a2 + v7[9]);
  *uint64_t v12 = 0;
  v12[1] = 0;
  *(_OWORD *)(a2 + v7[10]) = xmmword_1002AD240;
  uint64_t v70 = (uint64_t *)(a2 + v7[11]);
  *(_OWORD *)uint64_t v70 = xmmword_1002AD240;
  uint64_t v71 = (uint64_t *)(a2 + v7[12]);
  *(_OWORD *)uint64_t v71 = xmmword_1002AD240;
  uint64_t v13 = a2 + v7[13];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  *(unsigned char *)(a2 + v7[14]) = 0;
  *(void *)(a2 + v7[15]) = 1;
  uint64_t v14 = (void *)(a2 + v7[16]);
  *uint64_t v14 = 0;
  v14[1] = 0;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E748);
  swift_bridgeObjectRetain_n();
  int v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v67 = v14;
    v74[0] = v19;
    uint64_t v66 = v13;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v64 = v18 + 4;
    swift_bridgeObjectRetain();
    uint64_t v20 = Dictionary.description.getter();
    uint64_t v65 = v12;
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    *(void *)&long long v75 = sub_100135190(v20, v22, v74);
    uint64_t v13 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v12 = v65;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Got push with user info: %s", v18, 0xCu);
    swift_arrayDestroy();
    uint64_t v14 = v67;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(void *)&long long v75 = 0xD000000000000011;
  *((void *)&v75 + 1) = 0x800000010029B810;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v23 = sub_100135A98((uint64_t)v74), (v24 & 1) != 0))
  {
    sub_100047DD4(*(void *)(a1 + 56) + 32 * v23, (uint64_t)&v75);
  }
  else
  {
    long long v75 = 0u;
    long long v76 = 0u;
  }
  sub_100098CF0((uint64_t)v74);
  if (*((void *)&v76 + 1))
  {
    int v25 = swift_dynamicCast();
    if (v25) {
      uint64_t v26 = v73[0];
    }
    else {
      uint64_t v26 = 0;
    }
    if (v25) {
      uint64_t v27 = v73[1];
    }
    else {
      uint64_t v27 = 0;
    }
  }
  else
  {
    sub_100006574((uint64_t)&v75, &qword_100328490);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  swift_bridgeObjectRelease();
  *(void *)a2 = v26;
  *(void *)(a2 + 8) = v27;
  strcpy((char *)v73, "custodianUUID");
  HIWORD(v73[1]) = -4864;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v28 = sub_100135A98((uint64_t)v74), (v29 & 1) != 0))
  {
    sub_100047DD4(*(void *)(a1 + 56) + 32 * v28, (uint64_t)&v75);
  }
  else
  {
    long long v75 = 0u;
    long long v76 = 0u;
  }
  sub_100098CF0((uint64_t)v74);
  if (*((void *)&v76 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v30 = (uint64_t)v69;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      sub_100018A54(v30, v68);
    }
  }
  else
  {
    sub_100006574((uint64_t)&v75, &qword_100328490);
  }
  strcpy((char *)&v75, "ownerAppleId");
  BYTE13(v75) = 0;
  HIWORD(v75) = -5120;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v31 = sub_100135A98((uint64_t)v74), (v32 & 1) != 0))
  {
    sub_100047DD4(*(void *)(a1 + 56) + 32 * v31, (uint64_t)&v75);
  }
  else
  {
    long long v75 = 0u;
    long long v76 = 0u;
  }
  sub_100098CF0((uint64_t)v74);
  if (*((void *)&v76 + 1))
  {
    int v33 = swift_dynamicCast();
    if (v33) {
      uint64_t v34 = v73[0];
    }
    else {
      uint64_t v34 = 0;
    }
    if (v33) {
      uint64_t v35 = v73[1];
    }
    else {
      uint64_t v35 = 0;
    }
  }
  else
  {
    sub_100006574((uint64_t)&v75, &qword_100328490);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
  }
  unint64_t v36 = v72;
  swift_bridgeObjectRelease();
  void *v36 = v34;
  v36[1] = v35;
  *(void *)&long long v75 = 0xD000000000000015;
  *((void *)&v75 + 1) = 0x800000010029D0A0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v37 = sub_100135A98((uint64_t)v74), (v38 & 1) != 0))
  {
    sub_100047DD4(*(void *)(a1 + 56) + 32 * v37, (uint64_t)&v75);
  }
  else
  {
    long long v75 = 0u;
    long long v76 = 0u;
  }
  sub_100098CF0((uint64_t)v74);
  if (*((void *)&v76 + 1))
  {
    int v39 = swift_dynamicCast();
    if (v39) {
      uint64_t v40 = v73[0];
    }
    else {
      uint64_t v40 = 0;
    }
    if (v39) {
      uint64_t v41 = v73[1];
    }
    else {
      uint64_t v41 = 0;
    }
  }
  else
  {
    sub_100006574((uint64_t)&v75, &qword_100328490);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
  }
  swift_bridgeObjectRelease();
  *uint64_t v12 = v40;
  v12[1] = v41;
  v73[0] = 0x617461646161;
  v73[1] = 0xE600000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v42 = sub_100135A98((uint64_t)v74), (v43 & 1) != 0))
  {
    sub_100047DD4(*(void *)(a1 + 56) + 32 * v42, (uint64_t)&v75);
  }
  else
  {
    long long v75 = 0u;
    long long v76 = 0u;
  }
  sub_100098CF0((uint64_t)v74);
  if (*((void *)&v76 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v44 = Data.init(base64Encoded:options:)();
      uint64_t v46 = v45;
      swift_bridgeObjectRelease();
      uint64_t v47 = v70;
      sub_1000196A0(*v70, v70[1]);
      *uint64_t v47 = v44;
      v47[1] = v46;
    }
  }
  else
  {
    sub_100006574((uint64_t)&v75, &qword_100328490);
  }
  strcpy((char *)v73, "idmsdata");
  BYTE1(v73[1]) = 0;
  WORD1(v73[1]) = 0;
  HIDWORD(v73[1]) = -402653184;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v48 = sub_100135A98((uint64_t)v74), (v49 & 1) != 0))
  {
    sub_100047DD4(*(void *)(a1 + 56) + 32 * v48, (uint64_t)&v75);
  }
  else
  {
    long long v75 = 0u;
    long long v76 = 0u;
  }
  sub_100098CF0((uint64_t)v74);
  if (*((void *)&v76 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v50 = Data.init(base64Encoded:options:)();
      uint64_t v52 = v51;
      swift_bridgeObjectRelease();
      uint64_t v53 = v71;
      sub_1000196A0(*v71, v71[1]);
      *uint64_t v53 = v50;
      v53[1] = v52;
    }
  }
  else
  {
    sub_100006574((uint64_t)&v75, &qword_100328490);
  }
  *(void *)&long long v75 = 25445;
  *((void *)&v75 + 1) = 0xE200000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v54 = sub_100135A98((uint64_t)v74), (v55 & 1) != 0))
  {
    sub_100047DD4(*(void *)(a1 + 56) + 32 * v54, (uint64_t)&v75);
  }
  else
  {
    long long v75 = 0u;
    long long v76 = 0u;
  }
  sub_100098CF0((uint64_t)v74);
  if (*((void *)&v76 + 1))
  {
    int v56 = swift_dynamicCast();
    uint64_t v57 = v73[0];
    if (!v56) {
      uint64_t v57 = 0;
    }
    char v58 = v56 ^ 1;
  }
  else
  {
    sub_100006574((uint64_t)&v75, &qword_100328490);
    uint64_t v57 = 0;
    char v58 = 1;
  }
  *(void *)uint64_t v13 = v57;
  *(unsigned char *)(v13 + 8) = v58;
  v73[0] = 0xD000000000000012;
  v73[1] = 0x8000000100299F50;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v59 = sub_100135A98((uint64_t)v74), (v60 & 1) != 0))
  {
    sub_100047DD4(*(void *)(a1 + 56) + 32 * v59, (uint64_t)&v75);
  }
  else
  {
    long long v75 = 0u;
    long long v76 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100098CF0((uint64_t)v74);
  if (!*((void *)&v76 + 1)) {
    return sub_100006574((uint64_t)&v75, &qword_100328490);
  }
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v62 = v73[0];
    uint64_t v63 = v73[1];
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v14 = v62;
    v14[1] = v63;
  }
  return result;
}

uint64_t sub_1001069A4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v73 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v74 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v72 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100007288(v14, (uint64_t)qword_10033E748);
  sub_100011ABC((uint64_t)a1, (uint64_t)v13);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v70 = v7;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v76 = swift_slowAlloc();
    uint64_t v71 = v1;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v19 = sub_100107BF4();
    uint64_t v75 = sub_100135190(v19, v20, &v76);
    uint64_t v2 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100011B20((uint64_t)v13);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Updating recovery data with data: %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v70;
    swift_slowDealloc();
  }
  else
  {
    sub_100011B20((uint64_t)v13);
  }

  uint64_t v21 = a1[1];
  uint64_t v23 = (uint64_t)v73;
  uint64_t v22 = v74;
  if (v21)
  {
    uint64_t v24 = *a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v24;
    v2[1] = v21;
  }
  uint64_t v25 = a1[3];
  if (v25)
  {
    uint64_t v26 = a1[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v2[2] = v26;
    v2[3] = v25;
  }
  uint64_t v27 = a1[5];
  if (v27)
  {
    uint64_t v28 = a1[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v2[4] = v28;
    v2[5] = v27;
  }
  sub_100108374((uint64_t)a1 + v10[7], v23);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v7) == 1)
  {
    uint64_t result = sub_100006574(v23, (uint64_t *)&unk_100321CE0);
  }
  else
  {
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
    unint64_t v31 = v72;
    v30(v72, v23, v7);
    uint64_t v32 = (uint64_t)v2 + v10[7];
    sub_100006574(v32, (uint64_t *)&unk_100321CE0);
    v30((char *)v32, (uint64_t)v31, v7);
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v32, 0, 1, v7);
  }
  uint64_t v33 = v10[8];
  uint64_t v34 = *(void *)((char *)a1 + v33 + 8);
  if (v34)
  {
    uint64_t v35 = *(void *)((char *)a1 + v33);
    unint64_t v36 = (void *)((char *)v2 + v33);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    void *v36 = v35;
    v36[1] = v34;
  }
  uint64_t v37 = v10[9];
  uint64_t v38 = *(void *)((char *)a1 + v37 + 8);
  if (v38)
  {
    uint64_t v39 = *(void *)((char *)a1 + v37);
    uint64_t v40 = (void *)((char *)v2 + v37);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v40 = v39;
    v40[1] = v38;
  }
  uint64_t v41 = v10[11];
  unint64_t v42 = (void *)((char *)a1 + v41);
  unint64_t v43 = *(void *)((char *)a1 + v41 + 8);
  if (v43 >> 60 != 15)
  {
    uint64_t v44 = *v42;
    uint64_t v45 = (void *)((char *)v2 + v41);
    uint64_t v46 = *(void *)((char *)v2 + v41);
    unint64_t v47 = *(void *)((char *)v2 + v41 + 8);
    sub_100013140(*v42, *(void *)((char *)a1 + v41 + 8));
    uint64_t result = sub_1000196A0(v46, v47);
    *uint64_t v45 = v44;
    v45[1] = v43;
  }
  uint64_t v48 = v10[12];
  char v49 = (void *)((char *)a1 + v48);
  unint64_t v50 = *(void *)((char *)a1 + v48 + 8);
  if (v50 >> 60 != 15)
  {
    uint64_t v51 = *v49;
    uint64_t v52 = (void *)((char *)v2 + v48);
    uint64_t v53 = *(void *)((char *)v2 + v48);
    unint64_t v54 = *(void *)((char *)v2 + v48 + 8);
    sub_100013140(*v49, *(void *)((char *)a1 + v48 + 8));
    uint64_t result = sub_1000196A0(v53, v54);
    *uint64_t v52 = v51;
    v52[1] = v50;
  }
  uint64_t v55 = v10[13];
  if ((*((unsigned char *)a1 + v55 + 8) & 1) == 0)
  {
    uint64_t v56 = *(void *)((char *)a1 + v55);
    uint64_t v57 = (char *)v2 + v55;
    *(void *)uint64_t v57 = v56;
    v57[8] = 0;
  }
  uint64_t v58 = v10[10];
  unint64_t v59 = (void *)((char *)a1 + v58);
  unint64_t v60 = *(void *)((char *)a1 + v58 + 8);
  if (v60 >> 60 != 15)
  {
    uint64_t v61 = *v59;
    uint64_t v62 = (void *)((char *)v2 + v58);
    uint64_t v63 = *(void *)((char *)v2 + v58);
    unint64_t v64 = *(void *)((char *)v2 + v58 + 8);
    sub_100013140(*v59, *(void *)((char *)a1 + v58 + 8));
    uint64_t result = sub_1000196A0(v63, v64);
    *uint64_t v62 = v61;
    v62[1] = v60;
  }
  uint64_t v65 = v10[16];
  uint64_t v66 = *(void *)((char *)a1 + v65 + 8);
  if (v66)
  {
    uint64_t v67 = *(void *)((char *)a1 + v65);
    uint64_t v68 = (void *)((char *)v2 + v65);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v68 = v67;
    v68[1] = v66;
  }
  return result;
}

unint64_t sub_100106F10(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x736553656B617073;
      break;
    case 2:
      unint64_t result = 0x797265766F636572;
      break;
    case 3:
      unint64_t result = 0x6169646F74737563;
      break;
    case 4:
      unint64_t result = 0x70704172656E776FLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0x6574707972636E65;
      break;
    case 7:
      unint64_t result = 0x617461446161;
      break;
    case 8:
      unint64_t result = 0x61746144736D6469;
      break;
    case 9:
      unint64_t result = 0x646F43726F727265;
      break;
    case 10:
      unint64_t result = 0x6973736553696C63;
      break;
    case 11:
      unint64_t result = 0x7374706D65747461;
      break;
    case 12:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001070D4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_100326E10);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1001083DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v10 = (int *)type metadata accessor for CustodianRecoveryData();
    LOBYTE(v14) = 3;
    type metadata accessor for UUID();
    sub_100006F30(&qword_1003263A0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v14 = *(_OWORD *)(v3 + v10[10]);
    char v13 = 6;
    sub_1000131F0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v14 = *(_OWORD *)(v3 + v10[11]);
    char v13 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v14 = *(_OWORD *)(v3 + v10[12]);
    char v13 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001074B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a1;
  uint64_t v61 = a2;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v67 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100009F04(&qword_100326E00);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v68 = v5;
  uint64_t v69 = v6;
  __chkstk_darwin(v5, v7);
  uint64_t v72 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CustodianRecoveryData();
  uint64_t v10 = (int *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  char v13 = (_OWORD *)((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13[1] = 0u;
  v13[2] = 0u;
  *char v13 = 0u;
  uint64_t v14 = (uint64_t)v13 + v10[9];
  uint64_t v15 = type metadata accessor for UUID();
  os_log_type_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v65 = v14;
  unint64_t v66 = v15;
  v16(v14, 1, 1);
  uint64_t v17 = (void *)((char *)v13 + v10[10]);
  *uint64_t v17 = 0;
  v17[1] = 0;
  uint64_t v18 = (void *)((char *)v13 + v10[11]);
  *uint64_t v18 = 0;
  v18[1] = 0;
  uint64_t v19 = (_OWORD *)((char *)v13 + v10[12]);
  *uint64_t v19 = xmmword_1002AD240;
  uint64_t v63 = (void *)((char *)v13 + v10[13]);
  unint64_t v64 = v19;
  *(_OWORD *)uint64_t v63 = xmmword_1002AD240;
  uint64_t v62 = (void *)((char *)v13 + v10[14]);
  *(_OWORD *)uint64_t v62 = xmmword_1002AD240;
  unint64_t v20 = (char *)v13 + v10[15];
  *(void *)unint64_t v20 = 0;
  v20[8] = 1;
  uint64_t v21 = v10[16];
  *((unsigned char *)v13 + v21) = 0;
  uint64_t v22 = v10[17];
  *(void *)((char *)v13 + v22) = 1;
  uint64_t v23 = v10[18];
  uint64_t v71 = (uint64_t *)v13;
  uint64_t v24 = (uint64_t *)((char *)v13 + v23);
  *uint64_t v24 = 0;
  v24[1] = 0;
  sub_100008EF8(v73, v73[3]);
  sub_1001083DC();
  uint64_t v25 = v70;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25)
  {
    char v29 = v71;
    sub_100008EA8((uint64_t)v73);
    uint64_t v57 = (uint64_t)v29;
  }
  else
  {
    uint64_t v70 = v17;
    unint64_t v59 = v24;
    unint64_t v60 = v18;
    uint64_t v26 = (uint64_t)v67;
    uint64_t v27 = v69;
    LOBYTE(v74) = 0;
    uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unint64_t v31 = v71;
    *uint64_t v71 = v28;
    v31[1] = v32;
    LOBYTE(v74) = 1;
    void v31[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    void v31[3] = v33;
    LOBYTE(v74) = 2;
    v31[4] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v31[5] = v34;
    LOBYTE(v74) = 3;
    sub_100006F30((unint64_t *)&unk_100321640);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100018A54(v26, v65);
    LOBYTE(v74) = 4;
    uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unint64_t v36 = v70;
    unint64_t v66 = v37;
    uint64_t v67 = (char *)v35;
    swift_bridgeObjectRelease();
    unint64_t v38 = v66;
    void *v36 = v67;
    v36[1] = v38;
    LOBYTE(v74) = 5;
    uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v40 = v60;
    uint64_t v70 = (void *)v39;
    uint64_t v67 = v41;
    swift_bridgeObjectRelease();
    unint64_t v42 = v67;
    *uint64_t v40 = v70;
    v40[1] = v42;
    char v76 = 6;
    unint64_t v43 = sub_1000130EC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v70 = v74;
    unint64_t v66 = v43;
    uint64_t v67 = v75;
    uint64_t v44 = v64;
    sub_1000196A0(*v64, v64[1]);
    uint64_t v45 = v67;
    void *v44 = v70;
    v44[1] = v45;
    char v76 = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v70 = v74;
    uint64_t v67 = v75;
    uint64_t v46 = v63;
    sub_1000196A0(*v63, v63[1]);
    unint64_t v47 = v67;
    *uint64_t v46 = v70;
    v46[1] = v47;
    char v76 = 8;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v48 = v74;
    char v49 = v75;
    unint64_t v50 = v62;
    sub_1000196A0(*v62, v62[1]);
    *unint64_t v50 = v48;
    v50[1] = v49;
    LOBYTE(v74) = 9;
    *(void *)unint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v20[8] = v51 & 1;
    LOBYTE(v74) = 10;
    *((unsigned char *)v71 + v21) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v74) = 11;
    *(uint64_t *)((char *)v71 + v22) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v74) = 12;
    uint64_t v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v54 = v53;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v72, v68);
    uint64_t v55 = v59;
    swift_bridgeObjectRelease();
    *uint64_t v55 = v52;
    v55[1] = v54;
    uint64_t v56 = v71;
    sub_100011ABC((uint64_t)v71, v61);
    sub_100008EA8((uint64_t)v73);
    uint64_t v57 = (uint64_t)v56;
  }
  return sub_100011B20(v57);
}

unint64_t sub_100107B1C()
{
  return sub_100106F10(*v0);
}

uint64_t sub_100107B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010863C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100107B4C(uint64_t a1)
{
  unint64_t v2 = sub_1001083DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100107B88(uint64_t a1)
{
  unint64_t v2 = sub_1001083DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100107BC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001074B0(a1, a2);
}

uint64_t sub_100107BDC(void *a1)
{
  return sub_1001070D4(a1);
}

uint64_t sub_100107BF4()
{
  uint64_t v1 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = 0;
  unint64_t v57 = 0xE000000000000000;
  _StringGuts.grow(_:)(70);
  v10._countAndFlagsBits = 0xD000000000000030;
  v10._object = (void *)0x800000010029CF60;
  String.append(_:)(v10);
  if (v0[1])
  {
    uint64_t v11 = *v0;
    uint64_t v12 = (void *)v0[1];
  }
  else
  {
    uint64_t v11 = 7104878;
    uint64_t v12 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0xD000000000000012;
  v14._object = (void *)0x800000010029CFA0;
  String.append(_:)(v14);
  if (v0[3])
  {
    uint64_t v15 = v0[2];
    os_log_type_t v16 = (void *)v0[3];
  }
  else
  {
    uint64_t v15 = 7104878;
    os_log_type_t v16 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = (void *)v0[5];
  if (v18)
  {
    uint64_t v19 = v0[4];
    v55._countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 0xD000000000000010;
    v55._object = (void *)0x800000010029D080;
    v20._countAndFlagsBits = v19;
    v20._object = v18;
    String.append(_:)(v20);
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = (int *)type metadata accessor for CustodianRecoveryData();
  sub_100108374((uint64_t)v0 + v21[7], (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100006574((uint64_t)v4, (uint64_t *)&unk_100321CE0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    v55._countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 0xD000000000000011;
    v55._object = (void *)0x800000010029D060;
    sub_100006F30((unint64_t *)&qword_100321670);
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v23 = (uint64_t *)((char *)v0 + v21[8]);
  uint64_t v24 = (void *)v23[1];
  if (v24)
  {
    uint64_t v25 = *v23;
    v55._countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 0xD000000000000010;
    v55._object = (void *)0x800000010029D040;
    v26._countAndFlagsBits = v25;
    v26._object = v24;
    String.append(_:)(v26);
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = (uint64_t *)((char *)v0 + v21[9]);
  uint64_t v28 = (void *)v27[1];
  if (v28)
  {
    uint64_t v29 = *v27;
    v55._countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 0xD000000000000019;
    v55._object = (void *)0x800000010029D020;
    v30._countAndFlagsBits = v29;
    v30._object = v28;
    String.append(_:)(v30);
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
  }
  unint64_t v31 = (uint64_t *)((char *)v0 + v21[11]);
  unint64_t v32 = v31[1];
  if (v32 >> 60 != 15)
  {
    uint64_t v33 = *v31;
    strcpy((char *)&v55, "\n aaData: ");
    BYTE3(v55._object) = 0;
    HIDWORD(v55._object) = -369098752;
    sub_1000196B4(v33, v32);
    v34._countAndFlagsBits = Data.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    sub_1000196A0(v33, v32);
  }
  uint64_t v35 = (uint64_t *)((char *)v0 + v21[12]);
  unint64_t v36 = v35[1];
  if (v36 >> 60 != 15)
  {
    uint64_t v37 = *v35;
    strcpy((char *)&v55, "\n IdMSData: ");
    BYTE5(v55._object) = 0;
    HIWORD(v55._object) = -5120;
    sub_1000196B4(v37, v36);
    v38._countAndFlagsBits = Data.description.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    sub_1000196A0(v37, v36);
  }
  uint64_t v39 = (uint64_t *)((char *)v0 + v21[10]);
  unint64_t v40 = v39[1];
  if (v40 >> 60 != 15)
  {
    uint64_t v41 = *v39;
    v55._countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    sub_100013140(v41, v40);
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 0xD000000000000011;
    v55._object = (void *)0x800000010029D000;
    v42._countAndFlagsBits = Data.description.getter();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    sub_1000196A0(v41, v40);
  }
  unint64_t v43 = (char *)v0 + v21[13];
  if ((v43[8] & 1) == 0)
  {
    uint64_t v44 = *(void *)v43;
    strcpy((char *)&v55, "\n errorCode: ");
    HIWORD(v55._object) = -4864;
    uint64_t v54 = v44;
    v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
  }
  if (*((unsigned char *)v0 + v21[14]) == 1)
  {
    v46._countAndFlagsBits = 0x736553696C43200ALL;
    v46._object = (void *)0xEC0000006E6F6973;
    String.append(_:)(v46);
  }
  unint64_t v47 = (uint64_t *)((char *)v0 + v21[16]);
  uint64_t v48 = (void *)v47[1];
  if (v48)
  {
    uint64_t v49 = *v47;
    v55._countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 0xD000000000000016;
    v55._object = (void *)0x800000010029CFE0;
    v50._countAndFlagsBits = v49;
    v50._object = v48;
    String.append(_:)(v50);
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
  }
  v55._countAndFlagsBits = 0;
  v55._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = 0xD000000000000019;
  v55._object = (void *)0x800000010029CFC0;
  uint64_t v54 = *(uint64_t *)((char *)v0 + v21[15]);
  v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  return v56;
}

uint64_t sub_100108374(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100321CE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001083DC()
{
  unint64_t result = qword_100326E08;
  if (!qword_100326E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326E08);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CustodianRecoveryData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001084FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecoveryData.CodingKeys()
{
  return &type metadata for CustodianRecoveryData.CodingKeys;
}

unint64_t sub_100108538()
{
  unint64_t result = qword_100326E18;
  if (!qword_100326E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326E18);
  }
  return result;
}

unint64_t sub_100108590()
{
  unint64_t result = qword_100326E20;
  if (!qword_100326E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326E20);
  }
  return result;
}

unint64_t sub_1001085E8()
{
  unint64_t result = qword_100326E28;
  if (!qword_100326E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326E28);
  }
  return result;
}

uint64_t sub_10010863C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000010029D0C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736553656B617073 && a2 == 0xEE0044496E6F6973 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797265766F636572 && a2 == 0xEC00000065646F43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6169646F74737563 && a2 == 0xED0000444955556ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x70704172656E776FLL && a2 == 0xEC0000004449656CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010029D0A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6574707972636E65 && a2 == 0xED0000434B525064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x617461446161 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x61746144736D6469 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6973736553696C63 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7374706D65747461 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100299F50)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 12;
    }
    else {
      return 13;
    }
  }
}

uint64_t sub_100108C14(uint64_t a1, unint64_t a2)
{
  unsigned int v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v12[0] = 0;
  id v6 = [v4 JSONObjectWithData:isa options:4 error:v12];

  id v7 = *(id *)&v12[0];
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    sub_100013198(a1, a2);
    swift_unknownObjectRelease();
    sub_100009F48(v11, v12);
    sub_100009F48(v12, v11);
    sub_100009F04((uint64_t *)&unk_1003284A0);
    if (swift_dynamicCast()) {
      return v10;
    }
  }
  else
  {
    uint64_t v9 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_100013198(a1, a2);
    swift_errorRelease();
  }
  return 0;
}

uint64_t sub_100108D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)v16 - v11;
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  Swift::String v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v9, v4);
  sub_1001098C0();
  v16[0] = a1;
  v16[1] = a2;
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = 0x6E656B6F742ELL;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
}

uint64_t sub_100108F18(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v35 = a2;
  uint64_t v36 = a1;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B80 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100007288(v10, (uint64_t)qword_10033E730);
  id v11 = a3;
  id v12 = v3;
  id v13 = v11;
  id v14 = v12;
  uint64_t v15 = Logger.logObject.getter();
  int v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, (os_log_type_t)v16))
  {
    int v32 = v16;
    uint64_t v33 = v6;
    uint64_t v34 = v5;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v38 = v31;
    *(_DWORD *)uint64_t v17 = 136315394;
    id v37 = [v14 scope];
    type metadata accessor for Scope(0);
    uint64_t v18 = String.init<A>(describing:)();
    id v37 = (id)sub_100135190(v18, v19, &v38);
    v30[1] = &v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    if (a3)
    {
      id v20 = [v13 data];
      uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;

      uint64_t v24 = sub_100254A64(v21, v23);
      v30[0] = a3;
      id v37 = v24;
      sub_100009F04((uint64_t *)&unk_100328450);
      sub_100098EA8();
      uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v27 = v26;
      a3 = (void *)v30[0];
      swift_bridgeObjectRelease();
      sub_100013198(v21, v23);
    }
    else
    {
      unint64_t v27 = 0xE300000000000000;
      uint64_t v25 = 7104878;
    }
    uint64_t v28 = v35;
    id v37 = (id)sub_100135190(v25, v27, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v32, "Updated database change token. database: %s, token: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v33;
    uint64_t v5 = v34;
  }
  else
  {

    uint64_t v28 = v35;
  }
  sub_100108D78(v36, v28);
  sub_10010A0A8(a3, (uint64_t)v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001092BC(void *a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_1001098C0();
  id v7 = [a1 ownerName];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  URL.appendPathComponent(_:)(v11);
  swift_bridgeObjectRelease();
  id v12 = [a1 zoneName];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  v18._countAndFlagsBits = v13;
  v18._object = v15;
  v16._countAndFlagsBits = 0x6E656B6F742ELL;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  URL.appendPathComponent(_:)(v18);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100109488(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v43 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B80 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E730);
  id v10 = a2;
  id v11 = v2;
  id v12 = a1;
  id v13 = v10;
  id v14 = v11;
  id v15 = v12;
  Swift::String v16 = Logger.logObject.getter();
  int v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    int v40 = v17;
    os_log_t v41 = v16;
    uint64_t v37 = v5;
    uint64_t v18 = swift_slowAlloc();
    Swift::String v42 = a2;
    uint64_t v19 = v18;
    uint64_t v39 = swift_slowAlloc();
    uint64_t v45 = v39;
    *(_DWORD *)uint64_t v19 = 136315650;
    id v44 = [v14 scope];
    type metadata accessor for Scope(0);
    uint64_t v20 = String.init<A>(describing:)();
    id v44 = (id)sub_100135190(v20, v21, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    id v22 = [v15 zoneName];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    id v44 = (id)sub_100135190(v23, v25, &v45);
    uint64_t v38 = &v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 2080;
    if (v42)
    {
      id v26 = [v13 data];
      uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;

      id v44 = sub_100254A64(v27, v29);
      sub_100009F04((uint64_t *)&unk_100328450);
      sub_100098EA8();
      uint64_t v30 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v32 = v31;
      swift_bridgeObjectRelease();
      sub_100013198(v27, v29);
    }
    else
    {
      unint64_t v32 = 0xE300000000000000;
      uint64_t v30 = 7104878;
    }
    uint64_t v5 = v37;
    uint64_t v33 = v43;
    id v44 = (id)sub_100135190(v30, v32, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    os_log_t v34 = v41;
    _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v40, "Updated zone change token. database: %s, zoneID: %s, token: %s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2 = v42;
  }
  else
  {

    uint64_t v33 = v43;
  }
  sub_1001092BC(v15);
  sub_10010A0A8(a2, (uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v8, v5);
}

void sub_1001098C0()
{
  id v1 = [v0 scope];
  if (v1 == (id)3)
  {
    uint64_t v2 = 0x646572616853;
    goto LABEL_6;
  }
  if (v1 == (id)2)
  {
    uint64_t v2 = 0x65746176697250;
LABEL_13:
    unint64_t v3 = 0xE700000000000000;
    goto LABEL_14;
  }
  if (v1 != (id)1)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100007288(v4, (uint64_t)qword_10033E718);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unknown CKDatabase.Scope!", v7, 2u);
      swift_slowDealloc();
    }

    uint64_t v2 = 0x6E776F6E6B6E55;
    goto LABEL_13;
  }
  uint64_t v2 = 0x63696C627550;
LABEL_6:
  unint64_t v3 = 0xE600000000000000;
LABEL_14:
  URL.appendPathComponent(_:)(*(Swift::String *)&v2);
}

uint64_t sub_100109A18()
{
  id v0 = [self defaultManager];
  URL.path.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v2 = [v0 fileExistsAtPath:v1];

  uint64_t result = 0;
  if (v2)
  {
    uint64_t v4 = Data.init(contentsOf:options:)();
    unint64_t v6 = v5;
    sub_10000850C(0, &qword_100321D28);
    sub_100009F04((uint64_t *)&unk_100321D30);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1002A9C00;
    *(void *)(v7 + 32) = sub_10000850C(0, &qword_100326E30);
    sub_100013140(v4, v6);
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
    sub_100013198(v4, v6);
    sub_100013198(v4, v6);
    swift_bridgeObjectRelease();
    if (v8[3])
    {
      if (swift_dynamicCast()) {
        return v8[4];
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_100058764((uint64_t)v8);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100109D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self defaultManager];
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v10);
  id v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  id v21 = 0;
  LODWORD(v4) = [v9 createDirectoryAtURL:v12 withIntermediateDirectories:1 attributes:0 error:&v21];

  id v13 = v21;
  if (v4
    && (id v14 = self,
        id v21 = 0,
        id v15 = [v14 archivedDataWithRootObject:a1 requiringSecureCoding:1 error:&v21],
        id v13 = v21,
        v15))
  {
    uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    sub_100013140(v16, v18);
    sub_1000DEFCC(a2, 1, 0, 1, v16, v18);
    sub_100013198(v16, v18);
    return sub_100013198(v16, v18);
  }
  else
  {
    uint64_t v20 = v13;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

id sub_100109FC0()
{
  id v0 = [self defaultManager];
  URL._bridgeToObjectiveC()(v1);
  unint64_t v3 = v2;
  id v7 = 0;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v7];

  if (v4) {
    return v7;
  }
  id v6 = v7;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

void sub_10010A0A8(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v6 = __chkstk_darwin(v4, v5);
  __chkstk_darwin(v6, v7);
  if (a1)
  {
    id v11 = a1;
    sub_100109D88((uint64_t)v11, a2);
  }
  else
  {
    id v8 = [self defaultManager];
    URL.path.getter();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v10 = [v8 fileExistsAtPath:v9];

    if (v10) {
      sub_100109FC0();
    }
  }
}

uint64_t sub_10010A6B8()
{
  type metadata accessor for TrustedContactsAwarenessSync();
  sub_100009F04(&qword_100326F20);
  uint64_t result = String.init<A>(describing:)();
  qword_100326E38 = result;
  unk_100326E40 = v1;
  return result;
}

uint64_t sub_10010A704(uint64_t a1, char a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100009F04(&qword_100325870);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_t v34 = a3;
      uint64_t v21 = swift_slowAlloc();
      v35[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315394;
      if (qword_100320C38 != -1) {
        swift_once();
      }
      uint64_t v22 = qword_100326E38;
      unint64_t v23 = unk_100326E40;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_100135190(v22, v23, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2080;
      uint64_t v36 = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v36 = sub_100135190(v24, v25, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - error fetching manatee status: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v34;
    }
    else
    {
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
    }
    swift_errorRetain();
    a3(a1);
    sub_100080A98(a1, 1);
    return sub_100080A98(a1, 1);
  }
  else if (a1)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E778);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v33 = a4;
      os_log_t v34 = a3;
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      v35[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v29 = 136315138;
      if (qword_100320C38 != -1) {
        swift_once();
      }
      uint64_t v31 = qword_100326E38;
      unint64_t v30 = unk_100326E40;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_100135190(v31, v30, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s - updating Trusted Contacts Awareness on account", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v33;
      a3 = v34;
    }
    else
    {
    }
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      unint64_t v32 = (void *)swift_allocObject();
      _DWORD v32[2] = a5;
      v32[3] = a3;
      v32[4] = a4;
      void v32[5] = a6;
      swift_retain();
      swift_retain();
      sub_10010B2BC((uint64_t)sub_10010C968, (uint64_t)v32);
      swift_release();
      return swift_release();
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, result + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__accountStore, v12);
      Dependency.wrappedValue.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      sub_100008EF8(v35, v35[3]);
      sub_1000517FC(0, 0, a3, a4);
      return sub_100008EA8((uint64_t)v35);
    }
  }
  return result;
}

uint64_t sub_10010ACF4(uint64_t a1, char a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v10 = sub_100009F04(&qword_100325870);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = a4;
      uint64_t v26 = swift_slowAlloc();
      v35[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      if (qword_100320C38 != -1) {
        swift_once();
      }
      uint64_t v27 = qword_100326E38;
      unint64_t v28 = unk_100326E40;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_100135190(v27, v28, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      uint64_t v36 = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v36 = sub_100135190(v29, v30, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - error fetching trusted contacts on cloud - %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v25;
    }
    else
    {
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
    }
    swift_errorRetain();
    a4(a1);
    sub_100080A98(a1, 1);
    return sub_100080A98(a1, 1);
  }
  else
  {
    uint64_t v15 = a3 + 16;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E778);
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v32[1] = v15;
      uint64_t v33 = a4;
      uint64_t v34 = a5;
      uint64_t v19 = swift_slowAlloc();
      v32[0] = swift_slowAlloc();
      v35[0] = v32[0];
      *(_DWORD *)uint64_t v19 = 136315650;
      if (qword_100320C38 != -1) {
        swift_once();
      }
      uint64_t v20 = qword_100326E38;
      unint64_t v21 = unk_100326E40;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_100135190(v20, v21, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2048;
      uint64_t v36 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 22) = 2048;
      uint64_t v36 = BYTE1(a1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s - account state: \n\nCustodianAssignee - %ld\n\nBeneficiaryAssignee - %ld", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v33;
      a5 = v34;
    }
    else
    {
    }
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, result + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__accountStore, v10);
      Dependency.wrappedValue.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      sub_100008EF8(v35, v35[3]);
      sub_1000517FC(a1, BYTE1(a1), a4, a5);
      return sub_100008EA8((uint64_t)v35);
    }
  }
  return result;
}

uint64_t sub_10010B2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = a1;
  uint64_t v67 = a2;
  uint64_t v3 = *v2;
  uint64_t v74 = v2;
  uint64_t v75 = v3;
  uint64_t v69 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v72 = *(void *)(v69 - 8);
  __chkstk_darwin(v69, v4);
  uint64_t v68 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v65 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v63 = *(void *)(v9 - 8);
  uint64_t v64 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v62 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v60 = *(void *)(v61 - 8);
  __chkstk_darwin(v61, v12);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v59 - 8);
  uint64_t v17 = __chkstk_darwin(v59, v16);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v58 - v21;
  uint64_t v23 = sub_100009F04(&qword_100321FF8);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)&v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v28 = dispatch_group_create();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = 0;
  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = 0;
  dispatch_group_enter(v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, (uint64_t)v74 + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__custodianStorage, v23);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  uint64_t v31 = sub_100008EF8(aBlock, (uint64_t)v78);
  unint64_t v32 = (void *)swift_allocObject();
  void v32[2] = v28;
  v32[3] = v30;
  uint64_t v73 = v30;
  uint64_t v33 = v75;
  v32[4] = v29;
  void v32[5] = v33;
  uint64_t v34 = sub_100008EF8((void *)(*v31 + 16), *(void *)(*v31 + 40));
  type metadata accessor for LocalCache();
  uint64_t v35 = v28;
  swift_retain();
  swift_retain();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v36 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v37 = v19;
  uint64_t v38 = v59;
  v36(v37, v59);
  sub_100008EF8((void *)(*v34 + 16), *(void *)(*v34 + 40));
  sub_1000B3370((uint64_t)v22, (uint64_t)sub_10010C9CC, (uint64_t)v32);
  v36(v22, v38);
  swift_release();
  sub_100008EA8((uint64_t)aBlock);
  uint64_t v39 = swift_allocObject();
  *(unsigned char *)(v39 + 16) = 0;
  dispatch_group_enter(v35);
  uint64_t v40 = v60;
  uint64_t v41 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v14, (uint64_t)v74 + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__inheritanceStorage, v61);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v41);
  sub_100008EF8(aBlock, (uint64_t)v78);
  Swift::String v42 = (void *)swift_allocObject();
  v42[2] = v35;
  v42[3] = v39;
  uint64_t v43 = v75;
  v42[4] = v29;
  void v42[5] = v43;
  id v44 = v35;
  swift_retain();
  swift_retain();
  sub_1000EAAFC((uint64_t)sub_10010CA30, (uint64_t)v42);
  swift_release();
  sub_100008EA8((uint64_t)aBlock);
  sub_1000093D0();
  Swift::String v46 = v62;
  uint64_t v45 = v63;
  uint64_t v47 = v64;
  (*(void (**)(char *, void, uint64_t))(v63 + 104))(v62, enum case for DispatchQoS.QoSClass.default(_:), v64);
  uint64_t v48 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  uint64_t v49 = (void *)swift_allocObject();
  uint64_t v50 = v66;
  uint64_t v51 = v67;
  v49[2] = v29;
  v49[3] = v50;
  uint64_t v52 = v73;
  v49[4] = v51;
  v49[5] = v52;
  v49[6] = v39;
  id v79 = sub_10010CAB0;
  id v80 = v49;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  id v78 = &unk_1002FBBB0;
  uint64_t v53 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v54 = v65;
  static DispatchQoS.unspecified.getter();
  char v76 = _swiftEmptyArrayStorage;
  sub_1000DEE54();
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  uint64_t v56 = v68;
  uint64_t v55 = v69;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v53);

  (*(void (**)(char *, uint64_t))(v72 + 8))(v56, v55);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v54, v71);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10010BAD4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__custodianStorage;
  uint64_t v4 = sub_100009F04(&qword_100321FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__inheritanceStorage;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_10032B720);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocClassInstance();
}

uint64_t sub_10010BC08()
{
  return type metadata accessor for TrustedContactsAwarenessSync();
}

uint64_t type metadata accessor for TrustedContactsAwarenessSync()
{
  uint64_t result = qword_100326E88;
  if (!qword_100326E88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10010BC5C()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_100327F30, &qword_100322470);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&qword_10032B5D0, (uint64_t *)&unk_100321850);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_10010BD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10010C6D8(a3, a4);
}

void sub_10010BDBC(uint64_t a1, char a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v36 - v17;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v27 = (uint64_t *)(a5 + 16);
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E778);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      if (qword_100320C38 != -1) {
        swift_once();
      }
      uint64_t v32 = qword_100326E38;
      unint64_t v33 = unk_100326E40;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_100135190(v32, v33, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - failed to fetch custodianship List", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_beginAccess();
    *uint64_t v27 = a1;
    swift_errorRelease();
  }
  else
  {
    uint64_t v39 = a3;
    uint64_t v19 = (char *)(a4 + 16);
    uint64_t v20 = _swiftEmptyArrayStorage;
    v41[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v21 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    uint64_t v38 = a1;
    if (v21)
    {
      uint64_t v37 = v19;
      unint64_t v22 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      uint64_t v23 = *(void *)(v11 + 72);
      uint64_t v24 = a1 + v22;
      do
      {
        sub_10010CAC0(v24, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        if (*(void *)&v18[*(int *)(v10 + 28)] == 2)
        {
          sub_10010CB88((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1002289DC(0, v20[2] + 1, 1);
          }
          uint64_t v20 = (void *)v41[0];
          unint64_t v26 = *(void *)(v41[0] + 16);
          unint64_t v25 = *(void *)(v41[0] + 24);
          if (v26 >= v25 >> 1)
          {
            sub_1002289DC(v25 > 1, v26 + 1, 1);
            uint64_t v20 = (void *)v41[0];
          }
          v20[2] = v26 + 1;
          sub_10010CB88((uint64_t)v15, (uint64_t)v20 + v22 + v26 * v23, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        }
        else
        {
          sub_10010CB28((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        }
        v24 += v23;
        --v21;
      }
      while (v21);
      uint64_t v20 = (void *)v41[0];
      uint64_t v19 = v37;
    }
    sub_100007844(v38, 0);
    uint64_t v34 = v20[2];
    swift_release();
    if (v34) {
      char v35 = 2;
    }
    else {
      char v35 = 1;
    }
    swift_beginAccess();
    *uint64_t v19 = v35;
    a3 = v39;
  }
  dispatch_group_leave(a3);
}

void sub_10010C1E4(uint64_t a1, char a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v36 - v17;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v27 = (uint64_t *)(a5 + 16);
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E778);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      if (qword_100320C38 != -1) {
        swift_once();
      }
      uint64_t v32 = qword_100326E38;
      unint64_t v33 = unk_100326E40;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_100135190(v32, v33, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - failed to fetch benefactors List", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_beginAccess();
    *uint64_t v27 = a1;
    swift_errorRelease();
  }
  else
  {
    uint64_t v39 = a3;
    uint64_t v19 = (char *)(a4 + 16);
    uint64_t v20 = _swiftEmptyArrayStorage;
    v41[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v21 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    uint64_t v38 = a1;
    if (v21)
    {
      uint64_t v37 = v19;
      unint64_t v22 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      uint64_t v23 = *(void *)(v11 + 72);
      uint64_t v24 = a1 + v22;
      do
      {
        sub_10010CAC0(v24, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        if (*(void *)&v18[*(int *)(v10 + 24)] == 2)
        {
          sub_10010CB88((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_100228AB0(0, v20[2] + 1, 1);
          }
          uint64_t v20 = (void *)v41[0];
          unint64_t v26 = *(void *)(v41[0] + 16);
          unint64_t v25 = *(void *)(v41[0] + 24);
          if (v26 >= v25 >> 1)
          {
            sub_100228AB0(v25 > 1, v26 + 1, 1);
            uint64_t v20 = (void *)v41[0];
          }
          v20[2] = v26 + 1;
          sub_10010CB88((uint64_t)v15, (uint64_t)v20 + v22 + v26 * v23, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        }
        else
        {
          sub_10010CB28((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        }
        v24 += v23;
        --v21;
      }
      while (v21);
      uint64_t v20 = (void *)v41[0];
      uint64_t v19 = v37;
    }
    sub_100007844(v38, 0);
    uint64_t v34 = v20[2];
    swift_release();
    if (v34) {
      char v35 = 2;
    }
    else {
      char v35 = 1;
    }
    swift_beginAccess();
    *uint64_t v19 = v35;
    a3 = v39;
  }
  dispatch_group_leave(a3);
}

uint64_t sub_10010C60C(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    swift_errorRetain();
    a2(v9, 1);
    return swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    uint64_t v11 = *(unsigned __int8 *)(a4 + 16);
    swift_beginAccess();
    return ((uint64_t (*)(unint64_t, void))a2)(v11 | ((unint64_t)*(unsigned __int8 *)(a5 + 16) << 8), 0);
  }
}

uint64_t sub_10010C6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__inheritanceStorage, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = v12;
  v13[5] = v6;
  swift_retain();
  swift_retain();
  sub_1000F02FC((uint64_t)sub_10010C910, (uint64_t)v13);
  swift_release();
  swift_release();
  return sub_100008EA8((uint64_t)v16);
}

uint64_t sub_10010C898()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010C8D0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10010C910(uint64_t a1, char a2)
{
  return sub_10010CA48(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10010A704);
}

uint64_t sub_10010C928()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10010C968(uint64_t a1, char a2)
{
  return sub_10010CA48(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10010ACF4);
}

uint64_t sub_10010C980()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010C9B8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010C9CC(uint64_t a1, char a2)
{
  return sub_10010CA48(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10010BDBC);
}

uint64_t sub_10010C9E8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10010CA30(uint64_t a1, char a2)
{
  return sub_10010CA48(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10010C1E4);
}

uint64_t sub_10010CA48(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, void, void, void, void, void))
{
  return a3(a1, a2 & 1, v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_10010CA60()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10010CAB0()
{
  return sub_10010C60C(*(void *)(v0 + 16), *(void (**)(uint64_t, uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_10010CAC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10010CB28(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10010CB88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_10010CBF0(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_100326FF0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for WalrusWebAccessInfo(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v64 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v65 = (uint64_t)&v63 - v13;
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v63 - v15;
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v66 = v7;
  uint64_t v67 = v6;
  uint64_t v17 = type metadata accessor for Logger();
  sub_100007288(v17, (uint64_t)qword_10033E700);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Walrus push received. Processing message.", v20, 2u);
    swift_slowDealloc();
  }

  uint64_t v21 = *(void *)(a1 + 32);
  if (!v21) {
    goto LABEL_13;
  }
  uint64_t v22 = *(void *)(a1 + 24);
  os_log_t v23 = v68 + 2;
  id v24 = [*(id *)(*sub_100008EF8(&v68[2].isa, (uint64_t)v68[5].isa) + 16) aa_primaryAppleAccount];
  if (!v24) {
    goto LABEL_13;
  }
  unint64_t v25 = v24;
  id v26 = [v24 aa_altDSID];

  if (!v26) {
    goto LABEL_13;
  }
  uint64_t v63 = v16;
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  if (v27 == v22 && v21 == v29)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t)v63;
  }
  else
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t)v63;
    if ((v31 & 1) == 0)
    {
LABEL_13:
      os_log_t v68 = (os_log_t)Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v68, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v68, v33, "Can't process this message, missing altDSID or doesn't match with primary account.", v34, 2u);
        swift_slowDealloc();
      }
      os_log_t v35 = v68;

      return;
    }
  }
  uint64_t v36 = type metadata accessor for PushMessage();
  sub_10010E7B0(a1 + *(int *)(v36 + 56), (uint64_t)v5);
  uint64_t v37 = v66;
  uint64_t v38 = v67;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v5, 1, v67) != 1)
  {
    sub_10010E878((uint64_t)v5, v32);
    sub_100008EF8(v23, (uint64_t)v68[5].isa);
    Swift::String v42 = sub_1000512F0();
    if (v43)
    {
      uint64_t v44 = (uint64_t)v42;
      unint64_t v45 = v43;
      uint64_t v46 = v32 + *(int *)(v38 + 60);
      if (v42 == *(void **)(v46 + 80) && v43 == *(void *)(v46 + 88)
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        os_log_t v47 = v68;
        sub_100008EF8(&v68[7].isa, (uint64_t)v68[10].isa);
        uint64_t v48 = v65;
        sub_10010E938(v32, v65);
        unint64_t v49 = (*(unsigned __int8 *)(v37 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
        uint64_t v50 = swift_allocObject();
        *(void *)(v50 + 16) = v47;
        sub_10010E878(v48, v50 + v49);
        swift_retain();
        sub_1001FE934(v32, (void (*)(void))sub_10010EB68, v50);
        swift_release();
      }
      else
      {
        uint64_t v55 = v64;
        sub_10010E938(v32, v64);
        swift_bridgeObjectRetain();
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = swift_slowAlloc();
          uint64_t v70 = swift_slowAlloc();
          *(_DWORD *)uint64_t v58 = 136315394;
          uint64_t v59 = v55 + *(int *)(v38 + 60);
          uint64_t v60 = v55;
          uint64_t v61 = *(void *)(v59 + 80);
          unint64_t v62 = *(void *)(v59 + 88);
          swift_bridgeObjectRetain();
          uint64_t v69 = sub_100135190(v61, v62, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10010E8DC(v60);
          *(_WORD *)(v58 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v69 = sub_100135190(v44, v45, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Can't process this message, encryption material DSID %s doesn't match with primary account %s.", (uint8_t *)v58, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v54 = (uint64_t)v63;
          goto LABEL_32;
        }
        swift_bridgeObjectRelease_n();

        sub_10010E8DC(v55);
      }
    }
    else
    {
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Can't process this message, no primary idMS account found.", v53, 2u);
        swift_slowDealloc();
      }
    }
    uint64_t v54 = v32;
LABEL_32:
    sub_10010E8DC(v54);
    return;
  }
  sub_10010E818((uint64_t)v5);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Can't process this push, it does not contain required walrus web access info.", v41, 2u);
    swift_slowDealloc();
  }
}

void sub_10010D324(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = *(void *)(a5 + 96);
    uint64_t v8 = *(void *)(a5 + 104);
    uint64_t v9 = *(void **)(*sub_100008EF8((void *)(a4 + 136), *(void *)(a4 + 160)) + 16);
    aBlock[0] = 0;
    id v10 = a1;
    swift_bridgeObjectRetain();
    id v11 = [v9 walrusStatus:aBlock];
    if (aBlock[0])
    {
      id v12 = aBlock[0];
      swift_willThrow();
    }
    else if (v11 == (id)1)
    {
      goto LABEL_14;
    }
    if (sub_100057CD4())
    {
      sub_10010D9F8(v7, v8);
LABEL_15:
      aBlock[4] = sub_10010D68C;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = (id)1107296256;
      aBlock[2] = sub_10010D918;
      void aBlock[3] = &unk_1002FBC18;
      uint64_t v17 = _Block_copy(aBlock);
      id v18 = v10;
      [v18 performPinnedRequestWithHandler:v17];
      _Block_release(v17);
      swift_bridgeObjectRelease();

      return;
    }
LABEL_14:
    sub_10010DC6C(a2, v7, v8);
    goto LABEL_15;
  }
  swift_errorRetain();
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007288(v13, (uint64_t)qword_10033E700);
  swift_errorRetain();
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (id *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138412290;
    aBlock[0] = (id)_convertErrorToNSError(_:)();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id *v16 = aBlock[0];
    sub_10010EBF4(a1, a2, 1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v14, "Failed to fetch PCS auth request with error: %@", v15, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10010EBF4(a1, a2, 1);
  }
  else
  {
    sub_10010EBF4(a1, a2, 1);
    sub_10010EBF4(a1, a2, 1);
  }
}

void sub_10010D68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_errorRetain();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007288(v3, (uint64_t)qword_10033E700);
    swift_errorRetain();
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138412290;
      uint64_t v11 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v6 = v11;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "PCS keys upload failed with error: %@", v5, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E700);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "PCS keys upload completed successfully.", v9, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10010D918(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(void *, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(a2, a3, a4);
  swift_release();
}

uint64_t type metadata accessor for WalrusPushServiceDelegate()
{
  return self;
}

BOOL sub_10010D9E8(unsigned __int8 a1)
{
  return a1 > 4u;
}

uint64_t sub_10010D9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = self;
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 webAccessNotificationTextForKey:v7];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v6 webAccessNotificationTextForKey:v12];

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  sub_100009F04((uint64_t *)&unk_10032B140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x800000010029B9C0;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain();
  *(void *)&long long v23 = v9;
  *((void *)&v23 + 1) = v11;
  uint64_t v24 = v14;
  uint64_t v25 = v16;
  unint64_t v26 = sub_100220A6C(inited);
  char v27 = 2;
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100007288(v18, (uint64_t)qword_10033E700);
  os_log_type_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Posting a single consolidated FYI notification.", v21, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(v3 + 96), *(void *)(v3 + 120));
  sub_10024F5C4(&v23, sub_10010E58C, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10010DC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = &unk_100320000;
  if (!v4) {
    goto LABEL_20;
  }
  uint64_t v48 = (void *)(v3 + 96);
  uint64_t v6 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  char v8 = 0;
LABEL_3:
  char v53 = v8;
  uint64_t v9 = v7;
  do
  {
    char v10 = *(unsigned char *)(v6 + v9);
    uint64_t v7 = v9 + 1;
    uint64_t v11 = sub_10024CB00(v10);
    if (v12)
    {
      uint64_t v19 = v11;
      uint64_t v20 = v12;
      sub_100009F04((uint64_t *)&unk_10032B140);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
      *(void *)(inited + 32) = 0xD000000000000010;
      *(void *)(inited + 40) = 0x800000010029B9C0;
      *(void *)(inited + 48) = a2;
      *(void *)(inited + 56) = a3;
      swift_bridgeObjectRetain();
      unint64_t v54 = sub_100220A6C(inited);
      uint64_t v22 = self;
      uint64_t v46 = v6;
      NSString v23 = String._bridgeToObjectiveC()();
      id v24 = [v22 webAccessNotificationTextForKey:v23];

      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;

      uint64_t v47 = v25;
      v55[1] = v25;
      v55[2] = v27;
      uint64_t v52 = v27;
      v55[3] = v19;
      v55[4] = v20;
      v55[5] = v54;
      char v56 = 2;
      if (v5[366] != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_100007288(v28, (uint64_t)qword_10033E700);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        v55[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136315138;
        uint64_t v32 = sub_10024C910(v10);
        *(void *)(v31 + 4) = sub_100135190((uint64_t)v32, v33, v55);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Posting %s FYI notification.", (uint8_t *)v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v6 = v46;
      uint64_t v45 = *sub_100008EF8(v48, *(void *)(v49 + 120));
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        v55[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 136315138;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v43 = v34;
        uint64_t v42 = sub_10025169C();
        unint64_t v37 = v36;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100135190(v42, v37, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v43, v35, "Posting User notification : %s", v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t v5 = (void *)&unk_100320000;
      sub_100008EF8((void *)(v45 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController), *(void *)(v45 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController + 24));
      sub_100219DD8(v47, v52, v19, v20, v54, (uint64_t)sub_10010E3B8, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v8 = 1;
      if (v4 - 1 == v9)
      {
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_3;
    }
    if (v5[366] != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E700);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      v55[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      uint64_t v17 = sub_10024C910(v10);
      *(void *)(v16 + 4) = sub_100135190((uint64_t)v17, v18, v55);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "No FYI message for %s.", (uint8_t *)v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v5 = (void *)&unk_100320000;
      swift_slowDealloc();
    }

    ++v9;
  }
  while (v4 != v7);
  swift_bridgeObjectRelease();
  if ((v53 & 1) == 0)
  {
LABEL_20:
    if (v5[366] != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100007288(v38, (uint64_t)qword_10033E700);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Uploading PCS keys without any FYI notification.", v41, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10010E3B8(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100007288(v1, (uint64_t)qword_10033E700);
    swift_errorRetain();
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v4 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 138412290;
      uint64_t v6 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v4 = v6;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Failed to post FYI notification with error %@", v3, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_10010E58C(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100007288(v1, (uint64_t)qword_10033E700);
    swift_errorRetain();
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 138412290;
      uint64_t v9 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v5 = v9;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to post FYI notification with error %@", v4, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      char v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Uploading PCS keys without any FYI notification.", v8, 2u);
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
  }
}

uint64_t sub_10010E7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100326FF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010E818(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_100326FF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10010E878(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WalrusWebAccessInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010E8DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WalrusWebAccessInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10010E938(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WalrusWebAccessInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010E99C()
{
  uint64_t v1 = (int *)(type metadata accessor for WalrusWebAccessInfo(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[17];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + 96), *(void *)(v6 + 104));
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v8 = v6 + *(int *)(v7 + 52);
  uint64_t v9 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  sub_100013198(*(void *)(v6 + *(int *)(v7 + 56)), *(void *)(v6 + *(int *)(v7 + 56) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

void sub_10010EB68(void *a1, uint64_t a2, char a3)
{
  char v6 = a3 & 1;
  uint64_t v7 = *(void *)(type metadata accessor for WalrusWebAccessInfo(0) - 8);
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = v3 + ((*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  sub_10010D324(a1, a2, v6, v8, v9);
}

uint64_t sub_10010EBF4(void *a1, uint64_t a2, char a3)
{
  if (a3)
  {
    return swift_errorRelease();
  }
  else
  {

    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10010EC40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  char v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v7, v8);
  char v10 = (void *)((char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v10, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12[1] = *v10;
    sub_100009F04(&qword_100326870);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v3 + 32))(v6, v10, v2);
    sub_100009F04(&qword_100326870);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_10010EDCC(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (void *)((char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v7, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = *v7;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E748);
    swift_errorRetain();
    char v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      uint64_t v14 = _convertErrorToNSError(_:)();
      v16[1] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v14;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to delete record from cloud store: %@", v12, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(v8);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_100006574((uint64_t)v7, &qword_1003229D0);
    return ((uint64_t (*)(void))a2)(0);
  }
}

uint64_t sub_10010F030(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CloudShareInfo();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_100322948);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (uint64_t *)((char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (uint64_t *)((char *)&v27 - v16);
  sub_100019730(a1, (uint64_t)&v27 - v16, &qword_100322948);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v28 = a2;
      NSString v23 = (uint8_t *)v22;
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)NSString v23 = 136315138;
      uint64_t v27 = a3;
      swift_getErrorValue();
      uint64_t v24 = Error.localizedDescription.getter();
      uint64_t v29 = sub_100135190(v24, v25, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Sharing failed with error - %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v28;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *uint64_t v14 = v18;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v14);
    swift_errorRelease();
    return sub_100006574((uint64_t)v14, &qword_100322948);
  }
  else
  {
    sub_1000E4950((uint64_t)v17, (uint64_t)v9);
    sub_10010FF90((uint64_t)v9, (uint64_t)v14);
    swift_storeEnumTagMultiPayload();
    a2(v14);
    sub_100006574((uint64_t)v14, &qword_100322948);
    return sub_10010FFF4((uint64_t)v9);
  }
}

uint64_t sub_10010F38C()
{
  *(void *)(v1 + 160) = v0;
  return _swift_task_switch(sub_10010F3AC, 0, 0);
}

uint64_t sub_10010F3AC()
{
  uint64_t v21 = v0;
  sub_100008A94(*(void *)(v0 + 160) + 56, v0 + 56);
  sub_100009F04((uint64_t *)&unk_1003224B0);
  sub_100009F04(&qword_100327128);
  if (swift_dynamicCast())
  {
    uint64_t v1 = v0 + 16;
    sub_100041E8C((long long *)(v0 + 96), v0 + 16);
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v3 = qword_10033EA08;
    unint64_t v2 = unk_10033EA10;
    *(void *)(v0 + 168) = unk_10033EA10;
    uint64_t v4 = qword_100320CC8;
    swift_bridgeObjectRetain();
    if (v4 != -1) {
      swift_once();
    }
    id v5 = sub_10028CC20(v3, v2);
    *(void *)(v0 + 176) = v5;
    id v6 = [v5 sharedCloudDatabase];
    *(void *)(v0 + 184) = v6;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E7A8);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 152) = sub_100135190(v3, v2, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Fetching changes from shared database for container: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v1 = v0 + 16;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v17 = *(void *)(v0 + 160);
    uint64_t v18 = swift_task_alloc();
    *(void *)(v0 + 192) = v18;
    *(void *)(v18 + 16) = v1;
    *(void *)(v18 + 24) = v6;
    *(void *)(v18 + 32) = v3;
    *(void *)(v18 + 40) = v2;
    *(_WORD *)(v18 + 48) = 1;
    *(void *)(v18 + 56) = v17;
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_10010F8E8;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v19, 0, 0, 0xD000000000000022, 0x800000010029D2C0, sub_100110050, v18, (char *)&type metadata for () + 8);
  }
  else
  {
    *(void *)(v0 + 128) = 0;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    sub_100006574(v0 + 96, &qword_100327130);
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E7A8);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Cloud storage object is not confirm to cloud sync", v14, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    *(void *)(v0 + 144) = -7000;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100110640((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_10010F8E8()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_10010FAAC;
  }
  else {
    unint64_t v2 = sub_10010FA38;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10010FA38()
{
  uint64_t v1 = *(void **)(v0 + 176);

  sub_100008EA8(v0 + 16);
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10010FAAC()
{
  uint64_t v1 = *(void **)(v0 + 176);

  sub_100008EA8(v0 + 16);
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10010FB20(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  uint64_t v18 = a5;
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_100329960);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  sub_100008EF8(a2, a2[3]);
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16 + v15, (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  sub_1000AE2BC(a3, a4, v18, a6 & 0x101, (uint64_t)sub_10011010C, v16);
  swift_release();
  return swift_weakDestroy();
}

uint64_t sub_10010FCBC(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100007288(v1, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      id v5 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 138412290;
      swift_errorRetain();
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v5 = v11;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching changes from shared database failed: %@", v4, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_100009F04((uint64_t *)&unk_100329960);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E7A8);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Successfully fetched changes from shared database", v9, 2u);
      swift_slowDealloc();
    }

    sub_100009F04((uint64_t *)&unk_100329960);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t type metadata accessor for StorageController()
{
  return self;
}

uint64_t sub_10010FF90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudShareInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010FFF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudShareInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100110050(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 49)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return sub_10010FB20(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), v2 | *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_100110078()
{
  uint64_t v1 = sub_100009F04((uint64_t *)&unk_100329960);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10011010C(uint64_t a1)
{
  sub_100009F04((uint64_t *)&unk_100329960);

  return sub_10010FCBC(a1);
}

void sub_100110180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v41 = a6;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v11 = type metadata accessor for CloudShareInfo();
  uint64_t v13 = __chkstk_darwin(v11, v12);
  unint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = qword_100320BA8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100007288(v20, (uint64_t)qword_10033E7A8);
  sub_10010FF90(a1, (uint64_t)v18);
  uint64_t v40 = a1;
  sub_10010FF90(a1, (uint64_t)v15);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v35 = a7;
    uint64_t v24 = v23;
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v37 = a4;
    type metadata accessor for URL();
    uint64_t v36 = a5;
    sub_100110640((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    v44[0] = (id)sub_100135190(v25, v26, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10010FFF4((uint64_t)v18);
    *(_WORD *)(v24 + 12) = 2080;
    v44[0] = *(id *)&v15[*(int *)(v11 + 24)];
    id v27 = v44[0];
    sub_100009F04(&qword_1003236C0);
    uint64_t v28 = String.init<A>(describing:)();
    v44[0] = (id)sub_100135190(v28, v29, v45);
    a5 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a4 = v37;
    swift_bridgeObjectRelease();
    sub_10010FFF4((uint64_t)v15);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Accepting share with url: %s and token: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a7 = v35;
    swift_slowDealloc();
  }
  else
  {
    sub_10010FFF4((uint64_t)v18);
    sub_10010FFF4((uint64_t)v15);
  }

  sub_100008A94(v39 + 56, (uint64_t)v44);
  sub_100009F04((uint64_t *)&unk_1003224B0);
  sub_100009F04(&qword_100322940);
  int v30 = swift_dynamicCast();
  uint64_t v31 = v40;
  if (v30)
  {
    sub_100041E8C(v42, (uint64_t)v45);
    uint64_t v32 = *sub_100008EF8(v45, v45[3]);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100196518(v31, v38, v32, a4, a5, v41, a7);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_100008EA8((uint64_t)v45);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v43 = 0;
    memset(v42, 0, sizeof(v42));
    sub_100006574((uint64_t)v42, (uint64_t *)&unk_10032B4A0);
    type metadata accessor for AACustodianError(0);
    v44[0] = (id)-7000;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100110640((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v33 = (void *)v45[0];
    sub_10002A8C0(v45[0], a4, a5, v41, a7);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
}

uint64_t sub_100110640(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100110688(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v25 = a3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v26[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04(&qword_100321FF8);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v26[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v5 + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__storageController, v14);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  sub_100008EF8(v26, v26[3]);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_custodianID, v9);
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = a2;
  long long v20[3] = v19;
  uint64_t v21 = v25;
  v20[4] = a1;
  v20[5] = v21;
  v20[6] = a4;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1001113E0;
  *(void *)(v22 + 24) = v20;
  id v23 = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1002369EC((uint64_t)v13, (uint64_t)sub_100043AE8, v22);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  swift_release();
  return sub_100008EA8((uint64_t)v26);
}

void sub_100110954(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v11 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10011185C(a1, (uint64_t)v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      id v23 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 138412290;
      uint64_t v24 = _convertErrorToNSError(_:)();
      v33[1] = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v23 = v24;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error fetching custodianship: %@", v22, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_1001118C4((uint64_t)v18, (uint64_t)v14);
    id v25 = [objc_allocWithZone((Class)AKCustodianContext) init];
    id v26 = [a2 aa_altDSID];
    [v25 setAltDSID:v26];

    type metadata accessor for CustodianRecoveryInfoRecord();
    swift_bridgeObjectRetain();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v25 setOwnerCustodianAltDSID:v27];

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v25 setCustodianUUID:isa];

    Class v29 = 0;
    int v30 = &v14[*(int *)(type metadata accessor for CustodianRecord() + 40)];
    unint64_t v31 = *((void *)v30 + 1);
    if (v31 >> 60 != 15)
    {
      uint64_t v32 = *(void *)v30;
      sub_100013140(*(void *)v30, *((void *)v30 + 1));
      Class v29 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000196A0(v32, v31);
    }
    [v25 setWrappingKeyRKC:v29];

    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_100110D68((uint64_t)v25, a4, a5, a6);
      swift_release();
    }

    sub_100111928((uint64_t)v14);
  }
}

uint64_t sub_100110D68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = sub_100009F04(&qword_1003229A8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v23[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([self shouldSkipIdMSFinalizeCustodian])
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E748);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "🚨 TCS IdMS Endpoint Testing: SkipIdMSFinalizeCustodian. Custodian setup skipped.", v18, 2u);
      swift_slowDealloc();
    }

    return a3(0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v5 + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__requestManager, v10);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    sub_100008EF8(v23, v23[3]);
    uint64_t v20 = swift_allocObject();
    swift_weakInit();
    os_log_type_t v21 = (void *)swift_allocObject();
    v21[2] = a3;
    v21[3] = a4;
    v21[4] = a2;
    void v21[5] = v20;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10004DB74(a1, (uint64_t)sub_1001119CC, (uint64_t)v21);
    swift_release();
    swift_release();
    return sub_100008EA8((uint64_t)v23);
  }
}

uint64_t sub_100111008()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__requestManager;
  uint64_t v2 = sub_100009F04(&qword_1003229A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__storageController;
  uint64_t v4 = sub_100009F04(&qword_100321FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__notificationManager;
  uint64_t v6 = sub_100009F04(&qword_100322CE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__healthCheckScheduler;
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100324600);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return swift_deallocClassInstance();
}

uint64_t sub_100111184()
{
  return type metadata accessor for DaemonSetupFinalizationHandler();
}

uint64_t type metadata accessor for DaemonSetupFinalizationHandler()
{
  uint64_t result = qword_100327180;
  if (!qword_100327180) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001111D8()
{
  sub_10001BF34(319, &qword_100322478, (uint64_t *)&unk_100322480);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_100327F30, &qword_100322470);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&qword_100322C50, (uint64_t *)&unk_10032ACA0);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, (unint64_t *)&unk_100324000, (uint64_t *)&unk_10032D750);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t sub_100111358()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100111390()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1001113E0(uint64_t a1)
{
  sub_100110954(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t (**)(void))(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1001113F0(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_100324600);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412290;
      uint64_t v17 = _convertErrorToNSError(_:)();
      v26[0] = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v16 = v17;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Error finalizing custodianship: %@", v15, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E748);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Custodian setup complete!", v21, 2u);
      swift_slowDealloc();
    }

    [self postRecoveryContactChangedNotification];
    if (([self simulate2FAFA] & 1) == 0
      && (*(unsigned char *)(a4 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess) & 1) == 0)
    {
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, Strong + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__healthCheckScheduler, v7);
        Dependency.wrappedValue.getter();
        swift_release();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
        uint64_t v23 = v27;
        uint64_t v24 = v28;
        sub_100008EF8(v26, v27);
        (*(void (**)(Swift::Void (__swiftcall *)(), void, uint64_t, uint64_t))(v24 + 16))(OSTransaction.complete(), 0, v23, v24);
        sub_100008EA8((uint64_t)v26);
      }
    }
    return ((uint64_t (*)(void))a2)(0);
  }
}

uint64_t sub_100111824()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011185C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100322960);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001118C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianshipRecords(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100111928(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustodianshipRecords(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100111984()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001119CC(uint64_t a1)
{
  return sub_1001113F0(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t type metadata accessor for CustodianOwnerRecoverabilityHealthCheckAnalyticsEvent()
{
  uint64_t result = qword_1003272F8;
  if (!qword_1003272F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100111A24()
{
  sub_1000C520C();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

void *sub_100111AC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = (void *)sub_100112548(a1);
    uint64_t v4 = (uint64_t)result;
    int v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 64;
    uint64_t v17 = v2;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(a1 + 32))
    {
      unint64_t v10 = (unint64_t)v4 >> 6;
      if ((*(void *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_23;
      }
      uint64_t v18 = v7;
      id v11 = *(id *)(*(void *)(a1 + 56) + 8 * v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = (void *)specialized ContiguousArray._endMutation()();
      int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
      if (v4 >= v9) {
        goto LABEL_24;
      }
      uint64_t v12 = *(void *)(v8 + 8 * v10);
      if ((v12 & (1 << v4)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_26;
      }
      unint64_t v13 = v12 & (-2 << (v4 & 0x3F));
      if (v13)
      {
        int64_t v9 = __clz(__rbit64(v13)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v14 = v10 + 1;
        unint64_t v15 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v15)
        {
          unint64_t v16 = *(void *)(v8 + 8 * v14);
          if (v16)
          {
LABEL_18:
            int64_t v9 = __clz(__rbit64(v16)) + (v14 << 6);
          }
          else
          {
            while (v15 - 2 != v10)
            {
              unint64_t v16 = *(void *)(a1 + 80 + 8 * v10++);
              if (v16)
              {
                unint64_t v14 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v7 = v18 + 1;
      uint64_t v4 = v9;
      if (v18 + 1 == v17) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t sub_100111CA8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_100325360);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  unint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = AAUnderTest.getter();
  if ((result & 1) == 0)
  {
    uint64_t v51 = v10;
    uint64_t v58 = v6;
    uint64_t v17 = swift_allocObject();
    uint64_t v60 = a3;
    uint64_t v18 = v17;
    id v57 = v3;
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    unint64_t v54 = &v3[qword_1003272F0];
    uint64_t v55 = v12 + 16;
    char v53 = v19;
    ((void (*)(char *))v19)(v15);
    Dependency.wrappedValue.getter();
    uint64_t v52 = *(void (**)(char *, uint64_t))(v12 + 8);
    v52(v15, v11);
    sub_100008EF8(&v62, *((uint64_t *)&v63 + 1));
    uint64_t v20 = a1;
    sub_100009F04((uint64_t *)&unk_100325630);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v50 = 0;
    sub_10024EC08(v61[0]);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v56 = v18;
    *(void *)(v18 + 16) = v22;
    uint64_t v23 = (uint64_t *)(v18 + 16);
    sub_100008EA8((uint64_t)&v62);
    NSString v24 = String._bridgeToObjectiveC()();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v62 = v22;
    uint64_t *v23 = 0x8000000000000000;
    sub_10022C68C((uint64_t)v24, 0x6E6F6973726576, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    uint64_t v26 = v62;
    uint64_t *v23 = v62;
    swift_bridgeObjectRelease();
    uint64_t v59 = v20;
    uint64_t v27 = v7;
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    char v29 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v62 = v26;
    uint64_t *v23 = 0x8000000000000000;
    sub_10022C68C((uint64_t)isa, 0xD000000000000019, 0x800000010029D3E0, v29);
    uint64_t v30 = v62;
    uint64_t *v23 = v62;
    swift_bridgeObjectRelease();
    Class v31 = Int._bridgeToObjectiveC()().super.super.isa;
    char v32 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v62 = v30;
    uint64_t *v23 = 0x8000000000000000;
    uint64_t v33 = (uint64_t)v31;
    uint64_t v34 = v60;
    sub_10022C68C(v33, 0x6C6544746E756F63, 0xEA00000000006174, v32);
    uint64_t *v23 = v62;
    swift_bridgeObjectRelease();
    if (v34)
    {
      id v35 = v34;
      id v36 = [v35 userInfo];
      uint64_t v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v37 + 16) && (unint64_t v40 = sub_1001358B8(v38, v39), (v41 & 1) != 0))
      {
        sub_100047DD4(*(void *)(v37 + 56) + 32 * v40, (uint64_t)&v62);
      }
      else
      {
        long long v62 = 0u;
        long long v63 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v63 + 1))
      {
        sub_100009F04(&qword_100327348);
        if (swift_dynamicCast())
        {
          if (*(void *)(v61[0] + 16))
          {
            uint64_t v42 = sub_100111AC8(v61[0]);
            swift_bridgeObjectRelease();
            sub_1001125D0((unint64_t)v42, v23);
          }

          swift_bridgeObjectRelease();
        }
        else
        {
        }
      }
      else
      {

        sub_100058764((uint64_t)&v62);
      }
      uint64_t v34 = v60;
    }
    v53(v15, v54, v11);
    Dependency.wrappedValue.getter();
    v52(v15, v11);
    uint64_t v43 = sub_100008EF8(&v62, *((uint64_t *)&v63 + 1));
    uint64_t v44 = v51;
    uint64_t v45 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v51, *v43 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__cdpController, v58);
    id v46 = v34;
    uint64_t v47 = v56;
    swift_retain();
    id v48 = v57;
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v44, v45);
    uint64_t v49 = sub_100008EF8(v61, v61[3]);
    sub_1000578B4(*v49, v47, v59, v48, v34);
    swift_release();

    sub_100008EA8((uint64_t)v61);
    sub_100008EA8((uint64_t)&v62);
    return swift_release();
  }
  return result;
}

void sub_100112260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0x8000000000000000;
  sub_10022C68C((uint64_t)isa, 0x766F636552736168, 0xEE0079654B797265, isUniquelyReferenced_nonNull_native);
  *(void *)(a2 + 16) = v10;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (a5)
  {
    id v9 = a5;
    a5 = (void *)sub_10016B5B0();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
  swift_bridgeObjectRelease();
}

void sub_100112394()
{
}

uint64_t sub_1001123C4()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_1003272F0;
  uint64_t v2 = sub_100009F04(&qword_100325360);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

id sub_100112448()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianOwnerRecoverabilityHealthCheckAnalyticsEvent();
  return [super dealloc];
}

uint64_t sub_100112480(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + qword_1003272F0;
  uint64_t v3 = sub_100009F04(&qword_100325360);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_100112508()
{
  return type metadata accessor for CustodianOwnerRecoverabilityHealthCheckAnalyticsEvent();
}

uint64_t sub_100112510()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100112548(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void sub_1001125D0(unint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v30) {
      return;
    }
  }
  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  unint64_t v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_32;
    }
    id v6 = *(id *)(a1 + 32);
  }
  unint64_t v7 = v6;
  id v32 = (id)sub_10016B5B0();

  [v32 code];
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = *a2;
  *a2 = 0x8000000000000000;
  sub_10022C68C((uint64_t)isa, 0xD000000000000014, 0x800000010029C400, isUniquelyReferenced_nonNull_native);
  *a2 = v33;
  swift_bridgeObjectRelease();
  id v10 = [v32 domain];
  if (!v10)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v11 = (uint64_t)v10;
  char v12 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v34 = *a2;
  *a2 = 0x8000000000000000;
  sub_10022C68C(v11, 0xD000000000000016, 0x800000010029C420, v12);
  *a2 = v34;
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13 < 2) {
      goto LABEL_9;
    }
    goto LABEL_11;
  }
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v13 >= 2)
  {
LABEL_11:
    if (v5)
    {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_15:
      unint64_t v16 = v15;
      id v31 = (id)sub_10016B5B0();

      [v31 code];
      Class v17 = Int._bridgeToObjectiveC()().super.super.isa;
      char v18 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v35 = *a2;
      *a2 = 0x8000000000000000;
      sub_10022C68C((uint64_t)v17, 0xD000000000000014, 0x800000010029C440, v18);
      *a2 = v35;
      swift_bridgeObjectRelease();
      id v19 = [v31 domain];
      if (!v19)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v20 = (uint64_t)v19;
      char v21 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v36 = *a2;
      *a2 = 0x8000000000000000;
      sub_10022C68C(v20, 0xD000000000000016, 0x800000010029C460, v21);
      *a2 = v36;
      swift_bridgeObjectRelease();
      if ((unint64_t)v13 < 3)
      {

        uint64_t v14 = v31;
        goto LABEL_20;
      }
      if (v5)
      {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_25;
      }
      if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
      {
        id v22 = *(id *)(a1 + 48);
LABEL_25:
        uint64_t v23 = v22;
        NSString v24 = (void *)sub_10016B5B0();

        [v24 code];
        Class v25 = Int._bridgeToObjectiveC()().super.super.isa;
        char v26 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v37 = *a2;
        *a2 = 0x8000000000000000;
        sub_10022C68C((uint64_t)v25, 0xD000000000000014, 0x800000010029C480, v26);
        *a2 = v37;
        swift_bridgeObjectRelease();
        id v27 = [v24 domain];
        if (v27)
        {
          uint64_t v28 = (uint64_t)v27;
          char v29 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v38 = *a2;
          *a2 = 0x8000000000000000;
          sub_10022C68C(v28, 0xD000000000000016, 0x800000010029C4A0, v29);
          *a2 = v38;

          swift_bridgeObjectRelease();
          return;
        }
LABEL_36:
        __break(1u);
        return;
      }
      goto LABEL_33;
    }
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      id v15 = *(id *)(a1 + 40);
      goto LABEL_15;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_9:
  uint64_t v14 = v32;
LABEL_20:
}

uint64_t sub_100112A2C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  unint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_terminateTask) = 0;
  unint64_t v8 = (void *)(v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion);
  *unint64_t v8 = 0;
  v8[1] = 0;
  uint64_t v9 = v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(void *)(v9 + 32) = 0;
  uint64_t v10 = OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_lock;
  uint64_t v11 = (_DWORD *)swift_slowAlloc();
  *uint64_t v11 = 0;
  *(void *)(v1 + v10) = v11;
  *(void *)(v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_transaction) = 0;
  UUID.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, v7, v3);
  sub_100113424(a1, v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData);
  return v1;
}

uint64_t sub_100112B78(uint64_t result)
{
  uint64_t v1 = OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_transaction;
  if (*(void *)(result + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_transaction))
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v4 = os_transaction_create();
    swift_release();
    *(void *)(v2 + v1) = v4;
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100112C5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  unint64_t v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5, v8);
  uint64_t v10 = &v28[-v9];
  uint64_t v11 = *(void (**)(unsigned char *))(v3 + 16);
  uint64_t v35 = (unsigned char *)(v0 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID);
  v11(&v28[-v9]);
  char v12 = (uint64_t *)(v0 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData);
  swift_beginAccess();
  unint64_t v13 = v12[1];
  if (v13)
  {
    uint64_t v34 = *v12;
    unint64_t v14 = v13;
  }
  else
  {
    unint64_t v14 = 0xE500000000000000;
    uint64_t v34 = 0x3E6C696E3CLL;
  }
  uint64_t v15 = qword_100320B88;
  swift_bridgeObjectRetain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007288(v16, (uint64_t)qword_10033E748);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v11)(v7, v10, v2);
  swift_bridgeObjectRetain();
  Class v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v33 = v12;
    uint64_t v21 = v20;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v37 = v32;
    *(_DWORD *)uint64_t v21 = 136315394;
    sub_1001133DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_t v30 = v17;
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v36 = sub_100135190(v22, v23, &v37);
    id v31 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int v29 = v19;
    NSString v24 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
    v24(v7, v2);
    *(_WORD *)(v21 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_100135190(v34, v14, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v25 = v30;
    _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v29, "Custodian recovery session object destroyed, sessionID: %s, recoverySessionID: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    char v12 = v33;
    swift_slowDealloc();

    char v26 = v31;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    NSString v24 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
    v24(v7, v2);
    char v26 = v10;
  }
  v24(v26, v2);
  v24(v35, v2);
  sub_100011B20((uint64_t)v12);
  swift_release();
  sub_100011358(*(void *)(v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion));
  sub_10011337C(v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_100113078()
{
  sub_100112C5C();

  return swift_deallocClassInstance();
}

uint64_t sub_1001130D0()
{
  return type metadata accessor for CustodianRecoverySession();
}

uint64_t type metadata accessor for CustodianRecoverySession()
{
  uint64_t result = qword_100327388;
  if (!qword_100327388) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100113124()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CustodianRecoveryData();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_100113218()
{
  return sub_1001133DC(&qword_1003274D8, (void (*)(uint64_t))type metadata accessor for CustodianRecoverySession);
}

uint64_t (*sub_100113260())()
{
  return j__swift_endAccess;
}

Swift::Int sub_1001132BC()
{
  Hasher.init(_seed:)();
  Swift::UInt v0 = ObjectIdentifier.hashValue.getter();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

void sub_100113308()
{
  Swift::UInt v0 = ObjectIdentifier.hashValue.getter();
  Hasher._combine(_:)(v0);
}

Swift::Int sub_100113338()
{
  Hasher.init(_seed:)();
  Swift::UInt v0 = ObjectIdentifier.hashValue.getter();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t sub_10011337C(uint64_t a1)
{
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_1003274E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001133DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100113424(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianRecoveryData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100113488(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v82 = a3;
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v7 = __chkstk_darwin(v5 - 8, v6);
  uint64_t v9 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  char v12 = (char *)&v76 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  os_log_type_t v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  os_log_t v83 = (char *)&v76 - v20;
  uint64_t v84 = a1;
  if (CKRecord.recordType.getter() == 0xD000000000000017 && v21 == 0x80000001002AD820)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      type metadata accessor for AACustodianError(0);
      uint64_t v87 = -7005;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_100114E44((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      return;
    }
  }
  int v78 = a2;
  uint64_t v81 = v18;
  id v23 = v84;
  id v24 = [v84 recordID];
  id v25 = [v24 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  char v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v26(v12, 1, v13) == 1)
  {
    sub_1000833BC((uint64_t)v12);
    type metadata accessor for AACustodianError(0);
    uint64_t v87 = -7005;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_100114E44((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

    return;
  }
  uint64_t v77 = v14;
  uint64_t v27 = v13;
  uint64_t v28 = *(void (**)(char *, char *))(v14 + 32);
  uint64_t v80 = v27;
  v28(v83, v12);
  id v29 = [v23 encryptedValuesByKey];
  NSString v30 = String._bridgeToObjectiveC()();
  id v79 = v29;
  id v31 = [v29 objectForKeyedSubscript:v30];

  if (!v31) {
    goto LABEL_11;
  }
  uint64_t v87 = (uint64_t)v31;
  sub_100009F04(&qword_1003239A0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v32 = v80;
  if (v26(v9, 1, v80) != 1)
  {
    ((void (*)(char *, char *, uint64_t))v28)(v81, v9, v32);
    NSString v41 = String._bridgeToObjectiveC()();
    id v42 = v79;
    id v43 = [v79 objectForKeyedSubscript:v41];

    if (v43 && (uint64_t v87 = (uint64_t)v43, (swift_dynamicCast() & 1) != 0))
    {
      uint64_t v44 = v85;
      uint64_t v45 = v86;
      NSString v46 = String._bridgeToObjectiveC()();
      uint64_t v47 = [v42 objectForKeyedSubscript:v46];

      if (v47)
      {
        os_log_t v85 = v47;
        type metadata accessor for Status(0);
        if (swift_dynamicCast())
        {
          uint64_t v48 = v87;
          uint64_t v49 = v77;
          uint64_t v50 = *(void (**)(uint64_t, char *, uint64_t))(v77 + 16);
          uint64_t v51 = v82;
          uint64_t v52 = v80;
          v50(v82, v83, v80);
          char v53 = (int *)type metadata accessor for CustodianshipInfoRecord();
          v50(v51 + v53[5], v81, v52);
          unint64_t v54 = (NSObject **)(v51 + v53[6]);
          *unint64_t v54 = v44;
          v54[1] = v45;
          *(void *)(v51 + v53[7]) = v48;
          id v55 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
          id v56 = v84;
          [v84 encodeSystemFieldsWithCoder:v55];
          [v55 finishEncoding];
          id v57 = [v55 encodedData];
          uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v60 = v59;
          swift_unknownObjectRelease();

          uint64_t v61 = *(void (**)(char *, uint64_t))(v49 + 8);
          v61(v81, v52);
          v61(v83, v52);
          long long v62 = (uint64_t *)(v51 + v53[8]);
          *long long v62 = v58;
          v62[1] = v60;
          *(unsigned char *)(v51 + v53[9]) = v78 & 1;
          return;
        }
      }
      swift_bridgeObjectRelease();
      id v70 = v84;
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v71 = type metadata accessor for Logger();
      sub_100007288(v71, (uint64_t)qword_10033E748);
      uint64_t v64 = v70;
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = (uint8_t *)swift_slowAlloc();
        uint64_t v84 = (void *)swift_slowAlloc();
        os_log_t v85 = v64;
        *(_DWORD *)uint64_t v67 = 138412290;
        uint64_t v72 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v84 = v64;

        uint64_t v69 = "Missing Status - %@";
        goto LABEL_31;
      }
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v63 = type metadata accessor for Logger();
      sub_100007288(v63, (uint64_t)qword_10033E748);
      uint64_t v64 = v84;
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = (uint8_t *)swift_slowAlloc();
        uint64_t v84 = (void *)swift_slowAlloc();
        os_log_t v85 = v64;
        *(_DWORD *)uint64_t v67 = 138412290;
        os_log_t v68 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v84 = v64;

        uint64_t v69 = "Missing Owner Handle - %@";
LABEL_31:
        _os_log_impl((void *)&_mh_execute_header, v65, v66, v69, v67, 0xCu);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
LABEL_33:
        uint64_t v73 = v80;
        uint64_t v74 = v81;

        type metadata accessor for AACustodianError(0);
        uint64_t v87 = -7005;
        sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
        sub_100114E44((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
        _BridgedStoredNSError.init(_:userInfo:)();
        swift_willThrow();
        swift_unknownObjectRelease();

        uint64_t v75 = *(void (**)(char *, uint64_t))(v77 + 8);
        v75(v74, v73);
        v75(v83, v73);
        return;
      }
    }

    uint64_t v65 = v64;
    goto LABEL_33;
  }
  sub_1000833BC((uint64_t)v9);
LABEL_11:
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_100007288(v33, (uint64_t)qword_10033E748);
  uint64_t v34 = v84;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 138412290;
    os_log_t v85 = v34;
    uint64_t v39 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v38 = v34;

    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Missing CustodianID - %@", v37, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v35 = v34;
  }
  uint64_t v40 = v77;

  type metadata accessor for AACustodianError(0);
  uint64_t v87 = -7005;
  sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
  sub_100114E44((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  swift_unknownObjectRelease();

  (*(void (**)(char *, uint64_t))(v40 + 8))(v83, v80);
}

uint64_t sub_10011405C(id *a1)
{
  uint64_t v2 = v1;
  [*a1 encryptedValuesByKey];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v3 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v4 = UUID.uuidString.getter();
  if (v16)
  {
    if (v15 == v4 && v16 == v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_11;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v16 = v8;
  CKRecordKeyValueSetting.subscript.setter();
LABEL_11:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v9 = (uint64_t *)(v1 + *(int *)(v3 + 24));
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  if (!v16) {
    goto LABEL_17;
  }
  if (v15 == v11 && v16 == v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
LABEL_17:
    uint64_t v15 = v11;
    LOBYTE(v16) = v10;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_19:
  CKRecordKeyValueSetting.subscript.getter();
  if ((v16 & 1) != 0 || v15 != *(void *)(v2 + *(int *)(v3 + 28))) {
    CKRecordKeyValueSetting.subscript.setter();
  }
  return swift_unknownObjectRelease();
}

unint64_t sub_10011430C(char a1)
{
  unint64_t result = 0x444964726F636572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6169646F74737563;
      break;
    case 2:
      unint64_t result = 0x6E614872656E776FLL;
      break;
    case 3:
      unint64_t result = 0x737574617473;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001143F0()
{
  return sub_10011430C(*v0);
}

uint64_t sub_1001143F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10011586C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100114420(uint64_t a1)
{
  unint64_t v2 = sub_100114DF0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10011445C(uint64_t a1)
{
  unint64_t v2 = sub_100114DF0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100114498@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  char v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v33 = (char *)v28 - v9;
  uint64_t v34 = sub_100009F04(&qword_100327508);
  uint64_t v32 = *(void *)(v34 - 8);
  __chkstk_darwin(v34, v10);
  char v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (int *)type metadata accessor for CustodianshipInfoRecord();
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100114DF0();
  uint64_t v35 = v12;
  uint64_t v17 = (uint64_t)v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17) {
    return sub_100008EA8((uint64_t)a1);
  }
  os_log_type_t v36 = a1;
  id v29 = v16;
  LOBYTE(v37) = 0;
  sub_100114E44((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
  os_log_type_t v18 = v33;
  uint64_t v19 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v33 = *(char **)(v31 + 32);
  ((void (*)(char *, char *, uint64_t))v33)(v29, v18, v3);
  LOBYTE(v37) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v20 = &v29[v13[5]];
  v28[1] = v3;
  ((void (*)(char *, char *, uint64_t))v33)(v20, v7, v3);
  LOBYTE(v37) = 2;
  uint64_t v21 = v35;
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v23 = (uint64_t)v29;
  id v24 = (uint64_t *)&v29[v13[6]];
  *id v24 = v22;
  v24[1] = v25;
  LOBYTE(v37) = 3;
  *(void *)(v23 + v13[7]) = KeyedDecodingContainer.decode(_:forKey:)();
  char v38 = 4;
  sub_1000130EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)(v23 + v13[8]) = v37;
  LOBYTE(v37) = 5;
  char v26 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v19);
  *(unsigned char *)(v23 + v13[9]) = v26 & 1;
  sub_10004CEC4(v23, v30);
  sub_100008EA8((uint64_t)v36);
  return sub_100081CB8(v23);
}

uint64_t sub_100114A00(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_100327518);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100114DF0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for UUID();
  sub_100114E44(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for CustodianshipInfoRecord();
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v10 + 32));
    char v13 = 4;
    sub_1000131F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100114C98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100114498(a1, a2);
}

uint64_t sub_100114CB0(void *a1)
{
  return sub_100114A00(a1);
}

uint64_t sub_100114CC8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100114E44((unint64_t *)&unk_1003274F0, (void (*)(uint64_t))type metadata accessor for CustodianshipInfoRecord);
  uint64_t result = sub_100114E44(&qword_1003235B0, (void (*)(uint64_t))type metadata accessor for CustodianshipInfoRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for CustodianshipInfoRecord()
{
  uint64_t result = qword_100327578;
  if (!qword_100327578) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100114D98(uint64_t a1)
{
  uint64_t result = sub_100114E44(&qword_100327500, (void (*)(uint64_t))type metadata accessor for CustodianshipInfoRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100114DF0()
{
  unint64_t result = qword_100327510;
  if (!qword_100327510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327510);
  }
  return result;
}

uint64_t sub_100114E44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CustodianshipInfoRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100114F58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianshipInfoRecord.CodingKeys()
{
  return &type metadata for CustodianshipInfoRecord.CodingKeys;
}

void *sub_100114F90(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    uint64_t v11 = (void *)((char *)a1 + v9);
    long long v12 = (void *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
    uint64_t v14 = a3[8];
    uint64_t v15 = (void *)((char *)a1 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    sub_100013140(v17, v18);
    *uint64_t v15 = v17;
    v15[1] = v18;
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_1001150C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  swift_bridgeObjectRelease();
  unsigned int v6 = (uint64_t *)(a1 + *(int *)(a2 + 32));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];

  return sub_100013198(v7, v8);
}

uint64_t sub_100115178(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  void *v10 = *v11;
  v10[1] = v12;
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v13 = a3[8];
  uint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  swift_bridgeObjectRetain();
  sub_100013140(v16, v17);
  *uint64_t v14 = v16;
  v14[1] = v17;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10011525C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v11 = a3[8];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_100013140(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_100013198(v16, v17);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100115360(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  return a1;
}

uint64_t sub_100115420(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v14 = *(void *)(a1 + v13);
  unint64_t v15 = *(void *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_100013198(v14, v15);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100115500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100115514);
}

uint64_t sub_100115514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001155D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001155EC);
}

uint64_t sub_1001155EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1001156AC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100115768()
{
  unint64_t result = qword_1003275C0;
  if (!qword_1003275C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003275C0);
  }
  return result;
}

unint64_t sub_1001157C0()
{
  unint64_t result = qword_1003275C8;
  if (!qword_1003275C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003275C8);
  }
  return result;
}

unint64_t sub_100115818()
{
  unint64_t result = qword_1003275D0;
  if (!qword_1003275D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003275D0);
  }
  return result;
}

uint64_t sub_10011586C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444964726F636572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E614872656E776FLL && a2 == 0xEB00000000656C64 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010029A0E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010029A100)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_100115B0C()
{
  type metadata accessor for URLConfigurationManager();
  swift_allocObject();
  uint64_t result = sub_100115B48();
  qword_10033E8B8 = result;
  return result;
}

uint64_t sub_100115B48()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1, v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000093D0();
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_10000A6F8((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

uint64_t sub_100115D98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100009F04(&qword_10032D4E0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_allocWithZone((Class)NSURLComponents);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithString:v7];

  if (v8)
  {
    id v9 = v8;
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 setPath:v10];

    id v11 = v9;
    NSString v12 = String._bridgeToObjectiveC()();
    [v11 setQuery:v12];

    id v13 = [v11 URL];
    if (v13)
    {
      uint64_t v14 = v13;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v15 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 0, 1, v15);
    }
    else
    {

      uint64_t v19 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v5, 1, 1, v19);
    }
    return sub_100117C78((uint64_t)v5, a1);
  }
  else
  {
    uint64_t v16 = type metadata accessor for URL();
    unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    return v17(a1, 1, 1, v16);
  }
}

uint64_t sub_100116004(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  NSString v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)(v3 + 56);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v3;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = sub_10011768C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  void aBlock[3] = &unk_1002FBF80;
  unint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_10000A6F8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return swift_release();
}

void sub_1001162C4(uint64_t a1, void (*a2)(void *, void, void), uint64_t a3)
{
  id v6 = sub_100116460();
  if (v6)
  {
    uint64_t v7 = v6;
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E700);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "cachedURLConfiguration is present", v11, 2u);
      swift_slowDealloc();
    }

    id v12 = v7;
    a2(v7, 0, 0);
  }
  else
  {
    dispatch_suspend(*(dispatch_object_t *)(a1 + 56));
    swift_retain();
    swift_retain();
    sub_100117698(a1, a1, (uint64_t (*)(void, void, void))a2, a3);
    swift_release();
    swift_release();
  }
}

id sub_100116460()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  os_log_type_t v10 = (char *)&v41 - v9;
  uint64_t v11 = (void *)(v1 + 16);
  swift_beginAccess();
  sub_100019730(v1 + 16, (uint64_t)&v44, &qword_100327698);
  if (*((void *)&v45 + 1))
  {
    sub_100041E8C(&v44, (uint64_t)v47);
    static Date.now.getter();
    id v12 = sub_100008EF8(v47, v47[3]);
    (*(void (**)(char *, void *, uint64_t))(v3 + 16))(v7, v12, v2);
    Date.timeIntervalSince(_:)();
    double v14 = v13;
    uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v7, v2);
    v15(v10, v2);
    if (v14 > 600.0)
    {
      uint64_t v46 = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      swift_beginAccess();
      sub_100117CE0((uint64_t)&v44, v1 + 16);
      swift_endAccess();
    }
    sub_100008EA8((uint64_t)v47);
  }
  else
  {
    sub_100006574((uint64_t)&v44, &qword_100327698);
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007288(v16, (uint64_t)qword_10033E700);
  swift_retain_n();
  unint64_t v17 = Logger.logObject.getter();
  LODWORD(v18) = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, (os_log_type_t)v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 138412290;
    uint64_t v21 = *(void *)(v1 + 40);
    if (v21)
    {
      uint64_t v22 = sub_100008EF8((void *)(v1 + 16), *(void *)(v1 + 40));
      uint64_t v41 = (uint64_t)&v41;
      uint64_t v23 = *(void *)(v21 - 8);
      id v43 = (void *)(v1 + 16);
      uint64_t v24 = v23;
      __chkstk_darwin(v22, v22);
      char v26 = (char *)&v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v24 + 16))(v26);
      uint64_t v27 = *(void **)&v26[*(int *)(type metadata accessor for URLConfigurationCache() + 20)];
      int v42 = (int)v18;
      unint64_t v18 = v19;
      uint64_t v28 = v1;
      id v29 = v20;
      uint64_t v30 = *(void (**)(char *, uint64_t))(v24 + 8);
      id v31 = v27;
      v30(v26, v21);
      uint64_t v20 = v29;
      uint64_t v1 = v28;
      uint64_t v19 = v18;
      LOBYTE(v18) = v42;
      uint64_t v11 = v43;
      v47[0] = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      v47[0] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v31 = 0;
    }
    void *v20 = v31;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v18, "[URLConfigurationManager cachedURLConfiguration]: %@", v19, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v32 = *(void *)(v1 + 40);
    if (!v32) {
      return 0;
    }
  }
  else
  {

    swift_release_n();
    uint64_t v32 = *(void *)(v1 + 40);
    if (!v32) {
      return 0;
    }
  }
  uint64_t v33 = sub_100008EF8(v11, v32);
  uint64_t v34 = *(void *)(v32 - 8);
  __chkstk_darwin(v33, v33);
  os_log_type_t v36 = (char *)&v41 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v34 + 16))(v36);
  uint64_t v37 = type metadata accessor for URLConfigurationCache();
  char v38 = *(void (**)(char *, uint64_t))(v34 + 8);
  id v39 = *(id *)&v36[*(int *)(v37 + 20)];
  v38(v36, v32);
  return v39;
}

uint64_t sub_1001169F0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void))
{
  if (a1 && a2)
  {
    uint64_t v10 = qword_100320B70;
    id v11 = a1;
    id v12 = a2;
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E700);
    double v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Successfully fetched URL configuration", v16, 2u);
      swift_slowDealloc();
    }

    if (qword_100320C40 != -1) {
      swift_once();
    }
    sub_100116D5C(v11, v12);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E700);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v24 = a5;
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      if (a3)
      {
        swift_errorRetain();
        uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v22 = 0;
      }
      *uint64_t v21 = v22;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to fetch URL configuration, error: %@", v20, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a5 = v24;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  dispatch_resume(*(dispatch_object_t *)(a4 + 56));
  return a5(a1, a2, a3);
}

uint64_t sub_100116D5C(void *a1, void *a2)
{
  uint64_t v5 = sub_100009F04(&qword_100327688);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URLConfigurationCache();
  v18[3] = v9;
  v18[4] = (uint64_t)&off_1002F7C98;
  uint64_t v10 = sub_10003584C(v18);
  id v11 = a1;
  id v12 = a2;
  Date.init()();
  *(uint64_t *)((char *)v10 + *(int *)(v9 + 20)) = (uint64_t)v11;
  *(uint64_t *)((char *)v10 + *(int *)(v9 + 24)) = (uint64_t)v12;
  sub_100009F04(&qword_100327690);
  int v13 = swift_dynamicCast();
  double v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  if (v13)
  {
    v14(v8, 0, 1, v9);
    *((void *)&v20 + 1) = v9;
    uint64_t v21 = &off_1002F7C98;
    os_log_type_t v15 = sub_10003584C((uint64_t *)&v19);
    sub_100117D48((uint64_t)v8, (uint64_t)v15);
  }
  else
  {
    v14(v8, 1, 1, v9);
    sub_100006574((uint64_t)v8, &qword_100327688);
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v21 = 0;
  }
  swift_beginAccess();
  sub_100117CE0((uint64_t)&v19, v2 + 16);
  return swift_endAccess();
}

void sub_100116F14(uint64_t a1, uint64_t a2, void *a3, void (*a4)(id, uint64_t, id))
{
  if (*(void *)(a1 + 24))
  {
    sub_100019730(a1, (uint64_t)v33, &qword_100328490);
    if (v33[3])
    {
      sub_100009F04((uint64_t *)&unk_1003284A0);
      if (swift_dynamicCast())
      {
        id v6 = objc_allocWithZone((Class)AAURLConfiguration);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v8 = [v6 initWithDictionary:isa];

        if (qword_100320B70 != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        sub_100007288(v9, (uint64_t)qword_10033E700);
        id v10 = v8;
        id v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = (uint8_t *)swift_slowAlloc();
          double v14 = (void *)swift_slowAlloc();
          *(_DWORD *)int v13 = 138412290;
          v33[0] = v10;
          id v15 = v10;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *double v14 = v10;

          _os_log_impl((void *)&_mh_execute_header, v11, v12, "[URLConfigurationManager fetchURLConfiguration]: %@", v13, 0xCu);
          sub_100009F04((uint64_t *)&unk_1003216C0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        id v26 = v10;
        a4(v10, a2, 0);

LABEL_33:
        return;
      }
    }
    else
    {
      sub_100006574((uint64_t)v33, &qword_100328490);
    }
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E700);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "[URLConfigurationManager fetchURLConfiguration]: Failed to convert object to dictionary.", v24, 2u);
      swift_slowDealloc();
    }

    if (a3) {
      uint64_t v25 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      uint64_t v25 = 0;
    }
    id v26 = [self aa_errorWithCode:-4402 underlyingError:v25];

    a4(0, a2, v26);
    goto LABEL_33;
  }
  if (a3)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E700);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      long long v19 = (uint8_t *)swift_slowAlloc();
      long long v20 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v19 = 138412290;
      swift_errorRetain();
      v33[0] = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v33[0];
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "[URLConfigurationManager fetchURLConfiguration]: %@", v19, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    a4(0, a2, a3);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E700);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "[URLConfigurationManager fetchURLConfiguration]: Both object and error are nil.", v30, 2u);
      swift_slowDealloc();
    }

    id v31 = [self aa_errorWithCode:-4402 underlyingError:0];
    a4(0, a2, v31);
  }
}

uint64_t sub_100117564(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(long long *, void *, void *))(a1 + 32);
  if (a2)
  {
    *((void *)&v12 + 1) = swift_getObjectType();
    *(void *)&long long v11 = a2;
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_retain();
  swift_unknownObjectRetain();
  id v8 = a3;
  id v9 = a4;
  v7(&v11, a3, a4);

  swift_release();
  return sub_100006574((uint64_t)&v11, &qword_100328490);
}

uint64_t sub_10011761C()
{
  sub_100006574(v0 + 16, &qword_100327698);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for URLConfigurationManager()
{
  return self;
}

void sub_10011768C()
{
  sub_1001162C4(*(void *)(v0 + 16), *(void (**)(void *, void, void))(v0 + 24), *(void *)(v0 + 32));
}

void sub_100117698(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void), uint64_t a4)
{
  uint64_t v45 = a1;
  uint64_t v7 = type metadata accessor for URLRequest();
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  __chkstk_darwin(v7, v8);
  int v42 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_10032D4E0);
  __chkstk_darwin(v10 - 8, v11);
  int v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v40 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v41 = (char *)&v38 - v20;
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a2;
  v21[3] = a3;
  v21[4] = a4;
  uint64_t v22 = qword_100320B70;
  swift_retain();
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100007288(v23, (uint64_t)qword_10033E700);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    id v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = a2;
    *(_WORD *)id v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "[URLConfigurationManager fetchURLConfiguration] called.", v26, 2u);
    a2 = v39;
    swift_slowDealloc();
  }

  sub_100115D98((uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100006574((uint64_t)v13, &qword_10032D4E0);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[URLConfigurationManager fetchURLConfiguration]: configurationURL is nil.", v29, 2u);
      swift_slowDealloc();
    }

    id v30 = [self aa_errorWithCode:-4417 underlyingError:0];
    sub_1001169F0(0, 0, (uint64_t)v30, a2, a3);
    swift_release();
  }
  else
  {
    id v31 = v41;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v41, v13, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v31, v14);
    uint64_t v32 = v42;
    URLRequest.init(url:cachePolicy:timeoutInterval:)();
    id v33 = [self sharedSession];
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = sub_100117C2C;
    *(void *)(v35 + 24) = v21;
    aBlock[4] = sub_100117C70;
    aBlock[5] = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100117564;
    void aBlock[3] = &unk_1002FBFF8;
    os_log_type_t v36 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    id v37 = [v33 bodyTaskWithRequest:isa completion:v36];
    _Block_release(v36);

    [v37 resume];
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v44);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v31, v14);
    swift_release();
  }
}

uint64_t sub_100117C2C(void *a1, void *a2, uint64_t a3)
{
  return sub_1001169F0(a1, a2, a3, *(void *)(v3 + 16), *(uint64_t (**)(void, void, void))(v3 + 24));
}

uint64_t sub_100117C38()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100117C70(uint64_t a1, uint64_t a2, void *a3)
{
  sub_100116F14(a1, a2, a3, *(void (**)(id, uint64_t, id))(v3 + 16));
}

uint64_t sub_100117C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_10032D4E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100117CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100327698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100117D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLConfigurationCache();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for CustodianRecoveryContainer(uint64_t a1)
{
  sub_100008EA8(a1);
  sub_100008EA8(a1 + 40);
  sub_100008EA8(a1 + 80);
  sub_100008EA8(a1 + 120);
  swift_unknownObjectRelease();

  return sub_100008EA8(a1 + 176);
}

_OWORD *initializeWithCopy for CustodianRecoveryContainer(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  long long v7 = a2[9];
  a1[9] = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)a1 + 120, (uint64_t)a2 + 120);
  a1[10] = a2[10];
  long long v8 = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)a1 + 200) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(_OWORD *, _OWORD *, uint64_t))(v8 - 8);
  swift_unknownObjectRetain();
  v10(a1 + 11, a2 + 11, v9);
  return a1;
}

uint64_t *assignWithCopy for CustodianRecoveryContainer(uint64_t *a1, uint64_t *a2)
{
  sub_1000CF984(a1, a2);
  sub_1000CF984(a1 + 5, a2 + 5);
  sub_1000CF984(a1 + 10, a2 + 10);
  sub_1000CF984(a1 + 15, a2 + 15);
  uint64_t v4 = a2[21];
  a1[20] = a2[20];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[21] = v4;
  sub_1000CF984(a1 + 22, a2 + 22);
  return a1;
}

__n128 initializeWithTake for CustodianRecoveryContainer(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for CustodianRecoveryContainer(uint64_t a1, uint64_t a2)
{
  sub_100008EA8(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_100008EA8(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_100008EA8(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  sub_100008EA8(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v6 = *(void *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 168);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v6;
  swift_unknownObjectRelease();
  *(void *)(a1 + 168) = v7;
  sub_100008EA8(a1 + 176);
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustodianRecoveryContainer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 216)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustodianRecoveryContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 216) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 216) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecoveryContainer()
{
  return &type metadata for CustodianRecoveryContainer;
}

uint64_t sub_100118228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v13;
  v14[3] = a3;
  v14[4] = a4;
  sub_10011BC60(a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  *(void *)&v12[*(int *)(v9 + 40)] = 2;
  sub_100008EF8((void *)(v4 + 16), *(void *)(v4 + 40));
  swift_retain();
  swift_retain();
  sub_1000E5FA8((uint64_t)v12, (uint64_t)sub_100119A20, (uint64_t)v14);
  sub_10011BB98((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  swift_release();
  return swift_release();
}

uint64_t sub_100118384(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  uint64_t v39 = a3;
  uint64_t v6 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v10 = __chkstk_darwin(v6 - 8, v9);
  uint64_t v11 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v15 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (uint64_t *)((char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v18, &qword_100325890);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E760);
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 138412290;
      uint64_t v25 = _convertErrorToNSError(_:)();
      uint64_t v40 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v25;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error updating Inheritance invitation %@", v23, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    v39(v19);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10011BBF8((uint64_t)v18, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E760);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Inheritance invitation updated!", v29, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v31 = Strong;
      uint64_t v32 = swift_allocObject();
      swift_beginAccess();
      swift_weakLoadStrong();
      swift_weakInit();
      swift_release();
      sub_10011BC60((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      unint64_t v33 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      unint64_t v34 = (v8 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v35 = swift_allocObject();
      sub_10011BBF8((uint64_t)v11, v35 + v33, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      os_log_type_t v36 = (void (**)(uint64_t))(v35 + v34);
      void *v36 = v39;
      v36[1] = a4;
      *(void *)(v35 + ((v34 + 23) & 0xFFFFFFFFFFFFFFF8)) = v32;
      sub_100008EF8((void *)(v31 + 16), *(void *)(v31 + 40));
      swift_retain();
      swift_retain();
      sub_1000E7554((uint64_t)v14, (uint64_t)sub_10011B4BC, v35);
      swift_release();
      swift_release();
      sub_10011BB98((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      return swift_release();
    }
    else
    {
      return sub_10011BB98((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    }
  }
}

uint64_t sub_1001188AC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v73 = a5;
  uint64_t v75 = a4;
  uint64_t v72 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v70 = *(void *)(v72 - 8);
  uint64_t v8 = *(void *)(v70 + 64);
  uint64_t v10 = __chkstk_darwin(v72, v9);
  uint64_t v71 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v69 = (uint64_t)&v68 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v68 - v16;
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v68 - v19;
  uint64_t v21 = type metadata accessor for InheritanceInvitationRecord();
  __chkstk_darwin(v21 - 8, v22);
  uint64_t v24 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v25, v26);
  os_log_type_t v28 = (uint64_t *)((char *)&v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v28, &qword_100321CF0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v74 = a3;
  if (EnumCaseMultiPayload != 1)
  {
    sub_10011BBF8((uint64_t)v28, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v37 = (uint64_t)v20;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    uint64_t v39 = sub_100007288(v38, (uint64_t)qword_10033E760);
    sub_10011BC60((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v68 = v39;
      uint64_t v43 = (uint8_t *)v42;
      v76[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315138;
      uint64_t v44 = sub_1000187A8();
      uint64_t v77 = sub_100135190(v44, v45, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10011BB98((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Successfully fetched Beneficiary - %s", v43, 0xCu);
      swift_arrayDestroy();
      uint64_t v37 = (uint64_t)v20;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10011BB98((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }

    uint64_t v47 = v73;
    uint64_t v48 = v37 + *(int *)(v72 + 20);
    unint64_t v49 = *(void *)(v48 + 8);
    if (v49)
    {
      uint64_t v50 = *(void ***)v48;
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        uint64_t v51 = v71;
        sub_10011BC60(v37, v71, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        uint64_t v52 = *(unsigned __int8 *)(v70 + 80);
        uint64_t v73 = v37;
        uint64_t v53 = (v52 + 40) & ~v52;
        unint64_t v54 = (v8 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
        id v55 = (void *)swift_allocObject();
        uint64_t v56 = v75;
        v55[2] = v74;
        v55[3] = v56;
        v55[4] = v47;
        sub_10011BBF8(v51, (uint64_t)v55 + v53, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        id v57 = (void ***)((char *)v55 + v54);
        char *v57 = v50;
        v57[1] = (void **)v49;
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_retain();
        uint64_t v58 = v73;
        sub_1001196EC(v73, v50, v49, (uint64_t)sub_10011B768, (uint64_t)v55);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v59 = v58;
        return sub_10011BB98(v59, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      }
    }
    else
    {
      uint64_t v60 = v69;
      sub_10011BC60(v37, v69, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        v76[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 136315138;
        uint64_t v64 = sub_1000187A8();
        uint64_t v77 = sub_100135190(v64, v65, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10011BB98(v60, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Cannot proceed. Beneficiary handle is nil - %s", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10011BB98(v60, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      }

      os_log_type_t v66 = v74;
      type metadata accessor for InheritanceError(0);
      uint64_t v77 = 2;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10011BAA8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v67 = (void *)v76[0];
      v66(v76[0]);
    }
    uint64_t v59 = v37;
    return sub_10011BB98(v59, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
  uint64_t v30 = *v28;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_100007288(v31, (uint64_t)qword_10033E760);
  sub_10011BC60(a2, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    v76[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v34 = 136315138;
    type metadata accessor for UUID();
    sub_10011BAA8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v77 = sub_100135190(v35, v36, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10011BB98((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to fetch Beneficiary Record with beneficiaryID - %s", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10011BB98((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }

  swift_errorRetain();
  v74(v30);
  swift_errorRelease();
  return swift_errorRelease();
}

uint64_t sub_1001191B8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007288(v10, (uint64_t)qword_10033E760);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to share Beneficiary Record.", v13, 2u);
      swift_slowDealloc();
    }

    swift_errorRetain();
    a2(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E760);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Successfully shared BeneficiaryRecord. Creating Health Record...", v21, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = a2;
      *(void *)(v22 + 24) = a3;
      uint64_t v23 = swift_allocObject();
      swift_weakInit();
      uint64_t v24 = (void *)swift_allocObject();
      void v24[2] = sub_10011BB28;
      v24[3] = v22;
      v24[4] = v23;
      v24[5] = a6;
      v24[6] = a7;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_10011A394(a5, (uint64_t)sub_10011BB80, (uint64_t)v24);
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1001194D4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E760);
  swift_errorRetain();
  swift_errorRetain();
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    if (a1)
    {
      swift_errorRetain();
      uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v9 = 0;
    }
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Finished sharing health record. Error: %@", v7, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return a2(a1);
}

uint64_t sub_1001196EC(uint64_t a1, void **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a5;
  uint64_t v27 = a2;
  uint64_t v8 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  os_log_type_t v12 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007288(v13, (uint64_t)qword_10033E760);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Sharing Cloud Record...", v16, 2u);
    swift_slowDealloc();
  }

  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  sub_10011BC60(a1, (uint64_t)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v18 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = a1;
  unint64_t v20 = (v10 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = (void *)swift_allocObject();
  uint64_t v22 = v27;
  v21[2] = v17;
  v21[3] = v22;
  v21[4] = a3;
  sub_10011BBF8((uint64_t)v12, (uint64_t)v21 + v18, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t v23 = (void *)((char *)v21 + v20);
  uint64_t v24 = v26;
  uint64_t *v23 = a4;
  v23[1] = v24;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100011D2C(a4);
  sub_10007AFB8(v19, v22, a3, (uint64_t)sub_10011BA00, (uint64_t)v21);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for BeneficiaryAcceptedStatusHandler()
{
  return self;
}

uint64_t sub_100119984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100118228(a1, a2, a3, a4);
}

uint64_t sub_1001199A8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001199E0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100119A20(uint64_t a1)
{
  return sub_100118384(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_100119A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v52 = a5;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v11 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CloudShareInfo();
  uint64_t v17 = __chkstk_darwin(v15 - 8, v16);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v47 - v21;
  uint64_t v23 = sub_100009F04(&qword_100322948);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (uint64_t *)((char *)&v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v26, &qword_100322948);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v51 = (void (*)(uint64_t))a6;
    uint64_t v27 = *v26;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E760);
    sub_10011BC60(v52, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    os_log_type_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      uint64_t v48 = a7;
      *(_DWORD *)uint64_t v31 = 136315138;
      type metadata accessor for UUID();
      sub_10011BAA8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v54 = sub_100135190(v32, v33, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10011BB98((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to share accessKey for beneficiaryID - %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10011BB98((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }

    uint64_t v43 = v51;
    if (v51)
    {
      swift_errorRetain();
      v43(v27);
      swift_errorRelease();
    }
    return swift_errorRelease();
  }
  else
  {
    uint64_t v34 = a2 + 16;
    sub_10011BBF8((uint64_t)v26, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100007288(v35, (uint64_t)qword_10033E760);
    sub_10011BC60((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v51 = (void (*)(uint64_t))a6;
      uint64_t v39 = (uint8_t *)v38;
      uint64_t v40 = swift_slowAlloc();
      uint64_t v47 = v34;
      v53[0] = v40;
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t v48 = a7;
      type metadata accessor for URL();
      sub_10011BAA8((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v54 = sub_100135190(v41, v42, v53);
      a7 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10011BB98((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Successfully shared record with URL - %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a6 = (uint64_t)v51;
      swift_slowDealloc();
    }
    else
    {
      sub_10011BB98((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      sub_100008A94(Strong + 56, (uint64_t)v53);
      swift_release();
      uint64_t v46 = *sub_100008EF8(v53, v53[3]);
      sub_100011D2C(a6);
      sub_10019C06C((uint64_t)v22, v49, v50, v52, v46, a6, a7);
      sub_100011358(a6);
      sub_10011BB98((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
      return sub_100008EA8((uint64_t)v53);
    }
    else
    {
      return sub_10011BB98((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    }
  }
}

uint64_t sub_10011A0A8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, void **a5, unint64_t a6)
{
  uint64_t v31 = a5;
  unint64_t v32 = a6;
  uint64_t v9 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v30 + 64);
  uint64_t v12 = __chkstk_darwin(v9 - 8, v11);
  uint64_t v13 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v29 - v15;
  uint64_t v17 = sub_100009F04(&qword_10032B730);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (void *)((char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v20, &qword_10032B730);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = *v20;
    if (a2)
    {
      swift_errorRetain();
      a2(v21);
      swift_errorRelease();
    }
    return swift_errorRelease();
  }
  else
  {
    sub_10011BBF8((uint64_t)v20, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v29[1] = Strong;
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = a2;
      *(void *)(v24 + 24) = a3;
      sub_10011BC60((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      unint64_t v25 = (*(unsigned __int8 *)(v30 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      uint64_t v26 = (void *)swift_allocObject();
      uint64_t v27 = v31;
      unint64_t v28 = v32;
      v26[2] = v31;
      void v26[3] = v28;
      v26[4] = sub_10011BD68;
      void v26[5] = v24;
      sub_10011BBF8((uint64_t)v13, (uint64_t)v26 + v25, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      sub_100011D2C((uint64_t)a2);
      swift_bridgeObjectRetain();
      swift_retain();
      sub_10007C754((uint64_t)v16, v27, v28, (uint64_t)sub_10011BF18, (uint64_t)v26);
      swift_release();
      swift_release();
      swift_release();
    }
    return sub_10011BB98((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }
}

uint64_t sub_10011A394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = (int *)type metadata accessor for InheritanceHealthRecord();
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v31, v12);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E760);
  sub_10011BC60(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v28 = a1;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v30 = a3;
    v27[1] = v20;
    uint64_t v33 = v20;
    uint64_t v29 = v3;
    *(_DWORD *)uint64_t v19 = 136315138;
    v27[0] = v19 + 4;
    type metadata accessor for UUID();
    sub_10011BAA8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v32 = sub_100135190(v21, v22, &v33);
    uint64_t v4 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10011BB98((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Creating Inheritance Health Record for beneficiaryID - %s", v19, 0xCu);
    swift_arrayDestroy();
    a3 = v30;
    swift_slowDealloc();
    a1 = v28;
    swift_slowDealloc();
  }
  else
  {
    sub_10011BB98((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }

  uint64_t v23 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v11, a1, v23);
  Date.init(timeIntervalSince1970:)();
  UUID.init()();
  char v24 = *(unsigned char *)(a1 + *(int *)(v31 + 40));
  *(_OWORD *)&v11[v8[6]] = xmmword_1002A9C60;
  *(_OWORD *)&v11[v8[8]] = xmmword_1002A9C60;
  v11[v8[9]] = v24;
  sub_100008EF8((void *)(v4 + 16), *(void *)(v4 + 40));
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a2;
  *(void *)(v25 + 24) = a3;
  swift_retain();
  sub_1000ECF2C((uint64_t)v11, (uint64_t)sub_10011BB90, v25);
  swift_release();
  return sub_10011BB98((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
}

uint64_t sub_10011A790(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v36 - v10;
  uint64_t v12 = sub_100009F04(&qword_10032B730);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (uint64_t *)((char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (uint64_t *)((char *)&v36 - v18);
  sub_100019730(a1, (uint64_t)&v36 - v18, &qword_10032B730);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v39 = a2;
      char v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v40 = v20;
      uint64_t v41 = v25;
      uint64_t v38 = v12;
      *(_DWORD *)char v24 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t v40 = sub_100135190(v26, v27, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a2 = v39;
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error saving health Record: - %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t *v16 = v20;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v16);
    swift_errorRelease();
    return sub_10011BCC8((uint64_t)v16);
  }
  else
  {
    sub_10011BBF8((uint64_t)v19, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E760);
    sub_10011BC60((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v38 = v12;
      uint64_t v32 = (uint8_t *)v31;
      uint64_t v37 = swift_slowAlloc();
      uint64_t v41 = v37;
      uint64_t v39 = a2;
      *(_DWORD *)uint64_t v32 = 136315138;
      unint64_t v36 = v32 + 4;
      type metadata accessor for UUID();
      sub_10011BAA8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = sub_100135190(v33, v34, &v41);
      a2 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10011BB98((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Successfully created health record for beneficiaryID - %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10011BB98((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    }

    sub_10011BC60((uint64_t)v11, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    swift_storeEnumTagMultiPayload();
    a2(v16);
    sub_10011BCC8((uint64_t)v16);
    return sub_10011BB98((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }
}

uint64_t sub_10011AD30(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a5;
  uint64_t v41 = a4;
  uint64_t v10 = type metadata accessor for InheritanceHealthRecord();
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CloudShareInfo();
  uint64_t v16 = __chkstk_darwin(v14 - 8, v15);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v40 - v20;
  uint64_t v22 = sub_100009F04(&qword_100322948);
  __chkstk_darwin(v22, v23);
  uint64_t v25 = (uint64_t *)((char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v25, &qword_100322948);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = *v25;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E760);
    sub_10011BC60(a6, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v30 = 136315138;
      type metadata accessor for UUID();
      sub_10011BAA8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v42 = sub_100135190(v31, v32, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10011BB98((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to share health record for beneficiaryID - %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10011BB98((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    }

    swift_errorRetain();
    v41(v26);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10011BBF8((uint64_t)v25, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E760);
    sub_10011BC60((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    swift_bridgeObjectRetain_n();
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_100135190(a2, a3, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v36 + 12) = 2080;
      type metadata accessor for URL();
      sub_10011BAA8((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v42 = sub_100135190(v37, v38, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10011BB98((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Successfully shared health record with %s. URL - %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_10011BB98((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    }

    v41(0);
    return sub_10011BB98((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
  }
}

uint64_t sub_10011B344()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_10011B4BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *(void (**)(uint64_t))(v1 + v5);
  uint64_t v8 = *(void *)(v1 + v5 + 8);

  return sub_1001188AC(a1, v1 + v4, v7, v8, v6);
}

uint64_t sub_10011B568()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10011B768(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (void (*)(uint64_t))v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + v4;
  uint64_t v9 = (void *)((char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return sub_1001191B8(a1, v5, v6, v7, v8, v10, v11);
}

uint64_t sub_10011B810()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  unint64_t v4 = (*(void *)(*((void *)v1 - 1) + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v5 + v1[7]), *(void *)(v5 + v1[7] + 8));
  v8(v5 + v1[8], v6);
  sub_100013198(*(void *)(v5 + v1[9]), *(void *)(v5 + v1[9] + 8));
  uint64_t v9 = v5 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6)) {
    v8(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v4)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v4 + 16, v2 | 7);
}

uint64_t sub_10011BA00(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + v4;
  uint64_t v9 = (void *)((char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return sub_100119A2C(a1, v5, v6, v7, v8, v10, v11);
}

uint64_t sub_10011BAA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10011BAF0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011BB28(uint64_t a1)
{
  return sub_1001194D4(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10011BB30()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10011BB80(uint64_t a1)
{
  return sub_10011A0A8(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void ***)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_10011BB90(uint64_t a1)
{
  return sub_10011A790(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_10011BB98(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10011BBF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10011BC60(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10011BCC8(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_10032B730);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10011BD28()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011BD68()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_10011BD98()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + v1[7];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  sub_100013198(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10011BF18(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v6 = (void (*)(uint64_t))v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10011AD30(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10011BF94(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v36 = a4;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustodianshipRecordBuilder.Components();
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100009F04((uint64_t *)&unk_100327828);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (uint64_t *)((char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v21, (uint64_t *)&unk_100327828);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = *v21;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v35 = a3;
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138412290;
      uint64_t v28 = _convertErrorToNSError(_:)();
      uint64_t v37 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v27 = v28;
      a3 = v35;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error building custodian record: %@", v26, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    *uint64_t v9 = v22;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v9);
    swift_errorRelease();
    return sub_100006574((uint64_t)v9, (uint64_t *)&unk_100322960);
  }
  else
  {
    sub_10011FD38((uint64_t)v21, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianshipRecordBuilder.Components);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E748);
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Custodian components fetched, building record...", v32, 2u);
      swift_slowDealloc();
    }

    sub_10011C438((uint64_t)v17, (uint64_t)v13);
    sub_10011FC70((uint64_t)v13, (uint64_t)v9, type metadata accessor for CustodianshipRecords);
    swift_storeEnumTagMultiPayload();
    a3(v9);
    sub_100006574((uint64_t)v9, (uint64_t *)&unk_100322960);
    sub_10011FCD8((uint64_t)v13, type metadata accessor for CustodianshipRecords);
    return sub_10011FCD8((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianshipRecordBuilder.Components);
  }
}

uint64_t sub_10011C438@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v166 = a1;
  uint64_t v148 = a2;
  uint64_t v178 = type metadata accessor for CustodianshipRecordBuilder.Components();
  __chkstk_darwin(v178, v3);
  uint64_t v160 = (char *)&v141 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for CustodianHealthRecord();
  __chkstk_darwin(v149, v5);
  v161 = (char *)&v141 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = type metadata accessor for SHA256();
  uint64_t v141 = *(void *)(v145 - 8);
  __chkstk_darwin(v145, v7);
  uint64_t v146 = (char *)&v141 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for SHA256Digest();
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144, v9);
  v142 = (char *)&v141 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = type metadata accessor for CustodianRecoveryInfoRecord();
  __chkstk_darwin(v158, v11);
  uint64_t v167 = (uint64_t)&v141 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100009F04((uint64_t *)&unk_100322990);
  uint64_t v15 = __chkstk_darwin(v13 - 8, v14);
  uint64_t v159 = (uint64_t)&v141 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v157 = (uint64_t)&v141 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v171 = (uint64_t *)((char *)&v141 - v21);
  uint64_t v22 = type metadata accessor for UUID();
  unint64_t v179 = *(void *)(v22 - 8);
  uint64_t v180 = v22;
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v177 = (char *)&v141 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v176 = (char *)&v141 - v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  *(void *)&long long v175 = (char *)&v141 - v31;
  __chkstk_darwin(v30, v32);
  v174 = (char *)&v141 - v33;
  uint64_t v34 = (int *)type metadata accessor for CustodianRecord();
  __chkstk_darwin(v34, v35);
  uint64_t v165 = (uint64_t)&v141 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContactsHelper();
  uint64_t v37 = swift_allocObject();
  sub_100009F04((uint64_t *)&unk_100325960);
  Dependency.init(dependencyId:config:)();
  unint64_t v38 = *(void **)(v2 + 176);
  id v39 = [v38 handle];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v40 = sub_100009F04((uint64_t *)&unk_100324D30);
  Dependency.wrappedValue.getter();
  uint64_t v41 = (void *)v182[0];
  NSString v42 = String._bridgeToObjectiveC()();
  id v43 = [v41 contactForHandle:v42];

  swift_unknownObjectRelease();
  if (v43)
  {
    id v44 = objc_allocWithZone((Class)AALocalContactInfo);
    swift_bridgeObjectRetain();
    id v45 = v43;
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v47 = [v44 initWithHandle:v46 contact:v45];
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v47 = 0;
  }
  swift_setDeallocating();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v37 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v40);
  swift_deallocClassInstance();
  id v48 = [self currentInfo];
  uint64_t v49 = v178;
  if (!v48) {
LABEL_39:
  }
    __break(1u);
  uint64_t v50 = v48;
  id v51 = [v48 buildVersion];

  uint64_t v52 = v166;
  if (v51)
  {
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v172 = v54;
    uint64_t v173 = v53;
  }
  else
  {
    uint64_t v172 = 0;
    uint64_t v173 = 0;
  }
  UUID.init()();
  id v55 = *(void (**)(char *, uint64_t, uint64_t))(v179 + 16);
  uint64_t v164 = v179 + 16;
  uint64_t v163 = v55;
  v55((char *)v175, v52, v180);
  id v56 = [v38 handle];
  uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v155 = v57;

  if (v47)
  {
    id v58 = [v47 firstName];
    uint64_t v59 = v171;
    if (v58)
    {
      uint64_t v60 = v58;
      uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v152 = v61;
    }
    else
    {
      uint64_t v153 = 0;
      uint64_t v152 = 0;
    }
    id v62 = [v47 lastName];
    if (v62)
    {
      uint64_t v63 = v62;
      uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v150 = v64;
    }
    else
    {
      uint64_t v151 = 0;
      uint64_t v150 = 0;
    }
  }
  else
  {
    uint64_t v151 = 0;
    uint64_t v150 = 0;
    uint64_t v153 = 0;
    uint64_t v152 = 0;
    uint64_t v59 = v171;
  }
  uint64_t v171 = (uint64_t *)(v52 + *(int *)(v49 + 28));
  sub_100019730((uint64_t)v171, (uint64_t)v59, (uint64_t *)&unk_100322990);
  uint64_t v65 = type metadata accessor for RecoveryKeys(0);
  uint64_t v66 = *(void *)(v65 - 8);
  v169 = *(uint64_t (**)(uint64_t *, uint64_t))(v66 + 48);
  uint64_t v170 = v65;
  uint64_t v168 = v66 + 48;
  int v67 = v169(v59, 1);
  id v147 = v47;
  if (v67 == 1)
  {
    sub_100006574((uint64_t)v59, (uint64_t *)&unk_100322990);
    uint64_t v68 = 0;
    unint64_t v69 = 0xF000000000000000;
  }
  else
  {
    uint64_t v68 = *v59;
    unint64_t v69 = v59[1];
    sub_100013140(*v59, v69);
    sub_10011FCD8((uint64_t)v59, type metadata accessor for RecoveryKeys);
  }
  uint64_t v162 = *(int *)(v49 + 32);
  char v70 = *(unsigned char *)(v52 + v162);
  uint64_t v71 = v165;
  uint64_t v72 = v165 + v34[16];
  unint64_t v73 = v179;
  uint64_t v74 = v180;
  v154 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v179 + 56);
  v154(v72, 1, 1, v180);
  uint64_t v75 = *(void (**)(uint64_t, char *, uint64_t))(v73 + 32);
  v75(v71, v174, v74);
  uint64_t v76 = v71 + v34[5];
  unint64_t v179 = v73 + 32;
  v75(v76, (char *)v175, v74);
  uint64_t v77 = (uint64_t *)(v71 + v34[6]);
  uint64_t v78 = v155;
  uint64_t *v77 = v156;
  v77[1] = v78;
  id v79 = (uint64_t *)(v71 + v34[7]);
  uint64_t v80 = v152;
  *id v79 = v153;
  v79[1] = v80;
  uint64_t v81 = (uint64_t *)(v71 + v34[8]);
  uint64_t v82 = v150;
  *uint64_t v81 = v151;
  v81[1] = v82;
  *(void *)(v71 + v34[9]) = 1;
  os_log_t v83 = (uint64_t *)(v71 + v34[10]);
  uint64_t *v83 = v68;
  v83[1] = v69;
  uint64_t v84 = v34[11];
  long long v175 = xmmword_1002A9C60;
  *(_OWORD *)(v71 + v84) = xmmword_1002A9C60;
  *(unsigned char *)(v71 + v34[12]) = v70;
  os_log_t v85 = (uint64_t *)(v71 + v34[13]);
  uint64_t v86 = v172;
  *os_log_t v85 = v173;
  v85[1] = v86;
  uint64_t v87 = (void *)(v71 + v34[14]);
  *uint64_t v87 = 0;
  v87[1] = 0;
  uint64_t v88 = v71 + v34[15];
  *(void *)uint64_t v88 = 0;
  *(unsigned char *)(v88 + 8) = 1;
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v89 = v74;
  uint64_t v90 = v52;
  v163(v177, v52, v89);
  unint64_t v91 = (uint64_t *)(v52 + *(int *)(v178 + 24));
  uint64_t v92 = v91[3];
  v174 = (char *)v91[2];
  uint64_t v94 = *v91;
  unint64_t v93 = v91[1];
  uint64_t v95 = v157;
  sub_100019730((uint64_t)v171, v157, (uint64_t *)&unk_100322990);
  int v96 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v169)(v95, 1, v170);
  uint64_t v178 = v94;
  if (v96 == 1)
  {
    swift_bridgeObjectRetain();
    sub_100013140(v94, v93);
    sub_100006574(v95, (uint64_t *)&unk_100322990);
    uint64_t v97 = 0;
    unint64_t v98 = 0xF000000000000000;
  }
  else
  {
    uint64_t v97 = *(void *)(v95 + 16);
    unint64_t v98 = *(void *)(v95 + 24);
    swift_bridgeObjectRetain();
    sub_100013140(v94, v93);
    sub_100013140(v97, v98);
    sub_10011FCD8(v95, type metadata accessor for RecoveryKeys);
  }
  char v99 = *(unsigned char *)(v90 + v162);
  id v100 = (int *)v158;
  uint64_t v101 = v167;
  uint64_t v102 = v180;
  v154(v167 + *(int *)(v158 + 44), 1, 1, v180);
  v75(v101, v176, v102);
  v75(v101 + v100[5], v177, v102);
  uint64_t v103 = (void *)(v101 + v100[6]);
  *uint64_t v103 = v174;
  v103[1] = v92;
  unint64_t v104 = (uint64_t *)(v101 + v100[7]);
  *unint64_t v104 = v178;
  v104[1] = v93;
  uint64_t v105 = (uint64_t *)(v101 + v100[8]);
  uint64_t *v105 = v97;
  v105[1] = v98;
  *(_OWORD *)(v101 + v100[9]) = v175;
  *(unsigned char *)(v101 + v100[10]) = v99;
  unint64_t v106 = (uint64_t *)(v101 + v100[12]);
  uint64_t v107 = (uint64_t)v171;
  uint64_t v108 = v172;
  *unint64_t v106 = v173;
  v106[1] = v108;
  uint64_t v109 = v159;
  sub_100019730(v107, v159, (uint64_t *)&unk_100322990);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v169)(v109, 1, v170) == 1)
  {
    sub_100006574(v109, (uint64_t *)&unk_100322990);
    uint64_t v110 = 0;
    unint64_t v111 = 0xF000000000000000;
    uint64_t v112 = (uint64_t)v161;
    uint64_t v113 = (uint64_t)v160;
    goto LABEL_32;
  }
  uint64_t v114 = *(void *)(v109 + 16);
  unint64_t v115 = *(void *)(v109 + 24);
  sub_100013140(v114, v115);
  sub_10011FCD8(v109, type metadata accessor for RecoveryKeys);
  sub_10011FDA0((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
  uint64_t v116 = v146;
  uint64_t v117 = v145;
  dispatch thunk of HashFunction.init()();
  uint64_t v112 = (uint64_t)v161;
  uint64_t v113 = (uint64_t)v160;
  switch(v115 >> 62)
  {
    case 1uLL:
      if (v114 >> 32 < (int)v114)
      {
        __break(1u);
        goto LABEL_39;
      }
      sub_100013140(v114, v115);
      uint64_t v116 = v146;
      sub_1002565D4((int)v114, v114 >> 32);
LABEL_31:
      sub_100013198(v114, v115);
      uint64_t v121 = v142;
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v141 + 8))(v116, v117);
      sub_10011FDA0(&qword_100327840, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
      uint64_t v122 = v144;
      uint64_t v123 = Digest.makeIterator()();
      uint64_t v125 = sub_100018F50(v123, v124);
      swift_bridgeObjectRelease();
      uint64_t v110 = sub_100213BE0(v125);
      unint64_t v111 = v126;
      swift_release();
      sub_100013198(v114, v115);
      (*(void (**)(char *, uint64_t))(v143 + 8))(v121, v122);
LABEL_32:
      UUID.init()();
      uint64_t v127 = (int *)v149;
      uint64_t v128 = v166;
      v163((char *)(v112 + *(int *)(v149 + 20)), v166, v180);
      Date.init(timeIntervalSince1970:)();
      char v129 = *(unsigned char *)(v128 + v162);
      uint64_t v130 = (uint64_t *)(v112 + v127[7]);
      *uint64_t v130 = v110;
      v130[1] = v111;
      *(_OWORD *)(v112 + v127[8]) = v175;
      *(unsigned char *)(v112 + v127[9]) = v129;
      uint64_t v131 = v112 + v127[10];
      *(void *)uint64_t v131 = 0;
      *(unsigned char *)(v131 + 8) = 1;
      sub_1000196B4(v110, v111);
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v132 = type metadata accessor for Logger();
      sub_100007288(v132, (uint64_t)qword_10033E748);
      sub_10011FC70(v128, v113, (uint64_t (*)(void))type metadata accessor for CustodianshipRecordBuilder.Components);
      uint64_t v133 = Logger.logObject.getter();
      os_log_type_t v134 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v133, v134))
      {
        unint64_t v135 = (uint8_t *)swift_slowAlloc();
        v182[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v135 = 136315138;
        unint64_t v179 = v111;
        sub_10011FDA0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v136 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v181 = sub_100135190(v136, v137, v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10011FCD8(v113, (uint64_t (*)(void))type metadata accessor for CustodianshipRecordBuilder.Components);
        _os_log_impl((void *)&_mh_execute_header, v133, v134, "Custodianship records %s built successfully.", v135, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000196A0(v110, v179);
      }
      else
      {

        sub_1000196A0(v110, v111);
        sub_10011FCD8(v113, (uint64_t (*)(void))type metadata accessor for CustodianshipRecordBuilder.Components);
      }
      uint64_t v138 = v148;
      sub_10011FD38(v165, v148, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v139 = type metadata accessor for CustodianshipRecords(0);
      sub_10011FD38(v167, v138 + *(int *)(v139 + 20), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      return sub_10011FD38(v112, v138 + *(int *)(v139 + 24), (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    case 2uLL:
      uint64_t v118 = *(void *)(v114 + 16);
      uint64_t v119 = *(void *)(v114 + 24);
      sub_100013140(v114, v115);
      swift_retain();
      swift_retain();
      uint64_t v120 = v119;
      uint64_t v116 = v146;
      sub_1002565D4(v118, v120);
      swift_release();
      swift_release();
      goto LABEL_31;
    case 3uLL:
      memset(v182, 0, 14);
      goto LABEL_30;
    default:
      v182[0] = v114;
      LOWORD(v182[1]) = v115;
      BYTE2(v182[1]) = BYTE2(v115);
      BYTE3(v182[1]) = BYTE3(v115);
      BYTE4(v182[1]) = BYTE4(v115);
      BYTE5(v182[1]) = BYTE5(v115);
LABEL_30:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      goto LABEL_31;
  }
}

uint64_t sub_10011D65C()
{
  sub_100008EA8(v0 + 16);
  sub_100008EA8(v0 + 56);
  sub_100008EA8(v0 + 96);
  sub_100008EA8(v0 + 136);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustodianshipRecordBuilder()
{
  return self;
}

uint64_t sub_10011D6D8(uint64_t a1, char a2, void (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v13 = sub_100009F04((uint64_t *)&unk_100327828);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (uint64_t *)((char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 & 1) == 0) {
    return sub_10011D968(a6, a7, a1 & 1, a3, a4);
  }
  swift_errorRetain();
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100007288(v18, (uint64_t)qword_10033E748);
  swift_errorRetain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v26 = a4;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 138412290;
    uint64_t v22 = a3;
    uint64_t v23 = _convertErrorToNSError(_:)();
    uint64_t v27 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v23;
    a3 = v22;
    sub_100080A98(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error fetching manatee status: %@", v21, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100080A98(a1, 1);
  }

  uint64_t *v16 = a1;
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  a3(v16);
  sub_100080A98(a1, 1);
  return sub_100006574((uint64_t)v16, (uint64_t *)&unk_100327828);
}

uint64_t sub_10011D968(uint64_t a1, void *a2, int a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v57 = a2;
  uint64_t v59 = a4;
  uint64_t v60 = a5;
  int v58 = a3;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100322990);
  __chkstk_darwin(v6 - 8, v7);
  id v55 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100009F04((uint64_t *)&unk_100327828);
  __chkstk_darwin(v53, v9);
  uint64_t v54 = (uint64_t *)((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v51 - v18;
  os_log_type_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v52 = a1;
  v20((char *)&v51 - v18, a1, v11);
  v20(v16, (uint64_t)v19, v11);
  unint64_t v21 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v22 = (v21 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = v56;
  *(void *)(v24 + 16) = v56;
  uint64_t v26 = v60;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v24 + v21, v19, v11);
  unint64_t v27 = v24 + v22;
  uint64_t v28 = v57;
  *(void *)unint64_t v27 = v57;
  char v29 = v58;
  *(unsigned char *)(v27 + 8) = v58;
  uint64_t v30 = (void *)(v24 + v23);
  *uint64_t v30 = v59;
  v30[1] = v26;
  uint64_t v31 = self;
  swift_retain();
  id v32 = v28;
  swift_retain();
  if ([v31 simulate2FAFA])
  {
    uint64_t v33 = type metadata accessor for RecoveryKeys(0);
    uint64_t v34 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v55, 1, 1, v33);
    sub_10011DF88((uint64_t)v16, v32, v29 & 1, v34, (uint64_t)v59, v60);
    swift_release();
    sub_100006574(v34, (uint64_t *)&unk_100322990);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    if (v29)
    {
      uint64_t v36 = v25;
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_100007288(v37, (uint64_t)qword_10033E748);
      unint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Manatee available. Creating Custodian Recovery Keys in OctagonTrust.", v40, 2u);
        swift_slowDealloc();
      }

      uint64_t v41 = (void *)*sub_100008EF8((void *)(v36 + 96), *(void *)(v36 + 120));
      uint64_t v42 = v60;
      swift_retain();
      swift_retain();
      sub_1001E6D3C(v52, v41, (void (*)(char *))sub_10011F80C, v24, v59, v42);
      swift_release_n();
      return swift_release();
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      sub_100007288(v43, (uint64_t)qword_10033E748);
      id v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        NSString v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)NSString v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Manatee unavailable. Not creating Custodian Recovery Keys in OctagonTrust.", v46, 2u);
        swift_slowDealloc();
      }

      id v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Not proceeding with IdMS Setup without recovery keys.", v49, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v61 = -7023;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10011FDA0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v50 = v54;
      *uint64_t v54 = v62;
      swift_storeEnumTagMultiPayload();
      v59(v50);
      swift_release();
      return sub_100006574((uint64_t)v50, (uint64_t *)&unk_100327828);
    }
  }
}

void sub_10011DF88(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v38 = a4;
  int v39 = a3;
  uint64_t v35 = a2;
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100322990);
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v37 + 64);
  __chkstk_darwin(v10 - 8, v12);
  uint64_t v36 = (uint64_t)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  uint64_t v33 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = [objc_allocWithZone((Class)AKCustodianContext) init];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v17 setCustodianUUID:isa];

  id v19 = [a2 aa_altDSID];
  [v17 setAltDSID:v19];

  id v20 = [*(id *)(v7 + 176) custodianSetupToken];
  [v17 setCustodianSetupToken:v20];

  uint64_t v34 = sub_100008EF8((void *)(v7 + 16), *(void *)(v7 + 40));
  uint64_t v21 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  uint64_t v22 = v36;
  sub_100019730(v38, v36, (uint64_t *)&unk_100322990);
  unint64_t v23 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v24 = (v15 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (*(unsigned __int8 *)(v37 + 80) + v24 + 8) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  uint64_t v26 = v25 + v11;
  uint64_t v27 = swift_allocObject();
  unint64_t v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v27 + v23, v33, v21);
  char v29 = v35;
  *(void *)(v27 + v24) = v35;
  sub_10002895C(v22, v27 + v25, (uint64_t *)&unk_100322990);
  *(unsigned char *)(v27 + v26) = v39;
  uint64_t v30 = v41;
  *(void *)(v28 + 8) = v40;
  *(void *)(v28 + 16) = v30;
  id v31 = v29;
  swift_retain();
  sub_10004D17C((uint64_t)v17, (uint64_t)sub_10011FA88, v27);
  swift_release();
}

uint64_t sub_10011E2A4(uint64_t a1, void (*a2)(char *), uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v28 = a5;
  char v29 = a4;
  uint64_t v30 = a3;
  id v31 = a2;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100327828);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (uint64_t *)((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100322990);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for RecoveryKeys(0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100009F04((uint64_t *)&unk_100322980);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (uint64_t *)((char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v22, (uint64_t *)&unk_100322980);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v9 = *v22;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v29(v9);
    swift_errorRelease();
    return sub_100006574((uint64_t)v9, (uint64_t *)&unk_100327828);
  }
  else
  {
    sub_10011FD38((uint64_t)v22, (uint64_t)v18, type metadata accessor for RecoveryKeys);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E748);
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Created Custodian Recovery Keys in OctagonTrust. Proceeding to IdMS Setup.", v27, 2u);
      swift_slowDealloc();
    }

    sub_10011FC70((uint64_t)v18, (uint64_t)v13, type metadata accessor for RecoveryKeys);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
    v31(v13);
    sub_100006574((uint64_t)v13, (uint64_t *)&unk_100322990);
    return sub_10011FCD8((uint64_t)v18, type metadata accessor for RecoveryKeys);
  }
}

uint64_t sub_10011E60C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, void (*a6)(void *), uint64_t a7)
{
  uint64_t v26 = a7;
  uint64_t v27 = a6;
  int v25 = a5;
  sub_10002895C(a1, (uint64_t)v28, &qword_100327838);
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_100327828);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = (int *)type metadata accessor for CustodianshipRecordBuilder.Components();
  __chkstk_darwin(v15, v16);
  uint64_t v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002895C(a1, (uint64_t)v29, &qword_100327838);
  if (v30)
  {
    *uint64_t v14 = *(void *)&v29[0];
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v27(v14);
    return sub_100006574((uint64_t)v14, (uint64_t *)&unk_100327828);
  }
  else
  {
    long long v31 = v29[0];
    long long v32 = v29[1];
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, a2, v20);
    sub_100019730(a4, (uint64_t)&v18[v15[7]], (uint64_t *)&unk_100322990);
    *(void *)&v18[v15[5]] = a3;
    uint64_t v21 = &v18[v15[6]];
    long long v22 = v32;
    *uint64_t v21 = v31;
    v21[1] = v22;
    v18[v15[8]] = v25 & 1;
    sub_10011FC70((uint64_t)v18, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianshipRecordBuilder.Components);
    swift_storeEnumTagMultiPayload();
    sub_10011FBEC(a1);
    id v23 = a3;
    v27(v14);
    sub_100006574((uint64_t)v14, (uint64_t *)&unk_100327828);
    return sub_10011FCD8((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianshipRecordBuilder.Components);
  }
}

uint64_t sub_10011E86C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, void *), uint64_t a5)
{
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CustodianshipRecordBuilder.Components();
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100009F04((uint64_t *)&unk_100327828);
  __chkstk_darwin(v19, v20);
  long long v22 = (uint64_t *)((char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v22, (uint64_t *)&unk_100327828);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = *v22;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E748);
    swift_errorRetain();
    int v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v35 = a5;
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412290;
      uint64_t v29 = _convertErrorToNSError(_:)();
      uint64_t v38 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v29;
      a5 = v35;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error building custodian record: %@", v27, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    void *v10 = v23;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    sub_100089858((uint64_t)v10, v36, v37, a5);
    swift_errorRelease();
    return sub_100006574((uint64_t)v10, (uint64_t *)&unk_100322960);
  }
  else
  {
    sub_10011FD38((uint64_t)v22, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianshipRecordBuilder.Components);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E748);
    long long v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Custodian components fetched, building record...", v33, 2u);
      swift_slowDealloc();
    }

    sub_10011C438((uint64_t)v18, (uint64_t)v14);
    sub_10011FC70((uint64_t)v14, (uint64_t)v10, type metadata accessor for CustodianshipRecords);
    swift_storeEnumTagMultiPayload();
    sub_100089858((uint64_t)v10, v36, v37, a5);
    sub_100006574((uint64_t)v10, (uint64_t *)&unk_100322960);
    sub_10011FCD8((uint64_t)v14, type metadata accessor for CustodianshipRecords);
    return sub_10011FCD8((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianshipRecordBuilder.Components);
  }
}

uint64_t sub_10011ED10(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, void *), uint64_t a5)
{
  uint64_t v63 = sub_100009F04((uint64_t *)&unk_100327828);
  __chkstk_darwin(v63, v10);
  uint64_t v12 = (char **)((char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v59 = *(void *)(v13 - 8);
  uint64_t v60 = v13;
  uint64_t v14 = *(void *)(v59 + 64);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  int v58 = (char *)&v58 - v19;
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = a3;
  long long v20[3] = a4;
  uint64_t v64 = a4;
  v20[4] = a5;
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a2;
  v21[3] = sub_10011F518;
  uint64_t v65 = v21;
  v21[4] = v20;
  long long v22 = *(void **)(*sub_100008EF8((void *)(a1 + 56), *(void *)(a1 + 80)) + 16);
  uint64_t v66 = a3;
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  swift_retain();
  id v23 = [v22 aa_primaryAppleAccount];
  if (!v23)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_100007288(v52, (uint64_t)qword_10033E748);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      id v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Not logged in to AppleAccount, unable to complete setup", v55, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v68 = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10011FDA0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v12 = aBlock[0];
    swift_storeEnumTagMultiPayload();
    uint64_t v56 = v66;
    swift_retain();
    swift_retain();
    sub_10011E86C((uint64_t)v12, a2, v56, v64, a5);
    goto LABEL_20;
  }
  id v61 = v23;
  uint64_t v62 = a2;
  uint64_t v24 = sub_100008EF8((void *)(a1 + 56), *(void *)(a1 + 80));
  uint64_t v25 = *v24;
  os_log_type_t v26 = *(void **)(*v24 + 16);
  id v27 = [v26 aa_primaryAppleAccount];
  if (!v27
    || (uint64_t v28 = v27,
        id v29 = objc_msgSend(v27, "aa_altDSID"),
        id v30 = objc_msgSend(v26, "aa_authKitAccountForAltDSID:", v29),
        v28,
        v29,
        !v30)
    || (unsigned int v31 = [*(id *)(v25 + 24) canHaveCustodianForAccount:v30], v30, !v31))
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100007288(v45, (uint64_t)qword_10033E748);
    NSString v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    BOOL v48 = os_log_type_enabled(v46, v47);
    uint64_t v49 = v62;
    if (v48)
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Account is ineligible to have a custodian, unable to complete setup", v50, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v68 = -7012;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10011FDA0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v12 = aBlock[0];
    swift_storeEnumTagMultiPayload();
    uint64_t v51 = v66;
    swift_retain();
    swift_retain();
    sub_10011E86C((uint64_t)v12, v49, v51, v64, a5);

LABEL_20:
    swift_release();
    swift_release();
    sub_100006574((uint64_t)v12, (uint64_t *)&unk_100327828);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  os_log_type_t v32 = v58;
  UUID.init()();
  uint64_t v34 = v59;
  uint64_t v33 = v60;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v17, v32, v60);
  unint64_t v35 = (*(unsigned __int8 *)(v34 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  unint64_t v36 = (v14 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = (char *)swift_allocObject();
  uint64_t v38 = v65;
  *((void *)v37 + 2) = sub_10011F528;
  *((void *)v37 + 3) = v38;
  *((void *)v37 + 4) = a1;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v37[v35], v17, v33);
  id v39 = v61;
  *(void *)&v37[v36] = v61;
  uint64_t v40 = qword_100320CC8;
  swift_retain();
  swift_retain();
  id v41 = v39;
  if (v40 != -1) {
    swift_once();
  }
  if (qword_100320CD8 != -1) {
    swift_once();
  }
  id v42 = sub_10028CC20(qword_10033EA08, unk_10033EA10);
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = sub_10011F624;
  *(void *)(v43 + 24) = v37;
  aBlock[4] = sub_1000F0598;
  aBlock[5] = v43;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004DAE8;
  void aBlock[3] = &unk_1002FC300;
  id v44 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v42 accountInfoWithCompletionHandler:v44];
  _Block_release(v44);

  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10011F518(uint64_t a1)
{
  return sub_100089858(a1, *(void *)(v1 + 16), *(void (**)(char *, void *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10011F528(uint64_t a1)
{
  return sub_10011BF94(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10011F534()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10011F624(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void (*)(void *))v2[2];
  uint64_t v8 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v10 = *(void **)((char *)v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10011D6D8(a1, v4, v7, v8, v9, (uint64_t)v2 + v6, v10);
}

uint64_t sub_10011F6D8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011F710()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();

  return _swift_deallocObject(v0, v8 + 16, v6);
}

void sub_10011F80C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  sub_10011DF88(v1 + v4, *(void **)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), a1, *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10011F8BC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(sub_100009F04((uint64_t *)&unk_100322990) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + v7 + 8) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);

  uint64_t v11 = v0 + v8;
  uint64_t v12 = type metadata accessor for RecoveryKeys(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v0 + v8, 1, v12))
  {
    sub_100013198(*(void *)v11, *(void *)(v11 + 8));
    sub_100013198(*(void *)(v11 + 16), *(void *)(v11 + 24));
    v10(v11 + *(int *)(v12 + 24), v1);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v8 + v9) & 0xFFFFFFFFFFFFFFF8) + 24, v3 | v7 | 7);
}

uint64_t sub_10011FA88(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(sub_100009F04((uint64_t *)&unk_100322990) - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  uint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + v1;
  uint64_t v10 = *(void **)(v1 + v5);
  int v11 = *(unsigned __int8 *)(v1 + v8);
  uint64_t v12 = *(void (**)(void *))(v9 + 8);
  uint64_t v13 = *(void *)(v9 + 16);

  return sub_10011E60C(a1, v1 + v4, v10, v1 + v7, v11, v12, v13);
}

uint64_t type metadata accessor for CustodianshipRecordBuilder.Components()
{
  uint64_t result = qword_1003278A0;
  if (!qword_1003278A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10011FBEC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011FC24(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return swift_errorRetain();
  }
  else
  {
    sub_100013140(a1, a2);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_10011FC70(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10011FCD8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10011FD38(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10011FDA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10011FDE8(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    unsigned int v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    uint64_t v32 = v7;
    ((void (*)(void *, void *))v31)(a1, a2);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(void *)((char *)a1 + v8) = v10;
    int v11 = (void *)((char *)a1 + v9);
    uint64_t v12 = (char *)a2 + v9;
    uint64_t v13 = *(void *)((char *)a2 + v9);
    unint64_t v14 = *(void *)((char *)a2 + v9 + 8);
    id v15 = v10;
    sub_100013140(v13, v14);
    *int v11 = v13;
    v11[1] = v14;
    uint64_t v16 = *((void *)v12 + 2);
    uint64_t v17 = *((void *)v12 + 3);
    void v11[2] = v16;
    v11[3] = v17;
    uint64_t v18 = a3[7];
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    uint64_t v21 = type metadata accessor for RecoveryKeys(0);
    uint64_t v22 = *(void *)(v21 - 8);
    id v23 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48);
    swift_bridgeObjectRetain();
    if (v23(v20, 1, v21))
    {
      uint64_t v24 = sub_100009F04((uint64_t *)&unk_100322990);
      memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      uint64_t v26 = *v20;
      unint64_t v27 = v20[1];
      sub_100013140(*v20, v27);
      *uint64_t v19 = v26;
      v19[1] = v27;
      uint64_t v28 = v20[2];
      unint64_t v29 = v20[3];
      sub_100013140(v28, v29);
      void v19[2] = v28;
      v19[3] = v29;
      v31((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  }
  return a1;
}

uint64_t sub_100120018(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v9(a1, v4);

  sub_100013198(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = type metadata accessor for RecoveryKeys(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    sub_100013198(*(void *)v5, *(void *)(v5 + 8));
    sub_100013198(*(void *)(v5 + 16), *(void *)(v5 + 24));
    uint64_t v8 = v5 + *(int *)(v6 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v8, v4);
  }
  return result;
}

uint64_t sub_100120148(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  unint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  uint64_t v30 = v6;
  v29(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  uint64_t v10 = (uint64_t *)(a1 + v8);
  uint64_t v11 = a2 + v8;
  uint64_t v12 = *(void *)(a2 + v8);
  unint64_t v13 = *(void *)(a2 + v8 + 8);
  id v14 = v9;
  sub_100013140(v12, v13);
  uint64_t *v10 = v12;
  v10[1] = v13;
  uint64_t v15 = *(void *)(v11 + 16);
  uint64_t v16 = *(void *)(v11 + 24);
  v10[2] = v15;
  v10[3] = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = type metadata accessor for RecoveryKeys(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  if (v22(v19, 1, v20))
  {
    uint64_t v23 = sub_100009F04((uint64_t *)&unk_100322990);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v24 = *v19;
    unint64_t v25 = v19[1];
    sub_100013140(*v19, v25);
    *uint64_t v18 = v24;
    v18[1] = v25;
    uint64_t v26 = v19[2];
    unint64_t v27 = v19[3];
    sub_100013140(v26, v27);
    v18[2] = v26;
    v18[3] = v27;
    ((void (*)(char *, char *, uint64_t))v29)((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100120328(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v39 + 24);
  uint64_t v41 = v6;
  ((void (*)(uint64_t, uint64_t))v40)(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = a3[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = a2 + v11;
  uint64_t v14 = *(void *)(a2 + v11);
  unint64_t v15 = *(void *)(a2 + v11 + 8);
  sub_100013140(v14, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_100013198(v16, v17);
  void v12[2] = *(void *)(v13 + 16);
  v12[3] = *(void *)(v13 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v42 = a3;
  uint64_t v18 = a3[7];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = type metadata accessor for RecoveryKeys(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v13) = v23(v19, 1, v21);
  int v24 = v23(v20, 1, v21);
  if (!v13)
  {
    if (!v24)
    {
      uint64_t v31 = *v20;
      unint64_t v32 = v20[1];
      sub_100013140(*v20, v32);
      uint64_t v33 = *v19;
      unint64_t v34 = v19[1];
      *uint64_t v19 = v31;
      v19[1] = v32;
      sub_100013198(v33, v34);
      uint64_t v35 = v20[2];
      unint64_t v36 = v20[3];
      sub_100013140(v35, v36);
      uint64_t v37 = v19[2];
      unint64_t v38 = v19[3];
      void v19[2] = v35;
      v19[3] = v36;
      sub_100013198(v37, v38);
      v40((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v41);
      goto LABEL_7;
    }
    sub_10011FCD8((uint64_t)v19, type metadata accessor for RecoveryKeys);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    uint64_t v29 = sub_100009F04((uint64_t *)&unk_100322990);
    memcpy(v19, v20, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v25 = *v20;
  unint64_t v26 = v20[1];
  sub_100013140(*v20, v26);
  *uint64_t v19 = v25;
  v19[1] = v26;
  uint64_t v27 = v20[2];
  unint64_t v28 = v20[3];
  sub_100013140(v27, v28);
  void v19[2] = v27;
  v19[3] = v28;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v41);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_7:
  *(unsigned char *)(a1 + v42[8]) = *(unsigned char *)(a2 + v42[8]);
  return a1;
}

char *sub_100120600(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  id v10 = &a2[v8];
  long long v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for RecoveryKeys(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100009F04((uint64_t *)&unk_100322990);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    long long v18 = *((_OWORD *)v14 + 1);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v18;
    v7(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t sub_100120790(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v30 + 40);
  uint64_t v32 = v6;
  ((void (*)(uint64_t, uint64_t))v31)(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = *(void *)(a1 + v9);
  unint64_t v13 = *(void *)(a1 + v9 + 8);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  sub_100013198(v12, v13);
  uint64_t v14 = *(void *)(v11 + 24);
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  *(void *)(v10 + 24) = v14;
  swift_bridgeObjectRelease();
  uint64_t v33 = a3;
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = type metadata accessor for RecoveryKeys(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      uint64_t v26 = *v16;
      unint64_t v27 = v16[1];
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      sub_100013198(v26, v27);
      uint64_t v28 = v16[2];
      unint64_t v29 = v16[3];
      *((_OWORD *)v16 + 1) = *((_OWORD *)v17 + 1);
      sub_100013198(v28, v29);
      v31((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v32);
      goto LABEL_7;
    }
    sub_10011FCD8((uint64_t)v16, type metadata accessor for RecoveryKeys);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    uint64_t v24 = sub_100009F04((uint64_t *)&unk_100322990);
    memcpy(v16, v17, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  long long v23 = *((_OWORD *)v17 + 1);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v23;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v32);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_7:
  *(unsigned char *)(a1 + v33[8]) = *(unsigned char *)(a2 + v33[8]);
  return a1;
}

uint64_t sub_100120A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100120A24);
}

uint64_t sub_100120A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_100009F04((uint64_t *)&unk_100322990);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100120B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100120B68);
}

uint64_t sub_100120B68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_100009F04((uint64_t *)&unk_100322990);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_100120C98()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_100120D80();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100120D80()
{
  if (!qword_1003278B0)
  {
    type metadata accessor for RecoveryKeys(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1003278B0);
    }
  }
}

uint64_t sub_100120DD8()
{
  sub_100008EA8(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RenewCredentialsActivity()
{
  return self;
}

void *sub_100120E44(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v18 = type metadata accessor for SQL();
  uint64_t v6 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    int v22 = _swiftEmptyArrayStorage;
    sub_100228AEC(0, v10, 0);
    uint64_t v11 = v22;
    uint64_t v17 = v6 + 32;
    uint64_t v12 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v13 = *v12;
      v21[0] = *(v12 - 1);
      v21[1] = v13;
      swift_bridgeObjectRetain();
      v19(v21);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      int v22 = v11;
      unint64_t v15 = v11[2];
      unint64_t v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_100228AEC(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v22;
      }
      v12 += 2;
      void v11[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v11+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v15, v9, v18);
      if (!--v10) {
        return v11;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t sub_100121010(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10027FE90(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1001211A8(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (Swift::Int *)(*(void *)(a1 + 56) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10027FE90(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t CKRecord.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SQL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&countAndFlagsBits - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (![self isInternalBuild]) {
    return 0x657463616465723CLL;
  }
  v59._uint64_t countAndFlagsBits = 30768;
  v59._object = (void *)0xE200000000000000;
  int v58 = v0;
  sub_100121900();
  v7._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  Swift::String v55 = v59;
  id v8 = [v0 recordID];
  id v9 = [v8 zoneID];

  id v10 = [v1 recordID];
  id v11 = [v10 recordName];

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int64_t v14 = v13;

  v59._uint64_t countAndFlagsBits = v12;
  v59._object = v14;
  v15._uint64_t countAndFlagsBits = 10298;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  id v16 = [v9 zoneName];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  v20._uint64_t countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 58;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  id v56 = v9;
  id v22 = [v9 ownerName];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 41;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  object = v59._object;
  uint64_t countAndFlagsBits = v59._countAndFlagsBits;
  id v29 = [v1 encryptedValuesByKey];
  id v30 = [v29 changedKeys];
  uint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v32 = sub_100122C9C(v31);
  swift_bridgeObjectRelease();
  id v33 = [v29 allKeys];
  uint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v59._uint64_t countAndFlagsBits = v34;
  swift_bridgeObjectRetain();
  sub_100121B14(&v59._countAndFlagsBits);
  uint64_t v57 = v3;
  swift_bridgeObjectRelease();
  uint64_t v35 = v59._countAndFlagsBits;
  id v36 = [v1 recordChangeTag];
  if (v36)
  {
    unint64_t v38 = v36;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;

    v59._uint64_t countAndFlagsBits = 0x3D676174202CLL;
    v59._object = (void *)0xE600000000000000;
    v42._uint64_t countAndFlagsBits = v39;
    v42._object = v41;
    String.append(_:)(v42);
    id v36 = (id)swift_bridgeObjectRelease();
    uint64_t v43 = v59._countAndFlagsBits;
    id v44 = v59._object;
  }
  else
  {
    uint64_t v43 = 0;
    id v44 = (void *)0xE000000000000000;
  }
  __chkstk_darwin(v36, v37);
  *(&countAndFlagsBits - 2) = v32;
  *(&countAndFlagsBits - 1) = (uint64_t)v29;
  NSString v46 = sub_100120E44((void (*)(void *))sub_100122D34, (uint64_t)(&countAndFlagsBits - 4), v35);
  swift_release();
  swift_bridgeObjectRelease();
  v59._uint64_t countAndFlagsBits = (uint64_t)v46;
  sub_100009F04(&qword_1003279B0);
  sub_100122D54();
  Collection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  v59._uint64_t countAndFlagsBits = 0;
  v59._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v47._uint64_t countAndFlagsBits = 0x726F6365524B433CLL;
  v47._object = (void *)0xEB00000000203A64;
  String.append(_:)(v47);
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 0x64726F636572203BLL;
  v48._object = (void *)0xEB000000003D6449;
  String.append(_:)(v48);
  v49._uint64_t countAndFlagsBits = countAndFlagsBits;
  v49._object = object;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._uint64_t countAndFlagsBits = v43;
  v50._object = v44;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51._uint64_t countAndFlagsBits = 31520;
  v51._object = (void *)0xE200000000000000;
  String.append(_:)(v51);
  _print_unlocked<A, B>(_:_:)();
  v52._uint64_t countAndFlagsBits = 15997;
  v52._object = (void *)0xE200000000000000;
  String.append(_:)(v52);
  swift_unknownObjectRelease();

  uint64_t v45 = v59._countAndFlagsBits;
  (*(void (**)(char *, uint64_t))(v57 + 8))(v6, v2);
  return v45;
}

unint64_t sub_100121900()
{
  unint64_t result = qword_1003279A8;
  if (!qword_1003279A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003279A8);
  }
  return result;
}

uint64_t sub_100121954(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SQLInterpolation();
  __chkstk_darwin(v4 - 8, v5);
  if (sub_1000A3554(*a1, a1[1], a2))
  {
    swift_bridgeObjectRetain();
    v6._uint64_t countAndFlagsBits = 42;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  SQLInterpolation.init(literalCapacity:interpolationCount:)();
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  SQLInterpolation.appendLiteral(_:)(v7);
  sub_100080C64();
  SQLInterpolation.appendInterpolation<A>(_:)();
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 2112800;
  v8._object = (void *)0xE300000000000000;
  SQLInterpolation.appendLiteral(_:)(v8);
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  SQLInterpolation.appendInterpolation<A>(_:)();
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  SQLInterpolation.appendLiteral(_:)(v9);
  return SQL.init(stringInterpolation:)();
}

Swift::Int sub_100121B14(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100133224(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_100121B80(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100121B80(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_10012226C(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    Swift::String v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      id v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      uint64_t v94 = v11;
      unint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_10012233C((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_100133210((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          id v100 = &v97[16 * v96 + 32];
          *(void *)id v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    unint64_t v104 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  id v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    int64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    Swift::String v21 = (void *)(v103 + 16 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v11 = sub_100132F14(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      id v11 = sub_100132F14((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    Swift::String v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          Swift::String v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            id v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        os_log_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        unint64_t v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_10012233C((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        id v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        Swift::String v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      Swift::String v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      id v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        unint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)unint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10012226C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10012233C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  Swift::Int v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      Swift::Int v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          Swift::Int v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)uint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            }
            Swift::Int v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    int64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      Swift::Int v27 = v7;
    }
LABEL_50:
    sub_100133010((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_1001225D8()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = 0;
  id v2 = [v0 initForReadingFromData:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

id sub_100122698(uint64_t a1, unint64_t a2)
{
  id v4 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 != a1 >> 32) {
        goto LABEL_7;
      }
      return 0;
    case 2uLL:
      if (*(void *)(a1 + 16) != *(void *)(a1 + 24)) {
        goto LABEL_7;
      }
      return 0;
    case 3uLL:
      return v4;
    default:
      if ((a2 & 0xFF000000000000) == 0) {
        return 0;
      }
LABEL_7:
      id v5 = objc_allocWithZone((Class)NSKeyedUnarchiver);
      sub_100013140(a1, a2);
      id v6 = sub_1001225D8();
      sub_100013198(a1, a2);
      id v7 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v6];
      if (v7)
      {
        id v4 = v7;
      }
      else
      {
        if (qword_100320B78 != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        sub_100007288(v9, (uint64_t)qword_10033E718);
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v12 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unable to extract CKRecord from cloudKitMetadata", v12, 2u);
          swift_slowDealloc();
        }
        else
        {
        }
        return 0;
      }
      return v4;
  }
}

uint64_t sub_100122A24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v31 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v30 = (char *)v24 - v8;
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 16);
  sub_100122DB0();
  uint64_t v32 = Set.init(minimumCapacity:)();
  if (v13)
  {
    BOOL v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v14 = v3 + 16;
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v17 = *(void *)(v14 + 56);
    unint64_t v18 = v14 + 40;
    Swift::Int v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
    Swift::Int v28 = v15;
    uint64_t v25 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v26 = v17;
    uint64_t v29 = v14;
    int v19 = (void (**)(uint64_t, uint64_t))(v14 - 8);
    v24[1] = v18 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v21 = (uint64_t)v30;
    Swift::Int v20 = v31;
    while (1)
    {
      v28(v12, v16, v2);
      uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v18;
      (*(void (**)(char *, void, uint64_t, uint64_t))v18)(v12, 0, 1, v2);
      if ((*v27)(v12, 1, v2) == 1) {
        break;
      }
      (*v25)(v20, v12, v2);
      sub_100280040(v21, v20);
      (*v19)(v21, v2);
      v16 += v26;
      if (!--v13) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v22(v12, 1, 1, v2);
  }
  return v32;
}

uint64_t sub_100122C9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10027FE90(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100122D34(uint64_t *a1)
{
  return sub_100121954(a1, *(void *)(v1 + 16));
}

unint64_t sub_100122D54()
{
  unint64_t result = qword_1003279B8;
  if (!qword_1003279B8)
  {
    sub_1000112CC(&qword_1003279B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003279B8);
  }
  return result;
}

unint64_t sub_100122DB0()
{
  unint64_t result = qword_100322920;
  if (!qword_100322920)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322920);
  }
  return result;
}

uint64_t sub_100122E08(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (void *)((char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002C854(a1, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *v12;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E748);
    swift_errorRetain();
    BOOL v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      unint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      uint64_t v19 = _convertErrorToNSError(_:)();
      v22[1] = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v18 = v19;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to replace record: %@", v17, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a4(v13);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_release();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = a4;
      *(void *)(v20 + 24) = a5;
      swift_retain();
      sub_1001D56A8(a3, (uint64_t)sub_100127788, v20);
      swift_release();
    }
    return sub_100081D14((uint64_t)v12);
  }
}

id sub_1001230C8()
{
  id result = [objc_allocWithZone((Class)NSOperationQueue) init];
  qword_1003279C0 = (uint64_t)result;
  return result;
}

void sub_1001230FC()
{
  uint64_t v1 = v0;
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E7D8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    Swift::Int v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::Int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Custodian manatee migrator listening for CKAccountChanged", v5, 2u);
    swift_slowDealloc();
  }

  id v6 = [self defaultCenter];
  [v6 addObserver:v1 selector:"manateeStatusChanged" name:CKAccountChangedNotification object:0];
}

void sub_100123240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  Swift::Int v5 = (void *)swift_allocObject();
  uint64_t v5[2] = v4;
  v5[3] = a1;
  v5[4] = a2;
  id v6 = (objc_class *)type metadata accessor for AsyncOperation();
  Swift::Int v7 = objc_allocWithZone(v6);
  v7[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
  uint64_t v8 = &v7[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
  *uint64_t v8 = sub_1001278C4;
  v8[1] = v5;
  v10.receiver = v7;
  v10.super_class = v6;
  swift_retain();
  id v9 = [super init];
  if (qword_100320C48 != -1) {
    swift_once();
  }
  [qword_1003279C0 addOperation:v9, v10.receiver, v10.super_class];
}

uint64_t sub_100123364(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    swift_retain();
    swift_retain();
    sub_1001258C0(v10, a4, a5, a1, a2);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100123410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  if (*(uint64_t *)(a2 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_numOfRecordsMigrated) <= 0)
  {
    if (!a1) {
      return a4(a1);
    }
    goto LABEL_5;
  }
  if (a1)
  {
LABEL_5:
    id v6 = (void *)_convertErrorToNSError(_:)();
    goto LABEL_6;
  }
  id v6 = 0;
LABEL_6:
  swift_beginAccess();
  if ((AAUnderTest.getter() & 1) == 0)
  {
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = sub_10016B5B0();
    }
    else
    {
      uint64_t v8 = 0;
    }
    sub_100009F04(&qword_100324668);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
    *(void *)(inited + 32) = 0xD000000000000012;
    *(void *)(inited + 40) = 0x800000010029D830;
    *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
    *(void *)(inited + 56) = 0xD000000000000012;
    *(void *)(inited + 64) = 0x800000010029D850;
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    sub_10022175C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();

    swift_bridgeObjectRelease();
    id v6 = (void *)v8;
  }

  return a4(a1);
}

void sub_1001235A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v65 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v67 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v66 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v68 = dispatch_group_create();
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E7D8);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    dispatch_group_t v22 = v68;
    if (v21)
    {
      BOOL v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Couldn't fetch custodianship records for manatee migration.", v23, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v25 = Strong;
      uint64_t v26 = OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock;
      Swift::Int v27 = *(os_unfair_lock_s **)(Strong + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock);
      swift_errorRetain();
      os_unfair_lock_lock(v27);
      Swift::Int v28 = (void **)(v25 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors);
      swift_beginAccess();
      uint64_t v29 = *v28;
      swift_errorRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *Swift::Int v28 = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v29 = sub_100168930(0, v29[2] + 1, 1, v29);
        *Swift::Int v28 = v29;
      }
      unint64_t v32 = v29[2];
      unint64_t v31 = v29[3];
      if (v32 >= v31 >> 1)
      {
        uint64_t v29 = sub_100168930((void *)(v31 > 1), v32 + 1, 1, v29);
        *Swift::Int v28 = v29;
      }
      _OWORD v29[2] = v32 + 1;
      v29[v32 + 4] = a2;
      swift_endAccess();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + v26));
      swift_errorRelease();
      swift_release();
    }
    swift_beginAccess();
    uint64_t v33 = swift_weakLoadStrong();
    if (v33)
    {
      uint64_t v34 = *(id *)(v33 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_dispatchGroup);
      swift_release();
      dispatch_group_leave(v34);
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v58 = v17;
    uint64_t v59 = v14;
    uint64_t v60 = v13;
    uint64_t v61 = v12;
    uint64_t v64 = v5;
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v62 = v8;
    uint64_t v63 = v9;
    uint64_t v35 = type metadata accessor for Logger();
    sub_100007288(v35, (uint64_t)qword_10033E7D8);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    BOOL v38 = os_log_type_enabled(v36, v37);
    BOOL v39 = v61;
    uint64_t v40 = a3;
    unint64_t v41 = v68;
    if (v38)
    {
      Swift::String v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Starting migrating custodianship records to Manatee.", v42, 2u);
      swift_slowDealloc();
    }

    uint64_t v43 = v64;
    uint64_t v44 = v65;
    uint64_t v45 = *(void *)(v65 + 16);
    if (v45)
    {
      uint64_t v46 = *(void *)(type metadata accessor for CustodianRecord() - 8);
      uint64_t v47 = v44 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
      swift_bridgeObjectRetain();
      swift_beginAccess();
      uint64_t v48 = *(void *)(v46 + 72);
      do
      {
        dispatch_group_enter(v41);
        uint64_t v49 = swift_weakLoadStrong();
        if (v49)
        {
          uint64_t v50 = v49;
          uint64_t v51 = v41;
          sub_1001265B4(v47, v50, v51);
          swift_release();
        }
        v47 += v48;
        --v45;
      }
      while (v45);
      swift_bridgeObjectRelease();
      uint64_t v43 = v64;
    }
    sub_1000093D0();
    uint64_t v53 = v58;
    uint64_t v52 = v59;
    uint64_t v54 = v60;
    (*(void (**)(char *, void, uint64_t))(v59 + 104))(v58, enum case for DispatchQoS.QoSClass.default(_:), v60);
    BOOL v55 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
    aBlock[4] = sub_100127790;
    aBlock[5] = v40;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100007244;
    void aBlock[3] = &unk_1002FC618;
    unint64_t v56 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v69 = _swiftEmptyArrayStorage;
    sub_100127740((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_10000A534();
    uint64_t v57 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();

    _Block_release(v56);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v57, v43);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v39, v63);
    swift_release();
  }
}

void sub_100123D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v66 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v68 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v67 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = a3 + 16;
  dispatch_group_t v18 = dispatch_group_create();
  if (a2)
  {
    swift_errorRetain();
    uint64_t v19 = a2;
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E7D8);
    swift_errorRetain();
    BOOL v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      BOOL v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)BOOL v23 = 138412290;
      uint64_t v25 = _convertErrorToNSError(_:)();
      aBlock[0] = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v25;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Couldn't fetch custodianship info records for manatee migration: %@", v23, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v43 = Strong;
      uint64_t v44 = OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock;
      uint64_t v45 = *(os_unfair_lock_s **)(Strong + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock);
      swift_errorRetain();
      os_unfair_lock_lock(v45);
      uint64_t v46 = (void **)(v43 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors);
      swift_beginAccess();
      uint64_t v47 = *v46;
      swift_errorRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v46 = v47;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v47 = sub_100168930(0, v47[2] + 1, 1, v47);
        *uint64_t v46 = v47;
      }
      unint64_t v50 = v47[2];
      unint64_t v49 = v47[3];
      if (v50 >= v49 >> 1)
      {
        uint64_t v47 = sub_100168930((void *)(v49 > 1), v50 + 1, 1, v47);
        *uint64_t v46 = v47;
      }
      v47[2] = v50 + 1;
      v47[v50 + 4] = v19;
      swift_endAccess();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v43 + v44));
      swift_errorRelease();
      swift_release();
    }
    swift_beginAccess();
    uint64_t v51 = swift_weakLoadStrong();
    if (v51)
    {
      uint64_t v52 = *(id *)(v51 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_dispatchGroup);
      swift_release();
      dispatch_group_leave(v52);
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v59 = v17;
    uint64_t v60 = v14;
    uint64_t v61 = v13;
    uint64_t v62 = v12;
    uint64_t v65 = v5;
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v63 = v8;
    uint64_t v64 = v9;
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E7D8);
    Swift::Int v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = v62;
    uint64_t v31 = a3;
    if (v29)
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Starting migrating custodianship info records to Manatee.", v32, 2u);
      swift_slowDealloc();
    }

    uint64_t v33 = v65;
    uint64_t v34 = v66;
    uint64_t v35 = *(void *)(v66 + 16);
    if (v35)
    {
      uint64_t v36 = *(void *)(type metadata accessor for CustodianshipInfoRecord() - 8);
      uint64_t v37 = v34 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
      swift_bridgeObjectRetain();
      swift_beginAccess();
      uint64_t v38 = *(void *)(v36 + 72);
      do
      {
        dispatch_group_enter(v18);
        uint64_t v39 = swift_weakLoadStrong();
        if (v39)
        {
          uint64_t v40 = v39;
          unint64_t v41 = v18;
          sub_100126BC8(v37, v40, v41);
          swift_release();
        }
        v37 += v38;
        --v35;
      }
      while (v35);
      swift_bridgeObjectRelease();
      uint64_t v33 = v65;
    }
    sub_1000093D0();
    uint64_t v54 = v59;
    uint64_t v53 = v60;
    uint64_t v55 = v61;
    (*(void (**)(char *, void, uint64_t))(v60 + 104))(v59, enum case for DispatchQoS.QoSClass.default(_:), v61);
    unint64_t v56 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
    aBlock[4] = sub_100127308;
    aBlock[5] = v31;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100007244;
    void aBlock[3] = &unk_1002FC528;
    uint64_t v57 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v70 = _swiftEmptyArrayStorage;
    sub_100127740((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_10000A534();
    uint64_t v58 = v63;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();

    _Block_release(v57);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v58, v33);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v30, v64);
    swift_release();
  }
}

void sub_1001244F4(uint64_t a1, const char *a2)
{
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100007288(v3, (uint64_t)qword_10033E7D8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, a2, v6, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = *(id *)(Strong + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_dispatchGroup);
    swift_release();
    dispatch_group_leave(v8);
  }
}

uint64_t sub_10012462C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E7D8);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Custodian + CustodianshipInfo migration complete.", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = a3 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors;
  swift_beginAccess();
  if (*(void *)(*(void *)v9 + 16))
  {
    uint64_t v10 = *(void *)(*(void *)v9 + 32);
    swift_errorRetain();
  }
  else
  {
    uint64_t v10 = 0;
  }
  a1(v10);
  return swift_errorRelease();
}

uint64_t sub_100124778()
{
  sub_100008EA8(v0 + 16);
  sub_100008EA8(v0 + 56);
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator__keyRepair;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100328400);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100124894()
{
  return type metadata accessor for CustodianManateeMigrator();
}

uint64_t type metadata accessor for CustodianManateeMigrator()
{
  uint64_t result = qword_100327A20;
  if (!qword_100327A20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001248E8()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&unk_100324070, &qword_10032D780);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100124A14(uint64_t a1, uint64_t a2)
{
}

void sub_100124A38(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (!a1)
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v12 = Strong;
      uint64_t v13 = OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock;
      os_unfair_lock_lock(*(os_unfair_lock_t *)(Strong
                                              + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock));
      uint64_t v14 = *(void *)(v12 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_numOfRecordsMigrated);
      BOOL v15 = __OFADD__(v14, 1);
      uint64_t v16 = v14 + 1;
      if (v15)
      {
        __break(1u);
        return;
      }
      *(void *)(v12 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_numOfRecordsMigrated) = v16;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + v13));
      swift_release();
    }
    a3(0);
    return;
  }
  swift_errorRetain();
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E7D8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v9 = String.init<A>(describing:)();
    sub_100135190(v9, v10, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error migrating custodianRecord : %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_beginAccess();
  uint64_t v17 = swift_weakLoadStrong();
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock;
    uint64_t v20 = *(os_unfair_lock_s **)(v17 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock);
    swift_errorRetain();
    os_unfair_lock_lock(v20);
    BOOL v21 = (void **)(v18 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors);
    swift_beginAccess();
    os_log_type_t v22 = *v21;
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *BOOL v21 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      os_log_type_t v22 = sub_100168930(0, v22[2] + 1, 1, v22);
      *BOOL v21 = v22;
    }
    unint64_t v25 = v22[2];
    unint64_t v24 = v22[3];
    if (v25 >= v24 >> 1)
    {
      os_log_type_t v22 = sub_100168930((void *)(v24 > 1), v25 + 1, 1, v22);
      *BOOL v21 = v22;
    }
    void v22[2] = v25 + 1;
    v22[v25 + 4] = a1;
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + v19));
    swift_errorRelease();
    swift_release();
  }
  swift_errorRetain();
  a3(a1);
  swift_errorRelease();
  swift_errorRelease();
}

uint64_t sub_100124DC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CustodianshipInfoRecord();
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E7D8);
    sub_1001277B4(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v22 = a4;
      uint64_t v16 = v15;
      uint64_t v17 = (void *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      BOOL v23 = a3;
      type metadata accessor for UUID();
      sub_100127740((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v24 = sub_100135190(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10012782C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t v20 = _convertErrorToNSError(_:)();
      uint64_t v24 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v17 = v20;
      a3 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Error migrating CustodianshipInfoRecord for custodianID - %s: %@", (uint8_t *)v16, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10012782C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return a3(a1);
}

void sub_100125124()
{
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100007288(v0, (uint64_t)qword_10033E7D8);
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Manatee status changed, fetching new manatee status.", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  uint64_t v5 = qword_100320CC8;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  if (qword_100320CD8 != -1) {
    swift_once();
  }
  id v6 = sub_10028CC20(qword_10033EA08, unk_10033EA10);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_10012586C;
  *(void *)(v7 + 24) = v4;
  v9[4] = sub_1000F0598;
  v9[5] = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_10004DAE8;
  v9[3] = &unk_1002FC3E8;
  uint64_t v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v6 accountInfoWithCompletionHandler:v8];
  _Block_release(v8);
  swift_release_n();
}

void sub_10012537C(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E7D8);
    swift_errorRetain();
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      uint64_t v22 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v22;
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Something went wrong while checking manatee status: %@", v8, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100080A98(a1, 1);
      return;
    }
    sub_100080A98(a1, 1);
    sub_100080A98(a1, 1);
    goto LABEL_21;
  }
  if ((a1 & 1) == 0)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007288(v3, (uint64_t)qword_10033E748);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Account is not manatee, skipping manatee migration.", v5, 2u);
      swift_slowDealloc();
    }
LABEL_21:

    return;
  }
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100007288(v10, (uint64_t)qword_10033E7D8);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Account is now manatee, kicking off migration.", v13, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v14 = swift_allocObject();
    swift_weakInit();
    uint64_t v15 = (uint64_t (*)(void (*)(uint64_t), uint64_t))swift_allocObject();
    *((void *)v15 + 2) = v14;
    *((void *)v15 + 3) = OSTransaction.complete();
    *((void *)v15 + 4) = 0;
    uint64_t v16 = (objc_class *)type metadata accessor for AsyncOperation();
    uint64_t v17 = objc_allocWithZone(v16);
    v17[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
    uint64_t v18 = (uint64_t (**)(void (*)(uint64_t), uint64_t))&v17[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
    *uint64_t v18 = sub_1001258B4;
    v18[1] = v15;
    v21.receiver = v17;
    v21.super_class = v16;
    id v19 = [super init];
    if (qword_100320C48 != -1) {
      swift_once();
    }
    [(id)qword_1003279C0 addOperation:v19];
    swift_release();
  }
}

uint64_t sub_100125834()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10012586C(uint64_t a1, char a2)
{
}

uint64_t sub_100125878()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001258B4(void (*a1)(uint64_t), uint64_t a2)
{
  return sub_100123364(a1, a2, *(void *)(v2 + 16), *(uint64_t (**)(void))(v2 + 24), *(void *)(v2 + 32));
}

void sub_1001258C0(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v91 = *(void *)(v10 - 8);
  uint64_t v92 = v10;
  __chkstk_darwin(v10, v11);
  unint64_t v89 = (char *)v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for DispatchQoS();
  uint64_t v88 = *(void *)(v90 - 8);
  __chkstk_darwin(v90, v13);
  uint64_t v87 = (char *)v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v85 = *(void *)(v15 - 8);
  uint64_t v86 = v15;
  __chkstk_darwin(v15, v16);
  uint64_t v84 = (char *)v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v93 = v18;
  uint64_t v94 = v19;
  uint64_t v21 = __chkstk_darwin(v18, v20);
  BOOL v23 = (char *)v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  unint64_t v83 = (char *)v76 - v25;
  uint64_t v26 = sub_100009F04(&qword_100325870);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v28);
  uint64_t v30 = (char *)v76 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = (void *)swift_allocObject();
  void v31[2] = a2;
  void v31[3] = a3;
  v31[4] = a4;
  v31[5] = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, a1 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator__accountStore, v26);
  swift_retain();
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
  id v32 = [*(id *)(*sub_100008EF8(aBlock, (uint64_t)v96) + 16) aa_primaryAppleAccount];

  sub_100008EA8((uint64_t)aBlock);
  if (v32)
  {
    id v33 = objc_allocWithZone((Class)type metadata accessor for CustodianMigrationAnalyticsEvent());
    sub_1000800D0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v34 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)();
    uint64_t v35 = (void *)swift_allocObject();
    void v35[2] = a1;
    v35[3] = v34;
    v35[4] = sub_1001264A0;
    uint64_t v35[5] = v31;
    uint64_t v81 = v35;
    uint64_t v36 = qword_100320BB8;
    swift_retain();
    id v80 = v34;
    swift_retain();
    if (v36 != -1) {
      swift_once();
    }
    uint64_t v82 = v31;
    uint64_t v37 = type metadata accessor for Logger();
    uint64_t v78 = sub_100007288(v37, (uint64_t)qword_10033E7D8);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = (uint64_t)v83;
    if (v40)
    {
      Swift::String v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Starting custodian manatee migration.", v42, 2u);
      swift_slowDealloc();
    }

    dispatch_group_t v79 = *(dispatch_group_t *)(a1 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_dispatchGroup);
    dispatch_group_enter(v79);
    uint64_t v43 = swift_allocObject();
    swift_weakInit();
    uint64_t v77 = a1 + 56;
    sub_100008A94(a1 + 56, (uint64_t)aBlock);
    uint64_t v44 = sub_100008EF8(aBlock, (uint64_t)v96);
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = sub_100126538;
    *(void *)(v45 + 24) = v43;
    uint64_t v46 = sub_100008EF8((void *)(*v44 + 16), *(void *)(*v44 + 40));
    uint64_t v47 = type metadata accessor for LocalCache();
    swift_retain_n();
    v76[1] = v47;
    sub_10000A280();
    URL.appendingPathComponent(_:isDirectory:)();
    uint64_t v48 = v93;
    uint64_t v50 = v94 + 8;
    unint64_t v49 = *(void (**)(char *, uint64_t))(v94 + 8);
    v49(v23, v93);
    sub_100008EF8((void *)(*v46 + 16), *(void *)(*v46 + 40));
    sub_1000B3744(v41, (uint64_t)sub_100126540, v45);
    uint64_t v94 = v50;
    v49((char *)v41, v48);
    swift_release();
    sub_100008EA8((uint64_t)aBlock);
    swift_release_n();
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Starting custodianshipInfo manatee migration.", v53, 2u);
      swift_slowDealloc();
    }

    dispatch_group_enter(v79);
    uint64_t v54 = swift_allocObject();
    swift_weakInit();
    sub_100008A94(v77, (uint64_t)aBlock);
    uint64_t v55 = sub_100008EF8(aBlock, (uint64_t)v96);
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = sub_100126560;
    *(void *)(v56 + 24) = v54;
    uint64_t v57 = sub_100008EF8((void *)(*v55 + 16), *(void *)(*v55 + 40));
    swift_retain_n();
    sub_10000A280();
    URL.appendingPathComponent(_:isDirectory:)();
    uint64_t v58 = v23;
    uint64_t v59 = v93;
    v49(v58, v93);
    sub_100008EF8((void *)(*v57 + 16), *(void *)(*v57 + 40));
    sub_1000B3370(v41, (uint64_t)sub_1001278C0, v56);
    v49((char *)v41, v59);
    swift_release();
    sub_100008EA8((uint64_t)aBlock);
    swift_release_n();
    sub_1000093D0();
    uint64_t v61 = v84;
    uint64_t v60 = v85;
    uint64_t v62 = v86;
    (*(void (**)(char *, void, uint64_t))(v85 + 104))(v84, enum case for DispatchQoS.QoSClass.default(_:), v86);
    uint64_t v63 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
    uint64_t v64 = (void *)swift_allocObject();
    uint64_t v65 = v81;
    v64[2] = sub_10012652C;
    v64[3] = v65;
    v64[4] = a1;
    uint64_t v97 = sub_1001265A8;
    uint64_t v98 = v64;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100007244;
    unint64_t v96 = &unk_1002FC500;
    uint64_t v66 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v67 = v87;
    static DispatchQoS.unspecified.getter();
    uint64_t v99 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100127740((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_10000A534();
    uint64_t v68 = v89;
    uint64_t v69 = v92;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v66);

    swift_release();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v68, v69);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v67, v90);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    sub_100007288(v70, (uint64_t)qword_10033E7D8);
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Not logged in to AppleAccount, Aborting migration!", v73, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v99 = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100127740((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v74 = (void *)aBlock[0];
    uint64_t v75 = a2(aBlock[0]);
    a4(v75);
    swift_release();
  }
}

uint64_t sub_100126460()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001264A0()
{
  unint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 32);
  uint64_t v2 = (*(uint64_t (**)(void))(v0 + 16))();
  return v1(v2);
}

uint64_t sub_1001264E4()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10012652C(uint64_t a1)
{
  return sub_100123410(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

void sub_100126538(uint64_t a1, uint64_t a2)
{
  sub_1001235A8(a1, a2, v2);
}

uint64_t sub_100126540(uint64_t a1, char a2)
{
  return sub_10008E090(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

void sub_100126560(uint64_t a1, uint64_t a2)
{
  sub_100123D00(a1, a2, v2);
}

uint64_t sub_100126568()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001265A8()
{
  return sub_10012462C(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001265B4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100328400);
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for KeyRepairContext(0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  uint64_t v19 = *(int *)(v14 + 48);
  uint64_t v49 = a1;
  int v20 = *(unsigned __int8 *)(a1 + v19);
  uint64_t v21 = qword_100320BB8;
  uint64_t v22 = a3;
  if (v20 == 1)
  {
    BOOL v23 = v22;
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E7D8);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "CustodianRecord is already in Manatee.", v27, 2u);
      swift_slowDealloc();
    }

    dispatch_group_leave(v23);
    return swift_release();
  }
  else
  {
    uint64_t v45 = a2;
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v46 = v18;
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E7D8);
    sub_1001277B4(v49, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      v51[0] = v44;
      uint64_t v43 = v32;
      *(_DWORD *)id v32 = 136315138;
      Swift::String v42 = v32 + 4;
      type metadata accessor for UUID();
      sub_100127740((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v50 = sub_100135190(v33, v34, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10012782C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Migrating CustodianRecord with custodianID %s...", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10012782C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }

    uint64_t v35 = v49 + *(int *)(v14 + 20);
    uint64_t v36 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v13, v35, v36);
    v13[v10[5]] = 1;
    v13[v10[6]] = 1;
    uint64_t v37 = &v13[v10[7]];
    *(void *)uint64_t v37 = 0;
    *((void *)v37 + 1) = 0;
    uint64_t v39 = v47;
    uint64_t v38 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v9, v45 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator__keyRepair, v48);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v38);
    sub_100008EF8(v51, v51[3]);
    uint64_t v40 = swift_allocObject();
    swift_weakInit();
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = v40;
    *(void *)(v41 + 24) = sub_1000C311C;
    *(void *)(v41 + 32) = v46;
    swift_retain();
    swift_retain();
    sub_100037B84((uint64_t)v13, sub_100127820, (void (*)(uint64_t))v41);
    swift_release();
    sub_10012782C((uint64_t)v13, type metadata accessor for KeyRepairContext);
    swift_release();
    sub_100008EA8((uint64_t)v51);
    return swift_release();
  }
}

uint64_t sub_100126BC8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v74 = a2;
  uint64_t v5 = (int *)type metadata accessor for CustodianshipInfoRecord();
  uint64_t v75 = *((void *)v5 - 1);
  uint64_t v6 = *(void *)(v75 + 64);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v76 = (uint64_t)&v69 - v11;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v69 - v14;
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v19 = (char *)&v69 - v18;
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v77 = (uint64_t)&v69 - v22;
  __chkstk_darwin(v21, v23);
  uint64_t v25 = (char *)&v69 - v24;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = a3;
  uint64_t v27 = v5[9];
  uint64_t v78 = a1;
  int v28 = *(unsigned __int8 *)(a1 + v27);
  uint64_t v29 = qword_100320BB8;
  uint64_t v30 = a3;
  if (v28 == 1)
  {
    os_log_type_t v31 = v30;
    if (v29 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E7D8);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "CustodianshipInfoRecord is already in Manatee.", v35, 2u);
      swift_slowDealloc();
    }

    dispatch_group_leave(v31);
    return swift_release();
  }
  else
  {
    uint64_t v72 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v29 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_100007288(v37, (uint64_t)qword_10033E7D8);
    sub_1001277B4(v78, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v73 = v26;
    if (v40)
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v71 = (uint64_t (*)(void))swift_slowAlloc();
      v80[0] = (uint64_t)v71;
      uint64_t v70 = v41;
      *(_DWORD *)uint64_t v41 = 136315138;
      uint64_t v69 = v41 + 4;
      type metadata accessor for UUID();
      sub_100127740((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v79 = sub_100135190(v42, v43, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10012782C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Migrating CustodianshipInfoRecord for custodianID - %s", v70, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10012782C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    }

    sub_1001277B4(v78, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    uint64_t v44 = type metadata accessor for UUID();
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16);
    v45(v15, v19, v44);
    v45(&v15[v5[5]], &v19[v5[5]], v44);
    uint64_t v46 = v5[8];
    if (v19[v5[9]] == 1)
    {
      uint64_t v47 = *(void *)&v19[v46];
      unint64_t v48 = *(void *)&v19[v46 + 8];
      uint64_t v49 = (uint64_t *)&v15[v46];
      *uint64_t v49 = v47;
      v49[1] = v48;
      sub_100013140(v47, v48);
    }
    else
    {
      *(_OWORD *)&v15[v46] = xmmword_1002A9C60;
    }
    uint64_t v50 = v5[6];
    uint64_t v52 = *(void *)&v19[v50];
    uint64_t v51 = *(void *)&v19[v50 + 8];
    uint64_t v53 = &v15[v50];
    *(void *)uint64_t v53 = v52;
    *((void *)v53 + 1) = v51;
    *(void *)&v15[v5[7]] = *(void *)&v19[v5[7]];
    swift_bridgeObjectRetain();
    uint64_t v71 = (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord;
    sub_10012782C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    v15[v5[9]] = 1;
    sub_10002C8BC((uint64_t)v15, v77);
    sub_100008A94(v74 + 16, (uint64_t)v80);
    sub_100008EF8(v80, v80[3]);
    uint64_t v54 = v78;
    uint64_t v55 = v76;
    sub_1001277B4(v78, v76, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    uint64_t v56 = *(unsigned __int8 *)(v75 + 80);
    uint64_t v57 = (v56 + 16) & ~v56;
    uint64_t v58 = v6 + 7;
    uint64_t v59 = swift_allocObject();
    sub_10002C8BC(v55, v59 + v57);
    uint64_t v60 = (void (**)())(v59 + ((v58 + v57) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v61 = (void (*)())v73;
    *uint64_t v60 = sub_1001278A0;
    v60[1] = v61;
    uint64_t v62 = swift_allocObject();
    swift_weakInit();
    uint64_t v63 = v54;
    uint64_t v64 = v72;
    sub_1001277B4(v63, v72, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    uint64_t v65 = (v56 + 24) & ~v56;
    uint64_t v66 = swift_allocObject();
    *(void *)(v66 + 16) = v62;
    sub_10002C8BC(v64, v66 + v65);
    uint64_t v67 = (uint64_t (**)(uint64_t))(v66 + ((v58 + v65) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v67 = sub_1001274AC;
    v67[1] = (uint64_t (*)(uint64_t))v59;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v68 = v77;
    sub_100269654(v77, (uint64_t)sub_10012769C, v66);
    swift_release();
    swift_release();
    swift_release();
    sub_10012782C(v68, v71);
    sub_100008EA8((uint64_t)v80);
    return swift_release();
  }
}

void sub_100127308()
{
  sub_1001244F4(v0, "CustodianshipInfo manatee migration complete.");
}

uint64_t sub_10012732C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100127364()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1001274AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(uint64_t (**)(void))v6;
  uint64_t v8 = *(void *)(v6 + 8);

  return sub_100124DC0(a1, v5, v7, v8);
}

uint64_t sub_10012754C()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_10012769C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v4;
  uint64_t v7 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void (**)(uint64_t))v7;
  uint64_t v9 = *(void *)(v7 + 8);

  return sub_100122E08(a1, v5, v6, v8, v9);
}

uint64_t sub_100127740(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100127788(uint64_t a1)
{
  return sub_10010EDCC(a1, *(void (**)(uint64_t))(v1 + 16));
}

void sub_100127790()
{
  sub_1001244F4(v0, "Custodian migration complete.");
}

uint64_t sub_1001277B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_100127820(uint64_t a1)
{
  sub_100124A38(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_10012782C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001278C8(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100009F04(&qword_100325870);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__accountStore, v12);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  sub_100008EF8(v37, v37[3]);
  unsigned __int8 v17 = sub_100051674();
  sub_100008EA8((uint64_t)v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__cdpRequestController, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  unsigned __int8 v18 = sub_100056834();
  sub_100008EA8((uint64_t)v37);
  if (v17 & 1) != 0 && (v18)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E778);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v35 = a1;
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v24 = qword_100327BC8;
      unint64_t v23 = unk_100327BD0;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_100135190(v24, v23, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s - started.", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a1 = v35;
    }
    else
    {
    }
    uint64_t v32 = swift_allocObject();
    swift_weakInit();
    uint64_t v33 = (void *)swift_allocObject();
    void v33[2] = v32;
    v33[3] = a1;
    void v33[4] = a2;
    uint64_t v33[5] = v6;
    swift_retain();
    swift_retain();
    sub_10012A68C((uint64_t)sub_10013329C, (uint64_t)v33);
    swift_release();
    return swift_release();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E778);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v35 = a1;
      uint64_t v28 = swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315650;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v29 = qword_100327BC8;
      unint64_t v30 = unk_100327BD0;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_100135190(v29, v30, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 1024;
      LODWORD(v36) = v17 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 18) = 1024;
      LODWORD(v36) = v18 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - Not starting due to isHSA2Enabled: %{BOOL}d isCDPEnabled: %{BOOL}d", (uint8_t *)v28, 0x18u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return v35(0);
    }
    else
    {

      return a1(0);
    }
  }
}

uint64_t sub_100127EEC()
{
  type metadata accessor for SHA256Digest();
  sub_10000A740(&qword_100327840, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  uint64_t v0 = Digest.makeIterator()();
  uint64_t v2 = sub_100018F50(v0, v1);
  swift_bridgeObjectRelease();
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    sub_100228924(0, v3, 0);
    uint64_t v4 = 0;
    do
    {
      char v5 = *(unsigned char *)(v2 + v4 + 32);
      sub_100009F04(&qword_100326D20);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1002A9C00;
      *(void *)(v6 + 56) = &type metadata for UInt8;
      *(void *)(v6 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v6 + 32) = v5;
      uint64_t v7 = String.init(format:_:)();
      uint64_t v9 = v8;
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        sub_100228924(v10 > 1, v11 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v7;
      v12[5] = v9;
    }
    while (v3 != v4);
  }
  swift_release();
  sub_100009F04((uint64_t *)&unk_100328450);
  sub_100009610((unint64_t *)&qword_100322390, (uint64_t *)&unk_100328450);
  uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_100128100()
{
  type metadata accessor for TrustedContactsDataSync();
  sub_100009F04(&qword_100327D20);
  uint64_t result = String.init<A>(describing:)();
  qword_100327BC8 = result;
  unk_100327BD0 = v1;
  return result;
}

void sub_10012814C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(id), uint64_t a6, uint64_t a7)
{
  if ((a3 & 1) == 0)
  {
    swift_beginAccess();
    if (!swift_weakLoadStrong())
    {
      type metadata accessor for AACustodianError(0);
      uint64_t v76 = -7000;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10000A740((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      a5(v75[0]);

      return;
    }
    uint64_t v67 = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_100133410(a1);
    uint64_t v13 = v12;
    uint64_t v73 = sub_1001337A4(a2);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v70 = sub_100128D48();
    unsigned __int8 v17 = v16;
    uint64_t v72 = v18;
    uint64_t v20 = v19;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E778);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.debug.getter();
    uint64_t v68 = (uint64_t)v15;
    uint64_t v66 = a2;
    uint64_t v71 = v20;
    if (os_log_type_enabled(v22, v65))
    {
      uint64_t v62 = v13;
      log = v22;
      uint64_t v74 = a5;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315650;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v24 = qword_100327BC8;
      unint64_t v25 = unk_100327BD0;
      swift_bridgeObjectRetain();
      sub_100135190(v24, v25, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(51);
      v26._uint64_t countAndFlagsBits = 0xD000000000000016;
      v26._object = (void *)0x800000010029D8C0;
      String.append(_:)(v26);
      swift_bridgeObjectRetain();
      v27._uint64_t countAndFlagsBits = v70;
      v27._object = v17;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._uint64_t countAndFlagsBits = 0xD000000000000019;
      v28._object = (void *)0x800000010029D8E0;
      String.append(_:)(v28);
      swift_bridgeObjectRetain();
      v29._uint64_t countAndFlagsBits = v72;
      v29._object = v20;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_100135190(0, 0xE000000000000000, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      unint64_t v30 = v17;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2080;
      v75[1] = (id)0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(51);
      v31._uint64_t countAndFlagsBits = 0xD000000000000016;
      v31._object = (void *)0x800000010029D8C0;
      String.append(_:)(v31);
      swift_bridgeObjectRetain();
      uint64_t v32 = v69;
      v33._uint64_t countAndFlagsBits = v69;
      v33._object = v62;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34._uint64_t countAndFlagsBits = 0xD000000000000019;
      v34._object = (void *)0x800000010029D8E0;
      String.append(_:)(v34);
      swift_bridgeObjectRetain();
      v35._uint64_t countAndFlagsBits = v73;
      v35._object = v15;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v75[0] = (id)sub_100135190(0, 0xE000000000000000, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v36 = v62;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v65, "%s - current idmsListVersion - %s\ncloudListVersion - %s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v37 = v70;
      a5 = v74;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v46 = v17;
      uint64_t v36 = v13;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      unint64_t v30 = v46;
      swift_bridgeObjectRelease_n();
      uint64_t v32 = v69;
      uint64_t v37 = v70;
    }
    uint64_t v47 = (uint64_t)v36;
    if (v37 == v32 && v30 == v36 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v48 = v66;
      if (v72 == v73 && v71 == v15)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v49)
      {
LABEL_26:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v50 = Logger.logObject.getter();
        os_log_type_t v51 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v50, v51))
        {
          uint64_t v52 = a5;
          uint64_t v53 = (uint8_t *)swift_slowAlloc();
          v75[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v53 = 136315138;
          if (qword_100320C50 != -1) {
            swift_once();
          }
          uint64_t v54 = qword_100327BC8;
          unint64_t v55 = unk_100327BD0;
          swift_bridgeObjectRetain();
          uint64_t v76 = sub_100135190(v54, v55, (uint64_t *)v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s - list version matches with IdMS! All good!", v53, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v52(0);
        }
        else
        {

          a5(0);
        }
LABEL_38:
        swift_release();
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v48 = v66;
    }
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v64 = a7;
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      v75[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 136315138;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v59 = qword_100327BC8;
      unint64_t v60 = unk_100327BD0;
      swift_bridgeObjectRetain();
      uint64_t v76 = sub_100135190(v59, v60, (uint64_t *)v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "%s - list version doesn't match with IdMS.", v58, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a7 = v64;
    }
    else
    {
    }
    uint64_t v61 = (void *)swift_allocObject();
    v61[2] = a5;
    v61[3] = v67;
    v61[4] = a7;
    swift_retain();
    sub_10012916C(a1, v48, v69, v47, v73, v68, (void (*)(void))sub_100133E7C, (uint64_t)v61);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  swift_errorRetain();
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  sub_100007288(v38, (uint64_t)qword_10033E778);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = swift_slowAlloc();
    v77[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 136315394;
    if (qword_100320C50 != -1) {
      swift_once();
    }
    uint64_t v42 = qword_100327BC8;
    unint64_t v43 = unk_100327BD0;
    swift_bridgeObjectRetain();
    sub_100135190(v42, v43, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2080;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v44 = String.init<A>(describing:)();
    v75[0] = (id)sub_100135190(v44, v45, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001333C4(a1, a2, 1);
    sub_1001333C4(a1, a2, 1);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "%s - error fetching trusted contacts on cloud - %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001333C4(a1, a2, 1);
    sub_1001333C4(a1, a2, 1);
  }
  swift_errorRetain();
  a5((id)a1);
  sub_1001333C4(a1, a2, 1);
  sub_1001333C4(a1, a2, 1);
}

uint64_t sub_100128D48()
{
  uint64_t v1 = sub_100009F04(&qword_100325870);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  char v5 = (char *)&v14[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__accountStore;
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v7(v5, v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__accountStore, v1);
  Dependency.wrappedValue.getter();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v2 + 8);
  v8(v5, v1);
  sub_100008EF8(v14, v15);
  uint64_t v9 = sub_1000513B0();
  if (v10) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = 0;
  }
  sub_100008EA8((uint64_t)v14);
  v7(v5, v6, v1);
  Dependency.wrappedValue.getter();
  v8(v5, v1);
  sub_100008EF8(v14, v15);
  sub_1000514A4();
  sub_100008EA8((uint64_t)v14);
  return v11;
}

uint64_t sub_100128F00(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (a1)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100007288(v4, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    char v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v8 = qword_100327BC8;
      unint64_t v9 = unk_100327BD0;
      swift_bridgeObjectRetain();
      sub_100135190(v8, v9, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_10032B480);
      uint64_t v10 = String.init<A>(describing:)();
      sub_100135190(v10, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s - error syncing trusted contacts with IdMS - %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return a2(a1);
}

void sub_10012916C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v131 = a8;
  uint64_t v130 = a7;
  uint64_t v125 = a6;
  uint64_t v123 = a5;
  uint64_t v124 = a4;
  uint64_t v121 = a3;
  uint64_t v126 = a2;
  uint64_t v127 = a1;
  uint64_t v122 = *v8;
  uint64_t v120 = sub_100009F04(&qword_1003229A8);
  uint64_t v119 = *(void *)(v120 - 8);
  __chkstk_darwin(v120, v9);
  uint64_t v118 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v116 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11 - 8, v12);
  uint64_t v15 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v117 = (char *)&v112 - v17;
  uint64_t v135 = type metadata accessor for SHA256();
  v142 = *(char **)(v135 - 8);
  __chkstk_darwin(v135, v18);
  uint64_t v143 = (char *)&v112 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = type metadata accessor for SHA256Digest();
  uint64_t v141 = *(char **)(v139 - 8);
  __chkstk_darwin(v139, v20);
  uint64_t v138 = (char *)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = type metadata accessor for CustodianRecord();
  uint64_t v22 = *(void *)(v145 - 8);
  uint64_t v24 = __chkstk_darwin(v145, v23);
  Swift::String v26 = (char *)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v27);
  uint64_t v140 = (char *)&v112 - v28;
  uint64_t v29 = sub_100009F04(&qword_100325870);
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v31);
  Swift::String v33 = (char *)&v112 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v34 - 8, v35);
  uint64_t v37 = (char *)&v112 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for Date();
  uint64_t v137 = *(void *)(v136 - 8);
  __chkstk_darwin(v136, v38);
  char v129 = (char *)&v112 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v40 = [self standardUserDefaults];
  NSString v41 = String._bridgeToObjectiveC()();
  id v42 = [v40 objectForKey:v41];

  if (v42)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v151 = 0u;
    long long v152 = 0u;
  }
  sub_10002895C((uint64_t)&v151, (uint64_t)&aBlock, &qword_100328490);
  if (!v148)
  {
    sub_100006574((uint64_t)&aBlock, &qword_100328490);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v137 + 56))(v37, 1, 1, v136);
    goto LABEL_28;
  }
  uint64_t v43 = v136;
  int v44 = swift_dynamicCast();
  uint64_t v45 = v137;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v137 + 56))(v37, v44 ^ 1u, 1, v43);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v37, 1, v43) == 1)
  {
LABEL_28:
    sub_100006574((uint64_t)v37, &qword_100324D80);
    type metadata accessor for AACustodianError(0);
    *(void *)&long long v151 = -7055;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10000A740((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v72 = (void *)aBlock;
    v130(aBlock);

    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v129, v37, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v33, v128 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__accountStore, v29);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v29);
  id v46 = [*(id *)(*sub_100008EF8(&aBlock, (uint64_t)v148) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)&aBlock);
  if (!v46)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v104 = type metadata accessor for Logger();
    sub_100007288(v104, (uint64_t)qword_10033E778);
    Swift::Int v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v105, v106))
    {
      Swift::Int v107 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)Swift::Int v107 = 136315138;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v108 = qword_100327BC8;
      unint64_t v109 = unk_100327BD0;
      swift_bridgeObjectRetain();
      *(void *)&long long v151 = sub_100135190(v108, v109, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "%s - not logged in to an Apple account, unable to perform trusted contacts data sync with IdMS", v107, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v43 = v136;
    }
    else
    {
    }
    uint64_t v110 = v137;
    type metadata accessor for AACustodianError(0);
    *(void *)&long long v151 = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10000A740((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v111 = (void *)aBlock;
    v130(aBlock);

    (*(void (**)(char *, uint64_t))(v110 + 8))(v129, v43);
    return;
  }
  uint64_t v47 = (char *)[objc_allocWithZone((Class)AKCustodianContext) init];
  id v112 = v46;
  id v48 = [v46 aa_altDSID];
  [v47 setAltDSID:v48];

  uint64_t v49 = v127;
  uint64_t v50 = *(void *)(v127 + 16);
  os_log_type_t v51 = &swift_arrayInitWithTakeFrontToBack_ptr;
  uint64_t v52 = &off_10031D000;
  uint64_t v113 = v47;
  if (!v50)
  {
LABEL_30:
    uint64_t v73 = sub_10000850C(0, &qword_100327CF8);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v47 setCustodianContacts:isa];

    uint64_t v75 = v126;
    uint64_t v76 = *(void *)(v126 + 16);
    if (v76)
    {
      uint64_t v145 = v73;
      *(void *)&long long aBlock = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v77 = v75 + ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80));
      uint64_t v78 = *(void *)(v116 + 72);
      uint64_t v79 = (uint64_t)v117;
      do
      {
        sub_100133E88(v77, v79, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        sub_100133E88(v79, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        id v80 = objc_allocWithZone((Class)v51[341]);
        Class v81 = UUID._bridgeToObjectiveC()().super.isa;
        [v80 v52[422] v81];

        sub_100134348((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        sub_100134348(v79, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v77 += v78;
        --v76;
      }
      while (v76);
      swift_bridgeObjectRelease();
      uint64_t v47 = v113;
    }
    Class v82 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v47 setBeneficiaryContacts:v82];

    Class v83 = Date._bridgeToObjectiveC()().super.isa;
    [v47 setLastDataSyncTimestamp:v83];

    if (qword_100320B98 != -1) {
      goto LABEL_52;
    }
    goto LABEL_35;
  }
  *(void *)&long long v151 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v47 = (char *)(v49 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)));
  uint64_t v144 = *(void *)(v22 + 72);
  uint64_t v133 = (void (**)(char *, uint64_t))(v142 + 8);
  uint64_t v132 = (void (**)(char *, uint64_t))(v141 + 8);
  uint64_t v53 = v135;
  uint64_t v54 = (uint64_t)v140;
  os_log_type_t v134 = v15;
  while (1)
  {
    sub_100133E88((uint64_t)v47, v54, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    sub_100133E88(v54, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    id v55 = objc_allocWithZone((Class)v51[341]);
    uint64_t v56 = v145;
    Class v57 = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v58 = (char *)[v55 initWithUUID:v57 status:AKTrustedContactStatusFromAATrustedContactStatus()];

    uint64_t v59 = (uint64_t *)&v26[*(int *)(v56 + 40)];
    unint64_t v60 = v59[1];
    if (v60 >> 60 != 15) {
      break;
    }
    sub_100134348((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
LABEL_10:
    sub_100134348(v54, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    v47 += v144;
    if (!--v50)
    {
      swift_bridgeObjectRelease();
      uint64_t v47 = v113;
      uint64_t v52 = &off_10031D000;
      goto LABEL_30;
    }
  }
  uint64_t v61 = *v59;
  uint64_t v141 = v58;
  sub_1000196B4(v61, v60);
  uint64_t v62 = Data.base64EncodedData(options:)();
  unint64_t v64 = v63;
  sub_1000196A0(v61, v60);
  sub_10000A740((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
  os_log_type_t v65 = v143;
  dispatch thunk of HashFunction.init()();
  v142 = v58;
  switch(v64 >> 62)
  {
    case 1uLL:
      if (v62 >> 32 < (int)v62)
      {
        __break(1u);
        goto LABEL_49;
      }
      sub_100013140(v62, v64);
      if (!__DataStorage._bytes.getter() || !__OFSUB__((int)v62, __DataStorage._offset.getter()))
      {
        __DataStorage._length.getter();
        os_log_type_t v65 = v143;
        uint64_t v53 = v135;
        goto LABEL_22;
      }
      goto LABEL_51;
    case 2uLL:
      uint64_t v115 = *(void *)(v62 + 16);
      uint64_t v114 = *(void *)(v62 + 24);
      sub_100013140(v62, v64);
      swift_retain();
      swift_retain();
      if (__DataStorage._bytes.getter())
      {
        uint64_t v66 = __DataStorage._offset.getter();
        uint64_t v67 = v115;
        if (__OFSUB__(v115, v66)) {
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v67 = v115;
      }
      if (!__OFSUB__(v114, v67))
      {
        __DataStorage._length.getter();
        os_log_type_t v65 = v143;
        uint64_t v68 = v135;
        dispatch thunk of HashFunction.update(bufferPointer:)();
        uint64_t v53 = v68;
        swift_release();
        swift_release();
LABEL_26:
        sub_100013198(v62, v64);
        uint64_t v69 = v138;
        dispatch thunk of HashFunction.finalize()();
        (*v133)(v65, v53);
        sub_100127EEC();
        NSString v70 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v71 = v141;
        [v141 setHashedWrappingKeyRKC:v70];

        sub_100013198(v62, v64);
        sub_100134348((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        (*v132)(v69, v139);
        uint64_t v15 = v134;
        uint64_t v54 = (uint64_t)v140;
        os_log_type_t v51 = &swift_arrayInitWithTakeFrontToBack_ptr;
        goto LABEL_10;
      }
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      swift_once();
LABEL_35:
      uint64_t v84 = type metadata accessor for Logger();
      sub_100007288(v84, (uint64_t)qword_10033E778);
      uint64_t v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v87 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v87 = 136315138;
        if (qword_100320C50 != -1) {
          swift_once();
        }
        uint64_t v88 = qword_100327BC8;
        unint64_t v89 = unk_100327BD0;
        swift_bridgeObjectRetain();
        *(void *)&long long v151 = sub_100135190(v88, v89, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "%s - updating IdMS with the recent trusted contacts list", v87, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v90 = v119;
      uint64_t v91 = v118;
      uint64_t v92 = v120;
      (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v118, v128 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__idmsRequestController, v120);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v92);
      uint64_t v93 = (void **)sub_100008EF8(&v151, *((uint64_t *)&v152 + 1));
      uint64_t v94 = swift_allocObject();
      swift_weakInit();
      uint64_t v95 = (void *)swift_allocObject();
      uint64_t v96 = v124;
      v95[2] = v121;
      uint64_t v95[3] = v96;
      uint64_t v97 = v125;
      v95[4] = v123;
      v95[5] = v97;
      uint64_t v98 = v131;
      v95[6] = v130;
      v95[7] = v98;
      uint64_t v99 = v112;
      v95[8] = v94;
      v95[9] = v99;
      v95[10] = v122;
      id v100 = *v93;
      uint64_t v101 = swift_allocObject();
      *(void *)(v101 + 16) = sub_100133F48;
      *(void *)(v101 + 24) = v95;
      uint64_t v149 = sub_100133FB8;
      uint64_t v150 = v101;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      id v147 = sub_10004DAE8;
      uint64_t v148 = &unk_1002FC8C8;
      uint64_t v102 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      id v103 = v99;
      swift_retain();
      swift_release();
      [v100 performTrustedContactsDataSync:v47 completion:v102];
      _Block_release(v102);

      swift_release();
      (*(void (**)(char *, uint64_t))(v137 + 8))(v129, v136);
      swift_release();
      sub_100008EA8((uint64_t)&v151);
      return;
    case 3uLL:
      *(void *)((char *)&aBlock + 6) = 0;
      *(void *)&long long aBlock = 0;
      goto LABEL_22;
    default:
      *(void *)&long long aBlock = v62;
      WORD4(aBlock) = v64;
      BYTE10(aBlock) = BYTE2(v64);
      BYTE11(aBlock) = BYTE3(v64);
      BYTE12(aBlock) = BYTE4(v64);
      BYTE13(aBlock) = BYTE5(v64);
LABEL_22:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      goto LABEL_26;
  }
}

uint64_t sub_10012A68C(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = a1;
  uint64_t v68 = a2;
  uint64_t v3 = *v2;
  uint64_t v74 = v2;
  uint64_t v75 = v3;
  uint64_t v70 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v73 = *(void *)(v70 - 8);
  __chkstk_darwin(v70, v4);
  uint64_t v69 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v71 = *(void *)(v6 - 8);
  uint64_t v72 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v66 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v65 = v9;
  __chkstk_darwin(v9, v10);
  unint64_t v63 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v61 = *(void *)(v62 - 8);
  __chkstk_darwin(v62, v12);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v59 - 8);
  uint64_t v17 = __chkstk_darwin(v59, v16);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v58 - v21;
  uint64_t v23 = sub_100009F04(&qword_100321FF8);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)&v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = dispatch_group_create();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = 0;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = _swiftEmptyArrayStorage;
  dispatch_group_enter(v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, (uint64_t)v74 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__custodianStorage, v23);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  uint64_t v31 = sub_100008EF8(aBlock, (uint64_t)v78);
  uint64_t v32 = (void *)swift_allocObject();
  void v32[2] = v28;
  v32[3] = v30;
  uint64_t v60 = v30;
  Swift::String v33 = v75;
  v32[4] = v29;
  void v32[5] = v33;
  uint64_t v34 = sub_100008EF8((void *)(*v31 + 16), *(void *)(*v31 + 40));
  type metadata accessor for LocalCache();
  uint64_t v35 = v28;
  swift_retain();
  swift_retain();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v36 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v37 = v19;
  uint64_t v38 = v59;
  v36(v37, v59);
  sub_100008EF8((void *)(*v34 + 16), *(void *)(*v34 + 40));
  sub_1000B3744((uint64_t)v22, (uint64_t)sub_100133320, (uint64_t)v32);
  v36(v22, v38);
  swift_release();
  sub_100008EA8((uint64_t)aBlock);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = _swiftEmptyArrayStorage;
  dispatch_group_enter(v35);
  uint64_t v40 = v61;
  uint64_t v41 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v14, (uint64_t)v74 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__inheritanceStorage, v62);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v41);
  sub_100008EF8(aBlock, (uint64_t)v78);
  id v42 = (void *)swift_allocObject();
  long long v42[2] = v35;
  v42[3] = v39;
  uint64_t v43 = v75;
  v42[4] = v29;
  void v42[5] = v43;
  uint64_t v75 = v35;
  swift_retain();
  swift_retain();
  sub_100008810((uint64_t)sub_100133330, (uint64_t)v42);
  swift_release();
  sub_100008EA8((uint64_t)aBlock);
  sub_10000850C(0, (unint64_t *)&qword_10032A860);
  uint64_t v45 = v63;
  uint64_t v44 = v64;
  uint64_t v46 = v65;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v63, enum case for DispatchQoS.QoSClass.default(_:), v65);
  uint64_t v47 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  id v48 = (void *)swift_allocObject();
  uint64_t v49 = v67;
  uint64_t v50 = v68;
  v48[2] = v29;
  void v48[3] = v49;
  uint64_t v51 = v60;
  v48[4] = v50;
  void v48[5] = v51;
  v48[6] = v39;
  uint64_t v79 = sub_1001333B4;
  id v80 = v48;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  uint64_t v78 = &unk_1002FC828;
  uint64_t v52 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v53 = v66;
  static DispatchQoS.unspecified.getter();
  uint64_t v76 = _swiftEmptyArrayStorage;
  sub_10000A740((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_100009610((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  uint64_t v54 = v69;
  uint64_t v55 = v70;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v56 = v75;
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v52);

  (*(void (**)(char *, uint64_t))(v73 + 8))(v54, v55);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v53, v72);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10012AF1C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__custodianStorage;
  uint64_t v4 = sub_100009F04(&qword_100321FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__inheritanceStorage;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_10032B720);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__idmsRequestController;
  uint64_t v8 = sub_100009F04(&qword_1003229A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__userDefaults;
  uint64_t v10 = sub_100009F04(&qword_100327D28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__keyRepair;
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_100328400);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__cdpRequestController;
  uint64_t v14 = sub_100009F04((uint64_t *)&unk_1003228A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);

  return swift_deallocClassInstance();
}

uint64_t sub_10012B170()
{
  return type metadata accessor for TrustedContactsDataSync();
}

uint64_t type metadata accessor for TrustedContactsDataSync()
{
  uint64_t result = qword_100327C38;
  if (!qword_100327C38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10012B1C4()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_100327F30, &qword_100322470);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&qword_10032B5D0, (uint64_t *)&unk_100321850);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, &qword_100322478, (uint64_t *)&unk_100322480);
        if (v3 <= 0x3F)
        {
          sub_10012B418();
          if (v4 <= 0x3F)
          {
            sub_10001BF34(319, (unint64_t *)&unk_100324070, &qword_10032D780);
            if (v5 <= 0x3F)
            {
              sub_10001BF34(319, qword_100327FA0, (uint64_t *)&unk_100321910);
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

void sub_10012B418()
{
  if (!qword_100327C48)
  {
    sub_10000850C(255, (unint64_t *)&qword_1003245C0);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100327C48);
    }
  }
}

uint64_t sub_10012B480(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  return sub_1001278C8(a3, a4);
}

unint64_t sub_10012B4AC()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
  {
    swift_bridgeObjectRelease_n();
    return 0xD000000000000010;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5) {
    return 0xD000000000000010;
  }
  uint64_t v6 = 0x6B20726961706572;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;
      if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
      {
        swift_bridgeObjectRelease_n();
        return 0xD000000000000012;
      }
      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v18) {
          return 0xD000000000000012;
        }
        else {
          return 0xD00000000000002CLL;
        }
      }
    }
  }
  return v6;
}

unint64_t sub_10012B6C0()
{
  uint64_t v0 = 0x6574656C6564;
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v4) {
    goto LABEL_13;
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    uint64_t v0 = 0x657461647075;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10) {
      goto LABEL_13;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v0 = 0x6873696E6966;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;
      if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
      {
LABEL_13:
        swift_bridgeObjectRelease_n();
        return v0;
      }
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0) {
        return 0xD00000000000002CLL;
      }
    }
  }
  return v0;
}

void sub_10012B874(uint64_t a1, char a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    char v12 = (void *)(a5 + 16);
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E778);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      format = a7;
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      v20[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v18 = qword_100327BC8;
      unint64_t v17 = unk_100327BD0;
      swift_bridgeObjectRetain();
      sub_100135190(v18, v17, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, format, v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_beginAccess();
    *char v12 = a1;
    swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    *(void *)(a4 + 16) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  dispatch_group_leave(a3);
}

uint64_t sub_10012BAA8(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    swift_errorRetain();
    a2(v9, 0, 1);
    return swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    uint64_t v11 = *(void *)(a4 + 16);
    swift_beginAccess();
    uint64_t v12 = *(void *)(a5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v11, v12, 0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void sub_10012BB9C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10002895C(a1, (uint64_t)v93, &qword_100327D00);
  sub_10002895C(a1, (uint64_t)v94, &qword_100327D00);
  if (v95)
  {
    uint64_t v15 = v94[0];
    swift_errorRetain();
    uint64_t v16 = (void *)_convertErrorToNSError(_:)();
    if (objc_msgSend(v16, "ak_isAuthenticationErrorWithCode:", -7097))
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100007288(v17, (uint64_t)qword_10033E778);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v90 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136315138;
        if (qword_100320C50 != -1) {
          swift_once();
        }
        uint64_t v21 = qword_100327BC8;
        unint64_t v22 = unk_100327BD0;
        swift_bridgeObjectRetain();
        uint64_t v92 = (void *)sub_100135190(v21, v22, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s - IdMS has disabled trusted contact data sync, returning early.", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      a6(0);
      sub_100133FC0(a1);
    }
    else
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      sub_100007288(v41, (uint64_t)qword_10033E778);
      swift_errorRetain();
      swift_errorRetain();
      id v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        unint64_t v89 = v16;
        uint64_t v85 = a6;
        uint64_t v44 = swift_slowAlloc();
        uint64_t v90 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 136315394;
        if (qword_100320C50 != -1) {
          swift_once();
        }
        uint64_t v46 = qword_100327BC8;
        unint64_t v45 = unk_100327BD0;
        swift_bridgeObjectRetain();
        uint64_t v92 = (void *)sub_100135190(v46, v45, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2080;
        uint64_t v92 = (void *)v15;
        swift_errorRetain();
        sub_100009F04((uint64_t *)&unk_100325850);
        uint64_t v47 = String.init<A>(describing:)();
        uint64_t v92 = (void *)sub_100135190(v47, v48, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100133FC0(a1);
        sub_100133FC0(a1);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s - error performing ContactsDataSync with IdMS - %s", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        a6 = v85;
        uint64_t v16 = v89;
      }
      else
      {
        sub_100133FC0(a1);
        sub_100133FC0(a1);
      }
      swift_errorRetain();
      a6(v15);
      sub_100133FC0(a1);

      sub_100133FC0(a1);
    }
    return;
  }
  uint64_t v83 = a7;
  uint64_t v84 = (void (*)(void *))a6;
  uint64_t v23 = v94[0];
  uint64_t v24 = (void *)v94[1];
  uint64_t v25 = (void *)v94[3];
  uint64_t v87 = v94[2];
  uint64_t v82 = v94[4];
  uint64_t v26 = qword_100320B88;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v26 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100007288(v27, (uint64_t)qword_10033E748);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  uint64_t v86 = v23;
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v81 = v27;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v92 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315650;
    if (qword_100320C50 != -1) {
      swift_once();
    }
    uint64_t v31 = qword_100327BC8;
    unint64_t v32 = unk_100327BD0;
    swift_bridgeObjectRetain();
    sub_100135190(v31, v32, (uint64_t *)&v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(51);
    v33._uint64_t countAndFlagsBits = 0xD000000000000016;
    v33._object = (void *)0x800000010029D8C0;
    String.append(_:)(v33);
    swift_bridgeObjectRetain();
    v34._uint64_t countAndFlagsBits = v86;
    v34._object = v24;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = 0xD000000000000019;
    v35._object = (void *)0x800000010029D8E0;
    String.append(_:)(v35);
    swift_bridgeObjectRetain();
    v36._uint64_t countAndFlagsBits = v87;
    v36._object = v25;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_100135190(0, 0xE000000000000000, (uint64_t *)&v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2080;
    unint64_t v91 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(51);
    v37._uint64_t countAndFlagsBits = 0xD000000000000016;
    v37._object = (void *)0x800000010029D8C0;
    String.append(_:)(v37);
    swift_bridgeObjectRetain();
    v38._uint64_t countAndFlagsBits = a2;
    v38._object = a3;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 0xD000000000000019;
    v39._object = (void *)0x800000010029D8E0;
    String.append(_:)(v39);
    swift_bridgeObjectRetain();
    v40._uint64_t countAndFlagsBits = a4;
    v40._object = a5;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v90 = sub_100135190(0, 0xE000000000000000, (uint64_t *)&v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - <DM> Updated idmsListVersion – %s\ncloudListVersion – %s", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v23 = v86;
    swift_slowDealloc();

    uint64_t v27 = v81;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  sub_100007288(v27, (uint64_t)qword_10033E778);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v49, v50))
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (v23 != a2) {
      goto LABEL_31;
    }
LABEL_30:
    if (v24 == a3) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  os_log_type_t v80 = v50;
  uint64_t v51 = swift_slowAlloc();
  uint64_t v92 = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v51 = 136315650;
  if (qword_100320C50 != -1) {
    swift_once();
  }
  uint64_t v52 = qword_100327BC8;
  unint64_t v53 = unk_100327BD0;
  swift_bridgeObjectRetain();
  sub_100135190(v52, v53, (uint64_t *)&v92);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v51 + 12) = 2080;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(51);
  v54._uint64_t countAndFlagsBits = 0xD000000000000016;
  v54._object = (void *)0x800000010029D8C0;
  String.append(_:)(v54);
  swift_bridgeObjectRetain();
  v55._uint64_t countAndFlagsBits = v86;
  v55._object = v24;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._uint64_t countAndFlagsBits = 0xD000000000000019;
  v56._object = (void *)0x800000010029D8E0;
  String.append(_:)(v56);
  swift_bridgeObjectRetain();
  v57._uint64_t countAndFlagsBits = v87;
  v57._object = v25;
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_100135190(0, 0xE000000000000000, (uint64_t *)&v92);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v51 + 22) = 2080;
  unint64_t v91 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(51);
  v58._uint64_t countAndFlagsBits = 0xD000000000000016;
  v58._object = (void *)0x800000010029D8C0;
  String.append(_:)(v58);
  swift_bridgeObjectRetain();
  v59._uint64_t countAndFlagsBits = a2;
  v59._object = a3;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  v60._uint64_t countAndFlagsBits = 0xD000000000000019;
  v60._object = (void *)0x800000010029D8E0;
  String.append(_:)(v60);
  swift_bridgeObjectRetain();
  v61._uint64_t countAndFlagsBits = a4;
  v61._object = a5;
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v90 = sub_100135190(0, 0xE000000000000000, (uint64_t *)&v92);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v49, v80, "%s - Updated idmsListVersion – %s\ncloudListVersion – %s", (uint8_t *)v51, 0x20u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (v86 == a2) {
    goto LABEL_30;
  }
LABEL_31:
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
LABEL_32:
  if (v87 == a4 && v25 == a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_36:
    unint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      uint64_t v90 = swift_slowAlloc();
      *(_DWORD *)uint64_t v65 = 136315138;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v66 = qword_100327BC8;
      unint64_t v67 = unk_100327BD0;
      swift_bridgeObjectRetain();
      uint64_t v92 = (void *)sub_100135190(v66, v67, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "%s - IdMS List version matches with cloud storage! All good!", v65, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    v84(0);
    return;
  }
  char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v62) {
    goto LABEL_36;
  }
LABEL_46:
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v69 = Logger.logObject.getter();
  uint64_t v70 = (uint64_t)v84;
  if (Strong)
  {
    os_log_type_t v71 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v69, v71))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      uint64_t v92 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136315138;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v73 = qword_100327BC8;
      unint64_t v74 = unk_100327BD0;
      swift_bridgeObjectRetain();
      sub_100135190(v73, v74, (uint64_t *)&v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v71, "%s - IdMS list version does not match with cloud storage, handling requested custodian operations", v72, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v70 = (uint64_t)v84;
    }
    else
    {
    }
    sub_10012CDC4(v82, a9, v70, v83);
    swift_release();
  }
  else
  {
    uint64_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, (os_log_type_t)v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      uint64_t v92 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v76 = 136315138;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v77 = qword_100327BC8;
      unint64_t v78 = unk_100327BD0;
      swift_bridgeObjectRetain();
      sub_100135190(v77, v78, (uint64_t *)&v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v75, "%s - performContactsDataSyncWithIdMS: self is no longer retained, nothing to do here", v76, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10000A740((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v79 = v92;
    v84(v92);
  }
}

uint64_t sub_10012CDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v106 = a4;
  uint64_t v105 = a3;
  uint64_t v119 = a2;
  uint64_t v127 = *v4;
  uint64_t v112 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v111 = *(void *)(v112 - 8);
  __chkstk_darwin(v112, v6);
  uint64_t v110 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for DispatchQoS();
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109, v8);
  Swift::Int v107 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104, v10);
  uint64_t v102 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100009F04(&qword_100327D08);
  uint64_t v19 = __chkstk_darwin(v17 - 8, v18);
  uint64_t v21 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)&v95 - v23;
  uint64_t v125 = dispatch_group_create();
  uint64_t v25 = swift_allocObject();
  unint64_t v26 = sub_100220B90((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v27 = *(void *)(a1 + 64);
  uint64_t v114 = a1 + 64;
  uint64_t v126 = v25;
  *(void *)(v25 + 16) = v26;
  uint64_t v28 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  uint64_t v117 = v13 + 16;
  uint64_t v124 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v123 = AKTrustedContactsSyncOperationDelete;
  uint64_t v115 = AKTrustedContactsSyncOperationUpdateRKC;
  uint64_t v113 = AKTrustedContactsSyncOperationFinish;
  uint64_t v118 = v13;
  uint64_t v122 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
  int64_t v116 = (unint64_t)(v28 + 63) >> 6;
  int64_t v99 = v116 - 1;
  uint64_t v120 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v128 = 0;
  *(void *)&long long v32 = 136315138;
  long long v101 = v32;
  id v100 = (char *)&type metadata for Any + 8;
  if (!v30) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v33 = __clz(__rbit64(v30));
  v30 &= v30 - 1;
  unint64_t v34 = v33 | (v128 << 6);
  while (2)
  {
    uint64_t v35 = v120;
    (*(void (**)(char *, unint64_t, uint64_t))(v118 + 16))(v21, *(void *)(v120 + 48) + *(void *)(v118 + 72) * v34, v12);
    uint64_t v36 = *(void *)(v35 + 56);
    uint64_t v37 = sub_100009F04(&qword_100327D10);
    Swift::String v38 = *(void **)(v36 + 8 * v34);
    *(void *)&v21[*(int *)(v37 + 48)] = v38;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v21, 0, 1, v37);
    id v39 = v38;
    while (1)
    {
      sub_10002895C((uint64_t)v21, (uint64_t)v24, &qword_100327D08);
      uint64_t v44 = sub_100009F04(&qword_100327D10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v24, 1, v44) == 1)
      {
        swift_release();
        sub_10000850C(0, (unint64_t *)&qword_10032A860);
        uint64_t v83 = v103;
        uint64_t v84 = v102;
        uint64_t v85 = v104;
        (*(void (**)(char *, void, uint64_t))(v103 + 104))(v102, enum case for DispatchQoS.QoSClass.default(_:), v104);
        uint64_t v86 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v85);
        uint64_t v87 = (void *)swift_allocObject();
        uint64_t v88 = v105;
        v87[2] = v126;
        v87[3] = v88;
        uint64_t v89 = v127;
        v87[4] = v106;
        id v87[5] = v89;
        aBlock[4] = (uint64_t)sub_1001340B0;
        aBlock[5] = (uint64_t)v87;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100007244;
        void aBlock[3] = (uint64_t)&unk_1002FC940;
        uint64_t v90 = _Block_copy(aBlock);
        swift_retain();
        swift_retain();
        unint64_t v91 = v107;
        static DispatchQoS.unspecified.getter();
        char v129 = _swiftEmptyArrayStorage;
        sub_10000A740((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100009F04(&qword_10032BB00);
        sub_100009610((unint64_t *)&qword_1003229C0, &qword_10032BB00);
        uint64_t v92 = v110;
        uint64_t v93 = v112;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v94 = v125;
        OS_dispatch_group.notify(qos:flags:queue:execute:)();
        _Block_release(v90);

        (*(void (**)(char *, uint64_t))(v111 + 8))(v92, v93);
        (*(void (**)(char *, uint64_t))(v108 + 8))(v91, v109);
        swift_release();
        return swift_release();
      }
      unint64_t v45 = *(void **)&v24[*(int *)(v44 + 48)];
      (*v124)(v16, v24, v12);
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v48 = v47;
      if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v48 == v49)
      {
        uint64_t v52 = swift_bridgeObjectRelease_n();
LABEL_39:
        __chkstk_darwin(v52, v53);
        uint64_t v68 = &v95 - 6;
        *(&v95 - 4) = v121;
        *(&v95 - 3) = (uint64_t)v16;
        *(&v95 - 2) = v119;
        uint64_t v69 = (void (*)(void (*)(uint64_t), uint64_t))sub_1001340DC;
        goto LABEL_44;
      }
      char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v52 = swift_bridgeObjectRelease();
      if (v51) {
        goto LABEL_39;
      }
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v56 = v55;
      if (v54 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v56 == v57)
      {
        uint64_t v60 = swift_bridgeObjectRelease_n();
LABEL_41:
        __chkstk_darwin(v60, v61);
        uint64_t v68 = &v95 - 4;
        uint64_t v70 = v121;
        *(&v95 - 2) = (uint64_t)v16;
        *(&v95 - 1) = v70;
        uint64_t v69 = (void (*)(void (*)(uint64_t), uint64_t))sub_1001340D4;
        goto LABEL_44;
      }
      char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v60 = swift_bridgeObjectRelease();
      if (v59) {
        goto LABEL_41;
      }
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v63;
      if (v62 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v64 == v65)
      {
        uint64_t v66 = swift_bridgeObjectRelease_n();
      }
      else
      {
        char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v66 = swift_bridgeObjectRelease();
        if ((v71 & 1) == 0)
        {
          if (qword_100320B98 != -1) {
            swift_once();
          }
          uint64_t v72 = type metadata accessor for Logger();
          sub_100007288(v72, (uint64_t)qword_10033E778);
          id v73 = v45;
          unint64_t v74 = Logger.logObject.getter();
          os_log_type_t v75 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v74, v75))
          {
            uint64_t v76 = swift_slowAlloc();
            id v96 = v73;
            uint64_t v77 = v76;
            uint64_t v78 = swift_slowAlloc();
            os_log_t v97 = v74;
            uint64_t v98 = v78;
            aBlock[0] = v78;
            *(_DWORD *)uint64_t v77 = v101;
            uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            *(void *)(v77 + 4) = sub_100135190(v79, v80, aBlock);
            id v81 = v96;

            swift_bridgeObjectRelease();
            os_log_t v82 = v97;
            _os_log_impl((void *)&_mh_execute_header, v97, v75, "Unexpected operation type received: %s", (uint8_t *)v77, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          goto LABEL_45;
        }
      }
      __chkstk_darwin(v66, v67);
      uint64_t v68 = &v95 - 6;
      *(&v95 - 4) = v121;
      *(&v95 - 3) = (uint64_t)v16;
      *(&v95 - 2) = v119;
      uint64_t v69 = (void (*)(void (*)(uint64_t), uint64_t))sub_1001340BC;
LABEL_44:
      sub_10012DA5C((uint64_t)v45, (uint64_t)v16, v69, (uint64_t)v68, v125, v126, v127);

LABEL_45:
      uint64_t result = (*v122)(v16, v12);
      if (v30) {
        goto LABEL_4;
      }
LABEL_6:
      int64_t v40 = v128 + 1;
      if (__OFADD__(v128, 1))
      {
        __break(1u);
        goto LABEL_54;
      }
      if (v40 < v116)
      {
        unint64_t v41 = *(void *)(v114 + 8 * v40);
        if (v41) {
          goto LABEL_9;
        }
        int64_t v42 = v128 + 2;
        ++v128;
        if (v40 + 1 < v116)
        {
          unint64_t v41 = *(void *)(v114 + 8 * v42);
          if (v41) {
            goto LABEL_12;
          }
          int64_t v128 = v40 + 1;
          if (v40 + 2 < v116)
          {
            unint64_t v41 = *(void *)(v114 + 8 * (v40 + 2));
            if (v41)
            {
              v40 += 2;
              goto LABEL_9;
            }
            int64_t v42 = v40 + 3;
            int64_t v128 = v40 + 2;
            if (v40 + 3 < v116) {
              break;
            }
          }
        }
      }
LABEL_23:
      uint64_t v43 = sub_100009F04(&qword_100327D10);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v21, 1, 1, v43);
      unint64_t v30 = 0;
    }
    unint64_t v41 = *(void *)(v114 + 8 * v42);
    if (v41)
    {
LABEL_12:
      int64_t v40 = v42;
LABEL_9:
      unint64_t v30 = (v41 - 1) & v41;
      unint64_t v34 = __clz(__rbit64(v41)) + (v40 << 6);
      int64_t v128 = v40;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v40 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v40 >= v116)
    {
      int64_t v128 = v99;
      goto LABEL_23;
    }
    unint64_t v41 = *(void *)(v114 + 8 * v40);
    ++v42;
    if (v41) {
      goto LABEL_9;
    }
  }
LABEL_54:
  __break(1u);
  return result;
}

void sub_10012DA5C(uint64_t a1, uint64_t a2, void (*a3)(void (*)(uint64_t a1), uint64_t), uint64_t a4, NSObject *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v56 = a7;
  uint64_t v57 = a6;
  dispatch_group_t v62 = a5;
  uint64_t v58 = a4;
  char v59 = a3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v55 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v13;
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v49 - v15;
  uint64_t v52 = a1;
  unint64_t v17 = sub_10012B4AC();
  unint64_t v19 = v18;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  unint64_t v60 = v17;
  uint64_t v20 = type metadata accessor for Logger();
  sub_100007288(v20, (uint64_t)qword_10033E778);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v54 = a2;
  char v51 = v21;
  v21(v16, a2, v9);
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  unint64_t v61 = v19;
  if (v24)
  {
    uint64_t v50 = v10;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    uint64_t v64 = v49;
    *(_DWORD *)uint64_t v25 = 136315650;
    if (qword_100320C50 != -1) {
      swift_once();
    }
    uint64_t v27 = qword_100327BC8;
    unint64_t v26 = unk_100327BD0;
    swift_bridgeObjectRetain();
    uint64_t v63 = sub_100135190(v27, v26, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    unint64_t v28 = v61;
    swift_bridgeObjectRetain();
    uint64_t v63 = sub_100135190(v60, v28, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 22) = 2080;
    sub_10000A740((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v63 = sub_100135190(v29, v30, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = v50;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v16, v9);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - requested to %s for %s", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  }

  uint64_t v31 = v9;
  dispatch_group_enter(v62);
  sub_10012B6C0();
  id v32 = objc_allocWithZone((Class)type metadata accessor for TrustedContactsSyncOperationsCAEvent());
  sub_100009F04(&qword_100324668);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
  *(void *)(inited + 32) = 0x656D614E706FLL;
  *(void *)(inited + 40) = 0xE600000000000000;
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v34;
  sub_10022175C(inited);
  uint64_t v52 = AAFTimedAnalyticsEvent.init(eventName:initialData:)();
  uint64_t v35 = v55;
  v51(v55, v54, v31);
  unint64_t v36 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v37 = (v53 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = (v37 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v41 + v36, v35, v31);
  int64_t v42 = (unint64_t *)(v41 + v37);
  unint64_t v43 = v61;
  dispatch_group_t v44 = v62;
  *int64_t v42 = v60;
  v42[1] = v43;
  uint64_t v45 = v56;
  *(void *)(v41 + v38) = v57;
  uint64_t v46 = (void *)v52;
  *(void *)(v41 + v39) = v52;
  *(void *)(v41 + v40) = v44;
  *(void *)(v41 + ((v40 + 15) & 0xFFFFFFFFFFFFFFF8)) = v45;
  id v47 = v46;
  swift_retain();
  uint64_t v48 = v44;
  v59(sub_100134220, v41);
  swift_release();
}

void sub_10012DFF0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  uint64_t v12 = UUID.uuidString.getter();
  unint64_t v14 = v13;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v15 = (uint64_t *)(a5 + 16);
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v32 = v18;
      uint64_t v34 = v12;
      uint64_t v19 = swift_slowAlloc();
      v36[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315906;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v21 = qword_100327BC8;
      unint64_t v20 = unk_100327BD0;
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_100135190(v21, v20, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_100135190(a3, a4, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_100135190(v34, v14, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 32) = 2080;
      uint64_t v37 = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v37 = sub_100135190(v22, v23, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v32, "%s - failed to %s (%s): %s", (uint8_t *)v19, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v12 = v34;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_beginAccess();
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v37 = *v15;
    *uint64_t v15 = 0x8000000000000000;
    sub_10022C0AC(a1, v12, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v15 = v37;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_errorRelease();
    unint64_t v30 = (void *)_convertErrorToNSError(_:)();
    if ((AAUnderTest.getter() & 1) == 0) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v33 = a3;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E778);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v25, v26))
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      unint64_t v30 = 0;
      if (AAUnderTest.getter()) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    uint64_t v35 = v12;
    uint64_t v27 = swift_slowAlloc();
    v36[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315650;
    if (qword_100320C50 != -1) {
      swift_once();
    }
    uint64_t v28 = qword_100327BC8;
    unint64_t v29 = unk_100327BD0;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_100135190(v28, v29, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_100135190(v33, a4, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_100135190(v35, v14, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s - successfully completed %s operation for %s", (uint8_t *)v27, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v30 = 0;
    if ((AAUnderTest.getter() & 1) == 0)
    {
LABEL_17:
      sub_1000800D0((uint64_t)_swiftEmptyArrayStorage);
      dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
      swift_bridgeObjectRelease();
    }
  }
LABEL_18:

  dispatch_group_leave(a7);
}

uint64_t sub_10012E68C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = sub_100009F04(&qword_1003229A8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  unint64_t v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [objc_allocWithZone((Class)AKCustodianContext) init];
  id v15 = [a2 aa_altDSID];
  [v14 setAltDSID:v15];

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v14 setCustodianUUID:isa];

  if ([v14 respondsToSelector:Selector.init(_:)()]) {
    [v14 setCustodianSyncAction:1];
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v5 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__idmsRequestController, v9);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  sub_100008EF8(v19, v19[3]);
  sub_10004DD28((uint64_t)v14, a3, a4);

  return sub_100008EA8((uint64_t)v19);
}

uint64_t sub_10012E894(void (*a1)(uint64_t), void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100328400);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v22[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for KeyRepairContext(0);
  id v14 = (int *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  unint64_t v17 = (char *)&v22[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v17, a3, v18);
  v17[v14[7]] = 0;
  v17[v14[8]] = 1;
  uint64_t v19 = &v17[v14[9]];
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a4 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__keyRepair, v8);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_100008EF8(v22, v22[3]);
  sub_100037B84((uint64_t)v17, a1, a2);
  sub_100134348((uint64_t)v17, type metadata accessor for KeyRepairContext);
  return sub_100008EA8((uint64_t)v22);
}

uint64_t sub_10012EA9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  uint64_t v11 = sub_100009F04(&qword_100321FF8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v22[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, (uint64_t)v5 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__custodianStorage, v11);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  sub_100008EF8(v22, v22[3]);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  unint64_t v17 = (void *)swift_allocObject();
  v17[2] = v16;
  v17[3] = a3;
  v17[4] = a4;
  void v17[5] = a2;
  v17[6] = v10;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_100134338;
  *(void *)(v18 + 24) = v17;
  swift_retain();
  swift_retain();
  id v19 = a2;
  swift_retain();
  sub_1002369EC(a1, (uint64_t)sub_100043AE8, v18);
  swift_release();
  swift_release();
  swift_release();
  return sub_100008EA8((uint64_t)v22);
}

void sub_10012ECC8(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  if (*(void *)(*(void *)(a1 + 16) + 16))
  {
    type metadata accessor for AAError(0);
    sub_100009F04((uint64_t *)&unk_10032E130);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v6;
    swift_beginAccess();
    uint64_t v7 = *v4;
    *(void *)(inited + 72) = sub_100009F04((uint64_t *)&unk_100321C80);
    *(void *)(inited + 48) = v7;
    swift_bridgeObjectRetain();
    sub_100220CAC(inited);
    sub_10000A740((unint64_t *)&qword_100321140, type metadata accessor for AAError);
    _BridgedStoredNSError.init(_:userInfo:)();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E778);
    id v9 = v20;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v19 = a2;
      uint64_t v12 = swift_slowAlloc();
      id v20 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v14 = qword_100327BC8;
      unint64_t v13 = unk_100327BD0;
      swift_bridgeObjectRetain();
      sub_100135190(v14, v13, (uint64_t *)&v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      id v15 = v9;
      uint64_t v16 = String.init<A>(describing:)();
      sub_100135190(v16, v17, (uint64_t *)&v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s - failed to handle requested custodian operations: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a2 = v19;
    }
    else
    {
    }
    id v18 = v9;
    a2(v9);
  }
  else
  {
    a2(0);
  }
}

void sub_10012F044(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, void *a5)
{
  uint64_t v40 = a4;
  uint64_t v41 = a3;
  uint64_t v7 = sub_100009F04(&qword_1003229A8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  os_log_type_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v12, v13);
  id v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v16, v17);
  id v19 = (uint64_t *)((char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v21 = Strong;
    sub_10011185C(a1, (uint64_t)v19);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = *v19;
      swift_errorRetain();
      v41(v22);
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      sub_1001343A8((uint64_t)v19, (uint64_t)v15, type metadata accessor for CustodianshipRecords);
      id v30 = [objc_allocWithZone((Class)AKCustodianContext) init];
      id v31 = [a5 aa_altDSID];
      [v30 setAltDSID:v31];

      type metadata accessor for CustodianRecoveryInfoRecord();
      swift_bridgeObjectRetain();
      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v30 setOwnerCustodianAltDSID:v32];

      uint64_t v33 = type metadata accessor for CustodianRecord();
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      [v30 setCustodianUUID:isa];

      Class v35 = 0;
      unint64_t v36 = &v15[*(int *)(v33 + 40)];
      unint64_t v37 = *((void *)v36 + 1);
      if (v37 >> 60 != 15)
      {
        uint64_t v38 = *(void *)v36;
        sub_100013140(*(void *)v36, *((void *)v36 + 1));
        Class v35 = Data._bridgeToObjectiveC()().super.isa;
        sub_1000196A0(v38, v37);
      }
      [v30 setWrappingKeyRKC:v35];

      if ([v30 respondsToSelector:Selector.init(_:)()]) {
        [v30 setCustodianSyncAction:1];
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v21 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__idmsRequestController, v7);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      sub_100008EF8(v42, v42[3]);
      sub_10004DB74((uint64_t)v30, (uint64_t)v41, v40);

      swift_release();
      sub_100134348((uint64_t)v15, type metadata accessor for CustodianshipRecords);
      sub_100008EA8((uint64_t)v42);
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E778);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      v42[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v26 = 136315138;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v27 = qword_100327BC8;
      unint64_t v28 = unk_100327BD0;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_100135190(v27, v28, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s - finalizeCustodian: self is no longer retained, nothing to do here", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v43 = -7000;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10000A740((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v29 = (void *)v42[0];
    v41(v42[0]);
  }
}

void sub_10012F66C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CustodianRecord();
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  uint64_t v13 = (char *)&v46 - v12;
  uint64_t v14 = *(void *)(a2 + *(int *)(v11 + 36));
  unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v16 = v14 - 1;
  uint64_t v17 = 80;
  if (v16) {
    uint64_t v17 = 0;
  }
  if (v15 == 2) {
    unint64_t v18 = 65;
  }
  else {
    unint64_t v18 = v17;
  }
  if (v16 > 2)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E778);
    sub_100133E88(a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    os_log_type_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v46 = v2;
      uint64_t v47 = v5;
      uint64_t v27 = swift_slowAlloc();
      v49[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      if (qword_100320C50 != -1) {
        swift_once();
      }
      uint64_t v29 = qword_100327BC8;
      unint64_t v28 = unk_100327BD0;
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_100135190(v29, v28, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      sub_100133E88((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v48 = sub_100135190(v30, v31, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100134348((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s - unable to get list version status for record:\n%s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100134348((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }
  }
  else
  {
    UUID.uuidString.getter();
    Swift::String v19 = String.lowercased()();
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_100211BA8(v19._countAndFlagsBits, (unint64_t)v19._object);
    uint64_t v22 = v20;
    unint64_t v23 = v21;
    switch(v21 >> 62)
    {
      case 1uLL:
        uint64_t v47 = v5;
        if (v20 >> 32 < (int)v20)
        {
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
        }
        sub_100013140(v20, v21);
        sub_1002565D4((int)v22, v22 >> 32);
        goto LABEL_22;
      case 2uLL:
        uint64_t v47 = v5;
        uint64_t v33 = *(void *)(v20 + 16);
        uint64_t v32 = *(void *)(v20 + 24);
        sub_100013140(v20, v21);
        swift_retain();
        swift_retain();
        sub_1002565D4(v33, v32);
        if (v2)
        {
          swift_release();
          swift_release();
          __break(1u);
LABEL_46:
          swift_release();
          swift_release();
          __break(1u);
LABEL_47:
          swift_release();
          swift_release();
          __break(1u);
          JUMPOUT(0x1001300A8);
        }
        uint64_t v3 = 0;
        swift_release();
        swift_release();
LABEL_22:
        sub_100013198(v22, v23);
        sub_100013198(v22, v23);
        uint64_t v5 = v47;
        goto LABEL_23;
      case 3uLL:
        type metadata accessor for SHA256();
        sub_10000A740((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
        memset(v49, 0, 14);
        goto LABEL_19;
      default:
        v49[0] = v20;
        LOWORD(v49[1]) = v21;
        BYTE2(v49[1]) = BYTE2(v21);
        BYTE3(v49[1]) = BYTE3(v21);
        BYTE4(v49[1]) = BYTE4(v21);
        BYTE5(v49[1]) = BYTE5(v21);
        type metadata accessor for SHA256();
        sub_10000A740((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
LABEL_19:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        sub_100013198(v22, v23);
        sub_100013198(v22, v23);
LABEL_23:
        uint64_t v34 = sub_100211BA8(v18, 0xE100000000000000);
        uint64_t v36 = v34;
        unint64_t v37 = v35;
        switch(v35 >> 62)
        {
          case 1uLL:
            if (v34 >> 32 < (int)v34) {
              goto LABEL_43;
            }
            sub_100013140(v34, v35);
            sub_1002565D4((int)v36, v36 >> 32);
            break;
          case 2uLL:
            uint64_t v38 = *(void *)(v34 + 16);
            uint64_t v39 = *(void *)(v34 + 24);
            sub_100013140(v34, v35);
            swift_retain();
            swift_retain();
            sub_1002565D4(v38, v39);
            if (v3) {
              goto LABEL_46;
            }
            uint64_t v3 = 0;
            swift_release();
            swift_release();
            break;
          case 3uLL:
            type metadata accessor for SHA256();
            sub_10000A740((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
            memset(v49, 0, 14);
            goto LABEL_28;
          default:
            v49[0] = v34;
            LOWORD(v49[1]) = v35;
            BYTE2(v49[1]) = BYTE2(v35);
            BYTE3(v49[1]) = BYTE3(v35);
            BYTE4(v49[1]) = BYTE4(v35);
            BYTE5(v49[1]) = BYTE5(v35);
            type metadata accessor for SHA256();
            sub_10000A740((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
LABEL_28:
            dispatch thunk of HashFunction.update(bufferPointer:)();
            break;
        }
        sub_100013198(v36, v37);
        sub_100013198(v36, v37);
        if (*(void *)(a2 + *(int *)(v5 + 40) + 8) >> 60 != 15)
        {
          uint64_t v40 = Data.base64EncodedData(options:)();
          uint64_t v42 = v40;
          unint64_t v43 = v41;
          switch(v41 >> 62)
          {
            case 1uLL:
              if (v40 >> 32 < (int)v40) {
                goto LABEL_44;
              }
              sub_100013140(v40, v41);
              sub_1002565D4((int)v42, v42 >> 32);
              break;
            case 2uLL:
              uint64_t v44 = *(void *)(v40 + 16);
              uint64_t v45 = *(void *)(v40 + 24);
              sub_100013140(v40, v41);
              swift_retain();
              swift_retain();
              sub_1002565D4(v44, v45);
              if (v3) {
                goto LABEL_47;
              }
              swift_release();
              swift_release();
              break;
            case 3uLL:
              type metadata accessor for SHA256();
              sub_10000A740((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
              memset(v49, 0, 14);
              goto LABEL_37;
            default:
              v49[0] = v40;
              LOWORD(v49[1]) = v41;
              BYTE2(v49[1]) = BYTE2(v41);
              BYTE3(v49[1]) = BYTE3(v41);
              BYTE4(v49[1]) = BYTE4(v41);
              BYTE5(v49[1]) = BYTE5(v41);
              type metadata accessor for SHA256();
              sub_10000A740((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
LABEL_37:
              dispatch thunk of HashFunction.update(bufferPointer:)();
              break;
          }
          sub_100013198(v42, v43);
          sub_100013198(v42, v43);
        }
        break;
    }
  }
}

uint64_t sub_1001300D8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(51);
  v8._object = (void *)0x800000010029D8C0;
  v8._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0xD000000000000019;
  v10._object = (void *)0x800000010029D8E0;
  String.append(_:)(v10);
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = a3;
  v11._object = a4;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1001301C0()
{
  return sub_1001300D8(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001301CC(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t sub_100130270(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t), uint64_t (*a4)(void *))
{
  uint64_t v7 = *(void *)(a2(0) - 8);
  uint64_t v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = a3(v8);
  }
  uint64_t v9 = *(void *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  uint64_t result = a4(v11);
  *a1 = v8;
  return result;
}

Swift::Int sub_100130334(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v160 = type metadata accessor for CustodianRecord();
  uint64_t v153 = *(void *)(v160 - 8);
  uint64_t v5 = __chkstk_darwin(v160, v4);
  uint64_t v148 = (uint64_t)&v141 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v161 = (uint64_t)&v141 - v9;
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v141 - v12;
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v17 = (char *)&v141 - v16;
  uint64_t v19 = __chkstk_darwin(v15, v18);
  uint64_t v151 = (uint64_t)&v141 - v20;
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v150 = (uint64_t)&v141 - v23;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v146 = (uint64_t)&v141 - v26;
  __chkstk_darwin(v25, v27);
  uint64_t v145 = (uint64_t)&v141 - v28;
  uint64_t v162 = a1;
  Swift::Int v29 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v29);
  if (result >= v29)
  {
    if (v29 < 0) {
      goto LABEL_155;
    }
    if (v29) {
      return sub_100131C24(0, v29, 1, v162);
    }
    return result;
  }
  if (v29 >= 0) {
    uint64_t v31 = v29;
  }
  else {
    uint64_t v31 = v29 + 1;
  }
  if (v29 < -1) {
    goto LABEL_163;
  }
  v154 = v17;
  Swift::Int v143 = result;
  if (v29 < 2)
  {
    unint64_t v35 = (char *)_swiftEmptyArrayStorage;
    unint64_t v152 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
    v142 = _swiftEmptyArrayStorage;
    if (v29 != 1)
    {
      unint64_t v37 = _swiftEmptyArrayStorage[2];
LABEL_121:
      if (v37 >= 2)
      {
        uint64_t v133 = *v162;
        do
        {
          unint64_t v134 = v37 - 2;
          if (v37 < 2) {
            goto LABEL_150;
          }
          if (!v133) {
            goto LABEL_162;
          }
          uint64_t v135 = v35;
          uint64_t v136 = v35 + 32;
          uint64_t v137 = *(void *)&v35[16 * v134 + 32];
          uint64_t v138 = *(void *)&v35[16 * v37 + 24];
          sub_1001322B0(v133 + *(void *)(v153 + 72) * v137, v133 + *(void *)(v153 + 72) * *(void *)&v136[16 * v37 - 16], v133 + *(void *)(v153 + 72) * v138, v152);
          if (v2) {
            break;
          }
          if (v138 < v137) {
            goto LABEL_151;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v135 = sub_100133210((uint64_t)v135);
          }
          if (v134 >= *((void *)v135 + 2)) {
            goto LABEL_152;
          }
          uint64_t v139 = &v135[16 * v134 + 32];
          *(void *)uint64_t v139 = v137;
          *((void *)v139 + 1) = v138;
          unint64_t v140 = *((void *)v135 + 2);
          if (v37 > v140) {
            goto LABEL_153;
          }
          unint64_t v35 = v135;
          memmove(&v135[16 * v37 + 16], &v135[16 * v37 + 32], 16 * (v140 - v37));
          *((void *)v135 + 2) = v140 - 1;
          unint64_t v37 = v140 - 1;
        }
        while (v140 > 2);
      }
LABEL_132:
      swift_bridgeObjectRelease();
      v142[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v32 = v31 >> 1;
    uint64_t v33 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v33 + 16) = v32;
    uint64_t v34 = *(unsigned __int8 *)(v153 + 80);
    v142 = (void *)v33;
    unint64_t v152 = v33 + ((v34 + 32) & ~v34);
  }
  Swift::Int v36 = 0;
  unint64_t v35 = (char *)_swiftEmptyArrayStorage;
  uint64_t v155 = v13;
  while (1)
  {
    Swift::Int v38 = v36;
    Swift::Int v39 = v36 + 1;
    Swift::Int v149 = v36;
    if (v36 + 1 >= v29)
    {
      Swift::Int v47 = v36 + 1;
    }
    else
    {
      Swift::Int v158 = v29;
      uint64_t v40 = *v162;
      Swift::Int v41 = *(void *)(v153 + 72);
      sub_100133E88(*v162 + v41 * v39, v145, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v147 = v40;
      Swift::Int v159 = v41;
      sub_100133E88(v40 + v41 * v38, v146, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v42 = UUID.uuidString.getter();
      uint64_t v44 = v43;
      if (v42 == UUID.uuidString.getter() && v44 == v45) {
        LODWORD(v157) = 0;
      }
      else {
        LODWORD(v157) = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      Swift::Int v29 = v158;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100134348(v146, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      sub_100134348(v145, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      Swift::Int v38 = v149;
      Swift::Int v47 = v149 + 2;
      if (v149 + 2 < v29)
      {
        uint64_t v144 = v35;
        Swift::Int v156 = v159 * v39;
        uint64_t v48 = v147;
        Swift::Int v49 = v159 * v47;
        while (1)
        {
          Swift::Int v50 = v47;
          sub_100133E88(v48 + v49, v150, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          sub_100133E88(v48 + v156, v151, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          uint64_t v51 = UUID.uuidString.getter();
          uint64_t v53 = v52;
          BOOL v55 = v51 == UUID.uuidString.getter() && v53 == v54;
          int v56 = v55 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100134348(v151, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          sub_100134348(v150, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          Swift::Int v29 = v158;
          if ((v157 ^ v56)) {
            break;
          }
          Swift::Int v47 = v50 + 1;
          v48 += v159;
          if (v158 == v50 + 1)
          {
            Swift::Int v47 = v158;
            unint64_t v35 = v144;
            uint64_t v13 = v155;
            goto LABEL_35;
          }
        }
        unint64_t v35 = v144;
        uint64_t v13 = v155;
        Swift::Int v47 = v50;
LABEL_35:
        Swift::Int v38 = v149;
      }
      uint64_t v57 = v147;
      if (v157)
      {
        if (v47 < v38) {
          goto LABEL_156;
        }
        if (v38 < v47)
        {
          uint64_t v144 = v35;
          uint64_t v58 = 0;
          uint64_t v59 = v159 * (v47 - 1);
          Swift::Int v60 = v47 * v159;
          Swift::Int v61 = v38;
          uint64_t v62 = v38 * v159;
          do
          {
            if (v61 != v47 + v58 - 1)
            {
              if (!v57) {
                goto LABEL_161;
              }
              uint64_t v157 = v57 + v59;
              sub_1001343A8(v57 + v62, v148, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
              if (v62 < v59 || v57 + v62 >= (unint64_t)(v57 + v60))
              {
                uint64_t v63 = v157;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v63 = v157;
                if (v62 != v59) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              sub_1001343A8(v148, v63, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
              uint64_t v57 = v147;
            }
            ++v61;
            --v58;
            v59 -= v159;
            v60 -= v159;
            v62 += v159;
          }
          while (v61 < v47 + v58);
          unint64_t v35 = v144;
          uint64_t v13 = v155;
          Swift::Int v38 = v149;
          Swift::Int v29 = v158;
        }
      }
    }
    if (v47 < v29)
    {
      if (__OFSUB__(v47, v38)) {
        goto LABEL_154;
      }
      if (v47 - v38 < v143) {
        break;
      }
    }
LABEL_73:
    if (v47 < v38) {
      goto LABEL_149;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v35 = sub_100132F14(0, *((void *)v35 + 2) + 1, 1, v35);
    }
    unint64_t v83 = *((void *)v35 + 2);
    unint64_t v82 = *((void *)v35 + 3);
    unint64_t v37 = v83 + 1;
    Swift::Int v159 = v47;
    if (v83 >= v82 >> 1) {
      unint64_t v35 = sub_100132F14((char *)(v82 > 1), v83 + 1, 1, v35);
    }
    *((void *)v35 + 2) = v37;
    uint64_t v84 = v35 + 32;
    uint64_t v85 = &v35[16 * v83 + 32];
    Swift::Int v86 = v159;
    *(void *)uint64_t v85 = v38;
    *((void *)v85 + 1) = v86;
    if (v83)
    {
      while (1)
      {
        unint64_t v87 = v37 - 1;
        if (v37 >= 4)
        {
          uint64_t v92 = &v84[16 * v37];
          uint64_t v93 = *((void *)v92 - 8);
          uint64_t v94 = *((void *)v92 - 7);
          BOOL v98 = __OFSUB__(v94, v93);
          uint64_t v95 = v94 - v93;
          if (v98) {
            goto LABEL_138;
          }
          uint64_t v97 = *((void *)v92 - 6);
          uint64_t v96 = *((void *)v92 - 5);
          BOOL v98 = __OFSUB__(v96, v97);
          uint64_t v90 = v96 - v97;
          char v91 = v98;
          if (v98) {
            goto LABEL_139;
          }
          unint64_t v99 = v37 - 2;
          id v100 = &v84[16 * v37 - 32];
          uint64_t v102 = *(void *)v100;
          uint64_t v101 = *((void *)v100 + 1);
          BOOL v98 = __OFSUB__(v101, v102);
          uint64_t v103 = v101 - v102;
          if (v98) {
            goto LABEL_141;
          }
          BOOL v98 = __OFADD__(v90, v103);
          uint64_t v104 = v90 + v103;
          if (v98) {
            goto LABEL_144;
          }
          if (v104 >= v95)
          {
            uint64_t v122 = &v84[16 * v87];
            uint64_t v124 = *(void *)v122;
            uint64_t v123 = *((void *)v122 + 1);
            BOOL v98 = __OFSUB__(v123, v124);
            uint64_t v125 = v123 - v124;
            if (v98) {
              goto LABEL_148;
            }
            BOOL v115 = v90 < v125;
            goto LABEL_110;
          }
        }
        else
        {
          if (v37 != 3)
          {
            uint64_t v116 = *((void *)v35 + 4);
            uint64_t v117 = *((void *)v35 + 5);
            BOOL v98 = __OFSUB__(v117, v116);
            uint64_t v109 = v117 - v116;
            char v110 = v98;
            goto LABEL_104;
          }
          uint64_t v89 = *((void *)v35 + 4);
          uint64_t v88 = *((void *)v35 + 5);
          BOOL v98 = __OFSUB__(v88, v89);
          uint64_t v90 = v88 - v89;
          char v91 = v98;
        }
        if (v91) {
          goto LABEL_140;
        }
        unint64_t v99 = v37 - 2;
        uint64_t v105 = &v84[16 * v37 - 32];
        uint64_t v107 = *(void *)v105;
        uint64_t v106 = *((void *)v105 + 1);
        BOOL v108 = __OFSUB__(v106, v107);
        uint64_t v109 = v106 - v107;
        char v110 = v108;
        if (v108) {
          goto LABEL_143;
        }
        uint64_t v111 = &v84[16 * v87];
        uint64_t v113 = *(void *)v111;
        uint64_t v112 = *((void *)v111 + 1);
        BOOL v98 = __OFSUB__(v112, v113);
        uint64_t v114 = v112 - v113;
        if (v98) {
          goto LABEL_146;
        }
        if (__OFADD__(v109, v114)) {
          goto LABEL_147;
        }
        if (v109 + v114 >= v90)
        {
          BOOL v115 = v90 < v114;
LABEL_110:
          if (v115) {
            unint64_t v87 = v99;
          }
          goto LABEL_112;
        }
LABEL_104:
        if (v110) {
          goto LABEL_142;
        }
        uint64_t v118 = &v84[16 * v87];
        uint64_t v120 = *(void *)v118;
        uint64_t v119 = *((void *)v118 + 1);
        BOOL v98 = __OFSUB__(v119, v120);
        uint64_t v121 = v119 - v120;
        if (v98) {
          goto LABEL_145;
        }
        if (v121 < v109) {
          goto LABEL_14;
        }
LABEL_112:
        unint64_t v126 = v87 - 1;
        if (v87 - 1 >= v37)
        {
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }
        if (!*v162) {
          goto LABEL_160;
        }
        uint64_t v127 = v35;
        int64_t v128 = &v84[16 * v126];
        uint64_t v129 = *(void *)v128;
        uint64_t v130 = &v84[16 * v87];
        uint64_t v131 = *((void *)v130 + 1);
        sub_1001322B0(*v162 + *(void *)(v153 + 72) * *(void *)v128, *v162 + *(void *)(v153 + 72) * *(void *)v130, *v162 + *(void *)(v153 + 72) * v131, v152);
        if (v2) {
          goto LABEL_132;
        }
        if (v131 < v129) {
          goto LABEL_135;
        }
        if (v87 > *((void *)v127 + 2)) {
          goto LABEL_136;
        }
        *(void *)int64_t v128 = v129;
        *(void *)&v84[16 * v126 + 8] = v131;
        unint64_t v132 = *((void *)v127 + 2);
        if (v87 >= v132) {
          goto LABEL_137;
        }
        unint64_t v35 = v127;
        unint64_t v37 = v132 - 1;
        memmove(&v84[16 * v87], v130 + 16, 16 * (v132 - 1 - v87));
        *((void *)v127 + 2) = v132 - 1;
        if (v132 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v37 = 1;
LABEL_14:
    Swift::Int v29 = v162[1];
    Swift::Int v36 = v159;
    uint64_t v13 = v155;
    if (v159 >= v29) {
      goto LABEL_121;
    }
  }
  if (__OFADD__(v38, v143)) {
    goto LABEL_157;
  }
  if (v38 + v143 >= v29) {
    Swift::Int v64 = v29;
  }
  else {
    Swift::Int v64 = v38 + v143;
  }
  if (v64 >= v38)
  {
    if (v47 != v64)
    {
      uint64_t v144 = v35;
      uint64_t v141 = v2;
      Swift::Int v65 = *(void *)(v153 + 72);
      uint64_t v66 = v65 * (v47 - 1);
      Swift::Int v156 = v65;
      Swift::Int v67 = v47 * v65;
      uint64_t v147 = v64;
      do
      {
        uint64_t v69 = 0;
        Swift::Int v70 = v38;
        Swift::Int v158 = v67;
        Swift::Int v159 = v47;
        uint64_t v157 = v66;
        while (1)
        {
          uint64_t v71 = *v162;
          uint64_t v72 = v67 + v69 + *v162;
          uint64_t v73 = (uint64_t)v154;
          sub_100133E88(v72, (uint64_t)v154, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          sub_100133E88(v66 + v69 + v71, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          uint64_t v74 = UUID.uuidString.getter();
          uint64_t v76 = v75;
          uint64_t v13 = v155;
          if (v74 == UUID.uuidString.getter() && v76 == v77) {
            break;
          }
          char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100134348((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          sub_100134348(v73, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          if ((v79 & 1) == 0) {
            goto LABEL_61;
          }
          uint64_t v80 = *v162;
          Swift::Int v67 = v158;
          if (!*v162) {
            goto LABEL_159;
          }
          uint64_t v66 = v157;
          uint64_t v81 = v80 + v157 + v69;
          sub_1001343A8(v80 + v158 + v69, v161, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          swift_arrayInitWithTakeFrontToBack();
          sub_1001343A8(v161, v81, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          v69 -= v156;
          ++v70;
          Swift::Int v68 = v159;
          if (v159 == v70) {
            goto LABEL_62;
          }
        }
        swift_bridgeObjectRelease_n();
        sub_100134348((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        sub_100134348(v73, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
LABEL_61:
        Swift::Int v67 = v158;
        Swift::Int v68 = v159;
        uint64_t v66 = v157;
LABEL_62:
        Swift::Int v47 = v68 + 1;
        v66 += v156;
        v67 += v156;
        Swift::Int v38 = v149;
      }
      while (v47 != v147);
      Swift::Int v47 = v147;
      uint64_t v2 = v141;
      unint64_t v35 = v144;
    }
    goto LABEL_73;
  }
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_100130FAC(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v155 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v4 = *(void *)(v155 - 8);
  uint64_t v6 = __chkstk_darwin(v155, v5);
  uint64_t v149 = (uint64_t)&v141 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v159 = (uint64_t)&v141 - v10;
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v161 = (uint64_t)&v141 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v160 = (uint64_t)&v141 - v16;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v152 = (uint64_t)&v141 - v19;
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v151 = (uint64_t)&v141 - v22;
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v147 = (uint64_t)&v141 - v25;
  __chkstk_darwin(v24, v26);
  uint64_t v146 = (uint64_t)&v141 - v27;
  uint64_t v162 = a1;
  Swift::Int v28 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v28);
  if (result >= v28)
  {
    if (v28 < 0) {
      goto LABEL_151;
    }
    if (v28) {
      return sub_100131F74(0, v28, 1, v162);
    }
    return result;
  }
  if (v28 >= 0) {
    uint64_t v30 = v28;
  }
  else {
    uint64_t v30 = v28 + 1;
  }
  if (v28 < -1) {
    goto LABEL_159;
  }
  uint64_t v154 = v4;
  Swift::Int v143 = result;
  if (v28 < 2)
  {
    uint64_t v34 = (char *)_swiftEmptyArrayStorage;
    unint64_t v153 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v142 = _swiftEmptyArrayStorage;
    if (v28 != 1)
    {
      unint64_t v36 = _swiftEmptyArrayStorage[2];
LABEL_117:
      unint64_t v134 = v34;
      if (v36 >= 2)
      {
        uint64_t v135 = *v162;
        do
        {
          unint64_t v136 = v36 - 2;
          if (v36 < 2) {
            goto LABEL_146;
          }
          if (!v135) {
            goto LABEL_158;
          }
          uint64_t v137 = *(void *)&v134[16 * v136 + 32];
          uint64_t v138 = *(void *)&v134[16 * v36 + 24];
          sub_1001328F4(v135 + *(void *)(v154 + 72) * v137, v135 + *(void *)(v154 + 72) * *(void *)&v134[16 * v36 + 16], v135 + *(void *)(v154 + 72) * v138, v153);
          if (v2) {
            break;
          }
          if (v138 < v137) {
            goto LABEL_147;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v134 = sub_100133210((uint64_t)v134);
          }
          if (v136 >= *((void *)v134 + 2)) {
            goto LABEL_148;
          }
          uint64_t v139 = &v134[16 * v136 + 32];
          *(void *)uint64_t v139 = v137;
          *((void *)v139 + 1) = v138;
          unint64_t v140 = *((void *)v134 + 2);
          if (v36 > v140) {
            goto LABEL_149;
          }
          memmove(&v134[16 * v36 + 16], &v134[16 * v36 + 32], 16 * (v140 - v36));
          *((void *)v134 + 2) = v140 - 1;
          unint64_t v36 = v140 - 1;
        }
        while (v140 > 2);
      }
LABEL_128:
      swift_bridgeObjectRelease();
      v142[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v31 = v30 >> 1;
    uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v32 + 16) = v31;
    uint64_t v33 = *(unsigned __int8 *)(v4 + 80);
    v142 = (void *)v32;
    unint64_t v153 = v32 + ((v33 + 32) & ~v33);
  }
  Swift::Int v35 = 0;
  uint64_t v34 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v37 = v35;
    Swift::Int v38 = v35 + 1;
    if (v35 + 1 >= v28)
    {
      Swift::Int v45 = v35 + 1;
      goto LABEL_68;
    }
    Swift::Int v158 = v28;
    uint64_t v145 = v2;
    uint64_t v39 = *v162;
    uint64_t v40 = *(void *)(v4 + 72);
    sub_100133E88(*v162 + v40 * v38, v146, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v156 = v39;
    sub_100133E88(v39 + v40 * v37, v147, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v41 = UUID.uuidString.getter();
    uint64_t v43 = v42;
    if (v41 != UUID.uuidString.getter()) {
      goto LABEL_20;
    }
    if (v43 == v44) {
      LODWORD(v157) = 0;
    }
    else {
LABEL_20:
    }
      LODWORD(v157) = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100134348(v147, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    sub_100134348(v146, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    Swift::Int v45 = v37 + 2;
    Swift::Int v46 = v158;
    if (v37 + 2 < v158) {
      break;
    }
LABEL_30:
    if ((v157 & 1) == 0) {
      goto LABEL_45;
    }
LABEL_33:
    if (v45 < v37) {
      goto LABEL_152;
    }
    if (v37 >= v45) {
      goto LABEL_45;
    }
    uint64_t v144 = v34;
    uint64_t v55 = 0;
    uint64_t v56 = v40 * (v45 - 1);
    Swift::Int v57 = v45 * v40;
    Swift::Int v58 = v37;
    uint64_t v150 = v37;
    uint64_t v59 = v37 * v40;
    uint64_t v60 = v156;
    do
    {
      if (v58 != v45 + v55 - 1)
      {
        if (!v60) {
          goto LABEL_157;
        }
        uint64_t v63 = v40;
        unint64_t v64 = v60 + v59;
        uint64_t v65 = v60;
        uint64_t v157 = v60 + v56;
        sub_1001343A8(v60 + v59, v149, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        if (v59 < v56 || v64 >= v65 + v57)
        {
          uint64_t v61 = v157;
          swift_arrayInitWithTakeFrontToBack();
          uint64_t v40 = v63;
          uint64_t v62 = v61;
        }
        else
        {
          uint64_t v40 = v63;
          uint64_t v62 = v157;
          if (v59 != v56) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        sub_1001343A8(v149, v62, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        uint64_t v60 = v156;
      }
      ++v58;
      --v55;
      v56 -= v40;
      v57 -= v40;
      v59 += v40;
    }
    while (v58 < v45 + v55);
    uint64_t v34 = v144;
    uint64_t v2 = v145;
    uint64_t v4 = v154;
    Swift::Int v37 = v150;
    Swift::Int v46 = v158;
    if (v45 < v158) {
      goto LABEL_48;
    }
LABEL_68:
    if (v45 < v37) {
      goto LABEL_145;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v158 = v45;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v34 = sub_100132F14(0, *((void *)v34 + 2) + 1, 1, v34);
    }
    unint64_t v83 = *((void *)v34 + 2);
    unint64_t v82 = *((void *)v34 + 3);
    unint64_t v36 = v83 + 1;
    uint64_t v84 = v2;
    if (v83 >= v82 >> 1) {
      uint64_t v34 = sub_100132F14((char *)(v82 > 1), v83 + 1, 1, v34);
    }
    *((void *)v34 + 2) = v36;
    uint64_t v85 = v34 + 32;
    Swift::Int v86 = &v34[16 * v83 + 32];
    Swift::Int v87 = v158;
    *(void *)Swift::Int v86 = v37;
    *((void *)v86 + 1) = v87;
    if (v83)
    {
      while (1)
      {
        unint64_t v88 = v36 - 1;
        if (v36 >= 4)
        {
          uint64_t v93 = &v85[16 * v36];
          uint64_t v94 = *((void *)v93 - 8);
          uint64_t v95 = *((void *)v93 - 7);
          BOOL v99 = __OFSUB__(v95, v94);
          uint64_t v96 = v95 - v94;
          if (v99) {
            goto LABEL_134;
          }
          uint64_t v98 = *((void *)v93 - 6);
          uint64_t v97 = *((void *)v93 - 5);
          BOOL v99 = __OFSUB__(v97, v98);
          uint64_t v91 = v97 - v98;
          char v92 = v99;
          if (v99) {
            goto LABEL_135;
          }
          unint64_t v100 = v36 - 2;
          uint64_t v101 = &v85[16 * v36 - 32];
          uint64_t v103 = *(void *)v101;
          uint64_t v102 = *((void *)v101 + 1);
          BOOL v99 = __OFSUB__(v102, v103);
          uint64_t v104 = v102 - v103;
          if (v99) {
            goto LABEL_137;
          }
          BOOL v99 = __OFADD__(v91, v104);
          uint64_t v105 = v91 + v104;
          if (v99) {
            goto LABEL_140;
          }
          if (v105 >= v96)
          {
            uint64_t v123 = &v85[16 * v88];
            uint64_t v125 = *(void *)v123;
            uint64_t v124 = *((void *)v123 + 1);
            BOOL v99 = __OFSUB__(v124, v125);
            uint64_t v126 = v124 - v125;
            if (v99) {
              goto LABEL_144;
            }
            BOOL v116 = v91 < v126;
            goto LABEL_105;
          }
        }
        else
        {
          if (v36 != 3)
          {
            uint64_t v117 = *((void *)v34 + 4);
            uint64_t v118 = *((void *)v34 + 5);
            BOOL v99 = __OFSUB__(v118, v117);
            uint64_t v110 = v118 - v117;
            char v111 = v99;
            goto LABEL_99;
          }
          uint64_t v90 = *((void *)v34 + 4);
          uint64_t v89 = *((void *)v34 + 5);
          BOOL v99 = __OFSUB__(v89, v90);
          uint64_t v91 = v89 - v90;
          char v92 = v99;
        }
        if (v92) {
          goto LABEL_136;
        }
        unint64_t v100 = v36 - 2;
        uint64_t v106 = &v85[16 * v36 - 32];
        uint64_t v108 = *(void *)v106;
        uint64_t v107 = *((void *)v106 + 1);
        BOOL v109 = __OFSUB__(v107, v108);
        uint64_t v110 = v107 - v108;
        char v111 = v109;
        if (v109) {
          goto LABEL_139;
        }
        uint64_t v112 = &v85[16 * v88];
        uint64_t v114 = *(void *)v112;
        uint64_t v113 = *((void *)v112 + 1);
        BOOL v99 = __OFSUB__(v113, v114);
        uint64_t v115 = v113 - v114;
        if (v99) {
          goto LABEL_142;
        }
        if (__OFADD__(v110, v115)) {
          goto LABEL_143;
        }
        if (v110 + v115 >= v91)
        {
          BOOL v116 = v91 < v115;
LABEL_105:
          if (v116) {
            unint64_t v88 = v100;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v111) {
          goto LABEL_138;
        }
        uint64_t v119 = &v85[16 * v88];
        uint64_t v121 = *(void *)v119;
        uint64_t v120 = *((void *)v119 + 1);
        BOOL v99 = __OFSUB__(v120, v121);
        uint64_t v122 = v120 - v121;
        if (v99) {
          goto LABEL_141;
        }
        if (v122 < v110) {
          goto LABEL_14;
        }
LABEL_107:
        unint64_t v127 = v88 - 1;
        if (v88 - 1 >= v36)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!*v162) {
          goto LABEL_156;
        }
        int64_t v128 = v34;
        uint64_t v129 = &v85[16 * v127];
        uint64_t v130 = *(void *)v129;
        uint64_t v131 = &v85[16 * v88];
        uint64_t v132 = *((void *)v131 + 1);
        sub_1001328F4(*v162 + *(void *)(v154 + 72) * *(void *)v129, *v162 + *(void *)(v154 + 72) * *(void *)v131, *v162 + *(void *)(v154 + 72) * v132, v153);
        if (v84) {
          goto LABEL_128;
        }
        if (v132 < v130) {
          goto LABEL_131;
        }
        if (v88 > *((void *)v128 + 2)) {
          goto LABEL_132;
        }
        *(void *)uint64_t v129 = v130;
        *(void *)&v85[16 * v127 + 8] = v132;
        unint64_t v133 = *((void *)v128 + 2);
        if (v88 >= v133) {
          goto LABEL_133;
        }
        uint64_t v34 = v128;
        unint64_t v36 = v133 - 1;
        memmove(&v85[16 * v88], v131 + 16, 16 * (v133 - 1 - v88));
        *((void *)v128 + 2) = v133 - 1;
        if (v133 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v36 = 1;
LABEL_14:
    Swift::Int v28 = v162[1];
    Swift::Int v35 = v158;
    uint64_t v2 = v84;
    uint64_t v4 = v154;
    if (v158 >= v28) {
      goto LABEL_117;
    }
  }
  uint64_t v150 = v37;
  uint64_t v144 = v34;
  uint64_t v47 = v40 * v38;
  uint64_t v48 = v156;
  uint64_t v49 = v40 * v45;
  while (1)
  {
    sub_100133E88(v48 + v49, v151, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    sub_100133E88(v48 + v47, v152, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v50 = UUID.uuidString.getter();
    uint64_t v52 = v51;
    if (v50 == UUID.uuidString.getter() && v52 == v53) {
      int v54 = 0;
    }
    else {
      int v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100134348(v152, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    sub_100134348(v151, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    if ((v157 ^ v54)) {
      break;
    }
    ++v45;
    v48 += v40;
    Swift::Int v46 = v158;
    if (v158 == v45)
    {
      Swift::Int v45 = v158;
      uint64_t v4 = v154;
      uint64_t v34 = v144;
      Swift::Int v37 = v150;
      goto LABEL_30;
    }
  }
  uint64_t v4 = v154;
  uint64_t v34 = v144;
  Swift::Int v37 = v150;
  Swift::Int v46 = v158;
  if (v157) {
    goto LABEL_33;
  }
LABEL_45:
  uint64_t v2 = v145;
  if (v45 >= v46) {
    goto LABEL_68;
  }
LABEL_48:
  if (__OFSUB__(v45, v37)) {
    goto LABEL_150;
  }
  if (v45 - v37 >= v143) {
    goto LABEL_68;
  }
  if (__OFADD__(v37, v143)) {
    goto LABEL_153;
  }
  if (v37 + v143 >= v46) {
    Swift::Int v66 = v46;
  }
  else {
    Swift::Int v66 = v37 + v143;
  }
  if (v66 >= v37)
  {
    if (v45 != v66)
    {
      uint64_t v150 = v37;
      uint64_t v144 = v34;
      uint64_t v145 = v2;
      uint64_t v67 = *(void *)(v4 + 72);
      uint64_t v68 = v67 * (v45 - 1);
      uint64_t v156 = v67;
      uint64_t v69 = v45 * v67;
      Swift::Int v148 = v66;
      do
      {
        uint64_t v71 = 0;
        uint64_t v72 = v150;
        uint64_t v157 = v69;
        Swift::Int v158 = v45;
        while (1)
        {
          uint64_t v73 = *v162;
          sub_100133E88(v69 + v71 + *v162, v160, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          sub_100133E88(v68 + v71 + v73, v161, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          uint64_t v74 = UUID.uuidString.getter();
          uint64_t v76 = v75;
          if (v74 == UUID.uuidString.getter() && v76 == v77) {
            break;
          }
          char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100134348(v161, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          sub_100134348(v160, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          if ((v78 & 1) == 0) {
            goto LABEL_58;
          }
          uint64_t v79 = *v162;
          if (!*v162) {
            goto LABEL_155;
          }
          uint64_t v69 = v157;
          uint64_t v80 = v79 + v68 + v71;
          sub_1001343A8(v79 + v157 + v71, v159, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          swift_arrayInitWithTakeFrontToBack();
          sub_1001343A8(v159, v80, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          v71 -= v156;
          ++v72;
          Swift::Int v70 = v158;
          if (v158 == v72) {
            goto LABEL_59;
          }
        }
        swift_bridgeObjectRelease_n();
        sub_100134348(v161, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        sub_100134348(v160, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
LABEL_58:
        uint64_t v69 = v157;
        Swift::Int v70 = v158;
LABEL_59:
        Swift::Int v45 = v70 + 1;
        v68 += v156;
        v69 += v156;
      }
      while (v45 != v148);
      Swift::Int v45 = v148;
      uint64_t v34 = v144;
      uint64_t v2 = v145;
      Swift::Int v37 = v150;
    }
    goto LABEL_68;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100131C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v40 = a4;
  uint64_t v33 = a1;
  uint64_t v37 = type metadata accessor for CustodianRecord();
  uint64_t v7 = __chkstk_darwin(v37, v6);
  uint64_t v38 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t result = __chkstk_darwin(v10, v13);
  uint64_t v17 = (char *)&v31 - v16;
  uint64_t v36 = a3;
  uint64_t v32 = a2;
  if (a3 != a2)
  {
    uint64_t v18 = *(void *)(v15 + 72);
    uint64_t v19 = v18 * (v36 - 1);
    uint64_t v34 = v18;
    uint64_t v41 = v18 * v36;
LABEL_6:
    uint64_t v20 = 0;
    uint64_t v21 = v33;
    uint64_t v35 = v19;
    while (1)
    {
      uint64_t v22 = *v40;
      uint64_t v39 = v41 + v20;
      sub_100133E88(v41 + v20 + v22, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      sub_100133E88(v19 + v20 + v22, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v23 = UUID.uuidString.getter();
      uint64_t v25 = v24;
      if (v23 == UUID.uuidString.getter() && v25 == v26)
      {
        swift_bridgeObjectRelease_n();
        sub_100134348((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        uint64_t result = sub_100134348((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        uint64_t v19 = v35;
LABEL_5:
        v19 += v34;
        v41 += v34;
        if (++v36 == v32) {
          return result;
        }
        goto LABEL_6;
      }
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100134348((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t result = sub_100134348((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v19 = v35;
      if ((v28 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v29 = *v40;
      if (!*v40) {
        break;
      }
      uint64_t v30 = v29 + v35 + v20;
      sub_1001343A8(v29 + v41 + v20, v38, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1001343A8(v38, v30, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      v20 -= v34;
      if (v36 == ++v21) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100131F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v36 = a4;
  uint64_t v31 = a1;
  uint64_t v32 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v7 = __chkstk_darwin(v32, v6);
  uint64_t v35 = (uint64_t)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t result = __chkstk_darwin(v10, v13);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v34 = a3;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v18 = *(void *)(v15 + 72);
    uint64_t v38 = v18 * (v34 - 1);
    uint64_t v33 = v18;
    uint64_t v37 = v18 * v34;
LABEL_6:
    uint64_t v19 = 0;
    uint64_t v20 = v31;
    while (1)
    {
      uint64_t v21 = *v36;
      sub_100133E88(v37 + v19 + *v36, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      sub_100133E88(v38 + v19 + v21, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      uint64_t v22 = UUID.uuidString.getter();
      uint64_t v24 = v23;
      if (v22 == UUID.uuidString.getter() && v24 == v25)
      {
        swift_bridgeObjectRelease_n();
        sub_100134348((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        uint64_t result = sub_100134348((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
LABEL_5:
        v38 += v33;
        v37 += v33;
        if (++v34 == v30) {
          return result;
        }
        goto LABEL_6;
      }
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100134348((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      uint64_t result = sub_100134348((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      if ((v26 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v27 = *v36;
      if (!*v36) {
        break;
      }
      uint64_t v28 = v27 + v38 + v19;
      sub_1001343A8(v27 + v37 + v19, v35, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1001343A8(v35, v28, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      v19 -= v33;
      if (v34 == ++v20) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001322B0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v57 = type metadata accessor for CustodianRecord();
  uint64_t v9 = __chkstk_darwin(v57, v8);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  unint64_t v56 = (unint64_t)&v53 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v53 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v53 - v20;
  uint64_t v23 = *(void *)(v22 + 72);
  if (!v23)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  if (a2 - a1 == 0x8000000000000000 && v23 == -1) {
    goto LABEL_72;
  }
  int64_t v24 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v23 == -1) {
    goto LABEL_73;
  }
  uint64_t v25 = (uint64_t)(a2 - a1) / v23;
  unint64_t v60 = a1;
  unint64_t v59 = a4;
  uint64_t v26 = v24 / v23;
  if (v25 >= v24 / v23)
  {
    if ((v26 & 0x8000000000000000) == 0)
    {
      uint64_t v28 = v26 * v23;
      if (a4 < a2 || a2 + v28 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v39 = a4 + v28;
      unint64_t v58 = a4 + v28;
      unint64_t v60 = a2;
      unint64_t v55 = a1;
      if (v28 >= 1 && a1 < a2)
      {
        uint64_t v41 = -v23;
        unint64_t v54 = a4;
        do
        {
          unint64_t v42 = a3;
          sub_100133E88(v39 + v41, v56, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          unint64_t v43 = a2 + v41;
          sub_100133E88(a2 + v41, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          uint64_t v44 = UUID.uuidString.getter();
          uint64_t v46 = v45;
          if (v44 == UUID.uuidString.getter() && v46 == v47) {
            char v49 = 0;
          }
          else {
            char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a3 += v41;
          sub_100134348((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          sub_100134348(v56, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          if (v49)
          {
            if (v42 < a2 || a3 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v50 = v54;
            }
            else
            {
              BOOL v34 = v42 == a2;
              unint64_t v50 = v54;
              if (!v34) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v60 += v41;
          }
          else
          {
            unint64_t v51 = v58;
            v58 += v41;
            if (v42 < v51 || a3 >= v51)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v42 != v51)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v43 = a2;
            unint64_t v50 = v54;
          }
          unint64_t v39 = v58;
          if (v58 <= v50) {
            break;
          }
          a2 = v43;
        }
        while (v43 > v55);
      }
LABEL_70:
      sub_1001330CC(&v60, &v59, (uint64_t *)&v58, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      return 1;
    }
  }
  else if ((v25 & 0x8000000000000000) == 0)
  {
    uint64_t v27 = v25 * v23;
    if (a4 < a1 || a1 + v27 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v56 = a4 + v27;
    unint64_t v58 = a4 + v27;
    if (v27 >= 1 && a2 < a3)
    {
      while (1)
      {
        sub_100133E88(a2, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        sub_100133E88(a4, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        uint64_t v30 = UUID.uuidString.getter();
        uint64_t v32 = v31;
        BOOL v34 = v30 == UUID.uuidString.getter() && v32 == v33;
        if (v34) {
          break;
        }
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100134348((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        sub_100134348((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        if ((v35 & 1) == 0) {
          goto LABEL_32;
        }
        unint64_t v36 = v60;
        unint64_t v37 = a2 + v23;
        if (v60 < a2 || v60 >= v37)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v60 == a2)
        {
          unint64_t v36 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
LABEL_38:
        unint64_t v60 = v36 + v23;
        a4 = v59;
        if (v59 < v56)
        {
          a2 = v37;
          if (v37 < a3) {
            continue;
          }
        }
        goto LABEL_70;
      }
      swift_bridgeObjectRelease_n();
      sub_100134348((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      sub_100134348((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
LABEL_32:
      unint64_t v36 = v60;
      unint64_t v38 = v59 + v23;
      if (v60 < v59 || v60 >= v38)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v60 != v59)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v59 = v38;
      unint64_t v37 = a2;
      goto LABEL_38;
    }
    goto LABEL_70;
  }
LABEL_74:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001328F4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v53 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v9 = __chkstk_darwin(v53, v8);
  uint64_t v55 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v54 = (uint64_t)&v51 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v51 - v16;
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v51 - v19;
  uint64_t v22 = *(void *)(v21 + 72);
  if (!v22)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v22 == -1) {
    goto LABEL_68;
  }
  int64_t v23 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v22 == -1) {
    goto LABEL_69;
  }
  uint64_t v24 = (uint64_t)(a2 - a1) / v22;
  unint64_t v58 = a1;
  unint64_t v57 = a4;
  uint64_t v25 = v23 / v22;
  if (v24 >= v23 / v22)
  {
    if ((v25 & 0x8000000000000000) == 0)
    {
      uint64_t v27 = v25 * v22;
      if (a4 < a2 || a2 + v27 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v38 = a4 + v27;
      unint64_t v56 = a4 + v27;
      unint64_t v58 = a2;
      unint64_t v52 = a1;
      if (v27 >= 1 && a1 < a2)
      {
        uint64_t v40 = -v22;
        uint64_t v41 = v55;
        do
        {
          sub_100133E88(v38 + v40, v54, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          unint64_t v42 = a2 + v40;
          sub_100133E88(a2 + v40, v41, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          uint64_t v43 = UUID.uuidString.getter();
          uint64_t v45 = v44;
          if (v43 == UUID.uuidString.getter() && v45 == v46) {
            char v47 = 0;
          }
          else {
            char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v48 = a3 + v40;
          sub_100134348(v55, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          sub_100134348(v54, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          if (v47)
          {
            if (a3 < a2 || v48 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v58 += v40;
          }
          else
          {
            unint64_t v49 = v56;
            v56 += v40;
            if (a3 < v49 || v48 >= v49)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v49)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v42 = a2;
          }
          unint64_t v38 = v56;
          if (v56 <= a4) {
            break;
          }
          a2 = v42;
          a3 += v40;
        }
        while (v42 > v52);
      }
LABEL_66:
      sub_1001330CC(&v58, &v57, (uint64_t *)&v56, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      return 1;
    }
  }
  else if ((v24 & 0x8000000000000000) == 0)
  {
    uint64_t v26 = v24 * v22;
    if (a4 < a1 || a1 + v26 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v28 = a4 + v26;
    unint64_t v56 = a4 + v26;
    if (v26 >= 1 && a2 < a3)
    {
      while (1)
      {
        sub_100133E88(a2, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        sub_100133E88(a4, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        uint64_t v30 = UUID.uuidString.getter();
        uint64_t v32 = v31;
        if (v30 == UUID.uuidString.getter() && v32 == v33) {
          break;
        }
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100134348((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        sub_100134348((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        if ((v34 & 1) == 0) {
          goto LABEL_30;
        }
        unint64_t v35 = v58;
        unint64_t v36 = a2 + v22;
        if (v58 < a2 || v58 >= v36)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v58 == a2)
        {
          unint64_t v35 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
LABEL_36:
        unint64_t v58 = v35 + v22;
        a4 = v57;
        if (v57 < v28)
        {
          a2 = v36;
          if (v36 < a3) {
            continue;
          }
        }
        goto LABEL_66;
      }
      swift_bridgeObjectRelease_n();
      sub_100134348((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      sub_100134348((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
LABEL_30:
      unint64_t v35 = v58;
      unint64_t v37 = v57 + v22;
      if (v58 < v57 || v58 >= v37)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v58 != v57)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v57 = v37;
      unint64_t v36 = a2;
      goto LABEL_36;
    }
    goto LABEL_66;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100132F14(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100009F04(&qword_100327D18);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100133010(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

uint64_t sub_1001330CC(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_100133210(uint64_t a1)
{
  return sub_100132F14(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100133224(uint64_t a1)
{
  return sub_100228D24(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100133238(void *a1)
{
  return sub_10022901C(0, a1[2], 0, a1);
}

uint64_t sub_10013324C(void *a1)
{
  return sub_10022919C(0, a1[2], 0, a1);
}

uint64_t sub_100133260()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10013329C(uint64_t a1, uint64_t a2, char a3)
{
  sub_10012814C(a1, a2, a3 & 1, *(void *)(v3 + 16), *(void (**)(id))(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40));
}

uint64_t sub_1001332AC()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001332E4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100133320(uint64_t a1, char a2)
{
}

void sub_100133330(uint64_t a1, char a2)
{
}

void sub_10013333C(uint64_t a1, char a2, char *a3)
{
  sub_10012B874(a1, a2 & 1, *(NSObject **)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), a3);
}

uint64_t sub_100133364()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001333B4()
{
  return sub_10012BAA8(*(void *)(v0 + 16), *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1001333C4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100133410(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustodianRecord();
  uint64_t v27 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  unint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SHA256();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  int64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v15 = type metadata accessor for SHA256Digest();
  uint64_t v28 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a1;
  swift_bridgeObjectRetain_n();
  sub_100130270(&v29, (uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t))sub_100133238, sub_100130334);
  swift_bridgeObjectRelease();
  uint64_t v19 = v29;
  SHA256.init()();
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    uint64_t v25 = v15;
    uint64_t v26 = v6;
    uint64_t v21 = v19 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    uint64_t v22 = *(void *)(v27 + 72);
    swift_retain();
    do
    {
      sub_100133E88(v21, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      sub_10012F66C((uint64_t)v11, (uint64_t)v5);
      sub_100134348((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      v21 += v22;
      --v20;
    }
    while (v20);
    swift_release();
    uint64_t v15 = v25;
    uint64_t v6 = v26;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v11, v6);
  swift_release();
  SHA256.finalize()();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  uint64_t v23 = sub_100127EEC();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v15);
  return v23;
}

uint64_t sub_1001337A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v4);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SHA256();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)v34 - v14;
  uint64_t v16 = type metadata accessor for SHA256Digest();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  unint64_t v39 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[0] = a1;
  swift_bridgeObjectRetain_n();
  sub_100130270(v43, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t))sub_10013324C, sub_100130FAC);
  swift_bridgeObjectRelease();
  uint64_t v20 = v43[0];
  unint64_t v42 = v12;
  SHA256.init()();
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    unint64_t v35 = v15;
    uint64_t v36 = v17;
    uint64_t v37 = v16;
    uint64_t v38 = v8;
    uint64_t v22 = v20 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v23 = *(void *)(v3 + 72);
    v34[1] = v20;
    swift_retain();
    uint64_t v40 = v7;
    uint64_t v41 = v23;
    while (2)
    {
      sub_100133E88(v22, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      UUID.uuidString.getter();
      Swift::String v24 = String.lowercased()();
      swift_bridgeObjectRelease();
      uint64_t v25 = sub_100211BA8(v24._countAndFlagsBits, (unint64_t)v24._object);
      uint64_t v27 = v25;
      unint64_t v28 = v26;
      switch(v26 >> 62)
      {
        case 1uLL:
          if (v25 >> 32 < (int)v25)
          {
            __break(1u);
LABEL_20:
            __break(1u);
LABEL_21:
            __break(1u);
LABEL_22:
            __break(1u);
          }
          if (__DataStorage._bytes.getter() && __OFSUB__((int)v27, __DataStorage._offset.getter())) {
            goto LABEL_22;
          }
          __DataStorage._length.getter();
          sub_10000A740((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
          dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_16:
          sub_100013198(v27, v28);
          uint64_t v23 = v41;
LABEL_5:
          sub_100134348((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          v22 += v23;
          if (--v21) {
            continue;
          }
          swift_release();
          uint64_t v16 = v37;
          uint64_t v8 = v38;
          uint64_t v15 = v35;
          uint64_t v17 = v36;
          break;
        case 2uLL:
          uint64_t v30 = *(void *)(v25 + 16);
          uint64_t v29 = *(void *)(v25 + 24);
          swift_retain();
          swift_retain();
          if (__DataStorage._bytes.getter() && __OFSUB__(v30, __DataStorage._offset.getter())) {
            goto LABEL_21;
          }
          if (__OFSUB__(v29, v30)) {
            goto LABEL_20;
          }
          __DataStorage._length.getter();
          sub_10000A740((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
          uint64_t v7 = v40;
          dispatch thunk of HashFunction.update(bufferPointer:)();
          swift_release();
          swift_release();
          goto LABEL_16;
        case 3uLL:
          sub_10000A740((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
          memset(v43, 0, 14);
          goto LABEL_4;
        default:
          v43[0] = v25;
          LOWORD(v43[1]) = v26;
          BYTE2(v43[1]) = BYTE2(v26);
          BYTE3(v43[1]) = BYTE3(v26);
          BYTE4(v43[1]) = BYTE4(v26);
          BYTE5(v43[1]) = BYTE5(v26);
          sub_10000A740((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
LABEL_4:
          dispatch thunk of HashFunction.update(bufferPointer:)();
          sub_100013198(v27, v28);
          sub_100013198(v27, v28);
          goto LABEL_5;
      }
      break;
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v42, v7);
  swift_release();
  uint64_t v31 = v39;
  SHA256.finalize()();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  uint64_t v32 = sub_100127EEC();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v31, v16);
  return v32;
}

uint64_t sub_100133E44()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100133E7C(uint64_t a1)
{
  return sub_100128F00(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100133E88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100133EF0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

void sub_100133F48(uint64_t a1)
{
  sub_10012BB9C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void (**)(void))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t sub_100133F80()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100133FB8(void *a1, uint64_t a2)
{
  return sub_10004F8C0(a1, a2, *(void (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_100133FC0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100133FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7)
  {
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100134070()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1001340B0()
{
  sub_10012ECC8(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_1001340BC(uint64_t a1, uint64_t a2)
{
  return sub_1001340F4(a1, a2, (uint64_t (*)(void, void, uint64_t, uint64_t))sub_10012EA9C);
}

uint64_t sub_1001340D4(void (*a1)(uint64_t), void (*a2)(uint64_t))
{
  return sub_10012E894(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001340DC(uint64_t a1, uint64_t a2)
{
  return sub_1001340F4(a1, a2, (uint64_t (*)(void, void, uint64_t, uint64_t))sub_10012E68C);
}

uint64_t sub_1001340F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, uint64_t, uint64_t))
{
  return a3(*(void *)(v3 + 24), *(void *)(v3 + 32), a1, a2);
}

uint64_t sub_100134130()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_100134220(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v1 + v5);
  unint64_t v9 = *(void *)(v1 + v5 + 8);
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + v7);
  uint64_t v12 = *(NSObject **)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_10012DFF0(a1, v1 + v4, v8, v9, v10, v11, v12);
}

uint64_t sub_1001342F0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100134338(uint64_t a1)
{
  sub_10012F044(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100134348(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001343A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for TrustedContactsDataSync.ListVersion()
{
  return &type metadata for TrustedContactsDataSync.ListVersion;
}

id sub_10013443C(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)AAFTapToRadarRequest) init];
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setAlertTitle:v3];

  NSString v4 = String._bridgeToObjectiveC()();
  [v2 setAlertDefaultButtonText:v4];

  NSString v5 = String._bridgeToObjectiveC()();
  [v2 setAlertCancelButtonText:v5];

  NSString v6 = String._bridgeToObjectiveC()();
  [v2 setComponentName:v6];

  NSString v7 = String._bridgeToObjectiveC()();
  [v2 setComponentVersion:v7];

  NSString v8 = String._bridgeToObjectiveC()();
  [v2 setComponentID:v8];

  NSString v9 = String._bridgeToObjectiveC()();
  [v2 setAlertMessage:v9];

  NSString v10 = String._bridgeToObjectiveC()();
  [v2 setRadarTitle:v10];

  NSString v11 = String._bridgeToObjectiveC()();
  [v2 setRadarDescription:v11];

  sub_10000850C(0, (unint64_t *)&qword_100324670);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v2 setKeywordIDs:isa];

  [v2 setFullDiagnostic:*(unsigned __int8 *)(a1 + 56)];
  return v2;
}

uint64_t sub_100134620()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd27TapToRadarRequestController__helper;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100328460);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1001346C0()
{
  sub_100134620();

  return swift_deallocClassInstance();
}

uint64_t sub_100134718()
{
  return type metadata accessor for TapToRadarRequestController();
}

uint64_t type metadata accessor for TapToRadarRequestController()
{
  uint64_t result = qword_100327D60;
  if (!qword_100327D60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10013476C()
{
  sub_100134814();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100134814()
{
  if (!qword_100327D70)
  {
    sub_10000850C(255, (unint64_t *)&unk_10032F8D0);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100327D70);
    }
  }
}

void *sub_10013487C()
{
  v0[2] = 0xD000000000000021;
  v0[3] = 0x800000010029DAF0;
  v0[4] = 0x6E4F6576694CLL;
  v0[5] = 0xE600000000000000;
  v0[6] = 0x36323037383231;
  v0[7] = 0xE700000000000000;
  v0[8] = 0xD000000000000013;
  v0[9] = 0x800000010029DB20;
  v0[10] = 0x65756E69746E6F43;
  v0[11] = 0xE800000000000000;
  v0[12] = 0x6C65636E6143;
  v0[13] = 0xE600000000000000;
  v0[14] = 0x73412074276E6F44;
  v0[15] = 0xEF6E69616741206BLL;
  sub_10000850C(0, (unint64_t *)&unk_10032F8D0);
  Dependency.init(dependencyId:config:)();
  return v0;
}

uint64_t AAUnderTest.getter()
{
  uint64_t v0 = (uint64_t)[self isInternalBuild];
  uint64_t v1 = self;
  id v2 = [v1 processInfo];
  id v3 = [v2 environment];

  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v4 + 16))
  {
    sub_1001358B8(0xD00000000000001BLL, 0x800000010029DB40);
    if (v5) {
      swift_bridgeObjectRetain();
    }
  }
  swift_bridgeObjectRelease();
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E700);
  NSString v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    NSString v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)NSString v9 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "internalBuild: %{BOOL}d", v9, 8u);
    swift_slowDealloc();
  }

  swift_bridgeObjectRetain();
  NSString v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Is XCTestConfigurationFilePath nil: %{BOOL}d", v12, 8u);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_bridgeObjectRetain();
    sub_100009F04(&qword_100321678);
    uint64_t v16 = String.init<A>(describing:)();
    sub_100135190(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ProcessInfo.processInfo.environment[XCTestConfigurationFilePath]: %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!v0) {
      return v0;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (!v0) {
      return v0;
    }
  }
  id v18 = [v1 processInfo];
  id v19 = [v18 environment];

  uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v20 + 16) && (sub_1001358B8(0xD00000000000001BLL, 0x800000010029DB40), (v21 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    uint64_t v0 = 1;
  }
  else
  {
    uint64_t v0 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100134E2C()
{
  qword_100327E68 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");

  return swift_unknownObjectRetain();
}

os_activity_t _AADActivityCreate(_:dso:)(char *description, int a2, char a3, void *dso)
{
  if ((a3 & 1) == 0)
  {
    if (description)
    {
      if (dso)
      {
        if (qword_100320C58 == -1)
        {
LABEL_5:
          uint64_t v6 = qword_100327E68;
          return _os_activity_create(dso, description, v6, OS_ACTIVITY_FLAG_DEFAULT);
        }
LABEL_20:
        swift_once();
        goto LABEL_5;
      }
LABEL_30:
      os_activity_t result = (os_activity_t)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((unint64_t)description >> 32) {
    goto LABEL_19;
  }
  if (description >> 11 == 27) {
    goto LABEL_29;
  }
  if (description >> 16 > 0x10)
  {
    __break(1u);
  }
  else if ((description & 0xFFFFFF80) == 0)
  {
    if (description <= 0xFF)
    {
      unsigned int v8 = ((_BYTE)description + 1);
      goto LABEL_14;
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int v9 = (description & 0x3F) << 8;
  unsigned int v10 = (v9 | (description >> 6)) + 33217;
  unsigned int v11 = (v9 | (description >> 6) & 0x3F) << 8;
  unsigned int v12 = (((v11 | (description >> 12) & 0x3F) << 8) | (description >> 18)) - 2122219023;
  unsigned int v13 = (v11 | (description >> 12)) + 8487393;
  if (description >> 16) {
    unsigned int v8 = v12;
  }
  else {
    unsigned int v8 = v13;
  }
  if (description < 0x800) {
    unsigned int v8 = v10;
  }
LABEL_14:
  *(void *)descriptiona = (v8 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v8) & 0x38)) & 0x38));
  if (!dso) {
    goto LABEL_30;
  }
  if (qword_100320C58 != -1) {
    swift_once();
  }
  return _os_activity_create(dso, descriptiona, (os_activity_t)qword_100327E68, OS_ACTIVITY_FLAG_DEFAULT);
}

uint64_t AAPrettyBool(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    return 5457241;
  }
  else {
    return 20302;
  }
}

uint64_t sub_1001350A4(uint64_t result, unsigned char **a2)
{
  id v2 = *a2;
  *id v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1001350B4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1001350F0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100135118(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_100135190(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_100135190(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100135264(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100047DD4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100047DD4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100008EA8((uint64_t)v12);
  return v7;
}

uint64_t sub_100135264(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100135420(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100135420(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1001354B8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100135630(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100135630(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1001354B8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100261AE8(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100135630(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100009F04((uint64_t *)&unk_1003216A0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unsigned int v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char **sub_100135780(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

void *sub_100135790(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t sub_100135834(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_100135860(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100135888@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

unint64_t sub_1001358B8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100135C50(a1, a2, v4);
}

unint64_t sub_100135930(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_100135D34(a1, v2);
}

unint64_t sub_1001359C4(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_100136284((unint64_t *)&qword_100322920, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100135FD0(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_100322928, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_100135A98(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100135EAC(a1, v4);
}

unint64_t sub_100135ADC(uint64_t a1)
{
  type metadata accessor for URL();
  sub_100136284(&qword_100327E70, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100135FD0(a1, v2, (uint64_t (*)(void))&type metadata accessor for URL, &qword_100327E78, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_100135BB0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100136170(a1, v4, (unint64_t *)&qword_100323EE0);
}

unint64_t sub_100135C00(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100136170(a1, v4, &qword_100323560);
}

unint64_t sub_100135C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unsigned int v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100135D34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100135EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100135F74(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100098CF0((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_100135F74(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100135FD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  Swift::String v24 = a4;
  v22[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v22 - v11;
  uint64_t v23 = v6;
  uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = a2 & ~v13;
  v22[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    char v18 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v17 = v9 + 16;
    uint64_t v16 = v18;
    uint64_t v19 = *(void *)(v17 + 56);
    do
    {
      v16(v12, *(void *)(v23 + 48) + v19 * v14, v8);
      sub_100136284(v24, v25);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v17 - 8))(v12, v8);
      if (v20) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v22[0] + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

unint64_t sub_100136170(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10000850C(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_100136284(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001362CC()
{
  uint64_t v1 = OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck____lazy_storage___custodianDefaults;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck____lazy_storage___custodianDefaults))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck____lazy_storage___custodianDefaults);
  }
  else
  {
    type metadata accessor for CustodianDefaults();
    uint64_t v2 = swift_allocObject();
    *(void *)(v0 + v1) = v2;
    swift_retain();
  }
  swift_retain();
  return v2;
}

uint64_t sub_100136330()
{
  sub_100009F04(&qword_100322470);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100322460);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_1003224C0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100322530);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100325150);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100320D40);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100322490);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032D780);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321900);
  Dependency.init(dependencyId:config:)();
  sub_10000850C(0, (unint64_t *)&qword_100321930);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321910);
  Dependency.init(dependencyId:config:)();
  *(void *)(v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck____lazy_storage___custodianDefaults) = 0;
  uint64_t v1 = OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_queue;
  id v2 = [objc_allocWithZone((Class)NSOperationQueue) init];
  *(void *)(v0 + v1) = v2;
  *(void *)(v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_uniqueCustodianCount) = 0;
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
  type metadata accessor for CustodianPreflightHealthCheck();
  sub_100009F04((uint64_t *)&unk_1003283C0);
  *uint64_t v3 = String.init<A>(describing:)();
  v3[1] = v4;
  [v2 setMaxConcurrentOperationCount:1];
  return v0;
}

uint64_t sub_100136634(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100007288(v10, (uint64_t)qword_10033E790);
  swift_retain();
  char v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v20 = a2;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v19 = a4;
    unint64_t v14 = a3;
    uint64_t v16 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v15 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    uint64_t v17 = v16;
    a3 = v14;
    sub_100135190(v17, v15, &v21);
    a4 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    a2 = v20;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s - started.", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100145B8C(v5, v5, a3, a4, a1, a2);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_100136860(int a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v63 = a7;
  uint64_t v61 = a6;
  uint64_t v66 = a5;
  int v60 = a1;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v65 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v62 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  unint64_t v64 = (char *)&v52 - v15;
  uint64_t v16 = sub_100009F04(&qword_100321FF8);
  uint64_t v59 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  unint64_t v58 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100009F04(&qword_100325870);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v57 = v10;
    swift_errorRetain();
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E790);
    swift_errorRetain();
    swift_errorRetain();
    swift_retain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      unint64_t v56 = a4;
      uint64_t v28 = v27;
      uint64_t v53 = (void *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      v68[0] = v54;
      *(_DWORD *)uint64_t v28 = 136315394;
      uint64_t v55 = v16;
      os_log_t v52 = v25;
      uint64_t v29 = a3;
      uint64_t v30 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v31 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v67 = sub_100135190(v30, v31, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2112;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v67 = v32;
      uint64_t v16 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v53 = v32;
      a3 = v29;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v33 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, v26, "%s - Error while dismissing Custodian Review follow up items. Error: %@", (uint8_t *)v28, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v56;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v10 = v57;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore, v19);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  id v34 = [*(id *)(*sub_100008EF8(v68, v69) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)v68);
  if (v34)
  {
    unint64_t v35 = v58;
    uint64_t v36 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__custodianStorage, v16);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v16);
    uint64_t v37 = sub_100008EF8(v68, v69);
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = a3;
    *(unsigned char *)(v38 + 24) = v60 & 1;
    uint64_t v39 = v63;
    *(void *)(v38 + 32) = v61;
    *(void *)(v38 + 40) = v39;
    uint64_t v40 = v66;
    *(void *)(v38 + 48) = a4;
    *(void *)(v38 + 56) = v40;
    uint64_t v41 = sub_100008EF8((void *)(*v37 + 16), *(void *)(*v37 + 40));
    type metadata accessor for LocalCache();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v42 = v62;
    sub_10000A280();
    uint64_t v43 = (uint64_t)v64;
    URL.appendingPathComponent(_:isDirectory:)();
    uint64_t v44 = *(void (**)(char *, uint64_t))(v65 + 8);
    v44(v42, v10);
    sub_100008EF8((void *)(*v41 + 16), *(void *)(*v41 + 40));
    sub_1000B3744(v43, (uint64_t)sub_10014C758, v38);
    v44((char *)v43, v10);
    swift_release();
    sub_100008EA8((uint64_t)v68);
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100007288(v45, (uint64_t)qword_10033E790);
    swift_retain();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      unint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      unint64_t v56 = a4;
      v68[0] = v49;
      *(_DWORD *)unint64_t v48 = 136315138;
      uint64_t v50 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v51 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v67 = sub_100135190(v50, v51, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "%s - not logged in to AppleAccount, unable to Preflight", v48, 0xCu);
      swift_arrayDestroy();
      a4 = v56;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    type metadata accessor for AACustodianError(0);
    uint64_t v67 = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000070DC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v34 = (id)v68[0];
    a4(v68[0]);
  }
}

uint64_t sub_1001370D8(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = (void (*)(void))a7;
  if ((a2 & 1) == 0) {
    return sub_10013757C(a1, a4 & 1, a5, a6, a7, a8);
  }
  swift_errorRetain();
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E790);
  sub_100007850(a1, 1);
  swift_retain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v19 = v8;
    uint64_t v17 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v18 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    sub_100135190(v17, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2112;
    uint64_t v20 = _convertErrorToNSError(_:)();
    char v8 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v16 = v20;
    sub_100007844(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - error fetching custodian records: %@", (uint8_t *)v15, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    sub_100007844(a1, 1);
  }

  swift_errorRetain();
  v8(a1);
  sub_100007844(a1, 1);
  return sub_100007844(a1, 1);
}

uint64_t sub_100137390(char a1, uint64_t a2, uint64_t (*a3)(void, uint64_t))
{
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E790);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    if (a1) {
      uint64_t v10 = 0xD00000000000001ELL;
    }
    else {
      uint64_t v10 = 0xD000000000000026;
    }
    if (a1) {
      unint64_t v11 = 0x800000010029DF50;
    }
    else {
      unint64_t v11 = 0x800000010029DF20;
    }
    sub_100135190(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return a3(a1 & 1, a2);
}

uint64_t sub_10013757C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v57 = a5;
  uint64_t v60 = a3;
  int v58 = a2;
  uint64_t v67 = (void *)type metadata accessor for UUID();
  uint64_t v11 = *(v67 - 1);
  __chkstk_darwin(v67, v12);
  uint64_t v66 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for CustodianRecord();
  uint64_t v14 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v15);
  unint64_t v62 = v16;
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PartialErrorHandler();
  swift_allocObject();
  uint64_t v18 = sub_10019FEE0();
  uint64_t v19 = swift_allocObject();
  unint64_t v20 = sub_100221BB8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v59 = v19;
  *(void *)(v19 + 16) = v20;
  int64_t v21 = *(void *)(a1 + 16);
  if (v21)
  {
    uint64_t v53 = v18;
    uint64_t v65 = v6;
    uint64_t v54 = a6;
    uint64_t v55 = a4;
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_1002289A0(0, v21, 0);
    unint64_t v22 = *(unsigned __int8 *)(v14 + 80);
    unint64_t v52 = ~v22;
    unint64_t v61 = v22;
    uint64_t v56 = a1;
    uint64_t v23 = a1 + ((v22 + 32) & ~v22);
    uint64_t v68 = *(void *)(v14 + 72);
    unint64_t v63 = v11 + 32;
    uint64_t v24 = v23;
    int64_t v25 = v21;
    uint64_t v27 = v66;
    os_log_type_t v26 = v67;
    do
    {
      sub_100144170(v24, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      (*(void (**)(char *, char *, void *))(v11 + 16))(v27, &v17[*(int *)(v64 + 20)], v26);
      sub_10014B000((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v28 = aBlock[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002289A0(0, *(void *)(v28 + 16) + 1, 1);
        uint64_t v28 = aBlock[0];
      }
      unint64_t v30 = *(void *)(v28 + 16);
      unint64_t v29 = *(void *)(v28 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_1002289A0(v29 > 1, v30 + 1, 1);
        uint64_t v28 = aBlock[0];
      }
      *(void *)(v28 + 16) = v30 + 1;
      unint64_t v31 = v28
          + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
          + *(void *)(v11 + 72) * v30;
      uint64_t v27 = v66;
      os_log_type_t v26 = v67;
      (*(void (**)(unint64_t, char *, void *))(v11 + 32))(v31, v66, v67);
      aBlock[0] = v28;
      v24 += v68;
      --v25;
    }
    while (v25);
    uint64_t v32 = sub_100122A24(v28);
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void *)(v32 + 16);
    swift_bridgeObjectRelease();
    uint64_t v34 = v65;
    *(void *)(v65 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_uniqueCustodianCount) = v33;
    uint64_t v67 = *(void **)(v34 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_queue);
    uint64_t v66 = (char *)((v61 + 24) & v52);
    unint64_t v63 = (unint64_t)&v66[v62 + 7] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v64 = v61 | 7;
    unint64_t v62 = (v63 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v35 = (v62 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v61 = v35 + 8;
    swift_bridgeObjectRetain();
    a4 = v55;
    uint64_t v18 = v53;
    uint64_t v37 = v59;
    uint64_t v36 = v60;
    do
    {
      sub_100144170(v23, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = v34;
      sub_1001445DC((uint64_t)v17, (uint64_t)&v66[v38], (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v39 = (void *)(v38 + v63);
      *uint64_t v39 = v36;
      v39[1] = a4;
      *(void *)(v38 + v62) = v18;
      *(void *)(v38 + v35) = v37;
      uint64_t v40 = (objc_class *)type metadata accessor for AsyncOperation();
      uint64_t v41 = objc_allocWithZone(v40);
      v41[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
      unint64_t v42 = (uint64_t (**)(uint64_t (*)(), uint64_t (*)()))&v41[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
      *unint64_t v42 = sub_10014BCB8;
      v42[1] = (uint64_t (*)(uint64_t (*)(), uint64_t (*)()))v38;
      v70.receiver = v41;
      v70.super_class = v40;
      uint64_t v34 = v65;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      id v43 = [super init];
      [v67 addOperation:v43];

      v23 += v68;
      --v21;
    }
    while (v21);
    a1 = v56;
    swift_bridgeObjectRelease();
    a6 = v54;
  }
  else
  {
    uint64_t v44 = sub_100122A24((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    uint64_t v45 = *(void *)(v44 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v7 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_uniqueCustodianCount) = v45;
    uint64_t v34 = v7;
  }
  uint64_t v46 = *(void **)(v34 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_queue);
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = v59;
  *(void *)(v47 + 16) = v34;
  *(void *)(v47 + 24) = v48;
  uint64_t v49 = v57;
  *(void *)(v47 + 32) = v18;
  *(void *)(v47 + 40) = v49;
  *(void *)(v47 + 48) = a6;
  *(void *)(v47 + 56) = a1;
  *(unsigned char *)(v47 + 64) = v58 & 1;
  *(void *)(v47 + 72) = v60;
  *(void *)(v47 + 80) = a4;
  aBlock[4] = sub_10014BDE4;
  aBlock[5] = v47;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  void aBlock[3] = &unk_1002FCF90;
  uint64_t v50 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  [v46 addBarrierBlock:v50];
  _Block_release(v50);
  swift_release();
  return swift_release();
}

uint64_t sub_100137BDC(uint64_t (*a1)(), uint64_t (*a2)(), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v73 = a8;
  uint64_t v74 = a5;
  uint64_t v71 = a7;
  uint64_t v72 = a2;
  uint64_t v75 = a6;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v76 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04(&qword_100321FF8);
  uint64_t v68 = *(void *)(v14 - 8);
  uint64_t v69 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v66 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CustodianRecord();
  uint64_t v65 = *(uint64_t (**)())(v17 - 8);
  uint64_t v18 = *((void *)v65 + 8);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v70 = (uint64_t)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v24 = (char *)&v61 - v23;
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v61 - v26;
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v78 = v17;
  uint64_t v79 = v11;
  uint64_t v28 = type metadata accessor for Logger();
  sub_100007288(v28, (uint64_t)qword_10033E790);
  uint64_t v67 = a4;
  sub_100144170(a4, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  swift_retain();
  unint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v64 = a3;
  if (v31)
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v62 = (uint64_t)v24;
    uint64_t v33 = v32;
    uint64_t v34 = swift_slowAlloc();
    unint64_t v63 = a1;
    v81[0] = v34;
    *(_DWORD *)uint64_t v33 = 136315394;
    uint64_t v35 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v36 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    uint64_t v80 = sub_100135190(v35, v36, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v80 = sub_100135190(v37, v38, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10014B000((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - Starting Custodian Preflight Activity for %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    a1 = v63;
    swift_slowDealloc();
    uint64_t v24 = (char *)v62;
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    sub_10014B000((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }

  unint64_t v63 = type metadata accessor for CustodianRecord;
  uint64_t v39 = v67;
  sub_100144170(v67, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v40 = *((unsigned __int8 *)v65 + 80);
  uint64_t v41 = (v40 + 24) & ~v40;
  uint64_t v62 = v40 | 7;
  unint64_t v42 = (v18 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = swift_allocObject();
  uint64_t v61 = v18;
  *(void *)(v43 + 16) = v71;
  uint64_t v65 = type metadata accessor for CustodianRecord;
  sub_1001445DC((uint64_t)v24, v43 + v41, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v44 = v72;
  *(void *)(v43 + v42) = v73;
  uint64_t v45 = (uint64_t (**)())(v43 + ((v42 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v45 = a1;
  v45[1] = v44;
  uint64_t v46 = v64;
  uint64_t v47 = v68;
  uint64_t v48 = v69;
  uint64_t v49 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v66, v64 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__custodianStorage, v69);
  swift_retain();
  swift_retain();
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v48);
  sub_100008EF8(v81, v81[3]);
  uint64_t v50 = v77;
  uint64_t v51 = (uint64_t)v76;
  uint64_t v52 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, v39 + *(int *)(v78 + 20), v79);
  uint64_t v53 = v39;
  uint64_t v54 = v70;
  sub_100144170(v53, v70, (uint64_t (*)(void))v63);
  uint64_t v55 = (v40 + 56) & ~v40;
  uint64_t v56 = (void *)swift_allocObject();
  uint64_t v57 = v74;
  uint64_t v58 = v75;
  v56[2] = v46;
  v56[3] = v57;
  v56[4] = v58;
  void v56[5] = sub_10014C0BC;
  v56[6] = v43;
  sub_1001445DC(v54, (uint64_t)v56 + v55, (uint64_t (*)(void))v65);
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = sub_10014C364;
  *(void *)(v59 + 24) = v56;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1002369EC(v51, (uint64_t)sub_10014C774, v59);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v51, v52);
  sub_100008EA8((uint64_t)v81);
  return swift_release();
}

uint64_t sub_1001382E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t))
{
  BOOL v31 = a5;
  uint64_t v11 = type metadata accessor for CustodianRecord();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  if (a1)
  {
    uint64_t v15 = (uint64_t *)(a3 + *(int *)(v11 + 24));
    uint64_t v16 = v15[1];
    uint64_t v33 = *v15;
    uint64_t v34 = v16;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = 58;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t v19 = v33;
    uint64_t v20 = v34;
    sub_100144170(a3, (uint64_t)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    unint64_t v21 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v22 = (void *)swift_allocObject();
    void v22[2] = a2;
    void v22[3] = a1;
    void v22[4] = a4;
    sub_1001445DC((uint64_t)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v22 + v21, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v23 = (uint64_t (**)(uint64_t))((char *)v22 + ((v13 + v21 + 7) & 0xFFFFFFFFFFFFFFF8));
    char *v23 = v31;
    v23[1] = a6;
    swift_errorRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10019F5F4(v19, v20, a1, (uint64_t)sub_10014C5F8, (uint64_t)v22);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    return swift_release();
  }
  else
  {
    uint64_t v25 = UUID.uuidString.getter();
    uint64_t v27 = v26;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = 0x8000000000000000;
    sub_10022C6A4(1, v25, v27, isUniquelyReferenced_nonNull_native);
    *(void *)(a4 + 16) = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = swift_endAccess();
    return v31(v29);
  }
}

uint64_t sub_10013858C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v9 = a3 + 16;
  swift_beginAccess();
  uint64_t v10 = *(void *)(a1 + 24);
  v13[2] = a2;
  v13[3] = v9;
  v13[4] = a4;
  swift_bridgeObjectRetain();
  sub_10001D9F0((void (*)(uint64_t *))sub_10014C690, (uint64_t)v13, v10);
  uint64_t v11 = swift_bridgeObjectRelease();
  return a5(v11);
}

uint64_t sub_100138634(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  swift_getErrorValue();
  if (qword_100320B48 != -1) {
    swift_once();
  }
  if (sub_10003510C(qword_10033E6E0, v11)) {
    goto LABEL_7;
  }
  swift_getErrorValue();
  if (qword_100320B50 != -1) {
    swift_once();
  }
  uint64_t result = sub_10003510C(qword_10033E6E8, v10);
  if (result)
  {
LABEL_7:
    type metadata accessor for CustodianRecord();
    uint64_t v5 = UUID.uuidString.getter();
    uint64_t v7 = v6;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *a3;
    *a3 = 0x8000000000000000;
    sub_10022C6A4(0, v5, v7, isUniquelyReferenced_nonNull_native);
    *a3 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1001387C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v151 = a6;
  uint64_t v159 = a4;
  uint64_t v160 = a5;
  uint64_t v14 = sub_100009F04((uint64_t *)&unk_100321D50);
  uint64_t v143 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  v142 = (char *)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100009F04(&qword_100325870);
  uint64_t v146 = *(void *)(v17 - 8);
  uint64_t v147 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v145 = (char *)&v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100009F04(&qword_100321CD8);
  uint64_t v153 = *(void *)(v20 - 8);
  uint64_t v154 = v20;
  __chkstk_darwin(v20, v21);
  uint64_t v152 = (char *)&v139 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_1001362CC();
  uint64_t v25 = sub_10019E7A8(v23, v24);
  swift_release();
  sub_1001362CC();
  uint64_t v158 = a2 + 16;
  swift_beginAccess();
  uint64_t v26 = swift_bridgeObjectRetain();
  sub_10019E898(v26);
  swift_release();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!*(void *)(*(void *)(a3 + 24) + 16))
  {
    swift_bridgeObjectRelease();
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100007288(v36, (uint64_t)qword_10033E790);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Overall Custodian Preflight activity successful.", v39, 2u);
      swift_slowDealloc();
    }

    uint64_t v40 = v159;
    uint64_t v41 = v160;
    return sub_10019FA5C(v40, v41);
  }
  uint64_t v149 = v25;
  uint64_t v141 = a8;
  uint64_t v144 = a1;
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = sub_100007288(v27, (uint64_t)qword_10033E790);
  swift_retain_n();
  uint64_t v155 = v28;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v150 = a3;
  int v140 = a7;
  uint64_t v139 = v14;
  uint64_t v157 = (void *)(a3 + 24);
  if (v31)
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    v162[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315138;
    unint64_t v156 = (unint64_t)(v32 + 4);
    swift_bridgeObjectRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v33 = Dictionary.description.getter();
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v165 = sub_100135190(v33, v35, v162);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Overall Custodian Preflight activity failed: %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v42 = swift_bridgeObjectRetain();
  uint64_t v43 = sub_100139984(v42);
  uint64_t v148 = 0;
  swift_bridgeObjectRelease();
  uint64_t v44 = _swiftEmptyArrayStorage;
  v162[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v45 = *(void *)(v43 + 16);
  unint64_t v156 = v43;
  if (v45)
  {
    uint64_t v46 = (uint64_t *)(v43 + 32);
    do
    {
      uint64_t v47 = *v46;
      swift_getErrorValue();
      uint64_t v48 = v167;
      swift_errorRetain();
      if (qword_100320B48 != -1) {
        swift_once();
      }
      if (sub_10003510C(qword_10033E6E0, v48))
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v162[0] = (uint64_t)v44;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100228944(0, v44[2] + 1, 1);
          uint64_t v44 = (void *)v162[0];
        }
        unint64_t v51 = v44[2];
        unint64_t v50 = v44[3];
        if (v51 >= v50 >> 1)
        {
          sub_100228944(v50 > 1, v51 + 1, 1);
          uint64_t v44 = (void *)v162[0];
        }
        v44[2] = v51 + 1;
        v44[v51 + 4] = v47;
      }
      else
      {
        swift_errorRelease();
      }
      ++v46;
      --v45;
    }
    while (v45);
  }
  swift_bridgeObjectRelease();
  unint64_t v156 = v44[2];
  swift_release();
  uint64_t v52 = swift_bridgeObjectRetain();
  uint64_t v53 = v148;
  uint64_t v54 = sub_100139984(v52);
  uint64_t v148 = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = _swiftEmptyArrayStorage;
  v162[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v56 = *(void *)(v54 + 16);
  uint64_t v157 = (void *)v54;
  if (v56)
  {
    uint64_t v57 = (uint64_t *)(v54 + 32);
    do
    {
      uint64_t v58 = *v57;
      swift_getErrorValue();
      uint64_t v59 = v166;
      swift_errorRetain();
      if (qword_100320B50 != -1) {
        swift_once();
      }
      if (sub_10003510C(qword_10033E6E8, v59))
      {
        char v60 = swift_isUniquelyReferenced_nonNull_native();
        v162[0] = (uint64_t)v55;
        if ((v60 & 1) == 0)
        {
          sub_100228944(0, v55[2] + 1, 1);
          uint64_t v55 = (void *)v162[0];
        }
        unint64_t v62 = v55[2];
        unint64_t v61 = v55[3];
        if (v62 >= v61 >> 1)
        {
          sub_100228944(v61 > 1, v62 + 1, 1);
          uint64_t v55 = (void *)v162[0];
        }
        v55[2] = v62 + 1;
        v55[v62 + 4] = v58;
      }
      else
      {
        swift_errorRelease();
      }
      ++v57;
      --v56;
    }
    while (v56);
  }
  swift_bridgeObjectRelease();
  unint64_t v63 = v55[2];
  unint64_t v64 = v156 | v63;
  swift_release();
  if (!v64)
  {
    swift_bridgeObjectRelease();
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.debug.getter();
    BOOL v80 = os_log_type_enabled(v78, v79);
    uint64_t v82 = v159;
    uint64_t v81 = v160;
    if (v80)
    {
      unint64_t v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "No Error 32 or 34 found. Not posting repair transparency CFU, Not triggering TTR. Ending preflight.", v83, 2u);
      swift_slowDealloc();
    }

    uint64_t v40 = v82;
    uint64_t v41 = v81;
    return sub_10019FA5C(v40, v41);
  }
  swift_beginAccess();
  uint64_t v65 = swift_bridgeObjectRetain();
  uint64_t v67 = sub_100145158(v65, v66);
  swift_bridgeObjectRelease();
  uint64_t v68 = v151;
  swift_bridgeObjectRetain();
  uint64_t v69 = v144;
  swift_retain();
  uint64_t v70 = sub_100145914((uint64_t)v67, v68, v69);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain_n();
  uint64_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v73 = (uint8_t *)swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    uint64_t v157 = (void *)v63;
    v162[0] = v74;
    *(_DWORD *)uint64_t v73 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v75 = Array.description.getter();
    unint64_t v77 = v76;
    swift_bridgeObjectRelease();
    uint64_t v161 = sub_100135190(v75, v77, v162);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Repair Eligible Custodian UUIDs: %s", v73, 0xCu);
    swift_arrayDestroy();
    unint64_t v63 = (unint64_t)v157;
    swift_slowDealloc();
    uint64_t v69 = v144;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v84 = v152;
  uint64_t v85 = v153;
  uint64_t v86 = v154;
  (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v152, v69 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__urlBagProvider, v154);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v86);
  LODWORD(v84) = [self canRepairCustodian];
  sub_100008EA8((uint64_t)v162);
  if (v84)
  {
    Swift::Int v87 = v145;
    uint64_t v88 = v146;
    uint64_t v89 = v147;
    (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v145, v69 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore, v147);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v89);
    id v90 = [*(id *)(*sub_100008EF8(v162, v163) + 16) aa_primaryAppleAccount];
    uint64_t v91 = v160;
    uint64_t v92 = v149;
    uint64_t v93 = v150;
    if (v90)
    {
      uint64_t v94 = v90;
      sub_100008EA8((uint64_t)v162);
      if (*(void *)(v70 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain_n();
        uint64_t v95 = Logger.logObject.getter();
        os_log_type_t v96 = static os_log_type_t.info.getter();
        BOOL v97 = os_log_type_enabled(v95, v96);
        uint64_t v157 = v94;
        if (v97)
        {
          uint64_t v98 = (uint8_t *)swift_slowAlloc();
          v162[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v98 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v99 = Array.description.getter();
          unint64_t v101 = v100;
          swift_bridgeObjectRelease();
          uint64_t v161 = sub_100135190(v99, v101, v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v95, v96, "Trying to post RC Repair Transparency CFU %s", v98, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v158 = a9;
        int64_t v116 = *(void *)(v70 + 16);
        if (v116)
        {
          v162[0] = (uint64_t)_swiftEmptyArrayStorage;
          sub_100228924(0, v116, 0);
          uint64_t v117 = (void *)v162[0];
          uint64_t v118 = (uint64_t *)(v70 + 40);
          do
          {
            uint64_t v119 = *(v118 - 1);
            uint64_t v120 = *v118;
            v162[0] = (uint64_t)v117;
            unint64_t v122 = v117[2];
            unint64_t v121 = v117[3];
            swift_bridgeObjectRetain();
            if (v122 >= v121 >> 1)
            {
              sub_100228924(v121 > 1, v122 + 1, 1);
              uint64_t v117 = (void *)v162[0];
            }
            v118 += 2;
            v117[2] = v122 + 1;
            uint64_t v123 = &v117[2 * v122];
            v123[4] = v119;
            v123[5] = v120;
            --v116;
          }
          while (v116);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v117 = _swiftEmptyArrayStorage;
        }
        uint64_t v124 = v143;
        uint64_t v125 = v144;
        uint64_t v126 = v142;
        uint64_t v127 = v139;
        (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v142, v144 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__followUpController, v139);
        Dependency.wrappedValue.getter();
        (*(void (**)(char *, uint64_t))(v124 + 8))(v126, v127);
        uint64_t v128 = v163;
        uint64_t v129 = v164;
        unint64_t v156 = (unint64_t)sub_100008EF8(v162, v163);
        uint64_t v155 = AAFollowUpIdentifierCustodianReview;
        sub_100009F04((uint64_t *)&unk_100328440);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
        uint64_t v131 = (void *)AAFollowUpTrustedContactIDs;
        uint64_t v161 = AAFollowUpTrustedContactIDs;
        type metadata accessor for AAFollowUpUserInfo(0);
        sub_1000070DC((unint64_t *)&qword_100321168, type metadata accessor for AAFollowUpUserInfo);
        id v132 = v131;
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 96) = sub_100009F04((uint64_t *)&unk_100328450);
        *(void *)(inited + 72) = v117;
        unint64_t v133 = sub_100221618(inited);
        uint64_t v134 = swift_allocObject();
        *(void *)(v134 + 16) = v150;
        *(unsigned char *)(v134 + 24) = v140 & 1;
        uint64_t v135 = v141;
        *(void *)(v134 + 32) = v125;
        *(void *)(v134 + 40) = v135;
        uint64_t v136 = v159;
        *(void *)(v134 + 48) = v158;
        *(void *)(v134 + 56) = v136;
        *(void *)(v134 + 64) = v160;
        uint64_t v137 = *(void (**)(uint64_t, void *, unint64_t, uint64_t (*)(char, uint64_t), uint64_t, uint64_t, uint64_t))(v129 + 16);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v138 = v157;
        v137(v155, v157, v133, sub_10014BE6C, v134, v128, v129);
        swift_bridgeObjectRelease();
        swift_release();

        return sub_100008EA8((uint64_t)v162);
      }

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_100008EA8((uint64_t)v162);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v91 = v160;
    uint64_t v92 = v149;
    uint64_t v93 = v150;
  }
  uint64_t v102 = Logger.logObject.getter();
  os_log_type_t v103 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v102, v103))
  {
    uint64_t v104 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v104 = 0;
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "Untrusted CRK Repair is not enabled. Continuing to TTR.", v104, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v105 = swift_bridgeObjectRetain();
  char v106 = sub_10013C3A8(v105, v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v106 & 1) == 0 || !sub_100146C14())
  {
    uint64_t v112 = Logger.logObject.getter();
    os_log_type_t v113 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v112, v113))
    {
      BOOL v114 = v156 != 0;
      uint64_t v115 = swift_slowAlloc();
      *(_DWORD *)uint64_t v115 = 67109632;
      LODWORD(v161) = v106 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v115 + 8) = 1024;
      LODWORD(v161) = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v115 + 14) = 1024;
      LODWORD(v161) = v63 != 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "Skipping Custodian Preflight TTR: hasAtLeastOneNewInvalidCRK:%{BOOL}d,\nhasOctagonMissingKeysError:%{BOOL}d,\nhasOctagonUntrustedKeysError:%{BOOL}d", (uint8_t *)v115, 0x14u);
      swift_slowDealloc();
    }

    uint64_t v40 = v159;
    uint64_t v41 = v91;
    return sub_10019FA5C(v40, v41);
  }
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v107 = Logger.logObject.getter();
  os_log_type_t v108 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v107, v108))
  {
    BOOL v109 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v109 = 0;
    _os_log_impl((void *)&_mh_execute_header, v107, v108, "Preflight TTR is not available after 18.1", v109, 2u);
    swift_slowDealloc();
  }
  char v110 = v156 != 0;

  sub_10013A3EC(0, v93, v159, v91, v110, v63 != 0, v69);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100139984(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v8 << 6))
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    swift_errorRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100168930(0, v9[2] + 1, 1, v9);
      uint64_t v9 = (void *)result;
    }
    unint64_t v17 = v9[2];
    unint64_t v16 = v9[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t result = (uint64_t)sub_100168930((void *)(v16 > 1), v17 + 1, 1, v9);
      uint64_t v9 = (void *)result;
    }
    v9[2] = v17 + 1;
    v9[v17 + 4] = v15;
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v6) {
      goto LABEL_27;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v6) {
        goto LABEL_27;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v6) {
          goto LABEL_27;
        }
        unint64_t v13 = *(void *)(v2 + 8 * v8);
        if (!v13)
        {
          int64_t v8 = v12 + 3;
          if (v12 + 3 >= v6) {
            goto LABEL_27;
          }
          unint64_t v13 = *(void *)(v2 + 8 * v8);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v5 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v9;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_27;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

BOOL sub_100139B60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v52 = a3;
  uint64_t v49 = sub_100009F04(&qword_100321CD8);
  uint64_t v54 = *(void *)(v49 - 8);
  __chkstk_darwin(v49, v6);
  int64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100009F04(&qword_100328480);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  unint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)&v44 - v15;
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = v17;
  uint64_t v21 = v4;
  uint64_t v22 = sub_1001456A4(v19, v20, v18);
  uint64_t v50 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v22[2];
  uint64_t v24 = type metadata accessor for CustodianRecord();
  uint64_t v25 = *(void *)(v24 - 8);
  if (v23)
  {
    sub_100144170((uint64_t)v22 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)), (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v16, 0, 1, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v16, 1, 1, v24);
  }
  swift_bridgeObjectRelease();
  sub_100019730((uint64_t)v16, (uint64_t)v13, &qword_100328480);
  type metadata accessor for CustodianRecord();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v13, 1, v24) == 1)
  {
    sub_100006574((uint64_t)v13, &qword_100328480);
    unint64_t v26 = 0;
  }
  else
  {
    uint64_t v27 = &v13[*(int *)(v24 + 60)];
    unint64_t v28 = *(void *)v27;
    int v29 = v27[8];
    sub_10014B000((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    if (v29) {
      unint64_t v26 = 0;
    }
    else {
      unint64_t v26 = v28;
    }
  }
  unint64_t v51 = v16;
  uint64_t v30 = v54;
  uint64_t v46 = *(void (**)(char *))(v54 + 16);
  uint64_t v47 = v52 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__urlBagProvider;
  uint64_t v31 = v49;
  v46(v8);
  Dependency.wrappedValue.getter();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v30 + 8);
  uint64_t v54 = v30 + 8;
  uint64_t v45 = v32;
  v32(v8, v31);
  uint64_t v33 = self;
  id v34 = [v33 maxRepairCount];
  BOOL v36 = (uint64_t)v34 > 0 && v26 < (unint64_t)v34;
  BOOL v48 = v36;
  sub_100008EA8((uint64_t)v53);
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_100007288(v37, (uint64_t)qword_10033E790);
  swift_retain();
  os_log_type_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 134218496;
    v53[0] = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v40 + 12) = 2048;
    ((void (*)(char *, uint64_t, uint64_t))v46)(v8, v47, v31);
    Dependency.wrappedValue.getter();
    v45(v8, v31);
    id v41 = [v33 maxRepairCount];
    sub_100008EA8((uint64_t)v53);
    v53[0] = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v40 + 22) = 1024;
    BOOL v42 = v48;
    LODWORD(v53[0]) = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "CK repairCount %lu <  IdMS maxRepairCount %ld = %{BOOL}d", (uint8_t *)v40, 0x1Cu);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    BOOL v42 = v48;
  }

  sub_100006574((uint64_t)v51, &qword_100328480);
  return v42;
}

uint64_t sub_10013A078(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E790);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v27 = a8;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 8) = 2112;
    if (a2)
    {
      swift_errorRetain();
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v20 = 0;
    }
    *uint64_t v19 = v20;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Posted RC Repair Transparency CFU: %{BOOL}d error: %@", (uint8_t *)v18, 0x12u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a8 = v27;
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v30 = _swiftEmptyArrayStorage;
  if (a2)
  {
    swift_errorRetain();
    uint64_t v21 = sub_100168930(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v23 = v21[2];
    unint64_t v22 = v21[3];
    if (v23 >= v22 >> 1) {
      uint64_t v21 = sub_100168930((void *)(v22 > 1), v23 + 1, 1, v21);
    }
    void v21[2] = v23 + 1;
    v21[v23 + 4] = a2;
    uint64_t v30 = v21;
  }
  swift_beginAccess();
  uint64_t v24 = swift_bridgeObjectRetain();
  uint64_t v25 = sub_100200F8C(v24);
  swift_bridgeObjectRelease();
  sub_10028C884((uint64_t)v25);
  if ((a4 & 1) != 0 || (a1 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return sub_10019FA5C(a8, a9);
  }
  else
  {
    swift_retain();
    swift_retain();
    sub_100146CD0(v30, a6, a7, a5, a3, a8, a9);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_10013A3EC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  uint64_t v39 = a7;
  uint64_t v41 = a4;
  uint64_t v40 = a3;
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_100328460);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04(&qword_100325358);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    unint64_t v44 = 0xD000000000000021;
    unint64_t v45 = 0x800000010029DED0;
    if (a5)
    {
      v21._object = (void *)0xEA00000000003433;
      v21._uint64_t countAndFlagsBits = 0x20726F727265202CLL;
      String.append(_:)(v21);
    }
    void v38[2] = a2;
    if (a6)
    {
      v22._uint64_t countAndFlagsBits = 0x20726F727265202CLL;
      v22._object = (void *)0xEA00000000003233;
      String.append(_:)(v22);
    }
    unint64_t v24 = v44;
    unint64_t v23 = v45;
    sub_100009F04((uint64_t *)&unk_100328470);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1002AB070;
    sub_10000850C(0, (unint64_t *)&qword_100324670);
    *(NSNumber *)(v25 + 32) = NSNumber.init(integerLiteral:)(1518603);
    v46[0] = v25;
    specialized Array._endMutation()();
    uint64_t v26 = v46[0];
    v38[1] = 0x800000010029BF40;
    v46[0] = 0xD0000000000000AFLL;
    v46[1] = 0x800000010029BF40;
    void v46[2] = v24;
    v46[3] = v23;
    void v46[4] = 0xD000000000000086;
    v46[5] = 0x800000010029BFF0;
    v46[6] = v26;
    char v47 = 1;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v39 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__ttrRequester, v16);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    uint64_t v27 = *sub_100008EF8(v43, v43[3]);
    id v28 = sub_10013443C((uint64_t)v46);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v27 + OBJC_IVAR____TtC13appleaccountd27TapToRadarRequestController__helper, v11);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    int v29 = (void *)aBlock[0];
    aBlock[4] = sub_10013A91C;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10025ED44;
    void aBlock[3] = &unk_1002FCFE0;
    uint64_t v30 = _Block_copy(aBlock);
    swift_release();
    [v29 silentTapToRadarWithRequest:v28 completion:v30];
    _Block_release(v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100008EA8((uint64_t)v43);
    uint64_t v31 = v40;
    uint64_t v32 = v41;
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E790);
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      BOOL v36 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)BOOL v36 = 67109120;
      LODWORD(v46[0]) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Skipping Custodian Preflight TTR: isWithInTTRFrequency:%{BOOL}d", v36, 8u);
      swift_slowDealloc();
    }

    uint64_t v31 = v40;
    uint64_t v32 = v41;
  }
  return sub_10019FA5C(v31, v32);
}

void sub_10013A91C(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100007288(v1, (uint64_t)qword_10033E790);
    swift_errorRetain();
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v4 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 138412290;
      uint64_t v9 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v4 = v9;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Unable to launch Silent TTR due to error: %@", v3, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E790);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Custodian Preflight Silent TTR launched successfully.", v7, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10013ABA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v40 = a7;
  uint64_t v39 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v39, v13);
  uint64_t v41 = (uint64_t)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v19, v20);
  Swift::String v22 = (uint64_t *)((char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v22, (uint64_t *)&unk_100322960);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v37 = a5;
    uint64_t v38 = a6;
    uint64_t v23 = *v22;
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E790);
    uint64_t v25 = v41;
    sub_100144170(v40, v41, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_errorRetain();
    swift_errorRetain();
    swift_retain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      BOOL v36 = (void *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v43 = v40;
      *(_DWORD *)uint64_t v28 = 136315650;
      uint64_t v30 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v29 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_100135190(v30, v29, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2080;
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v42 = sub_100135190(v31, v32, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000(v25, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_WORD *)(v28 + 22) = 2112;
      uint64_t v33 = _convertErrorToNSError(_:)();
      uint64_t v42 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v36 = v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - error fetching health check record for %s: %@", (uint8_t *)v28, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000(v25, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    os_log_type_t v35 = v37;
    swift_errorRetain();
    v35(v23);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_1001445DC((uint64_t)v22, (uint64_t)v18, type metadata accessor for CustodianshipRecords);
    sub_10013D38C((uint64_t)v18, a3, a4, a5, a6);
    return sub_10014B000((uint64_t)v18, type metadata accessor for CustodianshipRecords);
  }
}

uint64_t sub_10013B09C(char **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, int a7, void (*a8)(void), uint64_t a9, uint64_t a10)
{
  uint64_t v59 = a5;
  char v60 = a1;
  uint64_t v16 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = (void *)swift_allocObject();
  void v25[2] = 0;
  v25[3] = 0;
  v25[4] = a4;
  void v25[5] = a2;
  v25[6] = a3;
  swift_retain();
  id v26 = a4;
  swift_errorRetain();
  sub_100225A54((uint64_t)v23, (uint64_t)&unk_1003283F0, (uint64_t)v25);
  swift_release();
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    int v58 = a7;
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E790);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v56 = a6;
      uint64_t v57 = a8;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      v61[0] = v55;
      *(_DWORD *)uint64_t v30 = 136315650;
      uint64_t v33 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v32 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v62 = sub_100135190(v33, v32, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2080;
      unint64_t v34 = 0xEF6572756C696146;
      uint64_t v35 = 0x4B52436B63656863;
      switch((char)v60)
      {
        case 1:
          unint64_t v34 = 0xED0000726F727265;
          break;
        case 2:
          uint64_t v35 = 0x6146726961706572;
          unint64_t v34 = 0xEC00000064656C69;
          break;
        case 3:
          unint64_t v34 = 0x800000010029C350;
          uint64_t v35 = 0xD000000000000010;
          break;
        case 4:
          uint64_t v35 = 0x725064656C696166;
          unint64_t v34 = 0xEF746867696C6665;
          break;
        case 5:
          uint64_t v35 = 0xD00000000000001BLL;
          unint64_t v44 = "successPreflightAfterRepair";
          goto LABEL_20;
        case 6:
          uint64_t v35 = 0xD00000000000001ALL;
          unint64_t v44 = "failedPreflightAfterRepair";
          goto LABEL_20;
        case 7:
          uint64_t v35 = 0xD000000000000015;
          unint64_t v44 = "missingRKCinCKRecords";
LABEL_20:
          unint64_t v34 = (unint64_t)(v44 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      uint64_t v62 = sub_100135190(v35, v34, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 22) = 2112;
      swift_errorRetain();
      uint64_t v45 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v62 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v45;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - Ending with failure due to %s %@", (uint8_t *)v30, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a6 = v56;
      a8 = v57;
    }
    else
    {
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t ObjectType = swift_getObjectType();
    _convertErrorToNSError(_:)();
    char v47 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a6 + 32))(v61, ObjectType, a6);
    uint64_t v49 = v48;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v49 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v49 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v47(v61, 0);
    sub_1000C440C(0, v58 & 1, v60);
    swift_errorRetain();
    a8(a2);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100007288(v36, (uint64_t)qword_10033E790);
    sub_100144170(a10, (uint64_t)v19, type metadata accessor for CustodianshipRecords);
    swift_retain();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      int v58 = a7;
      uint64_t v56 = a9;
      uint64_t v57 = a8;
      uint64_t v39 = 0x4B52436B63656863;
      uint64_t v40 = swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315650;
      uint64_t v41 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v42 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v62 = sub_100135190(v41, v42, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2080;
      unint64_t v43 = 0xEF6572756C696146;
      switch((char)v60)
      {
        case 1:
          unint64_t v43 = 0xED0000726F727265;
          break;
        case 2:
          uint64_t v39 = 0x6146726961706572;
          unint64_t v43 = 0xEC00000064656C69;
          break;
        case 3:
          unint64_t v43 = 0x800000010029C350;
          uint64_t v39 = 0xD000000000000010;
          break;
        case 4:
          uint64_t v39 = 0x725064656C696166;
          unint64_t v43 = 0xEF746867696C6665;
          break;
        case 5:
          uint64_t v39 = 0xD00000000000001BLL;
          unint64_t v51 = "successPreflightAfterRepair";
          goto LABEL_31;
        case 6:
          uint64_t v39 = 0xD00000000000001ALL;
          unint64_t v51 = "failedPreflightAfterRepair";
          goto LABEL_31;
        case 7:
          uint64_t v39 = 0xD000000000000015;
          unint64_t v51 = "missingRKCinCKRecords";
LABEL_31:
          unint64_t v43 = (unint64_t)(v51 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      uint64_t v62 = sub_100135190(v39, v43, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 22) = 2080;
      type metadata accessor for CustodianRecord();
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v62 = sub_100135190(v52, v53, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v19, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s - Ending with success due to %s for custodian %s", (uint8_t *)v40, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a8 = v57;
      LOBYTE(a7) = v58;
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v19, type metadata accessor for CustodianshipRecords);
    }
    sub_1000C440C(1, a7 & 1, v60);
    return ((uint64_t (*)(void))a8)(0);
  }
}

uint64_t sub_10013BAC4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v51 - v16;
  if (a1)
  {
    int v58 = a4;
    swift_errorRetain();
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = sub_100007288(v18, (uint64_t)qword_10033E790);
    sub_100144170(a3, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    int v22 = v21;
    BOOL v23 = os_log_type_enabled(v20, v21);
    uint64_t v57 = a3;
    if (v23)
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v56 = (uint8_t *)a5;
      uint64_t v25 = v24;
      uint64_t v52 = (void *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      uint64_t v60 = v54;
      *(_DWORD *)uint64_t v25 = 136315650;
      int v53 = v22;
      uint64_t v55 = v19;
      uint64_t v26 = a2;
      uint64_t v27 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v28 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_100135190(v27, v28, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v59 = sub_100135190(v29, v30, &v60);
      a2 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v25 + 22) = 2112;
      uint64_t v31 = _convertErrorToNSError(_:)();
      uint64_t v59 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v52 = v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v53, "%s - Preflight Custodian Recovery failed for custodian %s with error: %@\"", (uint8_t *)v25, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a5 = (uint64_t)v56;
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      swift_errorRelease();
      swift_errorRelease();
    }

    BOOL v41 = sub_100146C14();
    unint64_t v42 = v58;
    if (!v41
      || *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_uniqueCustodianCount) != 1)
    {
      swift_errorRetain();
      v42(4, a1);
      swift_errorRelease();
      return swift_errorRelease();
    }
    swift_retain();
    unint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136315138;
      uint64_t v56 = v45 + 4;
      uint64_t v46 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v47 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v48 = v46;
      unint64_t v42 = v58;
      uint64_t v59 = sub_100135190(v48, v47, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s - Owner is an ADP user, with only one custodian failing preflight.", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v50 = (void *)swift_allocObject();
    v50[2] = v42;
    uint64_t v50[3] = a5;
    v50[4] = a1;
    swift_errorRetain();
    swift_retain();
    sub_100140F30(v57, sub_10014A480, (uint64_t)v50);
    swift_errorRelease();
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E790);
    sub_100144170(a3, (uint64_t)v17, type metadata accessor for CustodianshipRecords);
    swift_retain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v56 = (uint8_t *)a2;
      uint64_t v60 = v36;
      *(_DWORD *)uint64_t v35 = 136315394;
      uint64_t v57 = a3;
      int v58 = a4;
      uint64_t v37 = *(void *)&v56[OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName];
      unint64_t v38 = *(void *)&v56[OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8];
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_100135190(v37, v38, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2080;
      type metadata accessor for CustodianRecord();
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v59 = sub_100135190(v39, v40, &v60);
      a3 = v57;
      a4 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v17, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s - Preflight Custodian Recovery successful for custodian %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      a2 = (uint64_t)v56;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v17, type metadata accessor for CustodianshipRecords);
    }

    swift_retain();
    sub_100148CA0(a3, a2, (uint64_t (*)(void))a4, a5);
  }
  return swift_release();
}

uint64_t sub_10013C334(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v5 = a1;
  }
  else
  {
    uint64_t v5 = a4;
    swift_errorRetain();
  }
  swift_errorRetain();
  a2(4, v5);

  return swift_errorRelease();
}

uint64_t sub_10013C3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E790);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "hasAtLeastOneNewInvalidCRK was called.", v9, 2u);
    swift_slowDealloc();
  }

  unsigned __int8 v24 = 0;
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_100121010(v10);
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = sub_100144800(v12, v11, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_10014499C);
  swift_bridgeObjectRelease();
  sub_1001468A8(a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10014BA10);
  sub_1001468A8(a1, (void (*)(uint64_t, uint64_t, uint64_t))sub_10014BA34);
  if (*(void *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100146A38(v13, a2, a1, &v24);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      v23[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      uint64_t v17 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      sub_100135190(v17, v18, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 1024;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s hasAtLeastOneNewInvalidCRK: Returning %{BOOL}d.", (uint8_t *)v16, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    swift_beginAccess();
    return v24;
  }
  else
  {
    swift_release();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "hasAtLeastOneNewInvalidCRK: Intersection set between old / new Preflight results is empty. Returning true.", v21, 2u);
      swift_slowDealloc();
    }

    return 1;
  }
}

void sub_10013C760(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E790);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315650;
    format = a5;
    uint64_t v13 = *(void *)(a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v14 = *(void *)(a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    sub_100135190(v13, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_100135190(a1, a2, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 22) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, format, (uint8_t *)v12, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
}

void sub_10013C9C0(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  if (!*(void *)(a2 + 16))
  {
LABEL_10:
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E790);
    swift_bridgeObjectRetain_n();
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v41 = v6;
      BOOL v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)BOOL v23 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(v41, v5, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No old Preflight results for uuid: %s exist", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v6 = v41;
      swift_slowDealloc();

      if (!*(void *)(a3 + 16)) {
        return;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if (!*(void *)(a3 + 16)) {
        return;
      }
    }
    swift_bridgeObjectRetain();
    unint64_t v24 = sub_1001358B8(v6, v5);
    if ((v25 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return;
    }
    char v26 = *(unsigned char *)(*(void *)(a3 + 56) + v24);
    swift_bridgeObjectRelease();
    if (v26) {
      return;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(v6, v5, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      unint64_t v30 = "Preflight result for uuid: %s, are bad. This could possibly be the first bad preflight result.";
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v27, v28, v30, v29, 0xCu);
      swift_arrayDestroy();
LABEL_27:
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
LABEL_41:

    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_1001358B8(v6, v5);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  int v11 = *(unsigned __int8 *)(*(void *)(a2 + 56) + v9);
  swift_bridgeObjectRelease();
  if (!*(void *)(a3 + 16)) {
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1001358B8(v6, v5);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_22:
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100007288(v31, (uint64_t)qword_10033E790);
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(v6, v5, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      unint64_t v30 = "Preflight results for uuid: %s not present";
      goto LABEL_26;
    }
    goto LABEL_41;
  }
  int v39 = *(unsigned __int8 *)(*(void *)(a3 + 56) + v12);
  swift_bridgeObjectRelease();
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100007288(v14, (uint64_t)qword_10033E790);
  swift_bridgeObjectRetain_n();
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  uint64_t v40 = v6;
  if (os_log_type_enabled(v15, v16))
  {
    int v38 = v11;
    uint64_t v17 = v6;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v19 = v17;
    int v11 = v38;
    sub_100135190(v19, v5, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 18) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Preflight result for uuid: %s,\npreviously successful? %{BOOL}d,\ncurrently successful? %{BOOL}d", (uint8_t *)v18, 0x18u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  BOOL v33 = os_log_type_enabled(v27, v32);
  if (!v11)
  {
    if (v39)
    {
      if (v33)
      {
        os_log_type_t v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v34 = 136315138;
        swift_bridgeObjectRetain();
        sub_100135190(v40, v5, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_type_t v35 = v32;
        uint64_t v36 = "Preflight result for uuid: %s, transitioning from bad to good";
        goto LABEL_40;
      }
    }
    else if (v33)
    {
      os_log_type_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v34 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(v40, v5, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_type_t v35 = v32;
      uint64_t v36 = "Preflight results for uuid: %s, transitioning from bad to bad. Not triggering TTR.";
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  if (v39)
  {
    if (v33)
    {
      os_log_type_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v34 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(v40, v5, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_type_t v35 = v32;
      uint64_t v36 = "Preflight results for uuid: %s, is same as before";
LABEL_40:
      _os_log_impl((void *)&_mh_execute_header, v27, v35, v36, v34, 0xCu);
      swift_arrayDestroy();
      goto LABEL_27;
    }
    goto LABEL_41;
  }
  if (v33)
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315138;
    swift_bridgeObjectRetain();
    sub_100135190(v40, v5, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v32, "Preflight result for uuid: %s, transitioning from good to bad", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *a4 = 1;
}

void sub_10013D38C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v84 = a5;
  uint64_t v82 = a3;
  unint64_t v83 = a4;
  uint64_t v81 = a2;
  uint64_t v6 = sub_100009F04(&qword_100323190);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  char v10 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v79 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v79 + 64);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  unint64_t v77 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v80 = (uint64_t)&v76 - v17;
  uint64_t v19 = __chkstk_darwin(v16, v18);
  os_log_type_t v21 = (char *)&v76 - v20;
  __chkstk_darwin(v19, v22);
  unint64_t v24 = (char *)&v76 - v23;
  char v25 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v26 = *(void *)(a1 + v25[9]);
  sub_100144170(a1, (uint64_t)v24, type metadata accessor for CustodianshipRecords);
  if (v26 == 2)
  {
    sub_10014B000((uint64_t)v24, type metadata accessor for CustodianshipRecords);
    sub_100144170(a1, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
LABEL_4:
    sub_10014B000((uint64_t)v21, type metadata accessor for CustodianshipRecords);
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v85 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsEventFactory, v6);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v28 = a1 + *(int *)(v11 + 24);
    uint64_t v29 = v28 + *(int *)(type metadata accessor for CustodianHealthRecord() + 40);
    uint64_t v30 = *(void *)v29;
    char v31 = *(unsigned char *)(v29 + 8);
    id v32 = objc_allocWithZone((Class)type metadata accessor for CustodianPreflightEvent());
    uint64_t v33 = sub_1000C42F4(v30, v31);
    sub_100008EA8((uint64_t)v86);
    os_log_type_t v34 = (uint64_t *)(a1 + v25[13]);
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    uint64_t v37 = (uint64_t *)(v33 + qword_1003255B8);
    *uint64_t v37 = v35;
    v37[1] = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v38 = a1 + v25[15];
    uint64_t v39 = *(void *)v38;
    LOBYTE(v38) = *(unsigned char *)(v38 + 8);
    unint64_t v77 = (char *)v33;
    uint64_t v40 = v33 + qword_1003255C0;
    *(void *)uint64_t v40 = v39;
    *(unsigned char *)(v40 + 8) = v38;
    uint64_t v41 = (uint64_t *)(a1 + v25[14]);
    uint64_t v43 = *v41;
    uint64_t v42 = v41[1];
    os_log_type_t v44 = (void *)(v33 + qword_1003255C8);
    void *v44 = v43;
    v44[1] = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v45 = v81;
    uint64_t v46 = a1;
    uint64_t v78 = a1;
    uint64_t v47 = v82;
    uint64_t v48 = v35;
    uint64_t v49 = v85;
    id v76 = sub_10014270C(v81, v82, v48, v36);
    uint64_t v50 = v46;
    uint64_t v51 = v80;
    sub_100144170(v50, v80, type metadata accessor for CustodianshipRecords);
    unint64_t v52 = (*(unsigned __int8 *)(v79 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
    unint64_t v53 = (v12 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v54 = (v53 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v55 = (v54 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = v49;
    sub_1001445DC(v51, v56 + v52, type metadata accessor for CustodianshipRecords);
    uint64_t v57 = (uint64_t *)(v56 + v53);
    uint64_t *v57 = v45;
    v57[1] = v47;
    int v58 = (void *)(v56 + v54);
    uint64_t v59 = v76;
    uint64_t v60 = v77;
    *int v58 = v77;
    v58[1] = &off_1002F9BF8;
    *(void *)(v56 + v55) = v59;
    unint64_t v61 = (void *)(v56 + ((v55 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v62 = v84;
    *unint64_t v61 = v83;
    v61[1] = v62;
    id v63 = v59;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v64 = v60;
    sub_10014766C(v78, v64, (uint64_t)sub_100144644, v56, v49);
    swift_release();

    return;
  }
  uint64_t v27 = *(void *)&v24[v25[9]];
  sub_10014B000((uint64_t)v24, type metadata accessor for CustodianshipRecords);
  sub_100144170(a1, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
  if (v27 == 3) {
    goto LABEL_4;
  }
  uint64_t v65 = *(void *)&v21[v25[9]];
  sub_10014B000((uint64_t)v21, type metadata accessor for CustodianshipRecords);
  if (v65 == 1) {
    goto LABEL_5;
  }
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v66 = type metadata accessor for Logger();
  sub_100007288(v66, (uint64_t)qword_10033E790);
  uint64_t v67 = (uint64_t)v77;
  sub_100144170(a1, (uint64_t)v77, type metadata accessor for CustodianshipRecords);
  uint64_t v68 = v85;
  swift_retain();
  uint64_t v69 = Logger.logObject.getter();
  os_log_type_t v70 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v69, v70))
  {
    uint64_t v71 = swift_slowAlloc();
    v86[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v71 = 136315394;
    uint64_t v72 = *(void *)(v68 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v73 = *(void *)(v68 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    uint64_t v87 = sub_100135190(v72, v73, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v71 + 12) = 2080;
    type metadata accessor for UUID();
    sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v87 = sub_100135190(v74, v75, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10014B000(v67, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "%s - custodian %s does not require a health check, ending check early.", (uint8_t *)v71, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    sub_10014B000(v67, type metadata accessor for CustodianshipRecords);
  }

  v83(0);
}

uint64_t sub_10013DB2C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void (*a10)(uint64_t), void (*a11)(uint64_t))
{
  uint64_t v56 = a6;
  uint64_t v57 = a8;
  uint64_t v55 = a5;
  int v58 = a10;
  uint64_t v59 = a11;
  uint64_t v16 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  __chkstk_darwin(v20 - 8, v23);
  unint64_t v24 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_100144170(a4, (uint64_t)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianshipRecords);
    unint64_t v25 = (*(unsigned __int8 *)(v21 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = a3;
    *(void *)(v26 + 24) = a9;
    uint64_t v27 = v57;
    *(void *)(v26 + 32) = a7;
    *(void *)(v26 + 40) = v27;
    *(unsigned char *)(v26 + 48) = 0;
    uint64_t v28 = v26 + v25;
    uint64_t v29 = v59;
    *(void *)(v26 + 56) = v58;
    *(void *)(v26 + 64) = v29;
    sub_1001445DC((uint64_t)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v28, type metadata accessor for CustodianshipRecords);
    id v30 = a9;
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    sub_100148534(a4, (void (*)(uint64_t, uint64_t))sub_10014A394, (void (*)(uint64_t, uint64_t))v26);
  }
  else
  {
    unint64_t v52 = a9;
    uint64_t v53 = a3;
    uint64_t v54 = a7;
    if (a2)
    {
      uint64_t v31 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v19, 1, 1, v31);
      id v32 = (void *)swift_allocObject();
      void v32[2] = 0;
      v32[3] = 0;
      os_log_type_t v34 = v52;
      uint64_t v33 = v53;
      v32[4] = v52;
      void v32[5] = a2;
      v32[6] = v33;
      swift_errorRetain();
      swift_errorRetain();
      id v35 = v34;
      swift_retain();
      swift_errorRetain();
      sub_100225A54((uint64_t)v19, (uint64_t)&unk_1003283E0, (uint64_t)v32);
      swift_release();
      swift_errorRelease();
      sub_1000C440C(0, 0, (char **)1);
      swift_errorRetain();
      v58(a2);
      swift_errorRelease();
      return swift_errorRelease();
    }
    uint64_t v51 = a4;
    sub_100144170(a4, (uint64_t)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianshipRecords);
    unint64_t v37 = (*(unsigned __int8 *)(v21 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    unint64_t v38 = (v22 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v39 = (v38 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v41 = v59;
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = v53;
    sub_1001445DC((uint64_t)v24, v42 + v37, type metadata accessor for CustodianshipRecords);
    uint64_t v43 = (void *)(v42 + v38);
    uint64_t v44 = v56;
    *uint64_t v43 = v55;
    v43[1] = v44;
    uint64_t v45 = v52;
    *(void *)(v42 + v39) = v52;
    uint64_t v46 = (void *)(v42 + v40);
    uint64_t v47 = v57;
    *uint64_t v46 = v54;
    v46[1] = v47;
    uint64_t v48 = (void (**)(uint64_t))(v42 + ((v40 + 23) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v48 = v58;
    v48[1] = v41;
    id v49 = v45;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100149A30(v51, (uint64_t)sub_100148464, v42);
  }
  return swift_release();
}

uint64_t sub_10013DF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, void *a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t), uint64_t a10)
{
  uint64_t v112 = a8;
  uint64_t v113 = a7;
  uint64_t v105 = a4;
  char v106 = a5;
  uint64_t v107 = a3;
  uint64_t v108 = a2;
  char v110 = a6;
  uint64_t v111 = a10;
  BOOL v109 = a9;
  uint64_t v11 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11 - 8, v14);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100009F04(&qword_100321FF8);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  unint64_t v24 = (char *)v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v25 - 8, v26);
  uint64_t v28 = (char *)v98 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    char v106 = v28;
    swift_errorRetain();
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    uint64_t v30 = sub_100007288(v29, (uint64_t)qword_10033E790);
    uint64_t v31 = v108;
    swift_retain();
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      os_log_type_t v34 = (uint8_t *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      uint64_t v105 = v30;
      *(_DWORD *)os_log_type_t v34 = 136315138;
      uint64_t v35 = v31 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName;
      uint64_t v36 = a1;
      uint64_t v37 = v31;
      uint64_t v39 = *(void *)(v31 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v38 = *(void *)(v35 + 8);
      swift_bridgeObjectRetain();
      uint64_t v40 = v39;
      uint64_t v31 = v37;
      a1 = v36;
      uint64_t v114 = sub_100135190(v40, v38, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s Error repairing CRK.", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t ObjectType = swift_getObjectType();
    _convertErrorToNSError(_:)();
    uint64_t v54 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t))(v112 + 32))(v115, ObjectType);
    uint64_t v56 = v55;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v56 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v56 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v54(v115, 0);
    if (sub_100146C14()
      && *(void *)(v31 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_uniqueCustodianCount) == 1)
    {
      swift_retain();
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        v115[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 136315138;
        uint64_t v60 = v31 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName;
        uint64_t v61 = a1;
        uint64_t v62 = v31;
        uint64_t v63 = *(void *)(v31 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
        unint64_t v64 = *(void *)(v60 + 8);
        swift_bridgeObjectRetain();
        uint64_t v65 = v63;
        uint64_t v31 = v62;
        a1 = v61;
        uint64_t v114 = sub_100135190(v65, v64, v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "%s - Owner is an ADP user, with only one custodian with missing CRK and attempt to repair failed. Attempting to mark custodian as not reachable.", v59, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      uint64_t v93 = v111;
      uint64_t v94 = (void *)swift_allocObject();
      uint64_t v95 = v110;
      v94[2] = v31;
      v94[3] = v95;
      uint64_t v96 = v112;
      v94[4] = v113;
      v94[5] = v96;
      void v94[6] = v109;
      v94[7] = v93;
      v94[8] = a1;
      swift_retain();
      swift_errorRetain();
      id v97 = v95;
      swift_unknownObjectRetain();
      swift_retain();
      sub_100140F30(v107, sub_10014B504, (uint64_t)v94);
      swift_errorRelease();
      return swift_release();
    }
    else
    {
      swift_retain();
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = (uint8_t *)swift_slowAlloc();
        v115[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v68 = 136315138;
        uint64_t v69 = v31 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName;
        uint64_t v70 = a1;
        uint64_t v71 = v31;
        uint64_t v72 = *(void *)(v31 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
        unint64_t v73 = *(void *)(v69 + 8);
        swift_bridgeObjectRetain();
        uint64_t v74 = v72;
        uint64_t v31 = v71;
        a1 = v70;
        uint64_t v114 = sub_100135190(v74, v73, v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "%s - Ending preflight.", v68, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      uint64_t v75 = type metadata accessor for TaskPriority();
      uint64_t v76 = (uint64_t)v106;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v106, 1, 1, v75);
      unint64_t v77 = (void *)swift_allocObject();
      v77[2] = 0;
      v77[3] = 0;
      uint64_t v78 = v110;
      uint64_t v77[4] = v110;
      v77[5] = a1;
      v77[6] = v31;
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      id v79 = v78;
      sub_100225A54(v76, (uint64_t)&unk_100328410, (uint64_t)v77);
      swift_release();
      swift_errorRelease();
      sub_1000C440C(0, 0, (char **)2);
      swift_errorRetain();
      v109(a1);
      swift_errorRelease();
      return swift_errorRelease();
    }
  }
  else
  {
    uint64_t v99 = v21;
    uint64_t v100 = v12;
    uint64_t v41 = v13;
    unint64_t v101 = (char *)v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v102 = v19;
    uint64_t v103 = v16;
    uint64_t v104 = v15;
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_100007288(v42, (uint64_t)qword_10033E790);
    uint64_t v43 = v108;
    swift_retain();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc();
      v98[1] = v41;
      uint64_t v47 = (uint8_t *)v46;
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136315138;
      v98[0] = v47 + 4;
      uint64_t v48 = *(void *)(v43 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v49 = *(void *)(v43 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v114 = sub_100135190(v48, v49, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s CRK repair successful. Proceeding to refetch records to preflight", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v50 = v111;
      swift_slowDealloc();

      uint64_t v51 = v43;
      uint64_t v52 = (uint64_t)v102;
    }
    else
    {

      swift_release();
      uint64_t v51 = v43;
      uint64_t v52 = (uint64_t)v102;
      uint64_t v50 = v111;
    }
    uint64_t v81 = v105;
    uint64_t v82 = (uint64_t)v101;
    uint64_t v83 = v99;
    (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v24, v51 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__custodianStorage, v20);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v24, v20);
    sub_100008EF8(v115, v115[3]);
    uint64_t v84 = type metadata accessor for CustodianRecord();
    uint64_t v85 = v107;
    uint64_t v86 = v103;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16))(v52, v107 + *(int *)(v84 + 20), v104);
    sub_100144170(v85, v82, type metadata accessor for CustodianshipRecords);
    unint64_t v87 = (*(unsigned __int8 *)(v100 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    uint64_t v88 = (void *)swift_allocObject();
    v88[2] = v51;
    v88[3] = v81;
    uint64_t v89 = v110;
    v88[4] = v106;
    v88[5] = v89;
    uint64_t v90 = v112;
    v88[6] = v113;
    v88[7] = v90;
    v88[8] = v109;
    v88[9] = v50;
    sub_1001445DC(v82, (uint64_t)v88 + v87, type metadata accessor for CustodianshipRecords);
    uint64_t v91 = swift_allocObject();
    *(void *)(v91 + 16) = sub_10014B428;
    *(void *)(v91 + 24) = v88;
    id v92 = v89;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_1002369EC(v52, (uint64_t)sub_100043AE8, v91);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v52, v104);
    return sub_100008EA8((uint64_t)v115);
  }
}

uint64_t sub_10013EB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), void *a7, void (*a8)(uint64_t), void (*a9)(uint64_t), uint64_t a10)
{
  uint64_t v54 = a6;
  uint64_t v55 = a8;
  uint64_t v51 = a7;
  uint64_t v52 = a5;
  uint64_t v12 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v16 = __chkstk_darwin(v12 - 8, v15);
  uint64_t v53 = (uint64_t)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v50 - v19;
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v50 - v22;
  uint64_t v24 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (uint64_t *)((char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v27, (uint64_t *)&unk_100322960);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = a2;
    uint64_t v54 = a9;
    uint64_t v29 = *v27;
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E790);
    uint64_t v31 = v53;
    sub_100144170(a10, v53, type metadata accessor for CustodianshipRecords);
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v51 = (void *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      uint64_t v57 = v52;
      *(_DWORD *)uint64_t v34 = 136315650;
      uint64_t v35 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v36 = *(void *)(v28 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v56 = sub_100135190(v35, v36, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      type metadata accessor for CustodianRecord();
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v56 = sub_100135190(v37, v38, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000(v31, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v34 + 22) = 2112;
      uint64_t v39 = _convertErrorToNSError(_:)();
      uint64_t v56 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      const char *v51 = v39;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s - error fetching health check record for %s: %@", (uint8_t *)v34, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000(v31, type metadata accessor for CustodianshipRecords);
      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v49 = v55;
    swift_errorRetain();
    v49(v29);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_1001445DC((uint64_t)v27, (uint64_t)v23, type metadata accessor for CustodianshipRecords);
    sub_100144170((uint64_t)v23, (uint64_t)v20, type metadata accessor for CustodianshipRecords);
    unint64_t v40 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    unint64_t v41 = (v14 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = swift_allocObject();
    uint64_t v43 = (void *)v52;
    *(void *)(v42 + 16) = a2;
    *(void *)(v42 + 24) = v43;
    sub_1001445DC((uint64_t)v20, v42 + v40, type metadata accessor for CustodianshipRecords);
    uint64_t v44 = (void (**)(uint64_t))(v42 + v41);
    os_log_type_t v45 = (void (*)(uint64_t))v51;
    NSObject *v44 = v54;
    v44[1] = v45;
    uint64_t v46 = (void (**)(uint64_t))(v42 + ((v41 + 23) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v46 = v55;
    v46[1] = a9;
    id v47 = v43;
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    sub_100148534((uint64_t)v23, (void (*)(uint64_t, uint64_t))sub_10014B8F8, (void (*)(uint64_t, uint64_t))v42);
    swift_release();
    return sub_10014B000((uint64_t)v23, type metadata accessor for CustodianshipRecords);
  }
}

uint64_t sub_10013F104(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void), uint64_t a9)
{
  uint64_t v55 = a7;
  uint64_t v57 = a6;
  uint64_t v14 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v16 = __chkstk_darwin(v14 - 8, v15);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v53 - v20;
  uint64_t v22 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v22 - 8, v23);
  uint64_t v25 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = (void *)swift_allocObject();
  void v27[2] = 0;
  v27[3] = 0;
  v27[4] = a4;
  void v27[5] = a2;
  v27[6] = a3;
  swift_retain();
  id v28 = a4;
  swift_errorRetain();
  sub_100225A54((uint64_t)v25, (uint64_t)&unk_100328430, (uint64_t)v27);
  swift_release();
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E790);
    sub_100144170(a5, (uint64_t)v18, type metadata accessor for CustodianshipRecords);
    swift_retain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v56 = a9;
    if (v32)
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v54 = a8;
      uint64_t v34 = v33;
      v58[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      uint64_t v35 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v36 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_100135190(v35, v36, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      type metadata accessor for CustodianRecord();
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v59 = sub_100135190(v37, v38, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v18, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s - Ending with failed preflight after a repair for custodian %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a8 = v54;
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v18, type metadata accessor for CustodianshipRecords);
    }

    uint64_t ObjectType = swift_getObjectType();
    _convertErrorToNSError(_:)();
    unint64_t v49 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t))(v55 + 32))(v58, ObjectType);
    uint64_t v51 = v50;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v49(v58, 0);
    sub_1000C440C(0, 1, (char **)6);
    swift_errorRetain();
    a8(a2);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100007288(v39, (uint64_t)qword_10033E790);
    sub_100144170(a5, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
    swift_retain();
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v56 = a9;
      uint64_t v43 = v42;
      v58[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315394;
      uint64_t v44 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v45 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_100135190(v44, v45, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      type metadata accessor for CustodianRecord();
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v59 = sub_100135190(v46, v47, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v21, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s - Ending with successful preflight after repair for custodian %s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v21, type metadata accessor for CustodianshipRecords);
    }

    sub_1000C440C(1, 1, (char **)5);
    return ((uint64_t (*)(void))a8)(0);
  }
}

uint64_t sub_10013F884(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8)
{
  uint64_t v52 = a4;
  uint64_t v15 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v51 = a5;
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E790);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v48 = a3;
      uint64_t v24 = (void *)v23;
      v53[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      unint64_t v47 = v18;
      uint64_t v49 = a7;
      uint64_t v50 = a6;
      uint64_t v26 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v25 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v54 = sub_100135190(v26, v25, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2112;
      swift_errorRetain();
      uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v54 = v27;
      uint64_t v18 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v27;
      a6 = v50;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s Mark as not reachable after failed CRK repair resulted in error %@. Ending preflight.", (uint8_t *)v22, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      a3 = v48;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v35 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v18, 1, 1, v35);
    unint64_t v36 = (void *)swift_allocObject();
    v36[2] = 0;
    uint64_t v36[3] = 0;
    v36[4] = a3;
    v36[5] = a1;
    v36[6] = a2;
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    id v37 = a3;
    sub_100225A54((uint64_t)v18, (uint64_t)&unk_100328420, (uint64_t)v36);
    swift_release();
    swift_errorRelease();
    uint64_t ObjectType = swift_getObjectType();
    _convertErrorToNSError(_:)();
    uint64_t v39 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t))(v51 + 32))(v53, ObjectType);
    os_log_type_t v41 = v40;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v39(v53, 0);
    sub_1000C440C(0, 0, (char **)2);
    swift_errorRetain();
    a6(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E790);
    swift_retain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v50 = a6;
      os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v48 = a3;
      v53[0] = v32;
      unint64_t v47 = v18;
      *(_DWORD *)os_log_type_t v31 = 136315138;
      uint64_t v49 = a7;
      uint64_t v33 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v34 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v54 = sub_100135190(v33, v34, v53);
      a6 = v50;
      uint64_t v18 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s Successfully marked custodian as not reachable after failed CRK repair. Stopping preflight.", v31, 0xCu);
      swift_arrayDestroy();
      a3 = v48;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v43 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v18, 1, 1, v43);
    uint64_t v44 = (void *)swift_allocObject();
    v44[2] = 0;
    v44[3] = 0;
    _DWORD v44[4] = a3;
    id v44[5] = a8;
    v44[6] = a2;
    id v45 = a3;
    swift_retain();
    swift_errorRetain();
    sub_100225A54((uint64_t)v18, (uint64_t)&unk_100328418, (uint64_t)v44);
    swift_release();
    sub_1000C440C(0, 0, (char **)2);
    return ((uint64_t (*)(uint64_t))a6)(a8);
  }
}

uint64_t sub_10013FF58(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t), uint64_t a8)
{
  uint64_t v57 = a8;
  os_log_type_t v58 = a7;
  uint64_t v55 = a5;
  uint64_t v56 = a6;
  int v59 = a1;
  uint64_t v54 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v12 = __chkstk_darwin(v54, v11);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v48 - v16;
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = sub_100007288(v18, (uint64_t)qword_10033E790);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v50 = v19;
    uint64_t v51 = a4;
    uint64_t v52 = v17;
    uint64_t v53 = (uint64_t)v14;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    v61[0] = v49;
    *(_DWORD *)uint64_t v22 = 136315650;
    uint64_t v25 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v24 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_100135190(v25, v24, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 1024;
    LODWORD(v60) = v59 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 18) = 2112;
    if (a2)
    {
      swift_errorRetain();
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v60 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      uint64_t v60 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v26 = 0;
    }
    void *v23 = v26;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s CRK exists on OT? %{BOOL}d error: %@", (uint8_t *)v22, 0x1Cu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v17 = v52;
    uint64_t v14 = (char *)v53;
    a4 = v51;
    if (!a2) {
      goto LABEL_15;
    }
  }
  else
  {
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();

    if (!a2)
    {
LABEL_15:
      sub_100144170(a4, (uint64_t)v17, type metadata accessor for CustodianshipRecords);
      swift_retain();
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = swift_slowAlloc();
        v61[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 136315650;
        uint64_t v43 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
        unint64_t v44 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
        swift_bridgeObjectRetain();
        uint64_t v60 = sub_100135190(v43, v44, v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 12) = 2080;
        type metadata accessor for CustodianRecord();
        type metadata accessor for UUID();
        sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v60 = sub_100135190(v45, v46, v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10014B000((uint64_t)v17, type metadata accessor for CustodianshipRecords);
        *(_WORD *)(v42 + 22) = 1024;
        LODWORD(v60) = v59 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s - custodian %s check recovery key exists: %{BOOL}d", (uint8_t *)v42, 0x1Cu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
        sub_10014B000((uint64_t)v17, type metadata accessor for CustodianshipRecords);
      }

      return v58(v59 & 1, a2);
    }
  }
  sub_100144170(a4, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
  swift_errorRetain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    os_log_type_t v30 = (void *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    v61[0] = v53;
    *(_DWORD *)uint64_t v29 = 136315906;
    uint64_t v31 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v32 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_100135190(v31, v32, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    type metadata accessor for CustodianHealthRecord();
    type metadata accessor for UUID();
    sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v60 = sub_100135190(v33, v34, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10014B000((uint64_t)v14, type metadata accessor for CustodianshipRecords);
    *(_WORD *)(v29 + 22) = 2112;
    uint64_t v35 = _convertErrorToNSError(_:)();
    uint64_t v60 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v30 = v35;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v29 + 32) = 1024;
    LODWORD(v60) = v59 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s - Check custodian recovery failed for custodian %s with error: %@ exists: %{BOOL}d\"", (uint8_t *)v29, 0x26u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    sub_10014B000((uint64_t)v14, type metadata accessor for CustodianshipRecords);
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t ObjectType = swift_getObjectType();
  _convertErrorToNSError(_:)();
  id v37 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t))(v56 + 32))(v61, ObjectType);
  uint64_t v39 = v38;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v37(v61, 0);
  swift_errorRelease();
  return v58(v59 & 1, a2);
}

uint64_t sub_1001408C0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v40 - v16;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E790);
    sub_100144170(a3, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v43 = a5;
      uint64_t v22 = v21;
      uint64_t v23 = (void *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v45 = v41;
      *(_DWORD *)uint64_t v22 = 136315650;
      uint64_t v42 = a4;
      uint64_t v24 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v25 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_100135190(v24, v25, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      type metadata accessor for CustodianRecord();
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v44 = sub_100135190(v26, v27, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v22 + 22) = 2112;
      uint64_t v28 = _convertErrorToNSError(_:)();
      uint64_t v44 = v28;
      a4 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v23 = v28;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - error repairing recovery keys for %s: %@.", (uint8_t *)v22, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a4(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E790);
    sub_100144170(a3, (uint64_t)v17, type metadata accessor for CustodianshipRecords);
    swift_retain();
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v43 = a5;
      uint64_t v45 = v33;
      *(_DWORD *)uint64_t v32 = 136315394;
      unint64_t v34 = a4;
      uint64_t v35 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v36 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_100135190(v35, v36, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      type metadata accessor for CustodianRecord();
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v44 = sub_100135190(v37, v38, &v45);
      a4 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v17, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s - recovery key repair was successful for %s.", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v17, type metadata accessor for CustodianshipRecords);
    }

    return ((uint64_t (*)(void))a4)(0);
  }
}

uint64_t sub_100140F30(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v81 = a3;
  uint64_t v76 = a2;
  uint64_t v6 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v6 - 8, v7);
  id v79 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v78 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for CustodianRecord();
  uint64_t v12 = *(void *)(v83 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v15 = __chkstk_darwin(v83, v14);
  uint64_t v80 = (uint64_t)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)&v70 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v77 = (uint64_t)&v70 - v21;
  uint64_t v22 = (uint64_t (*)(void))sub_100009F04(&qword_100322950);
  uint64_t v74 = *((void *)v22 - 1);
  uint64_t v75 = (uint64_t (*)())v22;
  __chkstk_darwin(v22, v23);
  unint64_t v25 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v84 = v19;
  uint64_t v30 = type metadata accessor for Logger();
  sub_100007288(v30, (uint64_t)qword_10033E790);
  uint64_t v82 = a1;
  sub_100144170(a1, (uint64_t)v29, type metadata accessor for CustodianshipRecords);
  swift_retain();
  os_log_type_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    v86[0] = v71;
    *(_DWORD *)uint64_t v33 = 136315394;
    uint64_t v72 = v12;
    uint64_t v73 = v4;
    uint64_t v35 = *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v34 = *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    uint64_t v85 = sub_100135190(v35, v34, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    type metadata accessor for CustodianHealthRecord();
    type metadata accessor for UUID();
    sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v85 = sub_100135190(v36, v37, v86);
    uint64_t v12 = v72;
    uint64_t v4 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10014B000((uint64_t)v29, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - marking custodian %s as Not reachable.", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    sub_10014B000((uint64_t)v29, type metadata accessor for CustodianshipRecords);
  }

  uint64_t v73 = swift_allocObject();
  *(void *)(v73 + 16) = 3;
  uint64_t v39 = v74;
  unint64_t v38 = v75;
  (*(void (**)(char *, uint64_t, uint64_t (*)()))(v74 + 16))(v25, v4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__storageController, v75);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t (*)()))(v39 + 8))(v25, v38);
  uint64_t v40 = sub_100008EF8(v86, v86[3]);
  uint64_t v41 = v82;
  uint64_t v42 = v77;
  sub_100144170(v82, v77, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v43 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v44 = (v43 + 24) & ~v43;
  uint64_t v72 = v43 | 7;
  uint64_t v74 = v13 + 7;
  unint64_t v45 = (v13 + 7 + v44) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = v4;
  uint64_t v75 = type metadata accessor for CustodianRecord;
  sub_1001445DC(v42, v46 + v44, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  *(void *)(v46 + v45) = 3;
  unint64_t v47 = (void *)(v46 + ((v45 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v48 = v81;
  *unint64_t v47 = v76;
  v47[1] = v48;
  uint64_t v49 = *v40;
  uint64_t v76 = sub_100008EF8((void *)(v49 + 56), *(void *)(v49 + 80));
  sub_100144170(v41, v42, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v50 = type metadata accessor for UUID();
  uint64_t v51 = (uint64_t)v78;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v78, 1, 1, v50);
  uint64_t v52 = type metadata accessor for Date();
  uint64_t v53 = (uint64_t)v79;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v79, 1, 1, v52);
  swift_retain();
  uint64_t v54 = v73;
  swift_retain();
  swift_retain();
  uint64_t v55 = (uint64_t)v84;
  sub_1000A83E8(v42, 0, 0, 3, 0, 0, 0xF000000000000000, 2u, (uint64_t)v84, v51, 0, 0, v53, 0);
  uint64_t v56 = v41;
  uint64_t v57 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v54;
  uint64_t v58 = v80;
  sub_100144170(v56, v80, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v59 = (v43 + 48) & ~v43;
  unint64_t v60 = (v74 + v59) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v61 = (void *)swift_allocObject();
  v61[2] = v49;
  v61[3] = sub_1001441DC;
  uint64_t v61[4] = v46;
  v61[5] = 0;
  sub_1001445DC(v58, (uint64_t)v61 + v59, (uint64_t (*)(void))v75);
  uint64_t v62 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v61 + v60);
  *uint64_t v62 = sub_100144168;
  v62[1] = v57;
  uint64_t v63 = qword_100320CC8;
  swift_retain();
  swift_retain();
  swift_retain();
  if (v63 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(v55 + *(int *)(v83 + 48)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    unint64_t v64 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    unint64_t v64 = &qword_10033E9F8;
  }
  uint64_t v66 = *v64;
  unint64_t v65 = v64[1];
  swift_bridgeObjectRetain();
  id v67 = sub_10028CC20(v66, v65);
  id v68 = [v67 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_1000667EC(v55, v68, (uint64_t)sub_1001441E4, (uint64_t)v61);
  swift_release();

  sub_10014B000(v55, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  swift_release();
  swift_release_n();
  return sub_100008EA8((uint64_t)v86);
}

uint64_t sub_10014185C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v37 - v16;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E790);
    sub_100144170(a3, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v40 = a4;
      uint64_t v22 = v21;
      unint64_t v37 = (void *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      uint64_t v42 = v38;
      *(_DWORD *)uint64_t v22 = 136315650;
      uint64_t v39 = a5;
      uint64_t v24 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v23 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_100135190(v24, v23, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = sub_100135190(v25, v26, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v22 + 22) = 2112;
      uint64_t v27 = _convertErrorToNSError(_:)();
      uint64_t v41 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v37 = v27;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - failed to mark custodian %s as accepted. Error: %@", (uint8_t *)v22, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v40;
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a4(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E790);
    sub_100144170(a3, (uint64_t)v17, type metadata accessor for CustodianshipRecords);
    swift_retain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v42 = v39;
      *(_DWORD *)uint64_t v31 = 136315394;
      uint64_t v40 = a4;
      uint64_t v32 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v33 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_100135190(v32, v33, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = sub_100135190(v34, v35, &v42);
      a4 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v17, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - successfully marked custodian %s as accepted.", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v17, type metadata accessor for CustodianshipRecords);
    }

    return ((uint64_t (*)(void))a4)(0);
  }
}

uint64_t sub_100141EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100144170(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v13, 1, 1, v18);
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 1, 1, v19);
  return sub_1000A83E8((uint64_t)v17, 0, 0, a2, 0, 0, 0xF000000000000000, 2u, a3, (uint64_t)v13, 0, 0, (uint64_t)v9, 0);
}

uint64_t sub_1001420DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v42 = a4;
  uint64_t v11 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04(&qword_10032E140);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (uint64_t *)((char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v18, &qword_10032E140);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E790);
    swift_retain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v43 = a6;
      uint64_t v25 = (void *)v24;
      uint64_t v41 = swift_slowAlloc();
      uint64_t v45 = v41;
      *(_DWORD *)uint64_t v23 = 136315650;
      unint64_t v26 = a5;
      uint64_t v27 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v28 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_100135190(v27, v28, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      a5 = v26;
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2048;
      uint64_t v44 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2112;
      uint64_t v29 = _convertErrorToNSError(_:)();
      uint64_t v44 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v25 = v29;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - error marking custodian record with status %ld: %@", (uint8_t *)v23, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      swift_errorRelease();
    }

    swift_errorRetain();
    a5(v19);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v43 = a6;
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E790);
    sub_100144170(a3, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_retain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v41 = (uint64_t)a5;
      uint64_t v34 = v33;
      uint64_t v40 = swift_slowAlloc();
      uint64_t v45 = v40;
      *(_DWORD *)uint64_t v34 = 136315650;
      uint64_t v36 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v35 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_100135190(v36, v35, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v44 = sub_100135190(v37, v38, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_WORD *)(v34 + 22) = 2048;
      uint64_t v44 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - custodian %s has been updated with status %ld.", (uint8_t *)v34, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a5 = (void (*)(void))v41;
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }

    [self postRecoveryContactChangedNotification];
    a5(0);
    return sub_100006574((uint64_t)v18, &qword_10032E140);
  }
}

id sub_10014270C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v34 = a3;
  uint64_t v7 = sub_100009F04(&qword_100323190);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100009F04(&qword_100325870);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore, v12);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  id v17 = [[*(id *)(*sub_100008EF8(v35, v35[3]) + 16) aa_primaryAppleAccount];
  if (!v17
    || (uint64_t v18 = v17, v19 = objc_msgSend(v17, "aa_altDSID"), v18, !v19))
  {
    sub_100008EA8((uint64_t)v35);
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E790);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Account is nil. Not reporting Preflight Event.", v29, 2u);
      swift_slowDealloc();
    }
    id v23 = 0;
    goto LABEL_13;
  }
  uint64_t v33 = a4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100008EA8((uint64_t)v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsEventFactory, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v23 = [self analyticsEventWithName:v20 altDSID:v21 flowID:v22];
  swift_bridgeObjectRelease();

  sub_100008EA8((uint64_t)v35);
  if (v23)
  {
    if (v33)
    {
      id v24 = v23;
      NSString v25 = String._bridgeToObjectiveC()();
    }
    else
    {
      id v30 = v23;
      NSString v25 = 0;
    }
    sub_10000850C(0, &qword_1003283D0);
    uint64_t v27 = NSString.init(stringLiteral:)();
    [v23 setObject:v25 forKeyedSubscript:v27];

    swift_unknownObjectRelease();
LABEL_13:
  }
  return v23;
}

uint64_t sub_100142B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[11] = a4;
  uint64_t v7 = sub_100009F04(&qword_100322CF0);
  v6[14] = v7;
  v6[15] = *(void *)(v7 - 8);
  v6[16] = swift_task_alloc();
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v6[17] = v8;
  v6[18] = *(void *)(v8 - 8);
  v6[19] = swift_task_alloc();
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_100321CB0);
  v6[20] = v9;
  v6[21] = *(void *)(v9 - 8);
  v6[22] = swift_task_alloc();
  return _swift_task_switch(sub_100142CF8, 0, 0);
}

uint64_t sub_100142CF8()
{
  uint64_t v1 = (void *)v0[11];
  if (v1)
  {
    uint64_t v2 = (void *)v0[12];
    id v3 = v1;
    if (v2) {
      uint64_t v2 = (void *)_convertErrorToNSError(_:)();
    }
    [v1 updateTaskResultWithError:v2];

    swift_retain();
    id v6 = sub_100221E10();
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v9 = v0[21];
      uint64_t v8 = v0[22];
      uint64_t v10 = v0[20];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v0[13] + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__akAccountManager, v10);
      Dependency.wrappedValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      uint64_t v11 = (void *)v0[10];
      [v11 securityLevelForAccount:v7];
    }
    swift_release();
    uint64_t v13 = v0[18];
    uint64_t v12 = v0[19];
    uint64_t v14 = v0[17];
    uint64_t v15 = v0[13];
    uint64_t v16 = (void *)v0[11];
    Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
    [v1 setObject:isa forKeyedSubscript:kAAAnalyticsSecurityLevel];

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v15 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__cdpController, v14);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    sub_100056834();
    Class v18 = Bool._bridgeToObjectiveC()().super.super.isa;
    sub_100008EA8((uint64_t)(v0 + 2));
    [v1 setObject:v18 forKeyedSubscript:kAAAnalyticsCdpStatus];

    id v19 = v1;
    sub_1002224AC(v16);
    NSString v22 = (uint64_t (*)(uint64_t))((char *)&dword_10032DC18 + dword_10032DC18);
    NSString v20 = (void *)swift_task_alloc();
    v0[23] = v20;
    void *v20 = v0;
    v20[1] = sub_100142FF4;
    uint64_t v21 = v0[11];
    return v22(v21);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100142FF4()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 88);
  swift_task_dealloc();

  return _swift_task_switch(sub_100143108, 0, 0);
}

uint64_t sub_100143108()
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_10032DC10 + dword_10032DC10);
  id v1 = *(id *)(v0 + 88);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001431C0;
  uint64_t v3 = *(void *)(v0 + 88);
  return v5(v3);
}

uint64_t sub_1001431C0()
{
  id v1 = *(void **)(*(void *)v0 + 88);
  swift_task_dealloc();

  return _swift_task_switch(sub_1001432D4, 0, 0);
}

uint64_t sub_1001432D4()
{
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  id v1 = *(void **)(v0 + 88);
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E790);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(NSObject **)(v0 + 88);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v0 + 72) = v7;
    uint64_t v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Reporting Preflight Event %@", v8, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v4 = v7;
  }

  uint64_t v12 = *(void *)(v0 + 120);
  uint64_t v11 = *(void *)(v0 + 128);
  uint64_t v13 = *(void *)(v0 + 112);
  uint64_t v14 = *(void **)(v0 + 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, *(void *)(v0 + 104) + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsRTCReporter, v13);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  [*(id *)(v0 + 56) sendEvent:v14];
  swift_unknownObjectRelease();
  id v15 = v14;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  id v19 = *(NSObject **)(v0 + 88);
  if (v18)
  {
    NSString v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = (void *)swift_slowAlloc();
    *(_DWORD *)NSString v20 = 138412290;
    *(void *)(v0 + 64) = v19;
    NSString v22 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v21 = v19;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Reported Preflight Event successfully %@", v20, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v16 = v19;
    NSString v22 = v19;
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_10014366C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__custodianStorage;
  uint64_t v2 = sub_100009F04(&qword_100321FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__securityController;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100322970);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsEventFactory;
  uint64_t v6 = sub_100009F04(&qword_100323190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsRTCReporter;
  uint64_t v8 = sub_100009F04(&qword_100322CF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__ttrRequester;
  uint64_t v10 = sub_100009F04(&qword_100325358);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__urlBagProvider;
  uint64_t v12 = sub_100009F04(&qword_100321CD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__storageController;
  uint64_t v14 = sub_100009F04(&qword_100322950);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__keyRepair;
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_100328400);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore;
  uint64_t v18 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__followUpController;
  uint64_t v20 = sub_100009F04((uint64_t *)&unk_100321D50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  uint64_t v21 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__akAccountManager;
  uint64_t v22 = sub_100009F04((uint64_t *)&unk_100321CB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
  uint64_t v23 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__cdpController;
  uint64_t v24 = sub_100009F04((uint64_t *)&unk_1003228A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100143A20()
{
  sub_10014366C();

  return swift_deallocClassInstance();
}

uint64_t sub_100143A78()
{
  return type metadata accessor for CustodianPreflightHealthCheck();
}

uint64_t type metadata accessor for CustodianPreflightHealthCheck()
{
  uint64_t result = qword_100327F20;
  if (!qword_100327F20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100143ACC()
{
  sub_10001BF34(319, (unint64_t *)&qword_100327F30, &qword_100322470);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&unk_100327F40, (uint64_t *)&unk_100322460);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, qword_100323030, (uint64_t *)&unk_1003224C0);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, qword_100322D60, (uint64_t *)&unk_100322530);
        if (v3 <= 0x3F)
        {
          sub_10001BF34(319, (unint64_t *)&unk_100327F50, &qword_100325150);
          if (v4 <= 0x3F)
          {
            sub_10001BF34(319, (unint64_t *)&unk_100327F60, &qword_100320D40);
            if (v5 <= 0x3F)
            {
              sub_10001BF34(319, (unint64_t *)&unk_100327F70, &qword_100322490);
              if (v6 <= 0x3F)
              {
                sub_10001BF34(319, (unint64_t *)&unk_100324070, &qword_10032D780);
                if (v7 <= 0x3F)
                {
                  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
                  if (v8 <= 0x3F)
                  {
                    sub_10001BF34(319, (unint64_t *)&unk_100327F80, (uint64_t *)&unk_100321900);
                    if (v9 <= 0x3F)
                    {
                      sub_1000F7C68();
                      if (v10 <= 0x3F)
                      {
                        sub_10001BF34(319, qword_100327FA0, (uint64_t *)&unk_100321910);
                        if (v11 <= 0x3F) {
                          swift_updateClassMetadata2();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100143ECC()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100143F0C(uint64_t a1, uint64_t a2)
{
  return sub_100143F34(a1, a2, (uint64_t *)&unk_1003228A0, &OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__cdpController);
}

uint64_t sub_100143F20(uint64_t a1, uint64_t a2)
{
  return sub_100143F34(a1, a2, &qword_100325870, &OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore);
}

uint64_t sub_100143F34(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v6 = sub_100009F04(a3);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v7 + 16))(v10, *v4 + *a4, v6);
  Dependency.wrappedValue.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_100144034()
{
  uint64_t v1 = sub_100009F04((uint64_t *)&unk_100321CB0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  unint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, *v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__akAccountManager, v1);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v7[1];
}

uint64_t sub_100144134(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  return sub_100136634(a1, a2, a3, a4);
}

uint64_t sub_100144158()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100144168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100141EF0(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100144170(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001441E8()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v27 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v25 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v26 = (v27 + 24) & ~v27;
  uint64_t v2 = v0 + v26;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v26, v3);
  uint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v26 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(v0 + v26 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  unint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v24 = v1;
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v24 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  unint64_t v22 = (((((v25 + v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v27 | 7);
}

uint64_t sub_1001445DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100144644(char a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_10013DB2C(a1, a2, *(void *)(v2 + 16), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void *)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(uint64_t))(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(uint64_t))(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100144728(uint64_t a1, uint64_t a2)
{
  return sub_100144800(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_10014499C);
}

uint64_t sub_100144794(uint64_t a1, uint64_t a2)
{
  return sub_100144800(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100144CAC);
}

uint64_t sub_100144800(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = isStackAllocationSafe;
  char v6 = *(unsigned char *)(a2 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a3((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5, a2);
    swift_release();
  }
  else
  {
    unint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = a3((char *)v10, v7, v5, a2);
    swift_release();
    swift_slowDealloc();
  }
  return v9;
}

uint64_t sub_10014499C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a3 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(a3 + 64);
  int64_t v36 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v39 = a4 + 56;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  int64_t v9 = 0;
LABEL_5:
  uint64_t v33 = v8;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_25;
    }
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v12 >= v36) {
      goto LABEL_46;
    }
    unint64_t v13 = *(void *)(v35 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v36) {
        goto LABEL_46;
      }
      unint64_t v13 = *(void *)(v35 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v36) {
          goto LABEL_46;
        }
        unint64_t v13 = *(void *)(v35 + 8 * v9);
        if (!v13)
        {
          int64_t v9 = v12 + 3;
          if (v12 + 3 >= v36) {
            goto LABEL_46;
          }
          unint64_t v13 = *(void *)(v35 + 8 * v9);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_25:
    uint64_t v15 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v20 = v18 & ~v19;
    unint64_t v21 = v20 >> 6;
    uint64_t v22 = 1 << v20;
    if (((1 << v20) & *(void *)(v39 + 8 * (v20 >> 6))) == 0) {
      goto LABEL_6;
    }
    uint64_t v23 = *(void *)(a4 + 48);
    uint64_t v24 = (void *)(v23 + 16 * v20);
    BOOL v25 = *v24 == v17 && v24[1] == v16;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRelease();
LABEL_32:
      unint64_t v26 = a1[v21];
      a1[v21] = v22 | v26;
      if ((v22 & v26) == 0)
      {
        uint64_t v8 = v33 + 1;
        if (!__OFADD__(v33, 1)) {
          goto LABEL_5;
        }
        __break(1u);
LABEL_46:
        swift_release();
        swift_retain();
        return sub_100144EC0(a1, a2, v33, a4);
      }
    }
    else
    {
      uint64_t v27 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v29 + 1)
      {
        unint64_t v29 = i & v27;
        if (((*(void *)(v39 + (((i & v27) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v27)) & 1) == 0) {
          break;
        }
        id v30 = (void *)(v23 + 16 * v29);
        BOOL v31 = *v30 == v17 && v30[1] == v16;
        if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v21 = v29 >> 6;
          uint64_t v22 = 1 << v29;
          goto LABEL_32;
        }
      }
LABEL_6:
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v36) {
    goto LABEL_46;
  }
  unint64_t v13 = *(void *)(v35 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v36) {
      goto LABEL_46;
    }
    unint64_t v13 = *(void *)(v35 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_100144CAC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  uint64_t v31 = *(void *)(a3 + 16);
  if (!v31)
  {
    uint64_t v26 = 0;
    goto LABEL_27;
  }
  uint64_t v32 = a4 + 56;
  uint64_t v30 = a3 + 32;
  swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  for (uint64_t i = 0; i != v31; ++i)
  {
    unint64_t v7 = (uint64_t *)(v30 + 16 * i);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v12 = v10 & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = 1 << v12;
    if (((1 << v12) & *(void *)(v32 + 8 * (v12 >> 6))) == 0) {
      goto LABEL_3;
    }
    uint64_t v15 = *(void *)(a4 + 48);
    uint64_t v16 = (void *)(v15 + 16 * v12);
    BOOL v17 = *v16 == v9 && v16[1] == v8;
    if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v21 = ~v11;
      for (unint64_t j = v12 + 1; ; unint64_t j = v23 + 1)
      {
        unint64_t v23 = j & v21;
        if (((*(void *)(v32 + (((j & v21) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v21)) & 1) == 0) {
          break;
        }
        uint64_t v24 = (void *)(v15 + 16 * v23);
        BOOL v25 = *v24 == v9 && v24[1] == v8;
        if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v13 = v23 >> 6;
          uint64_t v14 = 1 << v23;
          goto LABEL_12;
        }
      }
LABEL_3:
      swift_bridgeObjectRelease();
      continue;
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_12:
    unint64_t v19 = a1[v13];
    a1[v13] = v14 | v19;
    if ((v14 & v19) == 0 && __OFADD__(v28++, 1))
    {
      __break(1u);
      return result;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = a2;
  uint64_t v26 = v28;
LABEL_27:
  swift_retain();
  return sub_100144EC0(a1, v5, v26, a4);
}

uint64_t sub_100144EC0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100009F04(&qword_100328438);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    BOOL v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t *sub_100145158(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = (unint64_t *)isStackAllocationSafe;
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    unint64_t v7 = sub_1001452B0((unint64_t *)((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, (uint64_t)v3);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v7;
    }
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v3 = sub_1001452B0((unint64_t *)v8, v5, (uint64_t)v3);
    swift_slowDealloc();
  }
  return v3;
}

unint64_t *sub_1001452B0(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      return (unint64_t *)sub_1001453FC(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (unint64_t *)sub_1001453FC(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (unint64_t *)sub_1001453FC(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if ((*(unsigned char *)(*(void *)(a3 + 56) + v12) & 1) == 0)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1001453FC(result, a2, v4, a3);
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return (unint64_t *)sub_1001453FC(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)sub_1001453FC(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1001453FC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100009F04(&qword_100328488);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v31) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v31) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v31) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v31) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v31) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    BOOL v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    char v20 = *(unsigned char *)(*(void *)(v4 + 56) + v13);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    unint64_t v29 = (void *)(*(void *)(v8 + 48) + 16 * v24);
    *unint64_t v29 = v19;
    v29[1] = v18;
    *(unsigned char *)(*(void *)(v8 + 56) + v24) = v20;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1001456A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a2;
  uint64_t v29 = type metadata accessor for CustodianRecord();
  uint64_t v7 = __chkstk_darwin(v29, v6);
  unint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  unint64_t v13 = (char *)&v26 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v17 = *(void *)(v11 + 72);
    uint64_t v26 = v3;
    uint64_t v27 = (v16 + 32) & ~v16;
    uint64_t v18 = a1 + v27;
    uint64_t v19 = v28;
    while (1)
    {
      sub_100144170(v18, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      if (UUID.uuidString.getter() == v19 && v20 == a3) {
        break;
      }
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v22) {
        goto LABEL_12;
      }
      sub_10014B000((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
LABEL_4:
      v18 += v17;
      if (!--v15) {
        return v30;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    sub_1001445DC((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    unint64_t v23 = v30;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100228A18(0, v23[2] + 1, 1);
      unint64_t v23 = v30;
    }
    unint64_t v25 = v23[2];
    unint64_t v24 = v23[3];
    if (v25 >= v24 >> 1)
    {
      sub_100228A18(v24 > 1, v25 + 1, 1);
      unint64_t v23 = v30;
    }
    void v23[2] = v25 + 1;
    sub_1001445DC((uint64_t)v9, (uint64_t)v23 + v27 + v25 * v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v19 = v28;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_100145914(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v6 = result;
  int64_t v7 = 0;
  uint64_t v8 = *(void *)(result + 64);
  uint64_t v27 = result + 64;
  uint64_t v9 = 1 << *(unsigned char *)(result + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v28 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = _swiftEmptyArrayStorage;
  if ((v10 & v8) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v7++, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v7 >= v28) {
    goto LABEL_33;
  }
  unint64_t v16 = *(void *)(v27 + 8 * v7);
  if (v16) {
    goto LABEL_19;
  }
  int64_t v17 = v7 + 1;
  if (v7 + 1 >= v28) {
    goto LABEL_33;
  }
  unint64_t v16 = *(void *)(v27 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v7 = v17;
LABEL_19:
    unint64_t v11 = (v16 - 1) & v16;
    for (unint64_t i = __clz(__rbit64(v16)) + (v7 << 6); ; unint64_t i = v13 | (v7 << 6))
    {
      uint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * i);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      v29[0] = *v18;
      v29[1] = v20;
      swift_bridgeObjectRetain();
      BOOL v21 = sub_100139B60(v29, v5, v4);
      if (v3) {
        break;
      }
      if (v21)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v30 = v12;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_100228924(0, v12[2] + 1, 1);
          uint64_t v12 = v30;
        }
        unint64_t v23 = v12[2];
        unint64_t v22 = v12[3];
        if (v23 >= v22 >> 1)
        {
          uint64_t result = sub_100228924(v22 > 1, v23 + 1, 1);
          uint64_t v12 = v30;
        }
        void v12[2] = v23 + 1;
        unint64_t v24 = &v12[2 * v23];
        v24[4] = v19;
        v24[5] = v20;
        uint64_t v5 = a2;
        uint64_t v4 = a3;
        if (!v11) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
        if (!v11) {
          goto LABEL_7;
        }
      }
LABEL_6:
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  int64_t v17 = v7 + 2;
  if (v7 + 2 >= v28)
  {
LABEL_33:
    swift_release();
    return (uint64_t)v12;
  }
  unint64_t v16 = *(void *)(v27 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v7 + 3;
  if (v7 + 3 >= v28) {
    goto LABEL_33;
  }
  unint64_t v16 = *(void *)(v27 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v7 + 4;
  if (v7 + 4 >= v28) {
    goto LABEL_33;
  }
  unint64_t v16 = *(void *)(v27 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v7 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v7 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v27 + 8 * v7);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100145B8C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_100321D50);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  unint64_t v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v17 = (void *)swift_allocObject();
  v17[2] = a2;
  v17[3] = a3;
  uint64_t v100 = a3;
  uint64_t v101 = a5;
  v17[4] = a4;
  void v17[5] = a5;
  v17[6] = a6;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v92 = a1 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__followUpController;
  uint64_t v93 = v13 + 16;
  uint64_t v91 = v18;
  ((void (*)(char *))v18)(v16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  Dependency.wrappedValue.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v94 = v16;
  uint64_t v96 = v12;
  uint64_t v95 = v13 + 8;
  uint64_t v90 = v19;
  v19(v16, v12);
  uint64_t v20 = v111;
  uint64_t v21 = v112;
  sub_100008EF8(&v110, v111);
  uint64_t v22 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v21 + 64))(AAFollowUpIdentifierCustodianReview, v20, v21);
  uint64_t v102 = a2;
  if (!v22)
  {
    sub_100008EA8((uint64_t)&v110);
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_100007288(v37, (uint64_t)qword_10033E790);
    swift_retain();
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v99 = a4;
      uint64_t v110 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      uint64_t v98 = a6;
      uint64_t v42 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v43 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      *(void *)&long long v107 = sub_100135190(v42, v43, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      a6 = v98;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - No pending custodian review follow up found", v40, 0xCu);
      swift_arrayDestroy();
      a4 = v99;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    sub_100136860(0, 0, v102, v100, a4, v101, a6);
    return swift_release();
  }
  uint64_t v23 = v22;
  sub_100008EA8((uint64_t)&v110);
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = sub_100007288(v24, (uint64_t)qword_10033E790);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  id v97 = v17;
  uint64_t v98 = a6;
  uint64_t v99 = a4;
  if (v28)
  {
    uint64_t v29 = v23;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v105 = swift_slowAlloc();
    uint64_t v110 = v105;
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v31 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v32 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    *(void *)&long long v107 = sub_100135190(v31, v32, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_100009F04((uint64_t *)&unk_1003284A0);
    uint64_t v33 = Array.description.getter();
    uint64_t v34 = a1;
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    *(void *)&long long v107 = sub_100135190(v33, v36, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a1 = v34;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - Pending custodian review follow up userInfo dictionaries: %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v23 = v29;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  BOOL v109 = &_swiftEmptySetSingleton;
  uint64_t v105 = *(void *)(v23 + 16);
  if (v105)
  {
    uint64_t v88 = a1;
    uint64_t v89 = v25;
    uint64_t v104 = v23 + 32;
    uint64_t v87 = v23;
    swift_bridgeObjectRetain();
    type metadata accessor for AAFollowUpUserInfo(0);
    sub_1000070DC((unint64_t *)&qword_100321168, type metadata accessor for AAFollowUpUserInfo);
    uint64_t v44 = 0;
    uint64_t v103 = (char *)&type metadata for Any + 8;
    while (1)
    {
      uint64_t v45 = *(void *)(v104 + 8 * v44);
      uint64_t v46 = (void *)AAFollowUpTrustedContactIDs;
      *(void *)&long long v107 = AAFollowUpTrustedContactIDs;
      swift_bridgeObjectRetain();
      id v47 = v46;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v45 + 16) && (unint64_t v48 = sub_100135A98((uint64_t)&v110), (v49 & 1) != 0))
      {
        sub_100047DD4(*(void *)(v45 + 56) + 32 * v48, (uint64_t)&v107);
      }
      else
      {
        long long v107 = 0u;
        long long v108 = 0u;
      }
      sub_100098CF0((uint64_t)&v110);
      if (*((void *)&v108 + 1))
      {
        sub_100009F04((uint64_t *)&unk_100328450);
        if (swift_dynamicCast())
        {
          uint64_t v50 = v106;
          uint64_t v51 = v106[2];
          if (v51) {
            goto LABEL_24;
          }
          goto LABEL_13;
        }
      }
      else
      {
        sub_100006574((uint64_t)&v107, &qword_100328490);
      }
      uint64_t v50 = _swiftEmptyArrayStorage;
      uint64_t v51 = _swiftEmptyArrayStorage[2];
      if (v51)
      {
LABEL_24:
        uint64_t v52 = v50 + 5;
        do
        {
          Swift::Int v53 = *(v52 - 1);
          Swift::Int v54 = *v52;
          swift_bridgeObjectRetain();
          sub_10027FE90(&v110, v53, v54);
          swift_bridgeObjectRelease();
          v52 += 2;
          --v51;
        }
        while (v51);
      }
LABEL_13:
      swift_bridgeObjectRelease();
      ++v44;
      swift_bridgeObjectRelease();
      if (v44 == v105)
      {
        swift_bridgeObjectRelease_n();
        a1 = v88;
        goto LABEL_29;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_29:
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v55 = a1;
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = swift_slowAlloc();
    uint64_t v110 = swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 136315394;
    uint64_t v59 = *(void *)(v55 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v60 = *(void *)(v55 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    *(void *)&long long v107 = sub_100135190(v59, v60, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v58 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v61 = Set.description.getter();
    unint64_t v63 = v62;
    swift_bridgeObjectRelease();
    *(void *)&long long v107 = sub_100135190(v61, v63, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "%s - Checking if pending custodian review follow up needs to be dismissed for custodians: %s", (uint8_t *)v58, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  CFStringRef v64 = (const __CFString *)String._bridgeToObjectiveC()();
  if (!AAPrefsDomain)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  unint64_t v65 = (__CFString *)v64;
  CFPropertyListRef v66 = CFPreferencesCopyAppValue(v64, AAPrefsDomain);

  swift_unknownObjectRetain_n();
  id v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v67, v68))
  {
    uint64_t v69 = (uint8_t *)swift_slowAlloc();
    uint64_t v110 = swift_slowAlloc();
    *(_DWORD *)uint64_t v69 = 136315138;
    *(void *)&long long v107 = v66;
    swift_unknownObjectRetain();
    sub_100009F04(&qword_100328498);
    uint64_t v70 = String.init<A>(describing:)();
    *(void *)&long long v107 = sub_100135190(v70, v71, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Should Dismiss Custodian Review CFU: %s", v69, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  uint64_t v72 = v97;
  uint64_t v73 = v99;
  uint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.info.getter();
  BOOL v76 = os_log_type_enabled(v74, v75);
  if (!v66)
  {
    if (v76)
    {
      id v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Dismissing Custodian Review CFU", v79, 2u);
      swift_slowDealloc();
    }

    uint64_t v80 = v94;
    uint64_t v81 = v96;
    v91(v94, v92, v96);
    Dependency.wrappedValue.getter();
    v90(v80, v81);
    uint64_t v82 = v111;
    uint64_t v83 = v112;
    sub_100008EF8(&v110, v111);
    uint64_t v84 = AAFollowUpIdentifierCustodianReview;
    uint64_t v85 = swift_allocObject();
    *(void *)(v85 + 16) = sub_10014C6F8;
    *(void *)(v85 + 24) = v72;
    uint64_t v86 = *(void (**)(uint64_t, uint64_t (*)(char, uint64_t), uint64_t, uint64_t, uint64_t))(v83 + 24);
    swift_retain();
    v86(v84, sub_10014C708, v85, v82, v83);
    swift_release();
    sub_100008EA8((uint64_t)&v110);
    return swift_release();
  }
  if (v76)
  {
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v77 = 0;
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Not dismissing Custodian Review CFU", v77, 2u);
    swift_slowDealloc();
  }

  sub_100136860(0, 0, v102, v100, v73, v101, v98);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1001468A8(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v4 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v4 + 8 * v10);
        if (!v18)
        {
          int64_t v10 = v17 + 3;
          if (v17 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v4 + 8 * v10);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(unsigned __int8 *)(*(void *)(a1 + 56) + v12);
    swift_bridgeObjectRetain();
    a2(v14, v15, v16);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v8) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100146A38(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v9 = a1 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a1 + 56);
  int64_t v24 = (unint64_t)(v10 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    v23[0] = *v20;
    v23[1] = v21;
    swift_bridgeObjectRetain();
    sub_10013C9C0(v23, a2, a3, a4);
    if (v4)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v24) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v9 + 8 * v14);
    if (!v18)
    {
      int64_t v19 = v14 + 1;
      if (v14 + 1 >= v24) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v9 + 8 * v19);
      if (v18) {
        goto LABEL_14;
      }
      int64_t v19 = v14 + 2;
      if (v14 + 2 >= v24) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v9 + 8 * v19);
      if (v18) {
        goto LABEL_14;
      }
      int64_t v19 = v14 + 3;
      if (v14 + 3 >= v24) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v9 + 8 * v19);
      if (v18)
      {
LABEL_14:
        int64_t v14 = v19;
        goto LABEL_15;
      }
      int64_t v22 = v14 + 4;
      if (v14 + 4 >= v24) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v9 + 8 * v22);
      v14 += 4;
      if (!v18) {
        break;
      }
    }
LABEL_15:
    unint64_t v12 = (v18 - 1) & v18;
  }
  while (1)
  {
    int64_t v14 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v14 >= v24) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v9 + 8 * v14);
    ++v22;
    if (v18) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

BOOL sub_100146C14()
{
  id v0 = [objc_allocWithZone((Class)CDPWalrusStateController) init];
  id v5 = 0;
  id v1 = [v0 walrusStatus:&v5];
  if (v5)
  {
    id v2 = v5;
    swift_willThrow();

    return 0;
  }
  else
  {
    id v4 = v1;

    return v4 == (id)1;
  }
}

void sub_100146CD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v62 = a6;
  uint64_t v63 = a7;
  uint64_t v58 = a1;
  uint64_t v10 = sub_100009F04(&qword_100322CF0);
  uint64_t v60 = *(void *)(v10 - 8);
  uint64_t v61 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v59 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100009F04(&qword_100323190);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  int64_t v17 = (char *)v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100009F04(&qword_100325870);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  int64_t v22 = (char *)v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore, v18);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  id v23 = [*(id *)(*sub_100008EF8(v65, (uint64_t)v65[3]) + 16) aa_primaryAppleAccount];
  if (!v23
    || (int64_t v24 = v23, v25 = objc_msgSend(v23, "aa_altDSID"), v24, !v25))
  {
    sub_100008EA8((uint64_t)v65);
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E790);
    swift_retain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      v65[0] = (id)swift_slowAlloc();
      *(_DWORD *)unint64_t v32 = 136315138;
      uint64_t v33 = *(void *)(a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v34 = *(void *)(a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v64 = sub_100135190(v33, v34, (uint64_t *)v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s Account is nil. Not reporting Post Repair CFU Event.", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v35 = v62;
    uint64_t v36 = v63;
    goto LABEL_11;
  }
  v57[1] = a5;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100008EA8((uint64_t)v65);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsEventFactory, v13);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a3)
  {
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v28 = 0;
  }
  id v37 = [self analyticsEventWithName:v26 altDSID:v27 flowID:v28];
  swift_bridgeObjectRelease();

  sub_100008EA8((uint64_t)v65);
  if (!v37)
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100007288(v39, (uint64_t)qword_10033E790);
    swift_retain();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      v65[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315138;
      uint64_t v43 = *(void *)(a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v44 = *(void *)(a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v64 = sub_100135190(v43, v44, (uint64_t *)v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s Event creation failed. Not reporting Post Repair CFU Event.", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v35 = v62;
    uint64_t v36 = v63;
LABEL_11:
    sub_10019FA5C(v35, v36);
    return;
  }
  if (v58[2])
  {
    swift_errorRetain();
    unint64_t v38 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
  }
  else
  {
    unint64_t v38 = 0;
  }
  [v37 updateTaskResultWithError:v38];

  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  sub_100007288(v45, (uint64_t)qword_10033E790);
  swift_retain_n();
  id v46 = v37;
  id v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.debug.getter();
  char v49 = v47;
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v50 = swift_slowAlloc();
    v57[0] = swift_slowAlloc();
    uint64_t v58 = (void *)swift_slowAlloc();
    v65[0] = v58;
    *(_DWORD *)uint64_t v50 = 136315394;
    uint64_t v51 = *(void *)(a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v52 = *(void *)(a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    uint64_t v64 = sub_100135190(v51, v52, (uint64_t *)v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 12) = 2112;
    uint64_t v64 = (uint64_t)v46;
    id v53 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)v57[0] = v37;

    _os_log_impl((void *)&_mh_execute_header, v49, v48, "%s Reporting Post Repair CFU Event %@", (uint8_t *)v50, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  Swift::Int v54 = v59;
  uint64_t v55 = v60;
  uint64_t v56 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsRTCReporter, v61);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v56);
  [v65[0] sendEvent:v46];
  swift_unknownObjectRelease();
  sub_10019FA5C(v62, v63);
}

uint64_t sub_10014766C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v52 = a3;
  id v53 = a2;
  uint64_t v55 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v55 - 8);
  __chkstk_darwin(v55, v9);
  uint64_t v54 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_100322970);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v48 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16 - 8, v17);
  uint64_t v49 = v19;
  uint64_t v50 = (uint64_t)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  int64_t v22 = (char *)&v44 - v21;
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100007288(v23, (uint64_t)qword_10033E790);
  uint64_t v51 = a1;
  sub_100144170(a1, (uint64_t)v22, type metadata accessor for CustodianshipRecords);
  swift_retain();
  int64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v47 = v8;
    uint64_t v27 = v26;
    uint64_t v44 = swift_slowAlloc();
    v57[0] = v44;
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v45 = v11;
    uint64_t v46 = a4;
    uint64_t v29 = *(void *)(a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v28 = *(void *)(a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_100135190(v29, v28, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v30 = sub_1002682DC();
    uint64_t v56 = sub_100135190(v30, v31, v57);
    uint64_t v11 = v45;
    a4 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10014B000((uint64_t)v22, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s - Checking CRK presence on Octagon for %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = v47;
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    sub_10014B000((uint64_t)v22, type metadata accessor for CustodianshipRecords);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__securityController, v11);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  sub_100008EF8(v57, v57[3]);
  uint64_t v32 = v54;
  uint64_t v33 = v51;
  sub_1002686B4(v54);
  uint64_t v34 = v50;
  sub_100144170(v33, v50, type metadata accessor for CustodianshipRecords);
  unint64_t v35 = (*(unsigned __int8 *)(v48 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  unint64_t v36 = (v49 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = (v36 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = a5;
  sub_1001445DC(v34, v38 + v35, type metadata accessor for CustodianshipRecords);
  uint64_t v39 = (void *)(v38 + v36);
  uint64_t v40 = v53;
  *uint64_t v39 = v53;
  v39[1] = &off_1002F9BF8;
  os_log_type_t v41 = (void *)(v38 + v37);
  *os_log_type_t v41 = v52;
  v41[1] = a4;
  swift_retain();
  id v42 = v40;
  swift_retain();
  sub_1001E36D0(v32, (void (*)(void, uint64_t))sub_100147FAC, v38);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v32, v55);
  return sub_100008EA8((uint64_t)v57);
}

uint64_t sub_100147BDC()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v24 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v25 = (v26 + 24) & ~v26;
  uint64_t v2 = v0 + v25;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  id v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v25, v3);
  uint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v25 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v7 = (uint64_t *)(v0 + v25 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v23 = v1;
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v23 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v26 | 7);
}

uint64_t sub_100147FAC(int a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = v2 + v6;
  uint64_t v10 = *(void *)(v2 + v7);
  uint64_t v11 = *(void *)(v2 + v7 + 8);
  uint64_t v12 = v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = *(uint64_t (**)(void, uint64_t))v12;
  uint64_t v14 = *(void *)(v12 + 8);

  return sub_10013FF58(a1, a2, v8, v9, v10, v11, v13, v14);
}

uint64_t sub_100148070()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v27 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v25 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v26 = (v27 + 24) & ~v27;
  uint64_t v2 = v0 + v26;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v26, v3);
  unint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v26 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v7 = (uint64_t *)(v0 + v26 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v24 = v1;
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v24 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  unint64_t v22 = (((v25 + v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v27 | 7);
}

uint64_t sub_100148464(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_10013DF30(a1, *(void *)(v1 + 16), v1 + v4, *(void *)(v1 + v5), *(char **)(v1 + v5 + 8), *(void **)(v1 + v6), *(void *)(v1 + v7), *(void *)(v1 + v7 + 8), *(void (**)(uint64_t))(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

void sub_100148534(uint64_t a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v74 = a2;
  os_log_type_t v75 = a3;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v72 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  unint64_t v71 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_100322970);
  uint64_t v69 = *(void **)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for RecoveryKeys(0);
  __chkstk_darwin(v66, v11);
  uint64_t v13 = (uint64_t *)((char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v68 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v68 + 64);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v70 = (uint64_t)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v57 - v19;
  uint64_t v67 = type metadata accessor for CustodianRecord();
  unint64_t v21 = (uint64_t *)(a1 + *(int *)(v67 + 40));
  unint64_t v22 = v21[1];
  if (v22 >> 60 == 15
    || (uint64_t v23 = *v21,
        uint64_t v24 = a1 + *(int *)(v14 + 20),
        uint64_t v25 = (uint64_t *)(v24 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord() + 32)),
        unint64_t v26 = v25[1],
        v26 >> 60 == 15))
  {
    type metadata accessor for AACustodianError(0);
    uint64_t v77 = -7019;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000070DC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v27 = (void *)v76[0];
    v74(7, v76[0]);
  }
  else
  {
    uint64_t v62 = v4;
    uint64_t v28 = *v25;
    sub_1000196B4(v23, v22);
    uint64_t v63 = v28;
    sub_1000196B4(v28, v26);
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    unint64_t v64 = v26;
    uint64_t v65 = v23;
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E790);
    sub_100144170(a1, (uint64_t)v20, type metadata accessor for CustodianshipRecords);
    swift_retain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    int v32 = v31;
    BOOL v33 = os_log_type_enabled(v30, v31);
    uint64_t v61 = v7;
    if (v33)
    {
      uint64_t v34 = swift_slowAlloc();
      os_log_t v60 = v30;
      uint64_t v35 = v34;
      uint64_t v58 = swift_slowAlloc();
      v76[0] = v58;
      *(_DWORD *)uint64_t v35 = 136315394;
      uint64_t v57 = v35 + 4;
      int v59 = v32;
      uint64_t v36 = *(void *)(v73 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v37 = *(void *)(v73 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v77 = sub_100135190(v36, v37, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v38 = sub_1002682DC();
      uint64_t v77 = sub_100135190(v38, v39, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v20, type metadata accessor for CustodianshipRecords);
      os_log_t v40 = v60;
      _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v59, "%s - Starting to Preflight Custodian Recovery for %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v20, type metadata accessor for CustodianshipRecords);
    }
    uint64_t v41 = (uint64_t)v13 + *(int *)(v66 + 24);
    uint64_t v42 = v65;
    sub_1000196B4(v65, v22);
    unint64_t v43 = v64;
    uint64_t v44 = v63;
    sub_1000196B4(v63, v64);
    sub_1002686B4(v41);
    *uint64_t v13 = v42;
    v13[1] = v22;
    v13[2] = v44;
    v13[3] = v43;
    uint64_t v45 = v73;
    uint64_t v46 = v69;
    uint64_t v47 = v61;
    ((void (*)(char *, uint64_t, uint64_t))v69[2])(v10, v73 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__securityController, v61);
    Dependency.wrappedValue.getter();
    ((void (*)(char *, uint64_t))v46[1])(v10, v47);
    uint64_t v69 = sub_100008EF8(v76, v76[3]);
    uint64_t v48 = (uint64_t)v71;
    uint64_t v49 = v72;
    uint64_t v50 = v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, a1 + *(int *)(v67 + 20), v62);
    uint64_t v51 = a1;
    uint64_t v52 = v70;
    sub_100144170(v51, v70, type metadata accessor for CustodianshipRecords);
    unint64_t v53 = (*(unsigned __int8 *)(v68 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v45;
    sub_1001445DC(v52, v54 + v53, type metadata accessor for CustodianshipRecords);
    uint64_t v55 = (void (**)(uint64_t, uint64_t))(v54 + ((v15 + v53 + 7) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v56 = v75;
    *uint64_t v55 = v74;
    v55[1] = v56;
    swift_retain();
    swift_retain();
    sub_1001E48B8(v48, v13, (void (*)(uint64_t))sub_10014A428, (void (*)(uint64_t))v54);
    swift_release();
    sub_1000196A0(v63, v64);
    sub_1000196A0(v65, v22);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
    sub_10014B000((uint64_t)v13, type metadata accessor for RecoveryKeys);
    sub_100008EA8((uint64_t)v76);
  }
}

uint64_t sub_100148CA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v114 = a2;
  uint64_t v7 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v110 = &v97[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v10 - 8, v11);
  BOOL v109 = &v97[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = (uint64_t (*)(void))sub_100009F04(&qword_100322950);
  uint64_t v105 = *((void *)v13 - 1);
  char v106 = (uint64_t (*)())v13;
  __chkstk_darwin(v13, v14);
  uint64_t v103 = &v97[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for CustodianRecord();
  uint64_t v104 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v104 + 64);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  long long v108 = &v97[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = __chkstk_darwin(v19, v20);
  uint64_t v112 = &v97[-v22];
  uint64_t v24 = __chkstk_darwin(v21, v23);
  long long v107 = &v97[-v25];
  __chkstk_darwin(v24, v26);
  uint64_t v115 = &v97[-v27];
  uint64_t v100 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v101 = *(void *)(v100 - 8);
  uint64_t v28 = *(void *)(v101 + 64);
  uint64_t v30 = __chkstk_darwin(v100, v29);
  os_log_type_t v31 = &v97[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v33 = __chkstk_darwin(v30, v32);
  uint64_t v35 = &v97[-v34];
  __chkstk_darwin(v33, v36);
  uint64_t v38 = &v97[-v37];
  uint64_t v39 = swift_allocObject();
  uint64_t v102 = a3;
  *(void *)(v39 + 16) = a3;
  *(void *)(v39 + 24) = a4;
  uint64_t v111 = v16;
  uint64_t v40 = *(void *)(a1 + *(int *)(v16 + 36));
  uint64_t v41 = qword_100320BA0;
  swift_retain();
  if (v40 == 3)
  {
    if (v41 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_100007288(v42, (uint64_t)qword_10033E790);
    sub_100144170(a1, (uint64_t)v38, type metadata accessor for CustodianshipRecords);
    uint64_t v43 = v114;
    swift_retain();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    int v46 = v45;
    BOOL v47 = os_log_type_enabled(v44, v45);
    uint64_t v113 = v39;
    if (v47)
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v102 = (uint64_t (*)(void))swift_slowAlloc();
      v116[0] = (uint64_t)v102;
      *(_DWORD *)uint64_t v48 = 136315394;
      os_log_t v99 = v44;
      int v98 = v46;
      uint64_t v49 = *(void *)(v43 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v50 = *(void *)(v43 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v117 = sub_100135190(v49, v50, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v39 = v113;
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v117 = sub_100135190(v51, v52, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v38, type metadata accessor for CustodianshipRecords);
      os_log_t v53 = v99;
      _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v98, "%s - custodian %s was marked as unreachable, marking as accepted again.", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v38, type metadata accessor for CustodianshipRecords);
    }
    uint64_t v102 = (uint64_t (*)(void))type metadata accessor for CustodianRecord;
    uint64_t v63 = v115;
    sub_100144170(a1, (uint64_t)v115, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    sub_100144170(a1, (uint64_t)v31, type metadata accessor for CustodianshipRecords);
    unint64_t v64 = (*(unsigned __int8 *)(v101 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
    uint64_t v65 = swift_allocObject();
    uint64_t v66 = v114;
    *(void *)(v65 + 16) = v114;
    sub_1001445DC((uint64_t)v31, v65 + v64, type metadata accessor for CustodianshipRecords);
    uint64_t v67 = (uint64_t (**)(uint64_t))(v65 + ((v28 + v64 + 7) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v67 = sub_10014A4C4;
    v67[1] = (uint64_t (*)(uint64_t))v39;
    uint64_t v101 = swift_allocObject();
    *(void *)(v101 + 16) = 2;
    uint64_t v69 = v105;
    uint64_t v68 = v106;
    uint64_t v70 = v103;
    (*(void (**)(void *, uint64_t, uint64_t (*)()))(v105 + 16))(v103, v66 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__storageController, v106);
    swift_retain();
    swift_retain();
    Dependency.wrappedValue.getter();
    (*(void (**)(void *, uint64_t (*)()))(v69 + 8))(v70, v68);
    uint64_t v103 = sub_100008EF8(v116, v116[3]);
    unint64_t v71 = v107;
    uint64_t v72 = v102;
    sub_100144170((uint64_t)v63, (uint64_t)v107, v102);
    uint64_t v73 = *(unsigned __int8 *)(v104 + 80);
    uint64_t v74 = (v73 + 24) & ~v73;
    uint64_t v104 = v73 | 7;
    uint64_t v105 = v17 + 7;
    unint64_t v75 = (v17 + 7 + v74) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v76 = swift_allocObject();
    *(void *)(v76 + 16) = v66;
    char v106 = type metadata accessor for CustodianRecord;
    sub_1001445DC((uint64_t)v71, v76 + v74, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    *(void *)(v76 + v75) = 2;
    uint64_t v77 = (uint64_t (**)(uint64_t))(v76 + ((v75 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint8_t *v77 = sub_10014A4F8;
    v77[1] = (uint64_t (*)(uint64_t))v65;
    uint64_t v78 = *v103;
    uint64_t v103 = sub_100008EF8((void *)(*v103 + 56), *(void *)(*v103 + 80));
    sub_100144170((uint64_t)v63, (uint64_t)v71, v72);
    uint64_t v79 = type metadata accessor for UUID();
    uint64_t v80 = (uint64_t)v109;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v109, 1, 1, v79);
    uint64_t v81 = type metadata accessor for Date();
    uint64_t v82 = (uint64_t)v110;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v110, 1, 1, v81);
    swift_retain();
    uint64_t v83 = v101;
    swift_retain();
    uint64_t v114 = v65;
    swift_retain();
    uint64_t v84 = v112;
    sub_1000A83E8((uint64_t)v71, 0, 0, 2, 0, 0, 0xF000000000000000, 2u, (uint64_t)v112, v80, 0, 0, v82, 0);
    uint64_t v85 = v108;
    sub_100144170((uint64_t)v115, (uint64_t)v108, v102);
    uint64_t v86 = (v73 + 48) & ~v73;
    unint64_t v87 = (v105 + v86) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v88 = (void *)swift_allocObject();
    v88[2] = v78;
    v88[3] = sub_1001441DC;
    v88[4] = v76;
    v88[5] = 0;
    sub_1001445DC((uint64_t)v85, (uint64_t)v88 + v86, (uint64_t (*)(void))v106);
    uint64_t v89 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v88 + v87);
    *uint64_t v89 = sub_10014C770;
    v89[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v83;
    uint64_t v90 = qword_100320CC8;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v90 != -1) {
      swift_once();
    }
    if (v84[*(int *)(v111 + 48)] == 1)
    {
      if (qword_100320CD8 != -1) {
        swift_once();
      }
      uint64_t v91 = &qword_10033EA08;
    }
    else
    {
      if (qword_100320CD0 != -1) {
        swift_once();
      }
      uint64_t v91 = &qword_10033E9F8;
    }
    uint64_t v93 = *v91;
    unint64_t v92 = v91[1];
    swift_bridgeObjectRetain();
    id v94 = sub_10028CC20(v93, v92);
    id v95 = [v94 privateCloudDatabase];
    swift_bridgeObjectRelease();

    sub_1000667EC((uint64_t)v84, v95, (uint64_t)sub_1001441E4, (uint64_t)v88);
    swift_release();

    sub_10014B000((uint64_t)v84, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_release();
    swift_release_n();
    sub_100008EA8((uint64_t)v116);
    swift_release();
    sub_10014B000((uint64_t)v115, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }
  else
  {
    if (v41 != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    sub_100007288(v54, (uint64_t)qword_10033E790);
    sub_100144170(a1, (uint64_t)v35, type metadata accessor for CustodianshipRecords);
    uint64_t v55 = v114;
    swift_retain();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v115 = (unsigned char *)swift_slowAlloc();
      v116[0] = (uint64_t)v115;
      *(_DWORD *)uint64_t v58 = 136315394;
      uint64_t v113 = v39;
      uint64_t v59 = *(void *)(v55 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      unint64_t v60 = *(void *)(v55 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v117 = sub_100135190(v59, v60, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      type metadata accessor for UUID();
      sub_1000070DC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v117 = sub_100135190(v61, v62, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10014B000((uint64_t)v35, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "%s - custodian %s status is not unreachable, bailing.", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_10014B000((uint64_t)v35, type metadata accessor for CustodianshipRecords);
    }

    ((void (*)(uint64_t, void))v102)(3, 0);
  }
  return swift_release();
}

uint64_t sub_100149A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v49 = a2;
  uint64_t v7 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8, v10);
  uint64_t v11 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_100328400);
  uint64_t v47 = *(void *)(v12 - 8);
  uint64_t v48 = v12;
  __chkstk_darwin(v12, v13);
  int v46 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for KeyRepairContext(0);
  uint64_t v16 = (int *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1 + *(int *)(type metadata accessor for CustodianRecord() + 20);
  uint64_t v21 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  v19[v16[7]] = 0;
  v19[v16[8]] = 1;
  uint64_t v22 = &v19[v16[9]];
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100007288(v23, (uint64_t)qword_10033E748);
  swift_retain();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v43 = a1;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v45 = a3;
    uint64_t v27 = (uint8_t *)v26;
    v51[0] = swift_slowAlloc();
    uint64_t v42 = v8;
    *(_DWORD *)uint64_t v27 = 136315138;
    uint64_t v44 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v41[1] = v27 + 4;
    uint64_t v28 = v4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName;
    uint64_t v29 = v9;
    uint64_t v30 = v4;
    uint64_t v32 = *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v31 = *(void *)(v28 + 8);
    swift_bridgeObjectRetain();
    uint64_t v33 = v32;
    uint64_t v4 = v30;
    uint64_t v9 = v29;
    uint64_t v50 = sub_100135190(v33, v31, v51);
    uint64_t v11 = v44;
    uint64_t v8 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    a1 = v43;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s Starting repair keys", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v45;
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v34 = v46;
  uint64_t v35 = v47;
  uint64_t v36 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__keyRepair, v48);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
  sub_100008EF8(v51, v51[3]);
  sub_100144170(a1, (uint64_t)v11, type metadata accessor for CustodianshipRecords);
  unint64_t v37 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v4;
  sub_1001445DC((uint64_t)v11, v38 + v37, type metadata accessor for CustodianshipRecords);
  uint64_t v39 = (void *)(v38 + ((v9 + v37 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v39 = v49;
  v39[1] = a3;
  swift_retain();
  swift_retain();
  sub_100037B84((uint64_t)v19, (void (*)(uint64_t))sub_10014AF30, (void (*)(uint64_t))v38);
  swift_release();
  sub_10014B000((uint64_t)v19, type metadata accessor for KeyRepairContext);
  return sub_100008EA8((uint64_t)v51);
}

uint64_t sub_100149F0C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100054724;
  return sub_100142B70(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100149FD4()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v24 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();

  swift_unknownObjectRelease();
  swift_release();
  uint64_t v25 = (v26 + 72) & ~v26;
  uint64_t v2 = v0 + v25;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v25, v3);
  uint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v25 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(v0 + v25 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v23 = v1;
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v23 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));

  return _swift_deallocObject(v0, v25 + v24, v26 | 7);
}

uint64_t sub_10014A394(char **a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  return sub_10013B09C(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(void (**)(void))(v2 + 56), *(void *)(v2 + 64), v2 + ((*(unsigned __int8 *)(v5 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
}

uint64_t sub_10014A428(uint64_t a1)
{
  return sub_10014AF48(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10013BAC4);
}

uint64_t sub_10014A440()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10014A480(uint64_t a1)
{
  return sub_10013C334(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10014A48C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014A4C4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(3, a1);
}

uint64_t sub_10014A4F8(uint64_t a1)
{
  return sub_10014AF48(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10014185C);
}

uint64_t sub_10014A510()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10014A524()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10014A734(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v4;
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = *(void (**)(void))v9;
  uint64_t v11 = *(void *)(v9 + 8);

  return sub_1001420DC(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_10014A7E8()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10014A9F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1[2];
  uint64_t v6 = (void *)v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + v4;
  unint64_t v10 = (char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void (**)(void))v10;
  uint64_t v12 = *((void *)v10 + 1);

  return sub_100270590(a1, v5, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_10014AAA4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100025248;
  return sub_100142B70(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10014AB70()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v25 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v23 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v26 = v0;
  uint64_t v24 = (v25 + 24) & ~v25;
  uint64_t v2 = v0 + v24;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v24, v3);
  uint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v24 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(v0 + v24 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  unint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v1 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));
  swift_release();

  return _swift_deallocObject(v26, ((v23 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v25 | 7);
}

uint64_t sub_10014AF30(uint64_t a1)
{
  return sub_10014AF48(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001408C0);
}

uint64_t sub_10014AF48(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + v5;
  unint64_t v8 = (uint64_t *)(v2 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];

  return a2(a1, v6, v7, v9, v10);
}

uint64_t sub_10014B000(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10014B060()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v24 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  swift_release();
  uint64_t v25 = (v26 + 80) & ~v26;
  uint64_t v2 = v0 + v25;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v25, v3);
  uint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v25 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(v0 + v25 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v23 = v1;
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v23 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));

  return _swift_deallocObject(v0, v25 + v24, v26 | 7);
}

uint64_t sub_10014B428(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  return sub_10013EB30(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void (**)(uint64_t))(v1 + 48), *(void **)(v1 + 56), *(void (**)(uint64_t))(v1 + 64), *(void (**)(uint64_t))(v1 + 72), v1 + ((*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t sub_10014B4AC()
{
  swift_release();

  swift_unknownObjectRelease();
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10014B504(uint64_t a1)
{
  return sub_10013F884(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void (**)(void))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_10014B520()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v24 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();

  uint64_t v25 = (v26 + 32) & ~v26;
  uint64_t v2 = v0 + v25;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v25, v3);
  uint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v25 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(v0 + v25 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v23 = v1;
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v23 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v26 | 7);
}

uint64_t sub_10014B8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10013F104(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void (**)(void))(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10014B9C0()
{
  swift_unknownObjectRelease();

  swift_errorRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10014BA10(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10013C760(a1, a2, a3, v3, "%s Past Key: %s Bool: %{BOOL}d");
}

void sub_10014BA34(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10013C760(a1, a2, a3, v3, "%s Current Key: %s Bool: %{BOOL}d");
}

uint64_t sub_10014BA58()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10014BA90()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_10014BCB8(uint64_t (*a1)(), uint64_t (*a2)())
{
  uint64_t v5 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v2 + 16);
  uint64_t v10 = *(void *)(v2 + v7);
  uint64_t v11 = *(void *)(v2 + v7 + 8);
  uint64_t v12 = *(void *)(v2 + v8);
  uint64_t v13 = *(void *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_100137BDC(a1, a2, v9, v2 + v6, v10, v11, v12, v13);
}

uint64_t sub_10014BD84()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10014BDE4()
{
  return sub_1001387C8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_10014BE1C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10014BE6C(char a1, uint64_t a2)
{
  return sub_10013A078(a1, a2, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64));
}

uint64_t sub_10014BEA4()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10014C0BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v4;
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = (uint64_t (**)(uint64_t))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return sub_1001382E4(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_10014C16C()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10014C364(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void (*)(uint64_t))v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10013ABA4(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10014C3E0()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_errorRelease();
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10014C5F8()
{
  uint64_t v1 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = *(uint64_t (**)(uint64_t))((char *)v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10013858C(v3, v4, v5, (uint64_t)v0 + v2, v6);
}

uint64_t sub_10014C690(uint64_t a1)
{
  return sub_100138634(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_10014C6B0()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10014C6F8(int a1, uint64_t a2)
{
  sub_100136860(a1, a2, *(void *)(v2 + 16), *(void (**)(void))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_10014C708(char a1, uint64_t a2)
{
  return sub_100137390(a1, a2, *(uint64_t (**)(void, uint64_t))(v2 + 16));
}

uint64_t sub_10014C710()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10014C758(uint64_t a1, char a2)
{
  return sub_1001370D8(a1, a2 & 1, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

void sub_10014C78C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v30 = a1;
  uint64_t v29 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v4);
  uint64_t v28 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6, v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8, v9);
  sub_100019730(v1 + 16, (uint64_t)v32, &qword_100327130);
  if (v32[3])
  {
    sub_100009F04(&qword_100327128);
    type metadata accessor for CloudKitStore();
    if (swift_dynamicCast())
    {
      *(void *)(v31 + 24) = &off_1002FD120;
      swift_unknownObjectWeakAssign();
      swift_release();
    }
  }
  else
  {
    sub_100006574((uint64_t)v32, &qword_100327130);
  }
  if (qword_100320D10 != -1) {
    swift_once();
  }
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_100200F88(v10);
  swift_bridgeObjectRelease();
  sub_1000093D0();
  static DispatchQoS.unspecified.getter();
  v32[0] = &_swiftEmptyArrayStorage;
  sub_10015F0D0((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v28, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v29);
  uint64_t v12 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v13 = objc_allocWithZone((Class)APSConnection);
  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v13 initWithEnvironmentName:v14 namedDelegatePort:v15 queue:v12];

  uint64_t v17 = *(void **)(v2 + 88);
  *(void *)(v2 + 88) = v16;

  uint64_t v18 = *(void **)(v2 + 88);
  if (v18)
  {
    id v19 = v18;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v19 _setEnabledTopics:isa];

    unint64_t v21 = *(void **)(v2 + 88);
    if (v21) {
      [v21 setDelegate:*(void *)(v2 + 64)];
    }
  }
  uint64_t v22 = *(void *)(v11 + 16);
  if (v22)
  {
    uint64_t v23 = v11 + 40;
    do
    {
      uint64_t v24 = *(void **)(v2 + 88);
      if (v24)
      {
        swift_bridgeObjectRetain();
        id v25 = v24;
        NSString v26 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v25 requestTokenForTopic:v26 identifier:0];
      }
      v23 += 16;
      --v22;
    }
    while (v22);
  }
  swift_release();
  sub_10014CD74(v30, 257, (uint64_t)sub_10014CC38, 0);
}

void sub_10014CC38()
{
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100007288(v0, (uint64_t)qword_10033E718);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Completed launch pull of cloud changes: %{BOOL}d", v2, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_10014CD74(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v25 = a1;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  NSString v14 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = a4;
  swift_retain();
  Date.init()();
  dispatch_queue_t v26 = *(dispatch_queue_t *)(v5 + 128);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v17, v9);
  unint64_t v19 = (*(unsigned __int8 *)(v10 + 80) + 50) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v5;
  *(void *)(v20 + 24) = sub_10015F2A4;
  uint64_t v21 = v25;
  *(void *)(v20 + 32) = v18;
  *(void *)(v20 + 40) = v21;
  *(unsigned char *)(v20 + 48) = a2 & 1;
  *(unsigned char *)(v20 + 49) = HIBYTE(a2) & 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v20 + v19, v14, v9);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_10015F380;
  *(void *)(v22 + 24) = v20;
  aBlock[4] = sub_1000B9DA0;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100030494;
  void aBlock[3] = &unk_1002FD858;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v26, v23);
  _Block_release(v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v9) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10014D050(char a1, uint64_t (*a2)(void))
{
  if (qword_100320B80 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E730);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "✅ pullCloudUpdates: Invoking Completion with success %{BOOL}d", v7, 8u);
    swift_slowDealloc();
  }

  return a2(a1 & 1);
}

void sub_10014D188(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void, void, void), __int16 a5, uint64_t a6)
{
  uint64_t v58 = a6;
  uint64_t v55 = a4;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v56 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = v13;
  if (qword_100320B80 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100007288(v14, (uint64_t)qword_10033E730);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "🎒 pullCloudUpdates: Queuing completion", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  uint64_t v20 = (char **)(a1 + 12);
  swift_beginAccess();
  uint64_t v21 = (char *)a1[12];
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a1[12] = v21;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v21 = sub_100168C94(0, *((void *)v21 + 2) + 1, 1, v21);
    uint64_t *v20 = v21;
  }
  unint64_t v24 = *((void *)v21 + 2);
  unint64_t v23 = *((void *)v21 + 3);
  if (v24 >= v23 >> 1)
  {
    uint64_t v21 = sub_100168C94((char *)(v23 > 1), v24 + 1, 1, v21);
    uint64_t *v20 = v21;
  }
  *((void *)v21 + 2) = v24 + 1;
  uint64_t v25 = &v21[16 * v24];
  *((void *)v25 + 4) = sub_10015F410;
  *((void *)v25 + 5) = v19;
  swift_endAccess();
  uint64_t v26 = a1[14];
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  if (v26)
  {
    if (v29)
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "😎 pullCloudUpdates: Pull underway. NOT Configuring Operations. Returning.", v30, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v54 = v15;
    if (v29)
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "🎒 pullCloudUpdates: Configuring Operations", v31, 2u);
      swift_slowDealloc();
    }

    uint64_t v32 = swift_allocObject();
    *(unsigned char *)(v32 + 16) = 0;
    os_log_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v33 = v56;
    v53(v56, v58, v10);
    uint64_t v34 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v52 = v34 | 7;
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v55;
    *(void *)(v35 + 16) = a1;
    *(void *)(v35 + 24) = v36;
    *(unsigned char *)(v35 + 32) = a5 & 1;
    *(unsigned char *)(v35 + 33) = HIBYTE(a5) & 1;
    *(void *)(v35 + 40) = v32;
    uint64_t v55 = *(void (**)(void, void, void))(v11 + 32);
    v55(v35 + ((v34 + 48) & ~v34), v33, v10);
    unint64_t v37 = (objc_class *)type metadata accessor for AsyncOperation();
    uint64_t v38 = objc_allocWithZone(v37);
    v38[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
    uint64_t v39 = (uint64_t (**)(uint64_t, uint64_t))&v38[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
    *uint64_t v39 = sub_10015F450;
    v39[1] = (uint64_t (*)(uint64_t, uint64_t))v35;
    v60.receiver = v38;
    v60.super_class = v37;
    swift_retain();
    swift_retain();
    id v40 = [super init];
    v53(v33, v58, v10);
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = a1;
    *(void *)(v41 + 24) = v32;
    v55(v41 + ((v34 + 32) & ~v34), v33, v10);
    uint64_t v42 = objc_allocWithZone(v37);
    v42[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
    uint64_t v43 = (uint64_t (**)(uint64_t, uint64_t))&v42[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
    *uint64_t v43 = sub_10015F5C4;
    v43[1] = (uint64_t (*)(uint64_t, uint64_t))v41;
    v59.receiver = v42;
    v59.super_class = v37;
    swift_retain();
    swift_retain();
    id v44 = [super init];
    [v44 addDependency:v40];
    uint64_t v45 = (void *)a1[15];
    a1[15] = v44;
    uint64_t v27 = v44;

    int v46 = (void *)a1[14];
    a1[14] = v40;
    id v47 = v40;

    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "🟢 pullCloudUpdates: Starting Pull & Comp Ops", v50, 2u);
      swift_slowDealloc();
    }

    uint64_t v51 = (void *)a1[13];
    [v51 addOperation:v27];
    [v51 addOperation:v47];
    swift_release();
  }
}

uint64_t sub_10014D778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7)
{
  v19[0] = a4;
  v19[1] = a3;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a7, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  os_log_type_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a6;
  *((void *)v17 + 3) = a1;
  *((void *)v17 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v17[v16], (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  swift_retain();
  swift_retain();
  sub_10014E0E8(v19[0], a5 & 0x101, (uint64_t (*)(void))sub_10015F86C, (uint64_t)v17);
  return swift_release();
}

void sub_10014D8F8(char a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  os_log_type_t v17 = (char *)&v26 - v16;
  uint64_t v18 = swift_beginAccess();
  *(unsigned char *)(a2 + 16) = a1;
  a3(v18);
  if (qword_100320B80 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E730);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v17, a5, v9);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 134217984;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v24 = v23;
    uint64_t v25 = *(void (**)(char *, uint64_t))(v10 + 8);
    v25(v14, v9);
    uint64_t v26 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v25(v17, v9);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "✅ pullCloudUpdates: PullOp Complete ⏰ %f", v22, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  }
}

uint64_t sub_10014DB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  uint64_t v14 = a4 + 16;
  dispatch_queue_t v21 = *(dispatch_queue_t *)(a3 + 128);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v10);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a3;
  *((void *)v16 + 3) = v14;
  *((void *)v16 + 4) = a1;
  *((void *)v16 + 5) = a2;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_10015F720;
  *(void *)(v17 + 24) = v16;
  aBlock[4] = sub_10015FA40;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100030494;
  void aBlock[3] = &unk_1002FD970;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v21, v18);
  _Block_release(v18);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a2) {
    __break(1u);
  }
  return result;
}

void sub_10014DDBC(void *a1, unsigned char *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v37 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v37 - 8);
  uint64_t v12 = __chkstk_darwin(v37, v11);
  uint64_t v36 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v33 - v15;
  swift_beginAccess();
  uint64_t v17 = a1[12];
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v33 = a4;
    uint64_t v34 = a3;
    uint64_t v35 = a5;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v19 = v17 + 40;
    do
    {
      uint64_t v20 = *(void (**)(uint64_t *))(v19 - 8);
      LOBYTE(v38) = *a2;
      swift_retain();
      v20(&v38);
      swift_release();
      v19 += 16;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    a3 = v34;
    a5 = v35;
  }
  a1[12] = &_swiftEmptyArrayStorage;
  uint64_t v21 = swift_bridgeObjectRelease();
  a3(v21);
  uint64_t v22 = (void *)a1[15];
  a1[15] = 0;

  uint64_t v23 = (void *)a1[14];
  a1[14] = 0;

  uint64_t v24 = v37;
  if (qword_100320B80 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100007288(v25, (uint64_t)qword_10033E730);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, a5, v24);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v28 = 134217984;
    BOOL v29 = v36;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v31 = v30;
    uint64_t v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v29, v24);
    uint64_t v38 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v32(v16, v24);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "✅ pullCloudUpdates: CompOp Complete ⏰ %f", v28, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v24);
  }
}

uint64_t sub_10014E0E8(char a1, int a2, uint64_t (*a3)(void), uint64_t a4)
{
  int v78 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v81 = *(void *)(v12 - 8);
  uint64_t v82 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v80 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v87, v15);
  uint64_t v88 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v83 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  unint64_t v79 = *(void *)(v84 - 8);
  __chkstk_darwin(v84, v21);
  uint64_t v85 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = &_swiftEmptyArrayStorage;
  if (a1)
  {
    if (qword_100320CF0 != -1) {
      swift_once();
    }
    uint64_t v23 = swift_bridgeObjectRetain();
    sub_10028C72C(v23);
  }
  if ((a1 & 2) != 0)
  {
    if (qword_100320CF8 != -1) {
      swift_once();
    }
    uint64_t v24 = swift_bridgeObjectRetain();
    sub_10028C72C(v24);
  }
  uint64_t v25 = *(void *)(aBlock[0] + 16);
  if (v25)
  {
    uint64_t v70 = a3;
    uint64_t v71 = v18;
    uint64_t v72 = a4;
    uint64_t v73 = v17;
    uint64_t v74 = v11;
    uint64_t v75 = v8;
    uint64_t v76 = v7;
    uint64_t v86 = aBlock[0];
    uint64_t v26 = (unint64_t *)(aBlock[0] + 40);
    os_log_type_t v27 = (char *)&_swiftEmptyArrayStorage;
    do
    {
      uint64_t v29 = *(v26 - 1);
      unint64_t v28 = *v26;
      uint64_t v30 = qword_100320CC8;
      swift_bridgeObjectRetain_n();
      if (v30 != -1) {
        swift_once();
      }
      id v31 = sub_10028CC20(v29, v28);
      id v32 = [v31 privateCloudDatabase];

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        os_log_type_t v27 = sub_100168DC4(0, *((void *)v27 + 2) + 1, 1, v27);
      }
      unint64_t v34 = *((void *)v27 + 2);
      unint64_t v33 = *((void *)v27 + 3);
      if (v34 >= v33 >> 1) {
        os_log_type_t v27 = sub_100168DC4((char *)(v33 > 1), v34 + 1, 1, v27);
      }
      *((void *)v27 + 2) = v34 + 1;
      uint64_t v35 = &v27[24 * v34];
      *((void *)v35 + 4) = v29;
      *((void *)v35 + 5) = v28;
      *((void *)v35 + 6) = v32;
      id v36 = sub_10028CC20(v29, v28);
      id v37 = [v36 sharedCloudDatabase];

      unint64_t v39 = *((void *)v27 + 2);
      unint64_t v38 = *((void *)v27 + 3);
      if (v39 >= v38 >> 1) {
        os_log_type_t v27 = sub_100168DC4((char *)(v38 > 1), v39 + 1, 1, v27);
      }
      v26 += 2;
      *((void *)v27 + 2) = v39 + 1;
      id v40 = &v27[24 * v39];
      *((void *)v40 + 4) = v29;
      *((void *)v40 + 5) = v28;
      *((void *)v40 + 6) = v37;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
    uint64_t v41 = dispatch_group_create();
    uint64_t v86 = swift_allocObject();
    *(void *)(v86 + 16) = &_swiftEmptyDictionarySingleton;
    unint64_t v42 = sub_1000093D0();
    (*(void (**)(char *, void, uint64_t))(v79 + 104))(v85, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v84);
    static DispatchQoS.unspecified.getter();
    aBlock[0] = &_swiftEmptyArrayStorage;
    sub_10015F0D0((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_100009F04((uint64_t *)&unk_10032A870);
    sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    unint64_t v79 = v42;
    uint64_t v85 = (char *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    uint64_t v43 = *((void *)v27 + 2);
    if (v43)
    {
      uint64_t v87 = v77 + 16;
      LODWORD(v84) = v78 & 0x101;
      id v44 = (void **)(v27 + 48);
      do
      {
        uint64_t v51 = (uint64_t)*(v44 - 2);
        uint64_t v52 = (uint64_t)*(v44 - 1);
        os_log_t v53 = *v44;
        swift_bridgeObjectRetain();
        id v54 = v53;
        dispatch_group_enter(v41);
        sub_100019730(v87, (uint64_t)aBlock, &qword_100327130);
        if (v91)
        {
          sub_100008EF8(aBlock, (uint64_t)v91);
          uint64_t v45 = (void *)swift_allocObject();
          v45[2] = v51;
          v45[3] = v52;
          uint64_t v88 = (char *)v51;
          int v46 = v85;
          id v47 = v41;
          uint64_t v48 = v86;
          v45[4] = v85;
          v45[5] = v48;
          uint64_t v45[6] = v47;
          swift_bridgeObjectRetain();
          os_log_type_t v49 = v46;
          uint64_t v41 = v47;
          swift_retain();
          uint64_t v50 = v47;
          sub_1000AE2BC(v54, (uint64_t)v88, v52, v84, (uint64_t)sub_10015F1BC, (uint64_t)v45);
          swift_release();
          swift_bridgeObjectRelease();

          sub_100008EA8((uint64_t)aBlock);
        }
        else
        {
          swift_bridgeObjectRelease();

          sub_100006574((uint64_t)aBlock, &qword_100327130);
        }
        v44 += 3;
        --v43;
      }
      while (v43);
    }
    swift_bridgeObjectRelease();
    uint64_t v56 = v80;
    uint64_t v55 = v81;
    uint64_t v57 = v82;
    (*(void (**)(char *, void, uint64_t))(v81 + 104))(v80, enum case for DispatchQoS.QoSClass.default(_:), v82);
    uint64_t v88 = (char *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
    uint64_t v58 = (void *)swift_allocObject();
    objc_super v59 = v85;
    uint64_t v60 = v86;
    v58[2] = v85;
    v58[3] = v60;
    uint64_t v61 = v72;
    uint64_t v58[4] = v70;
    v58[5] = v61;
    unint64_t v92 = sub_10015F160;
    uint64_t v93 = v58;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100007244;
    uint64_t v91 = &unk_1002FD6F0;
    unint64_t v62 = _Block_copy(aBlock);
    uint64_t v63 = v59;
    swift_retain();
    swift_retain();
    unint64_t v64 = v83;
    static DispatchQoS.unspecified.getter();
    uint64_t v89 = &_swiftEmptyArrayStorage;
    sub_10015F0D0((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
    uint64_t v65 = v74;
    uint64_t v66 = v76;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v67 = v88;
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v62);

    (*(void (**)(char *, uint64_t))(v75 + 8))(v65, v66);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v64, v73);
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return a3(0);
  }
}

void sub_10014EA84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t v53 = a5;
  dispatch_group_t v54 = a6;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v48 = v25;
    uint64_t v49 = v23;
    uint64_t v50 = v19;
    uint64_t v51 = v22;
    uint64_t v52 = v16;
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E718);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v47 = a4;
      uint64_t v45 = (void *)v30;
      uint64_t v46 = swift_slowAlloc();
      aBlock[0] = v46;
      *(_DWORD *)uint64_t v29 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v56 = (void *)sub_100135190(a2, a3, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 12) = 2112;
      uint64_t v31 = _convertErrorToNSError(_:)();
      uint64_t v56 = (void *)v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v45 = v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Error fetching ckDatabase (%s) changes: %@", (uint8_t *)v29, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    id v36 = (void *)swift_allocObject();
    v36[2] = v53;
    uint64_t v36[3] = a2;
    v36[4] = a3;
    v36[5] = a1;
    aBlock[4] = (uint64_t)sub_10015F214;
    aBlock[5] = (uint64_t)v36;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100007244;
    void aBlock[3] = (uint64_t)&unk_1002FD768;
    id v37 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_retain();
    unint64_t v38 = v48;
    static DispatchQoS.unspecified.getter();
    uint64_t v56 = &_swiftEmptyArrayStorage;
    sub_10015F0D0((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
    unint64_t v39 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v37);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v15);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v51);
    swift_release();
  }
  else
  {
    uint64_t v53 = v11;
    if (qword_100320B80 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E730);
    swift_bridgeObjectRetain_n();
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v56 = (void *)sub_100135190(a2, a3, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Successfully fetched ckDatabase (%s) changes", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v40 = v53;
    id v41 = [self standardUserDefaults];
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v10);
    NSString v43 = String._bridgeToObjectiveC()();
    [v41 setObject:isa forKey:v43];
  }
  dispatch_group_leave(v54);
}

uint64_t sub_10014F228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000;
  sub_10022C0AC(a4, a2, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 16) = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_10014F2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[0] = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a4;
  aBlock[4] = sub_10015F260;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  void aBlock[3] = &unk_1002FD7B8;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v20[1] = &_swiftEmptyArrayStorage;
  sub_10015F0D0((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  return swift_release();
}

uint64_t sub_10014F5A0(uint64_t a1, uint64_t (*a2)(BOOL))
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 16);
  if (v4)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E718);
    swift_retain_n();
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v6, v7))
    {

      swift_release_n();
      return a2(v4 == 0);
    }
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v9 = Dictionary.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    sub_100135190(v9, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed syncing (pulling) cloudkit changes from server: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E718);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v6, v13)) {
      goto LABEL_11;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v13, "Successfully synced (pulled) cloudkit changes from server", v14, 2u);
  }
  swift_slowDealloc();
LABEL_11:

  return a2(v4 == 0);
}

id *sub_10014F894()
{
  sub_100006574((uint64_t)(v0 + 2), &qword_100327130);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_10014F904()
{
  sub_10014F894();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CloudKitSyncManager()
{
  return self;
}

uint64_t sub_10014F95C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_10014FA24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_100009F04(&qword_10032B730);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v15, &qword_10032B730);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v21, v22, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      *(_WORD *)(v19 + 12) = 2112;
      uint64_t v23 = _convertErrorToNSError(_:)();
      uint64_t v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to save record %s with error: %@", (uint8_t *)v19, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v30 = sub_100135190(0xD000000000000017, 0x800000010029B040, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v28, v29, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully saved %s %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    }

    sub_100006574((uint64_t)v15, &qword_10032B730);
  }
}

void sub_10014FF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v15, (uint64_t *)&unk_100325860);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v21, v22, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      *(_WORD *)(v19 + 12) = 2112;
      uint64_t v23 = _convertErrorToNSError(_:)();
      uint64_t v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to save record %s with error: %@", (uint8_t *)v19, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v30 = sub_100135190(0xD000000000000014, 0x800000010029B150, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v28, v29, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully saved %s %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    }

    sub_100006574((uint64_t)v15, (uint64_t *)&unk_100325860);
  }
}

void sub_100150514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeneficiaryManifestRecord();
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_100009F04(&qword_1003235C0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v15, &qword_1003235C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v21, v22, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
      *(_WORD *)(v19 + 12) = 2112;
      uint64_t v23 = _convertErrorToNSError(_:)();
      uint64_t v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to save record %s with error: %@", (uint8_t *)v19, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v30 = sub_100135190(0xD000000000000019, 0x800000010029E040, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v28, v29, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully saved %s %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
    }

    sub_100006574((uint64_t)v15, &qword_1003235C0);
  }
}

void sub_100150A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v15, &qword_100321CF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v21, v22, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      *(_WORD *)(v19 + 12) = 2112;
      uint64_t v23 = _convertErrorToNSError(_:)();
      uint64_t v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to save record %s with error: %@", (uint8_t *)v19, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v30 = sub_100135190(0xD000000000000015, 0x800000010029B170, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v28, v29, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully saved %s %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }

    sub_100006574((uint64_t)v15, &qword_100321CF0);
  }
}

void sub_100151004(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v15, &qword_100325890);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v21, v22, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      *(_WORD *)(v19 + 12) = 2112;
      uint64_t v23 = _convertErrorToNSError(_:)();
      uint64_t v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to save record %s with error: %@", (uint8_t *)v19, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v30 = sub_100135190(0xD00000000000001BLL, 0x800000010029B0C0, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v28, v29, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully saved %s %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    }

    sub_100006574((uint64_t)v15, &qword_100325890);
  }
}

void sub_10015157C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianHealthRecord();
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_100009F04(&qword_100323580);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v15, &qword_100323580);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v21, v22, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      *(_WORD *)(v19 + 12) = 2112;
      uint64_t v23 = _convertErrorToNSError(_:)();
      uint64_t v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to save record %s with error: %@", (uint8_t *)v19, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v30 = sub_100135190(0xD000000000000015, 0x800000010029B060, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v28, v29, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully saved %s %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    }

    sub_100006574((uint64_t)v15, &qword_100323580);
  }
}

void sub_100151AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_100009F04(&qword_1003235A0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v15, &qword_1003235A0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v21, v22, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      *(_WORD *)(v19 + 12) = 2112;
      uint64_t v23 = _convertErrorToNSError(_:)();
      uint64_t v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to save record %s with error: %@", (uint8_t *)v19, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v30 = sub_100135190(0xD00000000000001BLL, 0x800000010029B0A0, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v28, v29, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully saved %s %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    }

    sub_100006574((uint64_t)v15, &qword_1003235A0);
  }
}

void sub_10015204C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianRecord();
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_100009F04(&qword_10032E140);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v15, &qword_10032E140);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v21, v22, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_WORD *)(v19 + 12) = 2112;
      uint64_t v23 = _convertErrorToNSError(_:)();
      uint64_t v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to save record %s with error: %@", (uint8_t *)v19, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v30 = sub_100135190(0x6169646F74737543, 0xEF64726F6365526ELL, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v28, v29, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully saved %s %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }

    sub_100006574((uint64_t)v15, &qword_10032E140);
  }
}

void sub_1001525BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v15, (uint64_t *)&unk_100324590);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v21, v22, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      *(_WORD *)(v19 + 12) = 2112;
      uint64_t v23 = _convertErrorToNSError(_:)();
      uint64_t v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to save record %s with error: %@", (uint8_t *)v19, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10015E280((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E718);
    sub_10015E014(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v30 = sub_100135190(0xD000000000000017, 0x800000010029AAB0, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v30 = sub_100135190(v28, v29, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully saved %s %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10015E280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    }

    sub_100006574((uint64_t)v15, (uint64_t *)&unk_100324590);
  }
}

void sub_100152B24(uint64_t a1, char a2, uint64_t a3, unint64_t a4, void *a5)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E718);
    sub_10010397C(a1, 1);
    swift_bridgeObjectRetain();
    id v19 = a5;
    sub_10010397C(a1, 1);
    swift_bridgeObjectRetain();
    id v20 = v19;
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315650;
      swift_bridgeObjectRetain();
      sub_100135190(a3, a4, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2080;
      id v24 = [v20 recordName];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      sub_100135190(v25, v27, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 22) = 2112;
      uint64_t v29 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v23 = v29;
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v21, "Failed to delete record %s %s with error: %@", (uint8_t *)v22, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100080A98(a1, 1);
    }
    else
    {
      sub_100080A98(a1, 1);

      swift_bridgeObjectRelease_n();
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
    }
  }
  else
  {
    if (qword_100320B80 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E730);
    swift_bridgeObjectRetain_n();
    id v9 = a5;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      swift_bridgeObjectRetain();
      sub_100135190(a3, a4, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2080;
      id v13 = [v9 recordName];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;

      sub_100135190(v14, v16, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Successfully deleted record  %s %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_100153060(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v52 = a6;
  uint64_t v53 = a5;
  uint64_t v49 = a4;
  uint64_t v50 = a3;
  int v51 = a2;
  uint64_t v7 = type metadata accessor for BeneficiaryManifestRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  unint64_t v15 = (char *)&v48 - v14;
  uint64_t v16 = sub_100009F04(&qword_100328678);
  uint64_t v18 = __chkstk_darwin(v16 - 8, v17);
  id v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = sub_100009F04(&qword_100328670);
  __chkstk_darwin(v24, v25);
  unint64_t v27 = (uint64_t *)((char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v27, &qword_100328670);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = *v27;
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E718);
    swift_errorRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      unint64_t v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 138412290;
      uint64_t v34 = _convertErrorToNSError(_:)();
      uint64_t v55 = (void *)v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v33 = v34;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "processZoneRecordDelete failed to find existing local record with error: %@", v32, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    v53(v28, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10002895C((uint64_t)v27, (uint64_t)v23, &qword_100328678);
    sub_100019730((uint64_t)v23, (uint64_t)v20, &qword_100328678);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7) == 1)
    {
      sub_100006574((uint64_t)v20, &qword_100328678);
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_100007288(v35, (uint64_t)qword_10033E718);
      id v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        unint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "processZoneRecordDelete did not find existing local record", v38, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v54 = -7003;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_10015F0D0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      unint64_t v39 = v55;
      v53((uint64_t)v55, 1);
    }
    else
    {
      sub_10015E1EC((uint64_t)v20, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
      char v41 = v51;
      if (v15[*(int *)(v7 + 32)] == (v51 & 1))
      {
        sub_10016B720(v49, (uint64_t)v53, v52);
      }
      else
      {
        if (qword_100320B78 != -1) {
          swift_once();
        }
        uint64_t v42 = type metadata accessor for Logger();
        sub_100007288(v42, (uint64_t)qword_10033E718);
        sub_10015E014((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
        NSString v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = swift_slowAlloc();
          *(_DWORD *)uint64_t v45 = 67109376;
          int v46 = v12[*(int *)(v7 + 32)];
          sub_10015E280((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
          LODWORD(v55) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v45 + 8) = 1024;
          LODWORD(v55) = v41 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "processZoneRecordDelete not deleting record because currentRecord is in manatee %{BOOL}d and request was for %{BOOL}d", (uint8_t *)v45, 0xEu);
          swift_slowDealloc();
        }
        else
        {
          sub_10015E280((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
        }

        type metadata accessor for AACustodianError(0);
        uint64_t v54 = -7003;
        sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
        sub_10015F0D0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v47 = v55;
        v53((uint64_t)v55, 1);
      }
      sub_10015E280((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
    }
    return sub_100006574((uint64_t)v23, &qword_100328678);
  }
}

uint64_t sub_1001537BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v52 = a6;
  uint64_t v53 = a5;
  uint64_t v49 = a4;
  uint64_t v50 = a3;
  int v51 = a2;
  uint64_t v7 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  unint64_t v15 = (char *)&v48 - v14;
  uint64_t v16 = sub_100009F04(&qword_1003235F8);
  uint64_t v18 = __chkstk_darwin(v16 - 8, v17);
  id v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = sub_100009F04(&qword_100326C68);
  __chkstk_darwin(v24, v25);
  unint64_t v27 = (uint64_t *)((char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v27, &qword_100326C68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = *v27;
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E718);
    swift_errorRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      unint64_t v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 138412290;
      uint64_t v34 = _convertErrorToNSError(_:)();
      uint64_t v55 = (void *)v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v33 = v34;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "processZoneRecordDelete failed to find existing local record with error: %@", v32, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    v53(v28, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10002895C((uint64_t)v27, (uint64_t)v23, &qword_1003235F8);
    sub_100019730((uint64_t)v23, (uint64_t)v20, &qword_1003235F8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7) == 1)
    {
      sub_100006574((uint64_t)v20, &qword_1003235F8);
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_100007288(v35, (uint64_t)qword_10033E718);
      id v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        unint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "processZoneRecordDelete did not find existing local record", v38, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v54 = -7003;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_10015F0D0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      unint64_t v39 = v55;
      v53((uint64_t)v55, 1);
    }
    else
    {
      sub_10015E1EC((uint64_t)v20, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      char v41 = v51;
      if (v15[*(int *)(v7 + 44)] == (v51 & 1))
      {
        sub_10016B720(v49, (uint64_t)v53, v52);
      }
      else
      {
        if (qword_100320B78 != -1) {
          swift_once();
        }
        uint64_t v42 = type metadata accessor for Logger();
        sub_100007288(v42, (uint64_t)qword_10033E718);
        sub_10015E014((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        NSString v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = swift_slowAlloc();
          *(_DWORD *)uint64_t v45 = 67109376;
          int v46 = v12[*(int *)(v7 + 44)];
          sub_10015E280((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
          LODWORD(v55) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v45 + 8) = 1024;
          LODWORD(v55) = v41 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "processZoneRecordDelete not deleting record because currentRecord is in manatee %{BOOL}d and request was for %{BOOL}d", (uint8_t *)v45, 0xEu);
          swift_slowDealloc();
        }
        else
        {
          sub_10015E280((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        }

        type metadata accessor for AACustodianError(0);
        uint64_t v54 = -7003;
        sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
        sub_10015F0D0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v47 = v55;
        v53((uint64_t)v55, 1);
      }
      sub_10015E280((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    }
    return sub_100006574((uint64_t)v23, &qword_1003235F8);
  }
}

uint64_t sub_100153F18(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t (*a7)(void), uint64_t *a8, uint64_t *a9, uint64_t (*a10)(void))
{
  uint64_t v56 = a6;
  uint64_t v57 = a5;
  v53[0] = a4;
  v53[1] = a3;
  int v54 = a2;
  uint64_t v12 = a7(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v55 = (uint64_t)v53 - v19;
  uint64_t v20 = sub_100009F04(a8);
  uint64_t v22 = __chkstk_darwin(v20 - 8, v21);
  uint64_t v24 = (char *)v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  unint64_t v27 = (char *)v53 - v26;
  uint64_t v28 = sub_100009F04(a9);
  __chkstk_darwin(v28, v29);
  os_log_type_t v31 = (uint64_t *)((char *)v53 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v31, a9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v32 = *v31;
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E718);
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      id v36 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v37 = (void *)swift_slowAlloc();
      *(_DWORD *)id v36 = 138412290;
      uint64_t v38 = _convertErrorToNSError(_:)();
      objc_super v59 = (void *)v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v37 = v38;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "processZoneRecordDelete failed to find existing local record with error: %@", v36, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    v57(v32, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10002895C((uint64_t)v31, (uint64_t)v27, a8);
    sub_100019730((uint64_t)v27, (uint64_t)v24, a8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v24, 1, v12) == 1)
    {
      sub_100006574((uint64_t)v24, a8);
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_100007288(v39, (uint64_t)qword_10033E718);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "processZoneRecordDelete did not find existing local record", v42, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v58 = -7003;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_10015F0D0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      NSString v43 = v59;
      v57((uint64_t)v59, 1);
    }
    else
    {
      uint64_t v45 = (uint64_t)v24;
      uint64_t v46 = v55;
      sub_10015E1EC(v45, v55, a10);
      if (*(unsigned char *)(v46 + *(int *)(v12 + 36)) == (v54 & 1))
      {
        sub_10016B720(v53[0], (uint64_t)v57, v56);
      }
      else
      {
        if (qword_100320B78 != -1) {
          swift_once();
        }
        uint64_t v47 = type metadata accessor for Logger();
        sub_100007288(v47, (uint64_t)qword_10033E718);
        sub_10015E014(v46, (uint64_t)v17, a10);
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = swift_slowAlloc();
          *(_DWORD *)uint64_t v50 = 67109376;
          int v51 = v17[*(int *)(v12 + 36)];
          sub_10015E280((uint64_t)v17, a10);
          LODWORD(v59) = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v50 + 8) = 1024;
          LODWORD(v59) = v54 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "processZoneRecordDelete not deleting record because currentRecord is in manatee %{BOOL}d and request was for %{BOOL}d", (uint8_t *)v50, 0xEu);
          uint64_t v46 = v55;
          swift_slowDealloc();
        }
        else
        {
          sub_10015E280((uint64_t)v17, a10);
        }

        type metadata accessor for AACustodianError(0);
        uint64_t v58 = -7003;
        sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
        sub_10015F0D0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v52 = v59;
        v57((uint64_t)v59, 1);
      }
      sub_10015E280(v46, a10);
    }
    return sub_100006574((uint64_t)v27, a8);
  }
}

uint64_t sub_100154630(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t (*a7)(void), uint64_t *a8, uint64_t *a9, uint64_t (*a10)(void))
{
  uint64_t v56 = a6;
  uint64_t v57 = a5;
  v53[0] = a4;
  v53[1] = a3;
  int v54 = a2;
  uint64_t v12 = a7(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v55 = (uint64_t)v53 - v19;
  uint64_t v20 = sub_100009F04(a8);
  uint64_t v22 = __chkstk_darwin(v20 - 8, v21);
  uint64_t v24 = (char *)v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  unint64_t v27 = (char *)v53 - v26;
  uint64_t v28 = sub_100009F04(a9);
  __chkstk_darwin(v28, v29);
  os_log_type_t v31 = (uint64_t *)((char *)v53 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v31, a9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v32 = *v31;
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E718);
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      id v36 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v37 = (void *)swift_slowAlloc();
      *(_DWORD *)id v36 = 138412290;
      uint64_t v38 = _convertErrorToNSError(_:)();
      objc_super v59 = (void *)v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v37 = v38;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "processZoneRecordDelete failed to find existing local record with error: %@", v36, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    v57(v32, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10002895C((uint64_t)v31, (uint64_t)v27, a8);
    sub_100019730((uint64_t)v27, (uint64_t)v24, a8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v24, 1, v12) == 1)
    {
      sub_100006574((uint64_t)v24, a8);
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_100007288(v39, (uint64_t)qword_10033E718);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "processZoneRecordDelete did not find existing local record", v42, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v58 = -7003;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_10015F0D0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      NSString v43 = v59;
      v57((uint64_t)v59, 1);
    }
    else
    {
      uint64_t v45 = (uint64_t)v24;
      uint64_t v46 = v55;
      sub_10015E1EC(v45, v55, a10);
      if (*(unsigned char *)(v46 + *(int *)(v12 + 40)) == (v54 & 1))
      {
        sub_10016B720(v53[0], (uint64_t)v57, v56);
      }
      else
      {
        if (qword_100320B78 != -1) {
          swift_once();
        }
        uint64_t v47 = type metadata accessor for Logger();
        sub_100007288(v47, (uint64_t)qword_10033E718);
        sub_10015E014(v46, (uint64_t)v17, a10);
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = swift_slowAlloc();
          *(_DWORD *)uint64_t v50 = 67109376;
          int v51 = v17[*(int *)(v12 + 40)];
          sub_10015E280((uint64_t)v17, a10);
          LODWORD(v59) = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v50 + 8) = 1024;
          LODWORD(v59) = v54 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "processZoneRecordDelete not deleting record because currentRecord is in manatee %{BOOL}d and request was for %{BOOL}d", (uint8_t *)v50, 0xEu);
          uint64_t v46 = v55;
          swift_slowDealloc();
        }
        else
        {
          sub_10015E280((uint64_t)v17, a10);
        }

        type metadata accessor for AACustodianError(0);
        uint64_t v58 = -7003;
        sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
        sub_10015F0D0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v52 = v59;
        v57((uint64_t)v59, 1);
      }
      sub_10015E280(v46, a10);
    }
    return sub_100006574((uint64_t)v27, a8);
  }
}

uint64_t sub_100154D48(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v52 = a6;
  uint64_t v53 = a5;
  uint64_t v49 = a4;
  uint64_t v50 = a3;
  int v51 = a2;
  uint64_t v7 = type metadata accessor for CustodianRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v48 - v14;
  uint64_t v16 = sub_100009F04(&qword_100328480);
  uint64_t v18 = __chkstk_darwin(v16 - 8, v17);
  uint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = sub_100009F04(&qword_100328650);
  __chkstk_darwin(v24, v25);
  unint64_t v27 = (uint64_t *)((char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v27, &qword_100328650);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = *v27;
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E718);
    swift_errorRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 138412290;
      uint64_t v34 = _convertErrorToNSError(_:)();
      uint64_t v55 = (void *)v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v33 = v34;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "processZoneRecordDelete failed to find existing local record with error: %@", v32, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    v53(v28, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10002895C((uint64_t)v27, (uint64_t)v23, &qword_100328480);
    sub_100019730((uint64_t)v23, (uint64_t)v20, &qword_100328480);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7) == 1)
    {
      sub_100006574((uint64_t)v20, &qword_100328480);
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_100007288(v35, (uint64_t)qword_10033E718);
      id v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "processZoneRecordDelete did not find existing local record", v38, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v54 = -7003;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_10015F0D0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v39 = v55;
      v53((uint64_t)v55, 1);
    }
    else
    {
      sub_10015E1EC((uint64_t)v20, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      char v41 = v51;
      if (v15[*(int *)(v7 + 48)] == (v51 & 1))
      {
        sub_10016B720(v49, (uint64_t)v53, v52);
      }
      else
      {
        if (qword_100320B78 != -1) {
          swift_once();
        }
        uint64_t v42 = type metadata accessor for Logger();
        sub_100007288(v42, (uint64_t)qword_10033E718);
        sub_10015E014((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        NSString v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = swift_slowAlloc();
          *(_DWORD *)uint64_t v45 = 67109376;
          int v46 = v12[*(int *)(v7 + 48)];
          sub_10015E280((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          LODWORD(v55) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v45 + 8) = 1024;
          LODWORD(v55) = v41 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "processZoneRecordDelete not deleting record because currentRecord is in manatee %{BOOL}d and request was for %{BOOL}d", (uint8_t *)v45, 0xEu);
          swift_slowDealloc();
        }
        else
        {
          sub_10015E280((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        }

        type metadata accessor for AACustodianError(0);
        uint64_t v54 = -7003;
        sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
        sub_10015F0D0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v47 = v55;
        v53((uint64_t)v55, 1);
      }
      sub_10015E280((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }
    return sub_100006574((uint64_t)v23, &qword_100328480);
  }
}

uint64_t sub_1001554A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a6;
  uint64_t v31 = a3;
  uint64_t v32 = a5;
  v29[1] = a4;
  uint64_t v30 = a2;
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v35 - 8);
  __chkstk_darwin(v35, v8);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v11 - 8);
  uint64_t v37 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15, v18);
  uint64_t v19 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(v6 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, v15);
  unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v21 = (v17 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v23 + v20, v19, v15);
  uint64_t v24 = (void *)(v23 + v21);
  uint64_t v25 = v31;
  *uint64_t v24 = v30;
  v24[1] = v25;
  *(void *)(v23 + v22) = v6;
  aBlock[4] = v32;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  void aBlock[3] = v34;
  uint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = &_swiftEmptyArrayStorage;
  sub_10015F0D0((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  uint64_t v27 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v27);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v37);
  return swift_release();
}

uint64_t sub_100155838(uint64_t a1, void (*a2)(char *), uint64_t a3, unint64_t a4)
{
  uint64_t v40 = (uint8_t *)a4;
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100009F04(&qword_100328680);
  __chkstk_darwin(v43, v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v38 - v19;
  id v21 = [self defaultManager];
  URL.path.getter();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v23 = [v21 fileExistsAtPath:v22];

  if (v23)
  {
    uint64_t v31 = Data.init(contentsOf:options:)();
    unint64_t v33 = v32;
    swift_retain();
    sub_1002092E8(v46);
    swift_release();
    uint64_t v35 = v46[0];
    uint64_t v36 = v46[1];
    sub_10015F0D0((unint64_t *)&unk_10032AFA0, (void (*)(uint64_t))type metadata accessor for BenefactorInfoRecord);
    swift_retain();
    uint64_t v39 = v35;
    uint64_t v40 = (uint8_t *)v36;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_100013198(v39, (unint64_t)v40);
    sub_100013198(v31, v33);
    swift_release();
    sub_10015E1EC((uint64_t)v17, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_10015E014((uint64_t)v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v12, 0, 1, v42);
    swift_storeEnumTagMultiPayload();
    v45(v12);
    sub_100006574((uint64_t)v12, &qword_100328680);
    return sub_10015E280((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
  else
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E7A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v40 = v27 + 4;
      sub_10015F0D0((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      v46[3] = sub_100135190(v28, v29, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Record %s not found.", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }

    uint64_t v30 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v12, 1, 1, v42);
    swift_storeEnumTagMultiPayload();
    v30(v12);
    return sub_100006574((uint64_t)v12, &qword_100328680);
  }
}

uint64_t sub_100155FB8(uint64_t a1, void (*a2)(char *), uint64_t a3, unint64_t a4)
{
  uint64_t v40 = (uint8_t *)a4;
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100009F04(&qword_100328670);
  __chkstk_darwin(v43, v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BeneficiaryManifestRecord();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v38 - v19;
  id v21 = [self defaultManager];
  URL.path.getter();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v23 = [v21 fileExistsAtPath:v22];

  if (v23)
  {
    uint64_t v31 = Data.init(contentsOf:options:)();
    unint64_t v33 = v32;
    swift_retain();
    sub_1002092E8(v46);
    swift_release();
    uint64_t v35 = v46[0];
    uint64_t v36 = v46[1];
    sub_10015F0D0((unint64_t *)&unk_100323940, (void (*)(uint64_t))type metadata accessor for BeneficiaryManifestRecord);
    swift_retain();
    uint64_t v39 = v35;
    uint64_t v40 = (uint8_t *)v36;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_100013198(v39, (unint64_t)v40);
    sub_100013198(v31, v33);
    swift_release();
    sub_10015E1EC((uint64_t)v17, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
    sub_10015E014((uint64_t)v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v12, 0, 1, v42);
    swift_storeEnumTagMultiPayload();
    v45(v12);
    sub_100006574((uint64_t)v12, &qword_100328670);
    return sub_10015E280((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
  }
  else
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E7A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v40 = v27 + 4;
      sub_10015F0D0((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      v46[3] = sub_100135190(v28, v29, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Record %s not found.", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }

    uint64_t v30 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v12, 1, 1, v42);
    swift_storeEnumTagMultiPayload();
    v30(v12);
    return sub_100006574((uint64_t)v12, &qword_100328670);
  }
}

uint64_t sub_100156738(uint64_t a1, void (*a2)(char *), uint64_t a3, unint64_t a4)
{
  uint64_t v40 = (uint8_t *)a4;
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100009F04(&qword_100328668);
  __chkstk_darwin(v43, v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v38 - v19;
  id v21 = [self defaultManager];
  URL.path.getter();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v23 = [v21 fileExistsAtPath:v22];

  if (v23)
  {
    uint64_t v31 = Data.init(contentsOf:options:)();
    unint64_t v33 = v32;
    swift_retain();
    sub_1002092E8(v46);
    swift_release();
    uint64_t v35 = v46[0];
    uint64_t v36 = v46[1];
    sub_10015F0D0(&qword_100321610, (void (*)(uint64_t))type metadata accessor for BeneficiaryInfoRecord);
    swift_retain();
    uint64_t v39 = v35;
    uint64_t v40 = (uint8_t *)v36;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_100013198(v39, (unint64_t)v40);
    sub_100013198(v31, v33);
    swift_release();
    sub_10015E1EC((uint64_t)v17, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    sub_10015E014((uint64_t)v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v12, 0, 1, v42);
    swift_storeEnumTagMultiPayload();
    v45(v12);
    sub_100006574((uint64_t)v12, &qword_100328668);
    return sub_10015E280((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
  else
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E7A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v40 = v27 + 4;
      sub_10015F0D0((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      v46[3] = sub_100135190(v28, v29, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Record %s not found.", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }

    uint64_t v30 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v12, 1, 1, v42);
    swift_storeEnumTagMultiPayload();
    v30(v12);
    return sub_100006574((uint64_t)v12, &qword_100328668);
  }
}

uint64_t sub_100156EB8(uint64_t a1, void (*a2)(char *), uint64_t a3, unint64_t a4)
{
  uint64_t v40 = (uint8_t *)a4;
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100009F04(&qword_100326C68);
  __chkstk_darwin(v43, v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v38 - v19;
  id v21 = [self defaultManager];
  URL.path.getter();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v23 = [v21 fileExistsAtPath:v22];

  if (v23)
  {
    uint64_t v31 = Data.init(contentsOf:options:)();
    unint64_t v33 = v32;
    swift_retain();
    sub_1002092E8(v46);
    swift_release();
    uint64_t v35 = v46[0];
    uint64_t v36 = v46[1];
    sub_10015F0D0((unint64_t *)&unk_1003301D0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationRecord);
    swift_retain();
    uint64_t v39 = v35;
    uint64_t v40 = (uint8_t *)v36;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_100013198(v39, (unint64_t)v40);
    sub_100013198(v31, v33);
    swift_release();
    sub_10015E1EC((uint64_t)v17, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    sub_10015E014((uint64_t)v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v12, 0, 1, v42);
    swift_storeEnumTagMultiPayload();
    v45(v12);
    sub_100006574((uint64_t)v12, &qword_100326C68);
    return sub_10015E280((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }
  else
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E7A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v40 = v27 + 4;
      sub_10015F0D0((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      v46[3] = sub_100135190(v28, v29, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Record %s not found.", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }

    uint64_t v30 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v12, 1, 1, v42);
    swift_storeEnumTagMultiPayload();
    v30(v12);
    return sub_100006574((uint64_t)v12, &qword_100326C68);
  }
}

uint64_t sub_100157638(uint64_t a1, void (*a2)(char *), uint64_t a3, unint64_t a4)
{
  uint64_t v40 = (uint8_t *)a4;
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100009F04(&qword_100328660);
  __chkstk_darwin(v43, v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CustodianHealthRecord();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v38 - v19;
  id v21 = [self defaultManager];
  URL.path.getter();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v23 = [v21 fileExistsAtPath:v22];

  if (v23)
  {
    uint64_t v31 = Data.init(contentsOf:options:)();
    unint64_t v33 = v32;
    swift_retain();
    sub_1002092E8(v46);
    swift_release();
    uint64_t v35 = v46[0];
    uint64_t v36 = v46[1];
    sub_10015F0D0((unint64_t *)&unk_10032AD30, (void (*)(uint64_t))type metadata accessor for CustodianHealthRecord);
    swift_retain();
    uint64_t v39 = v35;
    uint64_t v40 = (uint8_t *)v36;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_100013198(v39, (unint64_t)v40);
    sub_100013198(v31, v33);
    swift_release();
    sub_10015E1EC((uint64_t)v17, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    sub_10015E014((uint64_t)v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v12, 0, 1, v42);
    swift_storeEnumTagMultiPayload();
    v45(v12);
    sub_100006574((uint64_t)v12, &qword_100328660);
    return sub_10015E280((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  }
  else
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E7A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v40 = v27 + 4;
      sub_10015F0D0((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      v46[3] = sub_100135190(v28, v29, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Record %s not found.", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }

    uint64_t v30 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v12, 1, 1, v42);
    swift_storeEnumTagMultiPayload();
    v30(v12);
    return sub_100006574((uint64_t)v12, &qword_100328660);
  }
}

uint64_t sub_100157DB8(uint64_t a1, void (*a2)(char *), uint64_t a3, unint64_t a4)
{
  uint64_t v40 = (uint8_t *)a4;
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100009F04(&qword_100328658);
  __chkstk_darwin(v43, v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v38 - v19;
  id v21 = [self defaultManager];
  URL.path.getter();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v23 = [v21 fileExistsAtPath:v22];

  if (v23)
  {
    uint64_t v31 = Data.init(contentsOf:options:)();
    unint64_t v33 = v32;
    swift_retain();
    sub_1002092E8(v46);
    swift_release();
    uint64_t v35 = v46[0];
    uint64_t v36 = v46[1];
    sub_10015F0D0((unint64_t *)&unk_10032FED0, (void (*)(uint64_t))type metadata accessor for CustodianRecoveryInfoRecord);
    swift_retain();
    uint64_t v39 = v35;
    uint64_t v40 = (uint8_t *)v36;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_100013198(v39, (unint64_t)v40);
    sub_100013198(v31, v33);
    swift_release();
    sub_10015E1EC((uint64_t)v17, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    sub_10015E014((uint64_t)v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v12, 0, 1, v42);
    swift_storeEnumTagMultiPayload();
    v45(v12);
    sub_100006574((uint64_t)v12, &qword_100328658);
    return sub_10015E280((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  }
  else
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E7A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v40 = v27 + 4;
      sub_10015F0D0((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      v46[3] = sub_100135190(v28, v29, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Record %s not found.", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }

    uint64_t v30 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v12, 1, 1, v42);
    swift_storeEnumTagMultiPayload();
    v30(v12);
    return sub_100006574((uint64_t)v12, &qword_100328658);
  }
}

uint64_t sub_100158538(uint64_t a1, void (*a2)(char *), uint64_t a3, unint64_t a4)
{
  uint64_t v40 = (uint8_t *)a4;
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100009F04(&qword_100328650);
  __chkstk_darwin(v43, v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CustodianRecord();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v38 - v19;
  id v21 = [self defaultManager];
  URL.path.getter();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v23 = [v21 fileExistsAtPath:v22];

  if (v23)
  {
    uint64_t v31 = Data.init(contentsOf:options:)();
    unint64_t v33 = v32;
    swift_retain();
    sub_1002092E8(v46);
    swift_release();
    uint64_t v35 = v46[0];
    uint64_t v36 = v46[1];
    sub_10015F0D0((unint64_t *)&unk_100324D40, (void (*)(uint64_t))type metadata accessor for CustodianRecord);
    swift_retain();
    uint64_t v39 = v35;
    uint64_t v40 = (uint8_t *)v36;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_100013198(v39, (unint64_t)v40);
    sub_100013198(v31, v33);
    swift_release();
    sub_10015E1EC((uint64_t)v17, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    sub_10015E014((uint64_t)v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v12, 0, 1, v42);
    swift_storeEnumTagMultiPayload();
    v45(v12);
    sub_100006574((uint64_t)v12, &qword_100328650);
    return sub_10015E280((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }
  else
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E7A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v40 = v27 + 4;
      sub_10015F0D0((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      v46[3] = sub_100135190(v28, v29, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Record %s not found.", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }

    uint64_t v30 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v12, 1, 1, v42);
    swift_storeEnumTagMultiPayload();
    v30(v12);
    return sub_100006574((uint64_t)v12, &qword_100328650);
  }
}

uint64_t sub_100158CB8(uint64_t a1, void (*a2)(char *), uint64_t a3, unint64_t a4)
{
  uint64_t v40 = (uint8_t *)a4;
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100009F04(&qword_100328648);
  __chkstk_darwin(v43, v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v38 - v19;
  id v21 = [self defaultManager];
  URL.path.getter();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v23 = [v21 fileExistsAtPath:v22];

  if (v23)
  {
    uint64_t v31 = Data.init(contentsOf:options:)();
    unint64_t v33 = v32;
    swift_retain();
    sub_1002092E8(v46);
    swift_release();
    uint64_t v35 = v46[0];
    uint64_t v36 = v46[1];
    sub_10015F0D0((unint64_t *)&unk_1003274F0, (void (*)(uint64_t))type metadata accessor for CustodianshipInfoRecord);
    swift_retain();
    uint64_t v39 = v35;
    uint64_t v40 = (uint8_t *)v36;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_100013198(v39, (unint64_t)v40);
    sub_100013198(v31, v33);
    swift_release();
    sub_10015E1EC((uint64_t)v17, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    sub_10015E014((uint64_t)v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v12, 0, 1, v42);
    swift_storeEnumTagMultiPayload();
    v45(v12);
    sub_100006574((uint64_t)v12, &qword_100328648);
    return sub_10015E280((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  }
  else
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E7A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v40 = v27 + 4;
      sub_10015F0D0((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      v46[3] = sub_100135190(v28, v29, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Record %s not found.", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }

    uint64_t v30 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v12, 1, 1, v42);
    swift_storeEnumTagMultiPayload();
    v30(v12);
    return sub_100006574((uint64_t)v12, &qword_100328648);
  }
}

void *sub_100159438(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v20 = a1;
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7, v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8, v10);
  v1[9] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v1[10] = v11;
  v1[11] = 0;
  v1[12] = &_swiftEmptyArrayStorage;
  v1[13] = [objc_allocWithZone((Class)NSOperationQueue) init];
  sub_1000093D0();
  v1[14] = 0;
  v1[15] = 0;
  static DispatchQoS.unspecified.getter();
  v22[0] = &_swiftEmptyArrayStorage;
  sub_10015F0D0((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v19);
  v1[16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v12 = type metadata accessor for CloudKitStore();
  v1[2] = v20;
  v1[5] = v12;
  v1[6] = &off_1002F9008;
  sub_100019730((uint64_t)(v1 + 2), (uint64_t)v22, &qword_100327130);
  type metadata accessor for CloudKitSyncPushDelegate();
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = qword_100320CC8;
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  *(void *)(v13 + 16) = qword_10033E9F0;
  sub_10002895C((uint64_t)v22, v13 + 24, &qword_100327130);
  v2[7] = v13;
  uint64_t v15 = (objc_class *)type metadata accessor for CloudKitAPSBridge();
  uint64_t v16 = (char *)objc_allocWithZone(v15);
  *(void *)&v16[OBJC_IVAR____TtC13appleaccountd17CloudKitAPSBridge_delegate + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = &off_100303550;
  swift_unknownObjectWeakAssign();
  v21.receiver = v16;
  v21.super_class = v15;
  swift_retain();
  v2[8] = [super init];
  return v2;
}

uint64_t sub_1001597C8(void *a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v138 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v140 = (uint64_t)v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = v7;
  __chkstk_darwin(v6, v8);
  uint64_t v141 = (char *)v133 - v9;
  uint64_t v10 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v142 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v144 = (uint64_t)v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = v13;
  __chkstk_darwin(v12, v14);
  uint64_t v145 = (char *)v133 - v15;
  uint64_t v16 = type metadata accessor for BeneficiaryManifestRecord();
  uint64_t v146 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16 - 8, v17);
  uint64_t v148 = (uint64_t)v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = v19;
  __chkstk_darwin(v18, v20);
  uint64_t v149 = (uint64_t)v133 - v21;
  uint64_t v22 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v150 = *(void *)(v22 - 8);
  uint64_t v23 = *(void *)(v150 + 64);
  uint64_t v25 = __chkstk_darwin(v22 - 8, v24);
  os_log_type_t v26 = (char *)v133 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v27);
  unint64_t v29 = (char *)v133 - v28;
  uint64_t v30 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v151 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30 - 8, v31);
  uint64_t v152 = v33;
  uint64_t v153 = (uint64_t)v133 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32, v34);
  uint64_t v154 = (char *)v133 - v35;
  uint64_t v36 = type metadata accessor for CustodianHealthRecord();
  uint64_t v155 = *(void *)(v36 - 8);
  uint64_t v38 = __chkstk_darwin(v36 - 8, v37);
  uint64_t v156 = v39;
  uint64_t v157 = (uint64_t)v133 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38, v40);
  uint64_t v158 = (char *)v133 - v41;
  uint64_t v42 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v159 = *(void *)(v42 - 8);
  uint64_t v44 = __chkstk_darwin(v42 - 8, v43);
  uint64_t v160 = v45;
  uint64_t v161 = (uint64_t)v133 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44, v46);
  uint64_t v162 = (char *)v133 - v47;
  uint64_t v48 = type metadata accessor for CustodianRecord();
  uint64_t v163 = *(void *)(v48 - 8);
  uint64_t v50 = __chkstk_darwin(v48 - 8, v49);
  uint64_t v164 = v51;
  uint64_t v165 = (uint64_t)v133 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50, v52);
  uint64_t v54 = (char *)v133 - v53;
  uint64_t v55 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v166 = *(void *)(v55 - 8);
  uint64_t v57 = __chkstk_darwin(v55 - 8, v56);
  uint64_t v167 = v58;
  uint64_t v168 = (uint64_t)v133 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57, v59);
  v169 = (char *)v133 - v60;
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  uint64_t v62 = sub_100007288(v61, (uint64_t)qword_10033E718);
  id v63 = a1;
  unint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = swift_slowAlloc();
    uint64_t v135 = v23;
    uint64_t v67 = v66;
    uint64_t v68 = swift_slowAlloc();
    uint64_t v136 = v62;
    uint64_t v171 = v68;
    *(_DWORD *)uint64_t v67 = 136315394;
    v133[1] = v67 + 4;
    id v69 = [v63 recordID];
    int v137 = v2;
    id v70 = v69;
    id v71 = [v69 recordName];
    uint64_t v134 = v54;
    id v72 = v71;

    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v73 = v26;
    uint64_t v74 = v29;
    unint64_t v76 = v75;

    uint64_t v170 = sub_100135190(v2, v76, &v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    unint64_t v29 = v74;
    os_log_type_t v26 = v73;
    swift_bridgeObjectRelease();
    *(_WORD *)(v67 + 12) = 2080;
    uint64_t v77 = CKRecord.recordType.getter();
    uint64_t v170 = sub_100135190(v77, v78, &v171);
    uint64_t v54 = v134;
    LOBYTE(v2) = v137;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Updating record %s of type %s", (uint8_t *)v67, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v80 = CKRecord.recordType.getter();
  uint64_t v81 = v79;
  if (v80 == 0xD000000000000017 && v79 == 0x800000010029AAB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v82 = v63;
    int v83 = v2 & 1;
    uint64_t v84 = v169;
    sub_100113488(v82, v83, (uint64_t)v169);
    if (qword_100320C20 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for CustodianshipInfoRecord;
    uint64_t v86 = v168;
    sub_10015E014((uint64_t)v84, v168, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    unint64_t v87 = (*(unsigned __int8 *)(v166 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80);
    uint64_t v88 = swift_allocObject();
    sub_10015E1EC(v86, v88 + v87, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    sub_10005FB84((uint64_t)v84, 0, 2, (uint64_t)sub_10015EFE4, v88);
LABEL_12:
    swift_release();
    uint64_t v89 = (uint64_t)v84;
LABEL_13:
    sub_10015E280(v89, (uint64_t (*)(void))v85);
    return 0;
  }
  if (v80 == 0x6169646F74737543 && v81 == 0xEF64726F6365526ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_1000A9178(v63, v2 & 1, (uint64_t)v54);
    uint64_t v84 = v54;
    if (qword_100320C20 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for CustodianRecord;
    uint64_t v91 = v165;
    sub_10015E014((uint64_t)v84, v165, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    unint64_t v92 = (*(unsigned __int8 *)(v163 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80);
    uint64_t v93 = swift_allocObject();
    sub_10015E1EC(v91, v93 + v92, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    sub_10005F0B0((uint64_t)v84, 0, 2, (uint64_t)sub_10015EE90, v93);
    goto LABEL_12;
  }
  if (v80 == 0xD00000000000001BLL && v81 == 0x800000010029B0A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v94 = v63;
    int v95 = v2 & 1;
    uint64_t v84 = v162;
    sub_1002887CC(v94, v95, (uint64_t)v162);
    if (qword_100320C20 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for CustodianRecoveryInfoRecord;
    uint64_t v96 = v161;
    sub_10015E014((uint64_t)v84, v161, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    unint64_t v97 = (*(unsigned __int8 *)(v159 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
    uint64_t v98 = swift_allocObject();
    sub_10015E1EC(v96, v98 + v97, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    sub_10005ED14((uint64_t)v84, 0, 2, (uint64_t)sub_10015EC84, v98);
    goto LABEL_12;
  }
  if (v80 == 0xD000000000000015 && v81 == 0x800000010029B060
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v99 = v63;
    int v100 = v2 & 1;
    uint64_t v84 = v158;
    sub_1001B9B90(v99, v100, (uint64_t)v158);
    if (qword_100320C20 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for CustodianHealthRecord;
    uint64_t v101 = v157;
    sub_10015E014((uint64_t)v84, v157, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    unint64_t v102 = (*(unsigned __int8 *)(v155 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
    uint64_t v103 = swift_allocObject();
    sub_10015E1EC(v101, v103 + v102, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    sub_10005E978((uint64_t)v84, 0, 2, (uint64_t)sub_10015EA80, v103);
    goto LABEL_12;
  }
  if (v80 == 0xD00000000000001BLL && v81 == 0x800000010029B0C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v104 = v63;
    int v105 = v2 & 1;
    uint64_t v84 = v154;
    sub_10028E3A8(v104, v105, (uint64_t)v154);
    if (qword_100320C20 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for InheritanceInvitationRecord;
    uint64_t v106 = v153;
    sub_10015E014((uint64_t)v84, v153, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    unint64_t v107 = (*(unsigned __int8 *)(v151 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
    uint64_t v108 = swift_allocObject();
    sub_10015E1EC(v106, v108 + v107, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    sub_10005F7E8((uint64_t)v84, 0, 2, (uint64_t)sub_10015E8D0, v108);
    goto LABEL_12;
  }
  if (v80 == 0xD000000000000020 && v81 == 0x8000000100299F70
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_10001686C(v63, v2 & 1, (uint64_t)v29);
    if (qword_100320C20 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for BeneficiaryInfoRecord;
    sub_10015E014((uint64_t)v29, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    unint64_t v109 = (*(unsigned __int8 *)(v150 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80);
    uint64_t v110 = swift_allocObject();
    sub_10015E1EC((uint64_t)v26, v110 + v109, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    sub_10005E5DC((uint64_t)v29, 0, 2, (uint64_t)sub_10015E75C, v110);
    swift_release();
    uint64_t v89 = (uint64_t)v29;
    goto LABEL_13;
  }
  if (v80 == 0xD000000000000024 && v81 == 0x800000010029B0E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v111 = v149;
    sub_100082710(v63, v2 & 1, v149);
    if (qword_100320C20 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for BeneficiaryManifestRecord;
    uint64_t v112 = v148;
    sub_10015E014(v111, v148, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
    unint64_t v113 = (*(unsigned __int8 *)(v146 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80);
    uint64_t v114 = swift_allocObject();
    sub_10015E1EC(v112, v114 + v113, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
    sub_1000602BC(v111, 0, 2, (uint64_t)sub_10015E558, v114);
    swift_release();
    uint64_t v89 = v111;
    goto LABEL_13;
  }
  if (v80 == 0xD00000000000001FLL && v81 == 0x800000010029B110
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v115 = v63;
    sub_1001BE70C(v115, v2 & 1, (uint64_t)v145);
    if (qword_100320C20 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for BenefactorInfoRecord;
    uint64_t v84 = v145;
    uint64_t v116 = v144;
    sub_10015E014((uint64_t)v145, v144, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    unint64_t v117 = (*(unsigned __int8 *)(v142 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80);
    uint64_t v118 = swift_allocObject();
    sub_10015E1EC(v116, v118 + v117, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_10005FF20((uint64_t)v84, 0, 2, (uint64_t)sub_10015E408, v118);
    goto LABEL_12;
  }
  if (v80 == 0xD000000000000017 && v81 == 0x800000010029B040)
  {
    swift_bridgeObjectRelease();
LABEL_61:
    id v120 = v63;
    sub_1000DF48C(v120, v2 & 1, v141);
    if (qword_100320C20 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for InheritanceHealthRecord;
    uint64_t v84 = v141;
    uint64_t v121 = v140;
    sub_10015E014((uint64_t)v141, v140, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    unint64_t v122 = (*(unsigned __int8 *)(v138 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
    uint64_t v123 = swift_allocObject();
    sub_10015E1EC(v121, v123 + v122, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    sub_10005F44C((uint64_t)v84, 0, 2, (uint64_t)sub_10015E254, v123);
    goto LABEL_12;
  }
  char v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v119) {
    goto LABEL_61;
  }
  id v124 = v63;
  uint64_t v125 = Logger.logObject.getter();
  os_log_type_t v126 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v125, v126))
  {
    uint64_t v127 = (uint8_t *)swift_slowAlloc();
    uint64_t v171 = swift_slowAlloc();
    *(_DWORD *)uint64_t v127 = 136315138;
    id v128 = v124;
    id v129 = [v128 description];
    uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v132 = v131;

    uint64_t v170 = sub_100135190(v130, v132, &v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v125, v126, "Unrecognized record type cannot be processed: %s", v127, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

void sub_10015AEB8(void *a1, unint64_t a2)
{
  id v5 = [a1 container];
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = [v5 containerID];

    id v8 = [v7 containerIdentifier];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (qword_100320D08 != -1) {
      swift_once();
    }
    char v12 = sub_10014F95C(v9, v11, (void *)qword_10033EA50);
    swift_bridgeObjectRelease();
    if (qword_100320B80 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E730);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    unint64_t v16 = a2 >> 62;
    if (!os_log_type_enabled((os_log_t)v14, v15))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 134217984;
    if (v16) {
      goto LABEL_35;
    }
    uint64_t v17 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v14, v15, "CloudKitSyncManager processing [%ld] changed", v2, 0xCu);
      swift_slowDealloc();

LABEL_15:
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v15))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v2 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = (uint64_t)v2;
        *(_DWORD *)uint64_t v25 = 136315138;
        uint64_t v35 = (void *)sub_100135190(5457241, 0xE300000000000000, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v24, v15, "Records in manatee?: %s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v35 = &_swiftEmptySetSingleton;
      if (v16)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        if (!v14) {
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v14 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v14) {
          goto LABEL_33;
        }
      }
      if (v14 >= 1) {
        break;
      }
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v26 = 0;
    int v27 = v12 & 1;
    do
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v30 = *(id *)(a2 + 8 * v26 + 32);
      }
      uint64_t v31 = v30;
      uint64_t v32 = sub_1001597C8(v30, v27);
      swift_errorRelease();
      if (v32)
      {
      }
      else
      {
        Swift::Int v28 = CKRecord.recordType.getter();
        sub_10027FE90(&v34, v28, v29);

        swift_bridgeObjectRelease();
      }
      ++v26;
    }
    while (v14 != v26);
LABEL_33:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E718);
    id v33 = a1;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      uint64_t v34 = (uint64_t)v33;
      id v23 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v33;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to obtain containerID from database: %@", v21, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_10015B484(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  int v25 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v24 - v12;
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)&v24 - v15;
  if (qword_100320C20 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_10033E868;
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  id v18 = [a1 recordName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v17(v13, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v16, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = v25 & 1;
  *(void *)(v20 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v13, v5);
  uint64_t v21 = (void *)(v20 + ((v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = v27;
  *uint64_t v21 = v26;
  v21[1] = v22;
  swift_retain();
  swift_retain();
  sub_1001554A4((uint64_t)v16, (uint64_t)sub_10015D918, v20, (uint64_t)&unk_1002FD1B0, (uint64_t)sub_10015D9F8, (uint64_t)&unk_1002FD1C8);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v5);
}

uint64_t sub_10015B77C(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  int v25 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v24 - v12;
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)&v24 - v15;
  if (qword_100320C20 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_10033E868;
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  id v18 = [a1 recordName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v17(v13, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v16, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = v25 & 1;
  *(void *)(v20 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v13, v5);
  uint64_t v21 = (void *)(v20 + ((v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = v27;
  *uint64_t v21 = v26;
  v21[1] = v22;
  swift_retain();
  swift_retain();
  sub_1001554A4((uint64_t)v16, (uint64_t)sub_10015DA14, v20, (uint64_t)&unk_1002FD228, (uint64_t)sub_10015DA30, (uint64_t)&unk_1002FD240);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v5);
}

uint64_t sub_10015BA7C(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  int v25 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v24 - v12;
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)&v24 - v15;
  if (qword_100320C20 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_10033E868;
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  id v18 = [a1 recordName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v17(v13, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v16, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = v25 & 1;
  *(void *)(v20 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v13, v5);
  uint64_t v21 = (void *)(v20 + ((v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = v27;
  *uint64_t v21 = v26;
  v21[1] = v22;
  swift_retain();
  swift_retain();
  sub_1001554A4((uint64_t)v16, (uint64_t)sub_10015DAFC, v20, (uint64_t)&unk_1002FD2A0, (uint64_t)sub_10015DBDC, (uint64_t)&unk_1002FD2B8);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v5);
}

uint64_t sub_10015BD74(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  int v25 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v24 - v12;
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)&v24 - v15;
  if (qword_100320C20 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_10033E868;
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  id v18 = [a1 recordName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v17(v13, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v16, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = v25 & 1;
  *(void *)(v20 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v13, v5);
  uint64_t v21 = (void *)(v20 + ((v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = v27;
  *uint64_t v21 = v26;
  v21[1] = v22;
  swift_retain();
  swift_retain();
  sub_1001554A4((uint64_t)v16, (uint64_t)sub_10015DBF8, v20, (uint64_t)&unk_1002FD318, (uint64_t)sub_10015DCD8, (uint64_t)&unk_1002FD330);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v5);
}

uint64_t sub_10015C06C(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  int v25 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v24 - v12;
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)&v24 - v15;
  if (qword_100320C20 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_10033E868;
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  id v18 = [a1 recordName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v17(v13, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v16, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = v25 & 1;
  *(void *)(v20 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v13, v5);
  uint64_t v21 = (void *)(v20 + ((v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = v27;
  *uint64_t v21 = v26;
  v21[1] = v22;
  swift_retain();
  swift_retain();
  sub_1001554A4((uint64_t)v16, (uint64_t)sub_10015DCF4, v20, (uint64_t)&unk_1002FD390, (uint64_t)sub_10015DD10, (uint64_t)&unk_1002FD3A8);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v5);
}

uint64_t sub_10015C364(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  int v25 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v24 - v12;
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)&v24 - v15;
  if (qword_100320C20 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_10033E868;
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  id v18 = [a1 recordName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v17(v13, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v16, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = v25 & 1;
  *(void *)(v20 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v13, v5);
  uint64_t v21 = (void *)(v20 + ((v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = v27;
  *uint64_t v21 = v26;
  v21[1] = v22;
  swift_retain();
  swift_retain();
  sub_1001554A4((uint64_t)v16, (uint64_t)sub_10015DD2C, v20, (uint64_t)&unk_1002FD408, (uint64_t)sub_10015DE0C, (uint64_t)&unk_1002FD420);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v5);
}

uint64_t sub_10015C65C(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  int v25 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v24 - v12;
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)&v24 - v15;
  if (qword_100320C20 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_10033E868;
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  id v18 = [a1 recordName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v17(v13, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v16, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = v25 & 1;
  *(void *)(v20 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v13, v5);
  uint64_t v21 = (void *)(v20 + ((v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = v27;
  *uint64_t v21 = v26;
  v21[1] = v22;
  swift_retain();
  swift_retain();
  sub_1001554A4((uint64_t)v16, (uint64_t)sub_10015DE28, v20, (uint64_t)&unk_1002FD480, (uint64_t)sub_10015DF00, (uint64_t)&unk_1002FD498);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v5);
}

uint64_t sub_10015C954(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  int v25 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v24 - v12;
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)&v24 - v15;
  if (qword_100320C20 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_10033E868;
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  id v18 = [a1 recordName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v17(v13, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v16, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = v25 & 1;
  *(void *)(v20 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v13, v5);
  uint64_t v21 = (void *)(v20 + ((v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = v27;
  *uint64_t v21 = v26;
  v21[1] = v22;
  swift_retain();
  swift_retain();
  sub_1001554A4((uint64_t)v16, (uint64_t)sub_10015DF1C, v20, (uint64_t)&unk_1002FD4F8, (uint64_t)sub_10015DFFC, (uint64_t)&unk_1002FD510);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v5);
}

uint64_t sub_10015CC4C(void *a1, uint64_t a2, unint64_t a3, char a4)
{
  if (qword_100320B80 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100007288(v27, (uint64_t)qword_10033E730);
  swift_bridgeObjectRetain_n();
  id v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_bridgeObjectRetain();
    sub_100135190(a2, a3, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v12 = v8;
    id v13 = [v8 recordName];
    unint64_t v14 = a3;
    uint64_t v15 = a2;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v8 = v12;
    uint64_t v19 = v16;
    a2 = v15;
    a3 = v14;
    sub_100135190(v19, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Deleting record %s %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = a2;
  uint64_t v20[3] = a3;
  v20[4] = v8;
  if (a2 == 0xD000000000000017 && a3 == 0x800000010029AAB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_10015B484(v8, a4 & 1, (uint64_t)sub_10015D904, (uint64_t)v20);
LABEL_18:
    swift_release();
    return 0;
  }
  if (a2 == 0x6169646F74737543 && a3 == 0xEF64726F6365526ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_10015B77C(v8, a4 & 1, (uint64_t)sub_10015D904, (uint64_t)v20);
    goto LABEL_18;
  }
  if (a2 == 0xD00000000000001BLL && a3 == 0x800000010029B0A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_10015BA7C(v8, a4 & 1, (uint64_t)sub_10015D904, (uint64_t)v20);
    goto LABEL_18;
  }
  if (a2 == 0xD000000000000015 && a3 == 0x800000010029B060
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_10015BD74(v8, a4 & 1, (uint64_t)sub_10015D904, (uint64_t)v20);
    goto LABEL_18;
  }
  if (a2 == 0xD00000000000001BLL && a3 == 0x800000010029B0C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_10015C06C(v8, a4 & 1, (uint64_t)sub_10015D904, (uint64_t)v20);
    goto LABEL_18;
  }
  if (a2 == 0xD000000000000020 && a3 == 0x8000000100299F70
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_10015C364(v8, a4 & 1, (uint64_t)sub_10015D904, (uint64_t)v20);
    goto LABEL_18;
  }
  if (a2 == 0xD000000000000024 && a3 == 0x800000010029B0E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_10015C65C(v8, a4 & 1, (uint64_t)sub_10015D904, (uint64_t)v20);
    goto LABEL_18;
  }
  if (a2 == 0xD00000000000001FLL && a3 == 0x800000010029B110
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_10015C954(v8, a4 & 1, (uint64_t)sub_10015D904, (uint64_t)v20);
    goto LABEL_18;
  }
  uint64_t v22 = qword_100320B78;
  swift_bridgeObjectRetain();
  id v23 = v8;
  if (v22 != -1) {
    swift_once();
  }
  sub_100007288(v27, (uint64_t)qword_10033E718);
  swift_bridgeObjectRetain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    swift_bridgeObjectRetain();
    sub_100135190(a2, a3, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unrecognized record type cannot be deleted: %s)", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for AACustodianError(0);
  sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
  sub_10015F0D0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_release();
  return v28;
}

void sub_10015D484(void *a1, uint64_t a2)
{
  id v4 = [a1 container];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 containerID];

    id v7 = [v6 containerIdentifier];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    if (qword_100320D08 != -1) {
      swift_once();
    }
    char v11 = sub_10014F95C(v8, v10, (void *)qword_10033EA50);
    swift_bridgeObjectRelease();
    if (qword_100320B80 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E730);
    swift_bridgeObjectRetain();
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 134217984;
      v30[0] = *(void *)(a2 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "CloudKitSyncManager processing %ld deleted records", v15, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    void v30[2] = (Swift::Int)&_swiftEmptySetSingleton;
    uint64_t v22 = *(void *)(a2 + 16);
    if (v22)
    {
      swift_bridgeObjectRetain();
      id v23 = (unint64_t *)(a2 + 48);
      char v24 = v11 & 1;
      do
      {
        uint64_t v25 = *(v23 - 1);
        unint64_t v26 = *v23;
        id v27 = (id)*(v23 - 2);
        swift_bridgeObjectRetain();
        uint64_t v28 = sub_10015CC4C(v27, v25, v26, v24);
        swift_errorRelease();
        if (v28)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_10027FE90(v30, v25, v26);

          swift_bridgeObjectRelease();
        }
        v23 += 3;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E718);
    id v29 = a1;
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 138412290;
      v30[0] = (Swift::Int)v29;
      id v21 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v29;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to obtain containerID from database for recordsDeleted: %@", v19, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_10015D8C4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10015D904(uint64_t a1, char a2)
{
  sub_100152B24(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_10015D918(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100153F18(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), v1 + v4, *(void (**)(uint64_t, uint64_t))(v1 + v5), *(void *)(v1 + v5 + 8), (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord, &qword_1003235E0, &qword_100328648, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_10015D9F8()
{
  return sub_10015DA48((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_100158CB8);
}

uint64_t sub_10015DA14(uint64_t a1)
{
  return sub_10015DE40(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100154D48);
}

uint64_t sub_10015DA30()
{
  return sub_10015DA48((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_100158538);
}

uint64_t sub_10015DA48(uint64_t (*a1)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v1 + v4);
  uint64_t v6 = *(void *)(v1 + v4 + 8);
  uint64_t v7 = *(void *)(v1 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8));

  return a1(v1 + v3, v5, v6, v7);
}

uint64_t sub_10015DAFC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100154630(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), v1 + v4, *(void (**)(uint64_t, uint64_t))(v1 + v5), *(void *)(v1 + v5 + 8), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, &qword_100323598, &qword_100328658, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
}

uint64_t sub_10015DBDC()
{
  return sub_10015DA48((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_100157DB8);
}

uint64_t sub_10015DBF8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100153F18(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), v1 + v4, *(void (**)(uint64_t, uint64_t))(v1 + v5), *(void *)(v1 + v5 + 8), (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord, (uint64_t *)&unk_10032E120, &qword_100328660, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
}

uint64_t sub_10015DCD8()
{
  return sub_10015DA48((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_100157638);
}

uint64_t sub_10015DCF4(uint64_t a1)
{
  return sub_10015DE40(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001537BC);
}

uint64_t sub_10015DD10()
{
  return sub_10015DA48((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_100156EB8);
}

uint64_t sub_10015DD2C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100154630(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), v1 + v4, *(void (**)(uint64_t, uint64_t))(v1 + v5), *(void *)(v1 + v5 + 8), (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, &qword_1003235F0, &qword_100328668, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
}

uint64_t sub_10015DE0C()
{
  return sub_10015DA48((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_100156738);
}

uint64_t sub_10015DE28(uint64_t a1)
{
  return sub_10015DE40(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100153060);
}

uint64_t sub_10015DE40(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = v2 + v5;
  uint64_t v9 = (uint64_t *)(v2 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return a2(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_10015DF00()
{
  return sub_10015DA48((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_100155FB8);
}

uint64_t sub_10015DF1C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100153F18(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), v1 + v4, *(void (**)(uint64_t, uint64_t))(v1 + v5), *(void *)(v1 + v5 + 8), (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, &qword_1003235E8, &qword_100328680, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_10015DFFC()
{
  return sub_10015DA48((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_100155838);
}

uint64_t sub_10015E014(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10015E07C()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + v1[7];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  sub_100013198(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10015E1EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10015E254(uint64_t a1)
{
  return sub_10015F010(a1, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, uint64_t))sub_10014FA24);
}

uint64_t sub_10015E280(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10015E2E0()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10015E408(uint64_t a1)
{
  return sub_10015F010(a1, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(uint64_t, uint64_t))sub_10014FF9C);
}

uint64_t sub_10015E434()
{
  uint64_t v1 = (int *)(type metadata accessor for BeneficiaryManifestRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[8], v7);
  sub_100013198(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10015E558(uint64_t a1)
{
  return sub_10015F010(a1, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord, (uint64_t (*)(uint64_t, uint64_t))sub_100150514);
}

uint64_t sub_10015E584()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v10, v2 | 7);
}

uint64_t sub_10015E75C(uint64_t a1)
{
  return sub_10015F010(a1, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t))sub_100150A8C);
}

uint64_t sub_10015E788()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10015E8D0(uint64_t a1)
{
  return sub_10015F010(a1, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t))sub_100151004);
}

uint64_t sub_10015E8FC()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianHealthRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  v6(v0 + v3 + v1[5], v5);
  uint64_t v7 = v0 + v3 + v1[6];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v0 + v3 + v1[8]), *(void *)(v0 + v3 + v1[8] + 8));

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10015EA80(uint64_t a1)
{
  return sub_10015F010(a1, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord, (uint64_t (*)(uint64_t, uint64_t))sub_10015157C);
}

uint64_t sub_10015EAAC()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v12, v2 | 7);
}

uint64_t sub_10015EC84(uint64_t a1)
{
  return sub_10015F010(a1, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t))sub_100151AE4);
}

uint64_t sub_10015ECB0()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10015EE90(uint64_t a1)
{
  return sub_10015F010(a1, (uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, uint64_t))sub_10015204C);
}

uint64_t sub_10015EEBC()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10015EFE4(uint64_t a1)
{
  return sub_10015F010(a1, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord, (uint64_t (*)(uint64_t, uint64_t))sub_1001525BC);
}

uint64_t sub_10015F010(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

uint64_t sub_10015F098()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10015F0D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10015F118()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10015F160()
{
  return sub_10014F2E4(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10015F16C()
{
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10015F1BC(uint64_t a1)
{
  sub_10014EA84(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(NSObject **)(v1 + 48));
}

uint64_t sub_10015F1CC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_errorRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10015F214()
{
  return sub_10014F228(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10015F220()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10015F260()
{
  return sub_10014F5A0(*(void *)(v0 + 16), *(uint64_t (**)(BOOL))(v0 + 24));
}

uint64_t sub_10015F26C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10015F2A4(char a1)
{
  return sub_10014D050(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10015F2AC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 50) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10015F380()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 50) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void (**)(void, void, void))(v0 + 40);
  __int16 v7 = *(unsigned __int8 *)(v0 + 48);
  if (*(unsigned char *)(v0 + 49)) {
    __int16 v8 = 256;
  }
  else {
    __int16 v8 = 0;
  }

  sub_10014D188(v3, v4, v5, v6, v8 | v7, v0 + v2);
}

uint64_t sub_10015F400()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10015F410(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10015F43C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10015F450(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  __int16 v8 = *(unsigned __int8 *)(v2 + 32);
  if (*(unsigned char *)(v2 + 33)) {
    __int16 v9 = 256;
  }
  else {
    __int16 v9 = 0;
  }
  uint64_t v10 = *(void *)(v2 + 40);
  uint64_t v11 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10014D778(a1, a2, v6, v7, v9 | v8, v10, v11);
}

uint64_t sub_10015F4F0()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10015F5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10014DB74(a1, a2, v6, v7, v8);
}

uint64_t sub_10015F64C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10015F720()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (unsigned char *)v0[3];
  uint64_t v4 = (void (*)(void))v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  sub_10014DDBC(v2, v3, v4, v5, v6);
}

uint64_t sub_10015F788()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10015F798()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10015F86C(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = (void (*)(uint64_t))v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_10014D8F8(a1, v4, v5, v6, v7);
}

unsigned char *storeEnumTagSinglePayload for CloudSyncType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10015F9B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudSyncType()
{
  return &type metadata for CloudSyncType;
}

unint64_t sub_10015F9EC()
{
  unint64_t result = qword_100328688;
  if (!qword_100328688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328688);
  }
  return result;
}

uint64_t sub_10015FAA8@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v68 = a3;
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v7 = __chkstk_darwin(v5 - 8, v6);
  __int16 v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v57 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v66 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v67 = (char *)&v57 - v20;
  __chkstk_darwin(v19, v21);
  id v23 = (char *)&v57 - v22;
  uint64_t v24 = type metadata accessor for CustodianRecoveryData();
  sub_100108374((uint64_t)a2 + *(int *)(v24 + 28), (uint64_t)v12);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v25(v12, 1, v13) == 1)
  {
    sub_10016113C((uint64_t)a2, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    sub_10016113C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
    sub_1000833BC((uint64_t)v12);
  }
  else
  {
    os_log_type_t v65 = a1;
    unint64_t v64 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v64(v23, v12, v13);
    if (a2[3])
    {
      id v63 = v23;
      swift_bridgeObjectRetain();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if (v25(v9, 1, v13) == 1)
      {
        sub_10016113C((uint64_t)a2, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
        sub_10016113C((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v63, v13);
        sub_1000833BC((uint64_t)v9);
      }
      else
      {
        unint64_t v26 = v67;
        v64(v67, v9, v13);
        uint64_t v27 = a2[1];
        uint64_t v28 = v68;
        id v29 = v63;
        if (v27)
        {
          id v30 = (uint64_t *)((char *)a2 + *(int *)(v24 + 32));
          uint64_t v31 = v30[1];
          if (v31)
          {
            uint64_t v32 = *a2;
            uint64_t v61 = *v30;
            uint64_t v62 = v32;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v33 = v26;
            UUID.init()();
            sub_10016113C((uint64_t)a2, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
            uint64_t v34 = (int *)type metadata accessor for CustodianRecoverySessionRecord();
            uint64_t v35 = (void (*)(uint64_t, char *, uint64_t))v64;
            v64((char *)(v28 + v34[5]), v29, v13);
            v35(v28 + v34[6], v33, v13);
            uint64_t v36 = v65;
            uint64_t v37 = v65[2];
            uint64_t v38 = v65[3];
            uint64_t v60 = *v65;
            uint64_t v39 = v65[1];
            uint64_t v58 = v37;
            uint64_t v59 = v39;
            uint64_t v67 = (char *)v65[4];
            id v63 = (char *)v65[5];
            uint64_t v40 = v28;
            uint64_t v41 = type metadata accessor for CustodianRecoveryKeys();
            sub_10016119C((uint64_t)v36 + *(int *)(v41 + 28), v40 + v34[12]);
            uint64_t v42 = (void *)((char *)v36 + *(int *)(v41 + 32));
            uint64_t v43 = *v42;
            uint64_t v44 = v42[1];
            v35(v40, v66, v13);
            uint64_t v45 = (void *)(v40 + v34[7]);
            *uint64_t v45 = v62;
            v45[1] = v27;
            uint64_t v46 = (void *)(v40 + v34[8]);
            *uint64_t v46 = v61;
            v46[1] = v31;
            uint64_t v47 = (void *)(v40 + v34[9]);
            *uint64_t v47 = v58;
            v47[1] = v38;
            uint64_t v48 = (void *)(v40 + v34[10]);
            uint64_t v49 = v59;
            *uint64_t v48 = v60;
            v48[1] = v49;
            uint64_t v50 = (void *)(v40 + v34[11]);
            uint64_t v51 = v63;
            *uint64_t v50 = v67;
            v50[1] = v51;
            uint64_t v52 = (void *)(v40 + v34[13]);
            *uint64_t v52 = v43;
            v52[1] = v44;
            return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v34 - 1) + 56))(v40, 0, 1, v34);
          }
        }
        sub_10016113C((uint64_t)a2, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
        sub_10016113C((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
        uint64_t v54 = *(void (**)(char *, uint64_t))(v14 + 8);
        v54(v26, v13);
        v54(v29, v13);
      }
    }
    else
    {
      sub_10016113C((uint64_t)a2, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      sub_10016113C((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v13);
    }
  }
  uint64_t v55 = v68;
  uint64_t v56 = type metadata accessor for CustodianRecoverySessionRecord();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 1, 1, v56);
}

unint64_t sub_100160048(char a1)
{
  unint64_t result = 0x444964726F636572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6169646F74737563;
      break;
    case 2:
      unint64_t result = 0x646F74737543746FLL;
      break;
    case 3:
      unint64_t result = 0x4449656B617073;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x6E614872656E776FLL;
      break;
    case 6:
      unint64_t result = 0x737574617473;
      break;
    case 7:
      unint64_t result = 0x5264657070617277;
      break;
    case 8:
      unint64_t result = 0x5064657070617277;
      break;
    case 9:
      unint64_t result = 0xD000000000000016;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001601D0()
{
  return sub_100160048(*v0);
}

uint64_t sub_1001601D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001625FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100160200(uint64_t a1)
{
  unint64_t v2 = sub_10016103C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016023C(uint64_t a1)
{
  unint64_t v2 = sub_10016103C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100160278@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v3 - 8, v4);
  unint64_t v64 = (char *)v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v66 = (char *)v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v68 = (char *)v63 - v13;
  __chkstk_darwin(v12, v14);
  id v69 = (char *)v63 - v15;
  uint64_t v16 = sub_100009F04(&qword_100328690);
  uint64_t v67 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for CustodianRecoverySessionRecord();
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v24 = (char *)v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(int *)(v22 + 48);
  uint64_t v74 = v7;
  uint64_t v28 = *(void (**)(void))(v7 + 56);
  uint64_t v27 = v7 + 56;
  unint64_t v26 = v28;
  id v70 = &v24[v25];
  v28();
  unint64_t v75 = v24;
  unint64_t v76 = (int *)v20;
  id v29 = &v24[*(int *)(v20 + 52)];
  *(void *)id v29 = 0;
  *((void *)v29 + 1) = 0;
  id v71 = v29;
  id v72 = a1;
  sub_100008EF8(a1, a1[3]);
  sub_10016103C();
  uint64_t v30 = v73;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v73 = v6;
  if (v30)
  {
    sub_100008EA8((uint64_t)v72);
    sub_1000833BC((uint64_t)v70);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = v68;
    v63[1] = v27;
    v63[2] = v26;
    LOBYTE(v77) = 0;
    uint64_t v32 = sub_1001610F4((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
    id v33 = v69;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v34 = v19;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
    v35(v75, v33, v6);
    LOBYTE(v77) = 1;
    uint64_t v36 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v37 = v76;
    v35(&v75[v76[5]], v36, v6);
    LOBYTE(v77) = 3;
    uint64_t v38 = v16;
    uint64_t v39 = v66;
    uint64_t v40 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    id v69 = (char *)v32;
    uint64_t v41 = (uint64_t)v75;
    v35(&v75[v37[6]], v39, v6);
    LOBYTE(v77) = 4;
    uint64_t v42 = (int *)v40;
    uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v44 = v41;
    uint64_t v45 = (uint64_t *)(v41 + v37[7]);
    *uint64_t v45 = v43;
    v45[1] = v46;
    LOBYTE(v77) = 5;
    uint64_t v47 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v48 = (uint64_t *)(v41 + v37[8]);
    *uint64_t v48 = v47;
    v48[1] = v49;
    char v78 = 8;
    sub_1000130EC();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v41 + v37[10]) = v77;
    char v78 = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)(v41 + v37[9]) = v77;
    LOBYTE(v77) = 9;
    uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v51 = (uint64_t *)(v41 + v76[11]);
    uint64_t *v51 = v50;
    v51[1] = v52;
    LOBYTE(v77) = 2;
    uint64_t v53 = (uint64_t)v64;
    unint64_t v76 = v42;
    uint64_t v54 = v34;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v55 = v67;
    sub_100018A54(v53, (uint64_t)v70);
    LOBYTE(v77) = 10;
    uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v57 = v65;
    uint64_t v58 = v56;
    uint64_t v60 = v59;
    (*(void (**)(char *, int *))(v55 + 8))(v54, v76);
    uint64_t v61 = v71;
    swift_bridgeObjectRelease();
    *uint64_t v61 = v58;
    v61[1] = v60;
    sub_100161090(v44, v57);
    sub_100008EA8((uint64_t)v72);
    return sub_10016113C(v44, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
  }
}

uint64_t sub_100160BC0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_1003286A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_10016103C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  sub_1001610F4(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for CustodianRecoverySessionRecord();
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + *(int *)(v10 + 40));
    char v14 = 8;
    v12[1] = sub_1000131F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + *(int *)(v10 + 36));
    char v14 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100160F3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100160278(a1, a2);
}

uint64_t sub_100160F54(void *a1)
{
  return sub_100160BC0(a1);
}

uint64_t sub_100160F6C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1001610F4((unint64_t *)&unk_100325000, (void (*)(uint64_t))type metadata accessor for CustodianRecoverySessionRecord);
  uint64_t result = sub_1001610F4(&qword_1003235D8, (void (*)(uint64_t))type metadata accessor for CustodianRecoverySessionRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for CustodianRecoverySessionRecord()
{
  uint64_t result = qword_100328700;
  if (!qword_100328700) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10016103C()
{
  unint64_t result = qword_100328698;
  if (!qword_100328698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328698);
  }
  return result;
}

uint64_t sub_100161090(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianRecoverySessionRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001610F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016113C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10016119C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100321CE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for CustodianRecoverySessionRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001612D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecoverySessionRecord.CodingKeys()
{
  return &type metadata for CustodianRecoverySessionRecord.CodingKeys;
}

uint64_t *sub_100161308(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v42 = *(void *)(v7 - 8);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v42 + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    uint64_t v11 = (uint64_t *)((char *)a1 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    char v14 = (uint64_t *)((char *)a1 + v10);
    uint64_t v15 = (uint64_t *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *char v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[9];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    unint64_t v20 = *(uint64_t *)((char *)a2 + v17 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    }
    else
    {
      uint64_t v22 = *v19;
      sub_100013140(*v19, v20);
      *(void *)uint64_t v18 = v22;
      *((void *)v18 + 1) = v20;
    }
    uint64_t v23 = a3[10];
    uint64_t v24 = (uint64_t *)((char *)a1 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = *v25;
    unint64_t v27 = v25[1];
    sub_100013140(*v25, v27);
    *uint64_t v24 = v26;
    v24[1] = v27;
    uint64_t v28 = a3[11];
    uint64_t v29 = a3[12];
    uint64_t v30 = (uint64_t *)((char *)a1 + v28);
    uint64_t v31 = (uint64_t *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    id v33 = (char *)a1 + v29;
    uint64_t v34 = (char *)a2 + v29;
    uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
    swift_bridgeObjectRetain();
    if (v35(v34, 1, v7))
    {
      uint64_t v36 = sub_100009F04((uint64_t *)&unk_100321CE0);
      memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v33, (uint64_t *)v34, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v33, 0, 1, v7);
    }
    uint64_t v37 = a3[13];
    uint64_t v38 = (uint64_t *)((char *)a1 + v37);
    uint64_t v39 = (uint64_t *)((char *)a2 + v37);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001615AC(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v6(a1 + a2[5], v4);
  v6(a1 + a2[6], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(a1 + a2[9]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(a1 + a2[10]), *(void *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + a2[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4)) {
    v6(v9, v4);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100161738(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  void *v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = (void *)(a1 + v9);
  char v14 = (void *)(a2 + v9);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = (uint64_t *)(a2 + v16);
  unint64_t v19 = *(void *)(a2 + v16 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  }
  else
  {
    uint64_t v20 = *v18;
    sub_100013140(*v18, v19);
    *(void *)uint64_t v17 = v20;
    *(void *)(v17 + 8) = v19;
  }
  uint64_t v21 = a3[10];
  uint64_t v22 = (uint64_t *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_100013140(*v23, v25);
  *uint64_t v22 = v24;
  v22[1] = v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = (void *)(a1 + v26);
  uint64_t v29 = (void *)(a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = (void *)(a1 + v27);
  uint64_t v32 = (const void *)(a2 + v27);
  id v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48);
  swift_bridgeObjectRetain();
  if (v33(v32, 1, v6))
  {
    uint64_t v34 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v31, 0, 1, v6);
  }
  uint64_t v35 = a3[13];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  uint64_t v38 = v37[1];
  void *v36 = *v37;
  v36[1] = v38;
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_10016198C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v43 = v8;
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = *((void *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[8];
  uint64_t v13 = &a1[v12];
  char v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[9];
  uint64_t v16 = (uint64_t *)&a1[v15];
  uint64_t v17 = (uint64_t *)&a2[v15];
  unint64_t v18 = *(void *)&a2[v15 + 8];
  if (*(void *)&a1[v15 + 8] >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v17;
      sub_100013140(v19, v18);
      uint64_t *v16 = v19;
      v16[1] = v18;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v18 >> 60 == 15)
  {
    sub_1000AD378((uint64_t)v16);
LABEL_6:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_8;
  }
  uint64_t v20 = *v17;
  sub_100013140(v20, v18);
  uint64_t v21 = *v16;
  unint64_t v22 = v16[1];
  uint64_t *v16 = v20;
  v16[1] = v18;
  sub_100013198(v21, v22);
LABEL_8:
  uint64_t v23 = a3[10];
  uint64_t v24 = (uint64_t *)&a1[v23];
  unint64_t v25 = (uint64_t *)&a2[v23];
  uint64_t v26 = *v25;
  unint64_t v27 = v25[1];
  sub_100013140(*v25, v27);
  uint64_t v28 = *v24;
  unint64_t v29 = v24[1];
  *uint64_t v24 = v26;
  v24[1] = v27;
  sub_100013198(v28, v29);
  uint64_t v30 = a3[11];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[12];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v24) = v36(&a1[v33], 1, v6);
  int v37 = v36(v35, 1, v6);
  if (!v24)
  {
    if (!v37)
    {
      v43(v34, v35, v6);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v34, v6);
    goto LABEL_13;
  }
  if (v37)
  {
LABEL_13:
    uint64_t v38 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v34, v35, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v34, 0, 1, v6);
LABEL_14:
  uint64_t v39 = a3[13];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = *((void *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100161CDC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  uint64_t v9 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v10 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  uint64_t v11 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v11], 1, v6))
  {
    uint64_t v14 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    v8(v12, v13, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  return a1;
}

char *sub_100161EA0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v46 = v8;
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (uint64_t *)&a2[v9];
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[8];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (uint64_t *)&a2[v14];
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *(void *)uint64_t v15 = v18;
  *((void *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  uint64_t v20 = (uint64_t)&a1[v19];
  uint64_t v21 = &a2[v19];
  unint64_t v22 = *(void *)&a1[v19 + 8];
  if (v22 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v23 = *((void *)v21 + 1);
  if (v23 >> 60 == 15)
  {
    sub_1000AD378(v20);
LABEL_4:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    goto LABEL_6;
  }
  uint64_t v24 = *(void *)v20;
  *(void *)uint64_t v20 = *(void *)v21;
  *(void *)(v20 + 8) = v23;
  sub_100013198(v24, v22);
LABEL_6:
  uint64_t v25 = a3[10];
  uint64_t v26 = *(void *)&a1[v25];
  unint64_t v27 = *(void *)&a1[v25 + 8];
  *(_OWORD *)&a1[v25] = *(_OWORD *)&a2[v25];
  sub_100013198(v26, v27);
  uint64_t v28 = a3[11];
  unint64_t v29 = &a1[v28];
  uint64_t v30 = (uint64_t *)&a2[v28];
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *(void *)unint64_t v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[12];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v37 = v36(&a1[v33], 1, v6);
  int v38 = v36(v35, 1, v6);
  if (!v37)
  {
    if (!v38)
    {
      v46(v34, v35, v6);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v34, v6);
    goto LABEL_11;
  }
  if (v38)
  {
LABEL_11:
    uint64_t v39 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v34, v35, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v34, 0, 1, v6);
LABEL_12:
  uint64_t v40 = a3[13];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = (uint64_t *)&a2[v40];
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *(void *)uint64_t v41 = v44;
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100162170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100162184);
}

uint64_t sub_100162184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_100009F04((uint64_t *)&unk_100321CE0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 48);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1001622B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001622CC);
}

uint64_t sub_1001622CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_100009F04((uint64_t *)&unk_100321CE0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 48);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_100162400()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_10001AAF8();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_1001624F8()
{
  unint64_t result = qword_100328758;
  if (!qword_100328758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328758);
  }
  return result;
}

unint64_t sub_100162550()
{
  unint64_t result = qword_100328760;
  if (!qword_100328760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328760);
  }
  return result;
}

unint64_t sub_1001625A8()
{
  unint64_t result = qword_100328768;
  if (!qword_100328768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328768);
  }
  return result;
}

uint64_t sub_1001625FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444964726F636572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646F74737543746FLL && a2 == 0xED000044496E6169 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4449656B617073 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010029D0C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E614872656E776FLL && a2 == 0xEB00000000656C64 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x5264657070617277 && a2 == 0xEA0000000000434BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x5064657070617277 && a2 == 0xEB00000000434B52 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000010029E130 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100299F50)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_100162ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v36 = a4;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v9 = type metadata accessor for InheritanceInvitationResponseMessage();
  uint64_t v10 = v9 - 8;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v9, v13);
  uint64_t v14 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v16);
  uint64_t v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v18, a1 + *(int *)(v10 + 28));
  v32[1] = sub_100008EF8((void *)(v7 + 16), *(void *)(v7 + 40));
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  sub_100163908(a1, (uint64_t)v14);
  unint64_t v20 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v21 = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  sub_100163BC8((uint64_t)v14, v24 + v20, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  uint64_t v25 = (uint64_t *)(v24 + v21);
  uint64_t v26 = v34;
  uint64_t v27 = v35;
  *uint64_t v25 = v34;
  v25[1] = v27;
  *(void *)(v24 + v22) = v19;
  uint64_t v28 = v37;
  *(void *)(v24 + v23) = v36;
  unint64_t v29 = (void *)(v24 + ((v23 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v30 = v38;
  *unint64_t v29 = v28;
  v29[1] = v30;
  sub_100011D2C(v26);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000E53EC((uint64_t)v18, (uint64_t)sub_100163A98, v24);
  swift_release();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v33);
  return swift_release();
}

uint64_t sub_100162D64(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v81 = a7;
  uint64_t v82 = a8;
  uint64_t v80 = a6;
  uint64_t v83 = a4;
  uint64_t v84 = a3;
  uint64_t v11 = type metadata accessor for InheritanceInvitationResponseMessage();
  uint64_t v79 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v79 + 64);
  __chkstk_darwin(v11, v13);
  uint64_t v14 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for InheritanceInvitationRecord();
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v19, v20);
  unint64_t v22 = (uint64_t *)((char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100163B60(a1, (uint64_t)v22);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_100163BC8((uint64_t)v22, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    if (*(unsigned char *)(a2 + *(int *)(v11 + 24)) == 1)
    {
      if (*(void *)&v18[*(int *)(v15 + 32)] == 1)
      {
        if (qword_100320B90 != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        sub_100007288(v30, (uint64_t)qword_10033E760);
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v33 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v33 = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "The invitation was accepted.", v33, 2u);
          swift_slowDealloc();
        }

        swift_beginAccess();
        uint64_t Strong = swift_weakLoadStrong();
        if (Strong)
        {
          sub_100008A94(Strong + 56, (uint64_t)v85);
          swift_release();
          uint64_t v35 = v87;
          char v78 = v86;
          long long v77 = sub_100008EF8(v85, (uint64_t)v86);
          sub_100163908(a2, (uint64_t)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
          unint64_t v36 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
          unint64_t v37 = (v12 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v38 = swift_allocObject();
          uint64_t v39 = v80;
          *(void *)(v38 + 16) = a5;
          *(void *)(v38 + 24) = v39;
          sub_100163BC8((uint64_t)v14, v38 + v36, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
          uint64_t v40 = (void *)(v38 + v37);
          uint64_t v41 = v82;
          *uint64_t v40 = v81;
          v40[1] = v41;
          uint64_t v42 = (void *)(v38 + ((v37 + 23) & 0xFFFFFFFFFFFFFFF8));
          uint64_t v43 = v83;
          uint64_t v44 = (uint64_t)v84;
          *uint64_t v42 = v84;
          v42[1] = v43;
          uint64_t v45 = *(void (**)(uint64_t, char *, uint64_t (*)(uint64_t), uint64_t, void *, uint64_t))(v35 + 8);
          swift_retain();
          swift_bridgeObjectRetain();
          sub_100011D2C(v44);
          uint64_t v46 = sub_100163DC0;
          uint64_t v47 = a2;
          uint64_t v48 = v18;
          uint64_t v49 = v38;
          uint64_t v50 = v78;
          uint64_t v51 = v35;
LABEL_24:
          v45(v47, v48, v46, v49, v50, v51);
          swift_release();
          sub_100163C40((uint64_t)v18);
          return sub_100008EA8((uint64_t)v85);
        }
      }
      else
      {
        if (qword_100320B90 != -1) {
          swift_once();
        }
        uint64_t v71 = type metadata accessor for Logger();
        sub_100007288(v71, (uint64_t)qword_10033E760);
        id v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.info.getter();
        BOOL v74 = os_log_type_enabled(v72, v73);
        unint64_t v75 = v84;
        if (v74)
        {
          unint64_t v76 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v76 = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "LCInvite: The invitation was not pending. Must have been accepted or declined already. Returning without accepting.", v76, 2u);
          swift_slowDealloc();
        }

        if (v75) {
          v75(0);
        }
      }
    }
    else
    {
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v54 = type metadata accessor for Logger();
      sub_100007288(v54, (uint64_t)qword_10033E760);
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v57 = 0;
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "The invitation was declined.", v57, 2u);
        swift_slowDealloc();
      }

      swift_beginAccess();
      uint64_t v58 = swift_weakLoadStrong();
      if (v58)
      {
        sub_100008A94(v58 + 96, (uint64_t)v85);
        swift_release();
        uint64_t v60 = (uint64_t)v86;
        uint64_t v59 = v87;
        char v78 = sub_100008EF8(v85, (uint64_t)v86);
        sub_100163908(a2, (uint64_t)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
        unint64_t v61 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
        unint64_t v62 = (v12 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v63 = swift_allocObject();
        uint64_t v64 = v80;
        *(void *)(v63 + 16) = a5;
        *(void *)(v63 + 24) = v64;
        sub_100163BC8((uint64_t)v14, v63 + v61, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
        uint64_t v65 = (void *)(v63 + v62);
        uint64_t v66 = a2;
        uint64_t v67 = v82;
        void *v65 = v81;
        v65[1] = v67;
        uint64_t v68 = (void *)(v63 + ((v62 + 23) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v69 = v83;
        uint64_t v70 = (uint64_t)v84;
        *uint64_t v68 = v84;
        v68[1] = v69;
        uint64_t v45 = *(void (**)(uint64_t, char *, uint64_t (*)(uint64_t), uint64_t, void *, uint64_t))(v59 + 8);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_100011D2C(v70);
        uint64_t v46 = sub_100163C34;
        uint64_t v47 = v66;
        uint64_t v48 = v18;
        uint64_t v49 = v63;
        uint64_t v50 = (void *)v60;
        uint64_t v51 = v59;
        goto LABEL_24;
      }
    }
    return sub_100163C40((uint64_t)v18);
  }
  uint64_t v23 = *v22;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100007288(v24, (uint64_t)qword_10033E760);
  swift_errorRetain();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 138412290;
    uint64_t v29 = _convertErrorToNSError(_:)();
    v85[0] = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v28 = v29;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error processing invitation %@", v27, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }

  uint64_t v52 = v84;
  if (v84)
  {
    swift_errorRetain();
    v52(v23);
    swift_errorRelease();
  }
  return swift_errorRelease();
}

uint64_t sub_100163568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t a8, const char *a9)
{
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100007288(v14, (uint64_t)qword_10033E760);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v24 = a6;
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 138412290;
    if (a1)
    {
      swift_errorRetain();
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v19 = 0;
    }
    *uint64_t v18 = v19;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, a9, v17, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a6 = v24;
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    goto LABEL_19;
  }
  if (!a1) {
    goto LABEL_18;
  }
  swift_getErrorValue();
  swift_errorRetain();
  if ((sub_1001A8740(v28) & 1) == 0 || (swift_getErrorValue(), (uint64_t v21 = (void *)sub_1001A84EC(v27)) == 0))
  {
    swift_errorRelease();
LABEL_18:
    uint64_t result = swift_release();
    goto LABEL_19;
  }
  unint64_t v22 = v21;
  BOOL v23 = sub_1001A85C8(v21);

  swift_errorRelease();
  uint64_t result = swift_release();
  if (v23 && a3 <= 1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      sub_100162ACC(a4, a5, a6, a3 + 1, a7, a8);
      return swift_release();
    }
    return result;
  }
LABEL_19:
  if (a7) {
    return a7(a1);
  }
  return result;
}

uint64_t type metadata accessor for InheritanceInvitationResponseHandler()
{
  return self;
}

uint64_t sub_1001638D0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100163908(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InheritanceInvitationResponseMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016396C()
{
  uint64_t v1 = type metadata accessor for InheritanceInvitationResponseMessage();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + *(int *)(v1 + 20) + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  if (*(void *)(v0 + v5)) {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_100163A98(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceInvitationResponseMessage() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v1 + v4;
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + v7);
  uint64_t v11 = *(void (**)(void))(v1 + v5);
  uint64_t v12 = *(void *)(v1 + v5 + 8);
  uint64_t v13 = (uint64_t *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];

  return sub_100162D64(a1, v8, v11, v12, v9, v10, v14, v15);
}

uint64_t sub_100163B60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100325890);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100163BC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100163C34(uint64_t a1)
{
  return sub_100163DCC(a1, "Completed processing declined status change. Error: %@");
}

uint64_t sub_100163C40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InheritanceInvitationRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100163CA0()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationResponseMessage() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  unint64_t v4 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v5 = v0 + v1[7] + v3;
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v4)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v4 + 16, v2 | 7);
}

uint64_t sub_100163DC0(uint64_t a1)
{
  return sub_100163DCC(a1, "Completed processing accepted status change. Error: %@");
}

uint64_t sub_100163DCC(uint64_t a1, const char *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for InheritanceInvitationResponseMessage() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100163568(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(uint64_t (**)(uint64_t))(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), a2);
}

uint64_t sub_100163E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v34 = a6;
  uint64_t v37 = a1;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  uint64_t v36 = v12;
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007288(v16, (uint64_t)qword_10033E748);
  swift_retain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v33 = a7;
    uint64_t v20 = v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v32 = a3;
    void v30[2] = v21;
    v39[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    v30[1] = v20 + 4;
    uint64_t v23 = v35;
    uint64_t v22 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v15, a4 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID, v35);
    sub_100006F74((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v31 = a2;
    unint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    uint64_t v38 = sub_100135190(v24, v26, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a2 = v31;
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2048;
    uint64_t v38 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Custodian %s saving invitation status: %ld", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    a3 = v32;
    swift_slowDealloc();
    a7 = v33;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v29 = v35;
    uint64_t v28 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v15, a4 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID, v35);
    sub_100164230((uint64_t)v15, v34, a7, v37, a2, a3);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v15, v29);
  }
  return result;
}

void sub_100164230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v35 = a2;
  unint64_t v7 = (int *)type metadata accessor for CustodianshipInfoRecord();
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v20 = swift_allocBox();
  uint64_t v34 = v21;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v22(v19, a1, v11);
  v22(v16, a1, v11);
  v22(&v10[v7[5]], (uint64_t)v19, v11);
  uint64_t v23 = &v10[v7[6]];
  uint64_t v24 = v36;
  *(void *)uint64_t v23 = v35;
  *((void *)v23 + 1) = v24;
  *(void *)&v10[v7[7]] = v37;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v10, v16, v11);
  unint64_t v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  swift_bridgeObjectRetain();
  v25(v19, v11);
  *(_OWORD *)&v10[v7[8]] = xmmword_1002A9C60;
  v10[v7[9]] = 1;
  sub_10002C8BC((uint64_t)v10, v34);
  uint64_t v26 = swift_allocObject();
  swift_weakInit();
  uint64_t v27 = (void *)swift_allocObject();
  void v27[2] = v20;
  v27[3] = v26;
  uint64_t v28 = v39;
  v27[4] = v38;
  void v27[5] = v28;
  uint64_t v29 = qword_100320CC8;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  if (v29 != -1) {
    swift_once();
  }
  if (qword_100320CD8 != -1) {
    swift_once();
  }
  id v30 = sub_10028CC20(qword_10033EA08, unk_10033EA10);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = sub_100167264;
  *(void *)(v31 + 24) = v27;
  aBlock[4] = sub_1000F0598;
  aBlock[5] = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004DAE8;
  void aBlock[3] = &unk_1002FDCD8;
  uint64_t v32 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v30 accountInfoWithCompletionHandler:v32];
  _Block_release(v32);
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_100164608()
{
  sub_100008EA8(v0 + 16);
  sub_100008EA8(v0 + 56);
  sub_100008EA8(v0 + 96);
  sub_100008EA8(v0 + 136);
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd23DaemonInvitationHandler__analyticsEventFactory;
  uint64_t v2 = sub_100009F04(&qword_100323190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1001646CC()
{
  return type metadata accessor for DaemonInvitationHandler();
}

uint64_t type metadata accessor for DaemonInvitationHandler()
{
  uint64_t result = qword_100328868;
  if (!qword_100328868) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100164720()
{
  sub_1001647C0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1001647C0()
{
  if (!qword_100323030[0])
  {
    sub_1000112CC((uint64_t *)&unk_1003224C0);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, qword_100323030);
    }
  }
}

void sub_10016481C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t), uint64_t a10)
{
  if ((a2 & 1) == 0)
  {
    if (a1)
    {
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        sub_100008A94(Strong + 56, (uint64_t)v39);
        uint64_t v25 = v40;
        uint64_t v26 = v41;
        sub_100008EF8(v39, v40);
        uint64_t v27 = (void *)swift_allocObject();
        uint64_t v28 = a8;
        uint64_t v29 = v27;
        void v27[2] = a7;
        v27[3] = v28;
        v27[4] = a9;
        void v27[5] = a10;
        id v30 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, char), void *, uint64_t, uint64_t))(v26 + 8);
        swift_unknownObjectRetain();
        swift_retain();
        v30(a4, a5, sub_100167204, v29, v25, v26);
        swift_release();
        sub_100008EA8((uint64_t)v39);
        swift_release();
      }
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100007288(v13, (uint64_t)qword_10033E748);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Account is ineligible for custodian auto-acceptance as a result of no manatee availability", v16, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(a7 + qword_10032E718) = 8;
      a9(1, a7, a8);
    }
    return;
  }
  swift_errorRetain();
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100007288(v17, (uint64_t)qword_10033E748);
  swift_errorRetain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 138412290;
    v39[0] = _convertErrorToNSError(_:)();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v21 = v39[0];
    sub_100080A98(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Something went wrong while validating account: %@", v20, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100080A98(a1, 1);
  }

  v39[0] = a1;
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  type metadata accessor for AACustodianError(0);
  if (swift_dynamicCast())
  {
    id v31 = v42;
    sub_100006F74((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.code.getter();
    if (v39[0] == -7012)
    {
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "This account is ineligible to be a custodian, marking as ineligible.", v34, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(a7 + qword_10032E718) = 7;
      a9(5, a7, a8);
      sub_100080A98(a1, 1);

      return;
    }
  }
  uint64_t ObjectType = swift_getObjectType();
  *(unsigned char *)(a7 + qword_10032E718) = 6;
  _convertErrorToNSError(_:)();
  uint64_t v36 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(a8 + 72))(v39, ObjectType, a8);
  uint64_t v38 = v37;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v36(v39, 0);
  a9(1, a7, a8);
  sub_100080A98(a1, 1);
}

uint64_t sub_100164DF0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E748);
    swift_errorRetain();
    os_log_type_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = a3;
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      v25[0] = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v25[0];
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to fetch family circle: %@", v17, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      a3 = v24;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100080A98(a1, 1);
    }

    uint64_t ObjectType = swift_getObjectType();
    *(unsigned char *)(a3 + qword_10032E718) = 6;
    _convertErrorToNSError(_:)();
    uint64_t v21 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(a4 + 72))(v25, ObjectType, a4);
    uint64_t v23 = v22;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v21(v25, 0);
    a5(1, a3, a4);
    return sub_100080A98(a1, 1);
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E748);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Family circle fetch successful.", v12, 2u);
      swift_slowDealloc();
    }

    if (a1)
    {
      *(unsigned char *)(a3 + qword_10032E718) = 0;
      uint64_t v13 = 2;
    }
    else
    {
      *(unsigned char *)(a3 + qword_10032E718) = 5;
      uint64_t v13 = 1;
    }
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a5)(v13, a3, a4);
  }
}

uint64_t sub_100165194(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v61 = a5;
  uint64_t v62 = a6;
  uint64_t v65 = a4;
  uint64_t v66 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v9 = __chkstk_darwin(v66, v8);
  uint64_t v60 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v60 - v13;
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v60 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v64 = (uint64_t)&v60 - v20;
  uint64_t v21 = swift_projectBox();
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E748);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = v18;
      id v30 = (uint8_t *)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)id v30 = 136315138;
      uint64_t v63 = v30 + 4;
      uint64_t v68 = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v31 = String.init<A>(describing:)();
      uint64_t v68 = sub_100135190(v31, v32, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Manatee status check failed: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v18 = v29;
      swift_slowDealloc();

      sub_100080A98(a1, 1);
    }
    else
    {
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      swift_errorRelease();
    }
    goto LABEL_18;
  }
  if ((a1 & 1) == 0)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E748);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Manatee is not available to save custodianship with E2E encryption", v25, 2u);
      swift_slowDealloc();
    }

LABEL_18:
    int v37 = 0;
    goto LABEL_19;
  }
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_100007288(v33, (uint64_t)qword_10033E748);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Manatee is available to save custodianship with E2E encryption", v36, 2u);
    swift_slowDealloc();
  }

  int v37 = 1;
LABEL_19:
  swift_beginAccess();
  sub_10004CEC4(v21, (uint64_t)v18);
  uint64_t v38 = (int *)v66;
  uint64_t v39 = *(int *)(v66 + 28);
  uint64_t v40 = (uint64_t *)(v21 + *(int *)(v66 + 24));
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  uint64_t v63 = (uint8_t *)v21;
  uint64_t v43 = *(void *)(v21 + v39);
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16);
  v45(v14, v18, v44);
  v45(&v14[v38[5]], &v18[v38[5]], v44);
  uint64_t v46 = v38[8];
  if (v37 == v18[v38[9]])
  {
    uint64_t v47 = *(void *)&v18[v46];
    unint64_t v48 = *(void *)&v18[v46 + 8];
    uint64_t v49 = (uint64_t *)&v14[v46];
    *uint64_t v49 = v47;
    v49[1] = v48;
    sub_100013140(v47, v48);
  }
  else
  {
    *(_OWORD *)&v14[v46] = xmmword_1002A9C60;
  }
  uint64_t v50 = v66;
  uint64_t v51 = &v14[*(int *)(v66 + 24)];
  *(void *)uint64_t v51 = v42;
  *((void *)v51 + 1) = v41;
  *(void *)&v14[*(int *)(v50 + 28)] = v43;
  swift_bridgeObjectRetain();
  sub_100081CB8((uint64_t)v18);
  v14[*(int *)(v50 + 36)] = v37;
  uint64_t v52 = v64;
  sub_10002C8BC((uint64_t)v14, v64);
  uint64_t v53 = (uint64_t)v63;
  swift_beginAccess();
  sub_1001672CC(v52, v53);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  sub_100007288(v54, (uint64_t)qword_10033E748);
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 67109120;
    int v67 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Saving CustodianshipInfoRecord in manatee? %{BOOL}d", v57, 8u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    uint64_t v59 = v60;
    sub_10004CEC4(v53, v60);
    sub_100165854(v59, v61, v62);
    swift_release();
    return sub_100081CB8(v59);
  }
  return result;
}

uint64_t sub_100165854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v34 = a3;
  uint64_t v35 = a2;
  uint64_t v6 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v30 - v13;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E748);
  sub_10004CEC4(a1, (uint64_t)v14);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v33 = a1;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v32 = v4;
    uint64_t v31 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_DWORD *)uint64_t v19 = 136315138;
    int v21 = v14[*(int *)(v6 + 36)];
    v37[0] = v20;
    if (v21) {
      uint64_t v22 = 1702195828;
    }
    else {
      uint64_t v22 = 0x65736C6166;
    }
    if (v21) {
      unint64_t v23 = 0xE400000000000000;
    }
    else {
      unint64_t v23 = 0xE500000000000000;
    }
    uint64_t v36 = sub_100135190(v22, v23, v37);
    uint64_t v11 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100081CB8((uint64_t)v14);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Manatee status is %s for record being saved.", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v4 = v32;
    swift_slowDealloc();
    a1 = v33;
    swift_slowDealloc();
  }
  else
  {
    sub_100081CB8((uint64_t)v14);
  }

  sub_100008A94(v4 + 96, (uint64_t)v37);
  sub_100008EF8(v37, v37[3]);
  uint64_t v24 = swift_allocObject();
  swift_weakInit();
  sub_10004CEC4(a1, (uint64_t)v11);
  unint64_t v25 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v26 = (void *)swift_allocObject();
  uint64_t v27 = v34;
  uint64_t v28 = v35;
  v26[2] = v24;
  uint64_t v26[3] = v28;
  v26[4] = v27;
  sub_10002C8BC((uint64_t)v11, (uint64_t)v26 + v25);
  swift_unknownObjectRetain();
  sub_100269654(a1, (uint64_t)sub_100167468, (uint64_t)v26);
  swift_release();
  return sub_100008EA8((uint64_t)v37);
}

void sub_100165BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (int *)type metadata accessor for CustodianshipInfoRecord();
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_10002C854(a1, (uint64_t)v16);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100007288(v17, (uint64_t)qword_10033E748);
      swift_errorRetain();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        int v21 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 138412290;
        uint64_t v22 = _convertErrorToNSError(_:)();
        uint64_t v36 = (void *)v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *int v21 = v22;
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unable to persist invitation: %@", v20, 0xCu);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
      }

      uint64_t v31 = (void *)_convertErrorToNSError(_:)();
      sub_100253FD0(0, v31);

      swift_release();
      swift_errorRelease();
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_100007288(v25, (uint64_t)qword_10033E748);
      sub_10004CEC4(a5, (uint64_t)v12);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v32 = a5;
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v33 = a4;
        uint64_t v29 = v28;
        uint64_t v34 = a3;
        *(_DWORD *)uint64_t v28 = 134217984;
        uint64_t v30 = *(void **)&v12[v9[7]];
        sub_100081CB8((uint64_t)v12);
        uint64_t v36 = v30;
        a5 = v32;
        a3 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Saved invitation status: %ld.", v29, 0xCu);
        a4 = v33;
        swift_slowDealloc();
      }
      else
      {
        sub_100081CB8((uint64_t)v12);
      }

      if (*(void *)(a5 + v9[7]) == 2)
      {
        [self postRecoveryContactChangedNotification];
        sub_10016609C(a5 + v9[5], *(void *)(a5 + v9[6]), *(void *)(a5 + v9[6] + 8), a3, a4);
      }
      else
      {
        sub_100253FD0(1, 0);
      }
      swift_release();
      sub_100081D14((uint64_t)v16);
    }
  }
  else
  {
    type metadata accessor for AACustodianError(0);
    uint64_t v35 = -7022;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006F74((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v23 = v36;
    uint64_t v24 = (void *)_convertErrorToNSError(_:)();

    sub_100253FD0(0, v24);
  }
}

uint64_t sub_10016609C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v36 = a5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = objc_allocWithZone((Class)AACustodianInvitationResponseContext);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v15 = [v13 initWithCustodianID:isa didAccept:1 v36];

  sub_100008EF8((void *)(v6 + 16), *(void *)(v6 + 40));
  uint64_t v38 = a4;
  swift_unknownObjectRetain();
  id v16 = [v15 custodianID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v37 = v15;
  LOBYTE(v16) = [v15 isAccepted];
  type metadata accessor for CustodianInvitationResponseMessage();
  uint64_t v17 = swift_allocObject();
  *(unsigned char *)(v17 + 16) = 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v17 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_custodianID, v12, v8);
  *(unsigned char *)(v17 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_accepted) = (_BYTE)v16;
  id v18 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_bridgeObjectRetain();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v20 = [v18 initWithHandle:v19];

  if (v20)
  {
    uint64_t v21 = qword_100320B70;
    id v22 = v20;
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E700);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Destination is valid!", v26, 2u);
      swift_slowDealloc();
    }

    sub_100216DD0(v17, v22);
    sub_100253FD0(1, 0);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    sub_100007288(v23, (uint64_t)qword_10033E748);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Invitation response sent.", v34, 2u);
      swift_slowDealloc();
    }
    swift_release();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E748);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unable to generate destination from handle.", v30, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v39 = -7004;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006F74((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v31 = v40;
    sub_100166600((uint64_t)v40);

    swift_release();
  }
  return swift_unknownObjectRelease();
}

void sub_100166600(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)_convertErrorToNSError(_:)();
    sub_100253FD0(0, v1);

    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100007288(v2, (uint64_t)qword_10033E748);
    swift_errorRetain();
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 138412290;
      uint64_t v10 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v5 = v10;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Failed to send invitation result message: %@", v4, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    sub_100253FD0(1, 0);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E748);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Invitation response sent.", v8, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001668B4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_100009F04(&qword_100323190);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for UUID();
  uint64_t v68 = *(void *)(v66 - 8);
  uint64_t v12 = __chkstk_darwin(v66, v11);
  uint64_t v63 = v13;
  uint64_t v64 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  id v16 = (char *)&v54 - v15;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v67 = a2;
  uint64_t v17 = type metadata accessor for Logger();
  sub_100007288(v17, (uint64_t)qword_10033E748);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  id v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v60 = v7;
    uint64_t v22 = v21;
    uint64_t v59 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc();
    v70[0] = (uint64_t)v59;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v55 = v22 + 4;
    uint64_t v23 = a1 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID;
    uint64_t v24 = a1;
    uint64_t v25 = v68;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
    LODWORD(v58) = v20;
    uint64_t v27 = v66;
    v26(v16, v23, v66);
    sub_100006F74((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v62 = v6;
    os_log_type_t v29 = v16;
    unint64_t v31 = v30;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v27);
    uint64_t v69 = sub_100135190(v28, v31, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v24;
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_100135190(v67, a3, v70);
    id v16 = v29;
    uint64_t v6 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v32 = a3;
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v58, "Received invitation to Custodian %s from %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v60;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    unint64_t v32 = a3;
  }
  uint64_t v33 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v65 + OBJC_IVAR____TtC13appleaccountd23DaemonInvitationHandler__analyticsEventFactory, v6);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  id v34 = objc_allocWithZone((Class)type metadata accessor for CustodianInvitationActionAnalyticsEvent());
  uint64_t v62 = sub_100253EEC();
  sub_100008EA8((uint64_t)v70);
  uint64_t v35 = a1;
  uint64_t v56 = a1;
  uint64_t v36 = a1 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID;
  uint64_t v37 = v68;
  uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
  uint64_t v38 = v16;
  uint64_t v39 = v66;
  v59(v16, v36, v66);
  uint64_t v40 = swift_allocObject();
  uint64_t v60 = v40;
  swift_weakInit();
  uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_allocObject();
  *((void *)v41 + 2) = v35;
  *((void *)v41 + 3) = v40;
  uint64_t v42 = v67;
  *((void *)v41 + 4) = v67;
  *((void *)v41 + 5) = v32;
  unint64_t v57 = v32;
  sub_100008A94(v33 + 136, (uint64_t)v70);
  uint64_t v43 = sub_100008EF8(v70, v70[3]);
  uint64_t v61 = v38;
  uint64_t v58 = v43;
  uint64_t v44 = swift_allocObject();
  uint64_t v55 = v44;
  swift_weakInit();
  uint64_t v45 = v64;
  v59(v64, (uint64_t)v38, v39);
  unint64_t v46 = (*(unsigned __int8 *)(v37 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  unint64_t v47 = (v63 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v48 = (char *)swift_allocObject();
  *((void *)v48 + 2) = v44;
  *((void *)v48 + 3) = v42;
  *((void *)v48 + 4) = v57;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v48[v46], v45, v39);
  uint64_t v49 = (uint64_t *)&v48[v47];
  uint64_t v50 = (void *)v62;
  *uint64_t v49 = v62;
  v49[1] = (uint64_t)&off_100302B70;
  uint64_t v51 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v48[(v47 + 23) & 0xFFFFFFFFFFFFFFF8];
  char *v51 = sub_100166FEC;
  v51[1] = v41;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  id v52 = v50;
  swift_retain();
  sub_100230770((void (*)(id, uint64_t))sub_1001670FC, (uint64_t)v48);
  swift_release();
  swift_release();
  sub_100008EA8((uint64_t)v70);

  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v61, v39);
  return swift_release();
}

uint64_t sub_100166F6C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100166FA4()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100166FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100163E8C(a1, a2, a3, v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_100166FF8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

void sub_1001670FC(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10016481C(a1, v4, v2[2], v2[3], v2[4], (uint64_t)v2 + v6, *(uint64_t *)((char *)v2 + v7), *(uint64_t *)((char *)v2 + v7 + 8), *(void (**)(uint64_t, uint64_t, uint64_t))((char *)v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001671C4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100167204(uint64_t a1, char a2)
{
  return sub_10016727C(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100164DF0);
}

uint64_t sub_10016721C()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100167264(uint64_t a1, char a2)
{
  return sub_10016727C(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100165194);
}

uint64_t sub_10016727C(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, void, void, void, void, void))
{
  return a3(a1, a2 & 1, v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_100167294()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001672CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianshipInfoRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100167330()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

void sub_100167468(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_100165BA4(a1, v4, v5, v6, v7);
}

unint64_t sub_1001674E0()
{
  sub_100009F04(&qword_100328A48);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 32) = NSFilePosixPermissions;
  *(void *)(inited + 40) = 508;
  uint64_t v1 = NSFilePosixPermissions;
  unint64_t result = sub_100221CCC(inited);
  static NSFileManager.daemonAgentDirectoryAttributes = result;
  return result;
}

uint64_t *NSFileManager.daemonAgentDirectoryAttributes.unsafeMutableAddressor()
{
  if (qword_100320C60 != -1) {
    swift_once();
  }
  return &static NSFileManager.daemonAgentDirectoryAttributes;
}

uint64_t static NSFileManager.daemonAgentDirectoryAttributes.getter()
{
  if (qword_100320C60 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static NSFileManager.daemonAgentDirectoryAttributes.setter(uint64_t a1)
{
  if (qword_100320C60 != -1) {
    swift_once();
  }
  swift_beginAccess();
  static NSFileManager.daemonAgentDirectoryAttributes = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static NSFileManager.daemonAgentDirectoryAttributes.modify())()
{
  if (qword_100320C60 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

id static NSFileManager.removeDirectory(url:)()
{
  id v0 = [self defaultManager];
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  id v15 = 0;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v15];

  if (v4) {
    return v15;
  }
  id v6 = v15;
  uint64_t v7 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  id v15 = v7;
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  sub_1001697B4();
  if (!swift_dynamicCast()) {
    return (id)swift_errorRelease();
  }
  swift_errorRelease();
  id v8 = [v14 domain];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v9 && v12 == v11)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
LABEL_8:
    if ([v14 code] == (id)4)
    {

      return (id)swift_errorRelease();
    }
  }
  swift_willThrow();
  return (id)swift_errorRelease();
}

void static NSFileManager.emptyDirectory(url:)()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  unsigned int v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100009F04(&qword_10032D4E0);
  __chkstk_darwin(v5 - 8, v6);
  id v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v31 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = self;
  id v34 = [v13 defaultManager];
  id v14 = [v13 defaultManager];
  id v15 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  if (v15)
  {
    id v29 = v15;
    uint64_t v30 = v9;
    NSEnumerator.makeIterator()();
    NSFastEnumerationIterator.next()();
    if (v36)
    {
      id v16 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
      uint64_t v17 = (unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48);
      id v18 = (void (**)(char *, char *, uint64_t))(v1 + 32);
      uint64_t v33 = (void (**)(char *, uint64_t))(v1 + 8);
      unint64_t v32 = (unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48);
      do
      {
        int v19 = swift_dynamicCast();
        int v20 = *v16;
        if (v19)
        {
          v20(v8, 0, 1, v0);
          if ((*v17)(v8, 1, v0) != 1)
          {
            (*v18)(v4, v8, v0);
            URL._bridgeToObjectiveC()(v21);
            uint64_t v23 = v22;
            (*v33)(v4, v0);
            id v35 = 0;
            unsigned __int8 v24 = [v34 removeItemAtURL:v23 error:&v35];

            id v25 = v35;
            if ((v24 & 1) == 0)
            {
              uint64_t v26 = v25;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              uint64_t v17 = v32;
              swift_errorRelease();
            }
            goto LABEL_6;
          }
        }
        else
        {
          v20(v8, 1, 1, v0);
        }
        sub_1000B4848((uint64_t)v8);
LABEL_6:
        NSFastEnumerationIterator.next()();
      }
      while (v36);
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v30);
  }
  else
  {
    id v27 = v34;
  }
}

uint64_t NSFileManager.flatEnumerator(at:includingPropertiesForKeys:)()
{
  id v0 = [self defaultManager];
  uint64_t v1 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  return v1;
}

char *static NSFileManager.shallowContents(of:)()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v31 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100009F04(&qword_10032D4E0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v8 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = self;
  id v13 = [v12 defaultManager];
  id v14 = [v12 defaultManager];
  id v15 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  if (!v15) {
    return (char *)_swiftEmptyArrayStorage;
  }
  NSEnumerator.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (v33)
  {
    id v16 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
    uint64_t v17 = v1;
    id v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48);
    int v19 = (char *)_swiftEmptyArrayStorage;
    uint64_t v29 = v17;
    uint64_t v30 = (void (**)(char *, char *, uint64_t))(v17 + 32);
    while (1)
    {
      int v20 = swift_dynamicCast();
      uint64_t v21 = *v16;
      if (v20)
      {
        v21(v7, 0, 1, v0);
        if ((*v18)(v7, 1, v0) != 1)
        {
          uint64_t v28 = *v30;
          v28(v31, v7, v0);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v19 = (char *)sub_100168510(0, *((void *)v19 + 2) + 1, 1, (unint64_t)v19, &qword_100328A40, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
          }
          unint64_t v23 = *((void *)v19 + 2);
          unint64_t v22 = *((void *)v19 + 3);
          unint64_t v24 = v23 + 1;
          if (v23 >= v22 >> 1)
          {
            unint64_t v27 = v23 + 1;
            uint64_t v25 = sub_100168510(v22 > 1, v23 + 1, 1, (unint64_t)v19, &qword_100328A40, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
            unint64_t v24 = v27;
            int v19 = (char *)v25;
          }
          *((void *)v19 + 2) = v24;
          v28(&v19[((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v23], v31, v0);
          goto LABEL_13;
        }
      }
      else
      {
        v21(v7, 1, 1, v0);
      }
      sub_1000B4848((uint64_t)v7);
LABEL_13:
      NSFastEnumerationIterator.next()();
      if (!v33) {
        goto LABEL_17;
      }
    }
  }
  int v19 = (char *)_swiftEmptyArrayStorage;
LABEL_17:
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v32);

  return v19;
}

uint64_t NSFileManager.deepEnumerator(at:includingPropertiesForKeys:)()
{
  id v0 = [self defaultManager];
  uint64_t v1 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  return v1;
}

void *sub_100168260(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100009F04(&qword_100325EA0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100169010(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100168384(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100009F04(&qword_10032DAE0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      id v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      id v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100169120(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100168494(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_100168CA8(a1, a2, a3, a4, &qword_1003289E0, &qword_1003289E8);
}

uint64_t sub_1001684A8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100168510(a1, a2, a3, a4, &qword_10032DB70, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_1001684DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100168510(a1, a2, a3, a4, &qword_100328A20, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_100168510(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    id v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100009F04(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  id v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001697F4(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t sub_100168790(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100168510(a1, a2, a3, a4, &qword_100328A28, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
}

uint64_t sub_1001687C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100168510(a1, a2, a3, a4, (uint64_t *)&unk_10032DB90, (uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_1001687F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100168510(a1, a2, a3, a4, &qword_100328A30, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
}

uint64_t sub_10016882C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100168510(a1, a2, a3, a4, &qword_1003289C8, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
}

uint64_t sub_100168860(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100168510(a1, a2, a3, a4, &qword_1003289C0, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
}

uint64_t sub_100168894(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100168510(a1, a2, a3, a4, &qword_1003289D0, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1001688C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100168510(a1, a2, a3, a4, &qword_1003289B8, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
}

uint64_t sub_1001688FC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100168510(a1, a2, a3, a4, &qword_100328A18, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
}

void *sub_100168930(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100009F04(&qword_10032DC20);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100169214(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100168A40(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100009F04(&qword_1003289D8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100169320(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100168B6C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100009F04(&qword_1003289A8);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[24 * v8 + 32]) {
          memmove(v12, a4 + 32, 24 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100169418(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100168C94(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_100168CA8(a1, a2, a3, a4, &qword_100328A10, &qword_1003289F8);
}

char *sub_100168CA8(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = *((void *)a4 + 3);
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = *((void *)a4 + 2);
    if (v10 <= v11) {
      uint64_t v12 = *((void *)a4 + 2);
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_100009F04(a5);
      uint64_t v13 = (char *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      *((void *)v13 + 2) = v11;
      *((void *)v13 + 3) = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 32;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v16 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[16 * v11 + 32]) {
          memmove(v16, a4 + 32, 16 * v11);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100169950(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *sub_100168DC4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100009F04(&qword_100328A00);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[24 * v8 + 32]) {
          memmove(v12, a4 + 32, 24 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100169528(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100168EEC(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_100168CA8(a1, a2, a3, a4, &qword_1003289F0, &qword_1003289F8);
}

void *sub_100168F00(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100009F04(&qword_100328A38);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100169A58(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100169010(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_100009F04(&qword_1003215F0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100169120(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100169214(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_100009F04((uint64_t *)&unk_100325850);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100169320(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100169418(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100009F04(&qword_1003289B0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100169528(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100009F04(&qword_100328A08);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(uint64_t a1, Class isa)
{
  id v3 = [self defaultManager];
  char v14 = 0;
  URL.path.getter();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v5 = [v3 fileExistsAtPath:v4 isDirectory:&v14];

  if (!v5)
  {
    URL._bridgeToObjectiveC()(v6);
    uint64_t v8 = v7;
    if (isa)
    {
      type metadata accessor for FileAttributeKey(0);
      sub_100169B4C();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    }
    id v13 = 0;
    unsigned int v9 = [v3 createDirectoryAtURL:v8 withIntermediateDirectories:1 attributes:isa error:&v13];

    if (!v9)
    {
      id v11 = v13;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      return v5 ^ 1;
    }
    id v10 = v13;
  }

  return v5 ^ 1;
}

unint64_t sub_1001697B4()
{
  unint64_t result = qword_100321D00;
  if (!qword_100321D00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100321D00);
  }
  return result;
}

uint64_t sub_1001697F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100169950(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      sub_100009F04(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100169A58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100169B4C()
{
  unint64_t result = qword_100321148;
  if (!qword_100321148)
  {
    type metadata accessor for FileAttributeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321148);
  }
  return result;
}

void sub_100169BA4(uint64_t a1)
{
  if (a1)
  {
    [v1 sendEvent:a1];
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100007288(v2, (uint64_t)qword_10033E700);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Analytics event found nil", v4, 2u);
      swift_slowDealloc();
    }
  }
}

id sub_100169D94()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t type metadata accessor for AnalyticsRTCReporter()
{
  return self;
}

uint64_t sub_100169DF0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  v6[3] = a5;
  v6[4] = v5;
  v6[2] = a2;
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v8 = (void *)swift_task_alloc();
  v6[5] = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_100169EDC;
  return v10(a1);
}

uint64_t sub_100169EDC()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    objc_super v2 = sub_10016A070;
  }
  else {
    objc_super v2 = sub_100169FF0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100169FF0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    [v1 updateTaskResultWithError:0];
    uint64_t v1 = *(void **)(v0 + 16);
  }
  sub_100169BA4((uint64_t)v1);
  objc_super v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10016A070()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    objc_super v2 = (void *)_convertErrorToNSError(_:)();
    [v1 updateTaskResultWithError:v2];

    uint64_t v3 = *(void *)(v0 + 16);
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_100169BA4(v3);
  swift_willThrow();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t type metadata accessor for CustodianHealthCheckAnalyticsEvent()
{
  uint64_t result = qword_100328AD0;
  if (!qword_100328AD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10016A168()
{
  sub_1000C520C();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

unint64_t sub_10016A244(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D75736B63656863;
      break;
    case 2:
    case 3:
    case 4:
      unint64_t result = 0x4B52436B63656863;
      break;
    case 5:
      unint64_t result = 0x697373694D636B72;
      break;
    case 6:
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000016;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10016A3A8(uint64_t a1, char a2)
{
  *(void *)&v2[qword_100328A80] = _swiftEmptyArrayStorage;
  v2[qword_100328A90] = 0;
  v2[qword_100328A98] = 0;
  *(void *)&v2[qword_100328AA0] = -1;
  uint64_t v5 = &v2[qword_100328AA8];
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = &v2[qword_100328AB0];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  unint64_t v7 = &v2[qword_100328AB8];
  *unint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = &v2[qword_100328AC0];
  *uint64_t v8 = 0;
  v8[1] = 0;
  uint64_t v9 = v2;
  sub_100009F04((uint64_t *)&unk_10032A630);
  Dependency.init(dependencyId:config:)();
  uint64_t v10 = &v9[qword_100328A88];
  *(void *)uint64_t v10 = a1;
  v10[8] = a2 & 1;

  sub_1000800D0((uint64_t)_swiftEmptyArrayStorage);
  return AAFTimedAnalyticsEvent.init(eventName:initialData:)();
}

void sub_10016A4DC(uint64_t a1, char a2)
{
  uint64_t v6 = v2;
  uint64_t v8 = sub_100009F04(&qword_100325360);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (AAUnderTest.getter()) {
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v6 + qword_100328AC8, v8);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_100008EF8(v62, v62[3]);
  sub_100009F04((uint64_t *)&unk_100325630);
  OS_dispatch_queue.sync<A>(execute:)();
  sub_10024EC08(v61);
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  unint64_t v63 = v14;
  sub_100008EA8((uint64_t)v62);
  NSString v15 = String._bridgeToObjectiveC()();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v62[0] = v63;
  unint64_t v63 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v15, 0x6E6F6973726576, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
  unint64_t v63 = v62[0];
  swift_bridgeObjectRelease();
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  v62[0] = v63;
  unint64_t v63 = 0x8000000000000000;
  sub_10022C68C((uint64_t)isa, 0x6961706552646964, 0xE900000000000072, v18);
  unint64_t v63 = v62[0];
  swift_bridgeObjectRelease();
  Class v19 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  v62[0] = v63;
  unint64_t v63 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v19, 0xD000000000000013, 0x800000010029E370, v20);
  unint64_t v63 = v62[0];
  swift_bridgeObjectRelease();
  Class v21 = Int._bridgeToObjectiveC()().super.super.isa;
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  v62[0] = v63;
  unint64_t v63 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v21, 0xD000000000000018, 0x800000010029E390, v22);
  unint64_t v63 = v62[0];
  swift_bridgeObjectRelease();
  sub_10016A244(a2);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  v62[0] = v63;
  unint64_t v63 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v23, 0x6E6F73616572, 0xE600000000000000, v24);
  unint64_t v63 = v62[0];
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v6 + qword_100328A88 + 8))
  {
  }
  else
  {
    Class v25 = Int._bridgeToObjectiveC()().super.super.isa;
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    v62[0] = v63;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C((uint64_t)v25, 0xD000000000000012, 0x800000010029C2A0, v26);
    unint64_t v63 = v62[0];
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v6 + qword_100328AA8 + 8))
  {
    swift_bridgeObjectRetain();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    v62[0] = v63;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C((uint64_t)v27, 0x646C6975426B7263, 0xEF6E6F6973726556, v28);
    unint64_t v63 = v62[0];
    swift_bridgeObjectRelease();
  }
  else
  {
  }
  if (*(unsigned char *)(v6 + qword_100328AB0 + 8))
  {
  }
  else
  {
    Class v29 = UInt._bridgeToObjectiveC()().super.super.isa;
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    v62[0] = v63;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C((uint64_t)v29, 0x6F43726961706572, 0xEB00000000746E75, v30);
    unint64_t v63 = v62[0];
    swift_bridgeObjectRelease();
  }
  uint64_t v31 = (unint64_t *)(v6 + qword_100328A80);
  swift_beginAccess();
  unint64_t v32 = *v31;
  if (*v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v32 = *v31;
    if (v56 < 2) {
      goto LABEL_30;
    }
  }
  else if (*(uint64_t *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
  {
    goto LABEL_30;
  }
  if ((v32 & 0xC000000000000001) != 0) {
    goto LABEL_44;
  }
  if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_46;
  }
  id v33 = *(id *)(v32 + 40);
  while (1)
  {
    id v34 = (void *)sub_10016B5B0();

    uint64_t v3 = &off_10031D000;
    [v34 code];
    Class v35 = Int._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess();
    char v36 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = v63;
    unint64_t v5 = 0x8000000000000000;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C((uint64_t)v35, 0xD000000000000014, 0x800000010029C400, v36);
    unint64_t v63 = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v4 = &off_10031D000;
    id v37 = [v34 domain];
    if (!v37) {
      goto LABEL_54;
    }
    uint64_t v38 = (uint64_t)v37;
    swift_beginAccess();
    char v39 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = v63;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C(v38, 0xD000000000000016, 0x800000010029C420, v39);
    unint64_t v63 = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();

    unint64_t v32 = *v31;
    if (*v31 >> 62)
    {
LABEL_46:
      swift_bridgeObjectRetain();
      uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v32 = *v31;
      if (v57 < 3) {
        goto LABEL_30;
      }
    }
    else if (*(uint64_t *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3)
    {
      goto LABEL_30;
    }
    if ((v32 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL)
      {
        __break(1u);
        goto LABEL_50;
      }
      id v40 = *(id *)(v32 + 48);
    }
    uint64_t v41 = (void *)sub_10016B5B0();

    [v41 v3[168]];
    Class v42 = Int._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess();
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = v63;
    unint64_t v63 = v5;
    sub_10022C68C((uint64_t)v42, 0xD000000000000014, 0x800000010029C440, v43);
    unint64_t v63 = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();
    id v44 = [v41 v4[182]];
    if (!v44) {
      goto LABEL_55;
    }
    uint64_t v45 = (uint64_t)v44;
    swift_beginAccess();
    char v46 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = v63;
    unint64_t v63 = v5;
    sub_10022C68C(v45, 0xD000000000000016, 0x800000010029C460, v46);
    unint64_t v63 = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();

    unint64_t v32 = *v31;
    if (!(*v31 >> 62))
    {
      if (*(uint64_t *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < 4) {
        goto LABEL_30;
      }
      goto LABEL_25;
    }
LABEL_50:
    swift_bridgeObjectRetain();
    uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v32 = *v31;
    if (v58 < 4) {
      goto LABEL_30;
    }
LABEL_25:
    if ((v32 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < 4uLL) {
      break;
    }
    id v47 = *(id *)(v32 + 56);
LABEL_28:
    unint64_t v48 = (void *)sub_10016B5B0();

    [v48 v3[168]];
    Class v49 = Int._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess();
    char v50 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = v63;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C((uint64_t)v49, 0xD000000000000014, 0x800000010029C480, v50);
    unint64_t v63 = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();
    id v51 = [v48 v4[182]];
    if (!v51) {
      goto LABEL_56;
    }
    uint64_t v52 = (uint64_t)v51;
    swift_beginAccess();
    char v53 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v60 = v63;
    unint64_t v63 = 0x8000000000000000;
    sub_10022C68C(v52, 0xD000000000000016, 0x800000010029C4A0, v53);
    unint64_t v63 = v60;
    swift_bridgeObjectRelease();
    swift_endAccess();

    unint64_t v32 = *v31;
LABEL_30:
    if (v32 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = (unint64_t *)_CocoaArrayWrapper.endIndex.getter();
      if (!v31)
      {
LABEL_39:
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v31 = *(unint64_t **)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v31) {
        goto LABEL_39;
      }
    }
    if ((v32 & 0xC000000000000001) != 0)
    {
      id v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_35;
    }
    if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v54 = *(id *)(v32 + 32);
LABEL_35:
      uint64_t v55 = v54;
      swift_bridgeObjectRelease();
      uint64_t v31 = (unint64_t *)sub_10016B5B0();

LABEL_40:
      swift_beginAccess();
      swift_bridgeObjectRetain();
      dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
}

void sub_10016B04C()
{
}

uint64_t sub_10016B07C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_100328AC8;
  uint64_t v2 = sub_100009F04(&qword_100325360);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

id sub_10016B138()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianHealthCheckAnalyticsEvent();
  return [super dealloc];
}

uint64_t sub_10016B170(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + qword_100328AC8;
  uint64_t v3 = sub_100009F04(&qword_100325360);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_10016B230()
{
  return type metadata accessor for CustodianHealthCheckAnalyticsEvent();
}

uint64_t (*sub_10016B238())()
{
  return j__swift_endAccess;
}

uint64_t sub_10016B294(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1001358B8(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10022D3E8();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_10016B364(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_10016B364(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          NSString v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *NSString v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10016B540(uint64_t a1)
{
  uint64_t result = sub_100112548(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = sub_10016C230(result, v3, 0, a1);
  swift_errorRetain();
  return v5;
}

uint64_t sub_10016B5B0()
{
  sub_10000850C(0, (unint64_t *)&qword_100321D00);
  type metadata accessor for CKError(0);
  id v1 = v0;
  if (swift_dynamicCast())
  {
    uint64_t v2 = related decl 'e' for CKErrorCode.partialErrorsByItemID.getter();
    if (v2)
    {
      uint64_t v3 = sub_10016B540(v2);
      swift_bridgeObjectRelease();
      if (v3)
      {
        swift_getErrorValue();
        sub_1001A8824(v8, v9);
        swift_errorRelease();

        goto LABEL_9;
      }
    }
  }
  id v13 = v1;
  sub_10016C9BC();
  id v4 = v1;
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
  }
  else
  {
    swift_allocError();
    *uint64_t v5 = v13;
  }
LABEL_9:
  swift_getErrorValue();
  sub_10003550C(v10, v11);
  uint64_t v6 = _convertErrorToNSError(_:)();
  swift_errorRelease();
  swift_errorRelease();
  return v6;
}

uint64_t sub_10016B720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  uint64_t v25 = *(void *)(v3 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  uint64_t v19 = (void *)(v18 + ((v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v20 = v24;
  *uint64_t v19 = v23;
  v19[1] = v20;
  aBlock[4] = sub_10016CB14;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  void aBlock[3] = &unk_1002FDE58;
  BOOL v21 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  char v28 = &_swiftEmptyArrayStorage;
  sub_10016CA24((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v26);
  return swift_release();
}

uint64_t sub_10016BAAC(uint64_t a1, uint64_t (*a2)(uint64_t, void))
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self defaultManager];
  URL._bridgeToObjectiveC()(v10);
  uint64_t v12 = v11;
  id v31 = 0;
  unsigned int v13 = [v9 removeItemAtURL:v11 error:&v31];

  if (v13)
  {
    id v14 = v31;
    return a2(1, 0);
  }
  else
  {
    id v16 = v31;
    uint64_t v17 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E7A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      Class v29 = a2;
      uint64_t v22 = v21;
      uint64_t v27 = (void *)swift_slowAlloc();
      char v28 = (void *)swift_slowAlloc();
      id v31 = v28;
      *(_DWORD *)uint64_t v22 = 136315394;
      os_log_t v26 = v19;
      sub_10016CA24((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v30 = sub_100135190(v23, v24, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      *(_WORD *)(v22 + 12) = 2112;
      uint64_t v25 = _convertErrorToNSError(_:)();
      uint64_t v30 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v27 = v25;
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v19 = v26;
      _os_log_impl((void *)&_mh_execute_header, v26, v20, "Error deleting record at %s from LocalCache: %@", (uint8_t *)v22, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v29;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(v17, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
}

uint64_t sub_10016BEF0()
{
  swift_release();
  swift_release();

  swift_release();

  return swift_deallocClassInstance();
}

void *sub_10016BF40()
{
  v10[0] = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v10[0] - 8);
  __chkstk_darwin(v10[0], v2);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5, v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8, v8);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  v0[2] = JSONEncoder.init()();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  v0[3] = JSONDecoder.init()();
  sub_10000850C(0, (unint64_t *)&qword_10032A860);
  static DispatchQoS.unspecified.getter();
  v10[1] = &_swiftEmptyArrayStorage;
  sub_10016CA24((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v10[0]);
  v0[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for DataCryptor();
  swift_allocObject();
  v0[5] = sub_100208388(0xD000000000000017, 0x800000010029E5B0, 0x614364726F636572, 0xEB00000000656863);
  return v0;
}

uint64_t sub_10016C230(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 56) + 8 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10016C280(void (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LocalCache();
  sub_10000A280();
  uint64_t v7 = self;
  id v8 = [v7 defaultManager];
  URL.path.getter();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v10 = [v8 fileExistsAtPath:v9];

  if (v10)
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E7A8);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Removing the storage container…", v14, 2u);
      swift_slowDealloc();
    }

    id v15 = [v7 defaultManager];
    URL._bridgeToObjectiveC()(v16);
    uint64_t v18 = v17;
    id v30 = 0;
    unsigned int v19 = [v15 removeItemAtURL:v17 error:&v30];

    if (v19)
    {
      id v20 = v30;
      goto LABEL_8;
    }
    id v22 = v30;
    uint64_t v23 = _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    swift_errorRetain();
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_t v26 = 138412290;
      char v28 = (void *)_convertErrorToNSError(_:)();
      id v30 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v27 = v28;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error removing the storage container:\n%@", v26, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!a1) {
        return swift_errorRelease();
      }
    }
    else
    {
      swift_errorRelease();

      if (!a1) {
        return swift_errorRelease();
      }
    }
    swift_errorRetain();
    a1(v23);
    swift_errorRelease();
    return swift_errorRelease();
  }
LABEL_8:
  if (a1) {
    a1(0);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_10016C6BC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CryptoKitError();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v18 = a1;
    swift_errorRetain();
    if (!swift_dynamicCast()) {
      return;
    }
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v6, v2);
  }
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007288(v7, (uint64_t)qword_10033E7A8);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unsigned int v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error was of type CryptoError, wiping local records", v10, 2u);
    swift_slowDealloc();
  }

  sub_10016C280(0);
  id v11 = objc_allocWithZone((Class)type metadata accessor for CustodianMigrationAnalyticsEvent());
  sub_1000800D0((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v12 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)();
  os_log_type_t v13 = (void *)_convertErrorToNSError(_:)();
  if (AAUnderTest.getter())
  {
  }
  else
  {
    id v14 = v13;
    id v15 = (void *)sub_10016B5B0();

    sub_100009F04(&qword_100324668);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
    *(void *)(inited + 32) = 0xD000000000000012;
    *(void *)(inited + 40) = 0x800000010029D830;
    *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
    *(void *)(inited + 56) = 0xD000000000000012;
    *(void *)(inited + 64) = 0x800000010029D850;
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    sub_10022175C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();

    swift_bridgeObjectRelease();
  }
}

unint64_t sub_10016C9BC()
{
  unint64_t result = qword_100328C60;
  if (!qword_100328C60)
  {
    sub_10000850C(255, (unint64_t *)&qword_100321D00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328C60);
  }
  return result;
}

uint64_t sub_10016CA24(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016CA6C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10016CB14()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(uint64_t (**)(uint64_t, void))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10016BAAC(v0 + v2, v3);
}

uint64_t sub_10016CBA4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  id v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100009F04(&qword_100328D68);
  uint64_t v9 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v3 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess) = 0;
  uint64_t v13 = a1[3];
  unint64_t v24 = a1;
  sub_100008EF8(a1, v13);
  sub_10016D4C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v16 = (uint64_t)v24;
    type metadata accessor for FinalizeCustodianSetupMessage();
    swift_deallocPartialClassInstance();
    uint64_t v20 = v16;
  }
  else
  {
    uint64_t v14 = v22;
    uint64_t v21 = v9;
    char v27 = 0;
    sub_100029F58();
    uint64_t v15 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(unsigned char *)(v3 + 16) = v28;
    char v26 = 1;
    sub_100006F30((unint64_t *)&unk_100321640);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v3 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_custodianID, v8, v5);
    uint64_t v18 = OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess;
    *(unsigned char *)(v3 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess) = 0;
    char v25 = 2;
    char v19 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v15);
    *(unsigned char *)(v3 + v18) = v19 & 1;
    uint64_t v20 = (uint64_t)v24;
  }
  sub_100008EA8(v20);
  return v3;
}

uint64_t sub_10016CEFC()
{
  unint64_t v1 = 0x6169646F74737563;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000018;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_10016CF5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10016D728(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10016CF84(uint64_t a1)
{
  unint64_t v2 = sub_10016D4C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016CFC0(uint64_t a1)
{
  unint64_t v2 = sub_10016D4C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016CFFC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_custodianID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10016D09C()
{
  return type metadata accessor for FinalizeCustodianSetupMessage();
}

uint64_t type metadata accessor for FinalizeCustodianSetupMessage()
{
  uint64_t result = qword_100328C90;
  if (!qword_100328C90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10016D0F0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10016D194(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  v16[0] = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04(&qword_100328D78);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_10016D4C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v20 = *(unsigned char *)(v2 + 16);
  char v19 = 0;
  sub_100029FAC();
  uint64_t v13 = v16[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    uint64_t v14 = v16[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v16[0] + 16))(v7, v2 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_custodianID, v4);
    char v18 = 1;
    sub_100006F30(&qword_1003263A0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v4);
    char v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_10016D448@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for FinalizeCustodianSetupMessage();
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_10016CBA4(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_10016D4A4(void *a1)
{
  return sub_10016D194(a1);
}

unint64_t sub_10016D4C8()
{
  unint64_t result = qword_100328D70;
  if (!qword_100328D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328D70);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FinalizeCustodianSetupMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016D5E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FinalizeCustodianSetupMessage.CodingKeys()
{
  return &type metadata for FinalizeCustodianSetupMessage.CodingKeys;
}

unint64_t sub_10016D624()
{
  unint64_t result = qword_100328D80;
  if (!qword_100328D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328D80);
  }
  return result;
}

unint64_t sub_10016D67C()
{
  unint64_t result = qword_100328D88;
  if (!qword_100328D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328D88);
  }
  return result;
}

unint64_t sub_10016D6D4()
{
  unint64_t result = qword_100328D90;
  if (!qword_100328D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328D90);
  }
  return result;
}

uint64_t sub_10016D728(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000010029E640)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10016D884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = sub_100009F04(&qword_100329078);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  a8(a5, a7, v17);
  return swift_release();
}

uint64_t sub_10016D9D4()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10016DA1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04(&qword_100329080);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  char v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007288(v7, (uint64_t)qword_10033E778);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    v13[0] = v1;
    uint64_t v11 = (uint8_t *)v10;
    v14[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    v13[1] = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s - CDP not enabled, posting a CDP repair CFU.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v13[0];
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpFollowUpHandler, v2);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_10000F3EC(1, 0);
  return sub_100008EA8((uint64_t)v14);
}

void sub_10016DE4C(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  if (!a1)
  {
    if (qword_100320BD0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E820);
    os_log_type_t v9 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      sub_100135190(0x746C616548504443, 0xEE006B6365684368, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v14, "%s - Successfully performed Walrus Status Mismatch Detection", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    goto LABEL_11;
  }
  swift_errorRetain();
  if (qword_100320BD0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E820);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v9, v10))
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
LABEL_11:

    goto LABEL_12;
  }
  uint64_t v11 = swift_slowAlloc();
  uint64_t v12 = (void *)swift_slowAlloc();
  uint64_t v17 = swift_slowAlloc();
  *(_DWORD *)uint64_t v11 = 136315394;
  sub_100135190(0x746C616548504443, 0xEE006B6365684368, &v17);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v11 + 12) = 2112;
  swift_errorRetain();
  uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v12 = v16;
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s - Error performing Walrus Status Mismatch Detection: %@", (uint8_t *)v11, 0x16u);
  sub_100009F04((uint64_t *)&unk_1003216C0);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
LABEL_12:
  sub_10016E22C(a3, a4, a5);
}

void sub_10016E22C(void *a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v33 = a3;
  id v34 = (void (*)(void))a2;
  uint64_t v5 = sub_100009F04(&qword_100322CE0);
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v32 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100009F04((uint64_t *)&unk_1003245F0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v3;
  if (sub_10016ECC0(a1))
  {
    v34();
    swift_errorRelease();
  }
  else
  {
    id v30 = v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v3 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__recoveryFactorsController, v13);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    uint64_t v19 = sub_100008EF8(&v37, v39);
    uint64_t v20 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v12, *v19 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__cdpController, v9);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v9);
    sub_100008EF8(v35, v36);
    LOBYTE(v20) = sub_1000557F0();
    sub_100008EA8((uint64_t)v35);
    sub_100008EA8((uint64_t)&v37);
    if (v20)
    {
      uint64_t v21 = v30;
      uint64_t v22 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v18 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__notificationManager, v5);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v21, v5);
      sub_100008EF8(v35, v36);
      id v23 = AAFollowUpIdentifierRecoveryKeyMismatch;
      unint64_t v24 = sub_100221100((uint64_t)_swiftEmptyArrayStorage);
      *(void *)&long long v37 = v23;
      *((void *)&v37 + 1) = v24;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v38 = 0;
      char v41 = 0;
      sub_1002507F0(&v37);
      swift_bridgeObjectRelease();

      sub_100008EA8((uint64_t)v35);
      sub_100170D8C((void (*)(uint64_t))v34, v33);
    }
    else
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_100007288(v25, (uint64_t)qword_10033E778);
      char v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        char v28 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v37 = swift_slowAlloc();
        *(_DWORD *)char v28 = 136315138;
        v35[0] = sub_100135190(0x746C616548504443, 0xEE006B6365684368, (uint64_t *)&v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - RK Mismatch exists, proceeding to post RK Mismatch Repair CFU.", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v29 = v34;
      sub_10016E750();
      ((void (*)(void))v29)(0);
    }
  }
}

uint64_t sub_10016E750()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  id v44 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = sub_100009F04(&qword_100321FF8);
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v43 = v11;
  __chkstk_darwin(v11, v12);
  char v41 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04((uint64_t *)&unk_1003245F0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E778);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v39 = v10;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v40 = v3;
    id v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v38 = v1;
    v46[0] = v24;
    uint64_t v37 = v2;
    *(_DWORD *)id v23 = 136315138;
    v45[0] = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v46);
    uint64_t v10 = v39;
    uint64_t v2 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s - recovery key mismatch found, posting CFU to verify RK", v23, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = v38;
    swift_slowDealloc();
    uint64_t v3 = v40;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, (uint64_t)v1 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__recoveryFactorsController, v14);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  uint64_t v25 = sub_100008EF8(v46, v46[3]);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v1;
  *(void *)(v26 + 24) = v2;
  uint64_t v27 = *v25 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__custodianStorage;
  char v28 = v41;
  uint64_t v29 = v42;
  uint64_t v30 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v41, v27, v43);
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v30);
  uint64_t v31 = sub_100008EF8(v45, v45[3]);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = sub_100177A8C;
  *(void *)(v32 + 24) = v26;
  uint64_t v33 = sub_100008EF8((void *)(*v31 + 16), *(void *)(*v31 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  id v34 = v44;
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  Class v35 = *(void (**)(char *, uint64_t))(v4 + 8);
  v35(v34, v3);
  sub_100008EF8((void *)(*v33 + 16), *(void *)(*v33 + 40));
  sub_1000B3744((uint64_t)v10, (uint64_t)sub_1000DEDE8, v32);
  v35(v10, v3);
  swift_release();
  sub_100008EA8((uint64_t)v45);
  swift_release();
  return sub_100008EA8((uint64_t)v46);
}

uint64_t sub_10016ECC0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100009F04(&qword_100325870);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v34 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v33 = sub_100007288(v13, (uint64_t)qword_10033E778);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v30 = v5;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v32 = a1;
    uint64_t v17 = (uint8_t *)v16;
    v36[0] = swift_slowAlloc();
    uint64_t v31 = v4;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v35 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v36);
    uint64_t v5 = v30;
    uint64_t v4 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - Checking device escrow record state.", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v32;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v2 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController, v8);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_100008EF8(v36, v37);
  unsigned __int8 v18 = sub_100055C74();
  sub_100008EA8((uint64_t)v36);
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  NSString v20 = String._bridgeToObjectiveC()();
  [a1 setAccountProperty:isa forKey:v20];

  os_log_type_t v21 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v34, v2 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__accountStore, v4);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v21, v4);
  sub_100008EF8(v36, v37);
  sub_100051750((uint64_t)a1);
  sub_100008EA8((uint64_t)v36);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    v36[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v35 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2080;
    LOBYTE(v35) = v18;
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v35 = sub_100135190(v25, v26, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - Checked device escrow record state and got: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  switch(v18)
  {
    case 1u:
      sub_10017095C(a1);
      break;
    case 2u:
      uint64_t v27 = a1;
      int v28 = 0;
      goto LABEL_11;
    case 4u:
      uint64_t v27 = a1;
      int v28 = 1;
LABEL_11:
      sub_10016F298(v27, v28);
      break;
    default:
      return sub_1000564C4(v18);
  }
  return sub_1000564C4(v18);
}

uint64_t sub_10016F298(void *a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v78 = 0;
  uint64_t v6 = sub_100009F04(&qword_100325870);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  unint64_t v75 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v74 = "ordAttemptsRemaining";
  NSString v15 = String._bridgeToObjectiveC()();
  id v79 = a1;
  id v16 = [a1 accountPropertyForKey:v15];

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v83, 0, sizeof(v83));
  }
  sub_1000086C4((uint64_t)v83, (uint64_t)v81);
  uint64_t v76 = v12;
  uint64_t v77 = v11;
  if (!v82)
  {
    sub_100058764((uint64_t)v81);
    goto LABEL_12;
  }
  sub_10000850C(0, (unint64_t *)&qword_100324670);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    sub_10016FE94(0);
    goto LABEL_13;
  }
  uint64_t v17 = v80;
  sub_10016FE94(v80);
  if (v17)
  {
    uint64_t v18 = qword_100320B98;
    id v19 = v17;
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v21 = sub_100007288(v20, (uint64_t)qword_10033E778);
    uint64_t v22 = (char *)v19;
    uint64_t v72 = v21;
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    os_log_type_t v73 = v22;
    uint64_t v71 = v6;
    int v70 = a2;
    if (v25)
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      v81[0] = v69;
      *(_DWORD *)uint64_t v26 = 136315394;
      *(void *)&v83[0] = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2112;
      os_log_t v67 = v23;
      *(void *)&v83[0] = v73;
      uint64_t v27 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v68 = v17;

      os_log_t v28 = v67;
      _os_log_impl((void *)&_mh_execute_header, v67, v24, "    %s - unrecoverable escrow record, number of previous     failures: %@", (uint8_t *)v26, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v22 = v73;
      swift_slowDealloc();
    }
    else
    {
    }
    id v44 = [v22 integerValue];
    uint64_t v45 = (uint64_t)v44 + 1;
    if (__OFADD__(v44, 1)) {
      __break(1u);
    }
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    NSString v47 = String._bridgeToObjectiveC()();
    [v79 setAccountProperty:isa forKey:v47];

    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      v81[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136315394;
      *(void *)&v83[0] = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 12) = 2048;
      *(void *)&v83[0] = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "    %s - unrecoverable escrow record,     incremented failure count to: %ld", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v6 = v71;
    uint64_t v52 = v76;
    uint64_t v51 = v77;
    char v53 = v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v3 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController, v77);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v51);
    id v54 = *(void **)(*sub_100008EF8(v81, v82) + 16);
    *(void *)&v83[0] = 0;
    id v55 = [v54 walrusStatus:v83];
    if (*(void *)&v83[0])
    {
      id v56 = *(id *)&v83[0];
      swift_willThrow();

      sub_100008EA8((uint64_t)v81);
      uint64_t v78 = 0;
    }
    else
    {
      id v57 = v55;
      sub_100008EA8((uint64_t)v81);
      if (v57 == (id)1)
      {
        if (v45 >= 1)
        {
          uint64_t v58 = Logger.logObject.getter();
          os_log_type_t v59 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v58, v59))
          {
            unint64_t v60 = (uint8_t *)swift_slowAlloc();
            uint64_t v61 = v3;
            uint64_t v62 = v7;
            uint64_t v63 = v6;
            v81[0] = swift_slowAlloc();
            *(_DWORD *)unint64_t v60 = 136315138;
            *(void *)&v83[0] = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v81);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v64 = "%s - unrecoverable escrow record detected more than once for ADP user, proceeding to verify passcode scenario";
LABEL_35:
            _os_log_impl((void *)&_mh_execute_header, v58, v59, v64, v60, 0xCu);
            swift_arrayDestroy();
            uint64_t v6 = v63;
            uint64_t v7 = v62;
            uint64_t v3 = v61;
            swift_slowDealloc();
            swift_slowDealloc();
          }
LABEL_36:

          sub_1001704C8(v70 & 1);
        }
LABEL_37:
        uint64_t v42 = v73;

        goto LABEL_38;
      }
    }
    if (v45 >= 3)
    {
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        unint64_t v60 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = v3;
        uint64_t v62 = v7;
        uint64_t v63 = v6;
        v81[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v60 = 136315138;
        *(void *)&v83[0] = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v64 = "%s - escrow record check failed more than twice for non ADP user, proceeding to verify passcode scenario";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
LABEL_13:
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_100007288(v29, (uint64_t)qword_10033E778);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    os_log_type_t v73 = v10;
    v81[0] = v33;
    *(_DWORD *)uint64_t v32 = 136315138;
    *(void *)&v83[0] = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s - unrecoverable escrow record and failure count is missing... default to 1", v32, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = v73;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v35 = v76;
  uint64_t v34 = v77;
  Class v36 = Int._bridgeToObjectiveC()().super.super.isa;
  NSString v37 = String._bridgeToObjectiveC()();
  [v79 setAccountProperty:v36 forKey:v37];

  uint64_t v38 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v75, v3 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController, v34);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v34);
  uint64_t v39 = *(void **)(*sub_100008EF8(v81, v82) + 16);
  *(void *)&v83[0] = 0;
  id v40 = [v39 walrusStatus:v83];
  if (*(void *)&v83[0])
  {
    id v41 = *(id *)&v83[0];
    swift_willThrow();

    sub_100008EA8((uint64_t)v81);
    uint64_t v42 = 0;
    uint64_t v78 = 0;
  }
  else
  {
    id v43 = v40;
    sub_100008EA8((uint64_t)v81);
    if (v43 == (id)1) {
      sub_1001704C8(a2 & 1);
    }
    uint64_t v42 = 0;
  }
LABEL_38:
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v3 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__accountStore, v6);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_100008EF8(v81, v82);
  uint64_t v65 = v78;
  sub_100051750((uint64_t)v79);
  if (v65) {
    swift_errorRelease();
  }

  return sub_100008EA8((uint64_t)v81);
}

void sub_10016FE94(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100009F04(&qword_100325870);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1
    && (sub_10000850C(0, (unint64_t *)&qword_100324670),
        Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa,
        id v10 = a1,
        char v11 = static NSObject.== infix(_:_:)(),
        v10,
        v10,
        isa,
        (v11 & 1) == 0))
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E778);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      v34[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v33 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v32, v21, "%s - Not posting iCSC Loss Detected event. Previous known state should be viable", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v30 = v32;
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E778);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      NSString v15 = (uint8_t *)swift_slowAlloc();
      v34[0] = swift_slowAlloc();
      *(_DWORD *)NSString v15 = 136315138;
      uint64_t v33 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - Posting iCSC Loss Detected event because escrow record state transitioned from viable to unviable", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__accountStore, v4);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    id v16 = [*(id *)(*sub_100008EF8(v34, v34[3]) + 16) aa_primaryAppleAccount];
    uint64_t v17 = v16;
    if (v16)
    {
      id v18 = [v16 aa_altDSID];

      if (v18)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v19;
      }
      else
      {
        uint64_t v17 = 0;
      }
    }
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (v17)
    {
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v24 = 0;
    }
    id v25 = [self analyticsEventWithName:v23 altDSID:v24 flowID:0];

    sub_100008EA8((uint64_t)v34);
    if (v25)
    {
      type metadata accessor for AAError(0);
      uint64_t v33 = -4419;
      id v26 = v25;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10017726C((unint64_t *)&qword_100321140, type metadata accessor for AAError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v27 = (void *)v34[0];
      os_log_t v28 = (void *)_convertErrorToNSError(_:)();

      [v26 updateTaskResultWithError:v28];
    }
    id v29 = [self reporter];
    swift_getObjectType();
    sub_100169BA4((uint64_t)v25);

    swift_unknownObjectRelease();
  }
}

uint64_t sub_1001704C8(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100009F04(&qword_100329080);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1) {
    char v9 = 3;
  }
  else {
    char v9 = 2;
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = sub_100007288(v10, (uint64_t)qword_10033E778);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v21 = v11;
    uint64_t v15 = v14;
    uint64_t v20 = swift_slowAlloc();
    v23[0] = v20;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v22 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    LOBYTE(v22) = v9;
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v22 = sub_100135190(v16, v17, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s - device has passcode, posting %s CFU to verify passcode", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpFollowUpHandler, v4);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  sub_10000F3EC(v9, 0);
  return sub_100008EA8((uint64_t)v23);
}

void sub_10017095C(void *a1)
{
  uint64_t v2 = sub_100009F04(&qword_100325870);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007288(v7, (uint64_t)qword_10033E778);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  uint64_t v10 = (void *)&unk_1002A9000;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v20 = a1;
    uint64_t v12 = (uint8_t *)v11;
    v23[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v22 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s - escrow record is available", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = &unk_1002A9000;
    swift_slowDealloc();
    a1 = v20;
    swift_slowDealloc();
  }

  uint64_t v13 = v21;
  sub_100173CDC((uint64_t (*)(void))&static os_log_type_t.info.getter, "%s - device has passcode and escrow record, clearing CFU to verify passcode", (void (*)(void))sub_10000F6E8, (uint64_t)"%s - failed to clear CDP confirm existing secret followup: %s");
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  NSString v15 = String._bridgeToObjectiveC()();
  [a1 setAccountProperty:isa forKey:v15];

  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v13 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__accountStore, v2);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_100008EF8(v23, v23[3]);
  sub_100051750((uint64_t)a1);
  sub_100008EA8((uint64_t)v23);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    *(_DWORD *)id v18 = v10[309];
    uint64_t v22 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s - escrow record is available - resetting previous failures to ZERO", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

void sub_100170D8C(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v59 = a2;
  unint64_t v60 = a1;
  uint64_t v57 = sub_100009F04(qword_100323C78);
  uint64_t v56 = *(void *)(v57 - 8);
  __chkstk_darwin(v57, v3);
  id v55 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100009F04(&qword_100322CE0);
  uint64_t v58 = *(void *)(v54 - 8);
  __chkstk_darwin(v54, v5);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v2;
  uint64_t v13 = v2 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v14(v12, v2 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController, v8);
  Dependency.wrappedValue.getter();
  NSString v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v12, v8);
  uint64_t v16 = *(void **)(*sub_100008EF8(aBlock, (uint64_t)v63) + 16);
  *(void *)&long long v67 = 0;
  id v17 = [v16 walrusStatus:&v67];
  if ((void)v67)
  {
    id v18 = (id)v67;
    swift_willThrow();

    sub_100008EA8((uint64_t)aBlock);
LABEL_16:
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_100007288(v42, (uint64_t)qword_10033E778);
    id v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136315138;
      *(void *)&long long v67 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s - Walrus is disabled, skipping remaining checks", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    char v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      unint64_t v48 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v48 = 136315138;
      *(void *)&long long v67 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "%s - Also, tearing down any left over Walrus CFUs", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100173824();
    sub_100173CDC((uint64_t (*)(void))&static os_log_type_t.default.getter, "%s - trying to tear down existing CDP state CFUs.", (void (*)(void))sub_10000F834, (uint64_t)"%s - failed to tear down CDP CFU: %s");
    v60(0);
    return;
  }
  id v19 = v17;
  uint64_t v20 = v58;
  uint64_t v51 = v15;
  uint64_t v52 = v14;
  uint64_t v53 = v13;
  sub_100008EA8((uint64_t)aBlock);
  if (v19 != (id)1) {
    goto LABEL_16;
  }
  uint64_t v21 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v7, v61 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__notificationManager, v54);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v21);
  sub_100008EF8(aBlock, (uint64_t)v63);
  id v22 = AAFollowUpIdentifierADPUserMissingHealthyCustodian;
  unint64_t v23 = sub_100221100((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&long long v67 = v22;
  *((void *)&v67 + 1) = v23;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v68 = 0;
  char v71 = 0;
  sub_1002507F0(&v67);
  swift_bridgeObjectRelease();

  sub_100008EA8((uint64_t)aBlock);
  v52(v12, v53, v8);
  Dependency.wrappedValue.getter();
  v51(v12, v8);
  uint64_t v24 = *sub_100008EF8(v66, v66[3]);
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100007288(v25, (uint64_t)qword_10033E700);
  id v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    os_log_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Initiating walrus status repair", v28, 2u);
    swift_slowDealloc();
  }

  id v29 = *(void **)(v24 + 16);
  uint64_t v64 = sub_100055010;
  uint64_t v65 = 0;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10025ED44;
  uint64_t v63 = &unk_1002FDFC8;
  uint64_t v30 = _Block_copy(aBlock);
  id v31 = v29;
  [v31 repairWalrusStatusWithCompletion:v30];
  _Block_release(v30);

  sub_100008EA8((uint64_t)v66);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  sub_100007288(v25, (uint64_t)qword_10033E778);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136315138;
    v66[0] = sub_100135190(0x746C616548504443, 0xEE006B6365684368, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "    %s - Walrus is enabled, proceeding     with checking for passcode presence and other recovery factors.", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v35 = v57;
  uint64_t v36 = v56;
  NSString v37 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v61 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__deviceState, v57);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v35);
  id v38 = [objc_allocWithZone((Class)AKDevice) init];
  LODWORD(v37) = [v38 isProtectedWithPasscode];

  sub_100008EA8((uint64_t)aBlock);
  if (v37)
  {
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)id v41 = 136315138;
      v66[0] = sub_100135190(0x746C616548504443, 0xEE006B6365684368, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "    %s - escrow record is available or could not be verified,     proceeding to check other recovery factors availability.", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100171E94((uint64_t)v60, v59);
  }
  else
  {
    sub_100171918();
    type metadata accessor for AAError(0);
    v66[0] = -4407;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10017726C((unint64_t *)&qword_100321140, type metadata accessor for AAError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v49 = (void *)aBlock[0];
    v60(aBlock[0]);
  }
}

id sub_100171918()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100009F04(&qword_100329080);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_100007288(v12, (uint64_t)qword_10033E778);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v25 = v2;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v26 = v13;
    id v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    unint64_t v23 = v6;
    v28[0] = v18;
    uint64_t v24 = v1;
    *(_DWORD *)id v17 = 136315138;
    v27[0] = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v28);
    uint64_t v1 = v24;
    uint64_t v2 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - device has NO passcode, posting CFU to create and verify passcode", v17, 0xCu);
    swift_arrayDestroy();
    uint64_t v6 = v23;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v1 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpFollowUpHandler, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController, v2);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  id result = [self sharedInstance];
  if (result)
  {
    uint64_t v20 = result;
    id v21 = [result contextForPrimaryAccount];

    sub_10000F3EC(0, (uint64_t)v21);
    sub_100008EA8((uint64_t)v27);
    return (id)sub_100008EA8((uint64_t)v28);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100171E94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_1003245F0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E778);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v22 = a2;
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v20 = v6;
    v24[0] = v16;
    uint64_t v21 = a1;
    *(_DWORD *)os_log_type_t v15 = 136315138;
    uint64_t v23 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v24);
    a1 = v21;
    a2 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - checking available recovery factors.", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v6 = v20;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__recoveryFactorsController, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_100008EF8(v24, v24[3]);
  id v17 = (void *)swift_allocObject();
  v17[2] = v3;
  v17[3] = a1;
  v17[4] = a2;
  void v17[5] = v6;
  swift_retain();
  swift_retain();
  sub_1000DE034((uint64_t)sub_1001775C8, (uint64_t)v17);
  swift_release();
  return sub_100008EA8((uint64_t)v24);
}

uint64_t sub_1001721A4()
{
  return sub_100173CDC((uint64_t (*)(void))&static os_log_type_t.default.getter, "%s - trying to tear down existing state repair CFUs.", (void (*)(void))sub_10000F398, (uint64_t)"%s - failed to tear down state repair CFU: %s");
}

uint64_t sub_1001721E0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_1003228A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__notificationManager;
  uint64_t v4 = sub_100009F04(&qword_100322CE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__recoveryFactorsController;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_1003245F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__deviceState;
  uint64_t v8 = sub_100009F04(qword_100323C78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpFollowUpHandler;
  uint64_t v10 = sub_100009F04(&qword_100329080);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__accountStore;
  uint64_t v12 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v0 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__urlBagProvider;
  uint64_t v14 = sub_100009F04(&qword_100321CD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);

  return swift_deallocClassInstance();
}

uint64_t sub_100172434()
{
  return type metadata accessor for EnhancedAndAdvancedDataProtectionChecks();
}

uint64_t type metadata accessor for EnhancedAndAdvancedDataProtectionChecks()
{
  uint64_t result = qword_100328DF8;
  if (!qword_100328DF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100172488()
{
  sub_10001BF34(319, qword_100327FA0, (uint64_t *)&unk_100321910);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_100322C50, (uint64_t *)&unk_10032ACA0);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&unk_100324020, (uint64_t *)&unk_10032F8E0);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, &qword_100323AC8, (uint64_t *)&unk_100323AD0);
        if (v3 <= 0x3F)
        {
          sub_10001BF34(319, (unint64_t *)&unk_100328E08, &qword_10032F8F0);
          if (v4 <= 0x3F)
          {
            sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
            if (v5 <= 0x3F)
            {
              sub_10001BF34(319, (unint64_t *)&unk_100327F60, &qword_100320D40);
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001726EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = *v3;
  v4[5] = a3;
  v4[6] = v5;
  return _swift_task_switch(sub_100172714, 0, 0);
}

uint64_t sub_100172714()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  *(_OWORD *)(v3 + 32) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_10032B480);
  *uint64_t v5 = v0;
  v5[1] = sub_100172824;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000036, 0x800000010029E700, sub_10017730C, v3, v6);
}

uint64_t sub_100172824()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100177AD0, 0, 0);
}

uint64_t sub_10017293C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = *v3;
  v4[5] = a3;
  v4[6] = v5;
  return _swift_task_switch(sub_100172964, 0, 0);
}

uint64_t sub_100172964()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  *(_OWORD *)(v3 + 32) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_10032B480);
  *uint64_t v5 = v0;
  v5[1] = sub_100172A74;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000036, 0x800000010029E6C0, sub_100172BA4, v3, v6);
}

uint64_t sub_100172A74()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100172B8C, 0, 0);
}

uint64_t sub_100172B8C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_100172BA4(uint64_t a1)
{
  return sub_10016D884(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)&unk_1002FDF38, (uint64_t)sub_100172BF8, (void (*)(uint64_t, uint64_t, uint64_t))sub_100176B68);
}

void sub_100172BFC(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      id v12 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315394;
      sub_100135190(0x746C616548504443, 0xEE006B6365684368, (uint64_t *)&v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v10 = Error.localizedDescription.getter();
      sub_100135190(v10, v11, (uint64_t *)&v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s - error checking recovery factors: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
    }

    swift_errorRetain();
    a4(a1);
    sub_100080A98(a1, 1);
    sub_100080A98(a1, 1);
  }
  else if (a1 == 1)
  {
    sub_100172F54();
    type metadata accessor for AAError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10017726C((unint64_t *)&qword_100321140, type metadata accessor for AAError);
    _BridgedStoredNSError.init(_:userInfo:)();
    a4((uint64_t)v12);
  }
  else
  {
    sub_100173824();
    sub_100173CDC((uint64_t (*)(void))&static os_log_type_t.default.getter, "%s - trying to tear down existing CDP state CFUs.", (void (*)(void))sub_10000F834, (uint64_t)"%s - failed to tear down CDP CFU: %s");
    a4(0);
  }
}

uint64_t sub_100172F54()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04(&qword_100322CE0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TrustedContactUserNotification();
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E778);
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v18 = v1;
    uint64_t v14 = swift_slowAlloc();
    v17[1] = v7;
    os_log_type_t v15 = (uint8_t *)v14;
    *(void *)&v20[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v15 = 136315138;
    v19[0] = sub_100135190(0x746C616548504443, 0xEE006B6365684368, (uint64_t *)v20);
    uint64_t v1 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s - no recovery factors found, posting CFU to add recovery factors", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_100173824();
  sub_100173CDC((uint64_t (*)(void))&static os_log_type_t.default.getter, "%s - trying to tear down existing CDP state CFUs.", (void (*)(void))sub_10000F834, (uint64_t)"%s - failed to tear down CDP CFU: %s");
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__notificationManager, v2);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_100008EF8(v19, v19[3]);
  sub_1001C1B88((uint64_t)v20);
  sub_10024F5C4(v20, 0, 0);
  sub_10004CF70((uint64_t)v20);
  sub_1001775D8((uint64_t)v10);
  return sub_100008EA8((uint64_t)v19);
}

void sub_1001732A8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = sub_100009F04(&qword_100322CE0);
  uint64_t v32 = *(NSObject **)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TrustedContactUserNotification();
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (BOOL *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      *(void *)&long long v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315394;
      v33[0] = (id)sub_100135190(0x746C616548504443, 0xEE006B6365684368, (uint64_t *)&v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2080;
      v33[0] = (id)a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v26 = String.init<A>(describing:)();
      v33[0] = (id)sub_100135190(v26, v27, (uint64_t *)&v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v32, v24, "%s - failed to fetch healthy recovery contact status: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100080A98(a1, 1);
    }
    else
    {
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      swift_errorRelease();
      os_log_t v28 = v32;
    }
  }
  else
  {
    uint64_t v31 = a3;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a3 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController, v10);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    uint64_t v19 = *(void **)(*sub_100008EF8(&v34, v35) + 16);
    v33[0] = 0;
    id v20 = [v19 walrusStatus:v33];
    if (v33[0])
    {
      id v21 = v33[0];
      swift_willThrow();

      BOOL v22 = 0;
    }
    else
    {
      BOOL v22 = v20 == (id)1;
    }
    id v29 = v32;
    *uint64_t v18 = v22;
    v18[1] = a1 & 1;
    swift_storeEnumTagMultiPayload();
    sub_100008EA8((uint64_t)&v34);
    ((void (*)(char *, uint64_t, uint64_t))v29[2].isa)(v9, v31 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__notificationManager, v6);
    Dependency.wrappedValue.getter();
    ((void (*)(char *, uint64_t))v29[1].isa)(v9, v6);
    sub_100008EF8(v33, (uint64_t)v33[3]);
    sub_1001C1B88((uint64_t)&v34);
    sub_10024F5C4(&v34, 0, 0);
    sub_10004CF70((uint64_t)&v34);
    sub_1001775D8((uint64_t)v18);
    sub_100008EA8((uint64_t)v33);
  }
}

uint64_t sub_100173824()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04(&qword_100322CE0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007288(v7, (uint64_t)qword_10033E778);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)&long long v34 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s - trying to tear down existing AA CFUs.", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = v1 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__notificationManager;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v12(v6, v11, v2);
  Dependency.wrappedValue.getter();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  sub_100008EF8(&v34, v36);
  id v14 = AAFollowUpIdentifierCustodianWalrusRemoved;
  unint64_t v15 = sub_100221100((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&long long v39 = v14;
  *((void *)&v39 + 1) = v15;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  char v43 = 0;
  sub_1002507F0(&v39);
  swift_bridgeObjectRelease();

  sub_100008EA8((uint64_t)&v34);
  v12(v6, v11, v2);
  Dependency.wrappedValue.getter();
  v13(v6, v2);
  sub_100008EF8(&v29, v31);
  id v16 = AAFollowUpIdentifierWalrusUserRecoveryFactorsMissing;
  unint64_t v17 = sub_100221100((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&long long v34 = v16;
  *((void *)&v34 + 1) = v17;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  char v38 = 0;
  sub_1002507F0(&v34);
  swift_bridgeObjectRelease();

  sub_100008EA8((uint64_t)&v29);
  v12(v6, v11, v2);
  Dependency.wrappedValue.getter();
  v13(v6, v2);
  sub_100008EF8(&v24, v26);
  id v18 = AAFollowUpIdentifierCustodianWalrusNoLiveness;
  unint64_t v19 = sub_100221100((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&long long v29 = v18;
  *((void *)&v29 + 1) = v19;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  char v33 = 0;
  sub_1002507F0(&v29);
  swift_bridgeObjectRelease();

  sub_100008EA8((uint64_t)&v24);
  v12(v6, v11, v2);
  Dependency.wrappedValue.getter();
  v13(v6, v2);
  sub_100008EF8(v23, v23[3]);
  id v20 = AAFollowUpIdentifierADPUserMissingHealthyCustodian;
  unint64_t v21 = sub_100221100((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&long long v24 = v20;
  *((void *)&v24 + 1) = v21;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  char v28 = 0;
  sub_1002507F0(&v24);
  swift_bridgeObjectRelease();

  return sub_100008EA8((uint64_t)v23);
}

uint64_t sub_100173CDC(uint64_t (*a1)(void), const char *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v26 = a4;
  uint64_t v8 = v4;
  uint64_t v9 = sub_100009F04(&qword_100329080);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100007288(v14, (uint64_t)qword_10033E778);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = a1();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v23 = a2;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v24 = v8;
    id v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v25 = a3;
    v28[0] = v19;
    *(_DWORD *)id v18 = 136315138;
    uint64_t v27 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v23, v18, 0xCu);
    swift_arrayDestroy();
    a3 = v25;
    swift_slowDealloc();
    uint64_t v8 = v24;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v8 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpFollowUpHandler, v9);
  Dependency.wrappedValue.getter();
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  a3(v20);
  return sub_100008EA8((uint64_t)v28);
}

uint64_t sub_100174124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[84] = a7;
  v7[83] = a6;
  v7[82] = a5;
  v7[81] = a4;
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v7[85] = v8;
  v7[86] = *(void *)(v8 - 8);
  v7[87] = swift_task_alloc();
  return _swift_task_switch(sub_1001741F4, 0, 0);
}

uint64_t sub_1001741F4()
{
  uint64_t v1 = v0[87];
  uint64_t v2 = v0[86];
  uint64_t v3 = v0[85];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[81] + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController, v3);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = (uint64_t (*)(void))((char *)&dword_100323458 + dword_100323458);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[88] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100174304;
  return v6();
}

uint64_t sub_100174304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[89] = a1;
  v4[90] = a2;
  v4[91] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_10017527C;
  }
  else {
    uint64_t v5 = sub_100174420;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100174420()
{
  uint64_t v60 = v0;
  uint64_t v1 = *(void *)(v0 + 720);
  uint64_t v2 = *(void *)(v0 + 712);
  uint64_t v3 = *(void **)(v0 + 656);
  sub_100008EA8(v0 + 16);
  id v4 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v2];
  NSString v5 = String._bridgeToObjectiveC()();
  [v3 setAccountProperty:v4 forKey:v5];

  if (!v1) {
    goto LABEL_42;
  }
  uint64_t v6 = (_OWORD *)(v0 + 384);
  uint64_t v7 = *(void *)(v0 + 720);
  *(void *)(v0 + 416) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 424) = v8;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v7 + 16) && (unint64_t v9 = sub_100135A98(v0 + 96), (v10 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v7 + 56) + 32 * v9, v0 + 384);
  }
  else
  {
    _OWORD *v6 = 0u;
    *(_OWORD *)(v0 + 400) = 0u;
  }
  sub_100098CF0(v0 + 96);
  if (!*(void *)(v0 + 408))
  {
    swift_bridgeObjectRelease();
LABEL_41:
    sub_100058764((uint64_t)v6);
    goto LABEL_42;
  }
  type metadata accessor for PCSGuitarfishFlags(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  uint64_t v58 = v0 + 216;
  uint64_t v11 = *(void **)(v0 + 656);
  uint64_t v12 = *(void *)(v0 + 512);
  BOOL v13 = (v12 & 4) == 0;
  id v14 = [objc_allocWithZone((Class)NSNumber) initWithBool:(v12 & 2) == 0];
  NSString v15 = String._bridgeToObjectiveC()();
  [v11 setAccountProperty:v14 forKey:v15];

  id v16 = [objc_allocWithZone((Class)NSNumber) initWithBool:v13];
  NSString v17 = String._bridgeToObjectiveC()();
  [v11 setAccountProperty:v16 forKey:v17];

  *(void *)(v0 + 480) = 0xD000000000000014;
  *(void *)(v0 + 488) = 0x800000010029E7A0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v7 + 16) && (unint64_t v18 = sub_100135A98(v0 + 176), (v19 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v7 + 56) + 32 * v18, v0 + 320);
  }
  else
  {
    *(_OWORD *)(v0 + 320) = 0u;
    *(_OWORD *)(v0 + 336) = 0u;
  }
  sub_100098CF0(v0 + 176);
  if (*(void *)(v0 + 344))
  {
    sub_10000850C(0, (unint64_t *)&qword_100324670);
    if (swift_dynamicCast())
    {
      uint64_t v20 = *(void **)(v0 + 608);
      *(void *)(v0 + 432) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v0 + 440) = v21;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v7 + 16) && (unint64_t v22 = sub_100135A98(v0 + 56), (v23 & 1) != 0))
      {
        sub_100047DD4(*(void *)(v7 + 56) + 32 * v22, v0 + 352);
      }
      else
      {
        *(_OWORD *)(v0 + 352) = 0u;
        *(_OWORD *)(v0 + 368) = 0u;
      }
      sub_100098CF0(v0 + 56);
      if (*(void *)(v0 + 376))
      {
        if (swift_dynamicCast())
        {
          uint64_t v24 = *(void **)(v0 + 656);
          uint64_t v25 = *(void **)(v0 + 640);
          sub_10000850C(0, (unint64_t *)&unk_10032AC90);
          id v26 = [objc_allocWithZone((Class)NSNumber) initWithBool:static NSObject.== infix(_:_:)() & 1];
          NSString v27 = String._bridgeToObjectiveC()();
          [v24 setAccountProperty:v26 forKey:v27];
        }
      }
      else
      {

        sub_100058764(v0 + 352);
      }
    }
  }
  else
  {
    sub_100058764(v0 + 320);
  }
  *(void *)(v0 + 464) = 0xD00000000000001ELL;
  *(void *)(v0 + 472) = 0x800000010029E7C0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v7 + 16) && (unint64_t v28 = sub_100135A98(v58), (v29 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v7 + 56) + 32 * v28, v0 + 256);
  }
  else
  {
    *(_OWORD *)(v0 + 256) = 0u;
    *(_OWORD *)(v0 + 272) = 0u;
  }
  sub_100098CF0(v58);
  if (*(void *)(v0 + 280))
  {
    sub_10000850C(0, (unint64_t *)&qword_100324670);
    if (swift_dynamicCast())
    {
      uint64_t v30 = *(void **)(v0 + 656);
      id v31 = *(id *)(v0 + 600);
      NSString v32 = String._bridgeToObjectiveC()();
      [v30 setAccountProperty:v31 forKey:v32];
    }
  }
  else
  {
    sub_100058764(v0 + 256);
  }
  uint64_t v6 = (_OWORD *)(v0 + 288);
  *(void *)(v0 + 448) = 0xD000000000000024;
  *(void *)(v0 + 456) = 0x800000010029E7E0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v7 + 16) && (unint64_t v33 = sub_100135A98(v0 + 136), (v34 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v7 + 56) + 32 * v33, v0 + 288);
  }
  else
  {
    _OWORD *v6 = 0u;
    *(_OWORD *)(v0 + 304) = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100098CF0(v0 + 136);
  if (!*(void *)(v0 + 312)) {
    goto LABEL_41;
  }
  sub_10000850C(0, (unint64_t *)&qword_100324670);
  if (swift_dynamicCast())
  {
    uint64_t v35 = *(void **)(v0 + 656);
    id v36 = *(id *)(v0 + 592);
    NSString v37 = String._bridgeToObjectiveC()();
    [v35 setAccountProperty:v36 forKey:v37];
  }
LABEL_42:
  switch(*(void *)(v0 + 712))
  {
    case 0:
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      sub_100007288(v38, (uint64_t)qword_10033E778);
      long long v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        uint64_t v59 = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 136315138;
        *(void *)(v0 + 528) = sub_100135190(0x746C616548504445, 0xEE006B6365684368, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "%s - EDP health state is reported as good", v41, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v42 = *(void (**)(void))(v0 + 664);
      sub_100175C14();
      v42(0);
      goto LABEL_63;
    case 1:
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      sub_100007288(v43, (uint64_t)qword_10033E778);
      os_log_type_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        char v46 = (uint8_t *)swift_slowAlloc();
        uint64_t v59 = swift_slowAlloc();
        *(_DWORD *)char v46 = 136315138;
        *(void *)(v0 + 544) = sub_100135190(0x746C616548504445, 0xEE006B6365684368, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s - received a unused state, this will be removed in future.", v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      os_log_type_t v47 = *(void (**)(void *))(v0 + 664);
      type metadata accessor for AAError(0);
      *(void *)(v0 + 552) = -3;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10017726C((unint64_t *)&qword_100321140, type metadata accessor for AAError);
      _BridgedStoredNSError.init(_:userInfo:)();
      unint64_t v48 = *(void **)(v0 + 568);
      v47(v48);
      goto LABEL_62;
    case 2:
      os_log_type_t v49 = *(void (**)(void *))(v0 + 664);
      sub_1001754FC(0);
      type metadata accessor for AAError(0);
      *(void *)(v0 + 560) = -41;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10017726C((unint64_t *)&qword_100321140, type metadata accessor for AAError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v50 = *(void **)(v0 + 584);
      goto LABEL_56;
    case 4:
      os_log_type_t v49 = *(void (**)(void *))(v0 + 664);
      sub_100175C14();
      sub_1001754FC(1);
      type metadata accessor for AAError(0);
      *(void *)(v0 + 632) = -41;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10017726C((unint64_t *)&qword_100321140, type metadata accessor for AAError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v50 = *(void **)(v0 + 504);
LABEL_56:
      v49(v50);

      goto LABEL_63;
    case 8:
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      sub_100007288(v52, (uint64_t)qword_10033E778);
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        id v55 = (uint8_t *)swift_slowAlloc();
        uint64_t v59 = swift_slowAlloc();
        *(_DWORD *)id v55 = 136315138;
        *(void *)(v0 + 536) = sub_100135190(0x746C616548504445, 0xEE006B6365684368, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "%s - EDP health state is reported as error", v55, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v56 = *(void (**)(void *))(v0 + 664);
      type metadata accessor for AAError(0);
      *(void *)(v0 + 496) = 0;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10017726C((unint64_t *)&qword_100321140, type metadata accessor for AAError);
      _BridgedStoredNSError.init(_:userInfo:)();
      unint64_t v48 = *(void **)(v0 + 520);
      v56(v48);
LABEL_62:

LABEL_63:
      swift_task_dealloc();
      uint64_t v57 = *(uint64_t (**)(void))(v0 + 8);
      uint64_t result = v57();
      break;
    default:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      break;
  }
  return result;
}

uint64_t sub_10017527C()
{
  uint64_t v12 = v0;
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E778);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[91];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    v0[78] = sub_100135190(0x746C616548504445, 0xEE006B6365684368, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    v0[77] = v5;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v7 = String.init<A>(describing:)();
    v0[72] = sub_100135190(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s - Failed to obtain EDP health state: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  unint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001754FC(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100009F04(&qword_100329080);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E778);
    NSString v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v20 = v2;
      unint64_t v18 = (uint8_t *)v17;
      v22[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v18 = 136315138;
      uint64_t v21 = sub_100135190(0x746C616548504445, 0xEE006B6365684368, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - EDP needs full repair, posting CDP+EDP repair CFU.", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v2 = v20;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpFollowUpHandler, v4);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_10000F954(1);
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E778);
    char v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v20 = v2;
      uint64_t v13 = (uint8_t *)v12;
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v21 = sub_100135190(0x746C616548504445, 0xEE006B6365684368, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s - EDP only repair, posting just EDP repair CFU.", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v2 = v20;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpFollowUpHandler, v4);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_10000F954(0);
  }
  return sub_100008EA8((uint64_t)v22);
}

uint64_t sub_100175C14()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04(&qword_100329080);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007288(v7, (uint64_t)qword_10033E778);
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    v13[0] = v1;
    os_log_type_t v11 = (uint8_t *)v10;
    v14[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v11 = 136315138;
    v13[1] = sub_100135190(0x746C616548504445, 0xEE006B6365684368, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s - trying to tear down existing EDP repair only CFUs.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v13[0];
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpFollowUpHandler, v2);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_10000FA64();
  return sub_100008EA8((uint64_t)v14);
}

void sub_10017603C(int a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v44 = a4;
  os_log_type_t v45 = a3;
  int v48 = a1;
  uint64_t v5 = sub_100009F04(&qword_100329080);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v43 = &v38[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = &v38[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100320BD0 != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  uint64_t v47 = sub_100007288(v42, (uint64_t)qword_10033E820);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v46 = a2;
  if (v16)
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 67109120;
    LODWORD(v49[0]) = v48 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "isWalrusStatusMismatchDetectionEnabled: %{BOOL}d", v17, 8u);
    a2 = v46;
    swift_slowDealloc();
  }

  id v50 = 0;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v13, a2 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController, v9);
  Dependency.wrappedValue.getter();
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
  sub_100008EF8(v49, v49[3]);
  unsigned int v18 = sub_100055208();
  sub_100008EA8((uint64_t)v49);
  id v19 = v50;
  if (v50)
  {
    uint64_t v20 = v50;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v40 = v6;
      uint64_t v24 = (uint8_t *)v23;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v41 = v5;
      id v26 = (void *)v25;
      unsigned int v39 = v18;
      *(_DWORD *)uint64_t v24 = 138412290;
      v49[0] = v20;
      uint64_t v20 = v20;
      LOBYTE(v18) = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v26 = v19;

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error while fetching isWalrusStatusMismatched: %@", v24, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      uint64_t v5 = v41;
      swift_slowDealloc();
      uint64_t v6 = v40;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v21 = v20;
    }

    a2 = v46;
  }
  NSString v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    char v29 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v29 = 67109120;
    LODWORD(v49[0]) = v18 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "isWalrusStatusMismatched: %{BOOL}d", v29, 8u);
    swift_slowDealloc();
  }

  char v30 = v18 & v48;
  id v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  if ((v30 & 1) == 0 || v19)
  {
    if (v33)
    {
      id v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "No mismatch found in CombinedWalrusStatus. Tearing down adpStateHealing CFU, if posted already.", v36, 2u);
      swift_slowDealloc();
    }

    NSString v37 = v43;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v43, a2 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpFollowUpHandler, v5);
    Dependency.wrappedValue.getter();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v37, v5);
    sub_10000FAB8();
    sub_100008EA8((uint64_t)v49);
    v45(0);
  }
  else
  {
    if (v33)
    {
      char v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Found mismatch in CombinedWalrusStatus. Posting adpStateHealing CFU", v34, 2u);
      swift_slowDealloc();
    }

    uint64_t v35 = v43;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v43, a2 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpFollowUpHandler, v5);
    Dependency.wrappedValue.getter();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v35, v5);
    sub_10000F3EC(4, 0);
    sub_100008EA8((uint64_t)v49);
    v45(0);
  }
}

uint64_t sub_10017689C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007288(v13, (uint64_t)qword_10033E778);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v22 = a1;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v23 = a2;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v24 = sub_100135190(0x746C616548504445, 0xEE006B6365684368, &v25);
    a1 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - EDP HealthCheck started.", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v23;
    swift_slowDealloc();
  }

  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v12, 1, 1, v18);
  id v19 = (void *)swift_allocObject();
  void v19[2] = 0;
  v19[3] = 0;
  v19[4] = v4;
  void v19[5] = a1;
  v19[6] = a2;
  v19[7] = a3;
  v19[8] = v8;
  swift_retain();
  id v20 = a1;
  swift_retain();
  sub_100225A54((uint64_t)v12, (uint64_t)&unk_100329090, (uint64_t)v19);
  return swift_release();
}