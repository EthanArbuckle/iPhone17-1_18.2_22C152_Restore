void sub_10000375C(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  long long v6;
  BOOL v7;
  void *v8;
  void *v9;
  int v10;
  _OWORD v11[2];

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
    goto LABEL_7;
  }
  v4 = a1[6];
  v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  v6 = *(_OWORD *)(v3 + 9);
  v11[0] = *(_OWORD *)(v3 + 5);
  v11[1] = v6;
  v7 = sub_1000168CC(BKDisplayBrightnessEntitlement, (uint64_t)v11);
  v8 = +[BKDisplayBrightnessController sharedInstance];
  v9 = v8;
  if (v7) {
    [v8 brightnessLevel];
  }
  else {
    [v8 unentitledBrightnessLevel];
  }
  *(_DWORD *)(a2 + 36) = v10;

  *(_DWORD *)(a2 + 32) = 0;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  *(_DWORD *)(a2 + 4) = 40;
}

void sub_1000038AC(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    v3 = sub_10001C32C();
    *(_DWORD *)(a2 + 36) = sub_1000039E8((uint64_t)v3);

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

uint64_t sub_1000039E8(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10001AC78;
  v4[3] = &unk_1000F8EA0;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_100003D20(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = self;
  uint64_t v5 = [v4 serviceQuality];
  [v3 setServiceQuality:v5];

  v6 = [v4 interface];
  [v3 setInterface:v6];

  [v3 setInterfaceTarget:*(void *)(a1 + 32)];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10001EE0C;
  v16[3] = &unk_1000F5A78;
  v16[4] = *(void *)(a1 + 32);
  [v3 setInterruptionHandler:v16];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10001EED0;
  v15[3] = &unk_1000F5A78;
  v15[4] = *(void *)(a1 + 32);
  [v3 setInvalidationHandler:v15];
  uint64_t v7 = objc_alloc_init(_BKMousePointerServerClientRecord);
  uint64_t v8 = [*(id *)(a1 + 40) remoteProcess];
  -[_BKMousePointerServerClientRecord setPID:](v7, "setPID:", [v8 pid]);
  id v9 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v10 = BKPointerGlobalEventRoutingEntitlement;
  if ([v8 hasEntitlement:BKPointerGlobalEventRoutingEntitlement]) {
    [v9 addObject:v10];
  }
  uint64_t v11 = BKPointerRepositioningEntitlement;
  if ([v8 hasEntitlement:BKPointerRepositioningEntitlement]) {
    [v9 addObject:v11];
  }
  uint64_t v12 = BKPointerAutomationEntitlement;
  if ([v8 hasEntitlement:BKPointerAutomationEntitlement]) {
    [v9 addObject:v12];
  }
  uint64_t v13 = BKPointerPreferencesEntitlement;
  if ([v8 hasEntitlement:BKPointerPreferencesEntitlement]) {
    [v9 addObject:v13];
  }
  uint64_t v14 = BKPointerHitTestingEntitlement;
  if ([v8 hasEntitlement:BKPointerHitTestingEntitlement]) {
    [v9 addObject:v14];
  }
  [(_BKMousePointerServerClientRecord *)v7 setEntitlements:v9];
  [v3 setUserInfo:v7];
  [v3 setTargetQueue:*(void *)(*(void *)(a1 + 32) + 40)];
}

void sub_100004068(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _pidForClientPort:*(unsigned int *)(a1 + 40)];
  if (v2 != -1)
  {
    id v3 = v2;
    id v4 = objc_alloc_init((Class)BKSTouchDeliveryUpdate);
    [v4 setType:1];
    [v4 setTouchIdentifier:*(unsigned int *)(a1 + 44)];
    [v4 setPid:v3];
    [v4 setContextID:*(unsigned int *)(a1 + 48)];
    [v4 setIsDetached:*(unsigned __int8 *)(a1 + 52)];
    [*(id *)(a1 + 32) _queue_pendUpdate:v4];
  }
}

void sub_100004120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100004134(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _didRespondToTouchDelivery];
}

void sub_10000417C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100004190(void *a1)
{
  v1 = a1;
  if (v1[6])
  {
    id v2 = BKLogTouchEvents();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = v1[6];
      v5[0] = 67109120;
      v5[1] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "auth: exited slotID %X", (uint8_t *)v5, 8u);
    }

    v1[6] = 0;
    id v4 = (void *)*((void *)v1 + 33);
    *((void *)v1 + 33) = 0;
  }
}

void sub_100004258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004270(uint64_t a1, void *a2)
{
  id v17 = a2;
  [v17 rect];
  BOOL v3 = CGRectContainsPoint(v19, *(CGPoint *)(a1 + 56));
  id v4 = v17;
  if (v3)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(void *)(v5 + 24);
    if (!v6)
    {
      [v17 rect];
      uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 8);
      v7[6] = v8;
      v7[7] = v9;
      v7[8] = v10;
      v7[9] = v11;
      [v17 _exclusiveTouchNormalizedSubRectInReferenceSpace];
      uint64_t v12 = *(void **)(*(void *)(a1 + 48) + 8);
      v12[6] = v13;
      v12[7] = v14;
      v12[8] = v15;
      v12[9] = v16;
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v6 = *(void *)(v5 + 24);
      id v4 = v17;
    }
    *(void *)(v5 + 24) = v6 + 1;
  }
}

void sub_10000431C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double sub_1000043D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)a3 convertReferenceLocation:*(void *)(a3 + 8) toCAScreenLocationForDisplayUUID:*(double *)(a3 + 56) *(double *)(a3 + 64)];
  double v7 = v6;
  double v9 = v8;
  uint64_t v10 = sub_100005E04((uint64_t)BKDisplayController, *(unsigned __int8 *)(a3 + 89), a2 != 0, 0, *(void **)(a3 + 16));
  [*(id *)a3 contextIDAtCAScreenLocation:*(void *)(a3 + 8) displayUUID:v10 options:a2 securityAnalysis:a1 results:v7];

  return v7;
}

void sub_100004470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000044E4(uint64_t a1)
{
  v1 = *(void **)(*(void *)(a1 + 32) + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100006CA8;
  v2[3] = &unk_1000F8C08;
  id v3 = *(id *)(a1 + 40);
  [v1 enumerateKeysAndObjectsUsingBlock:v2];
}

void sub_10000457C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 48);
  if (*(_DWORD *)(v1 + 176) != v2)
  {
    *(_DWORD *)(v1 + 176) = v2;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10001A92C;
    v6[3] = &unk_1000F8EC8;
    v6[4] = v4;
    id v7 = *(id *)(a1 + 40);
    int v8 = *(_DWORD *)(a1 + 48);
    [v5 updateStatistics:v6];
  }
}

void sub_100004634(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 16);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1000290A8;
  v5[3] = &unk_1000F60B0;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_100004738(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000059FC;
  v2[3] = &unk_1000F8BE0;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 appendCustomFormatWithName:@"touchIDs" block:v2];
}

void sub_100004C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004C78(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v3 = 0;
  }
  uint64_t v1 = +[BKHIDEventProcessorRegistry sharedInstance];
  int v2 = [v1 eventProcessorOfClass:objc_opt_class()];

  [v2 cancelTouchesOnDisplay:v3];
}

void sub_100004D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100005034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000050A8(uint64_t a1)
{
  int v2 = +[BKHIDEventProcessorRegistry sharedInstance];
  id v3 = [v2 eventProcessorOfClass:objc_opt_class()];

  [v3 setEventDispatchMode:*(unsigned __int8 *)(a1 + 44) ambiguityRecommendation:*(unsigned __int8 *)(a1 + 45) lastTouchTimestamp:*(unsigned int *)(a1 + 40) forTouchStreamIdentifier:*(double *)(a1 + 32)];
}

void sub_1000051D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100005394(uint64_t a1, uint64_t a2, double a3, float a4, float a5, float a6)
{
  id v15 = [objc_alloc((Class)BSMachPortSendRight) initWithPort:a1];
  if ([v15 isUsable])
  {
    uint64_t v11 = +[BKAccelerometerInterface sharedInstance];
    *(float *)&double v12 = a4;
    *(float *)&double v13 = a5;
    *(float *)&double v14 = a6;
    [v11 bksAccelerometerClientRequestedAccelerometerEvents:v15 updateInterval:a2 xThreshold:a3 yThreshold:v12 zThreshold:v13 auditToken:v14];
  }
}

void sub_1000059E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000059FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  char v10 = 0;
  uint64_t v4 = [*(id *)(a1 + 32) touchIdentifiers];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001ABDC;
  v6[3] = &unk_1000F8BB8;
  int v8 = v9;
  id v5 = v3;
  id v7 = v5;
  [v4 enumerateRangesUsingBlock:v6];

  _Block_object_dispose(v9, 8);
}

void sub_100005AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BKTouchContact *sub_100005AF0(int64_t a1)
{
  int v2 = objc_alloc_init(BKTouchContact);
  id v3 = v2;
  if ((dword_100123108 + 1) > 1) {
    int v4 = dword_100123108 + 1;
  }
  else {
    int v4 = 1;
  }
  dword_100123108 = v4;
  v2->_pathIndex = a1;
  v2->_touchIdentifier = v4;
  v2->_transducerType = IOHIDEventGetIntegerValue();
  id v5 = BKLogTouchEvents();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 67109376;
    v7[1] = a1;
    __int16 v8 = 1024;
    int v9 = dword_100123108;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "new contact for pathIndex: %d touchID: %X", (uint8_t *)v7, 0xEu);
  }

  return v3;
}

void sub_100005C00(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100005C1C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  if (sub_1000168CC(v7, a4)
    || +[BKSecurityManager hasEntitlement:forAuditToken:](BKSecurityManager, "hasEntitlement:forAuditToken:", v8, a4)&& (+[BKSystemShellSentinel sharedInstance](BKSystemShellSentinel, "sharedInstance"), int v9 = objc_claimAutoreleasedReturnValue(), v10 = [v9 auditTokenRepresentsSystemApp:a4], v9, (v10 & 1) != 0))
  {
    uint64_t v11 = 1;
  }
  else
  {
    double v12 = BKLogCommon();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v14 = 138544130;
      id v15 = v8;
      __int16 v16 = 2114;
      id v17 = v7;
      __int16 v18 = 2082;
      uint64_t v19 = a1;
      __int16 v20 = 1024;
      int v21 = BSPIDForAuditToken();
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Only system apps with entitlement %{public}@ or processes with entitlement %{public}@ may use %{public}s; ignori"
        "ng request from pid %d",
        (uint8_t *)&v14,
        0x26u);
    }

    uint64_t v11 = 0;
  }

  return v11;
}

id sub_100005E04(uint64_t a1, int a2, int a3, void *a4, void *a5)
{
  id v8 = a4;
  id v9 = a5;
  self;
  id v10 = [v8 hitTestInformationMask];
  id v11 = [v9 count];
  uint64_t v12 = (uint64_t)v11;
  if ((a2 & 1) != 0 || v10 || v11 || a3)
  {
    id v14 = objc_alloc_init((Class)NSMutableDictionary);
    double v13 = v14;
    if (v10)
    {
      if ((v10 & 2) != 0) {
        [v14 setObject:&__kCFBooleanTrue forKeyedSubscript:kCAWindowServerHitTestCumulativeOpacity];
      }
      if ((v10 & 0x31) != 0) {
        [v13 setObject:&__kCFBooleanTrue forKeyedSubscript:kCAWindowServerHitTestCumulativeTransform];
      }
      if ((v10 & 4) != 0) {
        [v13 setObject:&__kCFBooleanTrue forKeyedSubscript:kCAWindowServerHitTestIsInsecureFiltered];
      }
      if ((v10 & 8) != 0)
      {
        [v13 setObject:&__kCFBooleanTrue forKeyedSubscript:kCAWindowServerHitTestWantsLayerBackgroundStatistics];
        unint64_t v15 = (unint64_t)[v8 backgroundStatisticsRegion];
        unint64_t v16 = HIWORD(v15);
        id v17 = +[NSNumber numberWithUnsignedShort:(unsigned __int16)v15];
        [v13 setObject:v17 forKeyedSubscript:kCAWindowServerHitTestLayerBackgroundTopEdgeInset];

        __int16 v18 = +[NSNumber numberWithUnsignedShort:WORD1(v15)];
        [v13 setObject:v18 forKeyedSubscript:kCAWindowServerHitTestLayerBackgroundLeftEdgeInset];

        uint64_t v19 = +[NSNumber numberWithUnsignedShort:WORD2(v15)];
        [v13 setObject:v19 forKeyedSubscript:kCAWindowServerHitTestLayerBackgroundBottomEdgeInset];

        __int16 v20 = +[NSNumber numberWithUnsignedShort:v16];
        [v13 setObject:v20 forKeyedSubscript:kCAWindowServerHitTestLayerBackgroundRightEdgeInset];

        [v8 backgroundStatisticsForeground];
        int v21 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
        [v13 setObject:v21 forKeyedSubscript:@"hitTestBackgroundForeground"];

        [v8 backgroundStatisticsPassingContrast];
        v22 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
        [v13 setObject:v22 forKeyedSubscript:@"hitTestBackgroundPassingContrast"];

        [v8 backgroundStatisticsFailingContrast];
        v23 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
        [v13 setObject:v23 forKeyedSubscript:@"hitTestBackgroundFailingContrast"];
      }
    }
    if (a3) {
      [v13 setObject:&__kCFBooleanTrue forKeyedSubscript:kCAWindowServerHitTestWantsContextSecurityAnalysis];
    }
    if (a2) {
      [v13 setObject:&__kCFBooleanTrue forKeyedSubscript:kCAWindowServerHitTestIgnoreBlankingContext];
    }
    if (v12 >= 1) {
      [v13 setObject:v9 forKeyedSubscript:kCAWindowServerHitTestOptionExcludedContextIds];
    }
  }
  else
  {
    double v13 = 0;
  }

  return v13;
}

void sub_100006310(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  id v10 = *(void **)(a1 + 40);
  if (v10) {
    id v10 = (void *)v10[2];
  }
  double v13 = v10;
  sub_100013978((double *)a1, a3, v13);

  if (a4) {
    uint64_t v11 = *(unsigned int *)(a4 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  id v14 = +[BKSHIDEventDeferringToken tokenForIdentifierOfCAContext:v11];
  [a3 setToken:];

  [a3 setInitialTouchTimestamp:a5];
  [a3 setActiveModifiers:*(void *)(a1 + 104)];
  BKSHIDEventSetAttributes();
  sub_100013920(*(void *)(a1 + 184));
  id v15 = (id)objc_claimAutoreleasedReturnValue();
  sub_1000128A8(a1, (uint64_t)v15);
  if (a4) {
    uint64_t v12 = *(unsigned int *)(a4 + 12);
  }
  else {
    uint64_t v12 = 0;
  }
  [*(id *)(a1 + 48) sendEvent:a2 toClientTaskPort:v12];
}

void sub_10000642C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_10000656C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 40) + 16))();
  if (v4)
  {
    id v5 = BKLogUISensor();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138543618;
      id v8 = v4;
      __int16 v9 = 2114;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "instantiated %{public}@ for service:%{public}@", (uint8_t *)&v7, 0x16u);
    }

    [v3 addDisappearanceObserver:*(void *)(a1 + 32) queue:&_dispatch_main_q];
  }

  return v4;
}

void sub_100006824(uint64_t a1, void *a2)
{
  if (a1)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v3 = (id *)(a1 + 288);
    id v4 = *(id *)(a1 + 288);
    id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v11;
      do
      {
        id v8 = 0;
        do
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * (void)v8);
          if (v9) {
            [*(id *)(v9 + 24) removeObject:*v3];
          }
          id v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v6);
    }

    objc_storeStrong(v3, a2);
  }
}

void sub_100006A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BKHIDUISensorConfiguringService *__cdecl sub_100006AD0(id a1, BKIOHIDService *a2)
{
  int v2 = a2;
  id v3 = [(BKIOHIDService *)v2 propertyForKey:@"NeedsHostState"];
  uint64_t v4 = objc_opt_class();
  id v5 = v3;
  if (v4)
  {
    if (objc_opt_isKindOfClass()) {
      id v6 = v5;
    }
    else {
      id v6 = 0;
    }
  }
  else
  {
    id v6 = 0;
  }
  id v7 = v6;

  unsigned int v8 = [v7 BOOLValue];
  uint64_t v9 = off_1000F5128;
  if (!v8) {
    uint64_t v9 = &off_1000F5138;
  }
  id v10 = [objc_alloc(*v9) initWithIOHIDService:v2];

  return (BKHIDUISensorConfiguringService *)v10;
}

void sub_100006CA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [v5 processDescription];
  if (v6) {
    uint64_t v8 = v6[2];
  }
  else {
    uint64_t v8 = 0;
  }

  uint64_t v9 = [v7 stringByAppendingFormat:@" contextID %X", v8];

  id v10 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100004738;
  v12[3] = &unk_1000F8E50;
  id v13 = v10;
  id v14 = v5;
  id v11 = v5;
  [v13 appendBodySectionWithName:v9 openDelimiter:@"{" closeDelimiter:@"}" block:v12];
}

void sub_10000703C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *sub_100007270(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    double v9 = 0.0;
    double v10 = 0.0;
    double v8 = 0.0;
    __int16 v7 = 0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10001143C;
    v11[3] = &unk_1000F6620;
    v11[4] = &v10;
    v11[5] = &v9;
    v11[6] = &v8;
    v11[7] = (char *)&v7 + 1;
    v11[8] = 0;
    v11[9] = &v7;
    sub_1000112C0(v11);
    float v3 = v10;
    float v4 = v9;
    *(float *)(a2 + 36) = v3;
    *(float *)(a2 + 40) = v4;
    float v5 = v8;
    *(float *)(a2 + 44) = v5;
    BSDegreesToRadians();
    *(float *)&double v6 = v6;
    *(_DWORD *)(a2 + 48) = LODWORD(v6);
    *(unsigned char *)(a2 + 52) = v7;
    result = (_DWORD *)sub_1000073A4();
    *(unsigned char *)(a2 + 56) = (_BYTE)result;
    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 60;
  }
  return result;
}

BOOL sub_1000073A4()
{
  uint64_t v3 = 0;
  float v4 = &v3;
  uint64_t v5 = 0x3032000000;
  double v6 = sub_100038A64;
  __int16 v7 = sub_100038A74;
  id v8 = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100013C48;
  v2[3] = &unk_1000F6600;
  void v2[4] = &v3;
  sub_1000112C0(v2);
  BOOL v0 = v4[5] == 0;
  _Block_object_dispose(&v3, 8);

  return v0;
}

void sub_10000747C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000076B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1000079C4(id *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    double v6 = BKLogTouchEvents();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if (a2) {
        int v11 = *(_DWORD *)(a2 + 8);
      }
      else {
        int v11 = 0;
      }
      *(_DWORD *)buf = 67109120;
      int v13 = v11;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "SGP: Sending no longer possible to latent client: %x", buf, 8u);
    }

    [a1[18] removeObject:a2];
    mach_absolute_time();
    __int16 v7 = a1;
    DigitizerEvent = (const void *)IOHIDEventCreateDigitizerEvent();
    id v9 = v7[1];
    [v9 senderID];
    IOHIDEventSetSenderID();

    IOHIDEventSetIntegerValue();
    IOHIDEventSetIntegerValue();

    id v10 = objc_alloc_init((Class)BKSHIDEventDigitizerAttributes);
    [v10 setSystemGestureStateChange:1];
    [v10 setTouchStreamIdentifier:a3];
    sub_100006310((uint64_t)v7, (uint64_t)DigitizerEvent, v10, a2, *((double *)v7 + 12));
    CFRelease(DigitizerEvent);
  }
}

void sub_100007B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100007E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  _Unwind_Resume(a1);
}

void sub_10000805C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000082B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100008500(uint64_t a1, void *a2, unsigned char *a3)
{
  id v6 = a2;
  __int16 v7 = *(void **)(a1 + 32);
  id v9 = v6;
  id v8 = [v6 sendRight];
  LODWORD(v7) = [v7 matchesPortOfRight:v8];

  if (v7)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }
}

void sub_100008818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100008CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000095C8(uint64_t a1, id *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2) {
    a2 = (id *)a2[2];
  }
  uint64_t v3 = a2;
  (*(void (**)(uint64_t))(v2 + 16))(v2);
}

void sub_100009648(uint64_t a1, _DWORD *a2, uint64_t a3, void *a4)
{
  if (a2) {
    uint64_t v7 = a2[2];
  }
  else {
    uint64_t v7 = 0;
  }
  if ([*(id *)(*(void *)(a1 + 32) + 56) shouldCancelTouchesDeliveredToContextId:v7 withInitialTouchTimestamp:*(double *)(*(void *)(a1 + 32) + 96)])
  {
    id v8 = [*(id *)(*(void *)(a1 + 32) + 128) objectForKey:v7];
    if ((uint64_t)[v8 count] >= 1)
    {
      id v9 = BKLogTouchDeliveryPolicy();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v17 = 67109120;
        int v18 = v7;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "TDPS said this context should cancel: %X", (uint8_t *)&v17, 8u);
      }

      int v11 = *(id **)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t IntegerValue = IOHIDEventGetIntegerValue();
      sub_10008BA24(v11, a2, v10, IntegerValue);
    }
  }
  else if (a2)
  {
    int v13 = *(unsigned __int8 *)(a1 + 56);
    sub_10001159C(*(void **)(a1 + 32), *(void *)(a1 + 48), (uint64_t)a2, *(void *)(a1 + 40), v13 == 1, a4, *(double *)(*(void *)(a1 + 32) + 96));
    if (v13 == 1 || *(unsigned char *)(a1 + 57))
    {
      if (v13 == 1)
      {
        uint64_t v16 = *(void *)(a1 + 32);
        sub_1000098E0(v16, (uint64_t)a2);
      }
    }
    else if ([*(id *)(*(void *)(a1 + 32) + 144) containsObject:a2])
    {
      id v14 = *(id **)(a1 + 32);
      sub_1000079C4(v14, (uint64_t)a2, 0);
    }
  }
  else
  {
    id v15 = BKLogTouchEvents();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v17 = 67109120;
      int v18 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Missing destination for hit tested context: %X -- ignoring event", (uint8_t *)&v17, 8u);
    }
  }
}

void sub_1000098C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000098E0(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  if (a2) {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v5 = [*(id *)(a1 + 128) objectForKey:v4];
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v17 count:16];
  if (!v6)
  {

LABEL_16:
    uint64_t v10 = BKLogTouchEvents();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v16 = a2;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "adding latent: %{public}@", buf, 0xCu);
    }

    [*(id *)(a1 + 144) addObject:a2];
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)v12;
  do
  {
    for (i = 0; i != v6; i = (char *)i + 1)
    {
      if (*(void *)v12 != v8) {
        objc_enumerationMutation(v5);
      }
      if (*(void *)(*(void *)(*((void *)&v11 + 1) + 8 * i) + 32) > v7) {
        uint64_t v7 = *(void *)(*(void *)(*((void *)&v11 + 1) + 8 * i) + 32);
      }
    }
    id v6 = [v5 countByEnumeratingWithState:&v11 objects:v17 count:16];
  }
  while (v6);

  if (v7 <= 1) {
    goto LABEL_16;
  }
}

void sub_100009A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100009A90(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (a2 == 2 && (dispatch_mach_mig_demux() & 1) == 0)
  {
    msg = (mach_msg_header_t *)dispatch_mach_msg_get_msg();
    mach_msg_destroy(msg);
  }
}

id sub_100009B04(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000A06FC;
  v4[3] = &unk_1000F9330;
  int v5 = *(_DWORD *)(a1 + 40);
  v4[4] = *(void *)(a1 + 32);
  uint64_t v2 = [a2 matchSharingTouchesPolicy:&stru_1000F9310 orCancelTouchesPolicy:v4 orCombinedPolicy:&stru_1000F9350];

  return v2;
}

id sub_100009BA4(id a1, NSArray *a2)
{
  return sub_100009C6C(a2);
}

id sub_100009BAC(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A0738;
  v8[3] = &unk_1000F9248;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v9 = v4;
  uint64_t v10 = v5;
  id v6 = [a2 matchSharingTouchesPolicy:v8 orCancelTouchesPolicy:&stru_1000F9288 orCombinedPolicy:&stru_1000F92A8];

  return v6;
}

id sub_100009C6C(void *a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v1 = a1;
  uint64_t v2 = (uint64_t)[v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v8 != v3) {
          objc_enumerationMutation(v1);
        }
        if (objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * i), "BOOLValue", (void)v7))
        {
          uint64_t v2 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v2 = (uint64_t)[v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  uint64_t v5 = +[NSNumber numberWithBool:v2];

  return v5;
}

id sub_100009D94(id a1, NSArray *a2)
{
  return sub_100009C6C(a2);
}

id sub_100009D9C(id a1, BKEventStatistic *a2)
{
  uint64_t v2 = a2;
  if ([(BKEventStatistic *)v2 needsLogging]) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_100009DF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = WeakRetained[7];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_10001095C;
    v7[3] = &unk_1000F8E50;
    id v8 = v3;
    long long v9 = v5;
    dispatch_async(v6, v7);
  }
}

id sub_100009EBC(uint64_t a1)
{
  uint64_t v2 = +[CAWindowServer serverIfRunning];
  id v3 = [v2 taskNamePortOfContextId:a1];

  return v3;
}

void sub_100009F04(uint64_t a1, void *a2, unsigned int *a3, uint64_t a4)
{
  int v18 = a2;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[2];
  id v9 = objc_alloc_init((Class)NSMutableArray);
  id v10 = sub_10000A1C8(a1, v7, v8, v9);
  id v11 = [*(id *)a4 hostContextIDForEmbeddedContextID:v7 displayUUID:*(void *)(a4 + 8)];
  *(void *)&long long v12 = 67109376;
  long long v17 = v12;
  while (v11)
  {
    id v13 = [*(id *)a4 taskPortForContextID:v11 displayUUID:*(void *)(a4 + 8)];
    if ((v13 - 1) > 0xFFFFFFFD)
    {
      id v15 = BKLogTouchEvents();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v17;
        int v20 = (int)v13;
        __int16 v21 = 1024;
        int v22 = (int)v11;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "invalid port (%X) for contextID:%X", buf, 0xEu);
      }
    }
    else
    {
      if ((unint64_t)[v9 count] >= 0x40)
      {
        uint64_t v16 = BKLogTouchEvents();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109120;
          int v20 = (int)v11;
          _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "reached maximum supported embedded context depth at contextID:%X", buf, 8u);
        }

        break;
      }
      id v14 = sub_10000A1C8(a1, (uint64_t)v11, (uint64_t)v13, v9);
    }
    id v11 = [*(id *)a4 hostContextIDForEmbeddedContextID:v11 displayUUID:*(void *)(a4 + 8) displayUUID:v17];
  }
  sub_100006824((uint64_t)v18, v9);
  [*(id *)a4 applySceneHostSettingsToHostingChain:v18[36]];
  v18[7] = [*(id *)a4 hitTestCategoryForContextID:*a3];
}

void sub_10000A13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

id sub_10000A1C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = sub_10000A270(*(void *)(a1 + 16), a2, a3);
  id v9 = (void *)v8;
  if (v8) {
    [*(id *)(v8 + 24) addObject:v7];
  }
  [v7 addObject:v9];

  return v9;
}

void sub_10000A254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10000A270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v6 = a2;
    id v7 = [*(id *)(a1 + 120) objectForKey:a2];
    if (!v7)
    {
      id v7 = sub_10000A328((uint64_t)BKTouchDestination, a2, a3);
      [*(id *)(a1 + 120) setObject:v7 forKey:v6];
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_10000A318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10000A328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  self;
  uint64_t v5 = sub_10000A378([BKTouchDestination alloc], a2, a3);

  return v5;
}

void *sub_10000A378(void *a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  v8.receiver = a1;
  v8.super_class = (Class)BKTouchDestination;
  id v3 = [super initWithContextID:a2 clientPort:a3];
  id v4 = v3;
  if (v3)
  {
    v3[4] = 1;
    id v5 = [objc_alloc((Class)NSHashTable) initWithOptions:517 capacity:8];
    uint64_t v6 = (void *)v4[3];
    v4[3] = v5;
  }
  return v4;
}

void sub_10000A6A0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _queue_digitizerStateForService:*(void *)(a1 + 40)];
  if (!v2)
  {
    id v3 = BKLogTouchEvents();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v5 = 138543362;
      uint64_t v6 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "*** unknown digitizer %{public}@ -- initializing now", (uint8_t *)&v5, 0xCu);
    }

    uint64_t v2 = [*(id *)(a1 + 32) _queue_addDigitizerStateForService:*(void *)(a1 + 40)];
  }
  sub_10000EB30((uint64_t)v2, *(__IOHIDEvent **)(a1 + 48));
}

void sub_10000A788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000A864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000AA40(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0) {
    goto LABEL_2;
  }
  int v3 = -304;
  if (*(_DWORD *)(a1 + 24) != 1) {
    goto LABEL_3;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 4);
  if (v5 < 0x40 || v5 > 0x440) {
    goto LABEL_3;
  }
  if (*(unsigned char *)(a1 + 39) != 1) {
    goto LABEL_17;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 60);
  int v3 = -304;
  if (v6 > 0x400 || (int)v5 - 64 < v6) {
    goto LABEL_3;
  }
  if (v5 != ((v6 + 3) & 0xFFFFFFFC) + 64) {
    goto LABEL_2;
  }
  int v7 = *(_DWORD *)(a1 + 40);
  if (v7 != *(_DWORD *)(a1 + 52))
  {
LABEL_17:
    int v3 = -300;
    goto LABEL_3;
  }
  if (!memchr((void *)(a1 + 64), 0, v5 - 64))
  {
LABEL_2:
    int v3 = -304;
    goto LABEL_3;
  }
  uint64_t v8 = ((v5 + 3) & 0x1FFFFFFFCLL) + a1;
  if (!*(_DWORD *)v8 && *(_DWORD *)(v8 + 4) > 0x1Fu)
  {
    uint64_t v9 = *(void *)(a1 + 28);
    long long v10 = *(_OWORD *)(v8 + 36);
    v11[0] = *(_OWORD *)(v8 + 20);
    v11[1] = v10;
    *(_DWORD *)(a2 + 32) = sub_10000AB90(v9, v7, a1 + 64, (uint64_t)v11);
    mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
    *(void *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    return;
  }
  int v3 = -309;
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

uint64_t sub_10000AB90(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  unsigned int v6 = sub_10000AC34;
  int v7 = &unk_1000F68A0;
  int v10 = a2;
  uint64_t v8 = a3;
  uint64_t v9 = a1;
  if (!sub_1000168CC(BKBackBoardClientEntitlement, a4)) {
    return 5;
  }
  v6((uint64_t)v5);
  return 0;
}

void sub_10000AC34(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    uint64_t v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (*(_DWORD *)(a1 + 48) && *(void *)(a1 + 40))
  {
    id v3 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 40) length:*(unsigned int *)(a1 + 48) freeWhenDone:0];
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
    unsigned int v6 = +[NSObject bs_secureObjectFromData:v3 ofClasses:v5];

    if (v6)
    {
      int v7 = +[BKHIDEventProcessorRegistry sharedInstance];
      uint64_t v8 = [v7 eventProcessorOfClass:objc_opt_class()];

      [v8 setHitTestRegions:v6 forDisplay:v2];
      uint64_t v9 = +[BKHIDEventProcessorRegistry sharedInstance];
      int v10 = [v9 eventProcessorOfClass:objc_opt_class()];
      id v11 = [v10 mousePointerController];
      [v11 hitTestRegionsDidChange:v6 forDisplayUUID:v2];
    }
    else
    {
      uint64_t v8 = BKLogCommon();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error unarchiving hittestRegions", buf, 2u);
      }
    }
  }
}

char *sub_10000AFC8(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 40)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*((_DWORD *)result + 10) || *((_DWORD *)result + 11) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  uint64_t v4 = *((void *)result + 4);
  long long v5 = *(_OWORD *)(result + 76);
  v7[0] = *(_OWORD *)(result + 60);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  uint64_t v9 = sub_10000B0D8;
  int v10 = &unk_1000F7D08;
  uint64_t v11 = v4;
  result = (char *)sub_10000B130((uint64_t)"_BKHIDXXSetMinimumBrightnessLevelWithFadeDuration", BKBackBoardClientEntitlement, (uint64_t)v7);
  if (result)
  {
    result = (char *)((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

void sub_10000B0D8(uint64_t a1)
{
  id v4 = +[BKDisplayBrightnessController sharedInstance];
  LODWORD(v2) = *(_DWORD *)(a1 + 32);
  LODWORD(v3) = *(_DWORD *)(a1 + 36);
  [v4 setMinimumBrightnessLevel:v2 fadeDuration:v3];
}

id sub_10000B130(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = sub_100016874(v5, a3);
  if ((v6 & 1) == 0)
  {
    int v7 = BKLogCommon();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 138543874;
      id v10 = v5;
      __int16 v11 = 2082;
      uint64_t v12 = a1;
      __int16 v13 = 1024;
      int v14 = BSPIDForAuditToken();
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Only system apps with entitlement %{public}@ may use %{public}s; ignoring request from pid %d",
        (uint8_t *)&v9,
        0x1Cu);
    }
  }
  return v6;
}

void sub_10000B3A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    int v7 = BKLogBacklight();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = +[BSDescriptionStream descriptionForRootObject:v5];
      int v9 = 138543618;
      id v10 = v6;
      __int16 v11 = 2114;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set BrightnessSystem property:%{public}@ to:%{public}@", (uint8_t *)&v9, 0x16u);
    }
    [*(id *)(a1 + 96) setProperty:v5 forKey:v6];
  }
}

void sub_10000B500(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) primaryUsagePage];
  id v3 = [*(id *)(*(void *)(a1 + 32) + 8) primaryUsage];
  id v4 = *(void **)(a1 + 40);
  if (v2 == 13)
  {
    uint64_t v5 = (v3 - 1);
    if v5 < 0x21 && ((0x180001FFFuLL >> (v3 - 1)))
    {
      uint64_t v6 = (uint64_t)*(&off_1000F8650 + v5);
    }
    else
    {
      uint64_t v6 = +[NSString stringWithFormat:@"(unknown digitizer usage: %X)", v3];
    }
    id v18 = (id)v6;
    [v4 appendString:v6 withName:0];
  }
  else
  {
    id v18 = +[NSString stringWithFormat:@"(0x%X / 0x%X)", v2, v3];
    [v4 appendString:withName:];
  }

  id v19 = [*(id *)(*(void *)(a1 + 32) + 8) senderDescriptor];
  id v7 = [v19 hardwareType];

  uint64_t v8 = *(void **)(a1 + 40);
  NSStringFromBKSHIDEventHardwareType();
  id v20 = (id)objc_claimAutoreleasedReturnValue();
  [v8 appendString:withName:];

  uint64_t v9 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v9 + 205))
  {
    [*(id *)(a1 + 40) appendString:@"preciseLocations" withName:0];
    uint64_t v9 = *(void *)(a1 + 32);
  }
  if (v7 == (id)2)
  {
    id v10 = [[*(id *)(a1 + 40) appendBool:[*(id *)(v9 + 8) isAuthenticated] withName:@"authenticated"];
    uint64_t v9 = *(void *)(a1 + 32);
  }
  __int16 v11 = *(void **)(a1 + 40);
  id v21 = [*(id *)(v9 + 8) displayUUID];
  [v11 appendString:withName:skipIfEmpty:];

  id v12 = [[*(id *)(a1 + 40) appendUInt64:objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "senderID") withName:@"senderID" format:1];
  id v13 = [*(id *)(a1 + 40) appendObject:*(void *)(*(void *)(a1 + 32) + 112) withName:@"contacts"];
  int v14 = *(void **)(a1 + 40);
  id v22 = [*(id *)(*(void *)(a1 + 32) + 120) allValues];
  id v15 = [v14 appendObject:v14 withName:v14];

  id v16 = [*(id *)(a1 + 40) appendObject:*(void *)(*(void *)(a1 + 32) + 144) withName:@"latentSystemGestureDestinations"];
  id v23 = [*(id *)(*(void *)(a1 + 32) + 32) reasons];
  if ([v23 count]) {
    id v17 = [*(id *)(a1 + 40) appendObject:v23 withName:@"suppressTouchesAssertion"];
  }
}

void sub_10000B7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10000BA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000BD04(_Unwind_Exception *exception_object)
{
}

void sub_10000BFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000C700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10000C820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v6 = (id *)(a1 + 80);
    id v7 = (BKTouchAnnotationController *)*(id *)(a1 + 80);
    uint64_t v8 = v7;
    if ((a2 & 1) != 0 || a3)
    {
      if (!v7)
      {
        id v12 = sub_10005FB14();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          id v13 = [*(id *)(a1 + 8) displayUUID];
          *(_DWORD *)buf = 138543362;
          v27 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "annotations enabled for %{public}@", buf, 0xCu);
        }
        int v14 = [BKTouchAnnotationController alloc];
        id v15 = [*(id *)(a1 + 8) displayUUID];
        uint64_t v8 = [(BKTouchAnnotationController *)v14 initWithDisplayUUID:v15];

        [*(id *)(a1 + 72) addObject:v8];
        objc_storeStrong(v6, v8);
      }
      [(BKTouchAnnotationController *)v8 setShouldVisualizeTouches:a2];
      unsigned __int8 v16 = [(BKTouchAnnotationController *)v8 shouldVisualizeHitTestRegions];
      [(BKTouchAnnotationController *)v8 setShouldVisualizeHitTestRegions:a3];
      if ((v16 & 1) == 0)
      {
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        id v17 = *(id *)(a1 + 72);
        id v18 = [v17 countByEnumeratingWithState:&v21 objects:v25 count:16];
        if (v18)
        {
          uint64_t v19 = *(void *)v22;
          do
          {
            id v20 = 0;
            do
            {
              if (*(void *)v22 != v19) {
                objc_enumerationMutation(v17);
              }
              [*(id *)(*((void *)&v21 + 1) + 8 * (void)v20) hitTestRegionsDidChange:*(void *)(a1 + 176), (void)v21];
              id v20 = (char *)v20 + 1;
            }
            while (v18 != v20);
            id v18 = [v17 countByEnumeratingWithState:&v21 objects:v25 count:16];
          }
          while (v18);
        }
      }
    }
    else if (v7)
    {
      uint64_t v9 = sub_10005FB14();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = [*(id *)(a1 + 8) displayUUID];
        *(_DWORD *)buf = 138543362;
        v27 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "annotations disabled for %{public}@", buf, 0xCu);
      }
      __int16 v11 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = 0;

      [*(id *)(a1 + 72) removeObject:v8];
      [(BKTouchAnnotationController *)v8 setShouldVisualizeTouches:0];
      [(BKTouchAnnotationController *)v8 setShouldVisualizeHitTestRegions:0];
    }
  }
}

void sub_10000CAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000CB28(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  id v4 = [v3 length];
  uint64_t v5 = (void *)BKSDisplayUUIDMainKey;
  if (v4) {
    uint64_t v5 = v3;
  }
  id v6 = v5;

  id v7 = [v2 _queue_displayInfoForDisplay:v6 createIfNeeded:1];

  if (v7) {
    objc_setProperty_nonatomic_copy(v7, v8, *(id *)(a1 + 48), 32);
  }
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _OWORD v11[2] = sub_10000CE1C;
  v11[3] = &unk_1000F7210;
  v11[4] = *(void *)(a1 + 48);
  [v9 _queue_enumerateDigitizersForDisplay:v10 usingBlock:v11];
}

void sub_10000CC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000CDA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_10000CDE8(id *a1)
{
  if (a1)
  {
    a1 = [a1[6] allValues];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_10000CE1C(uint64_t a1, uint64_t a2)
{
}

void sub_10000CE2C(id a1, BKDirectTouchState *a2)
{
}

void sub_10000CE3C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v2 = (id *)a2;
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v5 = *(unsigned __int8 *)(a1 + 64);
    int v6 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    if (v6 == 2)
    {
      double v7 = *(double *)(a1 + 56);
      if (*(double *)(a2 + 160) >= v7) {
        double v7 = *(double *)(a2 + 160);
      }
      *(double *)(a2 + 160) = v7;
    }
    if (v5)
    {
      if (v4 == 3)
      {
        uint64_t v8 = BKLogTouchEvents();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "cancel clients due to system gesture stealing the touches", buf, 2u);
        }

        sub_10000D21C(v2, 2u, v3);
      }
      else if (v3)
      {
        if (v6 == 2 && *(unsigned char *)(v3 + 9) != 0)
        {
          uint64_t v10 = *(unsigned __int8 *)(v3 + 8);
          __int16 v11 = BKLogTouchEvents();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            v26 = [v2[1] displayUUID];
            *(_DWORD *)buf = 134218498;
            v44 = v2;
            __int16 v45 = 2114;
            v46 = v26;
            __int16 v47 = 2114;
            uint64_t v48 = v3;
            _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "System gestures no longer possible (<%p> - %{public}@) causedByTouchStream: %{public}@", buf, 0x20u);
          }
          id v12 = [v2[18] mutableCopy];
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          id obj = v2[14];
          id v13 = [obj countByEnumeratingWithState:&v37 objects:buf count:16];
          if (v13)
          {
            uint64_t v14 = *(void *)v38;
            do
            {
              for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v38 != v14) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v16 = *(void *)(*((void *)&v37 + 1) + 8 * i);
                if (*(void *)(v16 + 32) == 2)
                {
                  uint64_t v17 = v10;
                  id v18 = v2;
                  long long v35 = 0u;
                  long long v36 = 0u;
                  long long v33 = 0u;
                  long long v34 = 0u;
                  id v19 = *(id *)(v16 + 280);
                  id v20 = [v19 countByEnumeratingWithState:&v33 objects:v42 count:16];
                  if (v20)
                  {
                    uint64_t v21 = *(void *)v34;
                    do
                    {
                      for (j = 0; j != v20; j = (char *)j + 1)
                      {
                        if (*(void *)v34 != v21) {
                          objc_enumerationMutation(v19);
                        }
                        [v12 addObject:*(void *)(*((void *)&v33 + 1) + 8 * (void)j)];
                      }
                      id v20 = [v19 countByEnumeratingWithState:&v33 objects:v42 count:16];
                    }
                    while (v20);
                  }

                  id v2 = v18;
                  uint64_t v10 = v17;
                }
              }
              id v13 = [obj countByEnumeratingWithState:&v37 objects:buf count:16];
            }
            while (v13);
          }

          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          id obja = v12;
          id v23 = [obja countByEnumeratingWithState:&v29 objects:v41 count:16];
          if (v23)
          {
            uint64_t v24 = *(void *)v30;
            do
            {
              for (k = 0; k != v23; k = (char *)k + 1)
              {
                if (*(void *)v30 != v24) {
                  objc_enumerationMutation(obja);
                }
                sub_1000079C4(v2, *(void *)(*((void *)&v29 + 1) + 8 * (void)k), v10);
              }
              id v23 = [obja countByEnumeratingWithState:&v29 objects:v41 count:16];
            }
            while (v23);
          }
        }
      }
    }
  }
}

void sub_10000D1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_10000D21C(id result, unsigned int a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    int v6 = BKLogTouchEvents();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id v8 = [*(id *)(v5 + 8) senderID];
      uint64_t v9 = [*(id *)(v5 + 8) displayUUID];
      int v10 = 134218498;
      id v11 = v8;
      __int16 v12 = 2114;
      id v13 = v9;
      __int16 v14 = 2114;
      uint64_t v15 = a3;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Cancel all touches %llX - display:%{public}@ causedByTouchStream:%{public}@", (uint8_t *)&v10, 0x20u);
    }
    double v7 = sub_10000D36C(*(id **)(v5 + 112));
    sub_10000D6DC(v5, v7, a2, a3);

    return sub_10000D39C(v5, a3);
  }
  return result;
}

void sub_10000D348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_10000D36C(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[1];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_10000D39C(uint64_t a1, uint64_t a2)
{
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id obj = *(id *)(a1 + 144);
  id v4 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v19;
    do
    {
      int v6 = 0;
      do
      {
        if (*(void *)v19 != v5) {
          objc_enumerationMutation(obj);
        }
        if (a2) {
          uint64_t v7 = *(unsigned __int8 *)(a2 + 8);
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t v8 = *(void *)(*((void *)&v18 + 1) + 8 * (void)v6);
        uint64_t v9 = BKLogTouchEvents();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          if (v8) {
            int v14 = *(_DWORD *)(v8 + 8);
          }
          else {
            int v14 = 0;
          }
          *(_DWORD *)buf = 67109120;
          int v24 = v14;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SGP: Sending cancel to latent client: %x", buf, 8u);
        }

        mach_absolute_time();
        id v10 = (id)a1;
        DigitizerEvent = (const void *)IOHIDEventCreateDigitizerEvent();
        id v12 = *(id *)(a1 + 8);
        [v12 senderID:0x4400000000];
        IOHIDEventSetSenderID();

        IOHIDEventSetIntegerValue();
        IOHIDEventSetIntegerValue();

        id v13 = objc_alloc_init((Class)BKSHIDEventDigitizerAttributes);
        [v13 setTouchStreamIdentifier:v7];
        sub_100006310((uint64_t)v10, (uint64_t)DigitizerEvent, v13, v8, *(double *)(a1 + 96));
        CFRelease(DigitizerEvent);

        int v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v15 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
      id v4 = v15;
    }
    while (v15);
  }

  return [*(id *)(a1 + 144) removeAllObjects];
}

void sub_10000D600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10000D6DC(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  id v7 = a2;
  id obj = v7;
  if (a3 == 2)
  {
    uint64_t v8 = [v7 bs_filter:&stru_1000F8490];

    id v7 = (id)v8;
    id obj = (id)v8;
  }
  if (objc_msgSend(v7, "count", v7, obj))
  {
    uint64_t v9 = BKLogTouchEvents();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = +[BSDescriptionStream descriptionForRootObject:v35];
      uint64_t v11 = (uint64_t)*(&off_1000F8758 + a3);
      *(_DWORD *)buf = 138543874;
      v56 = v10;
      __int16 v57 = 2114;
      uint64_t v58 = v11;
      __int16 v59 = 2114;
      uint64_t v60 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "canceling paths %{public}@ -- %{public}@ (ts:%{public}@)", buf, 0x20u);
    }
    sub_10008B690((id *)a1, v35, 1, 0);
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    id v12 = *(void **)(a1 + 40);
    if (v12) {
      id v12 = (void *)v12[3];
    }
    id v13 = v12;
    id v14 = [v13 countByEnumeratingWithState:&v48 objects:v54 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v49;
      do
      {
        uint64_t v16 = 0;
        do
        {
          if (*(void *)v49 != v15) {
            objc_enumerationMutation(v13);
          }
          uint64_t v17 = *(void *)(*((void *)&v48 + 1) + 8 * (void)v16);
          if (a3 != 2)
          {
            if (v17) {
LABEL_21:
            }
              long long v20 = *(void **)(v17 + 48);
            else {
              long long v20 = 0;
            }
            long long v21 = v20;
            sub_10008B9A0((id *)a1, v21);

            goto LABEL_23;
          }
          unsigned __int8 v18 = [*(id *)(*((void *)&v48 + 1) + 8 * (void)v16) isEqual:a4];
          if (v17) {
            char v19 = v18;
          }
          else {
            char v19 = 1;
          }
          if ((v19 & 1) == 0 && *(unsigned char *)(v17 + 9)) {
            goto LABEL_21;
          }
LABEL_23:
          uint64_t v16 = (char *)v16 + 1;
        }
        while (v14 != v16);
        id v22 = [v13 countByEnumeratingWithState:&v48 objects:v54 count:16];
        id v14 = v22;
      }
      while (v22);
    }

    if (a3 != 2)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      id obja = v35;
      id v23 = [obja countByEnumeratingWithState:&v44 objects:v53 count:16];
      if (v23)
      {
        uint64_t v38 = *(void *)v45;
        do
        {
          id v39 = v23;
          for (uint64_t i = 0; i != v39; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v45 != v38) {
              objc_enumerationMutation(obja);
            }
            uint64_t v25 = *(void *)(*((void *)&v44 + 1) + 8 * i);
            uint64_t v26 = *(void *)(v25 + 32);
            BOOL v27 = v26 == 1 || v26 == 2;
            BOOL v28 = v26 != 1 && v26 == 2;
            *(void *)(v25 + 32) = 0;
            long long v40 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            id v29 = *(id *)(a1 + 72);
            id v30 = [v29 countByEnumeratingWithState:&v40 objects:v52 count:16];
            if (v30)
            {
              uint64_t v31 = *(void *)v41;
              do
              {
                for (j = 0; j != v30; j = (char *)j + 1)
                {
                  if (*(void *)v41 != v31) {
                    objc_enumerationMutation(v29);
                  }
                  id v33 = *(id *)(*((void *)&v40 + 1) + 8 * (void)j);
                  long long v34 = v33;
                  if (v28) {
                    [v33 touch:*(unsigned int *)(v25 + 16) pathIndex:*(void *)(v25 + 8) upAtPoint:*(unsigned __int8 *)(v25 + 296) detached:*(double *)(v25 + 224) upAtPoint:*(double *)(v25 + 232)];
                  }
                  if (v27) {
                    [v34 touch:*(unsigned int *)(v25 + 16) pathIndex:*(void *)(v25 + 8) rangeOutAtPoint:*(double *)(v25 + 224) *(double *)(v25 + 232)];
                  }
                }
                id v30 = [v29 countByEnumeratingWithState:&v40 objects:v52 count:16];
              }
              while (v30);
            }
          }
          id v23 = [obja countByEnumeratingWithState:&v44 objects:v53 count:16];
        }
        while (v23);
      }

      sub_1000170D8(a1);
    }
  }
}

void sub_10000DAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_10000E0A8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) increment];
  [*(id *)(*(void *)(a1 + 32) + 104) includeBitNumber:*(void *)(a1 + 40)];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 120);

  return [v3 includeBitNumber:v2];
}

id sub_10000E0F8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 144) invalidate];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 144);
  *(void *)(v2 + 144) = 0;

  id v4 = *(void **)(*(void *)(a1 + 32) + 128);

  return _[v4 end];
}

void sub_10000E14C(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 66))
  {
    BSAbsoluteMachTimeNow();
    double v3 = v2;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(void *)(v4 + 48))
    {
      [*(id *)(v4 + 48) invalidate];
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = *(void **)(v5 + 48);
      *(void *)(v5 + 48) = 0;

      uint64_t v4 = *(void *)(a1 + 32);
    }
    if (*(unsigned char *)(v4 + 64))
    {
      *(double *)(v4 + 40) = v3;
      *(unsigned char *)(*(void *)(a1 + 32) + 64) = 0;
      uint64_t v4 = *(void *)(a1 + 32);
    }
    if (v3 - *(double *)(v4 + 40) >= 32.0)
    {
      sub_10001BE48(v4);
    }
    else
    {
      id v7 = [objc_alloc((Class)BSAbsoluteMachTimer) initWithIdentifier:@"BKEventStatisticsLogging"];
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void **)(v8 + 48);
      *(void *)(v8 + 48) = v7;

      objc_initWeak(&location, *(id *)(a1 + 32));
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void **)(v10 + 48);
      uint64_t v12 = *(void *)(v10 + 56);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_10007D1B8;
      v13[3] = &unk_1000F7FA0;
      objc_copyWeak(&v14, &location);
      [v11 scheduleWithFireInterval:v12 leewayInterval:v13 queue:8.0 handler:0.5];
      objc_destroyWeak(&v14);
      objc_destroyWeak(&location);
    }
  }
}

void sub_10000E2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10000E304(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 144))
  {
    uint64_t v8 = +[NSString stringWithFormat:@"precondition: should have invalidated and cleared any previous transactions"];
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = NSStringFromSelector(*(SEL *)(a1 + 40));
      uint64_t v10 = (objc_class *)objc_opt_class();
      uint64_t v11 = NSStringFromClass(v10);
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138544642;
      id v14 = v9;
      __int16 v15 = 2114;
      uint64_t v16 = v11;
      __int16 v17 = 2048;
      uint64_t v18 = v12;
      __int16 v19 = 2114;
      CFStringRef v20 = @"BKTouchDeliveryStatisticsLoggingObserver.m";
      __int16 v21 = 1024;
      int v22 = 294;
      __int16 v23 = 2114;
      int v24 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", (uint8_t *)&v13, 0x3Au);
    }
    [v8 UTF8String];
    _bs_set_crash_log_message();
    __break(0);
    JUMPOUT(0x10000E490);
  }
  uint64_t v3 = [*(id *)(v2 + 8) beginTransactionForReason:@"processing touches"];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 144);
  *(void *)(v4 + 144) = v3;

  int v6 = *(void **)(*(void *)(a1 + 32) + 128);

  return [v6 begin];
}

id sub_10000E584(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) increment];
  [*(id *)(*(void *)(a1 + 32) + 104) includeBitNumber:*(void *)(a1 + 40)];
  id result = [*(id *)(*(void *)(a1 + 32) + 112) includeBitNumber:*(void *)(a1 + 40)];
  if (!*(_DWORD *)(a1 + 48)) {
    id result = [*(id *)(*(void *)(a1 + 32) + 72) increment];
  }
  int v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 0x20000) != 0)
  {
    id result = [*(id *)(*(void *)(a1 + 32) + 64) increment];
    int v3 = *(_DWORD *)(a1 + 52);
  }
  if ((v3 & 0x42800) != 0)
  {
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 96);
    return [v4 increment];
  }
  return result;
}

void sub_10000E6B0(uint64_t a1)
{
  if (a1 && *(unsigned char *)(a1 + 65))
  {
    BSAbsoluteMachTimeNow();
    double v3 = v2;
    uint64_t v4 = *(NSObject **)(a1 + 16);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      double v5 = *(double *)(a1 + 40);
      if (v5 <= 0.0) {
        double v6 = 0.0;
      }
      else {
        double v6 = v3 - v5;
      }
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = *(void **)(a1 + 24);
      uint64_t v9 = v4;
      uint64_t v10 = [v8 bs_compactMap:&stru_1000F7F78];
      uint64_t v11 = +[BSDescriptionStream descriptionForRootObject:v10];
      *(_DWORD *)buf = 138543874;
      uint64_t v23 = v7;
      __int16 v24 = 2048;
      double v25 = v6;
      __int16 v26 = 2114;
      BOOL v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ events starting %gs ago: %{public}@", buf, 0x20u);
    }
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v12 = *(id *)(a1 + 24);
    id v13 = [v12 countByEnumeratingWithState:&v18 objects:buf count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v15) {
            objc_enumerationMutation(v12);
          }
          __int16 v17 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          if ((objc_msgSend(v17, "automaticResetDisabled", (void)v18) & 1) == 0) {
            [v17 reset];
          }
        }
        id v14 = [v12 countByEnumeratingWithState:&v18 objects:buf count:16];
      }
      while (v14);
    }

    *(_WORD *)(a1 + 64) = 1;
  }
}

void sub_10000EB30(uint64_t a1, __IOHIDEvent *a2)
{
  if (!a1) {
    return;
  }
  if (!*(unsigned char *)(a1 + 204))
  {
    double v3 = [*(id *)(a1 + 8) propertyForKey:@"AccurateMaxDigitizerPressureValue"];
    uint64_t v4 = v3;
    if (v3) {
      [v3 floatValue];
    }
    else {
      int v5 = 0;
    }
    *(unsigned char *)(a1 + 204) = 1;
    *(_DWORD *)(a1 + 200) = v5;
  }
  long long v192 = 0u;
  long long v193 = 0u;
  long long v190 = 0u;
  long long v191 = 0u;
  uint64_t v174 = a1;
  id v6 = *(id *)(a1 + 72);
  id v7 = [v6 countByEnumeratingWithState:&v190 objects:v214 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v191;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v191 != v8) {
          objc_enumerationMutation(v6);
        }
        [*(id *)(*((void *)&v190 + 1) + 8 * i) touchWillStartProcessingTouchCollection];
      }
      id v7 = [v6 countByEnumeratingWithState:&v190 objects:v214 count:16];
    }
    while (v7);
  }

  if (BKSHIDEventContainsUpdates())
  {
    id location = *(id **)(v174 + 184);
    if (location)
    {
      uint64_t v172 = sub_1000134CC((uint64_t)a2);
      sub_10003C4B4((uint64_t)location, v172);
      v177 = (id *)objc_claimAutoreleasedReturnValue();
      if (v177)
      {
        long long v227 = 0u;
        long long v226 = 0u;
        long long v225 = 0u;
        long long v224 = 0u;
        long long v223 = 0u;
        long long v222 = 0u;
        long long v221 = 0u;
        long long v220 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        long long v218 = 0u;
        long long v216 = 0u;
        memset(buf, 0, sizeof(buf));
        sub_100012860((const __CFArray **)v235, (uint64_t)a2);
        sub_100018934((unint64_t)v235);
        uint64_t v175 = 0;
        unsigned int v10 = 0;
        objc_super v231 = *(objc_super *)v235;
        long long v232 = v236;
        long long v233 = v237;
        *(void *)&long long v234 = v238;
        while (1)
        {
          uint64_t v11 = *((void *)&v232 + 1);
          if (!*((void *)&v232 + 1)) {
            break;
          }
          uint64_t v12 = v233;
          *((void *)&v233 + 1) = *((void *)&v232 + 1);
          *(void *)&long long v234 = v233;
          int v13 = sub_10003C18C((uint64_t)v177, v233);
          int IntegerValue = IOHIDEventGetIntegerValue();
          if (!v13)
          {
            uint64_t v74 = IOHIDEventGetIntegerValue();
            if (v74)
            {
              v75 = BKLogTouchEvents();
              if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v228 = 134218240;
                *(void *)&v228[4] = v12;
                *(_WORD *)&v228[12] = 2048;
                *(void *)&v228[14] = v74;
                _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "remainingUpdatesMask for path %ld is zero, but we got updates:%lX", v228, 0x16u);
              }
            }
            goto LABEL_106;
          }
          int v15 = IntegerValue;
          buf[v12] = v11;
          sub_10003C320((uint64_t)v177, IntegerValue, v12);
          v10 |= 1 << v12;
          uint64_t v16 = v175;
          if (v15) {
            uint64_t v16 = v175 + 1;
          }
          uint64_t v175 = v16;
          sub_100018934((unint64_t)&v231);
        }
        if (v10)
        {
          long long v234 = 0u;
          long long v233 = 0u;
          long long v232 = 0u;
          objc_super v231 = (objc_super)0;
          id obja = v177[17];
          v56 = 0;
          __int16 v57 = (char *)[obja countByEnumeratingWithState:&v231 objects:v235 count:16];
          if (v57)
          {
            uint64_t v182 = *(void *)v232;
            do
            {
              uint64_t v58 = 0;
              do
              {
                if (*(void *)v232 != v182) {
                  objc_enumerationMutation(obja);
                }
                __int16 v59 = (_DWORD *)*((void *)v231.super_class + (void)v58);
                if (v59) {
                  int v60 = v59[6];
                }
                else {
                  int v60 = 0;
                }
                unint64_t v61 = v60 & v10;
                if ((v60 & v10) != 0)
                {
                  id v62 = location[3];
                  IOHIDEventGetTimeStamp();
                  LODWORD(v161) = 0;
                  HIDWORD(v161) = IOHIDEventGetEventFlags() & 0x20 | 4;
                  DigitizerEvent = (const void *)IOHIDEventCreateDigitizerEvent();
                  id v64 = v62;
                  v65 = v64;
                  if (v64) {
                    v66 = (void *)*((void *)v64 + 1);
                  }
                  else {
                    v66 = 0;
                  }
                  id v67 = v66;
                  [v67 senderID:v161];
                  IOHIDEventSetSenderID();

                  IOHIDEventGetIntegerValue();
                  IOHIDEventSetIntegerValue();
                  IOHIDEventGetIntegerValue();
                  IOHIDEventSetIntegerValue();
                  IOHIDEventGetIntegerValue();
                  IOHIDEventSetIntegerValue();
                  IOHIDEventGetIntegerValue();
                  IOHIDEventSetIntegerValue();
                  IOHIDEventGetIntegerValue();
                  IOHIDEventSetIntegerValue();

                  for (uint64_t j = 0; j != 30; ++j)
                  {
                    if ((v61 >> j)) {
                      IOHIDEventAppendEvent();
                    }
                  }
                  id v69 = objc_alloc_init((Class)BKSHIDEventDigitizerAttributes);
                  if (!v56) {
                    v56 = objc_alloc_init(BKHIDEventCollector);
                  }
                  sub_100013920((uint64_t)location);
                  id v70 = (id)objc_claimAutoreleasedReturnValue();
                  v71 = v70;
                  if (v56 && v70 && [*((id *)v70 + 2) count])
                  {
                    sub_1000138B0((uint64_t)v56);
                    [(NSMutableArray *)v56->_collectedEvents addObjectsFromArray:v71[2]];
                  }

                  sub_100013710((uint64_t)v56, a2, v69, v59);
                  CFRelease(DigitizerEvent);
                }
                ++v58;
              }
              while (v58 != v57);
              v72 = (char *)[obja countByEnumeratingWithState:&v231 objects:v235 count:16];
              __int16 v57 = v72;
            }
            while (v72);
          }

          if (!v175)
          {
            uint64_t v73 = sub_10003C600((uint64_t)location, v172);
            if ((id *)v73 != v177)
            {
              v157 = +[NSString stringWithFormat:@"pending/removed items don't match: %@/%@", v73, v177];
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                NSStringFromSelector("_handleDidUpdateEvent:");
                id v158 = (id)objc_claimAutoreleasedReturnValue();
                v159 = (objc_class *)objc_opt_class();
                v160 = NSStringFromClass(v159);
                *(_DWORD *)v228 = 138544642;
                *(void *)&v228[4] = v158;
                *(_WORD *)&v228[12] = 2114;
                *(void *)&v228[14] = v160;
                *(_WORD *)&v228[22] = 2048;
                *(void *)&v228[24] = location;
                LOWORD(v229) = 2114;
                *(void *)((char *)&v229 + 2) = @"BKDirectTouchUpdateEvents.mm";
                WORD5(v229) = 1024;
                HIDWORD(v229) = 260;
                LOWORD(v230[0]) = 2114;
                *(void *)((char *)v230 + 2) = v157;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", v228, 0x3Au);
              }
              [v157 UTF8String];
              _bs_set_crash_log_message();
              __break(0);
              JUMPOUT(0x1000105D0);
            }
          }
        }
        else
        {
          v56 = 0;
        }
        v76 = v56;
      }
      else
      {
        v54 = BKLogTouchEvents();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          v55 = +[BSDescriptionStream descriptionForRootObject:location[1]];
          LODWORD(buf[0]) = 134218242;
          *(void *)((char *)buf + 4) = v172;
          WORD2(buf[1]) = 2114;
          *(void *)((char *)&buf[1] + 6) = v55;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "BKDigitizer: got an event update with generation:%ld but I can't find any pending items waiting for an update: %{public}@", (uint8_t *)buf, 0x16u);
        }
LABEL_106:
        v76 = 0;
      }
    }
    else
    {
      v76 = 0;
    }
    sub_1000128A8(v174, (uint64_t)v76);

    goto LABEL_253;
  }
  v167 = [*(id *)(v174 + 8) displayUUID];
  if (!*(void *)(v174 + 56))
  {
    __int16 v17 = +[BKTouchDeliveryPolicyServer sharedServer];
    objc_storeStrong((id *)(v174 + 56), v17);
    uint64_t v18 = *(void *)(v174 + 24);
    if (v18) {
      objc_storeStrong((id *)(v18 + 8), v17);
    }
  }
  v168 = objc_alloc_init(BKHIDEventCollector);
  v204[0] = (uint64_t)v168;
  id obj = (id *)(id)v174;
  v204[1] = (uint64_t)obj;
  long long v19 = (id *)obj[14];
  locationa = (id **)(obj + 14);
  if (v19)
  {
    v181 = objc_alloc_init(BKTouchContactSet);
    long long v238 = 0u;
    long long v237 = 0u;
    long long v236 = 0u;
    *(_OWORD *)v235 = 0u;
    id v20 = v19[1];
    id v21 = [v20 countByEnumeratingWithState:v235 objects:buf count:16];
    if (v21)
    {
      uint64_t v22 = *(void *)v236;
      do
      {
        uint64_t v23 = 0;
        do
        {
          if (*(void *)v236 != v22) {
            objc_enumerationMutation(v20);
          }
          uint64_t v24 = *(void *)(*(void *)&v235[8] + 8 * (void)v23);
          double v25 = [BKTouchContact alloc];
          if (v25)
          {
            v231.receiver = v25;
            v231.super_class = (Class)BKTouchContact;
            __int16 v26 = (char *)[super init];
            uint64_t v27 = (uint64_t)v26;
            if (v26)
            {
              *((void *)v26 + 1) = *(void *)(v24 + 8);
              *((_DWORD *)v26 + 4) = *(_DWORD *)(v24 + 16);
              *((_DWORD *)v26 + 5) = *(_DWORD *)(v24 + 20);
              *((_DWORD *)v26 + 6) = *(_DWORD *)(v24 + 24);
              *((void *)v26 + 4) = *(void *)(v24 + 32);
              *((void *)v26 + 6) = *(void *)(v24 + 48);
              *((void *)v26 + 7) = *(void *)(v24 + 56);
              *((_DWORD *)v26 + 16) = *(_DWORD *)(v24 + 64);
              *((_WORD *)v26 + 34) = *(_WORD *)(v24 + 68);
              long long v28 = *(_OWORD *)(v24 + 72);
              *(_OWORD *)(v26 + 88) = *(_OWORD *)(v24 + 88);
              *(_OWORD *)(v26 + 72) = v28;
              long long v29 = *(_OWORD *)(v24 + 104);
              *(_OWORD *)(v26 + 120) = *(_OWORD *)(v24 + 120);
              *(_OWORD *)(v26 + 104) = v29;
              *(_OWORD *)(v26 + 136) = *(_OWORD *)(v24 + 136);
              *((void *)v26 + 19) = *(void *)(v24 + 152);
              *((_OWORD *)v26 + 10) = *(_OWORD *)(v24 + 160);
              long long v30 = *(_OWORD *)(v24 + 176);
              *((void *)v26 + 24) = *(void *)(v24 + 192);
              *((_OWORD *)v26 + 11) = v30;
              long long v31 = *(_OWORD *)(v24 + 200);
              long long v32 = *(_OWORD *)(v24 + 216);
              long long v33 = *(_OWORD *)(v24 + 232);
              *((void *)v26 + 31) = *(void *)(v24 + 248);
              *(_OWORD *)(v26 + 232) = v33;
              *(_OWORD *)(v26 + 216) = v32;
              *(_OWORD *)(v26 + 200) = v31;
              objc_storeStrong((id *)v26 + 32, *(id *)(v24 + 256));
              objc_storeStrong((id *)(v27 + 264), *(id *)(v24 + 264));
              objc_storeStrong((id *)(v27 + 272), *(id *)(v24 + 272));
              id v34 = [*(id *)(v24 + 280) mutableCopy];
              long long v35 = *(void **)(v27 + 280);
              *(void *)(v27 + 280) = v34;

              objc_storeStrong((id *)(v27 + 288), *(id *)(v24 + 288));
              *(unsigned char *)(v27 + 296) = *(unsigned char *)(v24 + 296);
              *(unsigned char *)(v27 + 298) = *(unsigned char *)(v24 + 298);
            }
          }
          else
          {
            uint64_t v27 = 0;
          }
          sub_100014070((uint64_t)v181, v27);

          uint64_t v23 = (char *)v23 + 1;
        }
        while (v21 != v23);
        id v36 = [v20 countByEnumeratingWithState:v235 objects:buf count:16];
        id v21 = v36;
      }
      while (v36);
    }
  }
  else
  {
    v181 = 0;
  }
  int v37 = IOHIDEventGetIntegerValue();
  if ((v37 & 0x80) != 0)
  {
    long long v44 = BKLogTouchEvents();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "cancel received from HID", (uint8_t *)buf, 2u);
    }

    id v45 = objc_alloc_init((Class)NSMutableArray);
    sub_100012860((const __CFArray **)&v231, (uint64_t)a2);
    sub_100018934((unint64_t)&v231);
    *(objc_super *)v228 = v231;
    *(_OWORD *)&v228[16] = v232;
    long long v229 = v233;
    v230[0] = v234;
    while (*(void *)&v228[24])
    {
      *((void *)&v229 + 1) = *(void *)&v228[24];
      v230[0] = v229;
      uint64_t v46 = sub_100018B1C(*locationa, v229);
      long long v47 = (void *)v46;
      if (v46)
      {
        uint64_t v48 = *(unsigned int *)(v46 + 16);
        if (v48)
        {
          long long v238 = 0u;
          long long v237 = 0u;
          long long v236 = 0u;
          *(_OWORD *)v235 = 0u;
          id v49 = *(id *)(v174 + 72);
          id v50 = [v49 countByEnumeratingWithState:v235 objects:buf count:16];
          if (v50)
          {
            uint64_t v51 = *(void *)v236;
            do
            {
              for (k = 0; k != v50; k = (char *)k + 1)
              {
                if (*(void *)v236 != v51) {
                  objc_enumerationMutation(v49);
                }
                [*(id *)(*(void *)&v235[8] + 8 * (void)k) touchDidHIDCancel:v48];
              }
              id v50 = [v49 countByEnumeratingWithState:v235 objects:buf count:16];
            }
            while (v50);
          }
        }
        [v45 addObject:v47];
      }

      sub_100018934((unint64_t)v228);
    }
    if ([v45 count])
    {
      id v53 = v45;
    }
    else
    {
      v91 = BKLogTouchEvents();
      if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
      {
        SenderID = (void *)IOHIDEventGetSenderID();
        LODWORD(v231.receiver) = 134217984;
        *(id *)((char *)&v231.receiver + 4) = SenderID;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_INFO, "received cancel without child paths from senderID:0x%llX", (uint8_t *)&v231, 0xCu);
      }

      sub_10000D36C(*locationa);
      id v53 = (id)objc_claimAutoreleasedReturnValue();
    }
    v93 = v53;

    sub_10000D6DC((uint64_t)obj, v93, 0, 0);
    if (![*locationa count]) {
      sub_10000D39C((uint64_t)obj, 0);
    }
    *((unsigned char *)obj + 208) = 0;

    goto LABEL_252;
  }
  sub_100012860(v203, (uint64_t)a2);
  sub_100018934((unint64_t)v203);
  if (v203[2])
  {
    _BKHIDNoteUserEventOccurredOnDisplay();
    if ((v37 & 0x20000) == 0)
    {
      unsigned int v38 = [obj[4] isActive];
      int v39 = *((unsigned __int8 *)obj + 208);
      if (((*((unsigned char *)obj + 208) == 0) & ~v38) == 0)
      {
        sub_100012860((const __CFArray **)buf, (uint64_t)a2);
        sub_100018934((unint64_t)buf);
        long long v236 = *(_OWORD *)&buf[2];
        *(_OWORD *)v235 = *(_OWORD *)buf;
        long long v237 = *(_OWORD *)&buf[4];
        *(void *)&long long v238 = v216;
        uint64_t v40 = buf[3];
        if (buf[3])
        {
          char v41 = 0;
          do
          {
            *((void *)&v237 + 1) = v40;
            *(void *)&long long v238 = v237;
            uint64_t v42 = IOHIDEventGetIntegerValue();
            sub_100018934((unint64_t)v235);
            if (v42) {
              ++v41;
            }
            uint64_t v40 = *((void *)&v236 + 1);
          }
          while (*((void *)&v236 + 1));
          BOOL v43 = v41 != 0;
        }
        else
        {
          BOOL v43 = 0;
        }
        *((unsigned char *)obj + 208) = v43;
        v165 = BKLogTouchEvents();
        if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
        {
          id v137 = [*(id *)(v174 + 8) senderID];
          v138 = [obj[4] reasons];
          v139 = +[BSDescriptionStream descriptionForRootObject:v138];
          int v140 = *((unsigned __int8 *)obj + 208);
          LODWORD(buf[0]) = 134218754;
          *(void *)((char *)buf + 4) = v137;
          WORD2(buf[1]) = 2114;
          *(void *)((char *)&buf[1] + 6) = v139;
          HIWORD(buf[2]) = 1024;
          LODWORD(buf[3]) = v39;
          WORD2(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 6) = v140;
          _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_DEFAULT, "%llX ignoring touch event (%{public}@) prevHadTouches:%{BOOL}u nowHasTouches:%{BOOL}u", (uint8_t *)buf, 0x22u);
        }
LABEL_251:

        goto LABEL_252;
      }
    }
    *((unsigned char *)obj + 206) = IOHIDEventGetIntegerValue() != 0;
    *((unsigned char *)obj + 207) = IOHIDEventGetIntegerValue() != 0;
    v165 = sub_100017688((uint64_t)obj, (uint64_t)a2, v181);
    uint64_t v77 = sub_1000141C0((uint64_t)obj[3], (uint64_t)a2, v165, obj[22], obj[15], obj[16]);
    if (v77 && *(unsigned char *)(v77 + 8)) {
      obj[12] = *(id *)(v77 + 16);
    }
    uint64_t v166 = v77;
    objc_storeStrong((id *)locationa, v165);
    v78 = +[SLGLog sharedInstance];
    unsigned int v79 = [v78 isEnabled];

    if (v79) {
      sub_10004CC68(obj, (uint64_t)a2);
    }
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    v80 = v181;
    int v81 = 0;
    id v82 = [(BKTouchContactSet *)v80 countByEnumeratingWithState:&v199 objects:&v231 count:16];
    if (v82)
    {
      uint64_t v83 = *(void *)v200;
      do
      {
        for (m = 0; m != v82; m = (char *)m + 1)
        {
          if (*(void *)v200 != v83) {
            objc_enumerationMutation(v80);
          }
          uint64_t v85 = *(void *)(*((void *)&v199 + 1) + 8 * (void)m);
          if (*(void *)(v85 + 32) == 2) {
            v81 |= *(unsigned char *)(v85 + 296) == 0;
          }
        }
        id v82 = [(BKTouchContactSet *)v80 countByEnumeratingWithState:&v199 objects:&v231 count:16];
      }
      while (v82);
    }

    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    v86 = *locationa;
    id v87 = [v86 countByEnumeratingWithState:&v195 objects:v228 count:16];
    if (v87)
    {
      int v176 = 0;
      uint64_t v88 = *(void *)v196;
      do
      {
        for (n = 0; n != v87; n = (char *)n + 1)
        {
          if (*(void *)v196 != v88) {
            objc_enumerationMutation(v86);
          }
          uint64_t v90 = *(void *)(*((void *)&v195 + 1) + 8 * (void)n);
          if (*(void *)(v90 + 32) == 2) {
            v176 |= *(unsigned char *)(v90 + 296) == 0;
          }
        }
        id v87 = [v86 countByEnumeratingWithState:&v195 objects:v228 count:16];
      }
      while (v87);
    }
    else
    {
      int v176 = 0;
    }

    char v194 = 0;
    int aSelector = v176 & (v81 ^ 1);
    if (aSelector & 1) != 0 || ((v176 ^ 1))
    {
      v94 = BKLogTouchEvents();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 67109376;
        HIDWORD(buf[0]) = aSelector & 1;
        LOWORD(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 2) = (v176 ^ 1) & 1;
        _os_log_debug_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "touchstreams: start sending isFirstDown:%{BOOL}u lifted:%{BOOL}u", (uint8_t *)buf, 0xEu);
      }
    }
    unsigned __int8 v205 = 0;
    v95 = obj[5];
    if (v95) {
      v95 = (void *)v95[3];
    }
    v164 = v95;
    BOOL v96 = sub_100019710((uint64_t)v164, &v194, &v205);
    BOOL v162 = v205 == 3;
    BOOL v163 = v96;
    if (v96)
    {
      long long v238 = 0u;
      long long v237 = 0u;
      long long v236 = 0u;
      *(_OWORD *)v235 = 0u;
      v169 = v164;
      id v97 = [v169 countByEnumeratingWithState:v235 objects:buf count:16];
      if (v97)
      {
        uint64_t v170 = *(void *)v236;
        do
        {
          id v173 = v97;
          for (iuint64_t i = 0; ii != v173; iuint64_t i = (char *)ii + 1)
          {
            if (*(void *)v236 != v170) {
              objc_enumerationMutation(v169);
            }
            v99 = (id *)*(id *)(*(void *)&v235[8] + 8 * (void)ii);
            v178 = v99;
            if (v99) {
              int v100 = *((unsigned __int8 *)v99 + 10);
            }
            else {
              int v100 = 0;
            }
            if (aSelector)
            {
              if (v100 != 1) {
                goto LABEL_162;
              }
            }
            else if (v176 & 1 | (v100 != 1))
            {
LABEL_162:
              v101 = v99;
              if (v99)
              {
                if (*((unsigned char *)v99 + 9) && v100 == 1) {
                  goto LABEL_186;
                }
              }
              goto LABEL_167;
            }
            if (v99) {
              *((unsigned char *)v99 + 10) = 2;
            }
LABEL_167:
            if (!a2) {
              __assert_rtn("-[BKDirectTouchState _touchStreamClient:appendPathCollectionEvent:toEventPoster:initialTouchTimestamp:]", "BKDirectTouchState.mm", 2436, "pathCollectionEvent");
            }
            double v103 = *((double *)obj + 21);
            id v104 = objc_alloc_init((Class)NSMutableArray);
            v105 = [*(id *)(v174 + 8) displayUUID];
            if (v178)
            {
              v106 = (unsigned int *)v178[6];
              v107 = v106;
              if (v106) {
                uint64_t v108 = v106[2];
              }
              else {
                uint64_t v108 = 0;
              }
              BOOL v109 = *((unsigned char *)v178 + 9) != 0;
            }
            else
            {
              uint64_t v108 = 0;
              v107 = 0;
              BOOL v109 = 0;
            }
            *((void *)&v209 + 1) = 0;
            *(void *)&long long v210 = 0;
            CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
            *(void *)&long long v209 = Children;
            if (Children) {
              *(void *)&long long v210 = CFArrayGetCount(Children);
            }
            sub_100018934((unint64_t)&v209);
            *(_OWORD *)v239 = v209;
            *(_OWORD *)&v239[16] = v210;
            long long v240 = v211;
            *(void *)&long long v241 = v212;
            while (*(void *)&v239[24])
            {
              int64_t v111 = v240;
              *((void *)&v240 + 1) = *(void *)&v239[24];
              *(void *)&long long v241 = v240;
              uint64_t v112 = sub_100018B1C(*locationa, v240);
              v113 = (id *)v112;
              if (v112 && (!v109 || !*(unsigned char *)(v112 + 296)))
              {
                IOHIDEventGetFloatValue();
                float64_t v115 = v114;
                IOHIDEventGetFloatValue();
                sub_100010EDC((uint64_t)v208, (uint64_t)obj, v115, v116, CGPointZero.x, CGPointZero.y);
                sub_1000109A8((uint64_t)v206, (uint64_t)obj, (uint64_t)v208, v108, (uint64_t)v105);
                v117 = objc_alloc_init(BKHitTestResultPathLocation);
                v118 = v117;
                if (v117)
                {
                  long long v119 = v206[1];
                  *(_OWORD *)&v117->_pathLocation.locationsAreValid = v206[0];
                  *(_OWORD *)&v117->_pathLocation.location.y = v119;
                  *(_OWORD *)&v117->_pathLocation.hitTestLocation.y = v206[2];
                  v117->_pathLocation.preciseLocation.y = v207;
                  v117->_pathIndex = v111;
                  v117->_contextRelationship = 0;
                }
                [v104 addObject:v117];
                [v113[35] addObject:v107];
              }
              sub_100018934((unint64_t)v239);
            }
            if ([v104 count]) {
              sub_10001159C(obj, (uint64_t)a2, (uint64_t)v107, (uint64_t)v168, 0, v104, v103);
            }

            v101 = v178;
LABEL_186:
          }
          id v97 = [v169 countByEnumeratingWithState:v235 objects:buf count:16];
        }
        while (v97);
      }

      if (aSelector)
      {
        IOHIDEventGetTimeStamp();
        BSMonotonicReferencedTimeFromMachTime();
        obj[21] = v120;
      }
    }

    v121 = a2;
    if (v166 && ![*(id *)(v166 + 24) count])
    {
      v136 = BKLogTouchEvents();
      if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0]) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEBUG, "no events for regular clients", (uint8_t *)buf, 2u);
      }

      sub_1000170D8((uint64_t)obj);
    }
    else
    {
      if ((v163 & aSelector) == 1)
      {
        v122 = [*(id *)(v174 + 8) displayUUID];
        long long v211 = 0u;
        long long v212 = 0u;
        long long v209 = 0u;
        long long v210 = 0u;
        v123 = sub_10000CDE8((id *)obj[5]);
        id v124 = [v123 countByEnumeratingWithState:&v209 objects:buf count:16];
        if (v124)
        {
          uint64_t v125 = *(void *)v210;
LABEL_199:
          uint64_t v126 = 0;
          while (1)
          {
            if (*(void *)v210 != v125) {
              objc_enumerationMutation(v123);
            }
            v127 = *(id **)(*((void *)&v209 + 1) + 8 * v126);
            if (v127 != obj && (uint64_t)[v127[14] count] > 0) {
              break;
            }
            if (v124 == (id)++v126)
            {
              id v124 = [v123 countByEnumeratingWithState:&v209 objects:buf count:16];
              if (v124) {
                goto LABEL_199;
              }
              goto LABEL_206;
            }
          }
        }
        else
        {
LABEL_206:

          double v128 = *((double *)obj + 20);
          IOHIDEventGetTimeStamp();
          BSMonotonicReferencedTimeFromMachTime();
          if (v128 >= v129)
          {
            v123 = BKLogTouchEvents();
            if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v235 = 138543362;
              *(void *)&v235[4] = v122;
              _os_log_debug_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEBUG, "Assuming system gestures are not possible (lost race with SpringBoard) (%{public}@)", v235, 0xCu);
            }
          }
          else
          {
            v130 = BKLogTouchEvents();
            if (os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v235 = 138543362;
              *(void *)&v235[4] = v122;
              _os_log_debug_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEBUG, "Assuming system gestures are possible (%{public}@)", v235, 0xCu);
            }

            char v194 = 1;
            long long v240 = 0u;
            long long v241 = 0u;
            memset(v239, 0, sizeof(v239));
            v131 = obj[5];
            if (v131) {
              v131 = (void *)v131[3];
            }
            v123 = v131;
            id v132 = [v123 countByEnumeratingWithState:v239 objects:v235 count:16];
            if (v132)
            {
              uint64_t v133 = **(void **)&v239[16];
              do
              {
                for (juint64_t j = 0; jj != v132; juint64_t j = (char *)jj + 1)
                {
                  if (**(void **)&v239[16] != v133) {
                    objc_enumerationMutation(v123);
                  }
                  uint64_t v135 = *(void *)(*(void *)&v239[8] + 8 * (void)jj);
                  if (v135 && *(unsigned char *)(v135 + 9)) {
                    *(unsigned char *)(v135 + 11) = 1;
                  }
                }
                id v132 = [v123 countByEnumeratingWithState:v239 objects:v235 count:16];
              }
              while (v132);
            }
          }
        }

        v121 = a2;
      }
      *(void *)&long long v209 = _NSConcreteStackBlock;
      *((void *)&v209 + 1) = 3221225472;
      *(void *)&long long v210 = sub_100009648;
      *((void *)&v210 + 1) = &unk_1000F8598;
      *(void *)&long long v211 = obj;
      *((void *)&v211 + 1) = v168;
      *(void *)&long long v212 = v121;
      BYTE8(v212) = v194;
      BYTE9(v212) = v162;
      sub_100013E00((void *)v166, (uint64_t)&v209);
      long long v238 = 0u;
      long long v237 = 0u;
      long long v236 = 0u;
      *(_OWORD *)v235 = 0u;
      v141 = *locationa;
      id v142 = [v141 countByEnumeratingWithState:v235 objects:buf count:16];
      if (v142)
      {
        uint64_t v143 = *(void *)v236;
        do
        {
          for (kk = 0; kk != v142; kk = (char *)kk + 1)
          {
            if (*(void *)v236 != v143) {
              objc_enumerationMutation(v141);
            }
            uint64_t v145 = *(void *)(*(void *)&v235[8] + 8 * (void)kk);
            if (*(void *)(v145 + 32) == 1 && *(unsigned char *)(v145 + 296))
            {
              *(unsigned char *)(v145 + 296) = 0;
              *(void *)(v145 + 160) = 0;
              *(void *)(v145 + 168) = 0;
              *(_DWORD *)(v145 + 20) = 0;
            }
          }
          id v142 = [v141 countByEnumeratingWithState:v235 objects:buf count:16];
        }
        while (v142);
      }

      sub_1000170D8((uint64_t)obj);
      v146 = BKLogTouchEvents();
      BOOL v147 = os_log_type_enabled(v146, OS_LOG_TYPE_DEBUG);

      if (v147)
      {
        if (v167)
        {
          v148 = BKLogTouchEvents();
          if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
          {
            id v149 = [*(id *)(v174 + 8) senderID];
            v150 = +[BSDescriptionStream descriptionForRootObject:*locationa];
            *(_DWORD *)v239 = 134218498;
            *(void *)&v239[4] = v149;
            *(_WORD *)&v239[12] = 2114;
            *(void *)&v239[14] = v167;
            *(_WORD *)&v239[22] = 2114;
            *(void *)&v239[24] = v150;
            _os_log_debug_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEBUG, "digitizer:%llX - display:%{public}@ - %{public}@", v239, 0x20u);
          }
        }
        else
        {
          v148 = BKLogTouchEvents();
          if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
          {
            id v155 = [*(id *)(v174 + 8) senderID];
            v156 = +[BSDescriptionStream descriptionForRootObject:*locationa];
            *(_DWORD *)v239 = 134218242;
            *(void *)&v239[4] = v155;
            *(_WORD *)&v239[12] = 2114;
            *(void *)&v239[14] = v156;
            _os_log_debug_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEBUG, "contacts:%llX - %{public}@", v239, 0x16u);
          }
        }
      }
    }

    goto LABEL_251;
  }
LABEL_252:

  sub_100013D14(v204);
LABEL_253:
  long long v188 = 0u;
  long long v189 = 0u;
  long long v186 = 0u;
  long long v187 = 0u;
  id v151 = *(id *)(v174 + 72);
  id v152 = [v151 countByEnumeratingWithState:&v186 objects:v213 count:16];
  if (v152)
  {
    uint64_t v153 = *(void *)v187;
    do
    {
      for (mm = 0; mm != v152; mm = (char *)mm + 1)
      {
        if (*(void *)v187 != v153) {
          objc_enumerationMutation(v151);
        }
        [*(id *)(*((void *)&v186 + 1) + 8 * (void)mm) touchDidFinishProcessingTouchCollection];
      }
      id v152 = [v151 countByEnumeratingWithState:&v186 objects:v213 count:16];
    }
    while (v152);
  }
}

void sub_1000105E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_10001095C(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isActive] & 1) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    sub_10000E6B0(v2);
  }
}

double sub_1000109A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    *(void *)(a1 + 48) = 0;
    *(void *)&long long v17 = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return *(double *)&v17;
  }
  *(_WORD *)a1 = 0;
  int64x2_t v10 = vdupq_n_s64(0xC197D783FC000000);
  *(int64x2_t *)(a1 + 8) = v10;
  uint64_t v11 = (long long *)(a1 + 8);
  *(int64x2_t *)(a1 + 24) = v10;
  uint64_t v12 = (long long *)(a1 + 24);
  *(unsigned char *)(a1 + 2) = 0;
  *(int64x2_t *)(a1 + 40) = v10;
  *(double *)(a1 + 24) = sub_100010AC0(a2, a5, a4, *(double *)(a3 + 24), *(double *)(a3 + 32));
  *(void *)(a1 + 32) = v13;
  int v14 = *(unsigned __int8 *)(a3 + 1);
  *(unsigned char *)(a1 + 1) = v14;
  int v15 = *(unsigned __int8 *)(a3 + 2);
  *(unsigned char *)(a1 + 2) = v15;
  if (!v14)
  {
    *uint64_t v11 = *v12;
    if (v15) {
      goto LABEL_4;
    }
LABEL_6:
    long long v17 = *v11;
    *(_OWORD *)(a1 + 40) = *v11;
    goto LABEL_7;
  }
  *(double *)(a1 + 8) = sub_100010AC0(a2, a5, a4, *(double *)(a3 + 8), *(double *)(a3 + 16));
  *(void *)(a1 + 16) = v16;
  if (!*(unsigned char *)(a3 + 2)) {
    goto LABEL_6;
  }
LABEL_4:
  *(double *)&long long v17 = sub_100010AC0(a2, a5, a4, *(double *)(a3 + 40), *(double *)(a3 + 48));
  *(void *)(a1 + 40) = v17;
  *(void *)(a1 + 48) = v18;
LABEL_7:
  *(unsigned char *)a1 = 1;
  return *(double *)&v17;
}

double sub_100010AC0(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v9 = *(void **)(a1 + 40);
  if (v9) {
    uint64_t v9 = (void *)v9[1];
  }
  int64x2_t v10 = v9;
  [v10 convertReferenceLocation:a2 toCAScreenLocationForDisplayUUID:a4];
  [v10 convertCAScreenLocation:a3 toContextID:a2];
  double v12 = v11;

  return v12;
}

void sub_100010B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100010B54(void *a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v2 = 0x3FF0000000000000;
  char v1 = 0;
  sub_100011044(a1, &v3, &v4, (double *)&v2, &v1, 0);
}

double sub_100010C48(uint64_t a1, void *a2, double a3, double a4)
{
  id v7 = sub_100010CB8(a2, (uint64_t)"BKDisplayConvertCAScreenLocationToContext");
  [v7 convertPoint:a1 toContextId:a3];
  double v9 = v8;

  return v9;
}

id sub_100010CB8(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (sub_100011180(v3))
  {
    uint64_t v4 = sub_100010DDC();
    if (v4) {
      goto LABEL_8;
    }
  }
  else
  {
    int v5 = +[CAWindowServer serverIfRunning];
    uint64_t v4 = [v5 displayWithUniqueId:v3];

    if (v4) {
      goto LABEL_8;
    }
  }
  id v6 = BKLogDisplay();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    int v8 = 136446466;
    uint64_t v9 = a2;
    __int16 v10 = 2114;
    id v11 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}s: unknown displayUUID:%{public}@ ", (uint8_t *)&v8, 0x16u);
  }

LABEL_8:

  return v4;
}

id sub_100010DDC()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3032000000;
  id v6 = sub_100038A64;
  id v7 = sub_100038A74;
  id v8 = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10001153C;
  v2[3] = &unk_1000F6600;
  void v2[4] = &v3;
  sub_1000112C0(v2);
  id v0 = (id)v4[5];
  _Block_object_dispose(&v3, 8);

  return v0;
}

void sub_100010EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

float64x2_t sub_100010EDC(uint64_t a1, uint64_t a2, float64_t a3, float64_t a4, float64_t a5, float64_t a6)
{
  float64x2_t v34 = 0uLL;
  double v33 = 1.0;
  float64x2_t v31 = 0uLL;
  __asm { FMOV            V0.2D, #1.0 }
  float64x2_t v26 = _Q0;
  float64x2_t v32 = _Q0;
  uint64_t v13 = [*(id *)(a2 + 8) displayUUID];
  sub_100011044(v13, &v34, &v34.f64[1], &v33, 0, (uint64_t)&v31);

  v14.f64[0] = a3;
  v14.f64[1] = a4;
  v15.f64[0] = a5;
  v15.f64[1] = a6;
  float64x2_t v16 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33, 0);
  float64x2_t v17 = vmlaq_f64(vmulq_n_f64(v15, v33), v34, vminnmq_f64(vmaxnmq_f64(vdivq_f64(vsubq_f64(v14, v31), v32), (float64x2_t)0), v26));
  float64x2_t v18 = vdivq_f64(vrndaq_f64(v17), v16);
  double v19 = 1.0 / v33 * 0.5;
  double v20 = v19 + v18.f64[0];
  double v21 = v18.f64[0] - v19;
  if (v18.f64[0] == v34.f64[0] / v33)
  {
    char v22 = 1;
  }
  else
  {
    double v21 = v18.f64[0];
    char v22 = 0;
  }
  if (v18.f64[0] == 0.0)
  {
    char v23 = 1;
  }
  else
  {
    double v20 = v21;
    char v23 = v22;
  }
  double v24 = v18.f64[1];
  if (v18.f64[1] == 0.0)
  {
    double v24 = v19 + v18.f64[1];
LABEL_11:
    char v23 = 1;
    goto LABEL_12;
  }
  if (v18.f64[1] == v34.f64[1] / v33)
  {
    double v24 = v18.f64[1] - v19;
    goto LABEL_11;
  }
LABEL_12:
  float64x2_t result = vdivq_f64(v17, v16);
  *(unsigned char *)a1 = 1;
  *(unsigned char *)(a1 + 1) = v23;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 205);
  *(float64x2_t *)(a1 + 8) = v18;
  *(double *)(a1 + 24) = v20;
  *(double *)(a1 + 32) = v24;
  *(float64x2_t *)(a1 + 40) = result;
  return result;
}

void sub_100011034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100011044(void *a1, void *a2, void *a3, double *a4, unsigned char *a5, uint64_t a6)
{
  id v11 = a1;
  if (sub_100011180(v11))
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10001143C;
    v24[3] = &unk_1000F6620;
    v24[4] = a2;
    v24[5] = a3;
    v24[6] = a4;
    v24[7] = a5;
    v24[8] = a6;
    v24[9] = 0;
    sub_1000112C0(v24);
  }
  else
  {
    double v12 = sub_100038D5C(v11);
    [v12 bounds];
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    BKSDisplayServicesGetExternalDisplayScale();
    if (a2) {
      *a2 = v14;
    }
    if (a3) {
      *a3 = v16;
    }
    if (a4) {
      *a4 = v17;
    }
    if (a5)
    {
      float64x2_t v18 = [v12 nativeOrientation];
      *a5 = sub_100038F70(v18);
    }
    if (a6)
    {
      *(void *)a6 = 0;
      *(void *)(a6 + 8) = 0;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(a6 + 16) = _Q0;
    }
  }
}

uint64_t sub_100011180(void *a1)
{
  id v1 = a1;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x3032000000;
  id v11 = sub_100038A64;
  double v12 = sub_100038A74;
  id v13 = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _OWORD v7[2] = sub_10001132C;
  v7[3] = &unk_1000F6600;
  void v7[4] = &v8;
  sub_1000112C0(v7);
  uint64_t v2 = (void *)v9[5];
  if (v2)
  {
    uint64_t v3 = (uint64_t)[v2 isEqualToString:v1];
  }
  else
  {
    id v4 = v1;
    uint64_t v5 = v4;
    if (v4) {
      uint64_t v3 = (uint64_t)[v4 isEqualToString:BKSDisplayUUIDMainKey];
    }
    else {
      uint64_t v3 = 1;
    }
  }
  _Block_object_dispose(&v8, 8);

  return v3;
}

void sub_1000112A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000112C0(void *a1)
{
  id v1 = a1;
  os_unfair_lock_assert_not_owner((const os_unfair_lock *)&unk_100122E48);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_100122E48);
  v1[2](v1, qword_100122E40);

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_100122E48);
}

void sub_10001132C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isExternal])
  {
    id v4 = [v3 windowServerDisplay];
    uint64_t v5 = [v4 uniqueId];
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100038D04;
    block[3] = &unk_1000F8E78;
    id v9 = v3;
    if (qword_100122E20 != -1) {
      dispatch_once(&qword_100122E20, block);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (id)qword_100122E18);
  }
}

void sub_10001143C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v12 = v3;
  if (*(void *)(a1 + 32))
  {
    [v3 size];
    id v3 = v12;
    **(void **)(a1 + 32) = v4;
  }
  if (*(void *)(a1 + 40))
  {
    [v12 size];
    id v3 = v12;
    **(void **)(a1 + 40) = v5;
  }
  if (*(void *)(a1 + 48))
  {
    [v12 scale];
    id v3 = v12;
    **(void **)(a1 + 48) = v6;
  }
  if (*(void *)(a1 + 56))
  {
    **(unsigned char **)(a1 + 56) = [v12 nativeRotation];
    id v3 = v12;
  }
  id v7 = *(void **)(a1 + 64);
  if (v7)
  {
    [v12 normalizedDigitizerRect];
    id v3 = v12;
    *id v7 = v8;
    v7[1] = v9;
    _OWORD v7[2] = v10;
    v7[3] = v11;
  }
  if (*(void *)(a1 + 72))
  {
    **(unsigned char **)(a1 + 72) = [v12 isExternal];
    id v3 = v12;
  }
}

void sub_10001153C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 windowServerDisplay];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10001159C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, double a7)
{
  if (a1)
  {
    if (!a2) {
      __assert_rtn("-[BKDirectTouchState _appendSubsetOfHIDCollection:forDestination:toEventPoster:systemGestureIsPossible:pathLocations:initialTouchTimestamp:]", "BKDirectTouchState.mm", 2175, "pathCollectionEvent");
    }
    if (a3)
    {
      unsigned int v9 = *(_DWORD *)(a3 + 12);
      unsigned int v98 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      unsigned int v98 = 0;
      unsigned int v9 = 0;
    }
    id v102 = objc_alloc_init((Class)NSMutableArray);
    int v100 = objc_alloc_init(BKTouchContactSet);
    id v105 = a1;
    IOHIDEventGetTimeStamp();
    LODWORD(v85) = 0;
    HIDWORD(v85) = IOHIDEventGetEventFlags() & 0x20 | 4;
    cf = (__IOHIDEvent *)IOHIDEventCreateDigitizerEvent();
    id v10 = *((id *)v105 + 1);
    [v10 senderID:v85];
    IOHIDEventSetSenderID();

    IOHIDEventGetIntegerValue();
    IOHIDEventSetIntegerValue();
    IOHIDEventGetIntegerValue();
    IOHIDEventSetIntegerValue();
    IOHIDEventGetIntegerValue();
    IOHIDEventSetIntegerValue();
    IOHIDEventGetIntegerValue();
    IOHIDEventSetIntegerValue();
    IOHIDEventGetIntegerValue();
    IOHIDEventSetIntegerValue();

    CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
    CFArrayRef v12 = Children;
    if (Children)
    {
      CFIndex Count = CFArrayGetCount(Children);
      if (Count >= 1)
      {
        CFIndex v106 = Count;
        unsigned int v86 = v9;
        uint64_t v99 = 0;
        CFIndex v14 = 0;
        CFArrayRef v95 = v12;
LABEL_8:
        ValueAtIndex = CFArrayGetValueAtIndex(v12, v14);
        int Type = IOHIDEventGetType();
        if (Type != 11)
        {
          if (Type != 1
            || (IntegerValue = IOHIDEventGetIntegerValue(), __int16 v18 = IOHIDEventGetIntegerValue(), IntegerValue != 65280)
            || v18 != 38)
          {
            Copy = (const void *)IOHIDEventCreateCopy();
            IOHIDEventAppendEvent();
            CFRelease(Copy);
          }
          goto LABEL_120;
        }
        uint64_t v20 = IOHIDEventGetIntegerValue();
        if (v20 >= 30)
        {
          uint64_t v21 = BKLogTouchEvents();
          if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v20;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v21, OS_LOG_TYPE_ERROR, "bad path count:%d", buf, 8u);
          }
          goto LABEL_119;
        }
        uint64_t v21 = sub_100018B1C(*((id **)v105 + 14), v20);
        if (!v21)
        {
          long long v28 = BKLogTouchEvents();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v20;
            _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "no contact for pathIndex:%d", buf, 8u);
          }
          goto LABEL_118;
        }
        long long v110 = 0u;
        long long v111 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        id v22 = a6;
        id v23 = [v22 countByEnumeratingWithState:&v108 objects:v120 count:16];
        if (!v23)
        {
LABEL_29:

          CFArrayRef v12 = v95;
          long long v28 = BKLogTouchEvents();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v20;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v98;
            _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Filtering pathIndex:%d from ctx:%X", buf, 0xEu);
          }
          goto LABEL_118;
        }
        uint64_t v24 = *(void *)v109;
LABEL_19:
        uint64_t v25 = 0;
        while (1)
        {
          if (*(void *)v109 != v24) {
            objc_enumerationMutation(v22);
          }
          float64x2_t v26 = *(void **)(*((void *)&v108 + 1) + 8 * v25);
          if (v26)
          {
            if (v26[1] == v20)
            {
              double v103 = v26;

              int v71 = v103[25];
              int v72 = v103[26];
              double v73 = *((double *)v103 + 6);
              double v74 = *((double *)v103 + 7);
              double v75 = *((double *)v103 + 8);
              double v76 = *((double *)v103 + 9);
LABEL_32:
              uint64_t v29 = IOHIDEventCreateCopy();
              IOHIDEventSetFloatValue();
              IOHIDEventSetFloatValue();
              LODWORD(v30) = IOHIDEventGetIntegerValue();
              uint64_t v31 = IOHIDEventGetIntegerValue();
              int v93 = v71;
              id v104 = (const void *)v29;
              uint64_t v32 = IOHIDEventGetIntegerValue();
              uint64_t v33 = v32;
              BOOL v34 = v31 == 0;
              BOOL v94 = v32 != 0;
              int v35 = *(unsigned __int8 *)(v21 + 296);
              int v91 = v72;
              unsigned int v92 = v34 & (v30 >> 1);
              int v96 = v35;
              if (v103)
              {
                BOOL v36 = v35 == 0;
                BOOL v37 = v35 != 0;
                unsigned int v38 = (v31 != 0) & (v30 >> 1);
                uint64_t v39 = *((void *)v103 + 2);
                if (!v36) {
                  LOBYTE(v38) = 1;
                }
                char v40 = v39 != 3 || v37;
                if (v39 == 2) {
                  char v41 = v38 | v30 & (v32 != 0);
                }
                else {
                  char v41 = 1;
                }
                if (v39)
                {
                  unsigned int v42 = v34 & (v30 >> 1);
                }
                else
                {
                  BOOL v37 = 0;
                  unsigned int v42 = 0;
                }
                if (v42 != 1 || v39 == 4)
                {
                  if (v39 == 3) {
                    unsigned int v48 = 3;
                  }
                  else {
                    unsigned int v48 = 1;
                  }
                  if (v39 == 2) {
                    unsigned int v48 = 2;
                  }
                  if (v39 == 4) {
                    unsigned int v48 = 4;
                  }
                  CFArrayRef v12 = v95;
                }
                else
                {
                  char v87 = v30;
                  uint64_t v30 = v31;
                  BOOL v43 = v37;
                  uint64_t v44 = v21;
                  char v45 = v41;
                  BOOL v46 = v34;
                  char v47 = v40;
                  uint64_t v88 = v44;
                  [*((id *)v105 + 8) noteTouchUpOccurred:*(unsigned int *)(v44 + 16) detached:v96 != 0 context:v98 clientPort:v86];
                  if (v39 == 3) {
                    unsigned int v48 = 3;
                  }
                  else {
                    unsigned int v48 = 1;
                  }
                  if (v39 == 2) {
                    unsigned int v48 = 2;
                  }
                  CFArrayRef v12 = v95;
                  char v40 = v47;
                  LOBYTE(v34) = v46;
                  char v41 = v45;
                  BOOL v37 = v43;
                  uint64_t v31 = v30;
                  LOBYTE(v30) = v87;
                  uint64_t v21 = v88;
                }
                if (v37) {
                  uint64_t v49 = v48;
                }
                else {
                  uint64_t v49 = 0;
                }
              }
              else
              {
                uint64_t v49 = 0;
                char v40 = 1;
                char v41 = 1;
                CFArrayRef v12 = v95;
              }
              if (v33) {
                char v50 = 1;
              }
              else {
                char v50 = v34;
              }
              if ((v50 & 1) == 0)
              {
                BOOL v94 = 1;
                char v51 = v40;
                IOHIDEventSetIntegerValue();
                char v40 = v51;
              }
              if (v40)
              {
                if ((v41 & 1) == 0)
                {
                  v52 = BKLogTouchEvents();
                  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&uint8_t buf[4] = v98;
                    _os_log_debug_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "-------> synthetic touch down due to client change to contextID: 0x%x", buf, 8u);
                  }
                }
                if (v31) {
                  int v53 = 1;
                }
                else {
                  int v53 = v94;
                }
                if (v53 == 1 && (v30 & 0x80) == 0) {
                  sub_100014070((uint64_t)v100, v21);
                }
              }
              else
              {
                if (v31)
                {
                  v54 = BKLogTouchEvents();
                  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&uint8_t buf[4] = v98;
                    _os_log_debug_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "-------> synthetic touch cancel due to client change to contextID: 0x%x", buf, 8u);
                  }
                }
                else
                {
                  v54 = BKLogTouchEvents();
                  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&uint8_t buf[4] = v98;
                    _os_log_debug_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "-------> synthetic range out due to client change to contextID: 0x%x", buf, 8u);
                  }
                }

                IOHIDEventSetIntegerValue();
                IOHIDEventSetIntegerValue();
              }
              IOHIDEventSetIntegerValue();
              if (!v96 && !*(_DWORD *)(v21 + 16) && !v93 && !v91 && *(double *)(v21 + 192) == 0.0) {
                goto LABEL_117;
              }
              id v55 = objc_alloc_init((Class)BKSHIDEventDigitizerPathAttributes);
              [v55 setPathIndex:v20];
              [v55 setTouchIdentifier:*(unsigned int *)(v21 + 16)];
              [v55 setUserIdentifier:*(unsigned int *)(v21 + 20)];
              [v55 setHitTestContextCategory:*(void *)(v21 + 56)];
              double v56 = *(double *)(v21 + 192);
              *(float *)&double v56 = v56;
              [v55 setZGradient:v56];
              [v55 setLocus:v49];
              [v55 setHitTestLocation:v73, v74];
              [v55 setPreciseLocation:v75, v76];
              if (*(void *)(v21 + 272))
              {
                __int16 v57 = [*(id *)(v21 + 288) firstObject];
                int v58 = v57 ? v57[2] : 0;
                BOOL v59 = v58 == v98;

                if (v59) {
                  [v55 setSecurityAnalysis:*(void *)(v21 + 272)];
                }
              }
              if (!v92) {
                goto LABEL_116;
              }
              sub_100012860((const __CFArray **)buf, (uint64_t)ValueAtIndex);
              CFIndex v60 = *(void *)&buf[8];
              uint64_t v61 = v117;
              if (*(uint64_t *)&buf[8] >= (uint64_t)v117)
              {
LABEL_112:
                int v69 = 0;
                goto LABEL_113;
              }
              CFArrayRef v62 = *(const __CFArray **)buf;
              while (1)
              {
                if (v61) {
                  CFArrayGetValueAtIndex(v62, v60);
                }
                if (IOHIDEventGetType() == 1)
                {
                  uint64_t v63 = IOHIDEventGetIntegerValue();
                  uint64_t v64 = IOHIDEventGetIntegerValue();
                  if (v63 == 65280 && v64 == 34)
                  {
                    uint64_t v65 = IOHIDEventGetIntegerValue();
                    int v66 = v65;
                    if (v65 > 7)
                    {
                      DataValue = (_DWORD *)IOHIDEventGetDataValue();
                      if (*DataValue == 1)
                      {
                        int v69 = DataValue[1];
LABEL_113:
                        id v70 = sub_100018C94((uint64_t)v105, v21, v69, a3);
                        if (v70) {
                          [v55 setAuthenticationMessage:v70];
                        }

LABEL_116:
                        [v102 addObject:v55];

LABEL_117:
                        IOHIDEventAppendEvent();
                        CFRelease(v104);
                        ++v99;
                        long long v28 = v103;
LABEL_118:

LABEL_119:
LABEL_120:
                        if (++v14 == v106)
                        {
                          if (v99 > 0)
                          {
                            id v77 = objc_alloc_init((Class)BKSHIDEventDigitizerAttributes);
                            v78 = +[BKSHIDEventDeferringToken tokenForIdentifierOfCAContext:v98];
                            [v77 setToken:v78];

                            [v77 setInitialTouchTimestamp:a7];
                            [v77 setSystemGesturesPossible:a5 != 0];
                            [v77 setPathAttributes:v102];
                            if (a3)
                            {
                              id v79 = *(id *)(a3 + 16);
                              v80 = v79;
                              if (v79) {
                                [v77 setSceneTouchBehavior:[v79 touchBehavior]];
                              }
                            }
                            else
                            {
                              v80 = 0;
                            }
                            if (*((void *)v105 + 10)) {
                              [v77 setOptions:256];
                            }
                            sub_100012860((const __CFArray **)buf, (uint64_t)cf);
                            sub_100018934((unint64_t)buf);
                            int v81 = 0;
                            int v82 = 0;
                            *(_OWORD *)uint64_t v112 = *(_OWORD *)buf;
                            long long v113 = v117;
                            long long v114 = v118;
                            uint64_t v115 = v119;
                            while (*((void *)&v113 + 1))
                            {
                              *((void *)&v114 + 1) = *((void *)&v113 + 1);
                              uint64_t v115 = v114;
                              IOHIDEventGetIntegerValue();
                              IOHIDEventGetIntegerValue();
                              unint64_t v83 = IOHIDEventGetIntegerValue();
                              v81 |= v83 & 0xF060807;
                              v82 |= (v83 >> 7) & 1;
                              sub_100018934((unint64_t)v112);
                            }
                            if ((v82 & 1) != 0 && ![(BKTouchContactSet *)v100 count])
                            {
                              v84 = BKLogTouchEvents();
                              if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
                              {
                                *(_DWORD *)buf = 67109120;
                                *(_DWORD *)&uint8_t buf[4] = v98;
                                _os_log_debug_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "full collection cancel contextID: 0x%X", buf, 8u);
                              }
                            }
                            IOHIDEventSetIntegerValue();
                            IOHIDEventSetIntegerValue();
                            IOHIDEventSetIntegerValue();
                            [*((id *)v105 + 16) setObject:v100 forKey:v98];
                            sub_100013710(a4, cf, v77, (void *)a3);
                          }
                          goto LABEL_140;
                        }
                        goto LABEL_8;
                      }
                    }
                    else
                    {
                      id v67 = BKLogTouchEvents();
                      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)uint64_t v112 = 67109120;
                        *(_DWORD *)&v112[4] = v66;
                        _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "malformed AX subevent (length is %d), want at least 8 bytes", v112, 8u);
                      }
                    }
                  }
                }
                if (v61 == ++v60) {
                  goto LABEL_112;
                }
              }
            }
          }
          else if (!v20)
          {

            double v103 = 0;
            int v71 = 0;
            int v72 = 0;
            double v73 = 0.0;
            double v74 = 0.0;
            double v75 = 0.0;
            double v76 = 0.0;
            goto LABEL_32;
          }
          if (v23 == (id)++v25)
          {
            id v27 = [v22 countByEnumeratingWithState:&v108 objects:v120 count:16];
            id v23 = v27;
            if (!v27) {
              goto LABEL_29;
            }
            goto LABEL_19;
          }
        }
      }
    }
LABEL_140:
    CFRelease(cf);
  }
}

void sub_100012354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

id sub_100012808()
{
  if (qword_100122FD8 != -1) {
    dispatch_once(&qword_100122FD8, &stru_1000F75A8);
  }
  id v0 = (void *)qword_100122FD0;

  return v0;
}

const __CFArray **sub_100012860(const __CFArray **a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
    *a1 = Children;
    if (Children) {
      a1[2] = (const __CFArray *)CFArrayGetCount(Children);
    }
  }
  return a1;
}

void sub_1000128A8(uint64_t a1, uint64_t a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10008B5A8;
  v2[3] = &unk_1000F8520;
  void v2[4] = a1;
  sub_100012920(a2, v2);
}

void sub_100012920(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (a1)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v4 = *(id *)(a1 + 16);
    id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v15;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v15 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v14 + 1) + 8 * (void)v8);
          if (v9)
          {
            uint64_t v10 = *(void *)(v9 + 8);
            id v11 = *(id *)(v9 + 16);
            uint64_t v12 = *(void *)(v9 + 24);
          }
          else
          {
            id v11 = 0;
            uint64_t v10 = 0;
            uint64_t v12 = 0;
          }
          v3[2](v3, v10, v11, v12);

          uint64_t v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v13 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
        id v6 = v13;
      }
      while (v13);
    }
  }
}

void sub_100012A70(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v13 = a3;
  id v6 = a4;
  uint64_t v7 = v6;
  if (v6) {
    uint64_t v8 = v6[3];
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = +[NSNumber numberWithUnsignedInt:v8];
  uint64_t v10 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:v9];
  uint64_t v11 = (uint64_t)[v10 integerValue];

  if (v11 >= 2)
  {
    uint64_t v12 = +[NSNumber numberWithInteger:v11 - 1];
    [*(id *)(*(void *)(a1 + 32) + 8) setObject:v12 forKeyedSubscript:v9];

    [v13 setOptions:[v13 options] | 0x200];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100012B90(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v8 = *(void **)(v4 + 40);
    if (v8) {
      uint64_t v8 = (void *)v8[2];
    }
    v52 = v8;
    sub_100013978((double *)v4, a3, v52);
    [a3 setActiveModifiers:*(void *)(v4 + 104)];
    BKSHIDEventSetAttributes();
    if (a4) {
      uint64_t v9 = *(unsigned int *)(a4 + 12);
    }
    else {
      uint64_t v9 = 0;
    }
    if ((~IOHIDEventGetIntegerValue() & 0x20002) == 0 && IOHIDEventGetIntegerValue() == 1)
    {
      uint64_t v10 = BKHIDEventRoutingGetClientConnectionManager();
      uint64_t v11 = [v10 clientForTaskPort:v9];

      if (v11)
      {
        uint64_t v12 = BKLogTouchEvents();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          id v13 = [v11 bundleID];
          [v11 versionedPID];
          long long v14 = NSStringFromBSVersionedPID();
          *(_DWORD *)buf = 138543618;
          id v66 = v13;
          __int16 v67 = 2114;
          v68 = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "send tapToWake to %{public}@ pid:%{public}@", buf, 0x16u);
        }
      }
    }
    int v53 = sub_100013920(*(void *)(v4 + 184));
    sub_1000128A8(v4, (uint64_t)v53);
    long long v15 = BKLogTouchEvents();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = BKSHIDEventGetConciseDescription();
      *(_DWORD *)buf = 138543362;
      id v66 = v39;
      _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    [*(id *)(v4 + 48) sendEvent:a2 toClientTaskPort:v9];
    if (a4) {
      unsigned int v16 = *(_DWORD *)(a4 + 8);
    }
    else {
      unsigned int v16 = 0;
    }
    uint64_t v17 = *(void *)(v4 + 184);
    if (v17)
    {
      if (IOHIDEventGetType() != 11)
      {
        char v40 = +[NSString stringWithFormat:@"must be a digitizer event"];
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          NSStringFromSelector("_saveWillUpdateEvents:port:contextID:");
          id v41 = (id)objc_claimAutoreleasedReturnValue();
          unsigned int v42 = (objc_class *)objc_opt_class();
          BOOL v43 = NSStringFromClass(v42);
          *(_DWORD *)buf = 138544642;
          id v66 = v41;
          __int16 v67 = 2114;
          v68 = v43;
          __int16 v69 = 2048;
          uint64_t v70 = v17;
          __int16 v71 = 2114;
          CFStringRef v72 = @"BKDirectTouchUpdateEvents.mm";
          __int16 v73 = 1024;
          int v74 = 271;
          __int16 v75 = 2114;
          double v76 = v40;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
        }
        [v40 UTF8String];
        _bs_set_crash_log_message();
        __break(0);
        JUMPOUT(0x100013194);
      }
      uint64_t v18 = sub_1000134CC(a2);
      int IntegerValue = IOHIDEventGetIntegerValue();
      if (v18)
      {
        if (IntegerValue)
        {
          sub_10003C4B4(v17, v18);
          p_isa = (id *)objc_claimAutoreleasedReturnValue();
          if (!p_isa)
          {
            uint64_t v21 = objc_alloc_init(_BKEventUpdateGeneration);
            p_isa = (id *)&v21->super.isa;
            if (v21) {
              v21->_generationCFIndex Count = v18;
            }
            id v22 = *(void **)(v17 + 8);
            if (!v22)
            {
              id v23 = objc_alloc_init((Class)NSMutableArray);
              uint64_t v24 = *(void **)(v17 + 8);
              *(void *)(v17 + 8) = v23;

              id v22 = *(void **)(v17 + 8);
            }
            [v22 addObject:p_isa];
            if (!p_isa)
            {
              uint64_t v44 = +[NSString stringWithFormat:@"this is Unix, that can't happen"];
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                NSStringFromSelector("_saveWillUpdateEvents:port:contextID:");
                id v45 = (id)objc_claimAutoreleasedReturnValue();
                BOOL v46 = (objc_class *)objc_opt_class();
                char v47 = NSStringFromClass(v46);
                *(_DWORD *)buf = 138544642;
                id v66 = v45;
                __int16 v67 = 2114;
                v68 = v47;
                __int16 v69 = 2048;
                uint64_t v70 = v17;
                __int16 v71 = 2114;
                CFStringRef v72 = @"BKDirectTouchUpdateEvents.mm";
                __int16 v73 = 1024;
                int v74 = 281;
                __int16 v75 = 2114;
                double v76 = v44;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
              }
              [v44 UTF8String];
              _bs_set_crash_log_message();
              __break(0);
              JUMPOUT(0x100013290);
            }
          }
          id v25 = p_isa[17];
          long long v58 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          id v26 = v25;
          id v27 = [v26 countByEnumeratingWithState:&v58 objects:buf count:16];
          if (v27)
          {
            uint64_t v28 = *(void *)v59;
            do
            {
              uint64_t v29 = 0;
              do
              {
                if (*(void *)v59 != v28) {
                  objc_enumerationMutation(v26);
                }
                uint64_t v30 = *(_DWORD **)(*((void *)&v58 + 1) + 8 * (void)v29);
                if (v30)
                {
                  if (v30[3] == v9 && v30[2] == v16)
                  {
                    uint64_t v33 = v30;

                    goto LABEL_44;
                  }
                }
                else if (!(v9 | v16))
                {
                  goto LABEL_40;
                }
                uint64_t v29 = (char *)v29 + 1;
              }
              while (v27 != v29);
              id v31 = [v26 countByEnumeratingWithState:&v58 objects:buf count:16];
              id v27 = v31;
            }
            while (v31);
          }
LABEL_40:

          uint64_t v32 = objc_alloc_init(_BKUpdateEventClient);
          uint64_t v33 = v32;
          if (v32)
          {
            v32->super._contextID = v16;
            v32->super._clientPort = v9;
          }
          [v26 addObject:v32];
LABEL_44:
          sub_100012860((const __CFArray **)v62, a2);
          sub_100018934((unint64_t)v62);
          unsigned int v34 = 0;
          long long v54 = *(_OWORD *)v62;
          long long v55 = *(_OWORD *)&v62[16];
          long long v56 = v63;
          uint64_t v57 = v64[0];
          while (*((void *)&v55 + 1))
          {
            uint64_t v35 = v56;
            *((void *)&v56 + 1) = *((void *)&v55 + 1);
            uint64_t v57 = v56;
            int v36 = IOHIDEventGetIntegerValue();
            int v37 = sub_10003C18C((uint64_t)p_isa, v35);
            if (v36)
            {
              sub_10003C320((uint64_t)p_isa, v37 | v36, v35);
              v34 |= 1 << v35;
            }
            sub_100018934((unint64_t)&v54);
          }
          if (v33)
          {
            v33->_pathIDMask = v34;
            if (!v33->_pathIDMask)
            {
              [v26 removeObjectIdenticalTo:v33];
              if (![v26 count])
              {
                uint64_t v38 = sub_10003C600(v17, v18);
                if ((id *)v38 != p_isa)
                {
                  unsigned int v48 = +[NSString stringWithFormat:@"pending/removed items don't match: %@/%@", v38, p_isa];
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    NSStringFromSelector("_saveWillUpdateEvents:port:contextID:");
                    id v49 = (id)objc_claimAutoreleasedReturnValue();
                    char v50 = (objc_class *)objc_opt_class();
                    char v51 = NSStringFromClass(v50);
                    *(_DWORD *)CFArrayRef v62 = 138544642;
                    *(void *)&v62[4] = v49;
                    *(_WORD *)&v62[12] = 2114;
                    *(void *)&v62[14] = v51;
                    *(_WORD *)&v62[22] = 2048;
                    *(void *)&v62[24] = v17;
                    LOWORD(v63) = 2114;
                    *(void *)((char *)&v63 + 2) = @"BKDirectTouchUpdateEvents.mm";
                    WORD5(v63) = 1024;
                    HIDWORD(v63) = 322;
                    LOWORD(v64[0]) = 2114;
                    *(void *)((char *)v64 + 2) = v48;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", v62, 0x3Au);
                  }
                  [v48 UTF8String];
                  _bs_set_crash_log_message();
                  __break(0);
                  JUMPOUT(0x10001338CLL);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1000133A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000134CC(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = +[NSString stringWithFormat:@"passing a NULL IOHIDEventRef is not recommended"];
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = +[NSString stringWithUTF8String:"CFIndex BKDigitizerUpdateGenerationCount(IOHIDEventRef)"];
      int v4 = 138544130;
      id v5 = v3;
      __int16 v6 = 2114;
      CFStringRef v7 = @"BKDirectTouchUpdateEvents.mm";
      __int16 v8 = 1024;
      int v9 = 174;
      __int16 v10 = 2114;
      uint64_t v11 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ (%{public}@:%i) : %{public}@", (uint8_t *)&v4, 0x26u);
    }
    [v2 UTF8String];
    _bs_set_crash_log_message();
    __break(0);
    JUMPOUT(0x1000135F8);
  }

  return IOHIDEventGetIntegerValue();
}

void sub_100013600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100013710(uint64_t a1, __IOHIDEvent *a2, void *a3, void *a4)
{
  if (a1)
  {
    CFStringRef v7 = a4;
    context = a3;
    sub_1000138B0(a1);
    int v9 = objc_alloc_init(BKHIDCollectedEvent);
    uint64_t v18 = v9;
    if (v9)
    {
      __int16 v10 = v9;
      event = v9->_event;
      if (event != a2)
      {
        if (event) {
          CFRelease(event);
        }
        uint64_t v12 = (__IOHIDEvent *)CFRetain(a2);
        __int16 v10 = v18;
        v18->_event = v12;
      }
      objc_storeStrong((id *)&v10->_attributes, a3);

      id v13 = v7;
      context = v18->_context;
      v18->_context = (BKCAContextDestination *)v13;
    }

    if (v7) {
      uint64_t v14 = v7[3];
    }
    else {
      uint64_t v14 = 0;
    }

    long long v15 = +[NSNumber numberWithUnsignedInt:v14];
    unsigned int v16 = [*(id *)(a1 + 8) objectForKeyedSubscript:v15];
    uint64_t v17 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)[v16 integerValue] + 1);
    [*(id *)(a1 + 8) setObject:v17 forKeyedSubscript:v15];

    [*(id *)(a1 + 16) addObject:v18];
  }
}

void sub_1000138B0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v2 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v3 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v2;

    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    id v5 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v4;
  }
}

id sub_100013920(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(id *)(a1 + 16);
    uint64_t v3 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

double *sub_100013978(double *result, void *a2, void *a3)
{
  if (result)
  {
    id v5 = result;
    if (a3 && ([a3 _isBuiltinDisplay] & 1) == 0) {
      [a2 setDisplay:a3];
    }
    double v6 = 0.0;
    if (!*((unsigned char *)v5 + 209)) {
      double v6 = v5[24];
    }
    [a2 setMaximumPositionZ:v6];
    LODWORD(v7) = *((_DWORD *)v5 + 50);
    return (double *)[a2 setMaximumForce:v7];
  }
  return result;
}

void sub_100013C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100013C48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = v3;
  if (!v3)
  {
    double v7 = +[NSAssertionHandler currentHandler];
    __int16 v8 = +[NSString stringWithUTF8String:"BOOL BKDisplayIsHeadless(void)_block_invoke"];
    [v7 handleFailureInFunction:v8 file:@"BKDisplay.m" lineNumber:682 description:@"please invoke BKDisplayStartWindowServer before BKDisplayIsHeadless"];

    id v3 = 0;
  }
  uint64_t v4 = [v3 windowServerDisplay];
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  double v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

uint64_t *sub_100013D14(uint64_t *a1)
{
  return a1;
}

void sub_100013D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100013E00(void *result, uint64_t a2)
{
  if (result)
  {
    id v2 = (void *)result[3];
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000095C8;
    v3[3] = &unk_1000F5B40;
    v3[4] = a2;
    return [v2 enumerateKeysAndObjectsWithIndexesUsingBlock:v3];
  }
  return result;
}

void sub_100014070(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    if (v3 < 31)
    {
      uint64_t v6 = a1 + 16;
      uint64_t v4 = *(id *)(a1 + 16 + 8 * v3);
      if (v4)
      {
        double v7 = BKLogTouchEvents();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          int v8 = 67109120;
          LODWORD(v9) = v3;
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "addContact: replacing existing contact for pathIndex %d", (uint8_t *)&v8, 8u);
        }

        sub_10001B6A4(a1, (uint64_t)v4);
      }
      [*(id *)(a1 + 8) addObject:a2];
      *(void *)(v6 + 8 * v3) = a2;
    }
    else
    {
      uint64_t v4 = BKLogTouchEvents();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v8 = 138543362;
        uint64_t v9 = a2;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "addContact: pathIndex out of bounds -- %{public}@", (uint8_t *)&v8, 0xCu);
      }
    }
  }
}

BKTouchHitTestContextMap *sub_1000141C0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v160 = a3;
  id v167 = a4;
  id v161 = a5;
  id v162 = a6;
  if (a1)
  {
    v168 = objc_alloc_init(BKTouchHitTestContextMap);
    __int16 v10 = *(void **)(a1 + 16);
    if (v10) {
      __int16 v10 = (void *)v10[1];
    }
    uint64_t v11 = v10;
    uint64_t v12 = [v11 displayUUID];

    id v13 = *(void **)(a1 + 32);
    if (v13) {
      id v13 = (void *)v13[1];
    }
    v159 = v13;
    id v190 = v159;
    long long v192 = 0;
    *(void *)long long v193 = 0;
    id v158 = v12;
    id v191 = v158;
    *(_DWORD *)&v193[7] = 0;
    *(int64x2_t *)&v193[16] = vdupq_n_s64(0xC197D783FC000000);
    *(_OWORD *)&v193[32] = *(_OWORD *)&v193[16];
    *(_OWORD *)&v193[48] = *(_OWORD *)&v193[16];
    __int16 v194 = 0;
    long long v186 = 0u;
    long long v187 = 0u;
    long long v188 = 0u;
    long long v189 = 0u;
    id obj = v160;
    id v166 = [obj countByEnumeratingWithState:&v186 objects:v195 count:16];
    if (v166)
    {
      uint64_t v165 = *(void *)v187;
      *(void *)&long long v14 = 138543618;
      long long v157 = v14;
      do
      {
        v169 = 0;
        do
        {
          if (*(void *)v187 != v165) {
            objc_enumerationMutation(obj);
          }
          uint64_t v15 = *(void *)(*((void *)&v186 + 1) + 8 * (void)v169);
          uint64_t v16 = *(void *)(v15 + 8);
          long long v17 = *(_OWORD *)(v15 + 216);
          *(_OWORD *)&v193[8] = *(_OWORD *)(v15 + 200);
          *(_OWORD *)&v193[24] = v17;
          *(_OWORD *)&v193[40] = *(_OWORD *)(v15 + 232);
          *(void *)&v193[56] = *(void *)(v15 + 248);
          *(void *)long long v193 = v16;
          uint64_t v175 = v15;
          uint64_t v18 = (id *)(id)v15;
          double v19 = v168;
          v183 = v18;
          id v20 = v18[32];
          uint64_t v21 = v20;
          if (v20)
          {
            id v22 = [v20 contextIDsToAlwaysSendTouches];
            id v23 = v22;
            if (v22)
            {
              v179 = v22;
              id v24 = [v22 count];
              id v23 = v179;
              if (v24)
              {
                long long v223 = 0u;
                long long v221 = 0u;
                long long v222 = 0u;
                *(_OWORD *)long long v220 = 0u;
                id v25 = v179;
                id v26 = [v25 countByEnumeratingWithState:v220 objects:idx count:16];
                if (v26)
                {
                  uint64_t v27 = *(void *)v221;
                  do
                  {
                    for (uint64_t i = 0; i != v26; uint64_t i = (char *)i + 1)
                    {
                      if (*(void *)v221 != v27) {
                        objc_enumerationMutation(v25);
                      }
                      id v29 = [*(id *)(*(void *)&v220[8] + 8 * i) unsignedIntValue:v157];
                      id v30 = [v190 taskPortForContextID:v29 displayUUID:v191];
                      uint64_t v31 = (uint64_t)v30;
                      if (v29) {
                        BOOL v32 = v30 == 0;
                      }
                      else {
                        BOOL v32 = 1;
                      }
                      if (!v32 && v30 != -1)
                      {
                        sub_1000109A8((uint64_t)v196, *(void *)(a1 + 16), (uint64_t)&v193[8], (uint64_t)v29, (uint64_t)v191);
                        unsigned int v34 = BKLogTouchEvents();
                        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 67109632;
                          *(_DWORD *)&uint8_t buf[4] = v29;
                          *(_WORD *)&buf[8] = 1024;
                          *(_DWORD *)&buf[10] = v31;
                          *(_WORD *)&buf[14] = 1024;
                          LODWORD(v227) = *(_DWORD *)v193;
                          _os_log_debug_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Always send: adding %X %X %d", buf, 0x14u);
                        }

                        uint64_t v35 = sub_10000A270(*(void *)(a1 + 16), (uint64_t)v29, v31);
                        [v183[35] addObject:v35];
                        sub_100015FF4((uint64_t)v19, v35, *((_DWORD *)v183 + 5), *(int64_t *)v193, (CGFloat *)v196, 4);
                      }
                    }
                    id v26 = [v25 countByEnumeratingWithState:v220 objects:idx count:16];
                  }
                  while (v26);
                }

                id v23 = v179;
              }
            }
          }
          int v36 = v183;
          int v37 = v19;
          if (v36[6] == (id)1)
          {
            v36[6] = (id)2;
            id v38 = [v36[35] copy];
            long long v223 = 0u;
            long long v221 = 0u;
            long long v222 = 0u;
            *(_OWORD *)long long v220 = 0u;
            id v39 = v38;
            id v40 = [v39 countByEnumeratingWithState:v220 objects:idx count:16];
            if (v40)
            {
              uint64_t v41 = *(void *)v221;
              do
              {
                unsigned int v42 = 0;
                do
                {
                  if (*(void *)v221 != v41) {
                    objc_enumerationMutation(v39);
                  }
                  BOOL v43 = *(unsigned int **)(*(void *)&v220[8] + 8 * (void)v42);
                  if (v43) {
                    uint64_t v44 = v43[2];
                  }
                  else {
                    uint64_t v44 = 0;
                  }
                  id v45 = BKLogTouchEvents();
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)long long v196 = 67109376;
                    *(_DWORD *)&v196[4] = v44;
                    *(_WORD *)&v196[8] = 1024;
                    *(_DWORD *)&v196[10] = *(_DWORD *)v193;
                    _os_log_debug_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "Start avoiding: adding %X %d", v196, 0xEu);
                  }

                  sub_1000109A8((uint64_t)v196, *(void *)(a1 + 16), (uint64_t)&v193[8], v44, (uint64_t)v191);
                  sub_100015E94(v43, v36, (CGFloat *)v196, 3, v37);
                  unsigned int v42 = (char *)v42 + 1;
                }
                while (v40 != v42);
                id v46 = [v39 countByEnumeratingWithState:v220 objects:idx count:16];
                id v40 = v46;
              }
              while (v46);
            }

            char v47 = [v39 bs_filter:&stru_1000F8CC8];
            id v48 = [v47 mutableCopy];
            id v49 = v36[35];
            v36[35] = v48;
          }
          uint64_t v172 = v36;
          id v50 = v167;
          char v51 = v50;
          id v52 = v36[6];
          if (v52 == (id)2) {
            goto LABEL_51;
          }
          if (v52 == (id)3)
          {
            v36[6] = 0;
LABEL_51:

            goto LABEL_185;
          }
          id v53 = v172[4];
          BOOL v55 = v52 != (id)4 && v53 != 0;
          if (!v55 || v53 != (id)1)
          {
            BOOL v57 = v55;
            char v58 = !v55;
            if (v53 != (id)2) {
              char v58 = 1;
            }
            if (v58)
            {

              if (v57 || v53 != (id)2)
              {
                unsigned int v80 = 0;
                int v81 = v183;
              }
              else
              {
                int v81 = v183;
                if (v36[6] == (id)4) {
                  unsigned int v80 = [*(id *)(a1 + 24) _queue_hasTouchEnterSlots];
                }
                else {
                  unsigned int v80 = 0;
                }
              }
              BOOL v79 = v57;
              goto LABEL_90;
            }
            if ([v50 count])
            {
              double v59 = *(double *)&v193[32];
              double v60 = *(double *)&v193[40];
              long long v61 = v172;
              id v62 = v51;
              double v63 = *((double *)v61 + 13);
              double v64 = *((double *)v61 + 14);
              CGFloat v65 = *((double *)v61 + 15);
              CGFloat v66 = *((double *)v61 + 16);
              CGFloat v67 = *((double *)v61 + 9);
              CGFloat v68 = *((double *)v61 + 10);
              CGFloat v69 = *((double *)v61 + 11);
              CGFloat v70 = *((double *)v61 + 12);
              int v71 = *((unsigned __int8 *)v61 + 296);
              idx[0] = 0;
              idx[1] = (CFIndex)idx;
              *(void *)&long long v202 = 0x5012000000;
              *((void *)&v202 + 1) = sub_100096FE8;
              *(void *)&long long v203 = nullsub_6;
              *((void *)&v203 + 1) = &unk_1000E0DB5;
              *(CGFloat *)&long long v204 = v67;
              *((CGFloat *)&v204 + 1) = v68;
              *(CGFloat *)&long long v205 = v69;
              *((CGFloat *)&v205 + 1) = v70;
              *(void *)long long v220 = 0;
              *(void *)&v220[8] = v220;
              *(void *)&long long v221 = 0x5012000000;
              *((void *)&v221 + 1) = sub_100096FE8;
              *(void *)&long long v222 = nullsub_6;
              *((void *)&v222 + 1) = &unk_1000E0DB5;
              *(double *)&long long v223 = v63;
              *((double *)&v223 + 1) = v64;
              CGFloat v224 = v65;
              CGFloat v225 = v66;
              *(void *)buf = 0;
              *(void *)&buf[8] = buf;
              long long v227 = 0x2020000000uLL;
              *(void *)long long v196 = _NSConcreteStackBlock;
              *(void *)&v196[8] = 3221225472;
              *(void *)&long long v197 = sub_100004270;
              *((void *)&v197 + 1) = &unk_1000F8CF0;
              CGFloat v176 = v59;
              *((double *)&v199 + 1) = v59;
              CGFloat v72 = v63;
              CGFloat point = v60;
              double v200 = v60;
              CGFloat v73 = v64;
              *(void *)&long long v198 = buf;
              *((void *)&v198 + 1) = idx;
              *(void *)&long long v199 = v220;
              id v180 = v62;
              [v62 enumerateObjectsUsingBlock:v196];
              v236.origin.x = v67;
              v236.origin.y = v68;
              v236.size.width = v69;
              v236.size.height = v70;
              if (!CGRectEqualToRect(v236, *(CGRect *)(idx[1] + 48)))
              {
                CGFloat v67 = *(double *)(idx[1] + 48);
                CGFloat v68 = *(double *)(idx[1] + 56);
                CGFloat v69 = *(double *)(idx[1] + 64);
                CGFloat v70 = *(double *)(idx[1] + 72);
                CGFloat v72 = *(double *)(*(void *)&v220[8] + 48);
                CGFloat v73 = *(double *)(*(void *)&v220[8] + 56);
                CGFloat v65 = *(double *)(*(void *)&v220[8] + 64);
                CGFloat v66 = *(double *)(*(void *)&v220[8] + 72);
                if (!CGRectIsEmpty(*(CGRect *)(v61 + 9)))
                {
                  int v74 = BKLogTouchEvents();
                  if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
                  {
                    __int16 v75 = BSStringFromCGRect();
                    double v76 = BSStringFromCGRect();
                    *(_DWORD *)v230 = v157;
                    objc_super v231 = v75;
                    __int16 v232 = 2114;
                    long long v233 = v76;
                    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Touch moved from this region: %{public}@ to this region: %{public}@", v230, 0x16u);
                  }
                }
              }
              if (v71
                || (v237.origin.x = v72,
                    v237.origin.y = v73,
                    v237.size.width = v65,
                    v237.size.height = v66,
                    v235.x = v176,
                    v235.y = point,
                    !CGRectContainsPoint(v237, v235)))
              {
                int v78 = 0;
              }
              else
              {
                id v77 = BKLogTouchEvents();
                if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v145 = BSStringFromCGRect();
                  v146 = BSStringFromCGRect();
                  *(_DWORD *)v230 = v157;
                  objc_super v231 = v145;
                  __int16 v232 = 2114;
                  long long v233 = v146;
                  _os_log_debug_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "Touch entered exclusive touch region of this touch region: %{public}@ exclusiveHitTestRegion: %{public}@, so no longer a candidate for hit testing", v230, 0x16u);
                }
                int v78 = 1;
              }
              *((CGFloat *)v61 + 13) = v72;
              *((CGFloat *)v61 + 14) = v73;
              *((CGFloat *)v61 + 15) = v65;
              *((CGFloat *)v61 + 16) = v66;
              *((CGFloat *)v61 + 9) = v67;
              *((CGFloat *)v61 + 10) = v68;
              *((CGFloat *)v61 + 11) = v69;
              *((CGFloat *)v61 + 12) = v70;
              _Block_object_dispose(buf, 8);
              _Block_object_dispose(v220, 8);
              _Block_object_dispose(idx, 8);

              if (v78) {
LABEL_81:
              }
                v36[6] = (id)4;
            }
            else if (!*((unsigned char *)v172 + 296))
            {
              goto LABEL_81;
            }
            BOOL v79 = 1;
            goto LABEL_83;
          }
          BOOL v79 = v172[5] != (id)2;
LABEL_83:

          unsigned int v80 = 0;
          int v81 = v183;
LABEL_90:
          BOOL v177 = v79;
          if (!v79 && !v80) {
            goto LABEL_121;
          }
          int v82 = v172;
          uint64_t SenderID = IOHIDEventGetSenderID();
          v84 = [v81[32] contextIDsToExcludeFromHitTesting];
          if (SenderID == 0x8000000817319379 || SenderID == 0x8000000817319374)
          {
            uint64_t v85 = [*(id *)(a1 + 24) _queue_contextIDsToIgnoreForZoomSenders];
            id v86 = v84;
            id v87 = v85;
            uint64_t v88 = v87;
            v89 = v87;
            if (v86 && (v89 = v86, v87))
            {
              id v90 = [v86 arrayByAddingObjectsFromArray:v87];
            }
            else
            {
              id v90 = v89;
            }
            v84 = v90;
          }
          int v91 = v192;
          long long v192 = v84;

          if (!(_BYTE)v194)
          {
            if (IOHIDEventConformsTo()
              && (sub_100012860((const __CFArray **)idx, a2), CFIndex v92 = idx[1], v93 = v202, idx[1] < (uint64_t)v202))
            {
              CFArrayRef v94 = (const __CFArray *)idx[0];
              while (1)
              {
                if (v93) {
                  CFArrayGetValueAtIndex(v94, v92);
                }
                if (IOHIDEventGetType() == 1
                  && IOHIDEventGetIntegerValue() == 65376
                  && IOHIDEventGetIntegerValue() == 11)
                {
                  break;
                }
                if (v93 == ++v92) {
                  goto LABEL_109;
                }
              }
              char v95 = 1;
            }
            else
            {
LABEL_109:
              char v95 = 0;
            }
            HIBYTE(v194) = v95;
            LOBYTE(v194) = 1;
          }
          if (!v177)
          {
LABEL_121:
            if (v80)
            {
              id v105 = v172;
              long long v218 = 0u;
              long long v219 = 0u;
              long long v216 = 0u;
              long long v217 = 0u;
              long long v214 = 0u;
              long long v215 = 0u;
              long long v212 = 0u;
              long long v213 = 0u;
              long long v210 = 0u;
              long long v211 = 0u;
              long long v208 = 0u;
              long long v209 = 0u;
              long long v206 = 0u;
              long long v207 = 0u;
              long long v204 = 0u;
              long long v205 = 0u;
              long long v202 = 0u;
              long long v203 = 0u;
              *(_OWORD *)idx = 0u;
              double v106 = sub_1000043D4((uint64_t)idx, 0, (uint64_t)&v190);
              if (LODWORD(idx[0]) && HIDWORD(idx[0]))
              {
                double v108 = v106;
                double v109 = v107;
                long long v110 = [*(id *)(a1 + 24) _queue_slotRecordForSlotID:];
                long long v111 = v110;
                if (v110)
                {
                  if (v110[3] == 2)
                  {
                    sub_100096DA0(v105, v110, (uint64_t)idx, (uint64_t)&v190, v108, v109);
                    sub_100009F04(a1, v105, (unsigned int *)idx, (uint64_t)&v190);
                  }
                }
                else
                {
                  sub_100004190(v105);
                }
              }
              else
              {
                sub_100004190(v105);
              }
            }
            goto LABEL_136;
          }
          int v96 = v82;
          long long v218 = 0u;
          long long v219 = 0u;
          long long v216 = 0u;
          long long v217 = 0u;
          long long v214 = 0u;
          long long v215 = 0u;
          long long v212 = 0u;
          long long v213 = 0u;
          long long v210 = 0u;
          long long v211 = 0u;
          long long v208 = 0u;
          long long v209 = 0u;
          long long v206 = 0u;
          long long v207 = 0u;
          long long v204 = 0u;
          long long v205 = 0u;
          long long v202 = 0u;
          long long v203 = 0u;
          *(_OWORD *)idx = 0u;
          if (v53 == (id)2) {
            id v97 = v220;
          }
          else {
            id v97 = 0;
          }
          *(void *)long long v220 = 0;
          double v98 = sub_1000043D4((uint64_t)idx, (uint64_t)v97, (uint64_t)&v190);
          if (v53 == (id)2)
          {
            double v100 = v98;
            double v101 = v99;
            id v102 = *(void **)v220;
            id v103 = *(id *)v220;
            if (LODWORD(idx[0]))
            {
              objc_storeStrong(v96 + 34, v102);
              if (HIDWORD(idx[0]))
              {
                id v104 = [*(id *)(a1 + 24) _queue_slotRecordForSlotID:];
                if (v104) {
                  sub_100096DA0(v96, v104, (uint64_t)idx, (uint64_t)&v190, v100, v101);
                }
              }
              else
              {
                sub_100004190(v96);
              }
LABEL_134:
              sub_100009F04(a1, v96, (unsigned int *)idx, (uint64_t)&v190);
              goto LABEL_135;
            }
          }
          else
          {
            id v103 = 0;
            if (LODWORD(idx[0])) {
              goto LABEL_134;
            }
          }
          sub_100006824((uint64_t)v96, 0);
          sub_100004190(v96);
LABEL_135:

LABEL_136:
          uint64_t v112 = v172;
          v184 = v37;
          id v173 = [*(id *)(a1 + 8) filterDestinations:v112[36]];
          long long v113 = BKLogTouchDeliveryPolicy();
          if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
          {
            v144 = [*(id *)(a1 + 8) valueForKey:@"_policy"];
            LODWORD(idx[0]) = 138543362;
            *(CFIndex *)((char *)idx + 4) = (CFIndex)v144;
            _os_log_debug_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "policies: %{public}@", (uint8_t *)idx, 0xCu);
          }
          id v181 = objc_alloc_init((Class)NSMutableSet);
          long long v198 = 0u;
          long long v199 = 0u;
          *(_OWORD *)long long v196 = 0u;
          long long v197 = 0u;
          id v174 = v173;
          id v114 = [v174 countByEnumeratingWithState:v196 objects:idx count:16];
          if (v114)
          {
            uint64_t v115 = 0;
            uint64_t v116 = *(void *)v197;
            do
            {
              long long v117 = 0;
              id pointa = v114;
              do
              {
                if (*(void *)v197 != v116) {
                  objc_enumerationMutation(v174);
                }
                long long v118 = *(unsigned int **)(*(void *)&v196[8] + 8 * (void)v117);
                uint64_t v119 = BKLogTouchDeliveryPolicy();
                if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
                {
                  double v128 = [v118 succinctDescription];
                  *(_DWORD *)v230 = 138543362;
                  objc_super v231 = v128;
                  _os_log_debug_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEBUG, "TDPS allow send to %{public}@", v230, 0xCu);
                }
                if (v118) {
                  uint64_t v120 = v118[2];
                }
                else {
                  uint64_t v120 = 0;
                }
                if ([v112[35] containsObject:v118 sub_1000109A8((uint64_t)v230, *(void *)(a1 + 16), (uint64_t)&v193[8], v120, (uint64_t)v191)])int64_t v121 = 1; {
                else
                }
                  int64_t v121 = 2;
                sub_100015E94(v118, v112, (CGFloat *)v230, v121, v184);
                [v181 addObject:v118];
                if (v177)
                {
                  long long v229 = 0u;
                  long long v228 = 0u;
                  long long v227 = 0u;
                  *(_OWORD *)buf = 0u;
                  v122 = *(void **)(a1 + 16);
                  if (v122) {
                    v122 = (void *)v122[9];
                  }
                  v123 = v122;
                  id v124 = [v123 countByEnumeratingWithState:buf objects:v220 count:16];
                  uint64_t v125 = a1;
                  if (v124)
                  {
                    uint64_t v126 = *(void *)v227;
                    do
                    {
                      for (uint64_t j = 0; j != v124; uint64_t j = (char *)j + 1)
                      {
                        if (*(void *)v227 != v126) {
                          objc_enumerationMutation(v123);
                        }
                        [*(id *)(*(void *)&buf[8] + 8 * (void)j) touch:v112 didHitTestToDestination:v118 hostingChainIndex:v115];
                      }
                      id v124 = [v123 countByEnumeratingWithState:buf objects:v220 count:16];
                    }
                    while (v124);
                  }

                  id v114 = pointa;
                  a1 = v125;
                  ++v115;
                }
                long long v117 = (char *)v117 + 1;
              }
              while (v117 != v114);
              id v129 = [v174 countByEnumeratingWithState:v196 objects:idx count:16];
              id v114 = v129;
            }
            while (v129);
          }

          v130 = v112;
          v131 = (id *)v181;
          uint64_t v182 = v184;
          id v178 = v161;
          id v132 = v162;
          uint64_t v172 = v131;
          uint64_t v133 = +[NSMutableSet setWithSet:*((void *)v130 + 35)];
          [v133 minusSet:v131];
          long long v223 = 0u;
          long long v221 = 0u;
          long long v222 = 0u;
          *(_OWORD *)long long v220 = 0u;
          id v185 = v133;
          id v134 = [v185 countByEnumeratingWithState:v220 objects:idx count:16];
          if (v134)
          {
            uint64_t v135 = *(void *)v221;
            do
            {
              for (k = 0; k != v134; k = (char *)k + 1)
              {
                if (*(void *)v221 != v135) {
                  objc_enumerationMutation(v185);
                }
                uint64_t v137 = *(void *)(*(void *)&v220[8] + 8 * (void)k);
                if (v137 && (*(unsigned char *)(v137 + 32) & 1) != 0)
                {
                  sub_1000109A8((uint64_t)v196, *(void *)(a1 + 16), (uint64_t)&v193[8], *(unsigned int *)(v137 + 8), (uint64_t)v191);
                  uint64_t v138 = *(unsigned int *)(v137 + 8);
                  v139 = BKLogTouchEvents();
                  if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v143 = *(void *)(v175 + 8);
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&uint8_t buf[4] = v138;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v143;
                    _os_log_debug_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEBUG, "Adding hit test exit result: %X %d", buf, 0xEu);
                  }

                  sub_100015FF4((uint64_t)v182, (void *)v137, v130[5], *(void *)(v175 + 8), (CGFloat *)v196, 3);
                  int v140 = [v132 objectForKey:v138];
                  sub_10001B6A4((uint64_t)v140, (uint64_t)v130);
                  if (![v140 count]) {
                    [v132 removeObjectForKey:v138];
                  }
                  v141 = [v178 objectForKey:v138, v157];
                  if (v141)
                  {
                    [*((id *)v130 + 35) removeObject:v137];
                  }
                  else
                  {
                    id v142 = BKLogTouchEvents();
                    if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 67109120;
                      *(_DWORD *)&uint8_t buf[4] = v138;
                      _os_log_error_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_ERROR, "_removeContact: missing destination for context %X", buf, 8u);
                    }
                  }
                }
              }
              id v134 = [v185 countByEnumeratingWithState:v220 objects:idx count:16];
            }
            while (v134);
          }

LABEL_185:
          v169 = (char *)v169 + 1;
        }
        while (v169 != v166);
        id v147 = [obj countByEnumeratingWithState:&v186 objects:v195 count:16];
        id v166 = v147;
      }
      while (v147);
    }

    if ((uint64_t)[obj count] >= 1 && BKSHIDDigitizerEventIsFirstTouchDown())
    {
      if (v168) {
        v168->_initialTouchDown = 1;
      }
      IOHIDEventGetTimeStamp();
      BSMonotonicReferencedTimeFromMachTime();
      if (v168) {
        v168->_initialTouchTimestamp = v148;
      }
    }
    uint64_t v149 = *(void *)(a1 + 16);
    if (v149)
    {
      v150 = BKLogTouchEvents();
      BOOL v151 = os_log_type_enabled(v150, OS_LOG_TYPE_DEBUG);

      if (v151)
      {
        id v152 = objc_alloc_init((Class)BSDescriptionStream);
        uint64_t v153 = *(void *)(v149 + 120);
        idx[0] = (CFIndex)_NSConcreteStackBlock;
        idx[1] = 3221225472;
        *(void *)&long long v202 = sub_10008D088;
        *((void *)&v202 + 1) = &unk_1000F8570;
        id v154 = v152;
        *(void *)&long long v203 = v154;
        [v154 appendIntegerMap:v153 withName:0 keyFormat:1 valueBlock:idx];
        id v155 = BKLogTouchEvents();
        if (os_log_type_enabled(v155, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long v220 = 138543362;
          *(void *)&v220[4] = v154;
          _os_log_debug_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEBUG, "destinations are now %{public}@", v220, 0xCu);
        }
      }
    }
    sub_100015A38(&v190);
  }
  else
  {
    v168 = 0;
  }

  return v168;
}

void sub_1000156E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,id a57)
{
  _Block_object_dispose(&STACK[0x460], 8);
  _Block_object_dispose(&STACK[0x3E0], 8);
  _Block_object_dispose(&STACK[0x2B0], 8);

  sub_100015A38(&a57);
  _Unwind_Resume(a1);
}

id *sub_100015A38(id *a1)
{
  id v2 = *a1;
  *a1 = 0;

  id v3 = a1[1];
  a1[1] = 0;

  id v4 = a1[2];
  a1[2] = 0;

  return a1;
}

void sub_100015E94(void *a1, void *a2, CGFloat *a3, int64_t a4, void *a5)
{
  uint64_t v9 = a1;
  id v10 = a2;
  id v11 = a5;
  sub_100015FF4((uint64_t)v11, v9, *((_DWORD *)v10 + 5), *((void *)v10 + 1), a3, a4);
  if (v9)
  {
    int v12 = v9[2];
    int v13 = v9[3];
  }
  else
  {
    int v12 = 0;
    int v13 = 0;
  }
  long long v14 = BKLogTouchEvents();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = *((void *)v10 + 1);
    v16[0] = 67109632;
    v16[1] = v12;
    __int16 v17 = 1024;
    int v18 = v13;
    __int16 v19 = 1024;
    int v20 = v15;
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Adding hit test result: %X %X %d", (uint8_t *)v16, 0x14u);
  }

  [*((id *)v10 + 35) addObject:v9];
}

void sub_100015FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100015FF4(uint64_t a1, void *a2, unsigned int a3, int64_t a4, CGFloat *a5, int64_t a6)
{
  if (a1)
  {
    int v12 = objc_alloc_init(BKHitTestResultPathLocation);
    uint64_t v16 = v12;
    if (v12)
    {
      v12->_pathIndex = a4;
      long long v13 = *(_OWORD *)a5;
      long long v14 = *((_OWORD *)a5 + 1);
      long long v15 = *((_OWORD *)a5 + 2);
      v12->_pathLocation.preciseLocation.y = a5[6];
      *(_OWORD *)&v12->_pathLocation.hitTestLocation.y = v15;
      *(_OWORD *)&v12->_pathLocation.location.y = v14;
      *(_OWORD *)&v12->_pathLocation.locationsAreValid = v13;
      v12->_contextRelationship = a6;
    }
    sub_1000160A8(a1, a2, a3, (uint64_t)v12);
  }
}

void sub_1000160A8(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  id v11 = objc_alloc_init(BKHitTestResultKey);
  if (v11)
  {
    objc_storeStrong((id *)&v11->_destination, a2);
    if (a3) {
      v11->_userIdentifier = a3;
    }
  }
  int v8 = *(void **)(a1 + 24);
  if (!v8)
  {
    id v9 = objc_alloc_init((Class)BSMutableOrderedDictionary);
    id v10 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v9;

    int v8 = *(void **)(a1 + 24);
  }
  [v8 addObject:a4 toCollectionClass:objc_opt_class() forKey:v11];
}

void sub_10001616C(uint64_t a1, void *a2)
{
  if (a1 && *(void **)(a1 + 176) != a2)
  {
    id v4 = [a2 copy];
    uint64_t v5 = *(void **)(a1 + 176);
    *(void *)(a1 + 176) = v4;

    uint64_t v6 = BKLogTouchEvents();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543618;
      int v18 = a2;
      __int16 v19 = 2114;
      uint64_t v20 = a1;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Setting hittest regions to: %{public}@ for digitizer: %{public}@", buf, 0x16u);
    }

    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v7 = *(id *)(a1 + 72);
    id v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v13;
      do
      {
        id v10 = 0;
        do
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v7);
          }
          [*(id *)(*((void *)&v12 + 1) + 8 * (void)v10) hitTestRegionsDidChange:a2, (void)v12];
          id v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v8);
    }

    if ((uint64_t)[*(id *)(a1 + 112) count] >= 1)
    {
      id v11 = sub_10000D36C(*(id **)(a1 + 112));
      sub_10008C1C8(a1, v11);
    }
  }
}

void sub_100016324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016350(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  if (a3) {
    uint64_t v5 = *(void *)(a3 + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  if ((a1[6] & ~v5) == 0)
  {
    uint64_t v6 = a2;
    __int16 v17 = [*(id *)(a1[4] + 128) objectForKey:a2];
    if (v17)
    {
      id v7 = (void *)a1[5];
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v8 = v7;
      id v9 = [v8 countByEnumeratingWithState:&v18 objects:v34 count:16];
      if (v9)
      {
        uint64_t v10 = *(void *)v19;
        do
        {
          for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v19 != v10) {
              objc_enumerationMutation(v8);
            }
            uint64_t v12 = *(void *)(*(void *)(*((void *)&v18 + 1) + 8 * i) + 8);
            if (v12 >= 30)
            {
              long long v13 = +[NSString stringWithFormat:@"pathIndex out of bounds: %d", *(void *)(*(void *)(*((void *)&v18 + 1) + 8 * i) + 8)];
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                long long v14 = NSStringFromSelector("removeContacts:");
                long long v15 = (objc_class *)objc_opt_class();
                uint64_t v16 = NSStringFromClass(v15);
                *(_DWORD *)buf = 138544642;
                id v23 = v14;
                __int16 v24 = 2114;
                id v25 = v16;
                __int16 v26 = 2048;
                uint64_t v27 = v17;
                __int16 v28 = 2114;
                CFStringRef v29 = @"BKTouchContactSet.m";
                __int16 v30 = 1024;
                int v31 = 112;
                __int16 v32 = 2114;
                uint64_t v33 = v13;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
              }
              [v13 UTF8String];
              _bs_set_crash_log_message();
              __break(0);
              JUMPOUT(0x10001661CLL);
            }
            v17[v12 + 2] = 0;
          }
          id v9 = [v8 countByEnumeratingWithState:&v18 objects:v34 count:16];
        }
        while (v9);
      }

      [v17[1] removeObjectsInArray:v8];
    }
    if (![v17 count]) {
      [*(id *)(a1[4] + 128) removeObjectForKey:v6];
    }
    sub_100016650(a1[4], a3);
  }
}

void sub_10001662C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100016650(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = *(unsigned int *)(a2 + 8);
      if ([*(id *)(a2 + 24) count]) {
        return;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v5 = [*(id *)(a1 + 128) objectForKey:v4];
    id v6 = [v5 count];

    if ((uint64_t)v6 <= 0)
    {
      id v7 = BKLogTouchEvents();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 138543362;
        uint64_t v9 = a2;
        _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "removing destination: %{public}@", (uint8_t *)&v8, 0xCu);
      }

      [*(id *)(a1 + 120) removeObjectForKey:v4];
      [*(id *)(a1 + 128) removeObjectForKey:v4];
    }
  }
}

void sub_100016774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100016874(void *a1, uint64_t a2)
{
  if (!sub_1000168CC(a1, a2)) {
    return 0;
  }
  id v3 = +[BKSystemShellSentinel sharedInstance];
  id v4 = [v3 auditTokenRepresentsSystemApp:a2];

  return v4;
}

BOOL sub_1000168CC(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = v3;
  if (!a2)
  {
    if (!v3)
    {
      BOOL v7 = 1;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  int v5 = BSPIDForAuditToken();
  pid_t v6 = getpid();
  BOOL v7 = 1;
  if (v4 && v5 != v6) {
LABEL_6:
  }
    BOOL v7 = +[BKSecurityManager hasEntitlement:v4 forAuditToken:a2];
LABEL_8:

  return v7;
}

void sub_1000170D8(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = [*(id *)(a1 + 112) copy];
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v11;
    do
    {
      pid_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * (void)v6);
        if (!*(void *)(v7 + 32))
        {
          uint64_t v8 = *(void *)(v7 + 8);
          uint64_t v9 = BKLogTouchEvents();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            int v15 = v8;
            _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "stop tracking path:%d", buf, 8u);
          }

          sub_100006824(v7, 0);
          [v2 addObject:v7];
          sub_10001B6A4(*(void *)(a1 + 112), v7);
        }
        pid_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
    }
    while (v4);
  }

  sub_100017364(a1, v2, 1);
  sub_1000172CC(a1);
}

void sub_100017294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000172CC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 120) copy];
  BSIntegerMapEnumerateWithBlock();
}

void sub_100017354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100017364(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = [*(id *)(a1 + 120) copy];
  long long v21 = _NSConcreteStackBlock;
  uint64_t v22 = 3221225472;
  id v23 = sub_100016350;
  __int16 v24 = &unk_1000F85E8;
  __int16 v26 = a2;
  uint64_t v27 = a3;
  uint64_t v25 = a1;
  BSIntegerMapEnumerateWithBlock();

  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v7 = a2;
  id v8 = [v7 countByEnumeratingWithState:&v17 objects:v28 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v18;
    do
    {
      long long v10 = 0;
      do
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void *)(*((void *)&v17 + 1) + 8 * (void)v10);
        long long v12 = *(void **)(v11 + 280);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        _DWORD v16[2] = sub_10001A838;
        v16[3] = &unk_1000F8608;
        v16[4] = a3;
        long long v13 = [v12 bs_filter:v16];
        id v14 = [v13 mutableCopy];
        int v15 = *(void **)(v11 + 280);
        *(void *)(v11 + 280) = v14;

        long long v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v7 countByEnumeratingWithState:&v17 objects:v28 count:16];
    }
    while (v8);
  }
}

void sub_100017538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100017570(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100012B90;
    v2[3] = &unk_1000F8520;
    void v2[4] = a1;
    sub_1000175EC(a2, v2);
  }
}

void sub_1000175EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_100012A70;
    v5[3] = &unk_1000F6820;
    void v5[4] = a1;
    id v6 = v3;
    sub_100012920(a1, v5);
  }
}

id *sub_100017688(uint64_t a1, uint64_t a2, void *a3)
{
  v141 = (id *)[a3 copy];
  [*(id *)(a1 + 136) removeAllObjects];
  uint64_t v5 = sub_100012860((const __CFArray **)v197, a2);
  sub_100018934((unint64_t)v5);
  long long v177 = *(_OWORD *)v197;
  long long v178 = v198;
  long long v179 = v199;
  uint64_t v180 = v200;
  for (uint64_t i = *((void *)&v198 + 1); *((void *)&v178 + 1); uint64_t i = *((void *)&v178 + 1))
  {
    *((void *)&v179 + 1) = i;
    uint64_t v180 = v179;
    uint64_t v7 = sub_100018B1C(*(id **)(a1 + 112), v179);
    id v8 = (void *)v7;
    if (v7)
    {
      uint64_t v9 = *(unsigned int *)(v7 + 20);
      if (v9)
      {
        IOHIDEventGetFloatValue();
        double v11 = v10;
        IOHIDEventGetFloatValue();
        double v13 = v12;
        id v14 = [*(id *)(a1 + 136) objectForKey:v9];
        if (v14
          || (id v14 = objc_alloc_init(BKTouchCentroidCalculator),
              [*(id *)(a1 + 136) setObject:v14 forKey:v9],
              v14))
        {
          CGFloat v15 = v13 + v14->_location.y;
          v14->_location.double x = v11 + v14->_location.x;
          v14->_location.double y = v15;
          ++v14->_count;
        }
      }
    }

    sub_100018934((unint64_t)&v177);
  }
  int HasHighFrequencyDigitizer = BKSHIDServicesDeviceHasHighFrequencyDigitizer();
  uint64_t v16 = sub_100012860((const __CFArray **)v197, a2);
  sub_100018934((unint64_t)v16);
  long long v177 = *(_OWORD *)v197;
  long long v178 = v198;
  long long v179 = v199;
  *((void *)&v17 + 1) = *((void *)&v199 + 1);
  uint64_t v180 = v200;
  *(void *)&long long v17 = 138543874;
  long long v136 = v17;
  while (*((void *)&v178 + 1))
  {
    uint64_t v18 = v179;
    *((void *)&v179 + 1) = *((void *)&v178 + 1);
    uint64_t v180 = v179;
    if (IOHIDEventGetIntegerValue())
    {
      BKLogTouchEvents();
      long long v19 = (char *)objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_ERROR)) {
        goto LABEL_105;
      }
      *(_WORD *)buf = 0;
      long long v20 = v19;
      long long v21 = "ignoring subevent with nonzero didUpdateMask (on parent event with zero didUpdateMask)";
      uint32_t v22 = 2;
      goto LABEL_14;
    }
    uint64_t IntegerValue = IOHIDEventGetIntegerValue();
    uint64_t v23 = IOHIDEventGetIntegerValue();
    unsigned int v142 = IntegerValue & 0x20000;
    if (v23) {
      BOOL v24 = (IntegerValue & 0x20000) == 0;
    }
    else {
      BOOL v24 = 0;
    }
    int v25 = v24;
    uint64_t v140 = IOHIDEventGetIntegerValue();
    unsigned int v143 = (v140 != 0) & (IntegerValue >> 1);
    int v138 = v25;
    int v139 = IntegerValue & v25;
    if ((IntegerValue & v25 & 1) != 0
      || (!v142 ? (BOOL v26 = v23 == 0) : (BOOL v26 = 1), v26 ? (v27 = 0) : (v27 = 1), v143 && (v27 & 1) == 0))
    {
      uint64_t v28 = sub_100018B1C(v141, v18);
      uint64_t v29 = v28;
      if (v28)
      {
        uint64_t v30 = *(void *)(v28 + 32);
        if (v30 == 2 && v140)
        {
          int v31 = BKLogTouchEvents();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(void *)&uint8_t buf[4] = v29;
            _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "range-in for pathIndex with existing contact -- using existing: %{public}@", buf, 0xCu);
          }

          long long v19 = (char *)(id)v29;
LABEL_56:

          uint64_t v32 = IntegerValue;
          if (v143)
          {
LABEL_57:
            v19[298] = v142 >> 17;
            if (v142)
            {
              uint64_t v44 = BKLogTouchEvents();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "received tapToWake", buf, 2u);
              }
            }
          }
LABEL_62:
          if (*((_DWORD *)v19 + 5))
          {
            uint64_t v45 = [*(id *)(a1 + 136) objectForKey:x0];
            id v46 = (void *)v45;
            if (v45)
            {
              uint64_t v47 = *(void *)(v45 + 8);
              if (v47 < 1)
              {
                double x = CGPointZero.x;
                double y = CGPointZero.y;
              }
              else
              {
                double x = *(double *)(v45 + 16) / (double)v47;
                double y = *(double *)(v45 + 24) / (double)v47;
              }
              long long v54 = BKLogTouchEvents();
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v133 = BSStringFromCGPoint();
                *(_DWORD *)buf = 138543362;
                *(void *)&uint8_t buf[4] = v133;
                _os_log_debug_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "using centroid %{public}@", buf, 0xCu);
              }
            }
            else
            {
              IOHIDEventGetFloatValue();
              double x = v52;
              IOHIDEventGetFloatValue();
              double y = v53;
            }
          }
          else
          {
            IOHIDEventGetFloatValue();
            double x = v50;
            IOHIDEventGetFloatValue();
            double y = v51;
          }
          *((_WORD *)v19 + 34) = IOHIDEventGetPhase();
          sub_100010EDC((uint64_t)buf, a1, x, y, *((float64_t *)v19 + 20), *((float64_t *)v19 + 21));
          long long v55 = v193;
          *(_OWORD *)(v19 + 200) = *(_OWORD *)buf;
          *(_OWORD *)(v19 + 216) = v55;
          *(_OWORD *)(v19 + 232) = v194;
          *((void *)v19 + 31) = v195;
          *((double *)v19 + 17) = x;
          *((double *)v19 + 18) = y;
          IOHIDEventGetFloatValue();
          *((void *)v19 + 19) = v56;
          uint64_t v57 = *((void *)v19 + 4);
          *((void *)v19 + 5) = v57;
          if (v143)
          {
            if (v57 != 1)
            {
              long long v171 = 0u;
              long long v172 = 0u;
              long long v169 = 0u;
              long long v170 = 0u;
              id v58 = *(id *)(a1 + 72);
              id v59 = [v58 countByEnumeratingWithState:&v169 objects:v191 count:16];
              if (v59)
              {
                uint64_t v60 = *(void *)v170;
                double v61 = *((double *)&v193 + 1);
                double v62 = *(double *)&v194;
                uint64_t v63 = v180;
                do
                {
                  for (uint64_t j = 0; j != v59; uint64_t j = (char *)j + 1)
                  {
                    if (*(void *)v170 != v60) {
                      objc_enumerationMutation(v58);
                    }
                    double v65 = 0.0;
                    if (!*(unsigned char *)(a1 + 209)) {
                      double v65 = *(double *)(a1 + 192);
                    }
                    [*(id *)(*((void *)&v169 + 1) + 8 * (void)j) touch:*((unsigned int *)v19 + 4) pathIndex:v63 rangeInAtPoint:v32 eventMask:*((unsigned int *)v19 + 16) z:v61 maxZ:v62 transducerType:*((double *)v19 + 19)];
                  }
                  id v59 = [v58 countByEnumeratingWithState:&v169 objects:v191 count:16];
                }
                while (v59);
              }
            }
            *((void *)v19 + 4) = 2;
            CGFloat v66 = (void *)*((void *)v19 + 33);
            *((void *)v19 + 33) = 0;

            CGFloat v67 = (void *)*((void *)v19 + 34);
            *((void *)v19 + 34) = 0;

            v19[297] = 0;
            long long v165 = 0u;
            long long v166 = 0u;
            long long v167 = 0u;
            long long v168 = 0u;
            id v68 = *(id *)(a1 + 72);
            id v69 = [v68 countByEnumeratingWithState:&v165 objects:v190 count:16];
            if (v69)
            {
              uint64_t v70 = *(void *)v166;
              double v71 = *((double *)&v193 + 1);
              double v72 = *(double *)&v194;
              uint64_t v73 = v180;
              do
              {
                for (k = 0; k != v69; k = (char *)k + 1)
                {
                  if (*(void *)v166 != v70) {
                    objc_enumerationMutation(v68);
                  }
                  [*(id *)(*((void *)&v165 + 1) + 8 * (void)k) touch:v73 pathIndex:v73 downAtPoint:v32 eventMask:v71 transducerType:v72];
                }
                id v69 = [v68 countByEnumeratingWithState:&v165 objects:v190 count:16];
              }
              while (v69);
            }
            goto LABEL_92;
          }
          if (v139)
          {
            if (!v57)
            {
              *((void *)v19 + 4) = 1;
              long long v161 = 0u;
              long long v162 = 0u;
              long long v163 = 0u;
              long long v164 = 0u;
              id v68 = *(id *)(a1 + 72);
              id v90 = [v68 countByEnumeratingWithState:&v161 objects:v189 count:16];
              if (v90)
              {
                uint64_t v91 = *(void *)v162;
                double v92 = *((double *)&v193 + 1);
                double v93 = *(double *)&v194;
                uint64_t v94 = v180;
                do
                {
                  for (m = 0; m != v90; m = (char *)m + 1)
                  {
                    if (*(void *)v162 != v91) {
                      objc_enumerationMutation(v68);
                    }
                    double v96 = 0.0;
                    if (!*(unsigned char *)(a1 + 209)) {
                      double v96 = *(double *)(a1 + 192);
                    }
                    [*(id *)(*((void *)&v161 + 1) + 8 * (void)m) touch:*((unsigned int *)v19 + 4) pathIndex:v94 rangeInAtPoint:v32 eventMask:*((unsigned int *)v19 + 16) z:v92 maxZ:v93 transducerType:*((double *)v19 + 19)];
                  }
                  id v90 = [v68 countByEnumeratingWithState:&v161 objects:v189 count:16];
                }
                while (v90);
              }
LABEL_92:

LABEL_93:
              __int16 v75 = BKLogTouchEvents();
              if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
              {
                unint64_t v76 = *((void *)v19 + 4);
                id v77 = @"<unknown>";
                if (v76 <= 2) {
                  id v77 = *(&off_1000F8970 + v76);
                }
                int v78 = v180;
                BOOL v79 = v77;
                *(_DWORD *)uint64_t v182 = 67109378;
                *(_DWORD *)v183 = v78;
                *(_WORD *)&v183[4] = 2114;
                *(void *)&v183[6] = v79;
                _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "contact %d presence: %{public}@", v182, 0x12u);
              }
LABEL_97:
            }
LABEL_98:
            if (HasHighFrequencyDigitizer)
            {
              IOHIDEventGetTimeStamp();
              BSMonotonicReferencedTimeFromMachTime();
              double v81 = v80;
              IOHIDEventGetFloatValue();
              double v83 = v82;
              double v84 = *((double *)v19 + 22);
              if (v84 != 0.0)
              {
                double v85 = v81 - v84;
                if (v85 >= 0.1) {
                  double v86 = v85;
                }
                else {
                  double v86 = 1.0;
                }
                IOHIDEventGetFloatValue();
                double v88 = v87;
                IOHIDEventGetFloatValue();
                *(float *)&double v89 = (v83 - *((double *)v19 + 23)) / v86 / sqrt(v88 * v89 * 0.0002);
                *((double *)v19 + 24) = *(float *)&v89;
              }
              *((double *)v19 + 22) = v81;
              *((double *)v19 + 23) = v83;
            }
            goto LABEL_105;
          }
          if ((IntegerValue & 2) == 0 || v140)
          {
            if (IntegerValue) {
              char v106 = v138;
            }
            else {
              char v106 = 1;
            }
            if (v106)
            {
              if (v140) {
                int v107 = 1;
              }
              else {
                int v107 = v138;
              }
              if (v107 == 1)
              {
                long long v147 = 0u;
                long long v148 = 0u;
                long long v145 = 0u;
                long long v146 = 0u;
                __int16 v75 = *(id *)(a1 + 72);
                id v108 = [v75 countByEnumeratingWithState:&v145 objects:v181 count:16];
                if (v108)
                {
                  uint64_t v109 = *(void *)v146;
                  double v110 = *((double *)&v193 + 1);
                  double v111 = *(double *)&v194;
                  do
                  {
                    for (n = 0; n != v108; n = (char *)n + 1)
                    {
                      if (*(void *)v146 != v109) {
                        objc_enumerationMutation(v75);
                      }
                      double v113 = 0.0;
                      if (!*(unsigned char *)(a1 + 209)) {
                        double v113 = *(double *)(a1 + 192);
                      }
                      [*(id *)(*((void *)&v145 + 1) + 8 * (void)n) touch:*((unsigned int *)v19 + 4) didMoveToPoint:v32 eventMask:v110 z:v111 maxZ:v113];
                    }
                    id v108 = [v75 countByEnumeratingWithState:&v145 objects:v181 count:16];
                  }
                  while (v108);
                }
                goto LABEL_97;
              }
              goto LABEL_98;
            }
            if (v57 != 1)
            {
              __int16 v75 = BKLogTouchEvents();
              if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
              {
                unint64_t v130 = *((void *)v19 + 4);
                v131 = @"<unknown>";
                if (v130 <= 2) {
                  v131 = *(&off_1000F8970 + v130);
                }
                id v132 = v131;
                *(_DWORD *)uint64_t v182 = v136;
                *(void *)v183 = v132;
                *(_WORD *)&v183[8] = 1024;
                *(_DWORD *)&v183[10] = v140 != 0;
                __int16 v184 = 1024;
                int v185 = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "unexpected range-out (presence:%{public}@ event.touch:%{BOOL}u) event.range:%{BOOL}u", v182, 0x18u);
              }
              goto LABEL_97;
            }
            *((void *)v19 + 4) = 0;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            id v114 = *(id *)(a1 + 72);
            id v123 = [v114 countByEnumeratingWithState:&v149 objects:v186 count:16];
            if (v123)
            {
              uint64_t v124 = *(void *)v150;
              double v125 = *((double *)&v193 + 1);
              double v126 = *(double *)&v194;
              uint64_t v127 = v180;
              do
              {
                for (iuint64_t i = 0; ii != v123; iuint64_t i = (char *)ii + 1)
                {
                  if (*(void *)v150 != v124) {
                    objc_enumerationMutation(v114);
                  }
                  id v129 = *(id *)(*((void *)&v149 + 1) + 8 * (void)ii);
                  [v129 touch:*((unsigned int *)v19 + 4) pathIndex:v127 rangeOutAtPoint:v125];
                }
                id v123 = [v114 countByEnumeratingWithState:&v149 objects:v186 count:16];
              }
              while (v123);
            }
          }
          else
          {
            if (v138)
            {
              *((void *)v19 + 4) = 1;
              long long v153 = 0u;
              long long v154 = 0u;
              long long v155 = 0u;
              long long v156 = 0u;
              id v97 = *(id *)(a1 + 72);
              id v98 = [v97 countByEnumeratingWithState:&v153 objects:v187 count:16];
              if (v98)
              {
                uint64_t v99 = *(void *)v154;
                double v100 = *((double *)&v193 + 1);
                double v101 = *(double *)&v194;
                uint64_t v102 = v180;
                do
                {
                  for (juint64_t j = 0; jj != v98; juint64_t j = (char *)jj + 1)
                  {
                    if (*(void *)v154 != v99) {
                      objc_enumerationMutation(v97);
                    }
                    id v104 = *(id *)(*((void *)&v153 + 1) + 8 * (void)jj);
                    [v104 touch:*((unsigned int *)v19 + 4) pathIndex:v102 upAtPoint:v19[296] detached:v100];
                  }
                  id v98 = [v97 countByEnumeratingWithState:&v153 objects:v187 count:16];
                }
                while (v98);
              }

              uint64_t v105 = *((void *)v19 + 6);
              if (v105 == 2)
              {
                *((void *)v19 + 6) = 3;
              }
              else if (v105 == 4)
              {
                *((void *)v19 + 6) = 0;
              }
              goto LABEL_93;
            }
            *((void *)v19 + 4) = 0;
            long long v157 = 0u;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v160 = 0u;
            id v114 = *(id *)(a1 + 72);
            id v115 = [v114 countByEnumeratingWithState:&v157 objects:v188 count:16];
            if (v115)
            {
              uint64_t v116 = *(void *)v158;
              double v117 = *((double *)&v193 + 1);
              double v118 = *(double *)&v194;
              uint64_t v119 = v180;
              do
              {
                for (kk = 0; kk != v115; kk = (char *)kk + 1)
                {
                  if (*(void *)v158 != v116) {
                    objc_enumerationMutation(v114);
                  }
                  id v121 = *(id *)(*((void *)&v157 + 1) + 8 * (void)kk);
                  v122 = v121;
                  if (v57 == 2) {
                    [v121 touch:*((unsigned int *)v19 + 4) pathIndex:v119 upAtPoint:v19[296] detached:v117];
                  }
                  [v122 touch:*((unsigned int *)v19 + 4) pathIndex:v119 rangeOutAtPoint:v117, v118, v136];
                }
                id v115 = [v114 countByEnumeratingWithState:&v157 objects:v188 count:16];
              }
              while (v115);
            }
          }

          goto LABEL_93;
        }
        unsigned int v34 = BKLogTouchEvents();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v29;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "range-in for pathIndex with existing contact -- replacing: %{public}@", buf, 0xCu);
        }

        sub_10001B6A4((uint64_t)v141, v29);
        uint64_t v35 = *(void *)(v29 + 8);
        int v36 = BKLogTouchEvents();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v35;
          _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "stop tracking path:%d", buf, 8u);
        }

        sub_100006824(v29, 0);
        sub_10001B6A4(*(void *)(a1 + 112), v29);
        *(void *)buf = v29;
        int v37 = +[NSArray arrayWithObjects:buf count:1];
        sub_100017364(a1, v37, 1);

        sub_1000172CC(a1);
        long long v173 = 0u;
        long long v174 = 0u;
        long long v175 = 0u;
        long long v176 = 0u;
        id v38 = *(id *)(a1 + 72);
        id v39 = [v38 countByEnumeratingWithState:&v173 objects:v196 count:16];
        if (v39)
        {
          uint64_t v40 = *(void *)v174;
          do
          {
            for (mm = 0; mm != v39; mm = (char *)mm + 1)
            {
              if (*(void *)v174 != v40) {
                objc_enumerationMutation(v38);
              }
              id v42 = *(id *)(*((void *)&v173 + 1) + 8 * (void)mm);
              BOOL v43 = v42;
              if (v30 == 2) {
                [v42 touch:*(unsigned int *)(v29 + 16) pathIndex:v18 upAtPoint:*(unsigned __int8 *)(v29 + 296) detached:0.0, 0.0];
              }
              [v43 touch:*(unsigned int *)(v29 + 16) pathIndex:v18 rangeOutAtPoint:0.0, 0.0, v136];
            }
            id v39 = [v38 countByEnumeratingWithState:&v173 objects:v196 count:16];
          }
          while (v39);
        }
      }
      long long v19 = (char *)sub_100005AF0(v18);
      sub_100014070((uint64_t)v141, (uint64_t)v19);
      goto LABEL_56;
    }
    if (v143)
    {
      sub_100018B1C(v141, v18);
      long long v19 = (char *)objc_claimAutoreleasedReturnValue();
      uint64_t v32 = IntegerValue;
      if (!v19)
      {
        uint64_t v33 = BKLogTouchEvents();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v18;
          _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "touch down without previous range event: %d", buf, 8u);
        }

        uint64_t v32 = IntegerValue | 1;
        IOHIDEventSetIntegerValue();
        long long v19 = (char *)sub_100005AF0(v18);
        sub_100014070((uint64_t)v141, (uint64_t)v19);
      }
      goto LABEL_57;
    }
    sub_100018B1C(v141, v18);
    long long v19 = (char *)objc_claimAutoreleasedReturnValue();
    uint64_t v32 = IntegerValue;
    if (v19) {
      goto LABEL_62;
    }
    BKLogTouchEvents();
    long long v19 = (char *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v18;
      long long v20 = v19;
      long long v21 = "didn't see a previous touch down or range-in event for pathIndex:%d; skipping event";
      uint32_t v22 = 8;
LABEL_14:
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, v21, buf, v22);
    }
LABEL_105:

    sub_100018934((unint64_t)&v177);
  }
  id v134 = BKLogTouchEvents();
  if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long v197 = 138543362;
    *(void *)&v197[4] = v141;
    _os_log_debug_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEBUG, "contacts now %{public}@", v197, 0xCu);
  }

  return v141;
}

void sub_100018754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

unint64_t sub_100018934(unint64_t result)
{
  id v1 = (void *)result;
  CFIndex v2 = *(void *)(result + 16);
  if (v2
    && (CFIndex v3 = *(void *)(result + 8), v3 < v2)
    && (float64x2_t result = (unint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)result, v3)) != 0)
  {
    unint64_t v4 = result;
    ++v1[1];
    int Type = IOHIDEventGetType();
    if (Type == 1)
    {
LABEL_16:
      v1[3] = 0;
      v1[4] = 0x7FFFFFFFFFFFFFFFLL;
      return sub_100018934(v1);
    }
    if (Type != 11)
    {
      uint64_t v7 = BKLogTouchEvents();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v9 = 136446210;
        uint64_t TypeString = IOHIDEventGetTypeString();
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "skipping subevent of type %{public}s", (uint8_t *)&v9, 0xCu);
      }
      goto LABEL_15;
    }
    float64x2_t result = IOHIDEventGetIntegerValue();
    int v6 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      uint64_t v7 = BKLogTouchEvents();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v9 = 67109120;
        LODWORD(TypeString) = v6;
        id v8 = "%d < 0";
        goto LABEL_19;
      }
LABEL_15:

      goto LABEL_16;
    }
    if (result >= 0x1E)
    {
      uint64_t v7 = BKLogTouchEvents();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v9 = 67109120;
        LODWORD(TypeString) = v6;
        id v8 = "%d >= MAX_PATH_COUNT";
LABEL_19:
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v9, 8u);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    v1[3] = v4;
    v1[4] = result;
  }
  else
  {
    v1[3] = 0;
    v1[4] = 0x7FFFFFFFFFFFFFFFLL;
  }
  return result;
}

void sub_100018B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_100018B1C(id *a1, uint64_t a2)
{
  if (a1)
  {
    CFIndex v2 = a1;
    if (a2 >= 30)
    {
      unint64_t v4 = +[NSString stringWithFormat:@"pathIndex out of bounds: %d", a2];
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = NSStringFromSelector("contactForPathIndex:");
        int v6 = (objc_class *)objc_opt_class();
        uint64_t v7 = NSStringFromClass(v6);
        *(_DWORD *)buf = 138544642;
        int v9 = v5;
        __int16 v10 = 2114;
        double v11 = v7;
        __int16 v12 = 2048;
        double v13 = v2;
        __int16 v14 = 2114;
        CFStringRef v15 = @"BKTouchContactSet.m";
        __int16 v16 = 1024;
        int v17 = 51;
        __int16 v18 = 2114;
        long long v19 = v4;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
      }
      [v4 UTF8String];
      _bs_set_crash_log_message();
      __break(0);
      JUMPOUT(0x100018C8CLL);
    }
    a1 = (id *)a1[a2 + 2];
  }

  return a1;
}

id sub_100018C94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a4) {
    int v8 = *(_DWORD *)(a4 + 8);
  }
  else {
    int v8 = 0;
  }
  int v9 = [*(id *)(a2 + 288) firstObject];
  if (v9) {
    int v10 = v9[2];
  }
  else {
    int v10 = 0;
  }

  if (v10 != v8 || !*(void *)(a2 + 264))
  {
    int v31 = 0;
    goto LABEL_41;
  }
  uint64_t v11 = [*(id *)(a1 + 16) _queue_slotRecordForSlotID:*(unsigned int *)(a2 + 24)];
  __int16 v12 = (void *)v11;
  if (!v11)
  {
    id v32 = 0;
LABEL_39:
    id v32 = v32;
    int v31 = v32;
    goto LABEL_40;
  }
  id v41 = *(id *)(v11 + 16);
  memset(__src, 0, sizeof(__src));
  double v13 = *(void **)(a1 + 40);
  if (v13) {
    double v13 = (void *)v13[1];
  }
  __int16 v14 = v13;
  CFStringRef v15 = [*(id *)(a1 + 8) displayUUID];
  [v14 convertReferenceLocation:v15 toCAScreenLocationForDisplayUUID:*(double *)(a2 + 224), *(double *)(a2 + 232)];
  double v17 = v16;
  double v19 = v18;
  long long v20 = [*(id *)(a2 + 256) contextIDsToExcludeFromHitTesting];
  long long v21 = sub_100005E04((uint64_t)BKDisplayController, 0, 0, v41, v20);
  [v14 contextIDAtCAScreenLocation:v15 displayUUID:v21 options:0 securityAnalysis:__src results:v17];
  if (LODWORD(__src[0]) != v8)
  {
    uint64_t v33 = BKLogTouchEvents();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = __src[0];
      _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "auth spec context mismatch between down:%X up:%X", buf, 0xEu);
    }

    if (DWORD1(__src[0]) == *(_DWORD *)(a2 + 24)) {
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  uint32_t v22 = BKLogTouchEvents();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = __src[0];
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "auth spec contextID down/up match:%X", buf, 8u);
  }

  if (DWORD1(__src[0]) != *(_DWORD *)(a2 + 24))
  {
LABEL_25:
    unsigned int v34 = BKLogTouchEvents();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      int v38 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v38;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = DWORD1(__src[0]);
      _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "ignoring auth spec: slotID changed between down:%X and up:%X", buf, 0xEu);
    }

LABEL_28:
    id v32 = 0;
    char v35 = 1;
    goto LABEL_37;
  }
  if (BSAuditTokenForTask())
  {
    uint64_t v23 = *(void **)(a1 + 88);
    if (!v23)
    {
      uint64_t v24 = +[BKHIDSystemInterface sharedInstance];
      BOOL v26 = *(void **)(a1 + 88);
      int v25 = (uint64_t *)(a1 + 88);
      *int v25 = v24;

      uint64_t v23 = (void *)*v25;
    }
    char v27 = [v23 deliveryManager];
    uint64_t v40 = [v27 authenticationOriginator];
    unsigned int v28 = [v41 secureName];
    if (a3)
    {
      unsigned int v29 = v28;
      if (v28 == a3)
      {
        uint64_t v30 = 2;
      }
      else
      {
        int v36 = BKLogTouchEvents();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)double v50 = 67109376;
          unsigned int v51 = v29;
          __int16 v52 = 1024;
          int v53 = a3;
          _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "auth secure name:%X does not match requested secure name:%X", v50, 0xEu);
        }

        uint64_t v30 = 1;
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_10008CA54;
    v42[3] = &unk_1000F8630;
    memcpy(v45, __src, sizeof(v45));
    v42[4] = a2;
    uint64_t v46 = v30;
    id v43 = v41;
    long long v47 = *(_OWORD *)buf;
    long long v48 = v55;
    id v44 = v12;
    id v32 = [v40 buildMessage:v42];
  }
  else
  {
    char v27 = BKLogTouchEvents();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      if (a4) {
        unsigned int v39 = *(_DWORD *)(a4 + 12);
      }
      else {
        unsigned int v39 = 0;
      }
      *(_DWORD *)double v50 = 67109120;
      unsigned int v51 = v39;
      _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "auth cannot get audit token for port:%X", v50, 8u);
    }
    id v32 = 0;
  }

  char v35 = 0;
LABEL_37:

  if ((v35 & 1) == 0) {
    goto LABEL_39;
  }
  int v31 = 0;
LABEL_40:

LABEL_41:

  return v31;
}

void sub_1000191F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000193CC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _queue_touchStreamClientForReference:*(unsigned int *)(a1 + 64)];
  CFIndex v3 = (unsigned char *)v2;
  if (v2) {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 32));
  }
  else {
    id WeakRetained = 0;
  }
  __int16 v27 = 0;
  sub_100019710((uint64_t)WeakRetained, &v27, (unsigned __int8 *)&v27 + 1);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  if (!*(unsigned char *)(v5 + 24)) {
    *(unsigned char *)(v5 + 24) = v27;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(v6 + 8);
  char v8 = *(unsigned char *)(v7 + 24);
  if (!v8)
  {
    *(unsigned char *)(v7 + 24) = HIBYTE(v27);
    uint64_t v6 = *(void *)(a1 + 48);
    char v8 = *(unsigned char *)(*(void *)(v6 + 8) + 24);
  }
  if (v3)
  {
    v3[10] = v8;
    v3[11] = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    uint64_t v6 = *(void *)(a1 + 48);
  }
  sub_100019710((uint64_t)WeakRetained, (unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), (unsigned __int8 *)(*(void *)(v6 + 8) + 24));
  uint64_t v9 = HIBYTE(v27);
  BOOL v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) != HIBYTE(v27)
     || *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != v27;
  if (WeakRetained) {
    uint64_t v11 = (void *)WeakRetained[1];
  }
  else {
    uint64_t v11 = 0;
  }
  id v12 = v11;
  double v13 = *(void **)(a1 + 32);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10000CE3C;
  v22[3] = &unk_1000F7260;
  __int16 v14 = v3;
  id v23 = v14;
  int8x16_t v24 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
  BOOL v26 = v10;
  uint64_t v25 = *(void *)(a1 + 56);
  [v13 _queue_enumerateDigitizersForDisplay:v12 usingBlock:v22];
  CFStringRef v15 = BKLogTouchEvents();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    if (v9 > 3) {
      CFStringRef v16 = @"<unknown>";
    }
    else {
      CFStringRef v16 = *(&off_1000F7470 + v9);
    }
    if (v27 > 2uLL) {
      CFStringRef v17 = @"<unknown>";
    }
    else {
      CFStringRef v17 = *(&off_1000F7490 + v27);
    }
    unint64_t v18 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    if (v18 > 3) {
      CFStringRef v19 = @"<unknown>";
    }
    else {
      CFStringRef v19 = *(&off_1000F7470 + v18);
    }
    unint64_t v20 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (v20 > 2) {
      CFStringRef v21 = @"<unknown>";
    }
    else {
      CFStringRef v21 = *(&off_1000F7490 + v20);
    }
    *(_DWORD *)buf = 138544642;
    CFStringRef v29 = v16;
    __int16 v30 = 2114;
    CFStringRef v31 = v17;
    __int16 v32 = 2114;
    CFStringRef v33 = v19;
    __int16 v34 = 2114;
    CFStringRef v35 = v21;
    __int16 v36 = 1024;
    BOOL v37 = v10;
    __int16 v38 = 1024;
    int v39 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "sg transition (%{public}@, %{public}@) -> (%{public}@, %{public}@) somethingDidChange:%{BOOL}u didNotify:%{BOOL}u", buf, 0x36u);
  }
}

void sub_1000196DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL sub_100019710(uint64_t a1, unsigned char *a2, unsigned __int8 *a3)
{
  if (!a1) {
    return 0;
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v5 = *(id *)(a1 + 16);
  id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
  BOOL v7 = v6 != 0;
  if (v6)
  {
    id v8 = v6;
    unsigned __int8 v9 = 0;
    int v10 = 0;
    uint64_t v11 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(v5);
        }
        double v13 = *(unsigned char **)(*((void *)&v18 + 1) + 8 * i);
        if (v13)
        {
          if (v13[9])
          {
            int v14 = v13[11];
            int v15 = (v10 | 2) == 2 ? v13[11] : v10;
            if (v14 != v10 && v14 != 0) {
              int v10 = v15;
            }
          }
          LODWORD(v13) = v13[10];
        }
        if (v13 > v9) {
          unsigned __int8 v9 = v13;
        }
      }
      id v8 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v8);
  }
  else
  {
    unsigned __int8 v9 = 0;
    LOBYTE(v10) = 0;
  }

  *a2 = v10;
  *a3 = v9;
  return v7;
}

id sub_100019F34(uint64_t a1, mach_port_t a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *(_DWORD *)(a1 + 56);
  LODWORD(a4) = *(_DWORD *)(a1 + 60);
  LODWORD(a5) = *(_DWORD *)(a1 + 64);
  if ([*(id *)(a1 + 32) _passesThresholdForX:a3 y:a4 z:a5]) {
    sub_1000A7F74(a2, 1, *(double *)(a1 + 40), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64));
  }
  id result = [*(id *)(a1 + 32) _shouldSendSampleEventWithTimestamp:*(double *)(a1 + 40) samplingInterval:*(double *)(a1 + 48)];
  if (result)
  {
    sub_1000A7F74(a2, 0, *(double *)(a1 + 40), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64));
    id v8 = *(void **)(a1 + 32);
    double v9 = *(double *)(a1 + 40);
    return _[v8 _setLastAccelerometerEventTimestamp:v9];
  }
  return result;
}

id sub_10001A830(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queue_postPendingUpdates];
}

BOOL sub_10001A838(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = *(void *)(a2 + 32);
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(void *)(a1 + 32) & ~v2) != 0;
}

void sub_10001A860(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unsigned char *sub_10001A86C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16) = *(void *)(a1 + 40);
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  int v3 = v2[11];
  if ((v3 - 2) >= 2)
  {
    if (v3 == 1) {
      [v2 _queue_userEventOccurredInPresenceMode];
    }
  }
  else
  {
    [v2 _queue_userEventOccurredInIdleMode];
  }
  id result = *(unsigned char **)(a1 + 32);
  if (result[56])
  {
    id result = [result _queue_postNotification:kBKSHIDServicesUserEventOccurred];
    *(unsigned char *)(*(void *)(a1 + 32) + 56) = 0;
  }
  return result;
}

id sub_10001A92C(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 136) addDestination:*(void *)(a1 + 40) touchIdentifier:*(unsigned int *)(a1 + 48)];
}

id sub_10001A940(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 16) increment];
  [*(id *)(*(void *)(a1 + 32) + 104) includeBitNumber:*(void *)(a1 + 40)];
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(void **)(*(void *)(a1 + 32) + 112);

  return _[v3 excludeBitNumber:v2];
}

id sub_10001A990(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 40) increment];
  [*(id *)(*(void *)(a1 + 32) + 104) includeBitNumber:*(void *)(a1 + 40)];
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(void **)(*(void *)(a1 + 32) + 120);

  return _[v3 excludeBitNumber:v2];
}

id sub_10001A9E0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _queue_postUpdate:*(void *)(a1 + 40) toProcessPID:a2];
}

void sub_10001A9F0(uint64_t a1)
{
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKey:*(unsigned int *)(a1 + 40)];
  if ([v3 count])
  {
    uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKey:*(unsigned int *)(a1 + 40)];

    if (v2) {
      return;
    }
    id v3 = objc_alloc_init((Class)BKSTouchDeliveryUpdate);
    [v3 setType:1];
    [v3 setPid:0xFFFFFFFFLL];
    [v3 setTouchIdentifier:*(unsigned int *)(a1 + 40)];
    [v3 setIsDetached:*(unsigned __int8 *)(a1 + 44)];
    [*(id *)(a1 + 32) _queue_pendUpdate:v3];
  }
}

void sub_10001AACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001AAE4(uint64_t a1, void *a2)
{
  id v9 = a2;
  unint64_t v3 = *(void *)(*(void *)(a1 + 32) + 32);
  int64_t v4 = __clz(__rbit64(v3));
  unint64_t v5 = __clz(v3);
  unint64_t v6 = 63 - v5;
  if (v4 <= (uint64_t)(63 - v5))
  {
    unint64_t v7 = 64 - v5;
    unint64_t v8 = 63 - v5;
    do
    {
      if ((*(void *)(*(void *)(a1 + 32) + 32) >> v4))
      {
        if (v8 == v4) {
          [v9 appendFormat:@"%d", v6];
        }
        else {
          [v9 appendFormat:@"%d ", v4];
        }
      }
      ++v4;
    }
    while (v7 != v4);
  }
}

id sub_10001ABD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _queue_postUpdate:a3 forTouchIdentifier:a2];
}

id sub_10001ABDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    [*(id *)(a1 + 32) appendString:@" "];
  }
  unint64_t v6 = *(void **)(a1 + 32);
  if (a3 == 1) {
    id result = [v6 appendFormat:@"%X", a2, v8];
  }
  else {
    id result = [v6 appendFormat:@"%X-%X", a2, a3 + a2 - 1];
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

uint64_t sub_10001AC78(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 80);
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8);
  if (*(void *)(v1 + 24) == -1) {
    *(void *)(v1 + 24) = 1;
  }
  return result;
}

id sub_10001ACAC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queue_enumerateDigitizersForDisplay:*(void *)(a1 + 40) usingBlock:&stru_1000F7178];
}

void sub_10001ACC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    int v2 = *(unsigned __int8 *)(a1 + 40);
    if (*(unsigned __int8 *)(v1 + 52) != v2)
    {
      *(unsigned char *)(v1 + 52) = v2;
      unint64_t v3 = BKLogOrientationDevice();
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      if (v2)
      {
        if (v4)
        {
          LOWORD(v7[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Turning on orientation events.", (uint8_t *)v7, 2u);
        }

        kdebug_trace();
        uint64_t v6 = *(void *)(v1 + 112);
        unint64_t v5 = *(void **)(v1 + 120);
        v7[0] = _NSConcreteStackBlock;
        v7[1] = 3221225472;
        _OWORD v7[2] = sub_100094338;
        v7[3] = &unk_1000F8AC0;
        void v7[4] = v1;
        [v5 startDeviceOrientationUpdatesToQueue:v6 withHandler:v7];
        sub_100094398(v1);
      }
      else
      {
        if (v4)
        {
          LOWORD(v7[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Turning off orientation events.", (uint8_t *)v7, 2u);
        }

        kdebug_trace();
        [*(id *)(v1 + 120) stopDeviceOrientationUpdates];
        sub_100093CC0((void *)v1);
      }
    }
  }
}

void sub_10001AE2C(uint64_t a1)
{
}

void sub_10001AE3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 66))
  {
    *(unsigned char *)(v1 + 66) = 1;
    [*(id *)(*(void *)(a1 + 32) + 32) invalidate];
    uint64_t v3 = *(void *)(a1 + 32);
    BOOL v4 = *(void **)(v3 + 32);
    *(void *)(v3 + 32) = 0;

    uint64_t v5 = *(void *)(a1 + 32);
    if (*(void *)(v5 + 48))
    {
      sub_10001BE48(v5);
    }
  }
}

void sub_10001AEB4(uint64_t a1)
{
}

void sub_10001AEC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v5 = *(void **)(v2 + 16);
  BOOL v4 = (id *)(v2 + 16);
  if (v5 != v3) {
    objc_storeStrong(v4, v3);
  }
}

void sub_10001AEE4(uint64_t a1, void *a2)
{
  id v6 = a2;
  [v6 setWantsAccelerometerEvents:1];
  [v6 setAccelerometerUpdateInterval:*(double *)(a1 + 32)];
  LODWORD(v3) = *(_DWORD *)(a1 + 40);
  [v6 setXThreshold:v3];
  LODWORD(v4) = *(_DWORD *)(a1 + 44);
  [v6 setYThreshold:v4];
  LODWORD(v5) = *(_DWORD *)(a1 + 48);
  [v6 setZThreshold:v5];
}

uint64_t sub_10001AF60(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 52)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 52) || *(_DWORD *)(result + 56) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  int v4 = *(_DWORD *)(result + 32);
  char v5 = *(unsigned char *)(result + 36);
  char v6 = *(unsigned char *)(result + 40);
  uint64_t v7 = *(void *)(result + 44);
  long long v8 = *(_OWORD *)(result + 88);
  v10[0] = *(_OWORD *)(result + 72);
  v10[1] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  id v12 = sub_1000050A8;
  double v13 = &unk_1000F6208;
  char v16 = v5;
  char v17 = v6;
  uint64_t v14 = v7;
  int v15 = v4;
  id result = sub_100005C1C((uint64_t)"_BKHIDXXTouchStreamSetEventDispatchMode", BKTouchStreamsEntitlement, BKBackBoardClientEntitlement, (uint64_t)v10);
  if (result)
  {
    id result = ((uint64_t (*)(void *))v12)(v11);
    int v9 = 0;
  }
  else
  {
    int v9 = 5;
  }
  *(_DWORD *)(a2 + 32) = v9;
  return result;
}

void sub_10001B090(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 68)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(a1 + 68) && *(_DWORD *)(a1 + 72) > 0x1Fu)
      {
        uint64_t v4 = *(unsigned int *)(a1 + 28);
        double v5 = *(double *)(a1 + 48);
        float v6 = *(float *)(a1 + 56);
        float v7 = *(float *)(a1 + 60);
        float v8 = *(float *)(a1 + 64);
        long long v9 = *(_OWORD *)(a1 + 104);
        v10[0] = *(_OWORD *)(a1 + 88);
        v10[1] = v9;
        sub_100005394(v4, (uint64_t)v10, v5, v6, v7, v8);
        *(_DWORD *)(a2 + 32) = 0;
        return;
      }
      int v3 = -309;
    }
    else
    {
      int v3 = -300;
    }
  }
  else
  {
    int v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

_DWORD *sub_10001B158(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) == 0
    && (int v3 = result, v4 = result[1], v4 >= 0x28)
    && v4 <= 0x428
    && ((unsigned int v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (unsigned int v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = v4 == v7) : (v8 = 0),
        v8 && (id result = memchr(result + 10, 0, v4 - 40)) != 0))
  {
    int v10 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v10 && *((_DWORD *)v10 + 1) > 0x1Fu)
    {
      long long v11 = *(_OWORD *)(v10 + 36);
      v12[0] = *(_OWORD *)(v10 + 20);
      v12[1] = v11;
      id result = (_DWORD *)sub_10001B244((uint64_t)(v3 + 10), (uint64_t)v12);
      *(_DWORD *)(a2 + 32) = result;
      return result;
    }
    int v9 = -309;
  }
  else
  {
    int v9 = -304;
  }
  *(_DWORD *)(a2 + 32) = v9;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10001B244(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  uint64_t v4 = sub_100004C78;
  unsigned int v5 = &unk_1000F7D08;
  uint64_t v6 = a1;
  if (!sub_1000168CC(BKBackBoardClientEntitlement, a2)) {
    return 5;
  }
  v4((uint64_t)v3);
  return 0;
}

void sub_10001B6A4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    if (v3 >= 30)
    {
      uint64_t v6 = +[NSString stringWithFormat:@"pathIndex out of bounds: %d", *(void *)(a2 + 8)];
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        unsigned int v7 = NSStringFromSelector("removeContact:");
        BOOL v8 = (objc_class *)objc_opt_class();
        int v9 = NSStringFromClass(v8);
        *(_DWORD *)buf = 138544642;
        id v12 = v7;
        __int16 v13 = 2114;
        uint64_t v14 = v9;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2114;
        CFStringRef v18 = @"BKTouchContactSet.m";
        __int16 v19 = 1024;
        int v20 = 101;
        __int16 v21 = 2114;
        uint32_t v22 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
      }
      [v6 UTF8String];
      _bs_set_crash_log_message();
      __break(0);
      JUMPOUT(0x10001B864);
    }
    uint64_t v4 = *(void **)(a1 + 16 + 8 * v3);
    if (v4)
    {
      unsigned int v5 = *(void **)(a1 + 8);
      id v10 = v4;
      [v5 removeObject:];
      *(void *)(a1 + 16 + 8 * v3) = 0;
    }
  }
}

void sub_10001B86C(uint64_t a1, double a2)
{
  if (a1 && *(double *)(a1 + 40) != a2)
  {
    *(double *)(a1 + 40) = a2;
    uint64_t v4 = *(void *)(a1 + 128);
    unsigned int v5 = BKLogOrientationDevice();
    uint64_t v6 = v5;
    if (v4)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 134217984;
        double v10 = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setUpdateInterval:%g", (uint8_t *)&v9, 0xCu);
      }

      double v7 = *(double *)(a1 + 40) * 1000000.0;
      BOOL v8 = *(void **)(a1 + 128);
      uint64_t v6 = +[NSNumber numberWithDouble:v7];
      [v8 setProperty:v6 forKey:@"ReportInterval"];
    }
    else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v9 = 134217984;
      double v10 = a2;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "missing accel HID service plugin (setUpdateInterval:%g)", (uint8_t *)&v9, 0xCu);
    }
  }
}

void sub_10001B9C8(uint64_t a1, float a2)
{
  if (a1 && *(float *)(a1 + 48) != a2)
  {
    *(float *)(a1 + 48) = a2;
    uint64_t v4 = *(void *)(a1 + 128);
    unsigned int v5 = BKLogOrientationDevice();
    uint64_t v6 = v5;
    if (v4)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        double v13 = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setInterruptEventThresholds:%g", buf, 0xCu);
      }

      LODWORD(v7) = *(_DWORD *)(a1 + 48);
      uint64_t v6 = +[NSNumber numberWithFloat:v7];
      BOOL v8 = +[NSNumber numberWithInt:20000];
      v10[0] = @"ThresholdX";
      v10[1] = @"ThresholdY";
      v11[0] = v6;
      v11[1] = v6;
      _OWORD v10[2] = @"ThresholdZ";
      v10[3] = @"ThresholdPeriod";
      void v11[2] = v6;
      v11[3] = v8;
      int v9 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:4];
      [*(id *)(a1 + 128) setProperty:v9 forKey:@"Shake"];
    }
    else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      double v13 = a2;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "missing accel HID service plugin (setInterruptEventThresholds:%g)", buf, 0xCu);
    }
  }
}

void sub_10001BE48(uint64_t a1)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 65) = 1;
    if (([*(id *)(a1 + 32) isActive] & 1) == 0) {
      sub_10000E6B0(a1);
    }
    [*(id *)(a1 + 48) invalidate];
    uint64_t v2 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
  }
}

void sub_10001C0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, objc_super a11)
{
  a11.super_class = (Class)BKDirectTouchStateHitTester;
  [(_Unwind_Exception *)&a11 dealloc];
  _Unwind_Resume(a1);
}

void sub_10001C0E8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10005EC58(a1);
  }
  _Unwind_Resume(a1);
}

id sub_10001C32C()
{
  self;
  if (qword_100123158 != -1) {
    dispatch_once(&qword_100123158, &stru_1000F89F8);
  }
  id v0 = (void *)qword_100123150;

  return v0;
}

void sub_10001DE60(id a1)
{
  uint64_t v1 = objc_alloc_init(BKDisplayController);
  uint64_t v2 = (void *)qword_100122DC8;
  qword_100122DC8 = (uint64_t)v1;
}

void sub_10001DE9C(void *a1, unsigned int *a2)
{
  uint64_t v3 = *a2;
  id v4 = a1;
  [v4 setTargetContextID:v3];
  [v4 setTargetSlotID:a2[1]];
}

id sub_10001DEF8(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10001DF84;
  v3[3] = &unk_1000F58A8;
  v3[4] = a1;
  uint64_t v1 = +[BKSHIDEventHitTestLayerInformation build:v3];

  return v1;
}

void sub_10001DF84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(_OWORD **)(a1 + 32);
  long long v5 = v4[7];
  long long v24 = v4[6];
  long long v25 = v5;
  long long v6 = v4[9];
  long long v26 = v4[8];
  long long v27 = v6;
  long long v7 = v4[3];
  long long v20 = v4[2];
  long long v21 = v7;
  long long v8 = v4[5];
  long long v22 = v4[4];
  long long v23 = v8;
  [v3 setCumulativeLayerTransform:&v20];
  int v9 = *(_OWORD **)(a1 + 32);
  long long v10 = v9[15];
  long long v24 = v9[14];
  long long v25 = v10;
  long long v11 = v9[17];
  long long v26 = v9[16];
  long long v27 = v11;
  long long v12 = v9[11];
  long long v20 = v9[10];
  long long v21 = v12;
  long long v13 = v9[13];
  long long v22 = v9[12];
  long long v23 = v13;
  [v3 setCumulativeContentsTransform:&v20];
  LODWORD(v14) = *(_DWORD *)(*(void *)(a1 + 32) + 24);
  [v3 setCumulativeOpacity:v14];
  [v3 setHasInsecureFilter:*(unsigned __int8 *)(*(void *)(a1 + 32) + 289)];
  [v3 setDetectedOcclusion:*(unsigned __int8 *)(*(void *)(a1 + 32) + 288)];
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(v16 + 16);
  if ((v17 & 8) != 0)
  {
    LODWORD(v15) = *(_DWORD *)(v16 + 292);
    [v3 setBackgroundAverage:v15];
    LODWORD(v18) = *(_DWORD *)(*(void *)(a1 + 32) + 296);
    [v3 setBackgroundStandardDeviation:v18];
    LODWORD(v19) = *(_DWORD *)(*(void *)(a1 + 32) + 300);
    [v3 setBackgroundAverageContrastThreshold:v19];
    uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 16);
  }
  [v3 setValidMask:v17];
}

void sub_10001E08C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v6 = [*(id *)(a1 + 8) context];
    id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v12;
      do
      {
        long long v10 = 0;
        do
        {
          if (*(void *)v12 != v9) {
            objc_enumerationMutation(v6);
          }
          [*(id *)(*((void *)&v11 + 1) + 8 * (void)v10) display:v5 didBecomeBlank:a3];
          long long v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v8);
    }
  }
}

void sub_10001EA88(id a1, NSString *a2, _BKMousePointerServerClientPerDisplay *a3, BOOL *a4)
{
  id v4 = a3;
  id v5 = [(_BKMousePointerServerClientPerDisplay *)v4 renderingAssertion];
  [v5 invalidate];

  long long v6 = [(_BKMousePointerServerClientPerDisplay *)v4 modelUpdateAssertion];
  [v6 invalidate];

  id v7 = [(_BKMousePointerServerClientPerDisplay *)v4 buttonDownRepositionUniqueIdentifierToAssertionMap];

  [v7 enumerateKeysAndObjectsUsingBlock:&stru_1000F5B18];
}

void sub_10001EB18(id a1, NSUUID *a2, BSInvalidatable *a3, BOOL *a4)
{
}

id sub_10001EB20(id a1, BKIOHIDService *a2)
{
  uint64_t v2 = a2;
  if ([(BKIOHIDService *)v2 serviceStatus] == (id)2)
  {
    id v3 = 0;
  }
  else
  {
    id v4 = objc_alloc((Class)BKSMousePointerDevice);
    id v5 = [(BKIOHIDService *)v2 senderDescriptor];
    id v3 = [v4 initWithSenderDescriptor:v5];

    long long v6 = [(BKIOHIDService *)v2 uniqueProductIdentifier];
    [v3 setPreferenceKey:v6];

    id v7 = [(BKIOHIDService *)v2 propertyForKey:@"Product"];
    [v3 setProductName:v7];
    id v8 = [(BKIOHIDService *)v2 propertyForKey:@"Manufacturer"];
    [v3 setManufacturerName:v8];
    if ([(BKIOHIDService *)v2 eventSource] == 11
      && [(BKIOHIDService *)v2 claimsToConformToUsagePage:13 usage:12])
    {
      [v3 setHasVirtualMouseButtons:1];
    }
    if ([(BKIOHIDService *)v2 eventSource] == 12)
    {
      uint64_t v9 = [(BKIOHIDService *)v2 propertyForKey:@"VendorID"];
      uint64_t v10 = objc_opt_class();
      id v11 = v9;
      if (v10) {
        id v12 = (objc_opt_isKindOfClass() & 1) != 0 ? v11 : 0;
      }
      else {
        id v12 = 0;
      }
      id v13 = v12;

      unsigned int v14 = [v13 intValue];
      if (v14 == 1452 || v14 == 76) {
        [v3 setSupportsDragLock:1];
      }
    }
    if ([(BKIOHIDService *)v2 eventSource] == 12)
    {
      double v15 = [(BKIOHIDService *)v2 propertyForKey:@"VendorID"];
      uint64_t v16 = objc_opt_class();
      id v17 = v15;
      if (v16)
      {
        if (objc_opt_isKindOfClass()) {
          double v18 = v17;
        }
        else {
          double v18 = 0;
        }
      }
      else
      {
        double v18 = 0;
      }
      id v19 = v18;

      long long v20 = [(BKIOHIDService *)v2 propertyForKey:@"ProductID"];
      uint64_t v21 = objc_opt_class();
      id v22 = v20;
      if (v21)
      {
        if (objc_opt_isKindOfClass()) {
          long long v23 = v22;
        }
        else {
          long long v23 = 0;
        }
      }
      else
      {
        long long v23 = 0;
      }
      id v24 = v23;

      unsigned int v25 = [v19 intValue];
      unsigned int v26 = [v24 intValue];

      if (v25 == 1452 && (v26 & 0xFFFFFFFE) == 0x454)
      {
        [v3 setSupportsLightClick:1];
        [v3 setSupportsSystemHaptics:1];
      }
    }
  }

  return v3;
}

void sub_10001EE0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = BKLogMousePointer();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138543362;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received Connection Interruption: %{public}@", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 32) _queue_removeConnection:v3];
}

void sub_10001EED0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = BKLogMousePointer();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138543362;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received Connection Invalidation: %{public}@", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 32) _queue_removeConnection:v3];
}

void sub_10001F02C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [*(id *)(*((void *)&v9 + 1) + 8 * (void)v7) remoteTarget:(void)v9];
        [v8 pointerGlobalDevicePreferencesDidChange:*(void *)(a1 + 40)];

        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
}

id sub_10001F214(uint64_t a1, void *a2)
{
  return _[a2 setGlobalDevicePreferences:*(void *)(a1 + 32)];
}

void sub_10001F340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001F358(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001F368(uint64_t a1)
{
}

void sub_10001F370(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) globalDevicePreferences];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_10001F4B8(uint64_t a1, void *a2)
{
  return _[a2 setPreferences:*(void *)(a1 + 32) forDevice:*(void *)(a1 + 40)];
}

void sub_10001F618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001F630(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) preferencesForDevice:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10001F750(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v14 = a4;
  unsigned int v5 = [*(id *)(a1 + 32) BOOLValue];
  BOOL v6 = v5 == [*(id *)(*(void *)(a1 + 40) + 32) containsObject:v14];
  id v7 = v14;
  if (!v6)
  {
    id v8 = *(id *)(*(void *)(a1 + 40) + 8);
    long long v9 = *(void **)(*(void *)(a1 + 40) + 32);
    if (v5)
    {
      id v10 = v14;
      if (!v9)
      {
        id v11 = objc_alloc_init((Class)NSMutableSet);
        uint64_t v12 = *(void *)(a1 + 40);
        id v13 = *(void **)(v12 + 32);
        *(void *)(v12 + 32) = v11;

        id v10 = v14;
        long long v9 = *(void **)(*(void *)(a1 + 40) + 32);
      }
      [v9 addObject:v10];
      if ([*(id *)(*(void *)(a1 + 40) + 32) count] == (id)1) {
        [v8 addGlobalDevicePreferencesObserver:*(void *)(a1 + 40)];
      }
    }
    else
    {
      [v9 removeObject:v14];
      if (![*(id *)(*(void *)(a1 + 40) + 32) count]) {
        [v8 removeGlobalDevicePreferencesObserver:*(void *)(a1 + 40)];
      }
    }

    id v7 = v14;
  }
}

void sub_10001FAA0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v14 = a2;
  id v7 = a3;
  id v8 = a4;
  if (!v14)
  {
    long long v9 = +[NSString stringWithFormat:@"we expect the controller to exist"];
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      id v10 = NSStringFromSelector(*(SEL *)(a1 + 72));
      id v11 = (objc_class *)objc_opt_class();
      uint64_t v12 = NSStringFromClass(v11);
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138544642;
      uint64_t v16 = v10;
      __int16 v17 = 2114;
      double v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = v13;
      __int16 v21 = 2114;
      CFStringRef v22 = @"BKMousePointerServiceServer.m";
      __int16 v23 = 1024;
      int v24 = 273;
      __int16 v25 = 2114;
      unsigned int v26 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
    }
    [v9 UTF8String];
    _bs_set_crash_log_message();
    __break(0);
    JUMPOUT(0x10001FC38);
  }
  [v14 getHitTestContextsAtPoint:*(void *)(a1 + 40) withAdditionalContexts:*(void *)(a1 + 48) onDisplay:*(void *)(a1 + 56) withCompletion:*(void *)(a1 + 64)];
}

void sub_10001FD38(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = [a4 remoteProcess];
  id v8 = [v7 pid];

  id v9 = *(id *)(a1 + 32);
  id v10 = [v9 length];
  id v11 = (void *)BKSDisplayUUIDMainKey;
  if (v10) {
    id v11 = v9;
  }
  id v12 = v11;

  [v6 setGlobalPointerEventRoutes:*(void *)(a1 + 40) forPID:v8 displayUUID:v12];
}

void sub_10001FEE4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(id *)(a1 + 32);
  id v6 = a3;
  id v7 = [v5 length];
  id v8 = (void *)BKSDisplayUUIDMainKey;
  if (v7) {
    id v8 = v5;
  }
  id v13 = v8;

  id v9 = [v6 infoForDisplayUUID:v13 createIfNeeded:0];

  id v10 = [v9 buttonDownRepositionUniqueIdentifierToAssertionMap];
  id v11 = [v10 objectForKey:*(void *)(a1 + 40)];
  id v12 = v11;
  if (v11)
  {
    [v11 invalidate];
    [v10 removeObjectForKey:*(void *)(a1 + 40)];
    if (![v10 count]) {
      [v9 setButtonDownRepositionUniqueIdentifierToAssertionMap:0];
    }
  }
}

void sub_1000201DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v19 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = *(void **)(a1 + 32);
  if (v9) {
    uint64_t v10 = (uint64_t)[v9 integerValue];
  }
  else {
    uint64_t v10 = 0xFFFFFFFFLL;
  }
  id v11 = *(id *)(a1 + 40);
  id v12 = [v11 length];
  id v13 = (void *)BKSDisplayUUIDMainKey;
  if (v12) {
    id v13 = v11;
  }
  id v14 = v13;

  double v15 = [v7 infoForDisplayUUID:v14 createIfNeeded:1];
  id v16 = [v15 buttonDownRepositionUniqueIdentifierToAssertionMap];
  if (!v16)
  {
    id v16 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:1];
    [v15 setButtonDownRepositionUniqueIdentifierToAssertionMap:v16];
  }
  __int16 v17 = [v16 objectForKey:*(void *)(a1 + 48)];

  if (!v17)
  {
    double v18 = [*(id *)(*(void *)(a1 + 56) + 8) acquireButtonDownPointerRepositionAssertionForReason:*(void *)(a1 + 64) contextRelativePointerPosition:*(void *)(a1 + 72) onDisplay:v14 restrictingToPID:v10];
    if (v18) {
      [v16 setObject:v18 forKey:*(void *)(a1 + 48)];
    }
  }
}

void sub_10002041C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = [a4 remoteProcess];
  id v8 = [v7 pid];

  if ((int)v8 <= 0)
  {
    id v9 = BKLogMousePointer();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10[0] = 67109120;
      v10[1] = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "setSuppressAllEvents: bad pid:%d", (uint8_t *)v10, 8u);
    }
  }
  else
  {
    [v6 setEventsDisabled:objc_msgSend(*(id *)(a1 + 32), "BOOLValue") pid:v8];
  }
}

void sub_100020748(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  if (v6) {
    uint64_t v7 = (uint64_t)[v6 integerValue];
  }
  else {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  [*(id *)(a1 + 64) doubleValue];
  [v12 setContextRelativePointerPosition:v8 withInitialVelocity:v9 onDisplay:v10 withDecelerationRate:v7 restrictingToPID:[v5 pid] auditPID:v11];
}

void sub_100020948(void *a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = (void *)a1[4];
  if (v6) {
    uint64_t v7 = (uint64_t)[v6 integerValue];
  }
  else {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  [v8 setContextRelativePointerPosition:a1[5] onDisplay:a1[6] withAnimationParameters:a1[7] restrictingToPID:v7 auditPID:[v5 pid]];
}

void sub_100020B0C(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(id *)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  id v9 = [v6 length];
  uint64_t v10 = (void *)BKSDisplayUUIDMainKey;
  if (v9) {
    uint64_t v10 = v6;
  }
  id v17 = v10;

  [*(id *)(a1 + 40) bs_CGPointValue];
  double v12 = v11;
  double v14 = v13;
  uint64_t v15 = *(void *)(a1 + 48);
  id v16 = [v7 pid];

  [v8 setPointerPosition:v17 onDisplay:v15 withAnimationParameters:v16 auditPID:v12];
}

void sub_100020CA8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = [a4 remoteProcess];
  [v6 setGlobalPointerPosition:v7 process:*(double *)(a1 + 32) *(double *)(a1 + 40)];
}

void sub_100020E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100020E40(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 8) normalizedGlobalPointerPosition];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v5;
  return result;
}

void sub_100020F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100020F9C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 8) globalPointerPosition];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v5;
  return result;
}

void sub_100021070(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 24) count])
  {
    uint64_t v2 = [*(id *)(a1 + 32) _pointerDevicesFromIOHIDServices:*(void *)(a1 + 40)];
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v3 = *(id *)(*(void *)(a1 + 32) + 24);
    id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v10;
      do
      {
        id v7 = 0;
        do
        {
          if (*(void *)v10 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = [*(id *)(*((void *)&v9 + 1) + 8 * (void)v7) remoteTarget:v9];
          [v8 pointingDevicesDidChange:v2];

          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v5);
    }
  }
}

void sub_10002127C(uint64_t a1, void *a2)
{
  id v4 = a2;
  [v4 setDomain:@"BKSHIDServices"];
  id v3 = +[BKSMousePointerServiceSessionSpecification identifier];
  [v4 setService:v3];

  [v4 setDelegate:*(void *)(a1 + 32)];
}

id sub_100021B48(uint64_t a1)
{
  CFStringRef v9 = @"keyboardHIDEvent";
  uint64_t v2 = +[NSString stringWithFormat:@"0x%02x", *(unsigned __int16 *)(a1 + 32), @"usage"];
  v7[1] = @"down";
  v8[0] = v2;
  id v3 = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 34)];
  v8[1] = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:2];
  long long v10 = v4;
  id v5 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];

  return v5;
}

id sub_100021C64(uint64_t a1)
{
  CFStringRef v7 = @"volumeDownButtonEvent";
  CFStringRef v5 = @"down";
  uint64_t v1 = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 32)];
  uint64_t v6 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  id v8 = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];

  return v3;
}

id sub_100021D50(uint64_t a1)
{
  CFStringRef v7 = @"volumeUpButtonEvent";
  CFStringRef v5 = @"down";
  uint64_t v1 = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 32)];
  uint64_t v6 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  id v8 = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];

  return v3;
}

id sub_100021E3C(uint64_t a1)
{
  CFStringRef v7 = @"PowerButtonEvent";
  CFStringRef v5 = @"down";
  uint64_t v1 = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 32)];
  uint64_t v6 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  id v8 = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];

  return v3;
}

id sub_100021F28(uint64_t a1)
{
  os_unfair_lock_lock(&stru_100122E80);
  float v2 = *(float *)&dword_100122E84;
  os_unfair_lock_unlock(&stru_100122E80);
  BOOL v3 = v2 == 0.0;
  id v4 = +[BKDisplayBrightnessController sharedInstance];
  [v4 brightnessLevel];
  int v6 = v5;

  CFStringRef v20 = @"cameraShutterButtonEvent";
  v18[0] = @"event";
  CFStringRef v7 = +[NSString stringWithFormat:@"0x%02x", *(unsigned __int16 *)(a1 + 32), @"usage"];
  v16[1] = @"down";
  v17[0] = v7;
  id v8 = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 34)];
  v17[1] = v8;
  CFStringRef v9 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];
  v19[0] = v9;
  v18[1] = @"displayBrightness";
  LODWORD(v10) = v6;
  long long v11 = +[NSNumber numberWithFloat:v10];
  v19[1] = v11;
  v18[2] = @"backlight";
  long long v12 = +[NSNumber numberWithBool:v3];
  v19[2] = v12;
  double v13 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:3];
  __int16 v21 = v13;
  double v14 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];

  return v14;
}

id sub_100022124()
{
  unsigned __int16 IntegerValue = IOHIDEventGetIntegerValue();
  unsigned __int16 v1 = IOHIDEventGetIntegerValue();
  BOOL v2 = IOHIDEventGetIntegerValue() != 0;
  BOOL v3 = +[NSMutableDictionary dictionary];
  id v4 = +[NSString stringWithFormat:@"0x%02x", IntegerValue];
  [v3 setObject:v4 forKeyedSubscript:@"usagePage"];

  int v5 = +[NSString stringWithFormat:@"0x%02x", v1];
  [v3 setObject:v5 forKeyedSubscript:@"usage"];

  int v6 = +[NSNumber numberWithInt:v2];
  [v3 setObject:v6 forKeyedSubscript:@"down"];

  CFStringRef v7 = +[NSNumber numberWithInt:IOHIDEventGetIntegerValue()];
  [v3 setObject:v7 forKeyedSubscript:@"count"];

  id v8 = +[NSNumber numberWithInt:IOHIDEventGetIntegerValue()];
  [v3 setObject:v8 forKeyedSubscript:@"longPress"];

  uint64_t Phase = IOHIDEventGetPhase();
  if (Phase)
  {
    double v10 = +[NSNumber numberWithUnsignedShort:Phase];
    [v3 setObject:v10 forKeyedSubscript:@"phase"];
  }
  CFStringRef v13 = @"buttonEvent";
  double v14 = v3;
  long long v11 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];

  return v11;
}

id sub_10002237C()
{
  IOHIDEventGetFloatValue();
  double v1 = v0;
  IOHIDEventGetFloatValue();
  double v3 = v2;
  IOHIDEventGetFloatValue();
  double v5 = v4;
  uint64_t IntegerValue = IOHIDEventGetIntegerValue();
  CFStringRef v16 = @"gyro";
  v14[0] = @"x";
  CFStringRef v7 = +[NSNumber numberWithDouble:v1];
  v15[0] = v7;
  v14[1] = @"y";
  id v8 = +[NSNumber numberWithDouble:v3];
  v15[1] = v8;
  v14[2] = @"z";
  CFStringRef v9 = +[NSNumber numberWithDouble:v5];
  v15[2] = v9;
  v14[3] = @"type";
  double v10 = +[NSNumber numberWithUnsignedInt:IntegerValue];
  v15[3] = v10;
  long long v11 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:4];
  id v17 = v11;
  long long v12 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];

  return v12;
}

id sub_100022544()
{
  IOHIDEventGetFloatValue();
  CFStringRef v6 = @"ambientLightSensor";
  CFStringRef v4 = @"level";
  double v0 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  double v5 = v0;
  double v1 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  CFStringRef v7 = v1;
  double v2 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];

  return v2;
}

id sub_100022634(id a1)
{
  return @"Volume down pressed; possible user problem";
}

void sub_10002283C(id a1, SLGActivatableLogging *a2)
{
}

void sub_100022848(id a1, SLGActivatableLogging *a2)
{
}

void sub_1000229C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 unsignedLongLongValue];
  CFStringRef v7 = *(void **)(a1 + 32);
  id v8 = +[NSString stringWithFormat:@"0x%llX", v6];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_100022AB8;
  v10[3] = &unk_1000F8E50;
  id v11 = v5;
  id v12 = *(id *)(a1 + 32);
  id v9 = v5;
  [v7 appendBodySectionWithName:v8 multilinePrefix:0 block:v10];
}

void sub_100022AB8(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100022B40;
  v2[3] = &unk_1000F5C48;
  double v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 enumerateKeysAndObjectsUsingBlock:v2];
}

void sub_100022B40(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  unsigned int v5 = [a2 unsignedIntValue];
  id v6 = *(void **)(a1 + 32);
  CFStringRef v7 = +[NSString stringWithFormat:@"page:0x%X usage:0x%X", HIWORD(v5), (unsigned __int16)v5];
  id v8 = [v6 appendObject:v9 withName:v7];
}

void sub_100022BDC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v9 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v9)
  {
    [v9 removeObjectForKey:v8];
    if (![v9 count]) {
      [*(id *)(a1 + 8) removeObjectForKey:v7];
    }
  }
}

void sub_100022DB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) delegate];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100022F90(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = +[NSString stringWithFormat:@"0x%x", a2];
  id v3 = [v2 appendObject:v4 withName:@"port"];
}

id sub_10002312C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queue_invalidate];
}

uint64_t sub_100023224(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100023234(uint64_t a1)
{
}

void sub_10002323C(uint64_t a1)
{
}

void sub_10002355C(void *a1)
{
  uint64_t v2 = *(void *)(a1[4] + 8);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;

  uint64_t v4 = *(void *)(a1[5] + 8);
  unsigned int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;

  uint64_t v6 = *(void *)(a1[6] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

void sub_1000235C4(uint64_t a1)
{
  uint64_t v2 = BKLogDetailed();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v8 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "BKHIDEventClient died (pid): %{public}@", buf, 0xCu);
  }

  id v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1000237E8;
  v5[3] = &unk_1000F5C98;
  id v6 = v3;
  [v6 _queue_performDelegateCallout:v5];
}

void sub_1000236D0(uint64_t a1)
{
  uint64_t v2 = BKLogDetailed();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v8 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "BKHIDEventClient died (port): %{public}@", buf, 0xCu);
  }

  id v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1000237DC;
  v5[3] = &unk_1000F5C98;
  id v6 = v3;
  [v6 _queue_performDelegateCallout:v5];
}

id sub_1000237DC(uint64_t a1, void *a2)
{
  return _[a2 clientDied:*(void *)(a1 + 32)];
}

id sub_1000237E8(uint64_t a1, void *a2)
{
  return _[a2 clientDied:*(void *)(a1 + 32)];
}

void sub_100023A40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) remoteProcess];
  unsigned int v5 = [v4 pid];
  id v6 = +[BSObjCProtocol protocolForProtocol:&OBJC_PROTOCOL___BKSSystemShellClientInterface];
  id v7 = +[BSObjCProtocol protocolForProtocol:&OBJC_PROTOCOL___BKSSystemShellServerInterface];
  uint64_t v8 = +[BSMutableServiceInterface interfaceWithIdentifier:BKSSystemShellShellServiceName];
  [v8 setServer:v7];
  [v8 setClient:v6];
  id v9 = +[BSServiceQuality userInitiated];
  [v3 setServiceQuality:v9];

  [v3 setInterface:v8];
  [v3 setInterfaceTarget:*(void *)(*(void *)(a1 + 40) + 24)];
  [v3 setTargetQueue:*(void *)(*(void *)(a1 + 40) + 32)];
  objc_initWeak(&location, *(id *)(a1 + 40));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100023C7C;
  v13[3] = &unk_1000F5D80;
  objc_copyWeak(&v14, &location);
  unsigned int v15 = v5;
  [v3 setInterruptionHandler:v13];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_100023D50;
  v10[3] = &unk_1000F5D80;
  objc_copyWeak(&v11, &location);
  unsigned int v12 = v5;
  [v3 setInvalidationHandler:v10];
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

void sub_100023C50(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_100023C7C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v3 = BKLogSystemShell();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = *(_DWORD *)(a1 + 40);
      v5[0] = 67109120;
      v5[1] = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[Shell] interrupted connection pid:%d", (uint8_t *)v5, 8u);
    }

    [WeakRetained[3] systemShellDidTerminate:*(unsigned int *)(a1 + 40)];
  }
}

void sub_100023D50(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v3 = BKLogSystemShell();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = *(_DWORD *)(a1 + 40);
      v5[0] = 67109120;
      v5[1] = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[Shell] invalidated connection pid:%d", (uint8_t *)v5, 8u);
    }

    [WeakRetained[3] systemShellDidTerminate:*(unsigned int *)(a1 + 40)];
  }
}

void sub_100023F8C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  unsigned int v5 = [v3 remoteProcess];
  unsigned int v6 = [v5 pid];
  id v7 = +[BSObjCProtocol protocolForProtocol:&OBJC_PROTOCOL___BKSSystemShellDataMigrationCheckInClientInterface];
  uint64_t v8 = +[BSObjCProtocol protocolForProtocol:&OBJC_PROTOCOL___BKSSystemShellDataMigrationCheckInServerInterface];
  id v9 = +[BSMutableServiceInterface interfaceWithIdentifier:BKSSystemShellDataMigrationCheckInServiceName];
  [v9 setServer:v8];
  [v9 setClient:v7];
  double v10 = +[BSServiceQuality userInitiated];
  [v4 setServiceQuality:v10];

  [v4 setInterface:v9];
  [v4 setInterfaceTarget:*(void *)(*(void *)(a1 + 40) + 24)];
  id v11 = +[BKSystemShellSentinel dataMigrationQueue];
  [v4 setTargetQueue:v11];

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100024170;
  v14[3] = &unk_1000F5D30;
  unsigned int v15 = v6;
  [v4 setInterruptionHandler:v14];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _OWORD v12[2] = sub_100024218;
  v12[3] = &unk_1000F5D30;
  unsigned int v13 = v6;
  [v4 setInvalidationHandler:v12];
}

void sub_100024170(uint64_t a1)
{
  uint64_t v2 = BKLogSystemShell();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[DataMigrationCheckIn] connection terminated pid:%d", (uint8_t *)v4, 8u);
  }
}

void sub_100024218(uint64_t a1)
{
  uint64_t v2 = BKLogSystemShell();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[DataMigrationCheckIn] connection invalidated pid:%d", (uint8_t *)v4, 8u);
  }
}

void sub_1000247F8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setBundleIdentifier:v3];
  [v4 setBundlePath:*(void *)(a1 + 40)];
  [v4 setJobLabel:*(void *)(a1 + 48)];
  [v4 setSystemIdleSleepInterval:*(double *)(a1 + 64)];
  [v4 setWatchdogType:*(void *)(a1 + 72)];
  id v5 = [*(id *)(a1 + 56) remoteProcess];
  [v4 setPid:[v5 pid]];
}

void sub_100024C94(uint64_t a1, void *a2)
{
  uint64_t v3 = BKSSystemShellServiceDomainName;
  id v4 = a2;
  [v4 setDomain:v3];
  [v4 setService:BKSSystemShellShellServiceName];
  [v4 setDelegate:*(void *)(a1 + 32)];
}

void sub_100024D0C(uint64_t a1, void *a2)
{
  uint64_t v3 = BKSSystemShellServiceDomainName;
  id v4 = a2;
  [v4 setDomain:v3];
  [v4 setService:BKSSystemShellDataMigrationCheckInServiceName];
  [v4 setDelegate:*(void *)(a1 + 32)];
}

uint64_t _linkguard_warnlisted_image_handler(const char *a1, const char *a2)
{
  id v4 = getenv("BACKBOARDD_ALLOW_RISKY_UIKIT_LINKING");
  if (!v4 || (uint64_t result = atoi(v4), (int)result < 1))
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    *(_OWORD *)__str = 0u;
    long long v11 = 0u;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      id v7 = a1;
      __int16 v8 = 2082;
      id v9 = a2;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "you may not link <%{public}s> into backboardd (source:%{public}s)", buf, 0x16u);
    }
    snprintf(__str, 0x100uLL, "you may not link <%s> into backboardd (source:%s)", a1, a2);
    abort_with_reason();
  }
  return result;
}

void sub_100024EAC(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  __int16 v8 = a4;
  if (a1)
  {
    BSContinuousMachTimeNow();
    double v10 = v9;
    long long v11 = BKLogCommon();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138543362;
      id v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "start %{public}@...", (uint8_t *)&v16, 0xCu);
    }

    if (a3)
    {
      kdebug_trace();
      v8[2](v8);
      kdebug_trace();
    }
    else
    {
      v8[2](v8);
    }
    BSContinuousMachTimeNow();
    double v13 = v12;
    double v14 = *(double *)(a1 + 8);
    long long v15 = BKLogCommon();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138543874;
      id v17 = v7;
      __int16 v18 = 2048;
      double v19 = v13 - v10;
      __int16 v20 = 2048;
      double v21 = v13 - v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "      %{public}@ ready in %gs. overall %gs", (uint8_t *)&v16, 0x20u);
    }
  }
}

void sub_10002506C(uint64_t a1)
{
  uint64_t v2 = dispatch_get_global_queue(33, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100025110;
  block[3] = &unk_1000F8E78;
  id v4 = *(id *)(a1 + 32);
  dispatch_async(v2, block);
}

void sub_100025110(uint64_t a1)
{
  id v2 = [objc_alloc((Class)RBSTerminateRequest) initForAllManagedWithReason:*(void *)(a1 + 32)];
  id v7 = 0;
  unsigned __int8 v3 = [v2 execute:&v7];
  id v4 = v7;
  if ((v3 & 1) == 0)
  {
    id v5 = BKLogCommon();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v9 = v6;
      __int16 v10 = 2114;
      id v11 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "failed to clear the board for %{public}@ : %{public}@", buf, 0x16u);
    }
  }
}

id sub_100025210(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isRequired];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100025244(uint64_t a1)
{
  dispatch_block_t v2 = dispatch_block_create((dispatch_block_flags_t)0, &stru_1000F5DA0);
  unsigned __int8 v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100025308;
  v5[3] = &unk_1000F5E08;
  id v6 = v3;
  id v7 = v2;
  id v4 = v2;
  [v6 launchPreboardWithCompletion:v5];
  dispatch_block_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_100025308(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = BKLogCommon();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138543362;
      id v6 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "LA PreBoard launch failed: %{public}@", (uint8_t *)&v5, 0xCu);
    }

    [*(id *)(a1 + 32) terminateWithCompletion:&stru_1000F5DE0];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000253E8(id a1, NSError *a2)
{
  dispatch_block_t v2 = a2;
  id v3 = BKLogCommon();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v4 = 138543362;
    int v5 = v2;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "LA PreBoard termination failed: %{public}@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10002549C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  if (objc_opt_class())
  {
    uint64_t v15 = 0;
    int v16 = &v15;
    uint64_t v17 = 0x2020000000;
    char v18 = 0;
    +[LAPreboard sharedInstance];
    *(void *)buf = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    id v11 = sub_100025210;
    double v12 = &unk_1000F8EA0;
    double v14 = &v15;
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    id v13 = v3;
    if (v2) {
      sub_100024EAC((uint64_t)v2, @"Check for Local Authentication", 0, buf);
    }
    if (*((unsigned char *)v16 + 24))
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      void v7[2] = sub_100025244;
      v7[3] = &unk_1000F8E78;
      id v4 = v3;
      id v8 = v4;
      if (v2)
      {
        sub_100024EAC((uint64_t)v2, @"LA PreBoard launch", 0, v7);
        id v4 = v8;
      }
    }
    _Block_object_dispose(&v15, 8);
  }
  else
  {
    int v5 = BKLogCommon();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "LA PreBoard not available", buf, 2u);
    }
  }
  sub_100024EAC(*(void *)(a1 + 32), @"Data Migration", 730464504, &stru_1000F5E28);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    sub_100024EAC(v6, @"Bootstrap system shells", 0, &stru_1000F5E48);
  }
}

void sub_1000256C0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000256D8(id a1)
{
  id v1 = +[BKSystemShellSentinel sharedInstance];
  [v1 dataMigratorDidComplete];
}

void sub_100025720(id a1)
{
  id v1 = objc_alloc_init(BKMigrator);
  [(BKMigrator *)v1 migrateIfNecessary];
}

uint64_t start(uint64_t a1, CFIndex *a2)
{
  kdebug_trace();
  _set_user_dir_suffix();
  int v3 = pthread_set_fixedpriority_self();
  if (v3)
  {
    id v4 = BKLogCommon();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v40 = *__error();
      LODWORD(v50.version) = 67109120;
      HIDWORD(v50.version) = v40;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "pthread_set_fixedpriority_self failed: %{darwin.errno}d", (uint8_t *)&v50, 8u);
    }
  }
  *(void *)__relative_prioritdouble y = 0;
  int v5 = pthread_self();
  if (pthread_get_qos_class_np(v5, (qos_class_t *)&__relative_priority[1], __relative_priority)
    || pthread_set_qos_class_self_np(QOS_CLASS_USER_INTERACTIVE, 0))
  {
    uint64_t v6 = BKLogCommon();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v39 = *__error();
      LODWORD(v50.version) = 67109120;
      HIDWORD(v50.version) = v39;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "pthread_set_qos failed: %{darwin.errno}d", (uint8_t *)&v50, 8u);
    }

    int v7 = 0;
  }
  else
  {
    int v7 = 1;
  }
  if (setiopolicy_np(9, 0, 1) < 0)
  {
    id v8 = BKLogCommon();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v41 = *__error();
      LODWORD(v50.version) = 67109120;
      HIDWORD(v50.version) = v41;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "setiopolicy_np failed: %{darwin.errno}d", (uint8_t *)&v50, 8u);
    }
  }
  uint64_t v10 = [BKIgnition alloc];
  id v11 = +[NSString stringWithUTF8String:*a2];
  if (v10)
  {
    v50.version = (CFIndex)v10;
    v50.info = BKIgnition;
    uint64_t v10 = [(CFRunLoopObserverContext *)(objc_super *)&v50 init];
    if (v10)
    {
      double v12 = BKLogCommon();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "starting %{public}@...", buf, 0xCu);
      }

      BSContinuousMachTimeNow();
      v10->_startTime = v13;
    }
  }

  sub_100024EAC((uint64_t)v10, @"prewarm oscard where available", 730464460, &stru_1000F5E68);
  sub_100024EAC((uint64_t)v10, @"CoreAccessories", 730464464, &stru_1000F5EC8);
  double v14 = v10;
  uint64_t v15 = +[BKFirstBootDetector sharedInstance];
  unsigned __int8 v16 = [v15 isFirstBoot];

  if ((v16 & 1) == 0)
  {
    uint64_t v17 = +[NSString stringWithFormat:@"%s respawn", *a2];
    char v18 = +[NSString stringWithFormat:@"clearing the board for %@", v17];
    v50.version = (CFIndex)_NSConcreteStackBlock;
    v50.info = (void *)3221225472;
    v50.retain = (const void *(__cdecl *)(const void *))sub_10002506C;
    v50.release = (void (__cdecl *)(const void *))&unk_1000F8E78;
    double v19 = v17;
    v50.copyDescription = v19;
    copyDescription = v19;
    if (v14)
    {
      sub_100024EAC((uint64_t)v14, v18, 0, &v50);
      copyDescription = v50.copyDescription;
    }
  }
  v50.version = 0;
  v50.info = &v50;
  v50.retain = (const void *(__cdecl *)(const void *))0x3032000000;
  v50.release = (void (__cdecl *)(const void *))sub_100026208;
  v50.copyDescription = (CFStringRef (__cdecl *)(const void *))sub_100026218;
  id v51 = 0;
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472;
  v46[2] = sub_100026220;
  v46[3] = &unk_1000F8EA0;
  double v21 = v14;
  long long v47 = v21;
  long long v48 = &v50;
  sub_100024EAC((uint64_t)v21, @"HID system", 730464468, v46);
  if (v21) {
    sub_100024EAC((uint64_t)v21, @"AttentionAwareness", 0, &stru_1000F5EE8);
  }
  sub_100024EAC((uint64_t)v21, @"GS", 730464472, &stru_1000F5F08);
  id v22 = +[BKSecurityManager sharedInstance];
  sub_100024EAC((uint64_t)v21, @"window server", 730464476, &stru_1000F5F28);
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  v45[2] = sub_10002630C;
  v45[3] = &unk_1000F7CD0;
  v45[4] = &v50;
  sub_100024EAC((uint64_t)v21, @"HID connection manager", 730464480, v45);
  sub_100024EAC((uint64_t)v21, @"backlight", 730464484, &stru_1000F5F48);
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_10002631C;
  v44[3] = &unk_1000F7CD0;
  v44[4] = &v50;
  sub_100024EAC((uint64_t)v21, @"HID event processing", 730464492, v44);
  sub_100024EAC((uint64_t)v21, @"ButtonHaptics", 730464488, &stru_1000F5F68);
  sub_100024EAC((uint64_t)v21, @"ALS sync", 730464496, &stru_1000F5F88);
  sub_100024EAC((uint64_t)v21, @"display MiG server", 730464500, &stru_1000F5FA8);
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_10002632C;
  v43[3] = &unk_1000F7CD0;
  v43[4] = &v50;
  if (v21)
  {
    sub_100024EAC((uint64_t)v21, @"HID server", 0, v43);
    sub_100024EAC((uint64_t)v21, @"OS watchdog", 0, &stru_1000F5FC8);
  }
  long long v23 = +[BKUserEventTimer sharedInstance];
  _BKHIDSetUserEventNotifier();

  if (v21) {
    sub_100024EAC((uint64_t)v21, @"system shell servers", 0, &stru_1000F5FE8);
  }
  long long v24 = v21;
  long long v25 = +[BKSystemShellSentinel dataMigrationQueue];
  *(void *)buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = sub_10002549C;
  int v53 = &unk_1000F8E78;
  long long v54 = v24;
  unsigned int v26 = v24;
  dispatch_async(v25, buf);

  long long v27 = +[BKSystemShellSentinel sharedInstance];
  [v27 startServerWithDataMigration];

  sub_100024EAC((uint64_t)v26, @"Accessibility", 730464508, &stru_1000F6008);
  if (v21)
  {
    sub_100024EAC((uint64_t)v26, @"misc services", 0, &stru_1000F6028);
    unsigned int v28 = @"startup complete";
    CFStringRef v29 = BKLogCommon();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      BSContinuousMachTimeNow();
      double v31 = v30 - v26[1];
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = @"startup complete";
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}@. %gs elapsed", buf, 0x16u);
    }
  }
  else
  {
    id v42 = @"startup complete";
  }

  _Block_object_dispose(&v50, 8);
  if (v7) {
    pthread_set_qos_class_self_np((qos_class_t)__relative_priority[1], __relative_priority[0]);
  }
  if (!v3) {
    pthread_set_timeshare_self();
  }
  kdebug_trace();
  CFRunLoopGetCurrent();
  if (!_CFRunLoopSetPerCalloutAutoreleasepoolEnabled())
  {
    Current = CFRunLoopGetCurrent();
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, 0);
    v50.version = 0;
    v50.info = Mutable;
    v50.retain = (const void *(__cdecl *)(const void *))&_CFRetain;
    v50.release = (void (__cdecl *)(const void *))&_CFRelease;
    v50.copyDescription = (CFStringRef (__cdecl *)(const void *))&CFCopyDescription;
    __int16 v34 = CFRunLoopObserverCreate(0, 1uLL, 1u, -2147483647, (CFRunLoopObserverCallBack)sub_100082E84, &v50);
    CFStringRef v35 = CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 0x7FFFFFFFLL, (CFRunLoopObserverCallBack)sub_100082E84, &v50);
    CFRunLoopAddObserver(Current, v34, kCFRunLoopCommonModes);
    CFRunLoopAddObserver(Current, v35, kCFRunLoopCommonModes);
    CFRelease(Mutable);
    if (!CFRunLoopContainsObserver(Current, v34, kCFRunLoopDefaultMode))
    {
      CFRunLoopAddObserver(Current, v34, kCFRunLoopDefaultMode);
      CFRunLoopAddObserver(Current, v35, kCFRunLoopDefaultMode);
    }
    if (v34) {
      CFRelease(v34);
    }
    if (v35) {
      CFRelease(v35);
    }
  }
  while ((CFRunLoopRunInMode(kCFRunLoopDefaultMode, 1.79769313e308, 0) - 3) < 0xFFFFFFFE)
    ;
  __int16 v36 = BKLogCommon();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    CFIndex v38 = *a2;
    LODWORD(v50.version) = 136446210;
    *(CFIndex *)((char *)&v50.version + 4) = v38;
    _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%{public}s exiting...\n", (uint8_t *)&v50, 0xCu);
  }

  return 0;
}

void sub_1000261E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_100026208(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100026218(uint64_t a1)
{
}

void sub_100026220(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100026A64;
  v5[3] = &unk_1000F7CD0;
  uint64_t v3 = *(void *)(a1 + 40);
  void v5[4] = v3;
  if (v2)
  {
    sub_100024EAC(v2, @"HID system open", 0, v5);
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
  }
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100026AB4;
  v4[3] = &unk_1000F7CD0;
  v4[4] = v3;
  if (v2) {
    sub_100024EAC(v2, @"HID system start", 0, v4);
  }
}

id sub_10002630C(uint64_t a1)
{
  return _[*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) startEventRouting];
}

id sub_10002631C(uint64_t a1)
{
  return _[*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) startEventProcessing];
}

id sub_10002632C(uint64_t a1)
{
  return _[*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) startServer];
}

void sub_10002633C(id a1)
{
  id v1 = +[BKSecureDrawingMonitor sharedInstance];
  [v1 startMonitoringSecureDrawing];

  uint64_t v2 = +[BKTouchDeliveryPolicyServer sharedServer];
  [v2 run];

  id v3 = +[BKTouchDeliveryObservationManager sharedInstance];
}

void sub_1000263A4(id a1)
{
  if (qword_100123090 != -1) {
    dispatch_once(&qword_100123090, &stru_1000F7E00);
  }
}

void sub_1000263CC(id a1)
{
  id v1 = +[BKSystemShellSentinel sharedInstance];
  [v1 startServerWithoutDataMigration];

  id v2 = +[BKAlternateSystemAppServer sharedInstance];
  [v2 run];
}

void sub_100026438(id a1)
{
  wd_endpoint_set_platform_controller();
  id v1 = objc_alloc_init(BKWatchdogService);
  wd_endpoint_register();
  [(BKWatchdogService *)v1 registerClientsForMonitoring];
  uint64_t v10 = v1;
  id v2 = v1;
  wd_endpoint_set_alive_func();
  wd_endpoint_activate();

  unsigned int v3 = GSRegisterPurpleNamedPort();
  id v4 = +[BSDispatchQueueAttributes serial];
  int v5 = [v4 serviceClass:25];
  uint64_t v6 = BSDispatchQueueCreate();

  int v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_mach_recv, v3, 0, v6);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10008FFC8;
  handler[3] = &unk_1000F8820;
  unsigned int v12 = v3;
  dispatch_source_set_cancel_handler(v7, handler);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10008FFE8;
  void v9[3] = &unk_1000F8E78;
  uint64_t v10 = (BKWatchdogService *)v7;
  id v8 = v7;
  dispatch_source_set_event_handler(v8, v9);
  dispatch_resume(v8);
}

void sub_100026618(id a1)
{
  uint64_t v1 = sub_100040DF4("BKDisplayServices MiG Server");
  id v2 = (void *)qword_100122E10;
  qword_100122E10 = v1;
}

void sub_100026668(id a1)
{
  id v1 = +[BKDisplayBrightnessUpdateTransactionManager sharedInstance];
  [v1 synchronizeALSPreferencesAndSystemDisplayBrightness];
}

void sub_1000266B0(id a1)
{
  id v1 = +[BKButtonHapticsController sharedInstance];
}

void sub_1000266D8(id a1)
{
  id v1 = +[BKDisplayBrightnessController sharedInstance];
  id v2 = (void *)qword_100122E78;
  qword_100122E78 = (uint64_t)v1;
  id v3 = v1;

  id v4 = [v3 propertyForKey:@"DisplayBrightnessFactor"];
  uint64_t v5 = objc_opt_class();

  id v6 = v4;
  if (v5)
  {
    if (objc_opt_isKindOfClass()) {
      int v7 = v6;
    }
    else {
      int v7 = 0;
    }
  }
  else
  {
    int v7 = 0;
  }
  id v8 = v7;

  if (v8)
  {
    os_unfair_lock_lock(&stru_100122E80);
    [v8 floatValue];
    dword_100122E84 = v9;
    os_unfair_lock_unlock(&stru_100122E80);
  }

  v20[0] = BKDefaultKeyALSEnabled;
  v20[1] = @"BKALSWeightMax";
  v21[0] = @"DisplayBrightnessAuto";
  v21[1] = @"DisplayBrightnessAutoWeightMax";
  v20[2] = @"BKALSWeightMin";
  v20[3] = @"BKALSIntPeriod";
  v21[2] = @"DisplayBrightnessAutoWeightMin";
  v21[3] = @"ALSIntPeriod";
  v20[4] = @"BKALSIntPeriodOrientationEnabled";
  v20[5] = @"BKALSIntPeriodOrientationLandscape";
  v21[4] = @"ALSIntPeriodOrientationEnabled";
  v21[5] = @"ALSIntPeriodOrientationLandscape";
  v20[6] = @"BKALSIntPeriodOrientationPortrait";
  v20[7] = @"BKALSIntPeriodOrientationPortraitInv";
  v21[6] = @"ALSIntPeriodOrientationPortrait";
  v21[7] = @"ALSIntPeriodOrientationPortraitInv";
  v20[8] = @"BKHIDSessionLogLevel";
  v20[9] = @"BKALSFadeSlope";
  v21[8] = @"LogLevel";
  v21[9] = @"DisplayBrightnessFadeSlope";
  v20[10] = @"BKHIDALSInternalSettings";
  v21[10] = @"ALSInternalSettings";
  uint64_t v10 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:11];
  id v11 = (void *)qword_1001230F0;
  qword_1001230F0 = v10;

  unsigned int v12 = +[BKSDefaults localDefaults];
  id v13 = [v12 ALSEpoch];
  if ((uint64_t)v13 <= 0)
  {
    id v14 = v13;
    uint64_t v15 = BKLogDetailed();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      id v23 = v14;
      __int16 v24 = 2048;
      uint64_t v25 = 1;
      _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Resetting ALS preferences on upgrade from epoch %ld to %ld", buf, 0x16u);
    }

    [v12 setALSUserPreferences:0];
    [v12 setALSEnabled:1];
    [v12 setALSEpoch:1];
    sub_100082CE8();
  }

  sub_100082DF8();
  sub_100082B64(0);
  unsigned __int8 v16 = +[BKSDefaults localDefaults];
  uint64_t v17 = +[NSString stringWithUTF8String:"ALSEnabled"];
  id v18 = [v16 observeDefault:v17 onQueue:&_dispatch_main_q withBlock:&stru_1000F8290];

  id v19 = +[BKDisplayBrightnessController sharedInstance];
}

void sub_100026A34(id a1)
{
  if (qword_100122E38 != -1) {
    dispatch_once(&qword_100122E38, &stru_1000F66D8);
  }
}

void sub_100026A64(uint64_t a1)
{
  uint64_t v2 = +[BKHIDSystemInterface sharedInstance];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100026AB4(uint64_t a1)
{
  return _[*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) startHIDSystem];
}

void sub_100026AC8(id a1)
{
  mach_service = xpc_connection_create_mach_service("com.apple.oscard", 0, 2uLL);
  if (mach_service)
  {
    connection = mach_service;
    xpc_connection_set_event_handler(mach_service, &stru_1000F5EA8);
    xpc_connection_activate(connection);
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    xpc_connection_send_message(connection, v2);

    mach_service = connection;
  }
}

void sub_100026B54(id a1, OS_xpc_object *a2)
{
  xpc_object_t v2 = a2;
  uint64_t v3 = BKLogCommon();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v4 = 138543362;
    uint64_t v5 = v2;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "oscard connection event: %{public}@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100026CF4(uint64_t a1)
{
}

void sub_100026D00(uint64_t a1, void *a2)
{
  id v97 = a2;
  if (a1)
  {
    uint64_t v3 = +[NSUserDefaults standardUserDefaults];
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    v121[0] = @"com.apple.backboardd.trackpadPreferences";
    v121[1] = @"com.apple.backboardd.magicMousePreferences";
    v121[2] = @"com.apple.backboardd.ordinaryMousePreferences";
    id obj = +[NSArray arrayWithObjects:v121 count:3];
    uint64_t v99 = a1;
    id v102 = [obj countByEnumeratingWithState:&v110 objects:v122 count:16];
    if (v102)
    {
      uint64_t v100 = *(void *)v111;
      id v104 = v3;
      do
      {
        for (uint64_t i = 0; i != v102; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v111 != v100) {
            objc_enumerationMutation(obj);
          }
          uint64_t v5 = *(void **)(*((void *)&v110 + 1) + 8 * i);
          id v6 = [v5 componentsSeparatedByString:@"."];
          int v7 = [v6 lastObject];
          id v8 = +[NSString stringWithFormat:@"BKAnalytics-LastSentDate-%@", v7];

          int v9 = [v3 objectForKey:v8];
          uint64_t v10 = objc_opt_class();
          id v11 = v9;
          if (v10)
          {
            if (objc_opt_isKindOfClass()) {
              unsigned int v12 = v11;
            }
            else {
              unsigned int v12 = 0;
            }
          }
          else
          {
            unsigned int v12 = 0;
          }
          id v13 = v12;

          if (v13)
          {
            id v14 = v13;
          }
          else
          {
            id v14 = +[NSDate distantPast];
          }
          uint64_t v15 = v14;

          [v15 timeIntervalSinceNow];
          if (v16 > 31540000.0)
          {
            [v3 removeObjectForKey:v8];
            sub_1000278FC(a1, 0, v5);
          }
          uint64_t v17 = sub_100027A88(v5);
          id v18 = [v3 objectForKey:v17];
          uint64_t v19 = objc_opt_class();
          id v20 = v18;
          if (v19)
          {
            if (objc_opt_isKindOfClass()) {
              double v21 = v20;
            }
            else {
              double v21 = 0;
            }
          }
          else
          {
            double v21 = 0;
          }
          id v22 = v21;

          if (v22)
          {
            id v23 = [*(id *)(a1 + 16) dateByAddingUnit:16 value:92 toDate:v15 options:1024];
            if ([*(id *)(a1 + 16) compareDate:v23 toDate:v22 toUnitGranularity:16] == (id)-1)
            {
              __int16 v24 = sub_1000279FC(v5);
              uint64_t v25 = [v104 objectForKey:v24];
              uint64_t v26 = objc_opt_class();
              id v27 = v25;
              if (v26)
              {
                if (objc_opt_isKindOfClass()) {
                  unsigned int v28 = v27;
                }
                else {
                  unsigned int v28 = 0;
                }
              }
              else
              {
                unsigned int v28 = 0;
              }
              id v29 = v28;

              if (v29)
              {
                AnalyticsSendEvent();
                [v104 setObject:v22 forKey:v8];
              }

              a1 = v99;
            }
          }
          uint64_t v3 = v104;
        }
        id v102 = [obj countByEnumeratingWithState:&v110 objects:v122 count:16];
      }
      while (v102);
    }

    double v30 = [*(id *)(a1 + 24) availableDevices];
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    id v31 = [v30 countByEnumeratingWithState:&v106 objects:v120 count:16];
    if (v31)
    {
      id v32 = v31;
      uint64_t v33 = *(void *)v107;
      double v101 = v30;
      uint64_t v103 = *(void *)v107;
      do
      {
        __int16 v34 = 0;
        id v105 = v32;
        do
        {
          if (*(void *)v107 != v33) {
            objc_enumerationMutation(v30);
          }
          CFStringRef v35 = *(void **)(*((void *)&v106 + 1) + 8 * (void)v34);
          if ([v35 eventSource] == 12)
          {
            if (!AnalyticsIsEventUsed()) {
              goto LABEL_88;
            }
            __int16 v36 = +[NSMutableDictionary dictionaryWithCapacity:8];
            BOOL v37 = [v35 propertyForKey:@"ProductID"];
            uint64_t v38 = objc_opt_class();
            id v39 = v37;
            if (v38)
            {
              if (objc_opt_isKindOfClass()) {
                int v40 = v39;
              }
              else {
                int v40 = 0;
              }
            }
            else
            {
              int v40 = 0;
            }
            id v49 = v40;

            [v36 bs_setSafeObject:v49 forKey:@"devicePid"];
            CFRunLoopObserverContext v50 = [v35 propertyForKey:@"VendorID"];
            uint64_t v51 = objc_opt_class();
            id v52 = v50;
            if (v51)
            {
              if (objc_opt_isKindOfClass()) {
                int v53 = v52;
              }
              else {
                int v53 = 0;
              }
            }
            else
            {
              int v53 = 0;
            }
            id v54 = v53;

            [v36 bs_setSafeObject:v54 forKey:@"deviceVid"];
            v118[0] = @"pointerAcceleration";
            [v97 pointerAccelerationFactor];
            uint64_t v56 = +[NSNumber numberWithDouble:round(v55 * 10.0) / 10.0];
            v119[0] = v56;
            v118[1] = @"scrollAcceleration";
            [v97 scrollAccelerationFactor];
            id v58 = +[NSNumber numberWithDouble:round(v57 * 10.0) / 10.0];
            v119[1] = v58;
            v118[2] = @"naturalScrolling";
            id v59 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v97 enableNaturalScrolling]);
            v119[2] = v59;
            v118[3] = @"tapToClick";
            uint64_t v60 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v97 enableTapToClick]);
            v119[3] = v60;
            v118[4] = @"twoFingerSecondaryClick";
            double v61 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v97 enableTwoFingerSecondaryClick]);
            v119[4] = v61;
            v118[5] = @"doubleTapDragMode";
            id v62 = [v97 doubleTapDragMode];
            uint64_t v63 = @"Disabled";
            if (v62 == (id)1) {
              uint64_t v63 = @"Enabled";
            }
            if (v62 == (id)2) {
              uint64_t v63 = @"WithDragLockEnabled";
            }
            v119[5] = v63;
            double v64 = v63;
            double v65 = +[NSDictionary dictionaryWithObjects:v119 forKeys:v118 count:6];

            [v36 addEntriesFromDictionary:v65];
            sub_1000278FC(v99, v36, @"com.apple.backboardd.trackpadPreferences");
            double v30 = v101;
          }
          else
          {
            if ([v35 claimsToConformToUsagePage:13 usage:12])
            {
              if (!AnalyticsIsEventUsed()) {
                goto LABEL_88;
              }
              __int16 v36 = +[NSMutableDictionary dictionaryWithCapacity:6];
              int v41 = [v35 propertyForKey:@"ProductID"];
              uint64_t v42 = objc_opt_class();
              id v43 = v41;
              if (v42)
              {
                if (objc_opt_isKindOfClass()) {
                  id v44 = v43;
                }
                else {
                  id v44 = 0;
                }
              }
              else
              {
                id v44 = 0;
              }
              id v66 = v44;

              [v36 bs_setSafeObject:v66 forKey:@"devicePid"];
              CGFloat v67 = [v35 propertyForKey:@"VendorID"];
              uint64_t v68 = objc_opt_class();
              id v69 = v67;
              if (v68)
              {
                if (objc_opt_isKindOfClass()) {
                  uint64_t v70 = v69;
                }
                else {
                  uint64_t v70 = 0;
                }
              }
              else
              {
                uint64_t v70 = 0;
              }
              id v76 = v70;

              [v36 bs_setSafeObject:v76 forKey:@"deviceVid"];
              v116[0] = @"pointerAcceleration";
              [v97 pointerAccelerationFactor];
              int v78 = +[NSNumber numberWithDouble:round(v77 * 10.0) / 10.0];
              v117[0] = v78;
              v116[1] = @"scrollAcceleration";
              [v97 scrollAccelerationFactor];
              double v80 = +[NSNumber numberWithDouble:round(v79 * 10.0) / 10.0];
              v117[1] = v80;
              v116[2] = @"naturalScrolling";
              double v81 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v97 enableNaturalScrolling]);
              v117[2] = v81;
              v116[3] = @"buttonConfiguration";
              double v82 = (char *)[v97 buttonConfigurationForVirtualButtonMice];
              CFStringRef v83 = @"Unspecified";
              if ((unint64_t)(v82 - 1) <= 2) {
                CFStringRef v83 = *(&off_1000F6048 + (void)(v82 - 1));
              }
              v117[3] = v83;
              double v84 = +[NSDictionary dictionaryWithObjects:v117 forKeys:v116 count:4];
              [v36 addEntriesFromDictionary:v84];

              uint64_t v85 = v99;
              double v86 = v36;
              double v87 = @"com.apple.backboardd.magicMousePreferences";
            }
            else
            {
              if (!AnalyticsIsEventUsed()) {
                goto LABEL_88;
              }
              __int16 v36 = +[NSMutableDictionary dictionaryWithCapacity:6];
              uint64_t v45 = [v35 propertyForKey:@"ProductID"];
              uint64_t v46 = objc_opt_class();
              id v47 = v45;
              if (v46)
              {
                if (objc_opt_isKindOfClass()) {
                  long long v48 = v47;
                }
                else {
                  long long v48 = 0;
                }
              }
              else
              {
                long long v48 = 0;
              }
              id v71 = v48;

              [v36 bs_setSafeObject:v71 forKey:@"devicePid"];
              double v72 = [v35 propertyForKey:@"VendorID"];
              uint64_t v73 = objc_opt_class();
              id v74 = v72;
              if (v73)
              {
                if (objc_opt_isKindOfClass()) {
                  __int16 v75 = v74;
                }
                else {
                  __int16 v75 = 0;
                }
              }
              else
              {
                __int16 v75 = 0;
              }
              id v88 = v75;

              [v36 bs_setSafeObject:v88 forKey:@"deviceVid"];
              v114[0] = @"pointerAcceleration";
              [v97 pointerAccelerationFactor];
              id v90 = +[NSNumber numberWithDouble:round(v89 * 10.0) / 10.0];
              v115[0] = v90;
              v114[1] = @"scrollAcceleration";
              [v97 scrollAccelerationFactor];
              double v92 = +[NSNumber numberWithDouble:round(v91 * 10.0) / 10.0];
              v115[1] = v92;
              v114[2] = @"naturalScrolling";
              double v93 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v97 enableNaturalScrolling]);
              v115[2] = v93;
              v114[3] = @"buttonConfiguration";
              uint64_t v94 = (char *)[v97 buttonConfigurationForHardwareButtonMice];
              CFStringRef v95 = @"Unspecified";
              if ((unint64_t)(v94 - 1) <= 2) {
                CFStringRef v95 = *(&off_1000F6048 + (void)(v94 - 1));
              }
              v115[3] = v95;
              double v96 = +[NSDictionary dictionaryWithObjects:v115 forKeys:v114 count:4];
              [v36 addEntriesFromDictionary:v96];

              uint64_t v85 = v99;
              double v86 = v36;
              double v87 = @"com.apple.backboardd.ordinaryMousePreferences";
            }
            sub_1000278FC(v85, v86, v87);
          }
          uint64_t v33 = v103;
          id v32 = v105;

LABEL_88:
          __int16 v34 = (char *)v34 + 1;
        }
        while (v32 != v34);
        id v32 = [v30 countByEnumeratingWithState:&v106 objects:v120 count:16];
      }
      while (v32);
    }
  }
}

void sub_1000278FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v12 = +[NSUserDefaults standardUserDefaults];
  if (v6)
  {
    int v7 = *(void **)(a1 + 16);
    id v8 = +[NSDate date];
    int v9 = [v7 startOfDayForDate:v8];
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v10 = sub_1000279FC(v5);
  [v12 setObject:v6 forKey:v10];

  id v11 = sub_100027A88(v5);

  [v12 setObject:v9 forKey:v11];
}

id sub_1000279FC(void *a1)
{
  id v1 = [a1 componentsSeparatedByString:@"."];
  xpc_object_t v2 = [v1 lastObject];
  uint64_t v3 = +[NSString stringWithFormat:@"BKAnalytics-MostRecentPayload-%@", v2];

  return v3;
}

id sub_100027A88(void *a1)
{
  id v1 = [a1 componentsSeparatedByString:@"."];
  xpc_object_t v2 = [v1 lastObject];
  uint64_t v3 = +[NSString stringWithFormat:@"BKAnalytics-MostRecentPayloadDate-%@", v2];

  return v3;
}

void sub_100027BB4(uint64_t a1)
{
}

void sub_100027C94(uint64_t a1)
{
}

void sub_100028C68(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = BKLogTouchEvents();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138543362;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Found a new touchpad %{public}@", (uint8_t *)&v8, 0xCu);
  }

  id v5 = [[BKTouchPadInfo alloc] initWithService:v3];
  id v6 = *(void **)(*(void *)(a1 + 32) + 16);
  int v7 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v3 senderID]);
  [v6 setObject:v5 forKey:v7];

  [v3 addDisappearanceObserver:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 32) + 8)];
}

id sub_10002902C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v2 = *(void **)(v1 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1000290A0;
  v4[3] = &unk_1000F60D8;
  v4[4] = v1;
  return [v2 enumerateKeysAndObjectsUsingBlock:v4];
}

id sub_1000290A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queue_sendCancelEventForTouchPad:];
}

void sub_1000290A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  int v4 = [v6 senderInfo];
  id v5 = [v4 displayUUID];

  if (v5 == *(void **)(a1 + 32) || objc_msgSend(v5, "isEqual:")) {
    [*(id *)(a1 + 40) _queue_sendCancelEventForTouchPad:v6];
  }
}

void sub_100029234(uint64_t a1)
{
  xpc_object_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id v3 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [*(id *)(a1 + 40) senderID]);
  int v4 = [v2 objectForKey:v3];

  if (v4
    || ([*(id *)(*(void *)(a1 + 32) + 16) allValues],
        id v5 = objc_claimAutoreleasedReturnValue(),
        [v5 firstObject],
        int v4 = objc_claimAutoreleasedReturnValue(),
        v5,
        v4))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    int v7 = [v4 overrideSenderDescriptor];
    int v8 = v7;
    if (v6)
    {
      id v9 = [v7 associatedDisplay];
      char v10 = BSEqualObjects();

      if ((v10 & 1) == 0)
      {
        id v11 = [*(id *)(a1 + 40) senderDescriptor];
        id v12 = [v11 mutableCopy];

        [v12 setAssociatedDisplay:*(void *)(a1 + 48)];
        [v4 setOverrideSenderDescriptor:v12];
      }
    }
    else
    {

      if (v8) {
        [v4 setOverrideSenderDescriptor:0];
      }
    }
    [*(id *)(a1 + 32) _queue_handleEvent:*(void *)(a1 + 64) fromTouchPad:v4 dispatcher:*(void *)(a1 + 56)];
  }
  else
  {
    int v4 = BKLogCommon();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v13 = [*(id *)(a1 + 40) senderID];
      int v14 = 134217984;
      id v15 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "unknown touch pad sender 0x%llX", (uint8_t *)&v14, 0xCu);
    }
  }
}

void sub_1000295F8(id a1)
{
  uint64_t v1 = objc_alloc_init(BKTouchPadManager);
  xpc_object_t v2 = (void *)qword_100122DD0;
  qword_100122DD0 = (uint64_t)v1;
}

void sub_100029758(uint64_t a1)
{
  xpc_object_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(unsigned int *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = [v2 appendUnsignedInteger:v4 withName:@"contextID" format:1];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 40);
  if (v6) {
    [*(id *)(a1 + 32) appendString:v6 withName:@"displayUUID"];
  }
  int v7 = *(void **)(a1 + 32);
  BSProcessDescriptionForPID();
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  [v7 appendString:v8 withName:@"process"];
}

void sub_1000298B0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 40), a2);
  }
}

void sub_1000298C8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 48), a2);
  }
}

id sub_1000298E0(CGFloat a1, CGFloat a2, uint64_t a3, int a4, void *a5, void *a6, void *a7, void *a8)
{
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  id v17 = a8;
  self;
  id v18 = [v14 uniqueId];
  float v57 = v16;
  uint64_t v19 = [v16 displayController];
  id v20 = 0;
  double v21 = 0;
  id v63 = 0;
  memset(v62, 0, sizeof(v62));
  int v59 = a4;
  if (a4)
  {
    double v21 = sub_100005E04((uint64_t)BKDisplayController, 0, 1, 0, 0);
    id v20 = &v63;
  }
  id obj = 0;
  if (v20) {
    p_id obj = &obj;
  }
  else {
    p_id obj = 0;
  }
  unsigned __int8 v23 = [v19 contextIDAtCAScreenLocation:v18 displayUUID:v21 options:p_obj securityAnalysis:v62 results:a1, a2];
  if (v20) {
    objc_storeStrong(v20, obj);
  }
  if (v23)
  {
    id v52 = v21;
    id v24 = (id)LODWORD(v62[0]);
    if (v59)
    {
      uint64_t v25 = DWORD1(v62[0]);
      uint64_t v26 = BKLogMousePointer();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v66[0]) = 67109120;
        DWORD1(v66[0]) = v25;
        _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "hit slot %X", (uint8_t *)v66, 8u);
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    id v28 = objc_alloc_init((Class)NSMutableArray);
    double v30 = v28;
    if (v24)
    {
      *(void *)&long long v29 = 138543362;
      long long v51 = v29;
      float v55 = v19;
      id v56 = v17;
      id v53 = v15;
      id v54 = v28;
      do
      {
        id v31 = [v19 taskPortForContextID:v24 displayUUID:v18];
        if ((v31 - 1) >= 0xFFFFFFFE)
        {
          id v47 = BKLogMousePointer();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v66[0]) = 67109120;
            DWORD1(v66[0]) = v24;
            _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "invalid client port for contextID %X", (uint8_t *)v66, 8u);
          }

          break;
        }
        id v32 = [(BKCAContextDestination *)[BKMouseDestination alloc] initWithContextID:v24 clientPort:v31];
        uint64_t v33 = [v17 member:v32];
        if (!v33)
        {
          uint64_t v33 = v32;
          sub_100029EC8((uint64_t)v33, v57);
          sub_1000298B0((uint64_t)v33, v18);
        }
        if (v24 == LODWORD(v62[0]))
        {
          id v34 = v63;
          if (!v63) {
            goto LABEL_25;
          }
          uint64_t v35 = (uint64_t)v33;
        }
        else
        {
          uint64_t v35 = (uint64_t)v33;
          id v34 = 0;
        }
        sub_100029EE0(v35, v34);
LABEL_25:
        if (v59)
        {
          if (v33)
          {
            v33->_slotID = v25;
LABEL_29:
            v33->_hitTestPoint.double x = a1;
            v33->_hitTestPoint.double y = a2;
          }
        }
        else if (v33)
        {
          goto LABEL_29;
        }
        sub_1000298C8((uint64_t)v33, v15);
        if (v25)
        {
          id v58 = v32;
          char v60 = 0;
          +[BKHIDEventProcessorRegistry sharedInstance];
          id v36 = v15;
          v38 = BOOL v37 = v18;
          id v39 = [v38 eventProcessorOfClass:objc_opt_class()];

          int v40 = [v39 authenticationSpecificationForSlotID:v25 registrantEntitled:&v60];
          int v41 = sub_100005E04((uint64_t)BKDisplayController, 0, 0, v40, 0);
          memset(v66, 0, sizeof(v66));
          uint64_t v42 = v19;
          id v43 = v37;
          id v44 = v37;
          id v15 = v36;
          [v42 contextIDAtCAScreenLocation:v44 displayUUID:v41 options:0 securityAnalysis:v66 results:a1, a2];
          if (DWORD1(v66[0]) == v25)
          {
            uint64_t v45 = sub_10001DEF8((uint64_t)v66);
            if (v33) {
              objc_storeStrong((id *)&v33->_hitTestInformationAtButtonDown, v45);
            }
            uint64_t v46 = BKLogMousePointer();
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
            {
              int buf = v51;
              double v65 = v45;
              _os_log_debug_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "hit test info at down %{public}@", (uint8_t *)&buf, 0xCu);
            }

            id v15 = v53;
          }

          id v18 = v43;
          uint64_t v19 = v55;
          id v17 = v56;
          double v30 = v54;
          id v32 = v58;
        }
        [v30 addObject:v33];
        id v24 = [v19 hostContextIDForEmbeddedContextID:v24 displayUUID:v18];

        uint64_t v25 = 0;
      }
      while (v24);
    }
    [v19 applySceneHostSettingsToHostingChain:v30];
    if ((uint64_t)[v30 count] < 1)
    {
      id v27 = +[NSSet set];
    }
    else
    {
      long long v48 = [v57 touchDeliveryPolicyServer];
      id v49 = [v48 filterDestinations:v30];
      id v27 = +[NSSet setWithArray:v49];
    }
    double v21 = v52;
  }
  else
  {
    id v27 = +[NSSet set];
  }

  return v27;
}

void sub_100029EC8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

void sub_100029EE0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 64), a2);
  }
}

uint64_t sub_100029EF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 32);
    if ((int)v5 <= 0)
    {
      uint64_t v6 = [v3 clientForTaskPort:*(unsigned int *)(a1 + 12)];
      *(_DWORD *)(a1 + 32) = [v6 pid];

      uint64_t v5 = *(unsigned int *)(a1 + 32);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

id sub_10002A0B8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) removeIndex:*(int *)(a1 + 40)];
}

void sub_10002A0CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = (uint64_t)[*(id *)(a1 + 48) count];
    v3[2](v3);
    id v5 = [*(id *)(a1 + 48) count];
    BOOL v6 = (uint64_t)v5 > 0;
    if (v4 < 1 == v6)
    {
      uint64_t v7 = (uint64_t)v5;
      if (![*(id *)(a1 + 40) count])
      {
        id v8 = sub_10005FA78();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          id v9 = NSStringFromBKSHIDTouchSensitiveButtonIdentifier();
          *(_DWORD *)int buf = 67109378;
          BOOL v21 = v6;
          __int16 v22 = 2114;
          unsigned __int8 v23 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "setScanningActive:%{BOOL}u button:%{public}@-- no services (yet?), pending", buf, 0x12u);
        }
      }
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v10 = *(id *)(a1 + 40);
      id v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v16;
        do
        {
          for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v16 != v13) {
              objc_enumerationMutation(v10);
            }
            sub_10002A29C(a1, v7 > 0, *(void **)(*((void *)&v15 + 1) + 8 * i));
          }
          id v12 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v12);
      }
    }
  }
}

void sub_10002A29C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    BOOL v6 = sub_10005FA78();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = NSStringFromBKSHIDTouchSensitiveButtonIdentifier();
      *(_DWORD *)int buf = 67109634;
      int v13 = a2;
      __int16 v14 = 2114;
      long long v15 = v7;
      __int16 v16 = 2114;
      id v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setScanningActive:%{BOOL}u button:%{public}@ posting to service %{public}@", buf, 0x1Cu);
    }
    id v8 = +[NSNumber numberWithBool:a2, @"CameraButtonScanActive"];
    id v11 = v8;
    id v9 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
    [v5 asyncSetProperty:v9 forKey:@"HostStateNotification"];
  }
}

void sub_10002A5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002A5C4(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = a3;
  if (([v7 containsObject:a2] & 1) == 0)
  {
    *a4 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0)
  {
    *a4 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_10002A8F8(id a1, BKSMutableHIDEventSenderDescriptor *a2)
{
}

void sub_10002AAF4(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 44);
  id v3 = *(void **)(*(void *)(a1 + 32) + 48);
  uint64_t v4 = *(int *)(a1 + 40);
  if (v2)
  {
    if (([v3 containsIndex:v4] & 1) == 0)
    {
      [*(id *)(*(void *)(a1 + 32) + 48) addIndex:*(int *)(a1 + 40)];
      id v5 = [objc_alloc((Class)BSProcessDeathWatcher) initWithPID:x0 queue:x1 deathHandler:x2];
      BOOL v6 = *(void **)(*(void *)(a1 + 32) + 32);
      uint64_t v7 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
      [v6 setObject:v5 forKey:v7];
    }
  }
  else
  {
    [v3 removeIndex:v4];
    id v8 = *(void **)(*(void *)(a1 + 32) + 32);
    id v9 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
    uint64_t v10 = [v8 objectForKey:v9];
    [v10 invalidate];

    id v11 = *(void **)(*(void *)(a1 + 32) + 32);
    id v12 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
    [v11 removeObjectForKey:v12];
  }
}

id sub_10002AC8C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) processDidTerminate:*(unsigned int *)(a1 + 40)];
}

void sub_10002AE3C()
{
  uint64_t v0 = +[BSProtobufSerialization buildSchemaForClass:objc_opt_class() builder:&stru_1000F61C8];
  uint64_t v1 = (void *)qword_100122DE0;
  qword_100122DE0 = v0;
}

void sub_10002AE9C(id a1, BSProtobufSchemaBuilder *a2)
{
  int v2 = a2;
  [(BSProtobufSchemaBuilder *)v2 addRepeatingField:"_props" containsClass:objc_opt_class()];
}

void sub_10002AF1C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    os_unfair_lock_lock(&stru_100122E80);
    int v2 = dword_100122E84;
    os_unfair_lock_unlock(&stru_100122E80);
    **(_DWORD **)(a1 + 32) = v2;
  }
}

void sub_10002AF74(uint64_t a1)
{
  float v1 = fminf(*(float *)(a1 + 32), 1.0);
  if (v1 >= 0.0) {
    float v2 = v1;
  }
  else {
    float v2 = 0.0;
  }
  id v3 = BKLogBacklight();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134217984;
    double v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting backlight factor pending: %f", (uint8_t *)&v7, 0xCu);
  }

  uint64_t v4 = (void *)qword_100122E78;
  *(float *)&double v5 = v2;
  BOOL v6 = +[NSNumber numberWithFloat:v5];
  [v4 setProperty:v6 forKey:@"DisplayBrightnessFactorPending"];

  sub_1000439B8(1, v2);
}

void sub_10002B07C(uint64_t a1)
{
  sub_100043B84(1, *(unsigned char *)(a1 + 40) != 0, *(unsigned char *)(a1 + 41) != 0, *(float *)(a1 + 32), *(float *)(a1 + 36));
}

void sub_10002B0A0(uint64_t a1)
{
  sub_100043B84(*(unsigned char *)(a1 + 40) != 0, *(unsigned char *)(a1 + 41) != 0, *(unsigned char *)(a1 + 42) != 0, *(float *)(a1 + 32), *(float *)(a1 + 36));
}

uint64_t sub_10002B0D0(uint64_t a1, int a2, long long *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  long long v3 = a3[1];
  long long v10 = *a3;
  BOOL v6 = sub_10002B184;
  int v7 = &unk_1000F6940;
  int v9 = a2;
  uint64_t v8 = a1;
  long long v11 = v3;
  if (!sub_10000B130((uint64_t)"_BKHIDXXSetBacklightFeatures", BKBackBoardClientEntitlement, (uint64_t)a3)) {
    return 5;
  }
  v6((uint64_t)v5);
  return 0;
}

void sub_10002B184(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40))
  {
    float v1 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 32) length:*(unsigned int *)(a1 + 40) freeWhenDone:0];
    uint64_t v5 = 0;
    float v2 = +[BSProtobufSerialization decodeObjectOfClass:objc_opt_class() fromData:v1 error:&v5];
    if (v2)
    {
      uint64_t v3 = BSPIDForAuditToken();
      uint64_t v4 = +[BKDisplayBrightnessController sharedInstance];
      [v4 setBacklightFeatures:v2 forPID:v3];
    }
    else
    {
      uint64_t v4 = BKLogBacklight();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138543362;
        uint64_t v7 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "cannot decode backlight features mode: %{public}@", buf, 0xCu);
      }
    }
  }
  else
  {
    float v1 = BKLogBacklight();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "bad size for mode data", buf, 2u);
    }
  }
}

void sub_10002B310(uint64_t a1)
{
  id v2 = +[BKDisplayBrightnessController sharedInstance];
  **(unsigned char **)(a1 + 32) = [v2 isAutoBrightnessAvailable];
}

void sub_10002B36C(uint64_t a1)
{
  id v2 = +[BKDisplayBrightnessController sharedInstance];
  **(unsigned char **)(a1 + 32) = [v2 isBrightnessLevelControlAvailable];
}

void sub_10002B3C8(uint64_t a1)
{
  id v2 = +[BKDisplayBrightnessController sharedInstance];
  **(unsigned char **)(a1 + 32) = [v2 isALSSupported];
}

void sub_10002B424(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 32);
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  [v2 setObject:&__kCFBooleanTrue forKey:@"DisplayAutoBrightnessActive"];
  if (!v1)
  {
    uint64_t v3 = +[BKSDefaults localDefaults];
    [v3 ALSDelayOnUnlock];
    float v5 = v4;

    if (v5 > 0.0)
    {
      *(float *)&double v6 = v5;
      uint64_t v7 = +[NSNumber numberWithFloat:v6];
      [v2 setObject:v7 forKey:@"DisplayAutoBrightnessDelay"];
    }
  }
  uint64_t v8 = BKLogBacklight();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109378;
    v10[1] = v1 != 0;
    __int16 v11 = 2114;
    id v12 = v2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BKAmbientLightSensorEnableAutoBrightness userInteractedWithUI:%{BOOL}u %{public}@", (uint8_t *)v10, 0x12u);
  }

  int v9 = +[BKDisplayBrightnessController sharedInstance];
  [v9 setProperty:v2 forKey:@"DisplayAutoBrightnessStatus"];
  if (v1) {
    [v9 setProperty:&__kCFBooleanTrue forKey:@"UserInteractedWithUI"];
  }
}

uint64_t sub_10002B5B4(unsigned char *a1, void *a2)
{
  if (!sub_100005C1C((uint64_t)"_BKHIDXXRequestProximityStatusEvent", BKProximityStatusEventEntitlement, BKBackBoardClientEntitlement, (uint64_t)a2))return 5; {
  if (*a1)
  }
  {
    float v4 = +[NSString stringWithUTF8String:a1];
  }
  else
  {
    float v4 = 0;
  }
  double v6 = +[BKHIDUISensorController sharedInstance];
  [v6 requestProximityStatusEventForReason:v4 versionedPID:BSVersionedPIDForAuditToken() a2[0] a2[1] a2[2] a2[3]];

  return 0;
}

void sub_10002B684(uint64_t a1)
{
  id v2 = +[BKHIDEventProcessorRegistry sharedInstance];
  id v3 = [v2 eventProcessorOfClass:objc_opt_class()];

  [v3 setShouldSuppressTouchesWhileObjectWithinProximity:*(unsigned char *)(a1 + 32) != 0];
}

uint64_t sub_10002B70C(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  long long v6 = a3[1];
  *(_OWORD *)int buf = *a3;
  long long v24 = v6;
  id v7 = (id)BSVersionedPIDForAuditToken();
  unsigned __int8 v8 = sub_100016874(BKBackBoardClientEntitlement, (uint64_t)a3);
  if (v8)
  {
    uint64_t v9 = 1;
LABEL_5:
    long long v10 = +[BKHIDUISensorController sharedInstance];
    __int16 v11 = v10;
    if (!a1 || !a2)
    {
      [v10 removeModesForVersionedPID:v7];
LABEL_24:
      uint64_t v17 = 0;
      goto LABEL_25;
    }
    id v12 = [objc_alloc((Class)NSData) initWithBytesNoCopy:a1 length:a2 freeWhenDone:0];
    id v22 = 0;
    int v13 = +[BSProtobufSerialization decodeObjectOfClass:objc_opt_class() fromData:v12 error:&v22];
    id v14 = v22;
    if (v13)
    {
      if ([v13 versionedPID] != v7)
      {
        long long v18 = BKLogUISensor();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          BOOL v21 = NSStringFromBSVersionedPID();
          *(_DWORD *)int buf = 138543362;
          *(void *)&uint8_t buf[4] = v21;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "process not entitled to change UI sensor modes: %{public}@", buf, 0xCu);
        }
        goto LABEL_23;
      }
      if ((v8 & 1) != 0 || ![v13 isRestrictedToSystemShell])
      {
        [v11 applySensorMode:v13 requestOrigin:v9];
        goto LABEL_23;
      }
      long long v15 = BKLogUISensor();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138543362;
        *(void *)&uint8_t buf[4] = v13;
        __int16 v16 = "mode request reserved for system shell:%{public}@";
LABEL_27:
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v16, buf, 0xCu);
      }
    }
    else
    {
      long long v15 = BKLogUISensor();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138543362;
        *(void *)&uint8_t buf[4] = v14;
        __int16 v16 = "cannot decode UI sensor settings: %{public}@";
        goto LABEL_27;
      }
    }

LABEL_23:
    goto LABEL_24;
  }
  if (sub_1000168CC(BKProximityDetectionEntitlement, (uint64_t)a3))
  {
    uint64_t v9 = 2;
    goto LABEL_5;
  }
  __int16 v11 = BKLogUISensor();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    id v20 = NSStringFromBSVersionedPID();
    *(_DWORD *)int buf = 138543362;
    *(void *)&uint8_t buf[4] = v20;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "process not entitled to change UI sensor modes: %{public}@", buf, 0xCu);
  }
  uint64_t v17 = 5;
LABEL_25:

  return v17;
}

uint64_t sub_10002BA18(unsigned char *a1, int a2)
{
  int v4 = BSPIDForAuditToken();
  if (!*a1)
  {
    float v5 = 0;
    goto LABEL_7;
  }
  float v5 = +[NSString stringWithUTF8String:a1];
  if (v5)
  {
LABEL_7:
    unsigned __int8 v8 = +[BKTouchDeliveryGenericGestureFocusObserver sharedInstance];
    __int16 v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    int v13 = sub_10002BB84;
    id v14 = &unk_1000F6188;
    id v15 = v5;
    int v16 = v4;
    int v17 = a2;
    long long v6 = v5;
    uint64_t v9 = +[BKSHIDEventDeferringResolution build:&v11];
    [v8 setEventDestination:v9 forDisplayUUID:v6, v11, v12, v13, v14];

    uint64_t v7 = 0;
    goto LABEL_8;
  }
  long long v6 = BKLogCommon();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "ClaimGenericGestureFocus: could not convert UUID to UTF-8", buf, 2u);
  }
  uint64_t v7 = 5;
LABEL_8:

  return v7;
}

void sub_10002BB84(uint64_t a1, void *a2)
{
  id v5 = a2;
  [v5 setPid:*(unsigned int *)(a1 + 40)];
  if (*(void *)(a1 + 32)) {
    +[BKSHIDEventDisplay displayWithHardwareIdentifier:](BKSHIDEventDisplay, "displayWithHardwareIdentifier:");
  }
  else {
  id v3 = +[BKSHIDEventDisplay builtinDisplay];
  }
  [v5 setDisplay:v3];
  if (*(_DWORD *)(a1 + 44))
  {
    int v4 = +[BKSHIDEventDeferringToken tokenForIdentifierOfCAContext:](BKSHIDEventDeferringToken, "tokenForIdentifierOfCAContext:");
    [v5 setToken:v4];
  }
}

uint64_t sub_10002BC34(uint64_t a1, int a2, uint64_t a3, int a4, void *a5, _DWORD *a6, uint64_t a7)
{
  if (a5 && a6)
  {
    *a5 = 0;
    *a6 = 0;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    long long v10 = sub_10002BD34;
    __int16 v11 = &unk_1000F6900;
    int v16 = a2;
    int v17 = a4;
    uint64_t v12 = a1;
    uint64_t v13 = a3;
    id v14 = a5;
    id v15 = a6;
    if (sub_1000168CC(BKEventResolutionEntitlement, a7))
    {
      v10((uint64_t)v9);
      return 0;
    }
  }
  else
  {
    unsigned __int8 v8 = BKLogEventDelivery();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "expected a valid place to put the description data", buf, 2u);
    }
  }
  return 5;
}

void sub_10002BD34(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 64)) {
    id v2 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 32) length:*(unsigned int *)(a1 + 64) freeWhenDone:0];
  }
  else {
    id v2 = 0;
  }
  if (*(_DWORD *)(a1 + 68))
  {
    id v3 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 40) length:*(unsigned int *)(a1 + 68) freeWhenDone:0];
    if (v2) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v7 = BKLogEventDelivery();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    LOWORD(v14) = 0;
    unsigned __int8 v8 = "_BKHIDXXGetEventResolutionDescription: no event descriptor";
LABEL_14:
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v14, 2u);
    goto LABEL_21;
  }
  id v3 = 0;
  if (!v2) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v4 = +[BKSHIDEventDescriptor bs_secureDecodedFromData:v2];
  if (!v4)
  {
    uint64_t v7 = BKLogEventDelivery();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    LOWORD(v14) = 0;
    unsigned __int8 v8 = "_BKHIDXXGetEventResolutionDescription: failed to decode event descriptor";
    goto LABEL_14;
  }
  id v5 = (void *)v4;
  if (v3)
  {
    long long v6 = +[BKSHIDEventSenderDescriptor bs_secureDecodedFromData:v3];
  }
  else
  {
    long long v6 = 0;
  }
  uint64_t v9 = +[BKHIDSystemInterface sharedInstance];
  long long v10 = [v9 deliveryManager];

  uint64_t v7 = [v10 descriptionOfResolutionPathForEventDescriptor:v5 senderDescriptor:v6];
  uint64_t v11 = [v7 bs_secureEncoded];
  if (v11)
  {
    uint64_t v12 = v11;

    **(void **)(a1 + 48) = [v12 bs_bytesForMIG];
    **(_DWORD **)(a1 + 56) = [v12 bs_lengthForMIG];
    uint64_t v7 = v12;
  }
  else
  {
    uint64_t v13 = BKLogEventDelivery();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = 138543362;
      id v15 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "_BKHIDXXGetEventResolutionDescription: cannot encode %{public}@", (uint8_t *)&v14, 0xCu);
    }
  }
LABEL_21:
}

uint64_t sub_10002BFA4(uint64_t a1, int a2, uint64_t a3, int a4, void *a5, _DWORD *a6, uint64_t a7)
{
  if (a5 && a6)
  {
    *a5 = 0;
    *a6 = 0;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    long long v10 = sub_10002C0A4;
    uint64_t v11 = &unk_1000F6900;
    int v16 = a2;
    int v17 = a4;
    uint64_t v12 = a1;
    uint64_t v13 = a3;
    int v14 = a5;
    id v15 = a6;
    if (sub_1000168CC(BKEventResolutionEntitlement, a7))
    {
      v10((uint64_t)v9);
      return 0;
    }
  }
  else
  {
    unsigned __int8 v8 = BKLogEventDelivery();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "expected a valid place to put the description data", buf, 2u);
    }
  }
  return 5;
}

void sub_10002C0A4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 64)) {
    id v2 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 32) length:*(unsigned int *)(a1 + 64) freeWhenDone:0];
  }
  else {
    id v2 = 0;
  }
  if (*(_DWORD *)(a1 + 68))
  {
    id v3 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 40) length:*(unsigned int *)(a1 + 68) freeWhenDone:0];
    if (v2) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v7 = BKLogEventDelivery();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    LOWORD(v14) = 0;
    unsigned __int8 v8 = "_BKHIDXXGetEventResolutionDescription: no event descriptor";
LABEL_14:
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v14, 2u);
    goto LABEL_21;
  }
  id v3 = 0;
  if (!v2) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v4 = +[BKSHIDEventKeyCommand bs_secureDecodedFromData:v2];
  if (!v4)
  {
    uint64_t v7 = BKLogEventDelivery();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    LOWORD(v14) = 0;
    unsigned __int8 v8 = "_BKHIDXXGetEventResolutionDescription: failed to decode event descriptor";
    goto LABEL_14;
  }
  id v5 = (void *)v4;
  if (v3)
  {
    long long v6 = +[BKSHIDEventSenderDescriptor bs_secureDecodedFromData:v3];
  }
  else
  {
    long long v6 = 0;
  }
  uint64_t v9 = +[BKHIDSystemInterface sharedInstance];
  long long v10 = [v9 deliveryManager];

  uint64_t v7 = [v10 descriptionOfResolutionPathForKeyCommand:v5 senderDescriptor:v6];
  uint64_t v11 = [v7 bs_secureEncoded];
  if (v11)
  {
    uint64_t v12 = v11;

    **(void **)(a1 + 48) = [v12 bs_bytesForMIG];
    **(_DWORD **)(a1 + 56) = [v12 bs_lengthForMIG];
    uint64_t v7 = v12;
  }
  else
  {
    uint64_t v13 = BKLogEventDelivery();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = 138543362;
      id v15 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "_BKHIDXXGetEventResolutionDescription: cannot encode %{public}@", (uint8_t *)&v14, 0xCu);
    }
  }
LABEL_21:
}

uint64_t sub_10002C314(uint64_t a1, int a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  id v5 = sub_10002C3B8;
  long long v6 = &unk_1000F6920;
  int v8 = a2;
  uint64_t v7 = a1;
  if (!sub_1000168CC(BKSetAuthenticatedKeyCommandsEntitlement, a3)) {
    return 5;
  }
  v5((uint64_t)v4);
  return 0;
}

void sub_10002C3B8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40))
  {
    int v1 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 32) length:*(unsigned int *)(a1 + 40) freeWhenDone:0];
    v9[0] = objc_opt_class();
    v9[1] = objc_opt_class();
    id v2 = +[NSArray arrayWithObjects:v9 count:2];
    id v3 = +[NSSet setWithArray:v2];
    uint64_t v4 = +[NSSet bs_secureObjectFromData:v1 ofClasses:v3];

    if (v4)
    {
      id v5 = +[BKHIDEventProcessorRegistry sharedInstance];
      long long v6 = [v5 eventProcessorOfClass:objc_opt_class()];

      [v6 setKeyCommandsToAuthenticate:v4];
    }
    else
    {
      long long v6 = BKLogKeyboard();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v7 = 138543362;
        int v8 = v1;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "cannot decode authenticated key commands: %{public}@", (uint8_t *)&v7, 0xCu);
      }
    }
  }
  else
  {
    int v1 = BKLogKeyboard();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "bad size for authenticated key command data", (uint8_t *)&v7, 2u);
    }
  }
}

uint64_t sub_10002C59C(uint64_t a1, int a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  id v5 = sub_10002C654;
  long long v6 = &unk_1000F6920;
  int v8 = a2;
  uint64_t v7 = a1;
  if (!sub_100005C1C((uint64_t)"_BKHIDXXCancelTouchesWithIdentifiers", BKCancelTouchesEntitlement, BKBackBoardClientEntitlement, a3))return 5; {
  v5((uint64_t)v4);
  }
  return 0;
}

void sub_10002C654(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) && *(void *)(a1 + 32))
  {
    id v1 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 32) length:*(unsigned int *)(a1 + 40) freeWhenDone:0];
    uint64_t v2 = objc_opt_class();
    id v3 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v2, objc_opt_class(), 0);
    uint64_t v4 = +[NSObject bs_secureObjectFromData:v1 ofClasses:v3];

    if (v4)
    {
      id v5 = +[BKHIDEventProcessorRegistry sharedInstance];
      long long v6 = [v5 eventProcessorOfClass:objc_opt_class()];
      [v6 cancelTouchesWithIdentifiers:v4];
    }
    else
    {
      id v5 = BKLogCommon();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error unarchiving touchIdentifiers", buf, 2u);
      }
    }
  }
}

uint64_t sub_10002C7A8(uint64_t a1, int a2, long long *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  long long v3 = a3[1];
  long long v10 = *a3;
  long long v6 = sub_10002C858;
  uint64_t v7 = &unk_1000F6940;
  int v9 = a2;
  uint64_t v8 = a1;
  long long v11 = v3;
  if (!sub_1000168CC(BKExcludeZoomContextsFromHitTestingEntitlement, (uint64_t)a3)) {
    return 5;
  }
  v6((uint64_t)v5);
  return 0;
}

void sub_10002C858(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) && *(void *)(a1 + 32))
  {
    id v2 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 32) length:*(unsigned int *)(a1 + 40) freeWhenDone:0];
    uint64_t v3 = objc_opt_class();
    uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v3, objc_opt_class(), 0);
    id v5 = +[NSObject bs_secureObjectFromData:v2 ofClasses:v4];

    if (!v5)
    {
      long long v6 = BKLogCommon();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "_BKHIDXXExcludeCAContextsFromHitTestingForZoomSenders_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}s: error unarchiving contextIDs", buf, 0xCu);
      }
    }
  }
  else
  {
    id v5 = 0;
  }
  uint64_t v7 = +[BKHIDEventProcessorRegistry sharedInstance];
  uint64_t v8 = [v7 eventProcessorOfClass:objc_opt_class()];
  long long v9 = *(_OWORD *)(a1 + 60);
  *(_OWORD *)int buf = *(_OWORD *)(a1 + 44);
  long long v11 = v9;
  [v8 setExcludedZoomContextIDs:v5 fromVersionedPID:BSVersionedPIDForAuditToken()];
}

uint64_t sub_10002CA1C(uint64_t a1, int a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  id v5 = sub_10002CAC4;
  long long v6 = &unk_1000F6920;
  int v8 = a2;
  uint64_t v7 = a1;
  if (!sub_10000B130((uint64_t)"_BKHIDXXApplyButtonDefinitions", BKBackBoardClientEntitlement, a3)) {
    return 5;
  }
  v5((uint64_t)v4);
  return 0;
}

void sub_10002CAC4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) && *(void *)(a1 + 32))
  {
    id v1 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 32) length:*(unsigned int *)(a1 + 40) freeWhenDone:0];
    uint64_t v2 = objc_opt_class();
    uint64_t v3 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v2, objc_opt_class(), 0);
    uint64_t v4 = +[NSObject bs_secureObjectFromData:v1 ofClasses:v3];

    if (v4)
    {
      id v5 = +[BKButtonHapticsController sharedInstance];
      [v5 applyDefinitions:v4];
    }
    else
    {
      id v5 = BKLogCommon();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315138;
        uint64_t v7 = "_BKHIDXXApplyButtonDefinitions_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s: Error unarchiving button definitions", buf, 0xCu);
      }
    }
  }
  else
  {
    id v1 = BKLogCommon();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315138;
      uint64_t v7 = "_BKHIDXXApplyButtonDefinitions_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "%s: no data received", buf, 0xCu);
    }
  }
}

void sub_10002CC8C(uint64_t a1)
{
  id v2 = +[BKButtonHapticsController sharedInstance];
  [v2 playHapticForClickState:*(unsigned int *)(a1 + 32) clickSpeed:*(unsigned int *)(a1 + 36)];
}

void sub_10002CCE4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a1 && a2)
  {
    uint64_t v4 = [objc_alloc((Class)NSData) initWithBytesNoCopy:a1 length:a2 freeWhenDone:0];
    id v5 = +[NSObject bs_secureObjectFromData:v4 ofClass:objc_opt_class()];
    if (v5)
    {
      long long v6 = +[BKHIDHapticFeedbackController sharedInstance];
      [v6 postHapticFeedbackRequest:v5 forAuditToken:a3];
    }
    else
    {
      uint64_t v7 = BKLogCommon();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315138;
        long long v9 = "_BKHIDXXRequestHapticFeedback";
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s: Error unarchiving feedback request", (uint8_t *)&v8, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v4 = BKLogCommon();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315138;
      long long v9 = "_BKHIDXXRequestHapticFeedback";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: no data received", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_10002CE84(uint64_t a1, unsigned int a2)
{
  if (a1 && a2)
  {
    id v2 = [objc_alloc((Class)NSData) initWithBytesNoCopy:a1 length:a2 freeWhenDone:0];
    uint64_t v3 = objc_opt_class();
    uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v3, objc_opt_class(), 0);
    id v5 = +[NSObject bs_secureObjectFromData:v2 ofClasses:v4];

    if (v5)
    {
      uint64_t v6 = BSPIDForAuditToken();
      uint64_t v7 = +[BKHIDEventProcessorRegistry sharedInstance];
      int v8 = [v7 eventProcessorOfClass:objc_opt_class()];

      [v8 postTouchAnnotations:v5 sourcePID:v6];
    }
    else
    {
      long long v9 = BKLogCommon();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315138;
        long long v11 = "_BKHIDXXPostTouchAnnotations";
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s: Error unarchiving touch annotations", buf, 0xCu);
      }
    }
  }
  else
  {
    id v2 = BKLogCommon();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315138;
      long long v11 = "_BKHIDXXPostTouchAnnotations";
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s: no data received", buf, 0xCu);
    }
  }
}

uint64_t sub_10002D094(int a1, uint64_t a2, int a3, char a4, uint64_t a5, long long *a6)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  long long v6 = a6[1];
  long long v14 = *a6;
  long long v9 = sub_10002D164;
  long long v10 = &unk_1000F61E8;
  uint64_t v11 = a2;
  uint64_t v12 = a5;
  int v13 = a1;
  long long v15 = v6;
  int v16 = a3;
  char v17 = a4;
  if (!sub_100005C1C((uint64_t)"_BKHIDXXTouchStreamCreate", BKTouchStreamsEntitlement, BKBackBoardClientEntitlement, (uint64_t)a6))return 5; {
  v9((uint64_t)v8);
  }
  return 0;
}

void sub_10002D164(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    id v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    id v2 = 0;
  }
  uint64_t v3 = +[BKHIDEventProcessorRegistry sharedInstance];
  uint64_t v4 = [v3 eventProcessorOfClass:objc_opt_class()];

  **(_DWORD **)(a1 + 40) = [v4 addTouchStreamForContextID:*(unsigned int *)(a1 + 48) display:v2 versionedPID:BSVersionedPIDForAuditToken() identifier:*(unsigned int *)(a1 + 84) shouldSendAmbiguityRecommendations:*(unsigned char *)(a1 + 88) != 0 contextInfo:*(void *)(a1 + 52) touchInfo:*(void *)(a1 + 60) touchPhaseInfo:*(void *)(a1 + 68) touchPhaseEndInfo:*(void *)(a1 + 76)];
}

void sub_10002D240(uint64_t a1)
{
  id v2 = +[BKHIDEventProcessorRegistry sharedInstance];
  id v3 = [v2 eventProcessorOfClass:objc_opt_class()];

  [v3 invalidateTouchStreamReference:*(unsigned int *)(a1 + 32)];
}

uint64_t sub_10002D2C0(uint64_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, float a8, float a9)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  uint64_t v11 = sub_10002D388;
  uint64_t v12 = &unk_1000F6940;
  uint64_t v13 = a4;
  uint64_t v14 = a6;
  uint64_t v15 = a1;
  int v16 = a5;
  int v17 = a2;
  int v18 = a3;
  float v19 = a8;
  float v20 = a9;
  if (!sub_100005C1C((uint64_t)"_BKHIDXXDigitizerTouchDetach", BKDetachTouchesEntitlement, BKBackBoardClientEntitlement, a7))return 5; {
  v11((uint64_t)v10);
  }
  return 0;
}

void sub_10002D388(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 56) && *(void *)(a1 + 32))
  {
    id v2 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 32) length:*(unsigned int *)(a1 + 56) freeWhenDone:0];
    id v3 = +[BKSHIDTouchRoutingPolicy bs_secureDecodedFromData:v2];
    if (v3)
    {
      uint64_t v4 = +[BKHIDEventProcessorRegistry sharedInstance];
      id v5 = [v4 eventProcessorOfClass:objc_opt_class()];

      **(unsigned char **)(a1 + 40) = [v5 detachTouchIdentifiers:*(void *)(a1 + 48) count:*(unsigned int *)(a1 + 60) assignUserIdentifier:*(unsigned int *)(a1 + 64) policy:v3 offset:*(float *)(a1 + 68)];
    }
    else
    {
      uint64_t v7 = BKLogCommon();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315138;
        long long v9 = "_BKHIDXXDigitizerTouchDetach_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s: Error unarchiving policy", (uint8_t *)&v8, 0xCu);
      }
    }
  }
  else
  {
    long long v6 = BKLogCommon();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315138;
      long long v9 = "_BKHIDXXDigitizerTouchDetach_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s: no policy data received", (uint8_t *)&v8, 0xCu);
    }

    **(unsigned char **)(a1 + 40) = 0;
  }
}

void sub_10002D56C(uint64_t a1)
{
  id v2 = +[BKHIDEventProcessorRegistry sharedInstance];
  id v3 = [v2 eventProcessorOfClass:objc_opt_class()];

  [v3 setOffset:*(unsigned int *)(a1 + 40) forTouchesWithUserIdentifier:*(float *)(a1 + 32), *(float *)(a1 + 36)];
}

uint64_t sub_10002D5F8(int a1, uint64_t a2, int a3, uint64_t a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  long long v6 = sub_10002D6B0;
  uint64_t v7 = &unk_1000F6860;
  uint64_t v8 = a2;
  int v9 = a3;
  int v10 = a1;
  if (!sub_100005C1C((uint64_t)"_BKHIDXXDigitizerTouchSetRoutingPolicy", BKDetachTouchesEntitlement, BKBackBoardClientEntitlement, a4))return 5; {
  v6((uint64_t)v5);
  }
  return 0;
}

void sub_10002D6B0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) && *(void *)(a1 + 32))
  {
    id v2 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 32) length:*(unsigned int *)(a1 + 40) freeWhenDone:0];
    uint64_t v3 = objc_opt_class();
    uint64_t v4 = objc_opt_class();
    id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v3, v4, objc_opt_class(), 0);
    long long v6 = +[NSObject bs_secureObjectFromData:v2 ofClasses:v5];

    if (v6)
    {
      uint64_t v7 = +[BKHIDEventProcessorRegistry sharedInstance];
      uint64_t v8 = [v7 eventProcessorOfClass:objc_opt_class()];

      [v8 setRoutingPolicy:v6 forTouchesWithUserIdentifier:*(unsigned int *)(a1 + 44)];
    }
    else
    {
      int v9 = BKLogCommon();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315138;
        uint64_t v11 = "_BKHIDXXDigitizerTouchSetRoutingPolicy_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s: Error unarchiving policy", buf, 0xCu);
      }
    }
  }
  else
  {
    id v2 = BKLogCommon();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315138;
      uint64_t v11 = "_BKHIDXXDigitizerTouchSetRoutingPolicy_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s: no policy data received", buf, 0xCu);
    }
  }
}

void sub_10002D8C8(uint64_t a1)
{
  id v2 = +[BKUserEventTimer sharedInstance];
  [v2 resetTimer:*(unsigned int *)(a1 + 40) mode:*(double *)(a1 + 32)];
}

void sub_10002D924(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v3 = +[BKUserEventTimer sharedInstance];
    [v3 lastUserEventTime];
    **(void **)(a1 + 32) = v2;
  }
}

void sub_10002D998(uint64_t a1)
{
  uint64_t v2 = sub_10001C32C();
  id v3 = (void *)v2;
  if (v2)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 32);
    id v5 = *(NSObject **)(v2 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000949CC;
    block[3] = &unk_1000F8C30;
    void block[4] = v3;
    block[5] = v4;
    long long v6 = v3;
    dispatch_async(v5, block);
    id v3 = v6;
  }
}

void sub_10002DA48(uint64_t a1)
{
  sub_10001C32C();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_100095694((uint64_t)v2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_10002DAA0(uint64_t a1, char a2, long long *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  long long v3 = a3[1];
  long long v9 = *a3;
  long long v6 = sub_10002DB54;
  uint64_t v7 = &unk_1000F68E0;
  uint64_t v8 = a1;
  char v11 = a2;
  long long v10 = v3;
  if (!sub_10000B130((uint64_t)"_BKHIDXXSetOrientationClient", BKBackBoardClientEntitlement, (uint64_t)a3)) {
    return 5;
  }
  v6((uint64_t)v5);
  return 0;
}

void sub_10002DB54(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v3 = 0;
  }
  id v2 = +[BKAccelerometerInterface sharedInstance];
  [v2 systemAppSetOrientationEventsClient:v3 wantsOrientationEvents:*(unsigned char *)(a1 + 72) != 0 auditToken:a1 + 40];
}

void sub_10002DBE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  id v3 = sub_10001C32C();
  uint64_t v4 = *(int *)(a1 + 32);
  uint64_t v5 = BSVersionedPIDForAuditToken();
  sub_100094F9C((uint64_t)v3, v2, v4, v5);
}

void sub_10002DC6C()
{
  uint64_t v0 = sub_10001C32C();
  uint64_t v1 = BSVersionedPIDForAuditToken();
  sub_100095604((uint64_t)v0, 3, v1);
}

void sub_10002DCCC(uint64_t a1)
{
  uint64_t v3 = 0;
  uint64_t v2 = sub_10001C32C();
  **(_DWORD **)(a1 + 32) = sub_100094E9C((uint64_t)v2, (uint64_t)&v3);

  **(_DWORD **)(a1 + 40) = v3;
}

void sub_10002DD2C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  id v8 = [objc_alloc((Class)BSMachPortSendRight) initWithPort:a1];
  if ([v8 isUsable])
  {
    uint64_t v7 = +[BKAccelerometerInterface sharedInstance];
    [v7 bksAccelerometerClientRequestedOrientationEvents:v8 enabled:a2 != 0 passiveEvents:a3 != 0 auditToken:a4];
  }
}

uint64_t sub_10002DDD0(uint64_t a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *(_OWORD *)int buf = *a2;
  long long v21 = v3;
  uint64_t v4 = +[BSAuditToken tokenFromAuditToken:buf];
  uint64_t v5 = +[BSProcessHandle processHandleForAuditToken:v4];

  id v6 = [objc_alloc((Class)BSMachPortSendRight) initWithPort:a1];
  unsigned int v7 = [v6 isUsable];
  id v8 = BKLogBacklight();
  long long v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 138543362;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Beginning explicit brightness transaction on behalf of %{public}@", buf, 0xCu);
    }

    long long v10 = [v5 name];
    char v11 = v10;
    if (!v10)
    {
      char v11 = [v5 bundleIdentifier];
    }
    long long v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@:%d", v11, [v5 pid]);
    if (!v10) {

    }
    uint64_t v12 = [BKDisplayBrightnessUpdateTransaction alloc];
    uint64_t v13 = +[BKDisplayBrightnessUpdateTransactionManager sharedInstance];
    uint64_t v14 = [(BKDisplayBrightnessUpdateTransaction *)v12 initWithIdentifier:v9 transactionManager:v13];

    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10002E058;
    void v18[3] = &unk_1000F8E78;
    float v19 = v14;
    uint64_t v15 = v14;
    +[BSPortDeathSentinel monitorSendRight:v6 withHandler:v18];

    uint64_t v16 = 0;
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138543362;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Ignoring explicit brightness transaction request because sender is invalid: %{public}@", buf, 0xCu);
    }
    uint64_t v16 = 5;
  }

  return v16;
}

id sub_10002E058(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_10002E060(uint64_t a1)
{
  id v3 = +[BKDisplayBrightnessUpdateTransactionManager sharedInstance];
  LODWORD(v2) = *(_DWORD *)(a1 + 32);
  [v3 setDisplayBrightness:*(unsigned char *)(a1 + 36) != 0 permanently:v2];
}

void sub_10002E0C4(uint64_t a1)
{
  id v2 = +[BKDisplayBrightnessController sharedInstance];
  [v2 setDisplayBrightnessCurve:*(unsigned __int8 *)(a1 + 32)];
}

void sub_10002E11C(uint64_t a1)
{
  id v2 = +[BKDisplayBrightnessController sharedInstance];
  [v2 setAutoBrightnessEnabled:*(unsigned char *)(a1 + 32) != 0];
}

uint64_t sub_10002E17C(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  long long v9 = sub_10002E578(a5);
  if ([v9 count])
  {
    uint64_t v10 = objc_opt_class();
    char v11 = sub_10002E644((uint64_t)"SetPersistentServiceProperties", v10, a1, a2);
    if (v11)
    {
      id v28 = v9;
      long long v29 = objc_opt_class();
      uint64_t v12 = objc_opt_class();
      uint64_t v13 = objc_opt_class();
      uint64_t v14 = objc_opt_class();
      uint64_t v15 = objc_opt_class();
      uint64_t v16 = objc_opt_class();
      uint64_t v17 = objc_opt_class();
      int v18 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v12, v13, v14, v15, v16, v17, objc_opt_class(), 0);
      float v19 = sub_10002E850((uint64_t)"SetPersistentServiceProperties", v29, v18, a3, a4);

      if (v19 && CFPropertyListIsValid(v19, kCFPropertyListXMLFormat_v1_0))
      {
        float v20 = sub_10005FC4C();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          BSVersionedPIDForAuditToken();
          long long v21 = BSProcessDescriptionForPID();
          int buf = 138543874;
          buf_4 = v21;
          __int16 buf_12 = 2114;
          buf_14 = v19;
          __int16 v39 = 2114;
          int v40 = v11;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "SetPersistentServiceProperties process:%{public}@ set:%{public}@ for senders matching:%{public}@", (uint8_t *)&buf, 0x20u);
        }
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v9 = v28;
        id v22 = v28;
        uint64_t v23 = (uint64_t)[v22 countByEnumeratingWithState:&v30 objects:v34 count:16];
        if (v23)
        {
          uint64_t v24 = *(void *)v31;
          do
          {
            for (uint64_t i = 0; i != v23; ++i)
            {
              if (*(void *)v31 != v24) {
                objc_enumerationMutation(v22);
              }
              [*(id *)(*((void *)&v30 + 1) + 8 * i) setPersistentProperties:v19 forSenderDescriptor:v11];
            }
            uint64_t v23 = (uint64_t)[v22 countByEnumeratingWithState:&v30 objects:v34 count:16];
          }
          while (v23);
        }
      }
      else
      {
        id v22 = sub_10005FC4C();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          int buf = 138543362;
          buf_4 = v19;
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "SetPersistentServiceProperties: bad properties %{public}@", (uint8_t *)&buf, 0xCu);
        }
        uint64_t v23 = 5;
        long long v9 = v28;
      }
    }
    else
    {
      float v19 = sub_10005FC4C();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "SetPersistentServiceProperties failed to decode sender descriptor", (uint8_t *)&buf, 2u);
      }
      uint64_t v23 = 5;
    }
  }
  else
  {
    char v11 = sub_10005FC4C();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      BSPIDForAuditToken();
      id v27 = BSProcessDescriptionForPID();
      int buf = 138543362;
      buf_4 = v27;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "SetPersistentServiceProperties: %{public}@ is not entitled", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v23 = 5;
  }

  return v23;
}

id sub_10002E578(uint64_t a1)
{
  id v2 = +[BKIOHIDServicePersistentPropertyController sharedInstances];
  if ((sub_100016874(BKBackBoardClientEntitlement, a1) & 1) == 0)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_10002EA38;
    v5[3] = &unk_1000F6288;
    void v5[4] = a1;
    uint64_t v3 = [v2 bs_filter:v5];

    id v2 = (void *)v3;
  }

  return v2;
}

id sub_10002E644(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a3 && a4)
  {
    id v6 = [objc_alloc((Class)NSData) initWithBytesNoCopy:a3 length:a4 freeWhenDone:0];
    if (v6)
    {
      id v11 = 0;
      unsigned int v7 = +[BSProtobufSerialization decodeObjectOfClass:a2 fromData:v6 error:&v11];
      id v8 = v11;
      if (v7)
      {
LABEL_14:

        goto LABEL_15;
      }
      long long v9 = sub_10005FC4C();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446978;
        uint64_t v13 = a1;
        __int16 v14 = 2114;
        uint64_t v15 = a2;
        __int16 v16 = 2114;
        uint64_t v17 = v8;
        __int16 v18 = 2114;
        id v19 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s: %{public}@ failed to protobuf decode (error:%{public}@) %{public}@", buf, 0x2Au);
      }
    }
    else
    {
      long long v9 = sub_10005FC4C();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = a1;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s: could not get data", buf, 0xCu);
      }
      id v8 = 0;
    }

    unsigned int v7 = 0;
    goto LABEL_14;
  }
  id v8 = sub_10005FC4C();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = a1;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s: not specified", buf, 0xCu);
  }
  unsigned int v7 = 0;
LABEL_15:

  return v7;
}

id sub_10002E850(uint64_t a1, void *a2, void *a3, uint64_t a4, unsigned int a5)
{
  id v9 = a3;
  if (!a4 || !a5)
  {
    uint64_t v10 = sub_10005FC4C();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136446210;
      uint64_t v19 = a1;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s: not specified", (uint8_t *)&v18, 0xCu);
    }
    goto LABEL_12;
  }
  uint64_t v10 = [objc_alloc((Class)NSData) initWithBytesNoCopy:a4 length:a5 freeWhenDone:0];
  if (v10)
  {
    uint64_t v11 = [a2 bs_secureDecodedFromData:v10 withAdditionalClasses:v9];
    if (v11)
    {
      uint64_t v12 = (void *)v11;
      goto LABEL_13;
    }
    uint64_t v13 = sub_10005FC4C();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    int v18 = 136446722;
    uint64_t v19 = a1;
    __int16 v20 = 2114;
    long long v21 = a2;
    __int16 v22 = 2114;
    uint64_t v23 = v10;
    __int16 v14 = "%{public}s: %{public}@ failed to secure decode %{public}@";
    uint64_t v15 = v13;
    uint32_t v16 = 32;
    goto LABEL_17;
  }
  uint64_t v13 = sub_10005FC4C();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    int v18 = 136446210;
    uint64_t v19 = a1;
    __int16 v14 = "%{public}s: could not get data";
    uint64_t v15 = v13;
    uint32_t v16 = 12;
LABEL_17:
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v18, v16);
  }
LABEL_11:

LABEL_12:
  uint64_t v12 = 0;
LABEL_13:

  return v12;
}

BOOL sub_10002EA38(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 clientEntitlement];
  BOOL v4 = sub_1000168CC(v3, *(void *)(a1 + 32));

  return v4;
}

uint64_t sub_10002EA7C(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v13 = sub_10002E578(a7);
  if ([v13 count])
  {
    BOOL v37 = a6;
    uint64_t v14 = objc_opt_class();
    uint64_t v15 = sub_10002E644((uint64_t)"GetPersistentServiceProperties", v14, a1, a2);
    uint32_t v16 = objc_opt_class();
    uint64_t v17 = +[NSSet setWithObject:objc_opt_class()];
    int v18 = sub_10002E850((uint64_t)"GetPersistentServiceProperties", v16, v17, a3, a4);

    id v19 = [v18 count];
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id v20 = v18;
    long long v21 = (char *)[v20 countByEnumeratingWithState:&v42 objects:v47 count:16];
    if (v21)
    {
      __int16 v22 = v21;
      uint64_t v23 = *(void *)v43;
      while (2)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          if (*(void *)v43 != v23) {
            objc_enumerationMutation(v20);
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {

            goto LABEL_26;
          }
        }
        __int16 v22 = (char *)[v20 countByEnumeratingWithState:&v42 objects:v47 count:16];
        if (v22) {
          continue;
        }
        break;
      }
    }

    if (v19)
    {
      if (!v15)
      {
LABEL_29:

        uint64_t v33 = 0;
        goto LABEL_33;
      }
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      uint64_t v25 = v13;
      id v26 = [v25 countByEnumeratingWithState:&v38 objects:v46 count:16];
      if (v26)
      {
        id v27 = v26;
        uint64_t v28 = *(void *)v39;
        while (2)
        {
          for (uint64_t j = 0; j != v27; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v39 != v28) {
              objc_enumerationMutation(v25);
            }
            long long v30 = [*(id *)(*((void *)&v38 + 1) + 8 * (void)j) persistentPropertiesForKeys:v20 forSenderDescriptor:v15];
            if ([v30 count])
            {
              long long v31 = [v30 bs_secureEncoded];
              if (v31)
              {
                uint64_t v35 = v31;
                *a5 = [v31 bs_bytesForMIG];
                *BOOL v37 = [v35 bs_lengthForMIG];

                goto LABEL_28;
              }
              long long v32 = sub_10005FC4C();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)int buf = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "GetPersistentServiceProperties failed to encode properties", buf, 2u);
              }
            }
          }
          id v27 = [v25 countByEnumeratingWithState:&v38 objects:v46 count:16];
          if (v27) {
            continue;
          }
          break;
        }
      }
    }
    else
    {
LABEL_26:
      uint64_t v25 = sub_10005FC4C();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138543362;
        id v49 = v20;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "GetPersistentServiceProperties: bad property keys %{public}@", buf, 0xCu);
      }
    }
LABEL_28:

    goto LABEL_29;
  }
  uint64_t v15 = sub_10005FC4C();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    BSPIDForAuditToken();
    id v36 = BSProcessDescriptionForPID();
    *(_DWORD *)int buf = 138543362;
    id v49 = v36;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "GetPersistentServiceProperties: %{public}@ is not entitled", buf, 0xCu);
  }
  uint64_t v33 = 5;
LABEL_33:

  return v33;
}

void sub_10002EE68(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  BOOL v6 = +[BKSecurityManager hasEntitlement:BKSetAuthenticatedTouchesEntitlement forAuditToken:a3];
  long long v7 = a3[1];
  *(_OWORD *)int buf = *a3;
  *(_OWORD *)&uint8_t buf[16] = v7;
  BSVersionedPIDForAuditToken();
  if (!a1 || !a2)
  {
    id v8 = BKLogTouchEvents();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = "_BKHIDXXTouchAddAuthenticationSpecifications";
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s: nil authspec data", buf, 0xCu);
    }
    goto LABEL_25;
  }
  id v8 = [objc_alloc((Class)NSData) initWithBytesNoCopy:a1 length:a2 freeWhenDone:0];
  if (!v8)
  {
    uint64_t v11 = BKLogTouchEvents();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = "_BKHIDXXTouchAddAuthenticationSpecifications";
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s: invalid authentication spec data received", buf, 0xCu);
    }
    goto LABEL_24;
  }
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v9, objc_opt_class(), 0);
  uint64_t v11 = +[NSObject bs_secureObjectFromData:v8 ofClasses:v10];

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || ![v11 count])
  {
    id v20 = BKLogTouchEvents();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "_BKHIDXXTouchAddAuthenticationSpecifications";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%s: error corrupt authspec structure (%{public}@)", buf, 0x16u);
    }

LABEL_24:
    goto LABEL_25;
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v12 = v11;
  id v13 = [v12 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v26;
    while (2)
    {
      for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        uint64_t v18 = objc_opt_class();
        id v19 = v17;
        if (!v18 || (objc_opt_isKindOfClass() & 1) == 0)
        {

          goto LABEL_27;
        }

        if (!v19) {
          goto LABEL_27;
        }
      }
      id v14 = [v12 countByEnumeratingWithState:&v25 objects:v29 count:16];
      if (v14) {
        continue;
      }
      break;
    }
  }
LABEL_27:

  long long v21 = +[BKHIDEventProcessorRegistry sharedInstance];
  __int16 v22 = [v21 eventProcessorOfClass:objc_opt_class()];

  uint64_t v23 = BKLogTouchEvents();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = NSStringFromBSVersionedPID();
    *(_DWORD *)int buf = 138543874;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v6;
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v12;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "pid:%{public}@ adding (entitled:%{BOOL}u) slot registrations %{public}@", buf, 0x1Cu);
  }
  [v22 addTouchAuthenticationSpecifications:v12 registrantEntitled:v6];

  id v8 = v12;
LABEL_25:
}

void sub_10002F280(uint64_t a1)
{
  id v2 = +[BKHIDUISensorController sharedInstance];
  uint64_t v3 = [v2 sensorCharacteristics];
  id v4 = [v3 copy];
  id v8 = 0;
  uint64_t v5 = +[BSProtobufSerialization encodeObject:v4 error:&v8];
  id v6 = v8;

  if (v5)
  {
    **(void **)(a1 + 32) = [v5 bs_bytesForMIG];
    **(_DWORD **)(a1 + 40) = [v5 bs_lengthForMIG];
  }
  else
  {
    **(void **)(a1 + 32) = 0;
    **(_DWORD **)(a1 + 40) = 0;
    long long v7 = sub_10005FC4C();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 138543362;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "cannot encode: %{public}@", buf, 0xCu);
    }
  }
}

void sub_10002F3D8(uint64_t a1)
{
  uint64_t v2 = BSPIDForAuditToken();
  if ((int)v2 >= 2)
  {
    uint64_t v3 = v2;
    id v4 = +[BKHIDEventProcessorRegistry sharedInstance];
    id v5 = [v4 eventProcessorOfClass:objc_opt_class()];

    [v5 setScanningActive:*(_DWORD *)(a1 + 64) != 0 buttonIdentifier:*(unsigned int *)(a1 + 68) forPID:v3];
  }
}

void sub_10002F494(uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4)
{
  if (sub_1000168CC(BKMessageAuthenticationVerificationEntitlement, a4)
    || sub_1000168CC(BKMessageAuthenticationKeyEntitlement, a4))
  {
    if (a1 && a2)
    {
      id v8 = [objc_alloc((Class)NSData) initWithBytesNoCopy:a1 length:a2 freeWhenDone:0];
      if (v8)
      {
        id v15 = 0;
        uint64_t v9 = +[BSProtobufSerialization decodeObjectOfClass:objc_opt_class() fromData:v8 error:&v15];
        id v10 = v15;
        if (v9)
        {
          uint64_t v11 = +[BKHIDSystemInterface sharedInstance];
          uint64_t v12 = [v11 deliveryManager];

          id v13 = [v12 authenticationOriginator];
          unsigned int v14 = [v13 validateMessage:v9];
        }
        else
        {
          uint64_t v12 = BKLogCommon();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315394;
            uint64_t v17 = "_BKHIDXXVerifyEventAuthenticationMessage";
            __int16 v18 = 2114;
            id v19 = v10;
            _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s: Error decoding message (%{public}@)", buf, 0x16u);
          }
          unsigned int v14 = 0;
        }
      }
      else
      {
        id v10 = BKLogCommon();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          uint64_t v17 = "_BKHIDXXVerifyEventAuthenticationMessage";
          __int16 v18 = 2114;
          id v19 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s: Cannot create data from message (%{public}@)", buf, 0x16u);
        }
        unsigned int v14 = 0;
      }
    }
    else
    {
      id v8 = BKLogCommon();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315138;
        uint64_t v17 = "_BKHIDXXVerifyEventAuthenticationMessage";
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s: no data received", buf, 0xCu);
      }
      unsigned int v14 = 0;
    }

    if (a3) {
      goto LABEL_22;
    }
  }
  else
  {
    unsigned int v14 = 0;
    if (a3) {
LABEL_22:
    }
      *a3 = v14;
  }
}

__CFString *sub_100030BB4(uint64_t a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v2 = @"tone1";
    }
    else
    {
      uint64_t v2 = +[NSString stringWithFormat:@"unknown:%lX", a1];
    }
  }
  else
  {
    uint64_t v2 = @"silent";
  }
  return v2;
}

void sub_100031CE4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) removeObserver:*(void *)(a1 + 32) forKeyPath:@"bounds"];
  [*(id *)(*(void *)(a1 + 32) + 16) setLayer:0];
  [*(id *)(*(void *)(a1 + 32) + 16) invalidate];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
}

void sub_100031F58(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) addObserver:*(void *)(a1 + 32) forKeyPath:@"bounds" options:0 context:0];
  v15[0] = kCAContextDisplayable;
  v15[1] = kCAContextSecure;
  v16[0] = kCFBooleanTrue;
  v16[1] = kCFBooleanTrue;
  v15[2] = kCAContextDisplayId;
  uint64_t v2 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [*(id *)(*(void *)(a1 + 32) + 8) displayId]);
  void v16[2] = v2;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:3];

  uint64_t v4 = +[CAContext remoteContextWithOptions:v3];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 16);
  *(void *)(v5 + 16) = v4;

  LODWORD(v7) = 2139095039;
  [*(id *)(*(void *)(a1 + 32) + 16) setLevel:v7];
  id v8 = +[CALayer layer];
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  long long v13 = xmmword_1000BF6A0;
  long long v14 = unk_1000BF6B0;
  if (DeviceRGB)
  {
    id v10 = DeviceRGB;
    CGColorRef v11 = CGColorCreate(DeviceRGB, (const CGFloat *)&v13);
    if (v11)
    {
      CGColorRef v12 = v11;
      [v8 setBackgroundColor:v11, v13, v14];
      CFRelease(v12);
    }
    CFRelease(v10);
  }
  [*(id *)(*(void *)(a1 + 32) + 16) setLayer:v8, v13, v14];
  [*(id *)(a1 + 32) _updateBounds];
}

void sub_100032354(void *a1)
{
  uint64_t v2 = sub_10005FA78();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v3 = a1[5];
    if (v3 > 0x10) {
      uint64_t v4 = @"<unknown>";
    }
    else {
      uint64_t v4 = off_1000F63A8[v3];
    }
    uint64_t v5 = v4;
    id v6 = +[NSNumber numberWithUnsignedInteger:a1[6]];
    *(_DWORD *)int buf = 138543618;
    id v19 = v5;
    __int16 v20 = 2114;
    long long v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "playing clickState:%{public}@ clickSpeed:%{public}@", buf, 0x16u);
  }
  uint64_t v7 = a1[5];
  id v8 = *(void **)(a1[4] + 40);
  uint64_t v9 = a1[6];
  id v17 = 0;
  unsigned __int8 v10 = [v8 playState:v7 forSpeed:v9 error:&v17];
  id v11 = v17;
  if ((v10 & 1) == 0)
  {
    CGColorRef v12 = sub_10005FA78();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      unint64_t v13 = a1[5];
      if (v13 > 0x10) {
        long long v14 = @"<unknown>";
      }
      else {
        long long v14 = off_1000F63A8[v13];
      }
      id v15 = v14;
      uint32_t v16 = +[NSNumber numberWithUnsignedInteger:a1[6]];
      *(_DWORD *)int buf = 138543874;
      id v19 = v15;
      __int16 v20 = 2114;
      long long v21 = v16;
      __int16 v22 = 2114;
      id v23 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "error playing clickState:%{public}@ clickSpeed:%{public}@ -- %{public}@", buf, 0x20u);
    }
  }
}

void sub_1000325A8(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * (void)v6) setEnabled:0, (void)v7];
        [*(id *)(a1 + 32) _queue_applyConfigurationChanges];
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

id sub_1000327BC(uint64_t a1)
{
  dispatch_group_wait(*(dispatch_group_t *)(*(void *)(a1 + 32) + 56), 0xFFFFFFFFFFFFFFFFLL);
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return [_objc_msgSend(v2, "_queue_applyDefinitions:", v3);
}

void sub_100032A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_100032A44(uint64_t a1, uint64_t a2, void *a3)
{
  id v23 = a3;
  switch(a2)
  {
    case 10:
      uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:0];
      id v6 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:1];
      long long v7 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:2];
      long long v8 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:3];
      long long v9 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:4];
      long long v10 = *(void **)(*(void *)(a1 + 32) + 16);
      uint64_t v11 = 5;
      goto LABEL_4;
    case 11:
      uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:6];
      id v6 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:7];
      long long v7 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:8];
      long long v8 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:9];
      long long v9 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:10];
      long long v10 = *(void **)(*(void *)(a1 + 32) + 16);
      uint64_t v11 = 11;
LABEL_4:
      CGColorRef v12 = [v10 objectAtIndexedSubscript:v11];
      uint64_t v13 = (uint64_t)[v23 integerValue];
      BOOL v14 = v13 > 0;
      [v5 setEnabled:v14];
      [v6 setEnabled:v14];
      [v7 setEnabled:v13 > 1];
      [v8 setEnabled:v13 > 1];
      BOOL v15 = v13 > 2;
      [v9 setEnabled:v15];
      [v12 setEnabled:v15];
      goto LABEL_12;
    case 12:
      [v23 doubleValue];
      double v17 = v16;
      uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:2];
      id v6 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:4];
      long long v7 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:8];
      long long v8 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:10];
      [v5 setMinimumTimeInterval:v17];
      [v6 setMinimumTimeInterval:v17];
      [v7 setMinimumTimeInterval:v17];
      [v8 setMinimumTimeInterval:v17];
      goto LABEL_13;
    case 13:
      [v23 doubleValue];
      double v19 = v18;
      uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:2];
      id v6 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:4];
      long long v7 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:8];
      long long v8 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:10];
      [v5 setMaximumTimeInterval:v19];
      [v6 setMaximumTimeInterval:v19];
      [v7 setMaximumTimeInterval:v19];
      [v8 setMaximumTimeInterval:v19];
      goto LABEL_13;
    case 14:
      uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:14];
      id v6 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:15];
      [v23 doubleValue];
      [v5 setMinimumTimeInterval:];
      goto LABEL_9;
    case 15:
      uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:14];
      id v6 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:15];
      [v23 doubleValue];
      [v5 setMaximumTimeInterval:];
LABEL_9:
      if ([*(id *)(a1 + 40) isLongPressEnabled] != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t IsYes = BSSettingFlagIsYes();
        [v5 setEnabled:IsYes];
        [v6 setEnabled:IsYes];
      }
      goto LABEL_14;
    case 16:
      uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:0];
      id v6 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:1];
      long long v7 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:2];
      long long v8 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:3];
      long long v9 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:4];
      CGColorRef v12 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:5];
      long long v21 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:15];
      id v22 = [v23 integerValue];
      [v5 setAssetType:v22];
      [v6 setAssetType:v22];
      [v7 setAssetType:v22];
      [v8 setAssetType:v22];
      [v9 setAssetType:v22];
      [v12 setAssetType:v22];
      [v21 setAssetType:v22];

LABEL_12:
LABEL_13:

LABEL_14:
      break;
    default:
      break;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
}

id sub_100033588(id a1, id a2)
{
  unint64_t v2 = (unint64_t)[a2 integerValue];
  if (v2 > 0x10) {
    return @"<unknown>";
  }
  else {
    return off_1000F63A8[v2];
  }
}

id sub_1000335C4(id a1, id a2)
{
  unint64_t v2 = (unint64_t)[a2 integerValue];
  if (v2 > 0x10) {
    return @"<unknown>";
  }
  else {
    return off_1000F63A8[v2];
  }
}

id sub_100033600(id a1, id a2)
{
  unint64_t v2 = (unint64_t)[a2 integerValue];
  if (v2 > 0x10) {
    return @"<unknown>";
  }
  else {
    return off_1000F63A8[v2];
  }
}

void sub_1000338C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1000338F0(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 4) < 2)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    goto LABEL_6;
  }
  int v2 = a2;
  if (a2 == 2)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) isEnabled];
  }
  else
  {
    if (a2 == 3)
    {
      uint64_t v3 = *(void *)(a1 + 48);
LABEL_6:
      *(unsigned char *)(*(void *)(v3 + 8) + 24) = 1;
      return;
    }
    id v4 = sub_10005FA78();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      id v6 = "-[BKButtonHapticsController _queue_addChangesForPendingState:configuredState:toStates:configs:assets:enable:d"
           "isable:]_block_invoke";
      __int16 v7 = 1024;
      int v8 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s did you really intend to change setting %d?", (uint8_t *)&v5, 0x12u);
    }
  }
}

CFStringRef sub_100033F78(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      CFStringRef result = @"<default>";
      break;
    case 1:
      CFStringRef result = @"variant1/single/normal";
      break;
    case 2:
      CFStringRef result = @"variant1/single/soft";
      break;
    case 3:
      CFStringRef result = @"variant1/double/normal";
      break;
    case 4:
      CFStringRef result = @"variant1/double/soft";
      break;
    case 5:
      CFStringRef result = @"variant2/single/normal";
      break;
    case 6:
      CFStringRef result = @"variant2/single/soft";
      break;
    case 7:
      CFStringRef result = @"variant2/double/normal";
      break;
    case 8:
      CFStringRef result = @"variant2/double/soft";
      break;
    case 9:
      CFStringRef result = @"variant3/single/normal";
      break;
    case 10:
      CFStringRef result = @"variant3/single/soft";
      break;
    case 11:
      CFStringRef result = @"variant3/double/normal";
      break;
    case 12:
      CFStringRef result = @"variant3/double/soft";
      break;
    case 13:
      CFStringRef result = @"variant1/single/semisoft";
      break;
    case 14:
      CFStringRef result = @"variant1/double/semisoft";
      break;
    case 15:
      CFStringRef result = @"variant2/single/semisoft";
      break;
    case 16:
      CFStringRef result = @"variant2/double/semisoft";
      break;
    case 17:
      CFStringRef result = @"variant3/single/semisoft";
      break;
    case 18:
      CFStringRef result = @"variant3/double/semisoft";
      break;
    default:
      if (a1 == 100) {
        CFStringRef result = @"latch";
      }
      else {
        CFStringRef result = @"<unknown>";
      }
      break;
  }
  return result;
}

uint64_t sub_1000343B4(uint64_t a1)
{
  dispatch_group_wait(*(dispatch_group_t *)(*(void *)(a1 + 32) + 56), 0xFFFFFFFFFFFFFFFFLL);
  int v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

uint64_t sub_1000344F8(uint64_t a1)
{
  dispatch_group_wait(*(dispatch_group_t *)(*(void *)(a1 + 32) + 56), 0xFFFFFFFFFFFFFFFFLL);
  int v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_100034904(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 56));
  unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 40) maxAssetSlots];
  uint64_t v3 = sub_10005FA78();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "_BRController ready: device haptic asset slot count:%d", (uint8_t *)v4, 8u);
  }
}

void sub_1000349C4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) objectAtIndexedSubscript:16];
  [v2 setEnabled:1];
  [*(id *)(a1 + 32) _queue_applyConfigurationChanges];
}

void sub_100034B14(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_100122DF8;
  qword_100122DF8 = (uint64_t)v1;
}

uint64_t sub_10003599C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100035C2C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) observer];
  if (objc_opt_respondsToSelector()) {
    [v2 mousePointerIOHIDServicesRemoved:*(void *)(a1 + 40)];
  }
}

void sub_100035E74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) observer];
  if (objc_opt_respondsToSelector()) {
    [v2 mousePointerIOHIDServicesAdded:*(void *)(a1 + 40)];
  }
}

void sub_1000360AC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) observer];
  if (objc_opt_respondsToSelector()) {
    [v2 mousePointerDeviceAvailabilityMonitorDidChangeAvailability:*(void *)(a1 + 40)];
  }
}

id sub_100036434(uint64_t a1)
{
  return [*(id *)(a1 + 32) mousePointerIOHIDServicesAdded:*(void *)(a1 + 40)];
}

id sub_100036440(uint64_t a1)
{
  return [*(id *)(a1 + 32) mousePointerDeviceAvailabilityMonitorDidChangeAvailability:*(void *)(a1 + 40)];
}

void sub_100036B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100036BE4(uint64_t a1, uint64_t a2)
{
  return [_objc_msgSend(*(id *)(a1 + 32), "_queue_postUpdate:toProcessPID:", *(void *)(a1 + 40), a2);
}

void sub_100036D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100036DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100036DFC(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v10;
    do
    {
      int v5 = 0;
      do
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void *)(*((void *)&v9 + 1) + 8 * (void)v5);
        if (v6)
        {
          if (*(unsigned char *)(v6 + 32))
          {
            id v7 = [[*(id *)(a1 + 40) _pidForClientPort:*(unsigned int *)(v6 + 12)], v9];
            if (v7 != -1)
            {
              id v8 = objc_alloc_init((Class)BKSTouchDeliveryUpdate);
              [v8 setType:2];
              [v8 setPid:v7];
              [v8 setContextID:*(unsigned int *)(v6 + 8)];
              [v8 setIsDetached:1];
              [*(id *)(a1 + 40) _queue_postUpdate:v8 forTouchIdentifier:*(unsigned int *)(a1 + 48)];
            }
          }
        }
        int v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }
}

void sub_100036F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100037108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003729C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003741C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10003743C(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 removeIndex:*(int *)(a1 + 32)];
}

void sub_1000375B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000375D0(id a1)
{
  id v1 = objc_alloc_init(BKTouchDeliveryObservationManager);
  id v2 = (void *)qword_100122E00;
  qword_100122E00 = (uint64_t)v1;
}

__CFString *sub_10003760C(uint64_t a1)
{
  if (a1 >= 5)
  {
    id v1 = +[NSString stringWithFormat:@"<invalid:%X>", a1];
  }
  else
  {
    id v1 = off_1000F65A8[a1];
  }

  return v1;
}

void sub_100037670(uint64_t a1, void *a2)
{
  uint64_t v3 = **(unsigned int **)(a1 + 32);
  id v4 = a2;
  sub_10003760C(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v4 appendFormat:@"%@ (%d)", v5, **(unsigned int **)(a1 + 32)];
}

id sub_1000376F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 appendCustomFormatWithName:0 block:];
}

id sub_1000377CC(uint64_t a1, void *a2)
{
  return [a2 appendFormat:@"%llX/Tostada", *(void *)(a1 + 32)];
}

id sub_100037800(uint64_t a1, void *a2)
{
  return [a2 appendFormat:@"%llX/%X/%X", *(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44)];
}

uint64_t sub_10003783C()
{
  uint64_t TouchSensitiveButtonEvent = IOHIDEventCreateTouchSensitiveButtonEvent();
  IOHIDEventSetSenderID();
  ForceStageEvent = (const void *)IOHIDEventCreateForceStageEvent();
  IOHIDEventSetSenderID();
  IOHIDEventAppendEvent();
  CFRelease(ForceStageEvent);
  return TouchSensitiveButtonEvent;
}

void sub_100037908(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) appendDouble:@"positionDelta" withName:4 decimalPrecision:***(double ***)(a1 + 40)];
  uint64_t v3 = *(double **)(*(void *)(a1 + 40) + 8);
  id v4 = *(id *)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_100037670;
  v11[3] = &unk_1000F67B8;
  void v11[4] = v3;
  [v4 appendCustomFormatWithName:@"stage" block:v11];
  id v5 = NSStringFromBKSHIDForceStageTransition();
  [v4 appendString:v5 withName:@"transition"];

  id v6 = [v4 appendDouble:@"nextThreshold" withName:4 decimalPrecision:v3[1]];
  id v7 = [v4 appendDouble:@"pressedThreshold" withName:4 decimalPrecision:v3[2]];
  id v8 = [v4 appendDouble:@"releasedThreshold" withName:4 decimalPrecision:v3[3]];
  id v9 = [v4 appendDouble:@"forceProgress" withName:4 decimalPrecision:v3[4]];
  id v10 = [v4 appendDouble:@"forceProgressVelocity" withName:4 decimalPrecision:v3[5]];
}

id sub_100037ABC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 96);
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2 == 42)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _OWORD v12[2] = sub_100037C78;
    v12[3] = &unk_1000F67B8;
    void v12[4] = *(void *)(a1 + 40);
    [v3 appendCustomFormatWithName:0 block:v12];
  }
  else
  {
    id v4 = [v3 appendInteger:*(void *)(a1 + 40) withName:@"stage"];
  }
  id v5 = *(void **)(a1 + 32);
  id v6 = NSStringFromBKSHIDForceStageTransition();
  [v5 appendString:v6 withName:@"transition"];

  if (!*(unsigned char *)(a1 + 100)) {
    id v7 = [*(id *)(a1 + 32) appendDouble:@"nextThreshold" withName:4 decimalPrecision:*(double *)(a1 + 56)];
  }
  if (!*(unsigned char *)(a1 + 101)) {
    id v8 = [*(id *)(a1 + 32) appendDouble:@"pressedThreshold" withName:4 decimalPrecision:*(double *)(a1 + 64)];
  }
  if (!*(unsigned char *)(a1 + 102)) {
    id v9 = [*(id *)(a1 + 32) appendDouble:@"releasedThreshold" withName:4 decimalPrecision:*(double *)(a1 + 72)];
  }
  id v10 = [*(id *)(a1 + 32) appendDouble:@"progress" withName:4 decimalPrecision:*(double *)(a1 + 80)];
  return [*(id *)(a1 + 32) appendDouble:@"progressVelocity" withName:4 decimalPrecision:*(double *)(a1 + 88)];
}

id sub_100037C64(uint64_t a1)
{
  return [*(id *)(a1 + 32) appendBodySectionWithName:@"force" block:*(void *)(a1 + 40)];
}

void sub_100037C78(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  id v4 = a2;
  sub_10003760C(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v4 appendFormat:@"%@ (%d)", v5, *(void *)(a1 + 32)];
}

id sub_100037CF4(uint64_t a1)
{
  uint64_t SenderID = IOHIDEventGetSenderID();
  uint64_t IntegerValue = IOHIDEventGetIntegerValue();
  uint64_t v4 = IOHIDEventGetIntegerValue();
  id v5 = *(void **)(a1 + 32);

  return sub_1000376F4(SenderID, IntegerValue, v4, v5);
}

uint64_t sub_100037D64(uint64_t a1, uint64_t a2)
{
  if (IOHIDEventGetType() != 1 || IOHIDEventGetIntegerValue() < a2) {
    return 0;
  }

  return IOHIDEventGetDataValue();
}

uint64_t sub_100037DE8()
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v0 = IOHIDEventGetChildren();
  id v1 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = *(void *)v8;
LABEL_3:
    uint64_t v4 = 0;
    while (1)
    {
      if (*(void *)v8 != v3) {
        objc_enumerationMutation(v0);
      }
      uint64_t v5 = *(void *)(*((void *)&v7 + 1) + 8 * v4);
      if (IOHIDEventGetType() == 41) {
        break;
      }
      if (v2 == (id)++v4)
      {
        id v2 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v5 = 0;
  }

  return v5;
}

__CFString *sub_100037EE8(uint64_t a1)
{
  if (IOHIDEventGetType() == 42)
  {
    id v2 = objc_alloc_init((Class)BSDescriptionStream);
    uint64_t SenderID = IOHIDEventGetSenderID();
    uint64_t IntegerValue = IOHIDEventGetIntegerValue();
    uint64_t v5 = IOHIDEventGetIntegerValue();
    sub_1000376F4(SenderID, IntegerValue, v5, v2);
    int v6 = IOHIDEventGetIntegerValue();
    IOHIDEventGetDoubleValue();
    double v8 = v7;
    IOHIDEventGetDoubleValue();
    double v10 = v9;
    IOHIDEventGetDoubleValue();
    double v12 = v11;
    IOHIDEventGetDoubleValue();
    double v14 = v13;
    uint64_t v15 = IOHIDEventGetIntegerValue();
    if (v6)
    {
      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472;
      v51[2] = sub_1000385F8;
      v51[3] = &unk_1000F6798;
      int v52 = v6;
      [v2 appendCustomFormatWithName:@"eventMask" block:v51];
    }
    else
    {
      [v2 appendString:@"()" withName:@"eventMask"];
    }
    id v27 = [v2 appendPoint:@"position" withName:v12, v14];
    id v28 = [v2 appendPoint:@"positionDelta" withName:v8, v10];
    id v29 = [v2 appendBool:v15 > 0 withName:@"touch"];
    if (sub_100037DE8())
    {
      id v30 = v2;
      if (IOHIDEventGetType() == 41)
      {
        IOHIDEventGetDoubleValue();
        uint64_t v32 = v31;
        IOHIDEventGetDoubleValue();
        uint64_t v34 = v33;
        IOHIDEventGetDoubleValue();
        uint64_t v36 = v35;
        IOHIDEventGetDoubleValue();
        uint64_t v38 = v37;
        IOHIDEventGetDoubleValue();
        uint64_t v40 = v39;
        uint64_t v41 = IOHIDEventGetIntegerValue();
        uint64_t v42 = IOHIDEventGetIntegerValue();
        char v60 = _NSConcreteStackBlock;
        uint64_t v61 = 3221225472;
        id v62 = sub_100037ABC;
        id v63 = &unk_1000F6588;
        int v72 = 42;
        id v43 = v30;
        id v64 = v43;
        double v65 = (void *)v42;
        uint64_t v66 = v41;
        char v73 = 0;
        char v74 = 0;
        uint64_t v67 = v32;
        uint64_t v68 = v34;
        char v75 = 0;
        uint64_t v69 = v36;
        uint64_t v70 = v38;
        uint64_t v71 = v40;
        long long v44 = objc_retainBlock(&v60);
        [v43 appendBodySectionWithName:@"force" block:v44];
      }
      else
      {
        [v30 appendString:@"not a ForceStage event" withName:0];
      }
    }
    else
    {
      [v2 appendString:@"<missing force subevent>" withName:0];
    }
    uint64_t v46 = [v2 description];
LABEL_32:

    goto LABEL_33;
  }
  uint64_t v53 = 0;
  id v54 = 0;
  uint64_t v16 = sub_100037D64(a1, 8);
  if (v16)
  {
    uint64_t v17 = v16;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    double v18 = IOHIDEventGetChildren();
    id v19 = [v18 countByEnumeratingWithState:&v55 objects:&v60 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = *(void *)v56;
      while (2)
      {
        for (uint64_t i = 0; i != v20; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v56 != v21) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void *)(*((void *)&v55 + 1) + 8 * i);
          unsigned __int16 v24 = IOHIDEventGetIntegerValue();
          uint64_t v25 = (unsigned __int16)IOHIDEventGetIntegerValue();
          if (v24 == 65280 && v25 == 17)
          {
            id v20 = (id)sub_100037D64(v23, 48);
            goto LABEL_18;
          }
        }
        id v20 = [v18 countByEnumeratingWithState:&v55 objects:&v60 count:16];
        if (v20) {
          continue;
        }
        break;
      }
LABEL_18:

      uint64_t v53 = v17;
      id v54 = v20;
    }
    else
    {

      uint64_t v53 = v17;
      id v54 = 0;
    }
    id v47 = objc_alloc_init((Class)BSDescriptionStream);
    *(void *)&long long v55 = _NSConcreteStackBlock;
    *((void *)&v55 + 1) = 3221225472;
    *(void *)&long long v56 = sub_100037CF4;
    *((void *)&v56 + 1) = &unk_1000F8C30;
    *(void *)&long long v57 = v47;
    *((void *)&v57 + 1) = a1;
    id v48 = v47;
    [v48 appendProem:0 block:&v55];
    id v49 = v48;
    char v60 = _NSConcreteStackBlock;
    uint64_t v61 = 3221225472;
    id v62 = sub_100037908;
    id v63 = &unk_1000F8C30;
    id v64 = v49;
    double v65 = &v53;
    id v2 = v49;
    [v2 appendBodySectionWithName:0 block:&v60];

    uint64_t v46 = [v2 description];

    goto LABEL_32;
  }
  long long v45 = sub_10005FA78();
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "data for TouchSensitiveButton event is corrupt", buf, 2u);
  }

  uint64_t v46 = @"<not a TouchSensitiveButton event>";
LABEL_33:

  return v46;
}

void sub_1000385F8(uint64_t a1, void *a2)
{
  id v6 = a2;
  [v6 appendString:@"("];
  int v3 = *(_DWORD *)(a1 + 32);
  if (v3)
  {
    [v6 appendString:@"fastSwipe"];
    int v5 = *(_DWORD *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
      uint64_t v4 = v6;
      if ((v5 & 4) == 0) {
        goto LABEL_13;
      }
LABEL_11:
      [v6 appendString:@"|"];
      goto LABEL_12;
    }
    [v6 appendString:@"|"];
LABEL_10:
    [v6 appendString:@"lowSNRSwipe"];
    uint64_t v4 = v6;
    int v5 = *(_DWORD *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_13:
      if ((v5 & 8) == 0) {
        goto LABEL_16;
      }
      [v6 appendString:@"|"];
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  if ((v3 & 2) != 0) {
    goto LABEL_10;
  }
  uint64_t v4 = v6;
  if ((v3 & 4) != 0)
  {
LABEL_12:
    [v6 appendString:@"liftOffPredicted"];
    uint64_t v4 = v6;
    int v5 = *(_DWORD *)(a1 + 32);
    goto LABEL_13;
  }
  if ((v3 & 8) != 0)
  {
LABEL_15:
    [v6 appendString:@"clickDownPredicted"];
    uint64_t v4 = v6;
  }
LABEL_16:
  [v4 appendString:@""]);
}

id sub_100038810(unsigned int a1)
{
  if (a1 >= 4)
  {
    id v1 = +[NSString stringWithFormat:@"(%i)", a1];
  }
  else
  {
    id v1 = *(&off_1000F6738 + a1);
  }

  return v1;
}

void sub_100038A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100038A64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100038A74(uint64_t a1)
{
}

void sub_100038A7C(uint64_t a1, void *a2)
{
  int v3 = [a2 context];
  id v4 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) mutableCopy];
  [v4 minusSet:v3];
  id v5 = [v3 mutableCopy];
  [v5 minusSet:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v3);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v21;
    do
    {
      double v10 = 0;
      do
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v6);
        }
        sub_100038C68(*(void **)(*((void *)&v20 + 1) + 8 * (void)v10), 1);
        double v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v20 objects:v25 count:16];
    }
    while (v8);
  }

  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v11 = v4;
  id v12 = [v11 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v17;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v17 != v14) {
          objc_enumerationMutation(v11);
        }
        sub_100038C68(*(void **)(*((void *)&v16 + 1) + 8 * (void)v15), 0);
        uint64_t v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v16 objects:v24 count:16];
    }
    while (v13);
  }
}

void sub_100038C68(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (!v3
    || (id v6 = v3,
        unsigned int v4 = [v3 isEqualToString:BKSDisplayUUIDMainKey],
        v6,
        id v3 = v6,
        v4))
  {

    id v3 = 0;
  }
  id v7 = v3;
  id v5 = sub_100010CB8(v3, (uint64_t)"_BKDisplaySetDisabled");
  [v5 setDisabled:a2];
}

void sub_100038D04(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) windowServerDisplay];
  uint64_t v1 = [v3 uniqueId];
  id v2 = (void *)qword_100122E18;
  qword_100122E18 = v1;
}

id sub_100038D5C(void *a1)
{
  id v1 = a1;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x3032000000;
  long long v17 = sub_100038A64;
  long long v18 = sub_100038A74;
  id v19 = 0;
  id v2 = +[CADisplay displays];
  id v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472;
  double v10 = sub_100038ED0;
  id v11 = &unk_1000F65D8;
  id v3 = v1;
  id v12 = v3;
  id v13 = &v14;
  [v2 enumerateObjectsUsingBlock:&v8];

  if (!v15[5] && sub_100011180(v3))
  {
    uint64_t v4 = +[CADisplay mainDisplay];
    id v5 = (void *)v15[5];
    void v15[5] = v4;
  }
  id v6 = (id)v15[5];

  _Block_object_dispose(&v14, 8);

  return v6;
}

void sub_100038EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100038ED0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = *(void **)(a1 + 32);
  id v10 = v7;
  uint64_t v9 = [v7 uniqueId];
  LODWORD(v8) = [v8 isEqualToString:v9];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }
}

uint64_t sub_100038F70(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:kCADisplayOrientationRotation90])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:kCADisplayOrientationRotation180])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = (uint64_t)[v1 isEqualToString:kCADisplayOrientationRotation270];
  }

  return v2;
}

void sub_100038FF0(uint64_t a1, void *a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  CGFloat v4 = *(double *)(a1 + 32);
  CGFloat v5 = *(double *)(a1 + 40);
  id v6 = a2;
  sub_100039068(v3, v4, v5);
  [v6 setSize:];
  [v6 setScale:*(double *)(a1 + 48)];
}

void sub_100039068(unsigned int a1, CGFloat a2, CGFloat a3)
{
  if ((a1 & 0xFFFFFFFD) == 1)
  {
    id v6 = BKLogDisplay();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = sub_100038810(a1);
      v13.width = a3;
      v13.height = a2;
      id v8 = NSStringFromSize(v13);
      int v9 = 138543618;
      id v10 = v7;
      __int16 v11 = 2114;
      id v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Actually swapping the size because the display orientation is %{public}@ - new size:  %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
}

void sub_10003917C(id a1)
{
  int valuePtr = 0;
  CFNumberRef v1 = (const __CFNumber *)MGCopyAnswer();
  if (v1)
  {
    CFNumberRef v2 = v1;
    CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
    CFRelease(v2);
    int v3 = 11651 * ((360 - valuePtr) % 360);
    double v4 = (double)(int)((v3 >> 20) + (v3 >> 31));
  }
  else
  {
    double v4 = 0.0;
  }
  qword_100122E50 = *(void *)&v4;
}

uint64_t sub_100039224(uint64_t result)
{
  uint64_t v1 = result;
  LODWORD(result) = dword_1001215B0;
  if (dword_1001215B0 != -1
    || (notify_register_check("com.apple.springboard.hasBlankedScreen", &dword_1001215B0),
        CFStringRef result = dword_1001215B0,
        dword_1001215B0 != -1))
  {
    notify_set_state(result, *(unsigned __int8 *)(v1 + 32));
    return notify_post("com.apple.springboard.hasBlankedScreen");
  }
  return result;
}

void sub_1000392A4(id a1)
{
  id v4 = +[BSDispatchQueueAttributes serial];
  uint64_t v1 = [v4 serviceClass:33];
  uint64_t v2 = BSDispatchQueueCreate();
  int v3 = (void *)qword_100122E60;
  qword_100122E60 = v2;
}

void sub_100039324(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_100122E30;
  qword_100122E30 = (uint64_t)v1;
}

void sub_10003935C(uint64_t a1)
{
  uint64_t v2 = BKLogDisplay();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v6 = 138543618;
    uint64_t v7 = v3;
    __int16 v8 = 2114;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ exited with display-disabled assertion on %{public}@, releasing", (uint8_t *)&v6, 0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  sub_10003946C(WeakRetained, *(void *)(a1 + 48), 0, *(void *)(a1 + 64));
}

id sub_100039430(uint64_t a1)
{
  [*(id *)(a1 + 32) invalidate];
  uint64_t v2 = *(void **)(a1 + 40);

  return [v2 invalidate];
}

BOOL sub_10003946C(id *a1, void *a2, int a3, void *a4)
{
  if (!a1) {
    return 0;
  }
  uint64_t v7 = (os_unfair_lock_s *)(a1 + 1);
  id v8 = a2;
  os_unfair_lock_lock(v7);
  id v9 = v8;
  os_unfair_lock_assert_owner(v7);
  id v10 = v9;
  id v11 = [v10 length];
  id v12 = (void *)BKSDisplayUUIDMainKey;
  if (v11) {
    id v12 = v10;
  }
  id v13 = v12;

  uint64_t v14 = +[NSNumber numberWithLongLong:a4];
  uint64_t v35 = NSStringFromBSVersionedPID();
  uint64_t v15 = [a1[2] objectForKeyedSubscript:v14];
  uint64_t v16 = v15;
  if (a3)
  {
    if (!v15)
    {
      uint64_t v16 = +[NSMutableDictionary dictionary];
      [a1[2] setObject:v16 forKeyedSubscript:v14];
    }
    long long v17 = [v16 objectForKeyedSubscript:v13];

    if (v17)
    {
      long long v18 = BKLogDisplay();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138543618;
        *(void *)&uint8_t buf[4] = v35;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}@ requested to disable %{public}@, but had existing assertion!", buf, 0x16u);
      }

      BOOL v37 = 0;
    }
    else
    {
      objc_initWeak(&location, a1);
      id v22 = objc_alloc((Class)BSProcessDeathWatcher);
      id v23 = &_dispatch_main_q;
      *(void *)int buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_10003935C;
      id v43 = &unk_1000F6690;
      id v34 = v35;
      id v44 = v34;
      id v24 = v13;
      id v45 = v24;
      objc_copyWeak(v47, &location);
      id v46 = v10;
      v47[1] = a4;
      id v25 = [v22 initWithPID:a4 queue:&_dispatch_main_q deathHandler:buf];

      long long v26 = BKLogDisplay();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v38 = 138543618;
        *(void *)&v38[4] = v34;
        *(_WORD *)&v38[12] = 2114;
        *(void *)&v38[14] = v24;
        _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%{public}@ acquiring display-disabled assertion on %{public}@", v38, 0x16u);
      }

      id v27 = [a1[3] acquireForReason:v34 withContext:v24];
      id v28 = objc_alloc((Class)BSSimpleAssertion);
      *(void *)uint64_t v38 = _NSConcreteStackBlock;
      *(void *)&v38[8] = 3221225472;
      *(void *)&v38[16] = sub_100039430;
      uint64_t v39 = &unk_1000F66B8;
      id v29 = v25;
      id v40 = v29;
      id v30 = v27;
      id v41 = v30;
      id v31 = [v28 initWithIdentifier:v24 forReason:v34 invalidationBlock:v38];
      [v16 setObject:v31 forKeyedSubscript:v24];

      BOOL v37 = 1;
      objc_destroyWeak(v47);

      objc_destroyWeak(&location);
    }
  }
  else
  {
    id v19 = [v15 objectForKeyedSubscript:v13];
    long long v20 = BKLogDisplay();
    long long v21 = v20;
    if (v19)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 138543618;
        *(void *)&uint8_t buf[4] = v35;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v13;
        _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%{public}@ releasing display-disabled assertion on %{public}@", buf, 0x16u);
      }

      [v19 invalidate];
      if ((unint64_t)[v16 count] < 2) {
        [a1[2] removeObjectForKey:v14];
      }
      else {
        [v16 removeObjectForKey:v13];
      }
    }
    else
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138543618;
        *(void *)&uint8_t buf[4] = v35;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}@ requested to enable %{public}@ without previously disabling it!", buf, 0x16u);
      }
    }
    BOOL v37 = v19 != 0;
  }
  BOOL v32 = v37;

  os_unfair_lock_unlock(v7);
  return v32;
}

void sub_1000399B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, id a13)
{
}

void sub_1000399F0(void *a1)
{
  id v1 = sub_100010CB8(a1, (uint64_t)"BKDisplayResetFlipBookEnabled");
  unsigned int v2 = [v1 isFlipBookEnabled];
  uint64_t v3 = BKLogDisplay();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BKDisplayResetFlipBookEnabled flipBookIsEnabled:%{BOOL}u", (uint8_t *)v4, 8u);
  }

  if (v2)
  {
    [v1 setFlipBookEnabled:0];
    [v1 setFlipBookEnabled:1];
  }
}

void sub_100039AD4(void *a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v2 = 0x3FF0000000000000;
  char v1 = 0;
  sub_100011044(a1, &v3, &v4, (double *)&v2, &v1, 0);
}

void sub_100039B84(id a1)
{
  char v1 = objc_alloc_init(_BKDisplayInfo);
  uint64_t v2 = +[BSPathProviderFactory pathProviderForSystemContainerForCurrentProcess];
  uint64_t v3 = [v2 cachesPath];
  uint64_t v4 = [v3 path];

  CGFloat v5 = BKLogDisplay();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138543362;
    *(void *)long long v58 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "StartWindowServer: Initializing shader cache path: %{public}@", buf, 0xCu);
  }

  if (v4)
  {
    MTLSetShaderCachePath();
    MTLMakeShaderCacheWritableByAllUsers();
  }

  int v6 = v1;
  uint64_t v55 = kCAWindowServerDisableUpdatesOnMainDisplay;
  long long v56 = &__kCFBooleanTrue;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:&v56 forKeys:&v55 count:1];
  id v8 = +[CAWindowServer serverWithOptions:v7];

  [v8 setRendererFlags:3];
  id v9 = +[CADisplay mainDisplay];
  id v10 = [v8 displayWithDisplayId:[v9 displayId]];
  id v11 = BKLogDisplay();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    unsigned int v12 = [v10 displayId];
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)long long v58 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "StartWindowServer: disabling framebuffer changes on display (%d) at boot until we are ready for them.", buf, 8u);
  }

  if (v9 && v10)
  {
    id v13 = v9;
    id v14 = v10;
    uint64_t v15 = v6;
    [(_BKDisplayInfo *)v15 setWindowServerDisplay:v14];
    [(_BKDisplayInfo *)v15 setExternal:[v13 isExternal]];
    [v14 bounds];
    CGFloat v17 = v16;
    CGFloat v19 = v18;
    double v20 = (double)(unint64_t)[v13 pointScale];
    long long v21 = [v13 currentMode];
    double v22 = (double)(unint64_t)[v21 preferredScale];

    id v23 = BKLogDisplay();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134218240;
      *(double *)long long v58 = v20;
      *(_WORD *)&v58[8] = 2048;
      double v59 = v22;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "StartWindowServer: MG scale:%g display preferredScale:%g", buf, 0x16u);
    }

    if ([(_BKDisplayInfo *)v15 isExternal])
    {
      id v24 = [v13 currentMode];

      if (v24) {
        double v20 = v22;
      }
    }
    if (BSFloatLessThanFloat())
    {
      id v25 = BKLogDisplay();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134217984;
        *(double *)long long v58 = v20;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "StartWindowServer: Invalid point scale from CADisplay: %g; assuming 1.0",
          buf,
          0xCu);
      }

      double v20 = 1.0;
    }
    id v54 = v6;
    if (qword_100122E58 != -1) {
      dispatch_once(&qword_100122E58, &stru_1000F66F8);
    }
    uint64_t v26 = (int)*(double *)&qword_100122E50;
    id v27 = [v13 nativeOrientation];
    unsigned int v28 = sub_100038F70(v27);

    id v29 = BKLogDisplay();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      id v30 = sub_100038810(v26);
      id v31 = sub_100038810(v28);
      *(_DWORD *)int buf = 138543618;
      *(void *)long long v58 = v30;
      *(_WORD *)&v58[8] = 2114;
      double v59 = *(double *)&v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "StartWindowServer: digitizerToPanelRotation=%{public}@ layoutRotation=%{public}@", buf, 0x16u);
    }
    [v14 touchScales];
    double v34 = 1.0 - v33;
    if (v26 == 1) {
      double v35 = 1.0 - v33;
    }
    else {
      double v35 = 0.0;
    }
    if (v26 == 1) {
      double v36 = v33;
    }
    else {
      double v36 = v32;
    }
    if (v26 == 1) {
      double v37 = v32;
    }
    else {
      double v37 = v33;
    }
    if (v26 == 2) {
      double v35 = 1.0 - v32;
    }
    else {
      double v34 = 0.0;
    }
    if (v26 == 2)
    {
      double v36 = v32;
      double v37 = v33;
    }
    if (v26 == 3) {
      double v38 = 0.0;
    }
    else {
      double v38 = v35;
    }
    if (v26 == 3) {
      double v39 = 1.0 - v32;
    }
    else {
      double v39 = v34;
    }
    if (v26 == 3) {
      double v40 = v33;
    }
    else {
      double v40 = v36;
    }
    if (v26 == 3) {
      double v41 = v32;
    }
    else {
      double v41 = v37;
    }
    uint64_t v42 = BKLogDisplay();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v62.width = v17;
      v62.height = v19;
      id v43 = NSStringFromSize(v62);
      id v44 = +[NSNumber numberWithDouble:v20];
      *(_DWORD *)int buf = 138543618;
      *(void *)long long v58 = v43;
      *(_WORD *)&v58[8] = 2114;
      double v59 = *(double *)&v44;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "StartWindowServer: initial main screen size:%{public}@ scale:%{public}@", buf, 0x16u);
    }
    int v6 = v54;

    sub_100039068(v26, v17, v19);
    -[_BKDisplayInfo setSize:](v15, "setSize:");
    [(_BKDisplayInfo *)v15 setScale:v20];
    [(_BKDisplayInfo *)v15 setNativeRotation:v26];
    -[_BKDisplayInfo setNormalizedDigitizerRect:](v15, "setNormalizedDigitizerRect:", v38, v39, v40, v41);
    id v45 = +[BKSDefaults localDefaults];
    id v46 = [v45 forceMirroredOrientation];

    if (v46) {
      [v14 setOrientation:v46];
    }
    id v47 = BKLogDisplay();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 138543874;
      *(void *)long long v58 = v15;
      *(_WORD *)&v58[8] = 2114;
      double v59 = *(double *)&v13;
      __int16 v60 = 2114;
      id v61 = v14;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "StartWindowServer: main display info:%{public}@ -- display:%{public}@ serverDisplay:%{public}@", buf, 0x20u);
    }
  }
  else
  {
    id v13 = BKLogDisplay();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67109376;
      *(_DWORD *)long long v58 = v9 == 0;
      *(_WORD *)&v58[4] = 1024;
      *(_DWORD *)&v58[6] = v10 == 0;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "StartWindowServer: headless (display:%{BOOL}u/server:%{BOOL}u)", buf, 0xEu);
    }
  }

  id v48 = v6;
  os_unfair_lock_assert_not_owner((const os_unfair_lock *)&unk_100122E48);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_100122E48);
  id v49 = (void *)qword_100122E40;
  qword_100122E40 = (uint64_t)v48;

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_100122E48);
  id v50 = +[BKDisplayRenderOverlayManager sharedInstance];
  id v51 = +[BKBootUIPresenter sharedInstance];
  int v52 = sub_1000668EC();
  -[BKTVOutController _handleIapServerConnectionDied]_0((uint64_t)v52);

  uint64_t v53 = +[BKTetherController sharedInstance];

  [v53 updatePreferencesIfNeeded];
}

void sub_10003A2D8()
{
  id v0 = +[BKDisplayRenderOverlayManager sharedInstance];
  [v0 prepareForRestart];
}

void sub_10003A320(__IOSurface *a1)
{
  IOSurfaceUnlock(a1, 0, 0);

  CFRelease(a1);
}

id *sub_10003A3B0(id *a1)
{
  char v1 = a1;
  if (a1)
  {
    id v2 = [a1[4] count];
    if (v2)
    {
      if (v2 == (id)1)
      {
        uint64_t v3 = [v1[4] anyObject];
        uint64_t v4 = [v3 description];
      }
      else
      {
        [v1[4] bs_map:&stru_1000F6778];
        uint64_t v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      uint64_t v4 = @"<none>";
    }
    +[NSDate timeIntervalSinceReferenceDate];
    double v6 = v5 - *((double *)v1 + 5);
    if (v6 < 0.001) {
      double v6 = 0.0;
    }
    char v1 = +[NSString stringWithFormat:@"firstDown:%.3gs ago b%ue%uu%u destinations:%@", *(void *)&v6, *((unsigned __int8 *)v1 + 8), *((unsigned __int8 *)v1 + 9), *((unsigned __int8 *)v1 + 10), v4];
  }

  return v1;
}

id sub_10003A4B4(id a1, BKSHIDEventDeferringResolution *a2)
{
  return [(BKSHIDEventDeferringResolution *)a2 description];
}

id sub_10003BA20(uint64_t a1)
{
  return sub_1000376F4(*(void *)(*(void *)(a1 + 32) + 16), *(unsigned __int16 *)(*(void *)(a1 + 32) + 8), *(unsigned __int16 *)(*(void *)(a1 + 32) + 10), *(void **)(a1 + 40));
}

id sub_10003BF7C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) appendInteger:*(void *)(*(void *)(a1 + 40) + 128) withName:@"generation"];
  for (uint64_t i = 2; i != 32; ++i)
  {
    int v4 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * i);
    if (v4)
    {
      double v5 = *(void **)(a1 + 32);
      void v6[4] = i - 2;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      void v7[2] = sub_10003C098;
      v7[3] = &unk_1000F6798;
      int v8 = v4;
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_10003C0CC;
      v6[3] = &unk_1000F67B8;
      id result = [v5 appendCustomFormatForValue:v7 withCustomFormatForName:v6];
    }
  }
  return result;
}

id sub_10003C098(uint64_t a1, void *a2)
{
  return [a2 appendFormat:@"%X", *(unsigned int *)(a1 + 32)];
}

id sub_10003C0CC(uint64_t a1, void *a2)
{
  return [a2 appendFormat:@"%d", *(void *)(a1 + 32)];
}

void sub_10003C17C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003C18C(uint64_t a1, uint64_t a2)
{
  if (a2 >= 30)
  {
    int v4 = +[NSString stringWithFormat:@"%d >= 32", a2];
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      NSStringFromSelector("updateMaskForPathIndex:");
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      double v6 = (objc_class *)objc_opt_class();
      uint64_t v7 = NSStringFromClass(v6);
      *(_DWORD *)int buf = 138544642;
      id v9 = v5;
      __int16 v10 = 2114;
      id v11 = v7;
      __int16 v12 = 2048;
      uint64_t v13 = a1;
      __int16 v14 = 2114;
      CFStringRef v15 = @"BKDirectTouchUpdateEvents.mm";
      __int16 v16 = 1024;
      int v17 = 76;
      __int16 v18 = 2114;
      CGFloat v19 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
    }
    [v4 UTF8String];
    _bs_set_crash_log_message();
    __break(0);
    JUMPOUT(0x10003C2ECLL);
  }
  return *(unsigned int *)(a1 + 4 * a2 + 8);
}

void sub_10003C2F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003C320(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (a3 >= 30)
  {
    int v4 = +[NSString stringWithFormat:@"%d >= 32", a3];
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      NSStringFromSelector("setUpdateMask:forPathIndex:");
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      double v6 = (objc_class *)objc_opt_class();
      uint64_t v7 = NSStringFromClass(v6);
      *(_DWORD *)int buf = 138544642;
      id v9 = v5;
      __int16 v10 = 2114;
      id v11 = v7;
      __int16 v12 = 2048;
      uint64_t v13 = v3;
      __int16 v14 = 2114;
      CFStringRef v15 = @"BKDirectTouchUpdateEvents.mm";
      __int16 v16 = 1024;
      int v17 = 81;
      __int16 v18 = 2114;
      CGFloat v19 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
    }
    [v4 UTF8String];
    _bs_set_crash_log_message();
    __break(0);
    JUMPOUT(0x10003C480);
  }
  *(_DWORD *)(result + 4 * a3 + 8) = a2;
  return result;
}

void sub_10003C488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10003C4B4(uint64_t a1, uint64_t a2)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = *(id *)(a1 + 8);
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v13;
    do
    {
      double v6 = 0;
      do
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * (void)v6);
        if (v7) {
          uint64_t v8 = v7[16];
        }
        else {
          uint64_t v8 = 0;
        }
        if (v8 == a2)
        {
          __int16 v10 = v7;
          goto LABEL_15;
        }
        double v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v9 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      id v4 = v9;
    }
    while (v9);
  }
  __int16 v10 = 0;
LABEL_15:

  return v10;
}

void sub_10003C5E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10003C600(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)[*(id *)(a1 + 8) count];
  if (v4 < 1)
  {
LABEL_9:
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v5 = v4;
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = [*(id *)(a1 + 8) objectAtIndex:v6];
      uint64_t v8 = v7;
      uint64_t v9 = v7 ? v7[16] : 0;
      if (v9 == a2) {
        break;
      }

      if (v5 == ++v6) {
        goto LABEL_9;
      }
    }
    [*(id *)(a1 + 8) removeObjectAtIndex:v6];
  }

  return v8;
}

void sub_10003C6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10003C6C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) isAlive];
}

uint64_t sub_10003C6CC(uint64_t a1, int a2)
{
  uint64_t v4 = BKLogSystemShell();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      int v7 = 136446210;
      uint64_t v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "START WATCHDOG for %{public}s", (uint8_t *)&v7, 0xCu);
    }

    return wd_endpoint_begin_watchdog_monitoring_for_service();
  }
  else
  {
    if (v5)
    {
      int v7 = 136446210;
      uint64_t v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "STOP WATCHDOG for %{public}s", (uint8_t *)&v7, 0xCu);
    }

    return wd_endpoint_disable_monitoring_for_service();
  }
}

void sub_10003DAEC(int a1, CGContextRef c)
{
  v3[0] = xmmword_1000BF870;
  v3[1] = unk_1000BF880;
  CGContextSetFillColor(c, (const CGFloat *)v3);
  v4.origin.double x = 0.0;
  v4.origin.double y = 0.0;
  v4.size.width = 16.0;
  v4.size.height = 1.0;
  CGContextFillRect(c, v4);
  v5.origin.double x = 0.0;
  v5.origin.double y = 0.0;
  v5.size.width = 1.0;
  v5.size.height = 16.0;
  CGContextFillRect(c, v5);
}

CGColorRef sub_10003DDCC(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  if (!DeviceRGB) {
    return 0;
  }
  uint64_t v9 = DeviceRGB;
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  CGColorRef v10 = CGColorCreate(DeviceRGB, components);
  CFRelease(v9);
  return v10;
}

uint64_t sub_10003DF10(uint64_t a1, char a2, char a3, uint64_t a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v6 = sub_10003DFC0;
  int v7 = &unk_1000F6840;
  uint64_t v8 = a1;
  char v9 = a2;
  char v10 = a3;
  if (!sub_10000B130((uint64_t)"_BKDisplayXXNotifySetDisplayBlanked", BKBackBoardClientEntitlement, a4)) {
    return 5;
  }
  v6((uint64_t)v5);
  return 0;
}

void sub_10003DFC0(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    id v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    id v2 = 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 40);
  int v4 = *(unsigned __int8 *)(a1 + 41);
  id v17 = v2;
  if (sub_100011180(v17))
  {
    CGRect v5 = BKLogDisplay();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = "Set";
      if (!v4) {
        uint64_t v6 = "Notify";
      }
      CFStringRef v7 = @"YES";
      if (!v3) {
        CFStringRef v7 = @"NO";
      }
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s Blanked: %@", buf, 0x16u);
    }

    if (v4)
    {
      uint64_t v8 = sub_100010DDC();
      [v8 setBlanked:v3 != 0];
    }
    char v9 = +[BKDisplayController sharedInstance];
    sub_10001E08C((uint64_t)v9, 0, v3 != 0);

    if (qword_100122E68 != -1) {
      dispatch_once(&qword_100122E68, &stru_1000F6718);
    }
    *(void *)int buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_100039224;
    CFStringRef v19 = (const __CFString *)&unk_1000F8B30;
    BOOL v20 = v3 != 0;
    dispatch_async((dispatch_queue_t)qword_100122E60, buf);
  }
  else
  {
    char v10 = BKLogDisplay();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = "Set";
      if (!v4) {
        id v11 = "Notify";
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = v11;
      if (v3) {
        CFStringRef v12 = @"YES";
      }
      else {
        CFStringRef v12 = @"NO";
      }
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v17;
      *(_WORD *)&buf[22] = 2112;
      CFStringRef v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%s %{public}@ Blanked: %@", buf, 0x20u);
    }

    long long v13 = sub_100010CB8(v17, (uint64_t)"BKDisplayNotifySetDisplayBlanked");
    long long v14 = v13;
    if (v4) {
      [v13 setBlanked:v3 != 0];
    }
    BOOL v15 = v3 != 0;
    __int16 v16 = +[BKDisplayController sharedInstance];
    sub_10001E08C((uint64_t)v16, v17, v15);
  }
}

uint64_t sub_10003E2D4(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  int v4 = sub_10003E378;
  CGRect v5 = &unk_1000F7D08;
  uint64_t v6 = a1;
  if (!sub_10000B130((uint64_t)"_BKDisplayXXWillUnblank", BKBackBoardClientEntitlement, a2)) {
    return 5;
  }
  v4((uint64_t)v3);
  return 0;
}

void sub_10003E378(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    char v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    char v1 = 0;
  }
  CGRect v5 = v1;
  id v2 = sub_100010CB8(v5, (uint64_t)"BKDisplayWillUnblank");
  if (v2)
  {
    int v3 = BKLogDisplay();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      CFStringRef v4 = @"Main";
      if (v5) {
        CFStringRef v4 = v5;
      }
      *(_DWORD *)int buf = 138543362;
      CFStringRef v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%{public}@ will unblank", buf, 0xCu);
    }

    [v2 willUnblank];
  }
}

uint64_t sub_10003E498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  CGRect v5 = sub_10003E54C;
  uint64_t v6 = &unk_1000F6860;
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  if (!sub_100005C1C((uint64_t)"_BKDisplayXXGetBlankingRemovesPower", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5; {
  v5((uint64_t)v4);
  }
  return 0;
}

void sub_10003E54C(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    id v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    id v2 = 0;
  }
  id v6 = v2;
  int v3 = sub_100010CB8(v2, (uint64_t)"BKDisplayGetBlankingRemovesPower");
  CFStringRef v4 = v3;
  if (v3) {
    unsigned __int8 v5 = [v3 blankingRemovesPower];
  }
  else {
    unsigned __int8 v5 = 0;
  }

  **(unsigned char **)(a1 + 40) = v5;
}

uint64_t sub_10003E5F0(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  unsigned __int8 v5 = sub_10003E6A8;
  id v6 = &unk_1000F6880;
  uint64_t v7 = a1;
  char v8 = a2;
  if (!sub_100005C1C((uint64_t)"_BKDisplayXXSetBlankingRemovesPower", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5; {
  v5((uint64_t)v4);
  }
  return 0;
}

void sub_10003E6A8(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    id v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    id v2 = 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 40);
  id v6 = v2;
  CFStringRef v4 = sub_100010CB8(v2, (uint64_t)"BKDisplaySetBlankingRemovesPower");
  unsigned __int8 v5 = BKLogDisplay();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    BOOL v8 = v3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BKDisplaySetBlankingRemovesPower setBlankingRemovesPower:%{BOOL}u", buf, 8u);
  }

  [v4 setBlankingRemovesPower:v3 != 0];
}

uint64_t sub_10003E7C8(unsigned char *a1, void *a2, _DWORD *a3, uint64_t a4)
{
  if (sub_10000B130((uint64_t)"_BKDisplayXXGetSystemIdentifiers", BKBackBoardClientEntitlement, a4))
  {
    if (*a1)
    {
      uint64_t v7 = +[NSString stringWithUTF8String:a1];
    }
    else
    {
      uint64_t v7 = 0;
    }
    char v9 = sub_100010CB8(v7, (uint64_t)"BKDisplayGetSystemIdentifiers");
    char v10 = [v9 systemIdentifiers];

    if (v10)
    {
      id v11 = [v10 bs_secureEncoded];
      if (v11)
      {
        CFStringRef v12 = v11;
        *a2 = [v11 bs_bytesForMIG];
        *a3 = [v12 bs_lengthForMIG];

        uint64_t v8 = 0;
LABEL_14:

        return v8;
      }
      long long v13 = BKLogDisplay();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "GetSystemIdentifiers failed to encode system identifiers", buf, 2u);
      }
    }
    else
    {
      long long v13 = BKLogDisplay();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "GetSystemIdentifiers: no active system identifiers", v15, 2u);
      }
    }

    uint64_t v8 = 5;
    goto LABEL_14;
  }
  return 5;
}

uint64_t sub_10003E954(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  id v6 = sub_10003EA0C;
  uint64_t v7 = &unk_1000F68A0;
  int v10 = a3;
  uint64_t v8 = a1;
  uint64_t v9 = a2;
  if (!sub_100005C1C((uint64_t)"_BKDisplayXXSetSystemIdentifiers", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a4))return 5; {
  v6((uint64_t)v5);
  }
  return 0;
}

void sub_10003EA0C(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    id v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    id v2 = 0;
  }
  if (!*(_DWORD *)(a1 + 48) || !*(void *)(a1 + 40))
  {
    id v6 = 0;
LABEL_31:
    id v6 = v6;
    __int16 v18 = sub_100010CB8(v2, (uint64_t)"BKDisplaySetSystemIdentifiers");
    [v18 setSystemIdentifiers:v6];

    goto LABEL_32;
  }
  id v3 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 40) length:*(unsigned int *)(a1 + 48) freeWhenDone:0];
  uint64_t v4 = objc_opt_class();
  unsigned __int8 v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  id v6 = +[NSObject bs_secureObjectFromData:v3 ofClasses:v5];

  objc_opt_class();
  BOOL v7 = 0;
  if (objc_opt_isKindOfClass())
  {
    id v8 = [v6 count];
    BOOL v7 = v8 != 0;
    if (v8)
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      id v9 = v6;
      id v10 = [v9 countByEnumeratingWithState:&v22 objects:v26 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v23;
        id v20 = v3;
        BOOL v19 = v7;
        while (2)
        {
          for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v23 != v12) {
              objc_enumerationMutation(v9);
            }
            long long v14 = *(void **)(*((void *)&v22 + 1) + 8 * i);
            uint64_t v15 = objc_opt_class();
            id v16 = v14;
            if (!v15 || (objc_opt_isKindOfClass() & 1) == 0)
            {

LABEL_23:
              BOOL v7 = 0;
              id v3 = v20;
              goto LABEL_24;
            }

            if (!v16) {
              goto LABEL_23;
            }
          }
          id v11 = [v9 countByEnumeratingWithState:&v22 objects:v26 count:16];
          id v3 = v20;
          BOOL v7 = v19;
          if (v11) {
            continue;
          }
          break;
        }
      }

      if (v9)
      {
        BOOL v7 = 1;
        goto LABEL_27;
      }
    }
    else
    {
      BOOL v7 = 0;
    }
  }
LABEL_24:
  id v17 = BKLogDisplay();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Error unarchiving system identifiers", buf, 2u);
  }

LABEL_27:
  if (v6 && v7 || !*(_DWORD *)(a1 + 48) || !*(void *)(a1 + 40)) {
    goto LABEL_31;
  }
LABEL_32:
}

uint64_t sub_10003ECEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  unsigned __int8 v5 = sub_10003EDA0;
  id v6 = &unk_1000F6860;
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  if (!sub_100005C1C((uint64_t)"_BKDisplayXXIsFlipBookEnabled", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5; {
  v5((uint64_t)v4);
  }
  return 0;
}

void sub_10003EDA0(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    id v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    id v2 = 0;
  }
  id v6 = v2;
  id v3 = sub_100010CB8(v2, (uint64_t)"BKDisplayIsFlipBookEnabled");
  uint64_t v4 = v3;
  if (v3) {
    unsigned __int8 v5 = [v3 isFlipBookEnabled];
  }
  else {
    unsigned __int8 v5 = 0;
  }

  **(unsigned char **)(a1 + 40) = v5;
}

uint64_t sub_10003EE44(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  unsigned __int8 v5 = sub_10003EEFC;
  id v6 = &unk_1000F6880;
  uint64_t v7 = a1;
  char v8 = a2;
  if (!sub_100005C1C((uint64_t)"_BKDisplayXXSetFlipBookEnabled", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5; {
  v5((uint64_t)v4);
  }
  return 0;
}

void sub_10003EEFC(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    id v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    id v2 = 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 40);
  id v6 = v2;
  uint64_t v4 = sub_100010CB8(v2, (uint64_t)"BKDisplaySetFlipBookEnabled");
  unsigned __int8 v5 = BKLogDisplay();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    BOOL v8 = v3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BKDisplaySetFlipBookEnabled setFlipBookEnabled:%{BOOL}u", buf, 8u);
  }

  [v4 setFlipBookEnabled:v3 != 0];
}

uint64_t sub_10003F01C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  id v6 = sub_10003F0D4;
  uint64_t v7 = &unk_1000F6860;
  uint64_t v8 = a1;
  int v9 = a2;
  int v10 = a3;
  if (!sub_100005C1C((uint64_t)"_BKDisplayXXSetCalibrationPhase", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a4))return 5; {
  v6((uint64_t)v5);
  }
  return 0;
}

void sub_10003F0D4(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    char v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    char v1 = 0;
  }
}

uint64_t sub_10003F11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  unsigned __int8 v5 = sub_10003F1D0;
  id v6 = &unk_1000F6860;
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  if (!sub_100005C1C((uint64_t)"_BKDisplayXXIsFlipBookSuppressed", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5; {
  v5((uint64_t)v4);
  }
  return 0;
}

void sub_10003F1D0(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    id v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    id v2 = 0;
  }
  id v6 = v2;
  int v3 = sub_100010CB8(v2, (uint64_t)"BKDisplayIsFlipBookSuppressed");
  uint64_t v4 = v3;
  if (v3) {
    unsigned __int8 v5 = [v3 isFlipBookSuppressed];
  }
  else {
    unsigned __int8 v5 = 0;
  }

  **(unsigned char **)(a1 + 40) = v5;
}

uint64_t sub_10003F274(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  unsigned __int8 v5 = sub_10003F32C;
  id v6 = &unk_1000F6880;
  uint64_t v7 = a1;
  char v8 = a2;
  if (!sub_100005C1C((uint64_t)"_BKDisplayXXSetFlipBookSuppressed", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5; {
  v5((uint64_t)v4);
  }
  return 0;
}

void sub_10003F32C(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    id v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    id v2 = 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 40);
  id v6 = v2;
  uint64_t v4 = sub_100010CB8(v2, (uint64_t)"BKDisplaySetFlipBookSuppressed");
  unsigned __int8 v5 = BKLogDisplay();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    BOOL v8 = v3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BKDisplaySetFlipBookSuppressed setFlipBookSuppressed:%{BOOL}u", buf, 8u);
  }

  [v4 setFlipBookSuppressed:v3 != 0];
}

uint64_t sub_10003F44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  unsigned __int8 v5 = sub_10003F500;
  id v6 = &unk_1000F6860;
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  if (!sub_100005C1C((uint64_t)"_BKDisplayXXIsDisabled", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, a3))return 5; {
  v5((uint64_t)v4);
  }
  return 0;
}

void sub_10003F500(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    id v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    id v2 = 0;
  }
  id v6 = v2;
  int v3 = sub_100010CB8(v2, (uint64_t)"BKDisplayIsDisabled");
  uint64_t v4 = v3;
  if (v3) {
    unsigned __int8 v5 = [v3 disabled];
  }
  else {
    unsigned __int8 v5 = 1;
  }

  **(unsigned char **)(a1 + 40) = v5;
}

uint64_t sub_10003F5A4(uint64_t a1, char a2, uint64_t a3, long long *a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  uint64_t v7 = sub_10003F668;
  uint64_t v8 = &unk_1000F68C0;
  uint64_t v9 = a1;
  uint64_t v10 = a3;
  char v13 = a2;
  long long v4 = a4[1];
  long long v11 = *a4;
  long long v12 = v4;
  if (!sub_100005C1C((uint64_t)"_BKDisplayXXSetDisabled", BKDisableDisplaysEntitlement, BKBackBoardClientEntitlement, (uint64_t)a4))return 5; {
  v7((uint64_t)v6);
  }
  return 0;
}

void sub_10003F668(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    id v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  }
  else
  {
    id v2 = 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 80);
  long long v4 = (void *)BSVersionedPIDForAuditToken();
  id v5 = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100039324;
  void v9[3] = &unk_1000F7D08;
  void v9[4] = self;
  if (qword_100122E28 != -1) {
    dispatch_once(&qword_100122E28, v9);
  }
  BOOL v6 = v3 != 0;
  uint64_t v7 = (id *)(id)qword_100122E30;
  BOOL v8 = sub_10003946C(v7, v5, v6, v4);

  **(unsigned char **)(a1 + 40) = v8;
}

uint64_t sub_10003F7A4(uint64_t a1, char a2, long long *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  long long v3 = a3[1];
  long long v9 = *a3;
  BOOL v6 = sub_10003F854;
  uint64_t v7 = &unk_1000F68E0;
  uint64_t v8 = a1;
  char v11 = a2;
  long long v10 = v3;
  if (!sub_1000168CC(BKVirtualDisplayEntitlement, (uint64_t)a3)) {
    return 5;
  }
  v6((uint64_t)v5);
  return 0;
}

void sub_10003F854(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 72);
    if (v2 >= 4)
    {
      long long v9 = BKLogDisplay();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = *(unsigned __int8 *)(a1 + 72);
        LODWORD(block[0]) = 67109120;
        HIDWORD(block[0]) = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "SetCloneMirroringModeForDestinationDisplay: unknown mode value %X", (uint8_t *)block, 8u);
      }
    }
    else
    {
      int v3 = BSPIDForAuditToken();
      long long v4 = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
      id v5 = sub_1000668EC();
      id v6 = v4;
      id v11 = v6;
      if (v5)
      {
        uint64_t v7 = v5[1];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100066A00;
        block[3] = &unk_1000F7890;
        void block[4] = v5;
        unint64_t v14 = v2;
        id v13 = v6;
        int v15 = v3;
        dispatch_async(v7, block);

        id v6 = v11;
      }
    }
  }
  else
  {
    uint64_t v8 = BKLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "SetCloneMirroringModeForDestinationDisplay: empty displayUUID not allowed", (uint8_t *)block, 2u);
    }
  }
}

uint64_t sub_10003FA70(uint64_t a1, long long *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v2 = a2[1];
  long long v8 = *a2;
  id v5 = sub_10003FB18;
  id v6 = &unk_1000F6900;
  uint64_t v7 = a1;
  long long v9 = v2;
  if (!sub_1000168CC(BKVirtualDisplayEntitlement, (uint64_t)a2)) {
    return 5;
  }
  v5((uint64_t)v4);
  return 0;
}

void sub_10003FB18(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 32))
  {
    int v2 = BSPIDForAuditToken();
    int v3 = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
    long long v4 = sub_1000668EC();
    id v7 = v3;
    if (v4)
    {
      id v5 = v4[1];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100066A18;
      block[3] = &unk_1000F8EC8;
      void block[4] = v4;
      id v9 = v7;
      int v10 = v2;
      dispatch_async(v5, block);
    }
  }
  else
  {
    id v6 = BKLogDisplay();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "RemoveCloneMirroringModeForDestinationDisplay: empty displayUUID not allowed", (uint8_t *)block, 2u);
    }
  }
}

void sub_10003FC84(uint64_t a1)
{
  id v2 = +[BKTetherController sharedInstance];
  **(unsigned char **)(a1 + 32) = [v2 isTethered];
}

void sub_10003FCE0(uint64_t a1)
{
  id v3 = +[BKTetherController sharedInstance];
  if ([v3 isTethered])
  {
    id v2 = +[BKSDefaults localDefaults];
    **(unsigned char **)(a1 + 32) = [v2 ignoreTetheringPreferences] ^ 1;
  }
  else
  {
    **(unsigned char **)(a1 + 32) = 0;
  }
}

void sub_10003FD6C(uint64_t a1)
{
  id v2 = +[BKTetherController sharedInstance];
  [v2 setOrientationNotificationDisabled:*(unsigned char *)(a1 + 32) != 0];
}

void sub_10003FDCC(uint64_t a1)
{
  id v2 = +[BKTetherController sharedInstance];
  if ([v2 isTethered]) {
    [v2 noteInterfaceOrientationChangedWithInterfaceOrientation:*(unsigned __int8 *)(a1 + 32)];
  }
}

void sub_10003FE30(uint64_t a1)
{
  id v2 = +[BKSDefaults localDefaults];
  id v3 = BKLogDisplay();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    long long v4 = BSDeviceOrientationDescription();
    int v23 = 138543362;
    long long v24 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "UpdateMirroredDisplayOrientationWithInterfaceOrientation:%{public}@ ", (uint8_t *)&v23, 0xCu);
  }
  id v5 = +[BKTetherController sharedInstance];
  unsigned int v6 = [v5 isTethered];
  unsigned int v7 = [v5 usesDisplayPortTethering];
  unsigned __int8 v8 = [v2 isSteveNoteRotationEnabled];
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9 || (v8 & 1) != 0)
  {
    int v15 = [v2 forceMirroredOrientation];

    if (!v15)
    {
      id v16 = +[CAWindowServer serverIfRunning];
      int v10 = [v16 displays];

      if ([v10 count])
      {
        id v11 = kCAWindowServerOrientation_Portrait;
        if (*(unsigned __int8 *)(a1 + 32) - 2 <= 2)
        {
          id v17 = *(id *)*(&off_1000F6988 + (*(unsigned char *)(a1 + 32) - 2));

          id v11 = v17;
        }
        __int16 v18 = [v10 objectAtIndex:0];
        BOOL v19 = [v18 orientation];
        unsigned __int8 v20 = [v19 isEqualToString:v11];
        long long v21 = BKLogDisplay();
        BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        if (v20)
        {
          if (v22)
          {
            int v23 = 138543362;
            long long v24 = v11;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Ignoring request to update to same display interface orientation (%{public}@)", (uint8_t *)&v23, 0xCu);
          }
        }
        else
        {
          if (v22)
          {
            int v23 = 138543618;
            long long v24 = v19;
            __int16 v25 = 2114;
            *(void *)uint64_t v26 = v11;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Updating external display interface orientation from %{public}@ to %{public}@", (uint8_t *)&v23, 0x16u);
          }

          [v18 setOrientation:v11];
        }

        goto LABEL_27;
      }
      id v11 = BKLogDisplay();
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
LABEL_27:

        goto LABEL_28;
      }
      LOWORD(v23) = 0;
      long long v12 = "Ignoring request to update to same display interface orientation because there are no CADisplays";
      id v13 = v11;
      uint32_t v14 = 2;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v23, v14);
      goto LABEL_27;
    }
    int v10 = BKLogDisplay();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = BSDeviceOrientationDescription();
      int v23 = 138543362;
      long long v24 = v11;
      long long v12 = "ignoring mirrored display orientation update to %{public}@ because (forceMirroredOrientation:YES)";
      id v13 = v10;
      uint32_t v14 = 12;
      goto LABEL_13;
    }
  }
  else
  {
    int v10 = BKLogDisplay();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = BSDeviceOrientationDescription();
      int v23 = 138544130;
      long long v24 = v11;
      __int16 v25 = 1024;
      *(_DWORD *)uint64_t v26 = 1;
      *(_WORD *)&v26[4] = 1024;
      *(_DWORD *)&v26[6] = 1;
      __int16 v27 = 1024;
      int v28 = 0;
      long long v12 = "ignoring mirrored display orientation update to %{public}@ because (tethered:%{BOOL}u displayPortTethering:%"
            "{BOOL}u stevenoteRotationEnabled:%{BOOL}u)";
      id v13 = v10;
      uint32_t v14 = 30;
      goto LABEL_13;
    }
  }
LABEL_28:
}

uint64_t sub_1000401F0(uint64_t a1, int a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  id v5 = sub_100040294;
  unsigned int v6 = &unk_1000F6920;
  int v8 = a2;
  uint64_t v7 = a1;
  if (!sub_1000168CC(BKDisplayArrangementEntitlement, a3)) {
    return 5;
  }
  v5((uint64_t)v4);
  return 0;
}

void sub_100040294(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 40) || !*(void *)(a1 + 32)) {
    goto LABEL_9;
  }
  id v2 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 32) length:*(unsigned int *)(a1 + 40) freeWhenDone:0];
  uint64_t v3 = objc_opt_class();
  long long v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v3, objc_opt_class(), 0);
  id v5 = +[NSObject bs_secureObjectFromData:v2 ofClasses:v4];

  if (v5)
  {

LABEL_10:
    uint64_t v7 = [v5 firstObject];
    if (v7)
    {
      int v8 = [v5 firstObject];
      uint64_t v9 = (uint64_t)[v8 edge];
    }
    else
    {
      uint64_t v9 = 1;
    }

    int v10 = +[BKSDefaults localDefaults];
    [v10 setPointerRegionArrangementEdge:v9];

    id v11 = +[BKHIDEventProcessorRegistry sharedInstance];
    long long v12 = [v11 eventProcessorOfClass:objc_opt_class()];
    id v13 = [v12 mousePointerController];
    [v13 setDisplayArrangement:v5];

    return;
  }
  unsigned int v6 = BKLogDisplay();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error unarchiving display arrangement", buf, 2u);
  }

  if (!*(_DWORD *)(a1 + 40) || !*(void *)(a1 + 32))
  {
LABEL_9:
    id v5 = 0;
    goto LABEL_10;
  }
}

uint64_t sub_10004047C(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (!sub_10000B130((uint64_t)"_BKDisplayXXApplyRenderOverlay", BKBackBoardClientEntitlement, a5)) {
    return 5;
  }
  uint64_t v9 = sub_1000405BC(a1, a2);
  int v10 = sub_100040658(a3, a4);
  if (v9)
  {
    id v11 = [v9 displayUUID];
    long long v12 = sub_1000406D0(v11);

    id v13 = +[BKDisplayRenderOverlayManager sharedInstance];
    [v13 removeOverlay:v12 withAnimationSettings:0];

    uint32_t v14 = [BKDisplayRenderOverlayImage alloc];
    LODWORD(v15) = 2139095039;
    id v16 = [(BKDisplayRenderOverlayImage *)v14 initWithOverlayDescriptor:v9 level:v15];
    id v17 = +[BKDisplayRenderOverlayManager sharedInstance];
    unsigned int v18 = [v17 applyOverlay:v16 withAnimationSettings:v10];

    if (v18) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = 5;
    }
  }
  else
  {
    uint64_t v19 = 4;
  }

  return v19;
}

id sub_1000405BC(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    id v2 = +[NSData dataWithBytesNoCopy:a1 length:a2 freeWhenDone:0];
    uint64_t v3 = +[BKSDisplayRenderOverlayDescriptor _classesRequiredToDecode];
    long long v4 = +[BKSDisplayRenderOverlayDescriptor bs_secureDecodedFromData:v2 withAdditionalClasses:v3];
  }
  else
  {
    long long v4 = 0;
  }

  return v4;
}

id sub_100040658(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    id v2 = +[NSData dataWithBytesNoCopy:a1 length:a2 freeWhenDone:0];
    uint64_t v3 = +[BSAnimationSettings bs_secureDecodedFromData:v2];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

id sub_1000406D0(void *a1)
{
  id v1 = a1;
  id v2 = +[BKDisplayRenderOverlayManager sharedInstance];
  uint64_t v3 = [v2 activeOverlays];

  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x3032000000;
  id v13 = sub_100040820;
  uint32_t v14 = sub_100040830;
  id v15 = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100040838;
  v7[3] = &unk_1000F6968;
  id v4 = v1;
  id v8 = v4;
  uint64_t v9 = &v10;
  [v3 enumerateObjectsUsingBlock:v7];
  id v5 = (id)v11[5];

  _Block_object_dispose(&v10, 8);

  return v5;
}

void sub_100040808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100040820(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100040830(uint64_t a1)
{
}

void sub_100040838(uint64_t a1, void *a2, unsigned char *a3)
{
  id v9 = a2;
  if ([v9 type] == (id)1)
  {
    unsigned int v6 = [v9 descriptor];
    uint64_t v7 = [v6 displayUUID];
    int v8 = BSEqualStrings();

    if (v8)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
      *a3 = 1;
    }
  }
}

uint64_t sub_1000408F8(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (!sub_10000B130((uint64_t)"_BKDisplayXXRemoveRenderOverlay", BKBackBoardClientEntitlement, a5)) {
    return 5;
  }
  id v9 = sub_1000405BC(a1, a2);
  uint64_t v10 = sub_100040658(a3, a4);
  if (v9)
  {
    id v11 = +[BKDisplayRenderOverlayManager sharedInstance];
    uint64_t v12 = [v11 activeOverlayWithDescriptor:v9];
    if (v12 && ([v11 removeOverlay:v12 withAnimationSettings:v10] & 1) != 0) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = 5;
    }
  }
  else
  {
    uint64_t v13 = 4;
  }

  return v13;
}

uint64_t sub_1000409EC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!sub_10000B130((uint64_t)"_BKDisplayXXFreezeRenderOverlay", BKBackBoardClientEntitlement, a3)) {
    return 5;
  }
  id v5 = sub_1000405BC(a1, a2);
  if (v5)
  {
    unsigned int v6 = +[BKDisplayRenderOverlayManager sharedInstance];
    uint64_t v7 = [v6 activeOverlayWithDescriptor:v5];
    if (v7 && ([v6 freezeOverlay:v7] & 1) != 0) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = 5;
    }
  }
  else
  {
    uint64_t v8 = 4;
  }

  return v8;
}

uint64_t sub_100040AB0(unsigned char *a1, void *a2, _DWORD *a3, uint64_t a4)
{
  if (!sub_10000B130((uint64_t)"_BKDisplayXXRenderOverlay", BKBackBoardClientEntitlement, a4)) {
    return 5;
  }
  if (*a1)
  {
    uint64_t v7 = +[NSString stringWithUTF8String:a1];
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v9 = sub_100038D5C(v7);
  if (v9 && (sub_1000406D0(v7), (uint64_t v10 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v11 = v10;
    uint64_t v12 = [v10 descriptor];
    uint64_t v13 = [v12 bs_secureEncoded];

    if (a2 && a3)
    {
      *a2 = [v13 bs_bytesForMIG];
      *a3 = [v13 bs_lengthForMIG];
    }

    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 5;
  }

  return v8;
}

uint64_t sub_100040BC4(uint64_t a1, int a2, long long *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  long long v3 = a3[1];
  long long v10 = *a3;
  unsigned int v6 = sub_100040C78;
  uint64_t v7 = &unk_1000F6940;
  uint64_t v8 = a1;
  int v9 = a2;
  long long v11 = v3;
  if (!sub_10000B130((uint64_t)"_BKDisplayXXDismissInterstitialRenderOverlay", BKBackBoardClientEntitlement, (uint64_t)a3))return 5; {
  v6((uint64_t)v5);
  }
  return 0;
}

void sub_100040C78(uint64_t a1)
{
  sub_100040658(*(void *)(a1 + 32), *(_DWORD *)(a1 + 40));
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  id v1 = +[BKBootUIPresenter sharedInstance];
  [v1 dismissOverlayWithAnimationSettings:v2 requstedByPID:BSPIDForAuditToken()];
}

void sub_100040CF8(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 32);
  BOOL v2 = *(unsigned char *)(a1 + 32) != 0;
  long long v3 = +[BKSecureDrawingMonitor sharedInstance];
  [v3 setSecureModeEnabled:v2];

  id v4 = BKLogDisplay();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = v1 != 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Setting display secure mode: %u", (uint8_t *)v6, 8u);
  }

  id v5 = sub_100010DDC();
  [v5 setSecure:v1 != 0];
}

id sub_100040DF4(const char *a1)
{
  mach_port_name_t v2 = GSRegisterPurpleNamedPort();
  integer_t port_info = 16;
  mach_port_set_attributes(mach_task_self_, v2, 1, &port_info, 1u);
  inactive = dispatch_workloop_create_inactive(a1);
  dispatch_set_qos_class_fallback();
  dispatch_workloop_set_scheduler_priority();
  dispatch_activate(inactive);
  f = (void *)dispatch_mach_create_f();

  dispatch_mach_connect();

  return f;
}

void sub_100042088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40)
{
}

uint64_t sub_1000420BC(uint64_t a1)
{
  mach_port_name_t v2 = BKLogAlternateSystemApp();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 134217984;
    uint64_t v10 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "launchFailed: %p", (uint8_t *)&v9, 0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 32) invalidate];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = 0;

  uint64_t v5 = *(void *)(a1 + 32);
  unsigned int v6 = *(void **)(v5 + 24);
  *(void *)(v5 + 24) = 0;

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000421A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v6 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v7 = WeakRetained[5];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100042260;
    v8[3] = &unk_1000F8E50;
    void v8[4] = WeakRetained;
    id v9 = v4;
    dispatch_async(v7, v8);
  }
}

id sub_100042260(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _noteExitedWithContext:*(void *)(a1 + 40)];
}

id sub_100042300(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) appendObject:*(void *)(*(void *)(a1 + 40) + 8) withName:@"bundleID"];
  return [*(id *)(a1 + 32) appendObject:*(void *)(*(void *)(a1 + 40) + 16) withName:@"options" skipIfNil:1];
}

id sub_100042658(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) appendBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 36) withName:@"visible"];
  return [*(id *)(a1 + 32) appendObject:*(void *)(*(void *)(a1 + 40) + 8) withName:@"descriptor"];
}

id sub_100042A00(uint64_t a1)
{
  if ([*(id *)(a1 + 32) animates]) {
    [*(id *)(a1 + 32) _stopAnimating];
  }
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 _dismissWithAnimationSettings:v3];
}

id sub_100042C64(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _freeze];
}

void sub_100042E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100042E40(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) _presentWithAnimationSettings:*(void *)(a1 + 40)];
  id result = [*(id *)(a1 + 32) animates];
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    return _[v3 _startAnimating];
  }
  return result;
}

id sub_100042F20(uint64_t a1)
{
  int v1 = *(unsigned char **)(a1 + 32);
  if (v1[38]) {
    return _[v1 _startAnimating];
  }
  else {
    return [v1 _stopAnimating];
  }
}

void sub_1000439B8(int a1, float a2)
{
  kdebug_trace();
  if (a1)
  {
    id v4 = BKLogBacklight();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 134217984;
      double v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Update last requested backlight factor: %g permanently:YES", (uint8_t *)&v11, 0xCu);
    }

    os_unfair_lock_lock(&stru_100122E80);
    dword_100122E84 = LODWORD(a2);
    os_unfair_lock_unlock(&stru_100122E80);
    BOOL v5 = a2 < 1.0 && _AXSVoiceOverTouchEnabled() == 0;
    os_unfair_lock_lock(&stru_100122E80);
    if (!v5 || qword_100122E70)
    {
      if (qword_100122E70) {
        char v10 = v5;
      }
      else {
        char v10 = 1;
      }
      if (v10) {
        goto LABEL_16;
      }
      [(id)qword_100122E70 invalidate];
      uint64_t v7 = (void *)qword_100122E70;
      qword_100122E70 = 0;
    }
    else
    {
      unsigned int v6 = +[BKHIDEventProcessorRegistry sharedInstance];
      uint64_t v7 = [v6 eventProcessorOfClass:objc_opt_class()];

      uint64_t v8 = [v7 cancelAndSuppressTouchesOnDisplay:0 reason:@"backlight dim/off"];
      id v9 = (void *)qword_100122E70;
      qword_100122E70 = v8;
    }
LABEL_16:
    os_unfair_lock_unlock(&stru_100122E80);
  }
}

void sub_100043B84(int a1, int a2, char a3, float a4, float a5)
{
  float v10 = fminf(a4, 1.0);
  if (v10 >= 0.0) {
    float v11 = v10;
  }
  else {
    float v11 = 0.0;
  }
  double v12 = BKLogBacklight();
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (a1)
  {
    if (v13)
    {
      *(_DWORD *)int buf = 134218240;
      double v25 = v11;
      __int16 v26 = 2048;
      double v27 = a5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setting CoreBrightness backlight factor:%f with fade duration:%f", buf, 0x16u);
    }

    id v14 = (id)qword_100122E78;
    if (a5 <= 0.0)
    {
      *(float *)&double v15 = v11;
      double v12 = +[NSNumber numberWithFloat:v15];
      CFStringRef v18 = @"DisplayBrightnessFactor";
    }
    else
    {
      *(float *)&double v15 = a5;
      id v16 = +[NSNumber numberWithFloat:v15];
      [v14 setProperty:v16 forKey:@"DisplayBrightnessFadePeriod"];

      *(float *)&double v17 = v11;
      double v12 = +[NSNumber numberWithFloat:v17];
      CFStringRef v18 = @"DisplayBrightnessFactorWithFade";
    }
    [v14 setProperty:v12 forKey:v18];
  }
  else if (v13)
  {
    *(_DWORD *)int buf = 134218240;
    double v25 = v11;
    __int16 v26 = 2048;
    double v27 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Notifying (but not setting) CoreBrightness backlight factor:%f with fade duration:%f", buf, 0x16u);
  }

  if (dword_100121798 == -1) {
    notify_register_check("com.apple.backboardd.backlight.changed", &dword_100121798);
  }
  sub_1000439B8(a2, v11);
  if (dword_100121798 != -1 && (a3 & 1) == 0)
  {
    if (a4 <= 0.9) {
      int64_t v19 = (uint64_t)(float)(a5 * 1000000000.0);
    }
    else {
      int64_t v19 = 0;
    }
    dispatch_time_t v20 = dispatch_time(0, v19);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100043E30;
    block[3] = &unk_1000F7D08;
    float v22 = v11;
    float v23 = a4;
    dispatch_after(v20, (dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_100043E30(uint64_t a1)
{
  os_unfair_lock_lock(&stru_100122E80);
  float v2 = *(float *)&dword_100122E84;
  os_unfair_lock_unlock(&stru_100122E80);
  if (v2 == *(float *)(a1 + 32))
  {
    notify_set_state(dword_100121798, (int)(float)(*(float *)(a1 + 36) * 100.0) & ~((int)(float)(*(float *)(a1 + 36) * 100.0) >> 31));
    notify_post("com.apple.backboardd.backlight.changed");
  }
}

void sub_100044908(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 9))
  {
    [*(id *)(v1 + 16) removeAnnotationsForKeyPath:@"hit-test-rgns"];
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id obj = *(id *)(a1 + 40);
    id v33 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (v33)
    {
      uint64_t v34 = 0;
      uint64_t v32 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v33; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v36 != v32) {
            objc_enumerationMutation(obj);
          }
          id v4 = *(void **)(*((void *)&v35 + 1) + 8 * i);
          [v4 rect];
          double v6 = v5;
          double v8 = v7;
          double v10 = v9;
          double v12 = v11;
          [v4 _exclusiveTouchNormalizedSubRectInReferenceSpace];
          double v14 = v13;
          double v16 = v15;
          double v18 = v17;
          double v20 = v19;
          long long v21 = +[BKDisplayAnnotation annotationWithRectangleSize:](BKDisplayAnnotation, "annotationWithRectangleSize:", v10, v12);
          float v22 = +[BKDisplayAnnotationLocation relativeToTopLeftOfSuper:](BKDisplayAnnotationLocation, "relativeToTopLeftOfSuper:", v6, v8);
          [v22 setDefinedInReferenceSpace:1];
          [v21 setLocation:v22];
          float v23 = +[BKDisplayAnnotationStyle colorVariationStyleWithIndex:(char *)i + v34];
          [v21 setStyleModifier:v23];

          long long v24 = +[BKDisplayAnnotation annotationWithRectangleSize:](BKDisplayAnnotation, "annotationWithRectangleSize:", v18, v20);
          double v25 = +[BKDisplayAnnotationLocation relativeToTopLeftOfSuper:](BKDisplayAnnotationLocation, "relativeToTopLeftOfSuper:", v14, v16);
          [v25 setDefinedInReferenceSpace:1];
          [v24 setLocation:v25];
          __int16 v26 = +[BKDisplayAnnotationStyle crosshatchedBackgroundStyle];
          [v24 setStyleModifier:v26];

          double v27 = *(void **)(*(void *)(a1 + 32) + 16);
          int v28 = +[NSString stringWithFormat:@"hit-test-rgns.%d.full", (char *)i + v34];
          [v27 setAnnotation:v21 forKeyPath:v28];

          id v29 = *(void **)(*(void *)(a1 + 32) + 16);
          id v30 = +[NSString stringWithFormat:@"hit-test-rgns.%d.exclusive", (char *)i + v34];
          [v29 setAnnotation:v24 forKeyPath:v30];
        }
        v34 += (uint64_t)i;
        id v33 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
      }
      while (v33);
    }
  }
}

id sub_100044C74(uint64_t a1)
{
  return [_objc_msgSend(*(id *)(a1 + 32), "_queue_touchWasSoftCanceled:", *(unsigned int *)(a1 + 40));
}

void sub_100044D00(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) _stringDescribingContextID:*(unsigned int *)(a1 + 40) clientPort:*(unsigned int *)(a1 + 44)];
  float v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  id v4 = +[NSString stringWithFormat:@"always %@", v6];
  double v5 = +[NSString stringWithFormat:@"always-ctx.%X", *(unsigned int *)(a1 + 40)];
  [v2 _queue_annotateTouch:v3 withString:v4 uniqueIdentifier:v5 fromPID:0xFFFFFFFFLL];
}

id sub_100044E44(uint64_t a1)
{
  return [_objc_msgSend(*(id *)(a1 + 32), "_queue_touchWasHardCanceled:", *(unsigned int *)(a1 + 40));
}

void sub_100044ECC(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 16);
  id v2 = [*(id *)(a1 + 32) _keyPathForTouchIdentifier:*(unsigned int *)(a1 + 40)];
  [v1 removeAnnotationsForKeyPath:v2];
}

id sub_100044FA4(uint64_t a1)
{
  [*(id *)(a1 + 32) _queue_removeAnnotationForTouch:*(unsigned int *)(a1 + 40) withUniqueIdentifier:@"touchDown"];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);

  return [v2 _queue_removeAnnotationForTouch:v3 withUniqueIdentifier:@"detached"];
}

uint64_t sub_100045078(uint64_t a1)
{
  [*(id *)(a1 + 32) _queue_setCenter:forTouchIdentifier:*(unsigned int *)(a1 + 72) :*(double *)(a1 + 40) :*(double *)(a1 + 48)];
  uint64_t result = BSFloatIsZero();
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(unsigned int *)(a1 + 72);
    double v6 = *(double *)(a1 + 56);
    double v5 = *(double *)(a1 + 64);
    return (uint64_t)[v3 _queue_updateHoverStateForTouchIdentifier:v4 z:v5 maxZ:v6];
  }
  return result;
}

void sub_100045184(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    uint64_t v2 = *(unsigned int *)(v2 + 8);
  }
  id v4 = +[NSString stringWithFormat:@"transferred to %X", v2];
  [v3 _queue_annotateTouch:v1 withUniqueString:v4];
}

id sub_100045278(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queue_annotateTouch:*(unsigned int *)(a1 + 40) withUniqueString:@"detached"];
}

void sub_100045340(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 + 8);
    uint64_t v5 = *(unsigned int *)(v3 + 12);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  id v9 = [v2 _stringDescribingContextID:v4 clientPort:v5];
  double v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(unsigned int *)(a1 + 56);
  double v8 = +[NSString stringWithFormat:@"ctx.%d", *(void *)(a1 + 48)];
  [v6 _queue_annotateTouch:v7 withString:v9 uniqueIdentifier:v8 fromPID:0xFFFFFFFFLL];
}

id sub_100045474(uint64_t a1)
{
  [*(id *)(a1 + 32) _queue_setCenter:forTouchIdentifier:*(unsigned int *)(a1 + 64) :*(double *)(a1 + 40) :*(double *)(a1 + 48)];
  [*(id *)(a1 + 32) _queue_applyBasicAnnotationTextForTouchIdentifier:*(unsigned int *)(a1 + 64) pathIndex:*(void *)(a1 + 56)];
  id result = [*(id *)(a1 + 32) _queue_annotateTouch:*(unsigned int *)(a1 + 64) withString:@"touch down" uniqueIdentifier:@"touchDown" fromPID:0xFFFFFFFFLL];
  int v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x800) != 0)
  {
    id result = [[*(id *)(a1 + 32) _queue_annotateTouch:*(unsigned int *)(a1 + 64) withUniqueString:@"from edge"];
    int v3 = *(_DWORD *)(a1 + 68);
    if ((v3 & 0x40000) == 0)
    {
LABEL_3:
      if ((v3 & 0x2000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v3 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  id result = [*(id *)(a1 + 32) _queue_annotateTouch:*(unsigned int *)(a1 + 64) withUniqueString:@"swipe-locked"];
  int v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x2000) == 0)
  {
LABEL_4:
    if ((v3 & 0x1000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  id result = [*(id *)(a1 + 32) _queue_annotateTouch:*(unsigned int *)(a1 + 64) withUniqueString:@"swipe-pending"];
  int v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x1000000) == 0)
  {
LABEL_5:
    if ((v3 & 0x4000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  id result = [*(id *)(a1 + 32) _queue_annotateTouch:*(unsigned int *)(a1 + 64) withUniqueString:@"swipe up"];
  int v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x4000000) == 0)
  {
LABEL_6:
    if ((v3 & 0x2000000) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    id result = [*(id *)(a1 + 32) _queue_annotateTouch:*(unsigned int *)(a1 + 64) withUniqueString:@"swipe down"];
    if ((*(_DWORD *)(a1 + 68) & 0x8000000) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  id result = [[*(id *)(a1 + 32) _queue_annotateTouch:*(unsigned int *)(a1 + 64) withUniqueString:@"swipe left"];
  int v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x2000000) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v3 & 0x8000000) == 0) {
    return result;
  }
LABEL_15:
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(unsigned int *)(a1 + 64);

  return [v4 _queue_annotateTouch:v5 withUniqueString:@"swipe right"];
}

id sub_10004564C(uint64_t a1)
{
  [*(id *)(a1 + 32) _queue_setCenter:*(unsigned int *)(a1 + 80) forTouchIdentifier:*(double *)(a1 + 40) *(double *)(a1 + 48)];
  [*(id *)(a1 + 32) _queue_applyBasicAnnotationTextForTouchIdentifier:*(unsigned int *)(a1 + 80) pathIndex:*(void *)(a1 + 56)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  double v4 = *(double *)(a1 + 64);
  double v5 = *(double *)(a1 + 72);

  return [_objc_msgSend(v2, "_queue_updateHoverStateForTouchIdentifier:z:maxZ:", v3, v4, v5);
}

id sub_1000458AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queue_annotateTouch:*(unsigned int *)(a1 + 56) withString:*(void *)(a1 + 40) uniqueIdentifier:*(void *)(a1 + 48) fromPID:*(unsigned int *)(a1 + 60)];
}

id sub_10004598C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queue_annotateTouch:*(unsigned int *)(a1 + 56) withString:*(void *)(a1 + 40) uniqueIdentifier:*(void *)(a1 + 48) fromPID:0xFFFFFFFFLL];
}

id sub_100045A4C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queue_annotateTouch:*(unsigned int *)(a1 + 48) withUniqueString:*(void *)(a1 + 40)];
}

void *sub_100045AD4(void *result)
{
  uint64_t v1 = result[4];
  int v2 = *((unsigned __int8 *)result + 40);
  if (*(unsigned __int8 *)(v1 + 9) != v2)
  {
    *(unsigned char *)(v1 + 9) = v2;
    if (!*((unsigned char *)result + 40)) {
      return [*(id *)(result[4] + 16) removeAnnotationsForKeyPath:@"hit-test-rgns"];
    }
  }
  return result;
}

void *sub_100045B84(void *result)
{
  uint64_t v1 = result[4];
  int v2 = *((unsigned __int8 *)result + 40);
  if (*(unsigned __int8 *)(v1 + 8) != v2)
  {
    *(unsigned char *)(v1 + 8) = v2;
    if (!*((unsigned char *)result + 40)) {
      return [*(id *)(result[4] + 16) removeAnnotationsForKeyPath:@"touch"];
    }
  }
  return result;
}

uint64_t sub_100045C68(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 9);
  return result;
}

uint64_t sub_100045D28(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

void sub_100045E44(id a1)
{
  uint64_t v1 = BSDispatchQueueCreateWithQualityOfService();
  int v2 = (void *)qword_100122E88;
  qword_100122E88 = v1;
}

id sub_100045F20(uint64_t a1)
{
  return [*(id *)(a1 + 32) appendSuccinctDescriptionToFormatter:*(void *)(a1 + 40)];
}

void sub_1000466C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000466E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000466E4(uint64_t a1)
{
  int v2 = *(void **)(a1 + 48);
}

void sub_100046730(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    *(_DWORD *)(v2 + 8) = v1;
  }
  int v3 = *(_DWORD *)(a1 + 20);
  if (v3 == 2)
  {
    double v5 = *(void **)(a1 + 8);
    if (v5) {
      double v5 = (void *)v5[2];
    }
    double v6 = v5;
    [v6 removeIndex:v1];
  }
  else
  {
    if (v3 != 1) {
      return;
    }
    double v4 = *(void **)(a1 + 8);
    if (v4) {
      double v4 = (void *)v4[2];
    }
    double v6 = v4;
    [v6 addIndex:v1];
  }
}

void sub_1000467D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5, void *a6)
{
  id v11 = a5;
  id v12 = a6;
  if (a1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v28 = [v11 countByEnumeratingWithState:&v29 objects:v37 count:16];
    if (v28)
    {
      uint64_t v13 = *(void *)v30;
      os_log_type_t type = 2 * (a4 == 0);
      uint64_t v26 = *(void *)v30;
      do
      {
        for (uint64_t i = 0; i != v28; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v30 != v13) {
            objc_enumerationMutation(v11);
          }
          uint64_t v15 = *(void *)(*((void *)&v29 + 1) + 8 * i);
          Copdouble y = (const void *)IOHIDEventCreateCopy();
          double v17 = +[BKSHIDEventBaseAttributes baseAttributesFromProvider:v15];
          BKSHIDEventSetAttributes();
          double v18 = sub_10005FA78();
          double v19 = v18;
          if (a3)
          {
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              sub_100037EE8((uint64_t)Copy);
              uint64_t v20 = a2;
              id v21 = v12;
              id v22 = v11;
              v24 = uint64_t v23 = a3;
              *(_DWORD *)int buf = 138543618;
              uint64_t v34 = (uint64_t)v24;
              __int16 v35 = 2114;
              uint64_t v36 = v15;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "out %{public}@ -> %{public}@", buf, 0x16u);

              a3 = v23;
              id v11 = v22;
              id v12 = v21;
              a2 = v20;
              uint64_t v13 = v26;
            }
          }
          else if (os_log_type_enabled(v18, type))
          {
            uint64_t TimeStamp = IOHIDEventGetTimeStamp();
            *(_DWORD *)int buf = 134218242;
            uint64_t v34 = TimeStamp;
            __int16 v35 = 2114;
            uint64_t v36 = v15;
            _os_log_impl((void *)&_mh_execute_header, v19, type, "out %llX -> %{public}@", buf, 0x16u);
          }

          [v12 postEvent:Copy toDestination:v15];
          CFRelease(Copy);
        }
        id v28 = [v11 countByEnumeratingWithState:&v29 objects:v37 count:16];
      }
      while (v28);
    }
  }
}

void sub_100046A6C(void *a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(id *)(a3 + 8);
  id v7 = v6;
  if (v6)
  {
    if (v6[2] > 3u) {
      goto LABEL_22;
    }
    double v8 = (void *)*((void *)v6 + 3);
  }
  else
  {
    double v8 = 0;
  }
  id v9 = v8;
  double v10 = [*(id *)(a3 + 48) destinationsForEvent:a2 fromSender:*(void *)(a3 + 40)];
  if (([v10 isEqual:v9] & 1) == 0 && v7)
  {
    if (*((_DWORD *)v7 + 2))
    {
      id v11 = [v9 mutableCopy];
      [v11 minusSet:v10];
      id v12 = sub_10005FA78();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = *(id *)a3;
        *(_DWORD *)int buf = 138543618;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@: removed destinations: %{public}@", buf, 0x16u);
      }

      id v45 = v11;
      id v47 = a1;
      if ([v11 count])
      {
        double v14 = *(void **)(a3 + 48);
        id v15 = v11;
        id v16 = v14;
        id v17 = *(id *)a3;
        double v18 = (id *)*(id *)(a3 + 8);
        if (!v18 || (double v19 = v18, !*((_DWORD *)v18 + 2)))
        {
          long long v37 = +[NSString stringWithFormat:@"bug: shouldn't have a record at idle stage", v45];
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            long long v38 = NSStringFromSelector("_postCancelEventToDestinations:locals:dispatcher:");
            double v39 = (objc_class *)objc_opt_class();
            double v40 = NSStringFromClass(v39);
            *(_DWORD *)int buf = 138544642;
            *(void *)&uint8_t buf[4] = v38;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v40;
            *(_WORD *)&buf[22] = 2048;
            id v49 = v47;
            LOWORD(v50) = 2114;
            *(void *)((char *)&v50 + 2) = @"BKHIDTouchSensitiveButtonEventProcessor.m";
            WORD5(v50) = 1024;
            HIDWORD(v50) = 277;
            LOWORD(v51) = 2114;
            *(void *)((char *)&v51 + 2) = v37;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
          }
          [v37 UTF8String];
          _bs_set_crash_log_message();
          __break(0);
          JUMPOUT(0x100046F30);
        }
        id v20 = v18[2];
        *(void *)int buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_1000470EC;
        id v49 = &unk_1000F6AB8;
        uint64_t v52 = a3;
        *(void *)&long long v50 = v17;
        *((void *)&v50 + 1) = v47;
        id v21 = v15;
        *(void *)&long long v51 = v21;
        id v22 = v16;
        *((void *)&v51 + 1) = v22;
        id v23 = v17;
        [v20 enumerateIndexesWithOptions:2 usingBlock:buf];

        id v11 = v45;
      }
      id v24 = [v10 mutableCopy:v45];
      [v24 minusSet:v9];
      double v25 = sub_10005FA78();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        id v26 = *(id *)a3;
        *(_DWORD *)int buf = 138543618;
        *(void *)&uint8_t buf[4] = v26;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v24;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%{public}@: added destinations: %{public}@", buf, 0x16u);
      }

      if ([v24 count])
      {
        double v27 = *(void **)(a3 + 48);
        id v28 = v24;
        id v29 = v27;
        id v30 = *(id *)a3;
        long long v31 = (id *)*(id *)(a3 + 8);
        if (!v31 || (long long v32 = v31, !*((_DWORD *)v31 + 2)))
        {
          double v41 = +[NSString stringWithFormat:@"bug: shouldn't have a record at idle stage"];
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            uint64_t v42 = NSStringFromSelector("_postEnterEventToDestinations:locals:dispatcher:");
            id v43 = (objc_class *)objc_opt_class();
            id v44 = NSStringFromClass(v43);
            *(_DWORD *)int buf = 138544642;
            *(void *)&uint8_t buf[4] = v42;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v44;
            *(_WORD *)&buf[22] = 2048;
            id v49 = v47;
            LOWORD(v50) = 2114;
            *(void *)((char *)&v50 + 2) = @"BKHIDTouchSensitiveButtonEventProcessor.m";
            WORD5(v50) = 1024;
            HIDWORD(v50) = 262;
            LOWORD(v51) = 2114;
            *(void *)((char *)&v51 + 2) = v41;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
          }
          [v41 UTF8String];
          _bs_set_crash_log_message();
          __break(0);
          JUMPOUT(0x100047024);
        }
        id v33 = v31[2];
        *(void *)int buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_100047034;
        id v49 = &unk_1000F6AB8;
        uint64_t v52 = a3;
        *(void *)&long long v50 = v30;
        *((void *)&v50 + 1) = v47;
        id v34 = v28;
        *(void *)&long long v51 = v34;
        id v35 = v29;
        *((void *)&v51 + 1) = v35;
        id v36 = v30;
        [v33 enumerateIndexesUsingBlock:buf];

        id v11 = v46;
      }
    }
    objc_storeStrong((id *)v7 + 3, v10);
  }

LABEL_22:
}

void sub_100047034(uint64_t a1)
{
  mach_absolute_time();
  uint64_t v2 = (const void *)sub_10003783C();
  sub_1000467D8(*(void *)(a1 + 40), (uint64_t)v2, 1, *(_DWORD *)(*(void *)(a1 + 64) + 20), *(void **)(a1 + 48), *(void **)(a1 + 56));

  CFRelease(v2);
}

void sub_1000470EC(uint64_t a1)
{
  mach_absolute_time();
  uint64_t v2 = (const void *)sub_10003783C();
  IOHIDEventSetPhase();
  sub_1000467D8(*(void *)(a1 + 40), (uint64_t)v2, 1, *(_DWORD *)(*(void *)(a1 + 64) + 20), *(void **)(a1 + 48), *(void **)(a1 + 56));

  CFRelease(v2);
}

void sub_10004759C(uint64_t a1)
{
  id v2 = +[BKGSEventSystem sharedInstance];
  [v2 _handleEvent:a1];
}

void sub_100047694(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_100122E98;
  qword_100122E98 = (uint64_t)v1;
}

void sub_100047A38(uint64_t a1)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    if (*(void *)(a1 + 56))
    {
      id v2 = BKLogUISensor();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v14) = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Estimated prox shutting off", (uint8_t *)&v14, 2u);
      }

      int v3 = *(id *)(a1 + 56);
      double v4 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = 0;

      if (([*(id *)(a1 + 64) estimatedProximityMode] & 1) == 0)
      {
        double v10 = +[NSString stringWithFormat:@"we shouldn't be here if the current mode isn't estimatedProx"];
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          id v11 = NSStringFromSelector("_locked_cancelEstimatedProximityEventShutoffTimerAndResetMode:");
          id v12 = (objc_class *)objc_opt_class();
          id v13 = NSStringFromClass(v12);
          int v14 = 138544642;
          id v15 = v11;
          __int16 v16 = 2114;
          id v17 = v13;
          __int16 v18 = 2048;
          uint64_t v19 = a1;
          __int16 v20 = 2114;
          CFStringRef v21 = @"BKHIDUISensorController.m";
          __int16 v22 = 1024;
          int v23 = 372;
          __int16 v24 = 2114;
          double v25 = v10;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", (uint8_t *)&v14, 0x3Au);
        }
        [v10 UTF8String];
        _bs_set_crash_log_message();
        __break(0);
        JUMPOUT(0x100047CCCLL);
      }
      id v5 = [*(id *)(a1 + 64) versionedPID];
      uint64_t v6 = sub_100047CD4(a1, v5, 0);
      id v7 = (void *)v6;
      if (!v6
        || (objc_storeStrong((id *)(v6 + 8), *(id *)(v6 + 16)), double v8 = (void *)v7[2],
                                                                void v7[2] = 0,
                                                                v8,
                                                                !v7[1]))
      {
        sub_100047E9C(a1, v5);
      }
      sub_100047F64(a1, *(void **)(a1 + 64));

      if ([(id)a1 estimatedProxPowerAssertionID])
      {
        id v9 = BKLogUISensor();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v14) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Releasing estimated prox power assertion", (uint8_t *)&v14, 2u);
        }

        IOPMAssertionRelease(*(_DWORD *)(a1 + 12));
        [(id)a1 setEstimatedProxPowerAssertionID:0];
      }
      dispatch_source_cancel(v3);
    }
  }
}

id sub_100047CD4(uint64_t a1, void *a2, int a3)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  uint64_t v6 = *(void **)(a1 + 24);
  id v7 = +[NSNumber numberWithLongLong:a2];
  double v8 = [v6 objectForKeyedSubscript:v7];

  if (v8) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = a3 == 0;
  }
  if (!v9)
  {
    objc_initWeak(&location, (id)a1);
    id v10 = objc_alloc((Class)BSProcessDeathWatcher);
    id v11 = &_dispatch_main_q;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1000482C8;
    v17[3] = &unk_1000F8B58;
    objc_copyWeak(v18, &location);
    v18[1] = a2;
    id v12 = [v10 initWithPID:a2 queue:&_dispatch_main_q deathHandler:v17];

    id v13 = objc_alloc_init(BKUISensorClient);
    double v8 = v13;
    if (v13) {
      objc_storeStrong((id *)&v13->_deathWatcher, v12);
    }
    int v14 = *(void **)(a1 + 24);
    id v15 = +[NSNumber numberWithLongLong:a2];
    [v14 setObject:v8 forKeyedSubscript:v15];

    objc_destroyWeak(v18);
    objc_destroyWeak(&location);
  }

  return v8;
}

void sub_100047E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100047E9C(uint64_t a1, id a2)
{
  if (a1)
  {
    double v4 = (const os_unfair_lock *)(a1 + 8);
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    id v7 = *(id *)(a1 + 64);
    if ([v7 versionedPID] == a2 && objc_msgSend(v7, "estimatedProximityMode"))
    {
      os_unfair_lock_assert_owner(v4);
      sub_100047A38(a1);
    }
    id v5 = *(void **)(a1 + 24);
    uint64_t v6 = +[NSNumber numberWithLongLong:a2];
    [v5 removeObjectForKey:v6];

    sub_100047F64(a1, v7);
  }
}

void sub_100047F64(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = [*(id *)(a1 + 24) allValues];
  id v5 = [v4 bs_compactMap:&stru_1000F6B78];

  uint64_t v6 = +[BKSHIDUISensorMode _prevailingMode:v5];
  id v7 = (void *)v6;
  if (v3 && v6 && [v3 isEffectivelyEqualToMode:v6])
  {
    double v8 = BKLogUISensor();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v9 = +[BSDescriptionStream descriptionForRootObject:v5];
      *(_DWORD *)int buf = 138543618;
      double v27 = v7;
      __int16 v28 = 2114;
      id v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "UISensor mode changing to: %{public}@ (no-op) -- all modes:%{public}@", buf, 0x16u);
    }
    id v10 = v7;
    id v11 = *(NSObject **)(a1 + 64);
    *(void *)(a1 + 64) = v10;
  }
  else
  {
    if (([v3 estimatedProximityMode] & 1) == 0)
    {
      os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
      sub_100047A38(a1);
    }
    id v12 = [v5 count];
    id v13 = BKLogUISensor();
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v12 == (id)1)
    {
      if (v14)
      {
        *(_DWORD *)int buf = 138543362;
        double v27 = v7;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "UISensor mode changing to: %{public}@ (no other requested modes)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      id v15 = +[BSDescriptionStream descriptionForRootObject:v5];
      *(_DWORD *)int buf = 138543618;
      double v27 = v7;
      __int16 v28 = 2114;
      id v29 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "UISensor mode changing to: %{public}@ (all requested modes: %{public}@)", buf, 0x16u);
    }
    if (v7)
    {
      objc_storeStrong((id *)(a1 + 64), v7);
      [*(id *)(a1 + 16) applyUIMode:v7];
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      id v11 = [*(id *)(a1 + 32) context];
      id v16 = [v11 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v16)
      {
        id v17 = v16;
        uint64_t v18 = *(void *)v22;
        do
        {
          for (uint64_t i = 0; i != v17; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v22 != v18) {
              objc_enumerationMutation(v11);
            }
            [*(id *)(*((void *)&v21 + 1) + 8 * i) sensorModeDidChange:v7];
          }
          id v17 = [v11 countByEnumeratingWithState:&v21 objects:v25 count:16];
        }
        while (v17);
      }
    }
    else
    {
      id v11 = BKLogUISensor();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        __int16 v20 = *(void **)(a1 + 64);
        *(_DWORD *)int buf = 138543362;
        double v27 = v20;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "got a nil new prevailing mode -- leaving previous prevailing mode: %{public}@", buf, 0xCu);
      }
    }
  }
}

id sub_1000482B4(id a1, BKUISensorClient *a2)
{
  if (a2) {
    return a2->_mode;
  }
  else {
    return 0;
  }
}

void sub_1000482C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained removeModesForVersionedPID:*(void *)(a1 + 40)];
    id WeakRetained = v3;
  }
}

void sub_1000485DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v8 = v3;
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    if (!*(void *)(a1 + 24))
    {
      id v4 = objc_alloc_init((Class)NSMutableDictionary);
      id v5 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v4;
    }
    id v6 = [v8 versionedPID];
    if ([*(id *)(a1 + 64) estimatedProximityMode]
      && [*(id *)(a1 + 64) versionedPID] == v6)
    {
      os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
      sub_100047A38(a1);
    }
    id v7 = sub_100047CD4(a1, v6, 0);
    if (!v7)
    {
      id v7 = sub_100047CD4(a1, v6, 1);
    }
    sub_1000486EC((uint64_t)v7, v8);
    sub_1000486FC((uint64_t)v7, 0);
    sub_100047F64(a1, *(void **)(a1 + 64));

    id v3 = v8;
  }
}

void sub_1000486EC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_1000486FC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void sub_100048C58(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = a2;
  [v5 setVersionedPID:v3];
  [v5 setProximityDetectionMode:5];
  id v4 = [*(id *)(a1 + 32) multitouchHostStateKeys];
  [v5 setMultitouchHostStateKeys:v4];

  [v5 setChangeSource:[*(id *)(a1 + 32) changeSource]];
  [v5 setEstimatedProximityMode:1];
}

void sub_100048CF4(uint64_t a1)
{
  os_unfair_lock_assert_not_owner((const os_unfair_lock *)(*(void *)(a1 + 32) + 8));
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id v2 = BKLogUISensor();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Estimated prox shutoff timer fired", v4, 2u);
  }

  uint64_t v3 = *(const os_unfair_lock **)(a1 + 32);
  if (v3)
  {
    os_unfair_lock_assert_owner(v3 + 2);
    sub_100047A38((uint64_t)v3);
  }
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
}

void sub_100048DA4(uint64_t a1)
{
  os_unfair_lock_assert_not_owner((const os_unfair_lock *)(*(void *)(a1 + 32) + 8));
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id v2 = *(const os_unfair_lock **)(a1 + 32);
  if (v2)
  {
    os_unfair_lock_assert_owner(v2 + 2);
    sub_100047A38((uint64_t)v2);
    uint64_t v3 = *(os_unfair_lock_s **)(a1 + 32);
  }
  else
  {
    uint64_t v3 = 0;
  }

  os_unfair_lock_unlock(v3 + 2);
}

void sub_100048FF4(uint64_t a1)
{
  id v1 = [*(id *)(*(void *)(a1 + 32) + 48) propertyForKey:@"ALSRequiresProx"];
  uint64_t v2 = objc_opt_class();
  id v3 = v1;
  if (v2)
  {
    if (objc_opt_isKindOfClass()) {
      id v4 = v3;
    }
    else {
      id v4 = 0;
    }
  }
  else
  {
    id v4 = 0;
  }
  id v5 = v4;

  int v6 = 4;
  if (v5)
  {
    if ([v5 BOOLValue]) {
      int v6 = 1;
    }
    else {
      int v6 = 4;
    }
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10004910C;
  void v9[3] = &unk_1000F6B38;
  int v10 = v6;
  uint64_t v7 = +[BKSHIDUISensorMode buildModeForReason:@"backboardd baseline" builder:v9];
  id v8 = (void *)qword_100122EC0;
  qword_100122EC0 = v7;
}

void sub_10004910C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  id v3 = a2;
  [v3 setProximityDetectionMode:v2];
  [v3 setDigitizerEnabled:1];
}

void sub_100049334(id a1, BKSMutableHIDUISensorMode *a2)
{
}

void sub_100049394(id a1)
{
  id v5 = +[BKHIDUISensorConfiguratorFactory sensorConfiguratorForCurrentPlatform];
  id v1 = [BKHIDUISensorController alloc];
  uint64_t v2 = +[BKDisplayBrightnessController sharedInstance];
  id v3 = [(BKHIDUISensorController *)v1 initWithSensorConfiguration:v5 displayBrightnessController:v2];
  id v4 = (void *)qword_100122EB0;
  qword_100122EB0 = (uint64_t)v3;
}

id sub_100049A64(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processDidTerminate:*(void *)(a1 + 40)];
}

void sub_100049B44(id a1)
{
  id v1 = objc_alloc_init(BKSecurityManager);
  uint64_t v2 = (void *)qword_100122EC8;
  qword_100122EC8 = (uint64_t)v1;
}

void sub_100049C20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) || *(void *)(v2 + 16))
  {
    id v3 = *(void **)(a1 + 40);
    id v4 = NSStringFromBSVersionedPID();
    [v3 appendString:v4 withName:@"pid"];

    CFStringRef v5 = *(const __CFString **)(*(void *)(a1 + 32) + 16);
    if (!v5) {
      goto LABEL_7;
    }
    int v6 = *(void **)(a1 + 40);
    CFStringRef v7 = @"displayUUID";
  }
  else
  {
    int v6 = *(void **)(a1 + 40);
    CFStringRef v5 = @"default";
    CFStringRef v7 = 0;
  }
  [v6 appendString:v5 withName:v7];
LABEL_7:
  id v8 = *(void **)(a1 + 40);
  NSStringFromBKSDisplayServicesCloneMirroringMode();
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  [v8 appendString:v9 withName:@"mode"];
}

void sub_10004A040(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(unsigned int *)(a1 + 40);
    id v3 = (os_unfair_lock_s *)(v1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 8));
    id v4 = BKLogDisplay();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 67109120;
      v12[1] = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "clone mirror remove all for pid %d", (uint8_t *)v12, 8u);
    }

    CFStringRef v5 = +[NSNumber numberWithInt:v2];
    int v6 = [*(id *)(v1 + 32) objectForKey:v5];
    CFStringRef v7 = v6;
    if (v6)
    {
      id v8 = *(void **)(v1 + 40);
      id v9 = [v6 allValues];
      [v8 removeObjectsInArray:v9];

      [*(id *)(v1 + 32) removeObjectForKey:v5];
    }
    int v10 = [*(id *)(v1 + 48) objectForKey:v5];
    [v10 invalidate];

    [*(id *)(v1 + 48) removeObjectForKey:v5];
    [v1 _lock_rebuildModeCache];
    id WeakRetained = objc_loadWeakRetained((id *)(v1 + 16));
    os_unfair_lock_unlock(v3);
    [WeakRetained cloneMirroringRequestsDidChange];
  }
}

void sub_10004A1C0(id a1)
{
  uint64_t v1 = objc_alloc_init(BKDisplayCloneMirrorRequestClient);
  uint64_t v2 = (void *)qword_100122ED8;
  qword_100122ED8 = (uint64_t)v1;

  if (qword_100122ED8) {
    *(void *)(qword_100122ED8 + 24) = 0;
  }
}

void sub_10004BDDC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setDetectionMask:*(unsigned int *)(a1 + 40)];
  [v4 setMode:*(unsigned int *)(a1 + 44)];
}

id sub_10004C2E8(uint64_t a1)
{
  CFStringRef v4 = @"objectInProximity";
  uint64_t v1 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 32)];
  CFStringRef v5 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return v2;
}

void sub_10004C7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004C804(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10004CA4C;
  v4[3] = &unk_1000F82D8;
  objc_copyWeak(&v5, (id *)(a1 + 32));
  [v3 logBlock:v4 domain:@"com.apple.backboard.hid.proximity"];
  objc_destroyWeak(&v5);
}

void sub_10004C8B0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10004C8C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10004C984;
  v4[3] = &unk_1000F82D8;
  objc_copyWeak(&v5, (id *)(a1 + 32));
  [v3 logBlock:v4 domain:@"com.apple.backboard.hid.proximity"];
  objc_destroyWeak(&v5);
}

void sub_10004C970(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_10004C984(uint64_t a1)
{
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  CFStringRef v5 = @"objectInProximity";
  uint64_t v2 = +[NSNumber numberWithBool:WeakRetained[27]];
  int v6 = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];

  return v3;
}

id sub_10004CA4C(uint64_t a1)
{
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  CFStringRef v5 = @"objectInProximity";
  uint64_t v2 = +[NSNumber numberWithBool:WeakRetained[27]];
  int v6 = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];

  return v3;
}

void sub_10004CB14(id a1, BKSMutableProximityEvent *a2)
{
  uint64_t v2 = a2;
  [(BKSMutableProximityEvent *)v2 setMode:0];
  [(BKSMutableProximityEvent *)v2 setDetectionMask:0];
  [(BKSMutableProximityEvent *)v2 setTimestamp:mach_absolute_time()];
}

void sub_10004CC68(void *a1, uint64_t a2)
{
  id v98 = a1;
  id v3 = @"FromHID";
  uint64_t v95 = a2;
  sub_100012860(v105, a2);
  sub_100018934((unint64_t)v105);
  if (v106)
  {
    uint64_t IntegerValue = IOHIDEventGetIntegerValue();
    double v96 = +[NSMutableDictionary dictionary];
    cf = IOHIDEventCreateData();
    CFStringRef v5 = [cf base64EncodedStringWithOptions:16];
    [v96 setObject:v5 forKeyedSubscript:@"RawCollectionData"];

    CFRelease(cf);
    [v96 setObject:@"FromHID" forKeyedSubscript:@"description"];
    int v6 = +[NSNumber numberWithUnsignedInt:IOHIDEventGetType()];
    [v96 setObject:v6 forKeyedSubscript:@"type"];

    CFStringRef v7 = +[NSNumber numberWithInteger:v106];
    [v96 setObject:v7 forKeyedSubscript:@"pathCount"];

    id v8 = v98;
    if (v98) {
      id v8 = (id **)v98[1];
    }
    id v9 = v8;
    int v10 = [v9 displayUUID];
    [v96 setObject:v10 forKeyedSubscript:@"displayUUID"];

    id v11 = +[NSNumber numberWithLong:IntegerValue];
    [v96 setObject:v11 forKeyedSubscript:@"generation"];

    id v12 = +[NSNumber numberWithUnsignedLongLong:IOHIDEventGetTimeStamp()];
    [v96 setObject:v12 forKeyedSubscript:@"timestamp"];

    id v13 = +[NSNumber numberWithUnsignedLongLong:IOHIDEventGetSenderID()];
    [v96 setObject:v13 forKeyedSubscript:@"senderID"];

    BOOL v14 = +[NSNumber numberWithUnsignedInt:IOHIDEventGetEventFlags()];
    [v96 setObject:v14 forKeyedSubscript:@"flags"];

    uint64_t v15 = IOHIDEventGetIntegerValue();
    id v16 = +[NSNumber numberWithUnsignedInt:v15];
    [v96 setObject:v16 forKeyedSubscript:@"transducerType"];

    if (v15 > 3) {
      CFStringRef v17 = &stru_1000FD108;
    }
    else {
      CFStringRef v17 = *(&off_1000F6CA8 + (int)v15);
    }
    [v96 setObject:v17 forKeyedSubscript:@"transducerTypeName"];
    uint64_t v18 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
    [v96 setObject:v18 forKeyedSubscript:@"transducerIndex"];

    uint64_t v19 = IOHIDEventGetIntegerValue();
    LODWORD(v18) = v19;
    __int16 v20 = +[NSNumber numberWithUnsignedInt:v19];
    [v96 setObject:v20 forKeyedSubscript:@"eventMask"];

    long long v21 = sub_10004E214((int)v18);
    [v96 setObject:v21 forKeyedSubscript:@"eventMaskName"];

    long long v22 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
    [v96 setObject:v22 forKeyedSubscript:@"buttonMask"];

    long long v23 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
    [v96 setObject:v23 forKeyedSubscript:@"touch"];

    long long v24 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
    [v96 setObject:v24 forKeyedSubscript:@"range"];

    IOHIDEventGetFloatValue();
    double v25 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [v96 setObject:v25 forKeyedSubscript:@"pressure"];

    IOHIDEventGetFloatValue();
    id v26 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [v96 setObject:v26 forKeyedSubscript:@"auxilliaryPressure"];

    IOHIDEventGetFloatValue();
    double v27 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [v96 setObject:v27 forKeyedSubscript:@"twist"];

    __int16 v28 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
    [v96 setObject:v28 forKeyedSubscript:@"generationCount"];

    id v29 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
    [v96 setObject:v29 forKeyedSubscript:@"willUpdateMask"];

    id v30 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
    [v96 setObject:v30 forKeyedSubscript:@"didUpdateMask"];

    v117[0] = @"x";
    IOHIDEventGetFloatValue();
    long long v31 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    v118[0] = v31;
    v117[1] = @"y";
    IOHIDEventGetFloatValue();
    long long v32 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    v118[1] = v32;
    v117[2] = @"z";
    IOHIDEventGetFloatValue();
    id v33 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    v118[2] = v33;
    id v34 = +[NSDictionary dictionaryWithObjects:v118 forKeys:v117 count:3];
    [v96 setObject:v34 forKeyedSubscript:@"location"];

    v115[0] = @"x";
    IOHIDEventGetFloatValue();
    id v35 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    v115[1] = @"y";
    v116[0] = v35;
    IOHIDEventGetFloatValue();
    id v36 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    v116[1] = v36;
    long long v37 = +[NSDictionary dictionaryWithObjects:v116 forKeys:v115 count:2];
    [v96 setObject:v37 forKeyedSubscript:@"tilt"];

    id v97 = +[NSMutableArray array];
    [v96 setObject:forKeyedSubscript:];
    sub_100012860((const __CFArray **)v103, v95);
    sub_100018934((unint64_t)v103);
    long long v99 = v103[0];
    long long v100 = v103[1];
    long long v101 = v103[2];
    uint64_t v102 = v104;
    while (*((void *)&v100 + 1))
    {
      uint64_t v38 = v101;
      *((void *)&v101 + 1) = *((void *)&v100 + 1);
      uint64_t v102 = v101;
      double v39 = +[NSMutableDictionary dictionary];
      [v97 addObject:v39];
      double v40 = +[NSNumber numberWithInteger:v38];
      [v39 setObject:v40 forKeyedSubscript:@"pathIndex"];

      double v41 = +[NSNumber numberWithUnsignedInt:IOHIDEventGetType()];
      [v39 setObject:v41 forKeyedSubscript:@"type"];

      sub_100018B1C(v98[14], v38);
      uint64_t v42 = (unsigned int *)objc_claimAutoreleasedReturnValue();
      if (v42) {
        uint64_t v43 = v42[4];
      }
      else {
        uint64_t v43 = 0;
      }

      id v44 = +[NSNumber numberWithUnsignedInt:v43];
      [v39 setObject:v44 forKeyedSubscript:@"touchID"];

      id v45 = +[NSNumber numberWithUnsignedInt:IOHIDEventGetEventFlags()];
      [v39 setObject:v45 forKeyedSubscript:@"flags"];

      id v46 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
      [v39 setObject:v46 forKeyedSubscript:@"identity"];

      uint64_t v47 = IOHIDEventGetIntegerValue();
      id v48 = +[NSNumber numberWithUnsignedInt:v47];
      [v39 setObject:v48 forKeyedSubscript:@"transducerType"];

      CFStringRef v49 = &stru_1000FD108;
      if (v47 <= 3) {
        CFStringRef v49 = *(&off_1000F6CA8 + (int)v47);
      }
      [v39 setObject:v49 forKeyedSubscript:@"transducerTypeName"];
      long long v50 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
      [v39 setObject:v50 forKeyedSubscript:@"transducerIndex"];

      uint64_t v51 = IOHIDEventGetIntegerValue();
      LODWORD(v50) = v51;
      uint64_t v52 = +[NSNumber numberWithUnsignedInt:v51];
      [v39 setObject:v52 forKeyedSubscript:@"eventMask"];

      uint64_t v53 = sub_10004E214((int)v50);
      [v39 setObject:v53 forKeyedSubscript:@"eventMaskName"];

      uint64_t v54 = IOHIDEventGetIntegerValue();
      if (v54)
      {
        uint64_t v55 = +[NSNumber numberWithLong:v54];
        [v39 setObject:v55 forKeyedSubscript:@"generation"];

        long long v56 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
        [v39 setObject:v56 forKeyedSubscript:@"willUpdateMask"];

        long long v57 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
        [v39 setObject:v57 forKeyedSubscript:@"didUpdateMask"];
      }
      long long v58 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
      [v39 setObject:v58 forKeyedSubscript:@"buttonMask"];

      double v59 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
      [v39 setObject:v59 forKeyedSubscript:@"touch"];

      __int16 v60 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
      [v39 setObject:v60 forKeyedSubscript:@"range"];

      IOHIDEventGetFloatValue();
      id v61 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      [v39 setObject:v61 forKeyedSubscript:@"pressure"];

      IOHIDEventGetFloatValue();
      NSSize v62 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      [v39 setObject:v62 forKeyedSubscript:@"auxilliaryPressure"];

      IOHIDEventGetFloatValue();
      id v63 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      [v39 setObject:v63 forKeyedSubscript:@"twist"];

      id v64 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
      [v39 setObject:v64 forKeyedSubscript:@"generationCount"];

      double v65 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
      [v39 setObject:v65 forKeyedSubscript:@"willUpdateMask"];

      uint64_t v66 = +[NSNumber numberWithLong:IOHIDEventGetIntegerValue()];
      [v39 setObject:v66 forKeyedSubscript:@"didUpdateMask"];

      v113[0] = @"x";
      IOHIDEventGetFloatValue();
      uint64_t v67 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      v114[0] = v67;
      v113[1] = @"y";
      IOHIDEventGetFloatValue();
      uint64_t v68 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      v114[1] = v68;
      v113[2] = @"z";
      IOHIDEventGetFloatValue();
      uint64_t v69 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      v114[2] = v69;
      uint64_t v70 = +[NSDictionary dictionaryWithObjects:v114 forKeys:v113 count:3];
      [v39 setObject:v70 forKeyedSubscript:@"location"];

      IOHIDEventGetFloatValue();
      uint64_t v71 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      [v39 setObject:v71 forKeyedSubscript:@"quality"];

      IOHIDEventGetFloatValue();
      int v72 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      [v39 setObject:v72 forKeyedSubscript:@"density"];

      IOHIDEventGetFloatValue();
      char v73 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      [v39 setObject:v73 forKeyedSubscript:@"irregularity"];

      IOHIDEventGetFloatValue();
      char v74 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      [v39 setObject:v74 forKeyedSubscript:@"majorRadius"];

      IOHIDEventGetFloatValue();
      char v75 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      [v39 setObject:v75 forKeyedSubscript:@"minorRadius"];

      IOHIDEventGetFloatValue();
      id v76 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      [v39 setObject:v76 forKeyedSubscript:@"accuracy"];

      IOHIDEventGetFloatValue();
      double v78 = v77;
      IOHIDEventGetFloatValue();
      double v80 = v79;
      v111[0] = @"precise";
      v109[0] = @"x";
      double v81 = +[NSNumber numberWithDouble:v78];
      v109[1] = @"y";
      v110[0] = v81;
      double v82 = +[NSNumber numberWithDouble:v80];
      v110[1] = v82;
      CFStringRef v83 = +[NSDictionary dictionaryWithObjects:v110 forKeys:v109 count:2];
      v112[0] = v83;
      v111[1] = @"rounded";
      v107[0] = @"x";
      double v84 = +[NSNumber numberWithDouble:v78];
      v107[1] = @"y";
      v108[0] = v84;
      uint64_t v85 = +[NSNumber numberWithDouble:v80];
      v108[1] = v85;
      double v86 = +[NSDictionary dictionaryWithObjects:v108 forKeys:v107 count:2];
      v112[1] = v86;
      double v87 = +[NSDictionary dictionaryWithObjects:v112 forKeys:v111 count:2];
      [v39 setObject:v87 forKeyedSubscript:@"digitizerPoints"];

      sub_100018934((unint64_t)&v99);
    }
    id v88 = BKSHIDEventGetDigitizerAttributes();
    id v89 = [v88 systemGestureStateChange];
    unint64_t v90 = IOHIDEventGetIntegerValue();
    float v91 = +[NSNumber numberWithBool:v89];
    [v96 setObject:v91 forKeyedSubscript:@"systemGesturesPossible"];

    double v92 = +[NSNumber numberWithBool:(v90 >> 7) & 1];
    [v96 setObject:v92 forKeyedSubscript:@"isCancelling"];

    double v93 = +[SLGLog sharedInstance];
    [v93 log:v96];
  }
}

void sub_10004DE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_10004E214(int a1)
{
  uint64_t v2 = +[NSMutableArray array];
  id v3 = v2;
  if ((a1 & 0x20000) != 0) {
    [v2 addObject:@"Tap"];
  }
  if ((a1 & 0x10) != 0) {
    [v3 addObject:@"Peak"];
  }
  if ((a1 & 8) != 0) {
    [v3 addObject:@"Stop"];
  }
  if (a1) {
    [v3 addObject:@"Range"];
  }
  if ((a1 & 0x100) != 0) {
    [v3 addObject:@"Start"];
  }
  if ((a1 & 2) != 0) {
    [v3 addObject:@"Touch"];
  }
  if ((a1 & 0x80) != 0) {
    [v3 addObject:@"Cancel"];
  }
  if ((a1 & 0x200) != 0) {
    [v3 addObject:@"Resting"];
  }
  if ((a1 & 0x1000000) != 0) {
    [v3 addObject:@"SwipeUp"];
  }
  if ((a1 & 0x2000000) != 0) {
    [v3 addObject:@"SwipeDown"];
  }
  if ((a1 & 0x4000000) != 0) {
    [v3 addObject:@"SwipeLeft"];
  }
  if ((a1 & 0x8000000) != 0) {
    [v3 addObject:@"SwipeRight"];
  }
  if ((a1 & 0x40000) != 0) {
    [v3 addObject:@"SwipeLocked"];
  }
  if ((a1 & 0x2000) != 0) {
    [v3 addObject:@"SwipePending"];
  }
  if ((a1 & 0x20) != 0) {
    [v3 addObject:@"Identity"];
  }
  if ((a1 & 4) != 0) {
    [v3 addObject:@"Position"];
  }
  if ((a1 & 0x40) != 0) {
    [v3 addObject:@"Attribute"];
  }
  if ((a1 & 0x1000) != 0) {
    [v3 addObject:@"FromCorner"];
  }
  if ((a1 & 0x800) != 0) {
    [v3 addObject:@"FromEdgeTip"];
  }
  if ((a1 & 0x400) != 0) {
    [v3 addObject:@"FromEdgeFlat"];
  }
  if ((a1 & 0x8000) != 0) {
    [v3 addObject:@"FromEdgeForceActive"];
  }
  if ((a1 & 0x4000) != 0) {
    [v3 addObject:@"FromEdgeForcePending"];
  }
  if ((a1 & 0x20000000) != 0) {
    [v3 addObject:@"EstimatedAzimuth"];
  }
  if ((a1 & 0x10000000) != 0) {
    [v3 addObject:@"EstimatedAltitude"];
  }
  if ((a1 & 0x40000000) != 0) {
    [v3 addObject:@"EstimatedPressure"];
  }
  CFStringRef v4 = [v3 componentsJoinedByString:@" "];

  return v4;
}

void sub_10004E46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004F120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004F144(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004F154(uint64_t a1)
{
}

id sub_10004F15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    id v3 = *(void **)(a3 + 16);
  }
  else {
    id v3 = 0;
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10004F1E0;
  v5[3] = &unk_1000F6D18;
  void v5[4] = *(void *)(a1 + 32);
  return [v3 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_10004F1E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v17;
    do
    {
      int v10 = 0;
      do
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v16 + 1) + 8 * (void)v10);
        id v12 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        if (!v12)
        {
          id v13 = objc_alloc_init((Class)NSMutableDictionary);
          uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
          uint64_t v15 = *(void **)(v14 + 40);
          *(void *)(v14 + 40) = v13;

          id v12 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        }
        [v12 setObject:v5 forKey:v11];
        int v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v8);
  }
}

id sub_10004F3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (a3) {
    a3 = *(void *)(a3 + 8);
  }
  return [v3 addEntriesFromDictionary:a3];
}

id sub_10004FA1C()
{
  self;
  if (qword_100122EE8 != -1) {
    dispatch_once(&qword_100122EE8, &stru_1000F6CC8);
  }
  id v0 = (void *)qword_100122EF0;

  return v0;
}

void sub_10004FA74(id a1)
{
  uint64_t v1 = objc_alloc_init(BKTouchEventServer);
  uint64_t v2 = (void *)qword_100122EF0;
  qword_100122EF0 = (uint64_t)v1;
}

id sub_100050028()
{
  self;
  if (qword_100122EF8 != -1) {
    dispatch_once(&qword_100122EF8, &stru_1000F6D60);
  }
  id v0 = (void *)qword_100122F00;

  return v0;
}

void sub_100050080(id a1)
{
  uint64_t v1 = objc_alloc_init(BKDisplayAnnotationDisplayController);
  uint64_t v2 = (void *)qword_100122F00;
  qword_100122F00 = (uint64_t)v1;
}

uint64_t sub_1000500BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

__CFString *sub_1000503BC(void *a1)
{
  id v1 = a1;
  if (sub_100011180(v1))
  {
    uint64_t v2 = @"mainDisplay";
  }
  else if (v1)
  {
    uint64_t v2 = (__CFString *)v1;
  }
  else
  {
    uint64_t v2 = @"testDisplay";
  }

  return v2;
}

void sub_1000504E0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  id v3 = sub_1000503BC(*(void **)(a1 + 40));
  id v8 = [v2 objectForKey:v3];

  CFStringRef v4 = *(unsigned char **)(a1 + 48);
  if (v8)
  {
    if (v4) {
      **(unsigned char **)(a1 + 48) = [v8 humanIsPresent];
    }
    if (*(void *)(a1 + 56))
    {
      [v8 proximityInCentimeters];
      **(void **)(a1 + 56) = v5;
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + 64) = [v8 status];
    }
  }
  else
  {
    if (v4) {
      *CFStringRef v4 = 0;
    }
    id v6 = *(void **)(a1 + 56);
    if (v6) {
      void *v6 = 0;
    }
    id v7 = *(void **)(a1 + 64);
    if (v7) {
      *id v7 = 0;
    }
  }
}

void sub_10005066C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    [v2 setHumanIsPresent:*(unsigned __int8 *)(a1 + 48)];
  }
  else
  {
    CFStringRef v4 = BKLogCommon();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = objc_opt_class();
      uint64_t v6 = *(void *)(a1 + 40);
      int v8 = 138543618;
      uint64_t v9 = v5;
      __int16 v10 = 2114;
      uint64_t v11 = v6;
      id v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%{public}@: missing sensor record for displayUUID %{public}@", (uint8_t *)&v8, 0x16u);
    }
  }
}

void sub_100050810(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    [v2 setProximityInCentimeters:*(double *)(a1 + 48)];
  }
  else
  {
    CFStringRef v4 = BKLogCommon();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = objc_opt_class();
      uint64_t v6 = *(void *)(a1 + 40);
      int v8 = 138543618;
      uint64_t v9 = v5;
      __int16 v10 = 2114;
      uint64_t v11 = v6;
      id v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%{public}@: missing sensor record for displayUUID %{public}@", (uint8_t *)&v8, 0x16u);
    }
  }
}

id sub_100050FEC(uint64_t a1)
{
  uint64_t v2 = sub_10005FCE8();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    double v3 = *(double *)(a1 + 40);
    int v13 = 134217984;
    double v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Checkpoint after interval: %gs", (uint8_t *)&v13, 0xCu);
  }

  [*(id *)(a1 + 32) _queue_clearTimer];
  CFStringRef v4 = *(_DWORD **)(a1 + 32);
  if (v4[11] == 1)
  {
    uint64_t v5 = &kBKSHIDServicesUserEventPresenceExpired;
    return [v4 _queue_postNotification:*v5];
  }
  CFTimeInterval v6 = CACurrentMediaTime();
  uint64_t v7 = *(void *)(a1 + 32);
  double v8 = *(double *)(v7 + 8);
  double v9 = v6 - *(double *)(v7 + 16);
  if (v9 >= v8)
  {
    *(unsigned char *)(v7 + 40) = 1;
    CFStringRef v4 = *(_DWORD **)(a1 + 32);
    uint64_t v5 = &kBKSHIDServicesUserEventIdled;
    return [v4 _queue_postNotification:*v5];
  }
  double v10 = v8 - v9;
  uint64_t v11 = sub_10005FCE8();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 134218240;
    double v14 = v10;
    __int16 v15 = 2048;
    double v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Rescheduling checkpoint with new interval: %gs (last user event was %gs ago)", (uint8_t *)&v13, 0x16u);
  }

  return [*(id *)(a1 + 32) _queue_scheduleTimerWithTimeInterval:v10];
}

uint64_t sub_10005136C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 56) = 1;
  return result;
}

id sub_100051430(uint64_t a1)
{
  uint64_t v2 = sub_10005FCE8();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = NSStringFromBKSHIDServicesUserEventTimerMode();
    CFStringRef v4 = (void *)v3;
    double v5 = *(double *)(a1 + 40);
    if (v5 == BKSHIDServicesUserEventTimerIntervalForever) {
      double v5 = INFINITY;
    }
    int v13 = 138543618;
    uint64_t v14 = v3;
    __int16 v15 = 2048;
    double v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "reset timer to mode:%{public}@ duration:%gs", (uint8_t *)&v13, 0x16u);
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 44) = *(_DWORD *)(a1 + 56);
  *(void *)(*(void *)(a1 + 32) + 8) = *(void *)(a1 + 40);
  if (*(_DWORD *)(a1 + 56) != 3) {
    *(void *)(*(void *)(a1 + 32) + 24) = *(void *)(a1 + 48);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(v6 + 44);
  if (!v7) {
    return [v6 _queue_clearTimer];
  }
  double v8 = *(double *)(v6 + 8);
  switch(v7)
  {
    case 1:
      *(unsigned char *)(v6 + 40) = 1;
      break;
    case 3:
      *(unsigned char *)(v6 + 40) = 0;
      double v10 = CACurrentMediaTime();
      uint64_t v11 = *(double **)(a1 + 32);
      double v12 = v11[3];
      if (v11[2] >= v12) {
        double v12 = v11[2];
      }
      double v8 = fmax(v11[1] - (v10 - v12), 0.0);
      break;
    case 2:
      *(unsigned char *)(v6 + 40) = 0;
      break;
  }
  return [*(id *)(a1 + 32) _queue_scheduleTimerWithTimeInterval:v8];
}

double sub_10005166C(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 16);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1000516F4(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 57) = 1;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v2 = (const __CFString *)kBKSHIDServicesSafeToSetIdleTimerNotification;

  CFNotificationCenterPostNotification(DarwinNotifyCenter, v2, 0, 0, 1u);
}

void sub_100051B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100051B9C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  CFStringRef v2 = [WeakRetained descriptionBuilderWithMultilinePrefix:&stru_1000FD108];
  uint64_t v3 = [v2 build];

  return v3;
}

void sub_100051C5C(id a1)
{
  id v1 = objc_alloc_init(BKUserEventTimer);
  CFStringRef v2 = (void *)qword_100122F08;
  qword_100122F08 = (uint64_t)v1;
}

id sub_100052000(uint64_t a1)
{
  return [_objc_msgSend(*(id *)(a1 + 32), "_queue_finishBootingIfNecessaryAndTellObservers:", 1);
}

id sub_1000520A4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

id sub_100052148(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
}

void *sub_1000523A8(void *result)
{
  if (*((unsigned char *)result + 40))
  {
    id v1 = result;
    uint64_t v2 = [*(id *)(result[4] + 8) addSystemShellObserver:result[4] reason:@"first boot detection"];
    uint64_t v3 = v1[4];
    CFStringRef v4 = *(void **)(v3 + 24);
    *(void *)(v3 + 24) = v2;

    double v5 = (void *)v1[4];
    return [_objc_msgSend(v5, "_queue_finishBootingIfNecessaryAndTellObservers:", 0);
  }
  return result;
}

void sub_100052470(id a1)
{
  id v1 = [BKFirstBootDetector alloc];
  id v6 = +[BKSystemShellSentinel sharedInstance];
  uint64_t v2 = +[BKFirstBootKernelSemaphoreToken token];
  uint64_t v3 = +[BKAlternateSystemAppManager sharedInstance];
  CFStringRef v4 = [(BKFirstBootDetector *)v1 initWithSystemAppSentinel:v6 firstBootToken:v2 alternateSystemAppManager:v3];
  double v5 = (void *)qword_100122F18;
  qword_100122F18 = (uint64_t)v4;
}

id sub_10005279C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) appendUInt64:*(void *)(*(void *)(a1 + 40) + 8) withName:@"senderID" format:1];
  id v3 = [*(id *)(a1 + 32) appendUnsignedInteger:*(void *)(*(void *)(a1 + 40) + 16) withName:@"page" format:1];
  return [*(id *)(a1 + 32) appendUnsignedInteger:*(void *)(*(void *)(a1 + 40) + 24) withName:@"usage" format:1];
}

id sub_100052A48(id a1, BKKeyboardInfo *a2)
{
  return sub_100081F38(a2);
}

void sub_100052B90(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 appendString:@"("];
  BSDescriptionStreamAppendBKSKeyModifierFlags();
  [v2 appendString:@""]);
}

id sub_100052D10(id a1, BKIOHIDService *a2)
{
  id v3 = a2;
  if ([(BKIOHIDService *)v3 primaryUsagePage] == 1
    && [(BKIOHIDService *)v3 primaryUsage] == 6
    || ([(BKIOHIDService *)v3 claimsToConformToUsagePage:65 usage:1] & 1) != 0)
  {
LABEL_7:
    id v6 = v3;
    self;
    int v7 = [BKKeyboardInfo alloc];
    double v8 = v6;
    if (!v7)
    {
LABEL_21:

      goto LABEL_25;
    }
    objc_storeStrong((id *)&v7->_service, a2);
    uint64_t v9 = [(BKIOHIDService *)v8 propertyOfClass:objc_opt_class() forKey:@"Transport"];
    transport = v7->_transport;
    v7->_transport = (NSString *)v9;

    uint64_t v11 = [(BKIOHIDService *)v8 propertyOfClass:objc_opt_class() forKey:@"ProductID"];
    productID = v7->_productID;
    v7->_productID = (NSNumber *)v11;

    uint64_t v13 = [(BKIOHIDService *)v8 propertyOfClass:objc_opt_class() forKey:@"VendorID"];
    vendorID = v7->_vendorID;
    v7->_vendorID = (NSNumber *)v13;

    uint64_t v15 = [(BKIOHIDService *)v8 propertyOfClass:objc_opt_class() forKey:@"HIDVirtualDevice"];
    virtualDeviceID = v7->_virtualDeviceID;
    v7->_virtualDeviceID = (NSNumber *)v15;

    v7->_keyboardint Type = 0;
    long long v17 = [(BKIOHIDService *)v8 propertyForKey:@"StandardType"];
    uint64_t v47 = v17;
    id v48 = v3;
    if (v17)
    {
      unsigned int v18 = [v17 unsignedIntValue];
      v7->_keyboardint Type = v18;
      if (v18 != -1) {
        goto LABEL_13;
      }
    }
    else
    {
      v7->_keyboardint Type = -1;
    }
    v7->_wantsStandardTypeOverride = 1;
LABEL_13:
    id v46 = +[BKSDefaults localDefaults];
    long long v19 = [v46 keyboardTypeRemap];
    __int16 v20 = sub_100081600((uint64_t)v7);
    long long v21 = [v19 objectForKey:v20];

    if (v21 && [v21 unsignedIntValue] != v7->_keyboardType)
    {
      id v22 = [v21 unsignedIntValue];
      v7->_keyboardint Type = v22;
      service = v7->_service;
      long long v24 = +[NSNumber numberWithUnsignedInt:v22];
      [(BKIOHIDService *)service setProperty:v24 forKey:@"StandardType"];

      v7->_wantsStandardTypeOverride = 1;
    }
    double v25 = [(BKIOHIDService *)v8 propertyOfClass:objc_opt_class() forKey:@"CountryCode"];
    v7->_countryCode = [v25 unsignedCharValue];
    id v26 = [(BKIOHIDService *)v8 propertyOfClass:objc_opt_class() forKey:@"KeyboardLanguage"];
    double v27 = (NSString *)[v26 copy];
    keyboardLanguage = v7->_keyboardLanguage;
    v7->_keyboardLanguage = v27;

    id v29 = [(BKIOHIDService *)v8 propertyOfClass:objc_opt_class() forKey:@"exclusivityIdentifier"];
    id v30 = (NSString *)[v29 copy];
    exclusivityIdentifier = v7->_exclusivityIdentifier;
    v7->_exclusivityIdentifier = v30;

    long long v32 = [(BKIOHIDService *)v8 propertyOfClass:objc_opt_class() forKey:@"HIDSubinterfaceID"];
    v7->_subinterfaceID = (int64_t)[v32 integerValue];
    id v33 = [(BKIOHIDService *)v8 propertyOfClass:objc_opt_class() forKey:@"CapsLockLanguageSwitch"];
    unsigned __int8 v34 = [v33 BOOLValue];

    v7->_capsLockKeyHasLanguageSwitchLabel = v34;
    id v35 = [(BKIOHIDService *)v8 propertyOfClass:objc_opt_class() forKey:@"SupportsGlobeKey"];
    unsigned __int8 v36 = [v35 BOOLValue];

    v7->_globeKeyLabelHasGlobeSymbol = v36;
    long long v37 = [(BKIOHIDService *)v8 propertyOfClass:objc_opt_class() forKey:@"KeyboardEnabledByEvent"];
    uint64_t v38 = v37;
    if (v37) {
      v7->_shouldActivateByGesture = [v37 BOOLValue];
    }
    double v39 = sub_10008164C((uint64_t)v7);
    if (v39) {
      [*v45 setProperty:v39 forKey:@"HIDKeyboardModifierMappingPairs"];
    }

    double v40 = v7;
    id v3 = v48;
    goto LABEL_21;
  }
  CFStringRef v4 = [(BKIOHIDService *)v3 propertyForKey:@"DeviceTypeHint"];
  double v5 = v4;
  if (v4 && ([v4 isEqualToString:@"Trackpad"] & 1) != 0)
  {

    goto LABEL_7;
  }
  double v41 = BKLogKeyboard();
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v42 = [(BKIOHIDService *)v3 propertyForKey:@"Manufacturer"];
    uint64_t v43 = [(BKIOHIDService *)v3 propertyForKey:@"Product"];
    *(_DWORD *)int buf = 138543874;
    long long v50 = v42;
    __int16 v51 = 2114;
    uint64_t v52 = v43;
    __int16 v53 = 2114;
    uint64_t v54 = v3;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Ignoring service with secondary keyboard usage: %{public}@/%{public}@/%{public}@", buf, 0x20u);
  }
  int v7 = 0;
LABEL_25:

  return v7;
}

id sub_1000532C4(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 bufferDidDrain:*(void *)(a1 + 32)];
}

void sub_100054590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_1000545C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = objc_loadWeakRetained((id *)(a1 + 40));
    [v2 smartKeyboardAttachmentStateDidChange:WeakRetained];
  }
}

void sub_100054FFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setEventType:3];
  [v3 setOriginIdentifier:0xC181BADB23D8497BLL];
  [v3 setContext:*(void *)(a1 + 32)];
  [v3 setVersionedPID:*(void *)(a1 + 40)];
  [v3 setRegistrantEntitled:1];
}

void sub_1000552C0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v9 = a2;
  id v5 = a3;
  if (v9)
  {
    if (v9[1] != *(void *)(a1 + 32)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (!*(void *)(a1 + 32))
  {
LABEL_3:
    KeyboardEvent = (const void *)IOHIDEventCreateKeyboardEvent();
    IOHIDEventSetSenderID();
    int v7 = [v5 firstAdditionalContext];
    id v8 = [v7 copy];

    [v5 postEvent:KeyboardEvent position:3 additionalContext:v8];
    CFRelease(KeyboardEvent);
  }
LABEL_4:
}

void sub_100055628(void *a1)
{
  id v2 = [*(id *)(a1[4] + 128) objectForKeyedSubscript:a1[5]];
  id v3 = [v2 integerValue];

  if ((id)a1[6] == v3)
  {
    uint64_t v4 = a1[5];
    id v5 = *(void **)(a1[4] + 128);
    [v5 removeObjectForKey:v4];
  }
}

void sub_100055C44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if ([a3 BOOLValue]) {
    [*(id *)(a1 + 32) _lock_publishUsableKeyboards:*(void *)(a1 + 40) toServiceConnection:v5];
  }
}

id sub_100055CA4(id a1, BKKeyboardInfo *a2)
{
  return sub_100081F38(a2);
}

void sub_100055DE8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100055E0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    os_unfair_lock_lock(WeakRetained + 2);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    if (v3)
    {
      id v6 = BKLogKeyboard();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v8 = 138412290;
        id v9 = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "error in setConnectedKeyboards response:%@", (uint8_t *)&v8, 0xCu);
      }
    }
    else if (*(void *)(a1 + 56) != *(void *)&v5[6]._os_unfair_lock_opaque)
    {
      int v7 = [*(id *)&v5[10]._os_unfair_lock_opaque bs_map:&stru_1000F6F28];
      [(os_unfair_lock_s *)v5 _lock_publishUsableKeyboards:v7 toServiceConnection:*(void *)(a1 + 32)];
    }
    os_unfair_lock_unlock(v5 + 2);
  }
}

id sub_100055F4C(id a1, BKKeyboardInfo *a2)
{
  return sub_100081F38(a2);
}

uint64_t sub_1000563FC(int a1, int a2)
{
  if (qword_100122F30 != -1) {
    dispatch_once(&qword_100122F30, &stru_1000F7088);
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v2 = (id)qword_100122F28;
  id v3 = [v2 countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v3)
  {
    id v5 = v3;
    char v22 = 0;
    uint64_t v6 = *(void *)v26;
    *(void *)&long long v4 = 138543362;
    long long v21 = v4;
    while (1)
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(v2);
        }
        int v8 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        id v9 = [v8 objectForKey:@"productID" v21];
        uint64_t v10 = objc_opt_class();
        id v11 = v9;
        if (v10)
        {
          if (objc_opt_isKindOfClass()) {
            double v12 = v11;
          }
          else {
            double v12 = 0;
          }
        }
        else
        {
          double v12 = 0;
        }
        id v13 = v12;

        uint64_t v14 = [v8 objectForKey:@"vendorID"];
        uint64_t v15 = objc_opt_class();
        id v16 = v14;
        if (v15)
        {
          if (objc_opt_isKindOfClass()) {
            long long v17 = v16;
          }
          else {
            long long v17 = 0;
          }
        }
        else
        {
          long long v17 = 0;
        }
        id v18 = v17;

        if (!v13 || !v18)
        {
          long long v19 = BKLogKeyboard();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = v21;
            uint64_t v30 = qword_100122F28;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Unfamiliar MG query result format: %{public}@", buf, 0xCu);
          }
          goto LABEL_27;
        }
        if ([v13 unsignedIntValue] == a2
          && [v18 unsignedIntValue] == a1)
        {
          long long v19 = BKLogKeyboard();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Keyboard requires HES workaround for open", buf, 2u);
          }
          char v22 = 1;
LABEL_27:
        }
      }
      id v5 = [v2 countByEnumeratingWithState:&v25 objects:v31 count:16];
      if (!v5) {
        goto LABEL_32;
      }
    }
  }
  char v22 = 0;
LABEL_32:

  return v22 & 1;
}

void sub_1000566E8(id a1)
{
  id v1 = (void *)MGCopyAnswer();
  uint64_t v2 = objc_opt_class();
  id v3 = v1;
  if (v2)
  {
    if (objc_opt_isKindOfClass()) {
      long long v4 = v3;
    }
    else {
      long long v4 = 0;
    }
  }
  else
  {
    long long v4 = 0;
  }
  id v5 = v4;

  uint64_t v6 = (void *)qword_100122F28;
  qword_100122F28 = (uint64_t)v5;

  if (!qword_100122F28)
  {
    int v7 = BKLogKeyboard();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138543362;
      id v9 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unfamiliar MG query result format: %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_1000568A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = v3;
  if (v3) {
    id v5 = (void *)v3[3];
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;
  id v7 = [v6 senderID];

  int v8 = +[NSNumber numberWithUnsignedLongLong:v7];
  id v9 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v8];

  if (!v9)
  {
    if (v4) {
      uint64_t v10 = (void *)v4[3];
    }
    else {
      uint64_t v10 = 0;
    }
    id v11 = v10;
    double v12 = [v11 propertyForKey:@"VendorID"];
    int v13 = [v12 unsignedIntValue];
    uint64_t v14 = [v11 propertyForKey:@"ProductID"];
    int v15 = sub_1000563FC(v13, (int)[v14 unsignedIntValue]);

    if (v15)
    {
      ++*(void *)(*(void *)(a1 + 32) + 96);
      uint64_t v16 = *(void *)(a1 + 32);
      if (*(void *)(v16 + 96) == 1)
      {
        long long v17 = [*(id *)(v16 + 168) eventProcessorOfClass:objc_opt_class()];
        [v17 setAttachedCoverRequiresWorkaroundForOpenState:1];
      }
    }
    if (v4) {
      id v18 = (void *)v4[3];
    }
    else {
      id v18 = 0;
    }
    id v19 = v18;
    [v19 addDisappearanceObserver:*(void *)(a1 + 32) queue:&_dispatch_main_q];

    [*(id *)(*(void *)(a1 + 32) + 32) setObject:v4 forKeyedSubscript:v8];
    __int16 v20 = BKLogKeyboard();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 138543362;
      char v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Keyboard attached: %{public}@", (uint8_t *)&v21, 0xCu);
    }

    [*(id *)(a1 + 32) _lock_watchForGestures:v4];
    if (sub_100081B28((uint64_t)v4)) {
      [*(id *)(a1 + 32) _lock_usableKeyboardAttached:v4];
    }
  }
}

id sub_100056D58(id a1, NSNumber *a2, BKKeyboardInfo *a3)
{
  long long v4 = a3;
  NSInteger v5 = [(NSNumber *)a2 integerValue];
  if (v4) {
    int64_t activeModifiers = v4->_activeModifiers;
  }
  else {
    int64_t activeModifiers = 0;
  }

  return +[NSNumber numberWithInteger:activeModifiers | v5];
}

id sub_100057450(id a1, BKKeyboardInfo *a2)
{
  return sub_100081F38(a2);
}

BOOL sub_10005759C(uint64_t a1, void *a2)
{
  return [a2 senderID] == *(id *)(a1 + 32);
}

id sub_100058340(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) removeRecognizer:a2];
}

void sub_100058790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000587B4(uint64_t a1)
{
  uint64_t v2 = BKLogKeyboard();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "external defaults did change %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) _modifierRemappingsDidChange];
}

__CFString *sub_100058864(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = +[BSDescriptionStream descriptionForRootObject:WeakRetained];
  }
  else
  {
    uint64_t v2 = @"<nil>";
  }

  return v2;
}

void sub_100058AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100059024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100059118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100059484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_1000594C4(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = BKLogTouchEvents();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 138543362;
    long long v4 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "invalidate touch stream (process-exit) %{public}@", (uint8_t *)&v3, 0xCu);
  }

  sub_10009629C(WeakRetained);
}

void sub_10005957C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005968C(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

id sub_100059730(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 104) = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1000597AC;
  v3[3] = &unk_1000F7368;
  id v1 = *(void **)(a1 + 32);
  v3[4] = *(void *)(a1 + 40);
  return [v1 _queue_enumerateDigitizersForAllDisplaysUsingBlock:v3];
}

void sub_1000597AC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)(a2 + 104) = *(void *)(a1 + 32);
    int v3 = [*(id *)(a2 + 8) displayUUID];
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id obj = [*(id *)(a2 + 120) allValues];
    id v4 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
    if (v4)
    {
      uint64_t v20 = *(void *)v29;
      do
      {
        id v21 = v4;
        for (uint64_t i = 0; i != v21; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v29 != v20) {
            objc_enumerationMutation(obj);
          }
          uint64_t v6 = *(void *)(*((void *)&v28 + 1) + 8 * i);
          if (v6) {
            uint64_t v7 = *(unsigned int *)(v6 + 8);
          }
          else {
            uint64_t v7 = 0;
          }
          char v22 = [*(id *)(a2 + 128) objectForKey:v7];
          if ([v22 count])
          {
            sub_10008C568((uint64_t)v27, (void *)a2);
            id v8 = objc_alloc_init((Class)NSMutableArray);
            long long v25 = 0u;
            long long v26 = 0u;
            long long v23 = 0u;
            long long v24 = 0u;
            id v9 = v22;
            id v10 = [v9 countByEnumeratingWithState:&v23 objects:v32 count:16];
            if (v10)
            {
              uint64_t v11 = *(void *)v24;
              do
              {
                double v12 = 0;
                do
                {
                  if (*(void *)v24 != v11) {
                    objc_enumerationMutation(v9);
                  }
                  uint64_t v13 = *(void *)(*((void *)&v23 + 1) + 8 * (void)v12);
                  sub_10008CB5C(v13, (uint64_t)v27);
                  if (v6) {
                    uint64_t v14 = *(unsigned int *)(v6 + 8);
                  }
                  else {
                    uint64_t v14 = 0;
                  }
                  int v15 = sub_10008CE5C(a2, v13, v14, (uint64_t)v3, 1);
                  [v8 addObject:v15];

                  double v12 = (char *)v12 + 1;
                }
                while (v10 != v12);
                id v16 = [v9 countByEnumeratingWithState:&v23 objects:v32 count:16];
                id v10 = v16;
              }
              while (v16);
            }

            long long v17 = (const void *)sub_10008C6E4(v27);
            id v18 = objc_alloc_init(BKHIDEventCollector);
            sub_10001159C((void *)a2, (uint64_t)v17, v6, (uint64_t)v18, 0, v8, *(double *)(a2 + 96));
            sub_100017570(a2, (uint64_t)v18);

            if (v17) {
              CFRelease(v17);
            }

            sub_10008C968((uint64_t)v27);
          }
        }
        id v4 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
      }
      while (v4);
    }
  }
}

void sub_100059A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_100059EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a41, 8);

  _Unwind_Resume(a1);
}

id sub_100059F9C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id result = [*(id *)(a1 + 32) containsObject:a2];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_100059FE4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100059FF4(uint64_t a1)
{
}

void sub_100059FFC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _queue_servicesMatchingSenderDescriptor:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  int v5 = *(void **)(a1 + 48);
  if (v5)
  {
    unsigned int v6 = [v5 BOOLValue];
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v7 = *(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    id v8 = [v7 countByEnumeratingWithState:&v15 objects:v23 count:16];
    if (v8)
    {
      uint64_t v10 = *(void *)v16;
      *(void *)&long long v9 = 67109378;
      long long v14 = v9;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v7);
          }
          [*(id *)(a1 + 32) _queue_digitizerStateForService:*(void *)(*((void *)&v15 + 1) + 8 * (void)v11), v14, (void)v15];
          double v12 = (unsigned char *)objc_claimAutoreleasedReturnValue();
          uint64_t v13 = BKLogTouchEvents();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = v14;
            unsigned int v20 = v6;
            __int16 v21 = 2114;
            char v22 = v12;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "apply hoverDisabled:%{BOOL}u to %{public}@", buf, 0x12u);
          }

          if (v12) {
            v12[209] = v6;
          }

          uint64_t v11 = (char *)v11 + 1;
        }
        while (v8 != v11);
        id v8 = [v7 countByEnumeratingWithState:&v15 objects:v23 count:16];
      }
      while (v8);
    }
  }
}

void sub_10005A1BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005A240(id a1)
{
  id v1 = [objc_alloc((Class)NSSet) initWithObjects:@"InputDetectionMode", @"TouchDetectionMode", @"HostStateNotification", nil];
  uint64_t v2 = (void *)qword_100122F48;
  qword_100122F48 = (uint64_t)v1;
}

void sub_10005A444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10005A514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    id v4 = *(void **)(a3 + 24);
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005A584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005A624(uint64_t a1, uint64_t a2, id *a3)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = sub_10000CDE8(a3);
  id v5 = (char *)[v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v9;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
        ++v7;
      }
      while (v5 != v7);
      id v5 = (char *)[v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

void sub_10005A724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005A844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005A91C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 length];
  id v4 = (void *)BKSDisplayUUIDMainKey;
  if (v3) {
    id v4 = v2;
  }
  id v37 = v4;

  id v5 = [*(id *)(*(void *)(a1 + 40) + 120) objectForKeyedSubscript:v37];
  uint64_t v6 = sub_10000CDE8(v5);
  uint64_t v7 = [v6 firstObject];
  if (v7)
  {
    double v8 = *(double *)(a1 + 64);
    double v9 = *(double *)(a1 + 72);
    int v10 = *(_DWORD *)(a1 + 80);
    long long v11 = *(void **)(a1 + 56);
    unsigned __int8 v36 = *(void **)(a1 + 48);
    memset(v40, 0, 304);
    double v12 = sub_100005E04((uint64_t)BKDisplayController, 0, 1, 0, v11);
    uint64_t v13 = *(void **)(v7 + 40);
    if (v13) {
      uint64_t v13 = (void *)v13[1];
    }
    long long v14 = v13;
    long long v15 = [*(id *)(v7 + 8) displayUUID];
    int v35 = v10;
    id v39 = 0;
    unsigned __int8 v16 = [v14 contextIDAtCAScreenLocation:v15 displayUUID:v12 options:&v39 displayUUID:v40 securityAnalysis:v8 results:v9];
    id v17 = v39;

    if (v16)
    {
      if (v17) {
        [v36 setSecurityAnalysis:v17];
      }
      if (DWORD1(v40[0]))
      {
        uint64_t v18 = [*(id *)(v7 + 16) _queue_slotRecordForSlotID:];
        id v19 = (void *)v18;
        if (v18)
        {
          id v20 = *(id *)(v18 + 16);
          __int16 v21 = sub_100005E04((uint64_t)BKDisplayController, 0, 0, v20, v11);

          unsigned __int8 v34 = [*(id *)(v7 + 8) displayUUID];
          char v22 = *(void **)(v7 + 40);
          if (v22) {
            char v22 = (void *)v22[1];
          }
          long long v23 = v22;
          unsigned int v24 = [v23 contextIDAtCAScreenLocation:v34 displayUUID:v21 options:0 securityAnalysis:v40 results:v8];

          if (DWORD1(v40[0])) {
            unsigned int v25 = v24;
          }
          else {
            unsigned int v25 = 0;
          }
          if (v25 == 1)
          {
            sub_10000A328((uint64_t)BKTouchDestination, LODWORD(v40[0]), DWORD2(v40[0]));
            id v38 = (id)objc_claimAutoreleasedReturnValue();
            long long v26 = objc_alloc_init(BKTouchContact);
            v26->_slotID = DWORD1(v40[0]);
            uint64_t v27 = sub_10001DEF8((uint64_t)v40);
            hitTestInformationAtDown = v26->_hitTestInformationAtDown;
            v26->_hitTestInformationAtDown = (BKSHIDEventHitTestLayerInformation *)v27;

            long long v29 = (NSArray *)[objc_alloc((Class)NSArray) initWithObjects:&v38 count:1];
            hostingChain = v26->_hostingChain;
            v26->_hostingChain = v29;

            sub_100039AD4(v34);
            v26->_denormalizedLocation.hitTestLocation.double x = v31;
            v26->_denormalizedLocation.hitTestLocation.double y = v32;
            id v33 = sub_100018C94(v7, (uint64_t)v26, v35, (uint64_t)v38);
            [v36 setAuthenticationMessage:v33];
          }
        }
      }
    }
  }
}

void sub_10005AC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, id a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_10005AD10()
{
}

void sub_10005AD18()
{
}

void sub_10005AD20()
{
}

void sub_10005AD28()
{
}

void sub_10005AD30()
{
}

void sub_10005AEB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005AF50(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 144))
  {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 144);
    *(void *)(v3 + 144) = v2;
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v5 = *(id *)(a1 + 40);
  id v6 = [v5 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v6)
  {
    uint64_t v8 = *(void *)v23;
    *(void *)&long long v7 = 67109120;
    long long v21 = v7;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v5);
        }
        int v10 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        id v11 = [v10 slotID:v21, v22];
        double v12 = +[NSNumber numberWithUnsignedInt:v11];
        uint64_t v13 = [*(id *)(*(void *)(a1 + 32) + 144) objectForKeyedSubscript:v12];
        BOOL v14 = v13 == 0;

        if (v14)
        {
          unsigned __int8 v16 = objc_alloc_init(_BKTouchAuthenticationSlotRecord);
          uint64_t v15 = (uint64_t)v16;
          if (v16)
          {
            objc_storeStrong((id *)&v16->_authenticationSpecification, v10);
            *(unsigned char *)(v15 + 8) = *(unsigned char *)(a1 + 48);
            *(void *)(v15 + 24) = 1;
          }
          if (*(unsigned char *)(a1 + 48) && [v10 initialSampleEvent] == (id)2)
          {
            id v17 = *(void **)(*(void *)(a1 + 32) + 152);
            if (!v17)
            {
              id v18 = objc_alloc_init((Class)NSMutableOrderedSet);
              uint64_t v19 = *(void *)(a1 + 32);
              id v20 = *(void **)(v19 + 152);
              *(void *)(v19 + 152) = v18;

              id v17 = *(void **)(*(void *)(a1 + 32) + 152);
            }
            [v17 removeObject:v12];
            [*(id *)(*(void *)(a1 + 32) + 152) insertObject:v12 atIndex:0];
          }
          [*(id *)(*(void *)(a1 + 32) + 144) setObject:v15 forKey:v12];
          [*(id *)(a1 + 32) _queue_resetTouchAuthenticationInitialSampleEvent];
        }
        else
        {
          uint64_t v15 = BKLogTouchEvents();
          if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = v21;
            int v27 = (int)v11;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v15, OS_LOG_TYPE_ERROR, "addTouchAuthenticationSpecifications: already registered authentication spec for slotID:%X", buf, 8u);
          }
        }
      }
      id v6 = [v5 countByEnumeratingWithState:&v22 objects:v28 count:16];
    }
    while (v6);
  }
}

void sub_10005B1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005B320(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 144);
  uint64_t v3 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 56)];
  double v9 = [v2 objectForKey:v3];

  id v4 = v9;
  if (v9)
  {
    id v5 = v9[2];
    id v6 = [v5 copy];
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    id v4 = v9;
    **(unsigned char **)(a1 + 48) = *((unsigned char *)v9 + 8);
  }
}

void sub_10005B3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10005B54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10005B57C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 96) = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10005B5FC;
  v3[3] = &unk_1000F7368;
  id v1 = *(void **)(a1 + 32);
  v3[4] = *(void *)(a1 + 40);
  return [v1 _queue_enumerateDigitizersForDisplay:0 usingBlock:v3];
}

uint64_t sub_10005B5FC(uint64_t result, uint64_t a2)
{
  if (a2) {
    *(void *)(a2 + 152) = *(void *)(result + 32);
  }
  return result;
}

void sub_10005B684(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 160) invalidate];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 160);
  *(void *)(v2 + 160) = 0;

  id v4 = [*(id *)(a1 + 40) copy];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 168);
  *(void *)(v5 + 168) = v4;

  if ([*(id *)(a1 + 40) count])
  {
    uint64_t v7 = ++*(void *)(*(void *)(a1 + 32) + 176);
    id v8 = objc_alloc((Class)BSProcessDeathWatcher);
    uint64_t v9 = *(unsigned int *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(v10 + 8);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10005B780;
    void v15[3] = &unk_1000F8C30;
    void v15[4] = v10;
    void v15[5] = v7;
    id v12 = [v8 initWithPID:v9 queue:v11 deathHandler:v15];
    uint64_t v13 = *(void *)(a1 + 32);
    BOOL v14 = *(void **)(v13 + 160);
    *(void *)(v13 + 160) = v12;
  }
}

void sub_10005B780(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) == *(void *)(v1 + 176))
  {
    uint64_t v3 = *(void **)(v1 + 168);
    *(void *)(v1 + 168) = 0;

    [*(id *)(*(void *)(a1 + 32) + 160) invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 160);
    *(void *)(v4 + 160) = 0;
  }
}

id sub_10005B8F4(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10005B974;
  v3[3] = &unk_1000F7348;
  uint64_t v1 = *(void **)(a1 + 32);
  v3[4] = *(void *)(a1 + 40);
  int v4 = *(_DWORD *)(a1 + 48);
  return [v1 _queue_enumerateDigitizersForAllDisplaysUsingBlock:v3];
}

void sub_10005B974(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(unsigned int *)(a1 + 40);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id obj = v3;
    id v5 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v6) {
            objc_enumerationMutation(obj);
          }
          id v8 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          uint64_t v9 = [v8 uniqueIdentifier];
          uint64_t v10 = v9;
          if (v9)
          {
            uint64_t v11 = [v9 stringByReplacingOccurrencesOfString:@"." withString:@"_"];

            uint64_t v12 = +[NSString stringWithFormat:@"from-client.pid-%d.%@", v4, v11];

            uint64_t v13 = (void *)v12;
          }
          else
          {
            uint64_t v13 = +[NSString stringWithFormat:@"from-client.pid-%d", v4];
          }
          BOOL v14 = *(void **)(a2 + 80);
          id v15 = [v8 touchIdentifier];
          unsigned __int8 v16 = [v8 text];
          [v14 annotateTouch:v15 withString:v16 uniqueIdentifier:v13 fromPID:v4];
        }
        id v5 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v5);
    }
  }
}

void sub_10005BB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

id sub_10005BC58(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10005BCD8;
  v3[3] = &unk_1000F72A8;
  long long v4 = *(_OWORD *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 56);
  return [v1 _queue_enumerateDigitizersForAllDisplaysUsingBlock:v3];
}

void sub_10005BCD8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v3 = *(_OWORD *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 48);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    long long v11 = v3;
    long long v12 = 0u;
    id v5 = *(id *)(a2 + 112);
    id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v13;
      do
      {
        id v8 = 0;
        do
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8 * (void)v8);
          if (*(_DWORD *)(v9 + 20) == v4) {
            *(_OWORD *)(v9 + 160) = v11;
          }
          id v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v6);
    }

    uint64_t v10 = sub_10000D36C(*(id **)(a2 + 112));
    sub_10008C1C8(a2, v10);
  }
}

void sub_10005BE10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10005BF04(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10005BF84;
  v3[3] = &unk_1000F7348;
  uint64_t v1 = *(void **)(a1 + 32);
  void v3[4] = *(void *)(a1 + 40);
  int v4 = *(_DWORD *)(a1 + 48);
  return [v1 _queue_enumerateDigitizersForAllDisplaysUsingBlock:v3];
}

void sub_10005BF84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v3 = *(void **)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    id v13 = objc_alloc_init((Class)NSMutableArray);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id obj = *(id *)(a2 + 112);
    id v5 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
    uint64_t v12 = a2;
    if (v5)
    {
      uint64_t v6 = *(void *)v25;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v25 != v6) {
            objc_enumerationMutation(obj);
          }
          uint64_t v8 = *(void *)(*((void *)&v24 + 1) + 8 * (void)v7);
          if (*(_DWORD *)(v8 + 20) == v4)
          {
            id v9 = *(id *)(v8 + 256);
            uint64_t v20 = 0;
            long long v21 = &v20;
            uint64_t v22 = 0x2020000000;
            uint64_t v23 = 0;
            unsigned int v10 = [v3 shouldAvoidHitTesting];
            uint64_t v11 = 2;
            if (!v10) {
              uint64_t v11 = 0;
            }
            uint64_t v23 = v11;
            v15[0] = _NSConcreteStackBlock;
            v15[1] = 3221225472;
            v15[2] = sub_10008CDE0;
            void v15[3] = &unk_1000F8450;
            id v16 = v13;
            uint64_t v17 = v8;
            long long v18 = v3;
            long long v19 = &v20;
            +[BKSHIDTouchRoutingPolicy inspectChangesWithOldPolicy:v9 newPolicy:v3 usingBlock:v15];
            *(void *)(v8 + 48) = v21[3];
            objc_storeStrong((id *)(v8 + 256), v3);

            _Block_object_dispose(&v20, 8);
          }
          uint64_t v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v5);
    }

    if ([v13 count]) {
      sub_10008C1C8(v12, v13);
    }
  }
}

void sub_10005C1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id sub_10005C2CC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10005C360;
  v4[3] = &unk_1000F72F8;
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = v2;
  int v9 = *(_DWORD *)(a1 + 88);
  long long v5 = *(_OWORD *)(a1 + 40);
  long long v8 = *(_OWORD *)(a1 + 72);
  return [v1 _queue_enumerateDigitizersForAllDisplaysUsingBlock:v4];
}

void sub_10005C360(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v3 = *(int **)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    int v29 = *(_DWORD *)(a1 + 80);
    long long v5 = *(void **)(a1 + 32);
    long long v28 = *(_OWORD *)(a1 + 64);
    id v26 = objc_alloc_init((Class)NSMutableArray);
    if (v4 >= 1)
    {
      do
      {
        uint64_t v6 = sub_100074D18(*(void *)(a2 + 112), *v3);
        uint64_t v7 = (void *)v6;
        if (v6)
        {
          if (*(unsigned char *)(v6 + 296))
          {
            long long v8 = BKLogTouchEvents();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
            {
              int v9 = *v3;
              *(_DWORD *)int buf = 67109120;
              int v40 = v9;
              _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "tried to detach a touch (%d) that was already detached", buf, 8u);
            }
          }
          else
          {
            [v26 addObject:v6];
          }
        }

        ++v3;
        --v4;
      }
      while (v4);
    }
    unsigned int v10 = v26;
    id v11 = [v26 count];
    BOOL v24 = v11 != 0;
    if (v11)
    {
      sub_10008B690((id *)a2, v26, 1, 1);
      sub_10008B690((id *)a2, v26, 6, 1);
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id obj = v26;
      id v12 = [obj countByEnumeratingWithState:&v30 objects:v38 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v31;
        do
        {
          long long v14 = 0;
          do
          {
            if (*(void *)v31 != v13) {
              objc_enumerationMutation(obj);
            }
            uint64_t v15 = *(void *)(*((void *)&v30 + 1) + 8 * (void)v14);
            id v16 = BKLogTouchEvents();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              int v23 = *(_DWORD *)(v15 + 16);
              *(_DWORD *)int buf = 67109120;
              int v40 = v23;
              _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "detaching:%X", buf, 8u);
            }

            *(_DWORD *)(v15 + 20) = v29;
            *(unsigned char *)(v15 + 296) = 1;
            objc_storeStrong((id *)(v15 + 256), v5);
            unsigned int v17 = [v5 shouldAvoidHitTesting];
            uint64_t v18 = 2;
            if (!v17) {
              uint64_t v18 = 0;
            }
            *(void *)(v15 + 48) = v18;
            *(_OWORD *)(v15 + 160) = v28;
            long long v34 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            id v19 = *(id *)(a2 + 72);
            id v20 = [v19 countByEnumeratingWithState:&v34 objects:buf count:16];
            if (v20)
            {
              uint64_t v21 = *(void *)v35;
              do
              {
                for (uint64_t i = 0; i != v20; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v35 != v21) {
                    objc_enumerationMutation(v19);
                  }
                  [*(id *)(*((void *)&v34 + 1) + 8 * i) touchDidDetach:*(unsigned int *)(v15 + 16) destinations:*(void *)(v15 + 280)];
                }
                id v20 = [v19 countByEnumeratingWithState:&v34 objects:buf count:16];
              }
              while (v20);
            }

            long long v14 = (char *)v14 + 1;
          }
          while (v14 != v12);
          id v12 = [obj countByEnumeratingWithState:&v30 objects:v38 count:16];
        }
        while (v12);
      }

      unsigned int v10 = v26;
      sub_10008C1C8(a2, obj);
    }
  }
  else
  {
    BOOL v24 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) |= v24;
}

void sub_10005C6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_10005C7CC(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10005C84C;
  v4[3] = &unk_1000F72A8;
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 48);
  void v4[4] = *(void *)(a1 + 40);
  void v4[5] = v2;
  int v5 = *(_DWORD *)(a1 + 56);
  return [v1 _queue_enumerateDigitizersForAllDisplaysUsingBlock:v4];
}

void sub_10005C84C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(unsigned int *)(a1 + 48);
    if (!v2)
    {
      long long v33 = +[NSString stringWithFormat:@"Invalid condition not satisfying: %@", @"contextID != 0"];
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        NSStringFromSelector("transferTouchIdentifiers:count:toContextID:");
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        long long v35 = (objc_class *)objc_opt_class();
        long long v36 = NSStringFromClass(v35);
        *(_DWORD *)int buf = 138544642;
        *(void *)__int16 v60 = v34;
        *(_WORD *)&v60[8] = 2114;
        *(void *)&v60[10] = v36;
        __int16 v61 = 2048;
        uint64_t v62 = a2;
        __int16 v63 = 2114;
        CFStringRef v64 = @"BKDirectTouchState.mm";
        __int16 v65 = 1024;
        int v66 = 827;
        __int16 v67 = 2114;
        uint64_t v68 = v33;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
      }
      [v33 UTF8String];
      _bs_set_crash_log_message();
      __break(0);
      JUMPOUT(0x10005CF9CLL);
    }
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3)
    {
      uint64_t v4 = *(int **)(a1 + 32);
      long long v56 = [*(id *)(a2 + 120) objectForKey:v2];
      uint64_t v43 = [*(id *)(a2 + 8) displayUUID];
      if (v56)
      {
        unsigned int v5 = v56[3];
      }
      else
      {
        uint64_t v6 = *(void **)(a2 + 40);
        if (v6) {
          uint64_t v6 = (void *)v6[1];
        }
        uint64_t v7 = v6;
        long long v8 = [*(id *)(a2 + 8) displayUUID];
        unsigned int v5 = [v7 taskPortForContextID:v2 displayUUID:v8];
      }
      unsigned int v39 = v5;
      if (v5 - 1 >= 0xFFFFFFFE)
      {
        int v29 = BKLogTouchEvents();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 67109376;
          *(_DWORD *)__int16 v60 = v5;
          *(_WORD *)&v60[4] = 1024;
          *(_DWORD *)&v60[6] = v2;
          _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "transfer: invalid client port %X for contextID %X", buf, 0xEu);
        }
      }
      else
      {
        long long v37 = [*(id *)(a2 + 128) objectForKey:v2];
        int v9 = sub_100074E8C(*(void *)(a2 + 112), v4, v3);
        v53[0] = _NSConcreteStackBlock;
        v53[1] = 3221225472;
        v53[2] = sub_10008CEE8;
        v53[3] = &unk_1000F84B8;
        uint64_t v54 = v56;
        int v55 = v2;
        id v38 = [v9 bs_filter:v53];

        if ([v38 count])
        {
          unsigned int v10 = BKLogTouchEvents();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 67109378;
            *(_DWORD *)__int16 v60 = v2;
            *(_WORD *)&v60[4] = 2114;
            *(void *)&v60[6] = v38;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "transfer: transferring to contextID:%X contacts:%{public}@", buf, 0x12u);
          }

          sub_10008B690((id *)a2, v38, 6, 1);
          sub_10008B690((id *)a2, v38, 1, 1);
          sub_10008C568((uint64_t)buf, (void *)a2);
          id v42 = objc_alloc_init((Class)NSMutableArray);
          double v41 = +[NSSet setWithArray:v38];
          id v11 = [v38 mutableCopy];
          if ((uint64_t)[v37 count] >= 1)
          {
            id v12 = sub_10000D36C(v37);
            [v11 addObjectsFromArray:v12];

            [v11 sortUsingComparator:&stru_1000F84F8];
          }
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          id obj = v11;
          id v13 = [obj countByEnumeratingWithState:&v49 objects:v58 count:16];
          if (v13)
          {
            uint64_t v14 = *(void *)v50;
            do
            {
              for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v50 != v14) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v16 = *(void *)(*((void *)&v49 + 1) + 8 * i);
                if ([v41 containsObject:v16])
                {
                  *(unsigned char *)(v16 + 297) = 1;
                  sub_10008CB5C(v16, (uint64_t)buf);
                  unsigned int v17 = sub_10008CE5C(a2, v16, v2, (uint64_t)v43, 2);
                  [v42 addObject:v17];
                  sub_10000A270(a2, v2, v39);
                  uint64_t v18 = (_DWORD *)objc_claimAutoreleasedReturnValue();
                  id v19 = v56;
                  long long v56 = v18;

                  [*(id *)(v16 + 280) addObject:v56];
                  *(void *)(v16 + 48) = 4;
                  id v20 = [objc_alloc((Class)NSArray) initWithObjects:&v56 count:1];
                  uint64_t v21 = *(void **)(v16 + 288);
                  *(void *)(v16 + 288) = v20;

                  uint64_t v22 = v2;
                  long long v47 = 0u;
                  long long v48 = 0u;
                  long long v45 = 0u;
                  long long v46 = 0u;
                  id v23 = *(id *)(a2 + 72);
                  id v24 = [v23 countByEnumeratingWithState:&v45 objects:v57 count:16];
                  if (v24)
                  {
                    uint64_t v25 = *(void *)v46;
                    do
                    {
                      for (uint64_t j = 0; j != v24; uint64_t j = (char *)j + 1)
                      {
                        if (*(void *)v46 != v25) {
                          objc_enumerationMutation(v23);
                        }
                        [*(id *)(*((void *)&v45 + 1) + 8 * (void)j) touchDidTransfer:*(unsigned int *)(v16 + 16) destination:v56];
                      }
                      id v24 = [v23 countByEnumeratingWithState:&v45 objects:v57 count:16];
                    }
                    while (v24);
                  }

                  uint64_t v2 = v22;
                }
                else
                {
                  sub_10008CB5C(v16, (uint64_t)buf);
                  unsigned int v17 = sub_10008CE5C(a2, v16, v2, (uint64_t)v43, 1);
                  [v42 addObject:v17];
                }
              }
              id v13 = [obj countByEnumeratingWithState:&v49 objects:v58 count:16];
            }
            while (v13);
          }

          long long v27 = (const void *)sub_10008C6E4((uint64_t *)buf);
          long long v28 = objc_alloc_init(BKHIDEventCollector);
          sub_10001159C((void *)a2, (uint64_t)v27, (uint64_t)v56, (uint64_t)v28, 0, v42, *(double *)(a2 + 96));
          sub_100017570(a2, (uint64_t)v28);

          if (v27) {
            CFRelease(v27);
          }

          sub_10008C968((uint64_t)buf);
        }
        else
        {
          long long v30 = BKLogTouchEvents();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            uint64_t v31 = *(void *)(a2 + 8);
            *(_DWORD *)int buf = 138543362;
            *(void *)__int16 v60 = v31;
            _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "transfer: no eligible contacts for service %{public}@", buf, 0xCu);
          }
        }
        int v29 = v37;
      }
    }
  }
}

void sub_10005CFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005D180(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  uint64_t v2 = [*(id *)(a1 + 32) _queue_touchStreamClientForReference:*(unsigned int *)(a1 + 40)];
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *v1;
  if (v2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 32));
    uint64_t v6 = WeakRetained;
    if (WeakRetained)
    {
      uint64_t v7 = (void *)*((void *)WeakRetained + 1);
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 0;
LABEL_4:
  id v8 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_10005D324;
  v11[3] = &unk_1000F7210;
  id v9 = v3;
  id v12 = v9;
  [v4 _queue_enumerateDigitizersForDisplay:v8 usingBlock:v11];

  unsigned int v10 = BKLogTouchEvents();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138543362;
    id v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "invalidate touch stream (invalidated by client) %{public}@", buf, 0xCu);
  }

  sub_10009629C((id *)v9);
}

void sub_10005D2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10005D324(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if ((uint64_t)[a2[14] count] >= 1)
    {
      if (v3) {
        uint64_t v4 = *(void **)(v3 + 48);
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v6 = v4;
      sub_10008B9A0(a2, v6);
    }
    if (v3 && (unsigned int v5 = (id *)*(id *)(v3 + 48)) != 0)
    {
      uint64_t v7 = v5;
      [v5[3] removeObject:v3];
      sub_100016650((uint64_t)a2, (uint64_t)v7);
    }
    else
    {
      uint64_t v7 = 0;
      sub_100016650((uint64_t)a2, 0);
    }
  }
}

void sub_10005D3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10005D4C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  id v4 = [v3 length];
  unsigned int v5 = (void *)BKSDisplayUUIDMainKey;
  if (v4) {
    unsigned int v5 = v3;
  }
  id v6 = v5;

  uint64_t v7 = [v2 _queue_displayInfoForDisplay:v6 createIfNeeded:1];

  if (v7) {
    id v8 = (void *)v7[1];
  }
  else {
    id v8 = 0;
  }
  id v9 = v8;
  id v10 = [v9 taskPortForContextID:*(unsigned int *)(a1 + 64) displayUUID:*(void *)(a1 + 40)];
  if ((v10 - 1) >= 0xFFFFFFFE)
  {
    id v24 = BKLogTouchEvents();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      int v25 = *(_DWORD *)(a1 + 64);
      id v26 = NSStringFromBKSTouchStreamIdentifier();
      *(_DWORD *)int buf = 67109634;
      *(_DWORD *)long long v48 = v10;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v25;
      *(_WORD *)long long v49 = 2114;
      *(void *)&v49[2] = v26;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "BKDigitizerTouchStreamCreate: invalid taskPort (0x%X) for contextID:0x%X (touchstreamIdentifier:%{public}@)", buf, 0x18u);
    }
  }
  else
  {
    id v11 = objc_alloc_init(BKDigitizerTouchStreamClient);
    if (v11)
    {
      int64_t v12 = *(void *)(a1 + 56);
      if (v11->_versionedPID != v12)
      {
        v11->_versionedPID = v12;
        uint64_t v13 = BSProcessNameForPID();
        processName = v11->_processName;
        v11->_processName = (NSString *)v13;
      }
      v11->_shouldSendAmbiguityRecommendations = *(unsigned char *)(a1 + 72);
      v11->_touchStreamIdentifier = *(_DWORD *)(a1 + 68);
    }
    uint64_t v15 = *(unsigned int *)(a1 + 64);
    uint64_t v16 = self;
    unsigned int v17 = v11;
    if (!v11)
    {
      long long v27 = (objc_class *)objc_opt_class();
      long long v28 = NSStringFromClass(v27);
      int v29 = +[NSString stringWithFormat:@"Value for '%@' was unexpectedly nil. Expected %@.", @"touchStream", v28];

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        long long v30 = NSStringFromSelector("destinationWithTouchStream:contextID:clientPort:");
        uint64_t v31 = (objc_class *)objc_opt_class();
        long long v32 = NSStringFromClass(v31);
        *(_DWORD *)int buf = 138544642;
        *(void *)long long v48 = v30;
        *(_WORD *)&v48[8] = 2114;
        *(void *)long long v49 = v32;
        *(_WORD *)&v49[8] = 2048;
        uint64_t v50 = v16;
        __int16 v51 = 2114;
        CFStringRef v52 = @"BKTouchDestination.m";
        __int16 v53 = 1024;
        int v54 = 43;
        __int16 v55 = 2114;
        long long v56 = v29;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
      }
      [v29 UTF8String];
      _bs_set_crash_log_message();
      __break(0);
      JUMPOUT(0x10005D8D0);
    }
    uint64_t v18 = v17;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      long long v33 = (objc_class *)[(BKDigitizerTouchStreamClient *)v18 classForCoder];
      if (!v33) {
        long long v33 = (objc_class *)objc_opt_class();
      }
      id v34 = NSStringFromClass(v33);
      long long v35 = (objc_class *)objc_opt_class();
      long long v36 = NSStringFromClass(v35);
      long long v37 = +[NSString stringWithFormat:@"Value for '%@' was of unexpected class %@. Expected %@.", @"touchStream", v34, v36];

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        id v38 = NSStringFromSelector("destinationWithTouchStream:contextID:clientPort:");
        unsigned int v39 = (objc_class *)objc_opt_class();
        int v40 = NSStringFromClass(v39);
        *(_DWORD *)int buf = 138544642;
        *(void *)long long v48 = v38;
        *(_WORD *)&v48[8] = 2114;
        *(void *)long long v49 = v40;
        *(_WORD *)&v49[8] = 2048;
        uint64_t v50 = v16;
        __int16 v51 = 2114;
        CFStringRef v52 = @"BKTouchDestination.m";
        __int16 v53 = 1024;
        int v54 = 43;
        __int16 v55 = 2114;
        long long v56 = v37;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
      }
      [v37 UTF8String];
      _bs_set_crash_log_message();
      __break(0);
      JUMPOUT(0x10005DA0CLL);
    }

    if (!v15)
    {
      double v41 = +[NSString stringWithFormat:@"Invalid condition not satisfying: %@", @"contextID != 0"];
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        id v42 = NSStringFromSelector("destinationWithTouchStream:contextID:clientPort:");
        uint64_t v43 = (objc_class *)objc_opt_class();
        id v44 = NSStringFromClass(v43);
        *(_DWORD *)int buf = 138544642;
        *(void *)long long v48 = v42;
        *(_WORD *)&v48[8] = 2114;
        *(void *)long long v49 = v44;
        *(_WORD *)&v49[8] = 2048;
        uint64_t v50 = v16;
        __int16 v51 = 2114;
        CFStringRef v52 = @"BKTouchDestination.m";
        __int16 v53 = 1024;
        int v54 = 44;
        __int16 v55 = 2114;
        long long v56 = v41;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
      }
      [v41 UTF8String];
      _bs_set_crash_log_message();
      __break(0);
      JUMPOUT(0x10005DB04);
    }
    id v19 = sub_10000A378([BKTouchDestination alloc], v15, (uint64_t)v10);
    id v20 = v19;
    if (v19)
    {
      objc_storeWeak((id *)v19 + 5, v18);
      uint64_t v21 = 6;
      if (!v18->_shouldSendAmbiguityRecommendations) {
        uint64_t v21 = 2;
      }
      v20[4] = v21;
    }
    objc_storeStrong((id *)&v18->_touchDestination, v20);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) _queue_addTouchStreamClient:v18 toDisplayUUID:*(void *)(a1 + 40) versionedPID:*(void *)(a1 + 56)];
    id v23 = *(void **)(a1 + 32);
    uint64_t v22 = *(void *)(a1 + 40);
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472;
    v45[2] = sub_10005DB88;
    v45[3] = &unk_1000F7210;
    id v24 = v18;
    long long v46 = v24;
    [v23 _queue_enumerateDigitizersForDisplay:v22 usingBlock:v45];
  }
}

void sub_10005DB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10005DB88(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return result;
  }
  uint64_t v3 = *(void *)(result + 32);
  sub_10008C568((uint64_t)v22, (void *)a2);
  id v4 = objc_alloc_init((Class)NSMutableArray);
  if (!v3)
  {
    id v6 = 0;
    goto LABEL_21;
  }
  id v5 = *(id *)(v3 + 48);
  id v6 = v5;
  if (!v5)
  {
LABEL_21:
    unsigned int v7 = 0;
    goto LABEL_5;
  }
  [*((id *)v5 + 3) addObject:v3];
  unsigned int v7 = v6[2];
LABEL_5:
  [*(id *)(a2 + 120) setObject:v6 forKey:v7];
  if ((uint64_t)[*(id *)(a2 + 112) count] >= 1)
  {
    id v8 = [*(id *)(a2 + 8) displayUUID];
    if (v6) {
      uint64_t v9 = v6[2];
    }
    else {
      uint64_t v9 = 0;
    }
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v10 = *(id *)(a2 + 112);
    id v11 = [v10 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v12) {
            objc_enumerationMutation(v10);
          }
          uint64_t v14 = *(void *)(*((void *)&v18 + 1) + 8 * i);
          sub_10008CC38((uint64_t)v22);
          IOHIDEventSetIntegerValue();
          uint64_t v15 = sub_10008CE5C(a2, v14, v9, (uint64_t)v8, 0);
          [v4 addObject:v15];
        }
        id v11 = [v10 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }
      while (v11);
    }

    uint64_t v16 = (const void *)sub_10008C6E4(v22);
    unsigned int v17 = objc_alloc_init(BKHIDEventCollector);
    sub_10001159C((void *)a2, (uint64_t)v16, (uint64_t)v6, (uint64_t)v17, 0, v4, *(double *)(a2 + 96));
    sub_100017570(a2, (uint64_t)v17);

    if (v16) {
      CFRelease(v16);
    }
  }
  return sub_10008C968((uint64_t)v22);
}

void sub_10005DDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v20) {
    CFRelease(v20);
  }

  sub_10008C968((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_10005E02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_10005E05C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10005E120;
  v6[3] = &unk_1000F71C0;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v7 = v4;
  uint64_t v8 = v5;
  [v2 _queue_enumerateDigitizersForDisplay:v3 usingBlock:v6];
}

void sub_10005E0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_10005E110(uint64_t a1)
{
  return _[*(id *)(a1 + 32) makeObjectsPerformSelector:"invalidate"];
}

void sub_10005E120(uint64_t a1, uint64_t a2)
{
  sub_10000D21C((id)a2, 2u, 0);
  id v4 = *(void **)(a1 + 32);
  if (a2)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    sub_10000D21C((id)a2, 1u, 0);
    id v6 = *(void **)(a2 + 32);
    if (!v6)
    {
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"SuppressTouches-%llX", [*(id *)(a2 + 8) senderID]);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v7 = +[BSCompoundAssertion assertionWithIdentifier:](BSCompoundAssertion, "assertionWithIdentifier:");
      uint64_t v8 = *(void **)(a2 + 32);
      *(void *)(a2 + 32) = v7;

      uint64_t v9 = *(void **)(a2 + 32);
      BKLogTouchEvents();
      id v12 = (id)objc_claimAutoreleasedReturnValue();
      [v9 setLog:];

      id v6 = *(void **)(a2 + 32);
    }
    uint64_t v10 = [v6 acquireForReason:v5];
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v13 = (id)v10;
  [v4 addObject:v10];
}

void sub_10005E24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10005E344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10005E35C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queue_enumerateDigitizersForAllDisplaysUsingBlock:&stru_1000F7198];
}

void sub_10005E36C(id a1, BKDirectTouchState *a2)
{
}

id sub_10005E4EC(uint64_t a1)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v12;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        v16[v4 + (void)v6] = [*(id *)(*((void *)&v11 + 1) + 8 * (void)v6) unsignedIntegerValue];
        id v6 = (char *)v6 + 1;
      }
      while (v3 != v6);
      id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      v4 += (uint64_t)v6;
    }
    while (v3);
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10005E678;
  v10[3] = &unk_1000F7138;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  void v10[4] = v16;
  v10[5] = v8;
  return [v7 _queue_enumerateDigitizersForAllDisplaysUsingBlock:v10];
}

void sub_10005E658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005E678(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100074E8C(*(void *)(a2 + 112), *(int **)(a1 + 32), *(void *)(a1 + 40));
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    sub_10008B690((id *)a2, v3, 1, 0);
  }
}

void sub_10005E6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005E7F4(uint64_t a1)
{
}

void sub_10005E8F8(uint64_t a1)
{
}

void sub_10005E9FC(uint64_t a1)
{
}

void sub_10005EAB8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = [*(id *)(*(void *)(a1 + 40) + 24) description];
  id v2 = [v1 appendObject:withName:];
}

void sub_10005EB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005EBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10005EC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)BKHIDDirectTouchEventProcessor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_10005EC58(void *a1)
{
}

void sub_10005F2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id *location, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,id a46)
{
  objc_destroyWeak(v47);
  objc_destroyWeak(v46);

  objc_destroyWeak(location);
  objc_destroyWeak(&a46);

  _Unwind_Resume(a1);
}

void sub_10005F450(uint64_t a1)
{
  id WeakRetained = (double *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = BKLogTouchEvents();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      double v5 = 0.0 - WeakRetained[10];
      int v6 = 134217984;
      double v7 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "*** still waiting for a main screen digitizer -- %gs elapsed ***", (uint8_t *)&v6, 0xCu);
    }

    uint64_t v4 = (void *)*((void *)WeakRetained + 11);
    WeakRetained[11] = 0.0;
  }
  [*(id *)(a1 + 32) invalidate];
}

void sub_10005F534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005F550(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = v1[1];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005F70C;
  block[3] = &unk_1000F8E78;
  uint64_t v4 = v1;
  dispatch_sync(v2, block);
}

__CFString *sub_10005F5DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = +[BSDescriptionStream descriptionForRootObject:WeakRetained];
  }
  else
  {
    id v2 = @"<nil>";
  }

  return v2;
}

void sub_10005F644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005F654(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  double v5 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10005F6FC;
  v7[3] = &unk_1000F8A20;
  id v8 = WeakRetained;
  int v9 = a2;
  id v6 = WeakRetained;
  dispatch_async(v5, v7);
}

id sub_10005F6FC(uint64_t a1)
{
  return [_objc_msgSend(*(id *)(a1 + 32), "_queue_windowServerDidDeleteSlotID:", *(unsigned int *)(a1 + 40));
}

id sub_10005F70C(uint64_t a1)
{
  id v2 = +[BKSDefaults localDefaults];
  unsigned __int8 v3 = [v2 digitizerVisualizeTouches];

  uint64_t v4 = +[BKSDefaults localDefaults];
  unsigned __int8 v5 = [v4 digitizerVisualizeHitTestRegions];

  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10005F7E4;
  v8[3] = &unk_1000F70F0;
  unsigned __int8 v9 = v3;
  unsigned __int8 v10 = v5;
  return [v6 _queue_enumerateDigitizersForAllDisplaysUsingBlock:v8];
}

void sub_10005F7D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005F7E4(uint64_t a1, uint64_t a2)
{
}

void sub_10005F7F8(id a1)
{
  id v1 = +[BKSDefaults localDefaults];
  byte_100122F38 = [v1 isDigitizerSignpostsEnabled];
}

void sub_10005F850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005F9AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10005F9DC()
{
  if (qword_100122F58 != -1) {
    dispatch_once(&qword_100122F58, &stru_1000F74A8);
  }
  id v0 = (void *)qword_100122F50;

  return v0;
}

void sub_10005FA30(id a1)
{
  os_log_t v1 = os_log_create(BKLoggingSubsystem, "BootUI");
  id v2 = (void *)qword_100122F50;
  qword_100122F50 = (uint64_t)v1;
}

id sub_10005FA78()
{
  if (qword_100122F68 != -1) {
    dispatch_once(&qword_100122F68, &stru_1000F74C8);
  }
  id v0 = (void *)qword_100122F60;

  return v0;
}

void sub_10005FACC(id a1)
{
  os_log_t v1 = os_log_create(BKLoggingSubsystem, "Button");
  id v2 = (void *)qword_100122F60;
  qword_100122F60 = (uint64_t)v1;
}

id sub_10005FB14()
{
  if (qword_100122F78 != -1) {
    dispatch_once(&qword_100122F78, &stru_1000F74E8);
  }
  id v0 = (void *)qword_100122F70;

  return v0;
}

void sub_10005FB68(id a1)
{
  os_log_t v1 = os_log_create(BKLoggingSubsystem, "DisplayAnnotations");
  id v2 = (void *)qword_100122F70;
  qword_100122F70 = (uint64_t)v1;
}

id sub_10005FBB0()
{
  if (qword_100122F88 != -1) {
    dispatch_once(&qword_100122F88, &stru_1000F7508);
  }
  id v0 = (void *)qword_100122F80;

  return v0;
}

void sub_10005FC04(id a1)
{
  os_log_t v1 = os_log_create(BKLoggingSubsystem, "DisplayMonitor");
  id v2 = (void *)qword_100122F80;
  qword_100122F80 = (uint64_t)v1;
}

id sub_10005FC4C()
{
  if (qword_100122F98 != -1) {
    dispatch_once(&qword_100122F98, &stru_1000F7528);
  }
  id v0 = (void *)qword_100122F90;

  return v0;
}

void sub_10005FCA0(id a1)
{
  os_log_t v1 = os_log_create(BKLoggingSubsystem, "HID");
  id v2 = (void *)qword_100122F90;
  qword_100122F90 = (uint64_t)v1;
}

id sub_10005FCE8()
{
  if (qword_100122FA8 != -1) {
    dispatch_once(&qword_100122FA8, &stru_1000F7548);
  }
  id v0 = (void *)qword_100122FA0;

  return v0;
}

void sub_10005FD3C(id a1)
{
  os_log_t v1 = os_log_create(BKLoggingSubsystem, "IdleTimer");
  id v2 = (void *)qword_100122FA0;
  qword_100122FA0 = (uint64_t)v1;
}

id sub_10005FD84()
{
  if (qword_100122FB8 != -1) {
    dispatch_once(&qword_100122FB8, &stru_1000F7568);
  }
  id v0 = (void *)qword_100122FB0;

  return v0;
}

void sub_10005FDD8(id a1)
{
  os_log_t v1 = os_log_create(BKLoggingSubsystem, "RenderOverlay");
  id v2 = (void *)qword_100122FB0;
  qword_100122FB0 = (uint64_t)v1;
}

id sub_10005FE20()
{
  if (qword_100122FC8 != -1) {
    dispatch_once(&qword_100122FC8, &stru_1000F7588);
  }
  id v0 = (void *)qword_100122FC0;

  return v0;
}

void sub_10005FE74(id a1)
{
  os_log_t v1 = os_log_create(BKLoggingSubsystem, "HapticFeedback");
  id v2 = (void *)qword_100122FC0;
  qword_100122FC0 = (uint64_t)v1;
}

void sub_10005FEBC(id a1)
{
  os_log_t v1 = os_log_create(BKLoggingSubsystem, "Accelerometer");
  id v2 = (void *)qword_100122FD0;
  qword_100122FD0 = (uint64_t)v1;
}

id sub_10005FF04()
{
  if (qword_100122FE8 != -1) {
    dispatch_once(&qword_100122FE8, &stru_1000F75C8);
  }
  id v0 = (void *)qword_100122FE0;

  return v0;
}

void sub_10005FF58(id a1)
{
  os_log_t v1 = os_log_create(BKLoggingSubsystem, "KeyPresses");
  id v2 = (void *)qword_100122FE0;
  qword_100122FE0 = (uint64_t)v1;
}

void sub_100060A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100060A80(void *result, uint64_t a2, int a3)
{
  if (a2)
  {
    unsigned __int8 v3 = result;
    if (a3)
    {
      uint64_t v4 = (void *)result[4];
      if (a3 != 1)
      {
        if (*(unsigned char *)(*(void *)(v3[5] + 8) + 24)) {
          id result = [v4 appendFormat:@", %d", (a3 + 1)];
        }
        else {
          id result = [v4 appendFormat:@"%d", (a3 + 1)];
        }
        goto LABEL_14;
      }
      if (*(unsigned char *)(*(void *)(v3[5] + 8) + 24)) {
        CFStringRef v5 = @", secondary";
      }
      else {
        CFStringRef v5 = @"secondary";
      }
    }
    else
    {
      uint64_t v4 = (void *)result[4];
      if (*(unsigned char *)(*(void *)(v3[5] + 8) + 24)) {
        CFStringRef v5 = @", primary";
      }
      else {
        CFStringRef v5 = @"primary";
      }
    }
    id result = [v4 appendString:v5];
LABEL_14:
    *(unsigned char *)(*(void *)(v3[5] + 8) + 24) = 1;
  }
  return result;
}

uint64_t sub_100061778(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100061788(uint64_t a1)
{
}

id sub_100061814(uint64_t a1)
{
  CFStringRef v11 = @"accelerometer";
  v9[0] = @"x";
  id v2 = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  v10[0] = v2;
  v9[1] = @"y";
  unsigned __int8 v3 = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  v10[1] = v3;
  void v9[2] = @"z";
  uint64_t v4 = +[NSNumber numberWithDouble:*(double *)(a1 + 48)];
  void v10[2] = v4;
  void v9[3] = @"type";
  CFStringRef v5 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 56)];
  v10[3] = v5;
  id v6 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:4];
  long long v12 = v6;
  double v7 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];

  return v7;
}

void sub_100061C50(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32);
  id v4 = a2;
  [v4 setWantsOrientationEvents:v3];
  [v4 setPassiveOrientationEvents:*(unsigned __int8 *)(a1 + 33)];
}

void sub_100061FCC(id a1)
{
  os_log_t v1 = objc_alloc_init(BKAccelerometerInterface);
  id v2 = (void *)qword_100122FF0;
  qword_100122FF0 = (uint64_t)v1;
}

uint64_t sub_1000623C4(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 8) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_10006278C(uint64_t a1)
{
  id v2 = BKLogAlternateSystemApp();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Manager] Terminating alternate system app with bundleID: %{public}@", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(*(void *)(a1 + 40) + 32) terminate];
  [*(id *)(a1 + 40) _queue_cleanUpAfterAlternativeSystemApp:*(void *)(*(void *)(a1 + 40) + 32)];
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100062970(uint64_t a1)
{
  id v2 = BKLogAlternateSystemApp();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)int buf = 138543362;
    uint64_t v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Manager] Open alternate system app with bundleID: %{public}@", buf, 0xCu);
  }

  id v4 = [[BKAlternateSystemApp alloc] initWithBundleId:*(void *)(a1 + 32) options:*(void *)(a1 + 40) queue:*(void *)(*(void *)(a1 + 48) + 24)];
  if (v4)
  {
    [*(id *)(a1 + 48) setOpenBundleId:*(void *)(a1 + 32)];
    [*(id *)(a1 + 48) setAlternateSystemApp:v4];
    int v5 = +[BKSystemShellSentinel sharedInstance];
    [v5 setActiveAlternateSystemAppBundleIdentifier:*(void *)(a1 + 32)];

    objc_initWeak((id *)buf, *(id *)(a1 + 48));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_100062C00;
    v11[3] = &unk_1000F7708;
    objc_copyWeak(&v14, (id *)buf);
    uint64_t v6 = v4;
    long long v12 = v6;
    id v13 = *(id *)(a1 + 56);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100062C68;
    v7[3] = &unk_1000F7730;
    objc_copyWeak(&v10, (id *)buf);
    id v8 = v6;
    id v9 = *(id *)(a1 + 64);
    [(BKAlternateSystemApp *)v8 launchWithResultBlock:v11 exitBlock:v7];

    objc_destroyWeak(&v10);
    objc_destroyWeak(&v14);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_100062BD4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_100062C00(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained _queue_cleanUpAfterAlternativeSystemApp:*(void *)(a1 + 32)];
  }
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v4();
}

void sub_100062C68(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 48);
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained _queue_cleanUpAfterAlternativeSystemApp:*(void *)(a1 + 32)];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_100062E84(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100062E94(uint64_t a1)
{
}

void sub_100062E9C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 32) bundleID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t sub_100062F98(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

void sub_100063064(id a1)
{
  os_log_t v1 = objc_alloc_init(BKAlternateSystemAppManager);
  uint64_t v2 = (void *)qword_100123000;
  qword_100123000 = (uint64_t)v1;
}

void sub_100063C64(id a1)
{
  byte_100123020 = BSSystemHasCapability();
}

void sub_100063E9C(uint64_t a1, void *a2)
{
  sub_10001C32C();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [a2 noteInterfaceOrientationChangedWithInterfaceOrientation:sub_100094900((uint64_t)v3)];
}

id sub_100064380(uint64_t a1, void *a2)
{
  return _[a2 _handleDemoModeChanged];
}

void sub_1000643DC(id a1)
{
  if (!sub_1000073A4())
  {
    os_log_t v1 = objc_alloc_init(BKTetherController);
    uint64_t v2 = (void *)qword_100123010;
    qword_100123010 = (uint64_t)v1;
  }
}

BKHIDUISensorConfiguringService *__cdecl sub_100064AC8(id a1, BKIOHIDService *a2)
{
  uint64_t v2 = a2;
  id v3 = [(BKIOHIDService *)v2 propertyForKey:@"Placement"];
  id v4 = v3;
  if (v3 && [v3 intValue] == 1)
  {
    id v5 = BKLogUISensor();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      id v20 = [(BKIOHIDService *)v2 senderID];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "discrete prox service %llX top placement", (uint8_t *)&v19, 0xCu);
    }

    uint64_t v6 = os_log_create("com.apple.AppleProxSupport", "hid-driver");
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
    id v8 = BKLogUISensor();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v9)
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Prox debug mode enabled!", (uint8_t *)&v19, 2u);
      }

      [(BKIOHIDService *)v2 setProperty:&__kCFBooleanTrue forKey:@"EnableDebugMode"];
    }
    else
    {
      if (v9)
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Prox debug mode not enabled!", (uint8_t *)&v19, 2u);
      }
    }
    CFStringRef v11 = [(BKIOHIDService *)v2 propertyForKey:@"NeedsHostState"];
    uint64_t v12 = objc_opt_class();
    id v13 = v11;
    if (v12)
    {
      if (objc_opt_isKindOfClass()) {
        id v14 = v13;
      }
      else {
        id v14 = 0;
      }
    }
    else
    {
      id v14 = 0;
    }
    id v15 = v14;

    unsigned int v16 = [v15 BOOLValue];
    unsigned int v17 = off_1000F5130;
    if (!v16) {
      unsigned int v17 = off_1000F5120;
    }
    id v10 = [objc_alloc(*v17) initWithIOHIDService:v2];
  }
  else
  {
    uint64_t v6 = BKLogUISensor();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      id v20 = [(BKIOHIDService *)v2 senderID];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ignoring discrete prox service %llX not top placement", (uint8_t *)&v19, 0xCu);
    }
    id v10 = 0;
  }

  return (BKHIDUISensorConfiguringService *)v10;
}

void sub_100064FBC(uint64_t a1)
{
  id v3 = +[CAWindowServer serverIfRunning];
  uint64_t v2 = [v3 displayWithName:@"TVOut"];
  if (v2) {
    [*(id *)(*(void *)(a1 + 32) + 16) evaluateDisplay:v2 reason:@"updateTVOutDisplaySettings"];
  }
}

void sub_100065134(uint64_t a1, void *a2, void *a3, char a4)
{
  if (a1)
  {
    long long v27 = +[CAWindowServer serverIfRunning];
    uint64_t v6 = [v27 displays];
    uint64_t v7 = [v6 firstObject];

    id v26 = (void *)v7;
    if (v7)
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      id v8 = +[CADisplay displays];
      id v9 = [v8 countByEnumeratingWithState:&v29 objects:v35 count:16];
      if (v9)
      {
        id v10 = v9;
        id v24 = a3;
        id v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = *(void *)v30;
        do
        {
          for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
          {
            id v15 = v12;
            if (*(void *)v30 != v13) {
              objc_enumerationMutation(v8);
            }
            unsigned int v16 = *(void **)(*((void *)&v29 + 1) + 8 * i);
            uint64_t v12 = [v16 name];

            if ([v12 hasPrefix:@"Wireless"])
            {
              if (a4) {
                id v17 = [v16 immutableCopy];
              }
              else {
                id v17 = v16;
              }
              id v19 = v17;
              if (v17)
              {
                if (!v11) {
                  id v11 = objc_alloc_init((Class)NSMutableArray);
                }
                [v11 addObject:v19];
              }
            }
            else if ([v12 isEqualToString:@"TVOut"] {
                   && !*(unsigned char *)(a1 + 40))
            }
            {
              if (a4) {
                id v22 = [v16 immutableCopy];
              }
              else {
                id v22 = v16;
              }
              id v19 = v22;
              if (v24)
              {
                id v19 = v22;
                *id v24 = v19;
              }
            }
            else
            {
              uint64_t v18 = [v27 displayWithDisplayId:[v16 displayId]];
              if ((void *)v18 == v26)
              {
                id v19 = v26;
              }
              else
              {
                id v19 = (id)v18;
                id v20 = BKLogDisplay();
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                {
                  long long v21 = [v16 name];
                  *(_DWORD *)int buf = 138543362;
                  id v34 = v21;
                  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Tagging unknown display %{public}@ with available modes", buf, 0xCu);
                }
                [v19 setTag:0x10000];
              }
            }
          }
          id v10 = [v8 countByEnumeratingWithState:&v29 objects:v35 count:16];
        }
        while (v10);
      }
      else
      {
        id v11 = 0;
        uint64_t v12 = 0;
      }

      id v23 = v11;
      *a2 = v23;
    }
    else
    {
      uint64_t v12 = BKLogDisplay();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "We seeem to be headless", buf, 2u);
      }
    }
  }
}

void sub_100065480(uint64_t a1)
{
  uint64_t v2 = +[CAWindowServer serverIfRunning];
  *(unsigned char *)(*(void *)(a1 + 32) + 42) = 1;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = *(id *)(a1 + 40);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        sub_1000655E8(*(void *)(a1 + 32), *(void **)(*((void *)&v9 + 1) + 8 * (void)v7), 2uLL);
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }

  if (*(void *)(a1 + 48))
  {
    id v8 = [v2 displayWithName:@"TVOut" v9];
    sub_1000655E8(*(void *)(a1 + 32), *(void **)(a1 + 48), 1uLL);
    sub_100065A28(*(void *)(a1 + 32), 0, v8);
  }
}

void sub_1000655E8(uint64_t a1, void *a2, unint64_t a3)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_36;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  uint64_t v6 = +[CAWindowServer server];
  uint64_t v7 = [v6 displayWithDisplayId:-[__CFString displayId](v5, "displayId")];
  id v8 = [(__CFString *)v5 availableModes];
  id v9 = [v8 count];

  if (!v9)
  {
    id v17 = BKLogDisplay();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = 138543362;
      CFStringRef v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "AMDC No available modes; removing clone/tags if needed %{public}@",
        (uint8_t *)&v29,
        0xCu);
    }

    [*(id *)(a1 + 16) removeDisplay:v7];
    if (a3 == 1) {
      *(unsigned char *)(a1 + 41) = 0;
    }
    goto LABEL_33;
  }
  long long v10 = [v6 displays];
  long long v11 = [v10 firstObject];

  long long v12 = [v11 clones];
  id v13 = [v12 count];
  id v14 = BKLogDisplay();
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v15)
    {
      if (a3 > 2) {
        CFStringRef v16 = @"<unknown>";
      }
      else {
        CFStringRef v16 = *(&off_1000F78D0 + a3);
      }
      int v29 = 138543874;
      CFStringRef v30 = v16;
      __int16 v31 = 2114;
      long long v32 = v5;
      __int16 v33 = 2114;
      id v34 = v12;
      id v19 = "Available modes changed (%{public}@) on %{public}@; clones:%{public}@";
      id v20 = v14;
      uint32_t v21 = 32;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v29, v21);
    }
  }
  else if (v15)
  {
    if (a3 > 2) {
      CFStringRef v18 = @"<unknown>";
    }
    else {
      CFStringRef v18 = *(&off_1000F78D0 + a3);
    }
    int v29 = 138543618;
    CFStringRef v30 = v18;
    __int16 v31 = 2114;
    long long v32 = v5;
    id v19 = "Available modes changed (%{public}@) on %{public}@; no clones";
    id v20 = v14;
    uint32_t v21 = 22;
    goto LABEL_18;
  }

  if (a3 == 2)
  {
    id v26 = BKLogDisplay();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "AMDC Wireless", (uint8_t *)&v29, 2u);
    }

    [*(id *)(a1 + 16) evaluateDisplay:v7 reason:@"WirelessDisplayModeDidChange"];
  }
  else if (a3 == 1)
  {
    id v22 = BKLogDisplay();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "AMDC TVOut", (uint8_t *)&v29, 2u);
    }

    id v23 = *(NSObject **)(a1 + 8);
    id v24 = v7;
    dispatch_assert_queue_V2(v23);
    int v25 = BKLogDisplay();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "availableModesDidChangeForPurpleTVOut", (uint8_t *)&v29, 2u);
    }

    [*(id *)(a1 + 16) evaluateDisplay:v24 reason:@"PurpleTVOutDisplayModeChange"];
    *(unsigned char *)(a1 + 41) = 1;
  }
  else
  {
    long long v27 = BKLogDisplay();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "AMDC Unknown display", (uint8_t *)&v29, 2u);
    }

    [v7 setTag:0x10000];
  }

LABEL_33:
  long long v28 = BKLogDisplay();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v29) = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "AMDC done", (uint8_t *)&v29, 2u);
  }

LABEL_36:
}

void sub_100065A28(uint64_t a1, int a2, void *a3)
{
  id v7 = a3;
  if (a1)
  {
    if (a2)
    {
      id v5 = [[_BKDisplayBlankingContext alloc] initForDisplay:v7];
      uint64_t v6 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v5;

      [*(id *)(a1 + 24) blank];
    }
    else
    {
      [*(id *)(a1 + 24) clear];
    }
  }
}

void sub_100065D50(uint64_t a1)
{
  uint64_t v2 = BKLogDisplay();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)id v14 = 138543618;
    *(void *)&void v14[4] = v3;
    *(_WORD *)&v14[12] = 2114;
    *(void *)&v14[14] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Current mode changed on %{public}@ -> %{public}@", v14, 0x16u);
  }

  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  if (v5)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v5 + 8));
    id v7 = [v6 currentMode];
    id v8 = [v7 width];
    id v9 = [v7 height];
    long long v10 = [v6 name];
    if ([v10 isEqual:@"TVOut"] && *(unsigned char *)(v5 + 40))
    {
      *(void *)id v14 = _NSConcreteStackBlock;
      *(void *)&v14[8] = 3221225472;
      *(void *)&v14[16] = sub_100065FB8;
      BOOL v15 = &unk_1000F8C58;
      id v16 = v7;
      double v17 = (double)(unint64_t)v8;
      double v18 = (double)(unint64_t)v9;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v14);
      long long v11 = v16;
    }
    else
    {
      long long v12 = +[CAWindowServer server];
      long long v11 = [v12 displayWithDisplayId:[v6 displayId]];

      if (v11)
      {
        [*(id *)(v5 + 16) evaluateDisplay:v11 reason:@"currentModeDidChangeForDisplay"];
      }
      else
      {
        id v13 = BKLogDisplay();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)id v14 = 138543362;
          *(void *)&void v14[4] = v6;
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "cannot find window server display for %{public}@", v14, 0xCu);
        }

        long long v11 = 0;
      }
    }
  }
}

void sub_100065FA8(uint64_t a1)
{
}

void sub_100065FB8(uint64_t a1)
{
  double v2 = (double)(unint64_t)[*(id *)(a1 + 32) preferredScale];
  if (BSFloatLessThanFloat())
  {
    uint64_t v3 = BKLogDisplay();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      id v9 = +[NSNumber numberWithDouble:v2];
      *(_DWORD *)long long v10 = 138543362;
      *(void *)&void v10[4] = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "preferredScale is %{public}@, using 1.0 instead", v10, 0xCu);
    }
    double v2 = 1.0;
  }
  CGFloat v4 = *(double *)(a1 + 40);
  CGFloat v5 = *(double *)(a1 + 48);
  id v6 = BKLogDisplay();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v16.width = v4;
    v16.height = v5;
    id v7 = NSStringFromSize(v16);
    id v8 = +[NSNumber numberWithDouble:v2];
    *(_DWORD *)long long v10 = 138543618;
    *(void *)&void v10[4] = v7;
    *(_WORD *)&v10[12] = 2114;
    *(void *)&v10[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting main screen size to %{public}@ and scale to %{public}@", v10, 0x16u);
  }
  if (qword_100122E58 != -1) {
    dispatch_once(&qword_100122E58, &stru_1000F66F8);
  }
  *(void *)long long v10 = _NSConcreteStackBlock;
  *(void *)&v10[8] = 3221225472;
  *(void *)&v10[16] = sub_100038FF0;
  long long v11 = &unk_1000F6640;
  CGFloat v12 = v4;
  CGFloat v13 = v5;
  char v15 = (int)*(double *)&qword_100122E50;
  double v14 = v2;
  sub_1000112C0(v10);
}

void sub_100066894()
{
  sub_1000668EC();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  [v0 performSelectorOnMainThread:"_handleIapServerConnectionDied" withObject:0 waitUntilDone:0];
}

id sub_1000668EC()
{
  self;
  if (qword_100123038 != -1) {
    dispatch_once(&qword_100123038, &stru_1000F7818);
  }
  id v0 = (void *)qword_100123030;

  return v0;
}

void sub_100066944(id a1)
{
  if (!sub_1000073A4())
  {
    os_log_t v1 = objc_alloc_init(BKTVOutController);
    double v2 = (void *)qword_100123030;
    qword_100123030 = (uint64_t)v1;
  }
}

void sub_100066990()
{
}

void sub_1000669A4(id a1)
{
  sub_1000668EC();
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  -[BKTVOutController _handleIapServerConnectionDied]_0((uint64_t)v1);
}

id sub_1000669EC(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) setCloneRotationDisabled:*(unsigned __int8 *)(a1 + 40)];
}

id sub_100066A00(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) addModeRequest:*(void *)(a1 + 48) forDisplay:*(void *)(a1 + 40) clientPID:*(unsigned int *)(a1 + 56)];
}

id sub_100066A18(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) removeModeRequestForDisplay:*(void *)(a1 + 40) clientPID:*(unsigned int *)(a1 + 48)];
}

void sub_100066D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100066DA8(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id result = [a3 pid];
  if (*(_DWORD *)(a1 + 40) == result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1000670B4(id a1)
{
  id v1 = [BKTouchDeliveryGenericGestureFocusObserver alloc];
  id v4 = +[BKHIDSystemInterface sharedInstance];
  double v2 = [(BKTouchDeliveryGenericGestureFocusObserver *)v1 initWithHIDSystem:v4];
  uint64_t v3 = (void *)qword_100123048;
  qword_100123048 = (uint64_t)v2;
}

const os_unfair_lock *sub_100067884(const os_unfair_lock *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    os_unfair_lock_assert_owner(result + 2);
    [*(id *)(v3 + 216) frameWillBegin];
    if ([*(id *)(v3 + 216) eventTypeMask])
    {
      char v4 = 0;
      do
      {
        char v5 = 0;
        char v8 = 0;
        if ((v4 & 1) == 0)
        {
          sub_10006798C(v3, &v8);
          if (v8)
          {
            id v6 = [*(id *)(v3 + 216) shouldUseButtonDownRecenteringBehavior];
            char v5 = 1;
            [*(id *)(v3 + 216) setShouldUseButtonDownRecenteringBehavior:1];
            sub_100067D70(v3, a2, 1);
            [*(id *)(v3 + 216) setShouldUseButtonDownRecenteringBehavior:v6];
          }
          else
          {
            char v5 = 0;
          }
        }
        v4 |= v5;
        sub_100067D70(v3, a2, v5);
        [*(id *)(v3 + 216) nextEvent];
      }
      while ([*(id *)(v3 + 216) eventTypeMask]);
      [*(id *)(v3 + 336) didPostEvent];
    }
    id v7 = *(void **)(v3 + 216);
    return (const os_unfair_lock *)[v7 frameDidEnd];
  }
  return result;
}

void sub_10006798C(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
  if ([*(id *)(a1 + 216) positionType] != (id)1
    && ![*(id *)(a1 + 216) previousButtonMask]
    && [*(id *)(a1 + 216) buttonMask]
    && [*(id *)(a1 + 376) count]
    && *(void *)(a1 + 120))
  {
    char v4 = [*(id *)(a1 + 376) lastObject];
    char v5 = v4;
    if (v4)
    {
      int v40 = [v4 displayUUID];
      id v6 = [*(id *)(a1 + 56) immutableDisplayForUUID:];
      if (v6)
      {
        long long v37 = v5;
        id v7 = [v5 contextRelativePointerPosition];
        long long v36 = v6;
        double v8 = sub_10006C09C(a1, v7, v6);
        double v10 = v9;

        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        id obj = [*(id *)(a1 + 112) regions];
        id v11 = [obj countByEnumeratingWithState:&v41 objects:v47 count:16];
        if (!v11) {
          goto LABEL_23;
        }
        id v12 = v11;
        uint64_t v39 = *(void *)v42;
        CGFloat v13 = (void *)BKSDisplayUUIDMainKey;
        while (2)
        {
          for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v42 != v39) {
              objc_enumerationMutation(obj);
            }
            char v15 = *(void **)(*((void *)&v41 + 1) + 8 * i);
            id v16 = [v15 displayUUID];
            if ([v16 length]) {
              double v17 = v16;
            }
            else {
              double v17 = v13;
            }
            id v18 = v17;

            id v19 = v40;
            if ([v19 length]) {
              id v20 = v19;
            }
            else {
              id v20 = v13;
            }
            id v21 = v20;

            unsigned __int8 v22 = [v18 isEqualToString:v21];
            if (v22)
            {
              id v23 = v15;

              if (!v23) {
                goto LABEL_28;
              }
              [*(id *)(a1 + 112) convertToGlobalPoint:v23 fromRegion:v8];
              double v25 = v24;
              double v27 = v26;
              char v5 = v37;
              id v28 = [v37 restrictingToPID];
              if (v28 != -1)
              {
                id v29 = v28;
                CFStringRef v30 = sub_10006C1C0(a1, v25, v27);
                __int16 v31 = +[NSNumber numberWithInt:v29];
                unsigned int v32 = [v30 containsObject:v31];

                if (*(void *)(a1 + 120))
                {
                  [*(id *)(a1 + 112) convertToGlobalPoint:*(double *)(a1 + 144) fromRegion:*(double *)(a1 + 152)];
                }
                else
                {
                  double x = CGPointZero.x;
                  double y = CGPointZero.y;
                }
                if (sqrt((v25 - x) * (v25 - x) + (v27 - y) * (v27 - y)) > 160.0)
                {
                  long long v35 = BKLogMousePointer();
                  id v6 = v36;
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int buf = 134217984;
                    uint64_t v46 = 0x4064000000000000;
                    _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Not recentering on click because distance exceeds limit of %f pts.", buf, 0xCu);
                  }

                  goto LABEL_37;
                }

                if (!v32) {
                  goto LABEL_36;
                }
              }
              ++*(void *)(a1 + 136);
              sub_10006B228(a1, 0, @"recenterModelPoint", v25, v27);
              *a2 = 1;
              goto LABEL_36;
            }
          }
          id v12 = [obj countByEnumeratingWithState:&v41 objects:v47 count:16];
          if (v12) {
            continue;
          }
          break;
        }
LABEL_23:

        id v23 = 0;
LABEL_28:
        char v5 = v37;
LABEL_36:
        id v6 = v36;
LABEL_37:
      }
    }
  }
}

void sub_100067D70(uint64_t a1, void *a2, char a3)
{
  id v6 = (const os_unfair_lock *)(a1 + 8);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  id obj = a2;
  long long v99 = (unint64_t)a2;
  *((void *)&v99 + 1) = [*(id *)(a1 + 216) lastRemoteEventTimestamp];
  *(void *)&long long v100 = [*(id *)(a1 + 216) eventSequenceStartTimestamp];
  [*(id *)(a1 + 216) unacceleratedRelativePointerPosition];
  *((void *)&v100 + 1) = v7;
  *(void *)&long long v101 = v8;
  [*(id *)(a1 + 216) acceleratedRelativePointerPosition];
  double v10 = v9;
  double v12 = v11;
  *((double *)&v101 + 1) = v9;
  *(double *)&long long v102 = v11;
  *((void *)&v102 + 1) = [*(id *)(a1 + 216) mostRecentSender];
  *(void *)&long long v103 = +[BKTouchDeliveryPolicyServer sharedServer];
  BYTE8(v103) = 0;
  char v97 = 0;
  sub_10006798C(a1, &v97);
  if (a3) {
    goto LABEL_18;
  }
  unsigned int v13 = [*(id *)(a1 + 216) absolutePositionIsValid];
  char v14 = v13;
  if (v13)
  {
    [*(id *)(a1 + 216) pointerAbsolutePosition];
    double v16 = v15;
    double v18 = v17;
    os_unfair_lock_assert_owner(v6);
    [*(id *)(a1 + 112) denormalizedAbsoluteGlobalPosition:v16, v18];
    double v20 = v19;
    double v22 = v21;
    if (*(void *)(a1 + 120)) {
      [*(id *)(a1 + 112) convertToGlobalPoint:*(double *)(a1 + 144) fromRegion:*(double *)(a1 + 152)];
    }
    if ((BSPointEqualToPoint() & 1) == 0)
    {
      sub_10006B228(a1, 0, @"HID abs", v20, v22);
      long long v124 = 0u;
      long long v125 = 0u;
      long long v122 = 0u;
      long long v123 = 0u;
      id v23 = *(id *)(a1 + 352);
      id v24 = [v23 countByEnumeratingWithState:&v122 objects:buf count:16];
      if (v24)
      {
        uint64_t v25 = *(void *)v123;
        do
        {
          for (uint64_t i = 0; i != v24; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v123 != v25) {
              objc_enumerationMutation(v23);
            }
            [*(id *)(*((void *)&v122 + 1) + 8 * i) observeMouseAbsolutePointDidChange:v20, v22];
          }
          id v24 = [v23 countByEnumeratingWithState:&v122 objects:buf count:16];
        }
        while (v24);
      }
    }
    [*(id *)(a1 + 216) invalidateAbsolutePosition];
  }
  if (v10 != 0.0 || v12 != 0.0)
  {
    sub_100068944(a1, @"HID r", v10, v12);
LABEL_18:
    char v14 = 0;
  }
  BYTE9(v103) = v14;
  double v86 = [*(id *)(a1 + 120) displayUUID];
  CGFloat v95 = 0.0;
  CGFloat v96 = 0.0;
  id v94 = 0;
  sub_100068B24(a1, &v95, &v94, (const os_unfair_lock **)&v98 + 1);
  id v87 = v94;
  if (!v87) {
    goto LABEL_97;
  }
  unint64_t v27 = (unint64_t)[*(id *)(a1 + 216) hitTestReason];
  *(void *)&long long v98 = v27;
  uint64_t v28 = v27;
  if (!v27)
  {
    if ([*(id *)(a1 + 224) count])
    {
      if (!v97)
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
        goto LABEL_27;
      }
      unint64_t v27 = 5;
    }
    else
    {
      unint64_t v27 = 4;
    }
    *(void *)&long long v98 = v27;
    uint64_t v28 = 4;
  }
LABEL_27:
  BYTE8(v103) = v28 != 0;
  double v29 = v95;
  double v30 = v96;
  if (v28)
  {
    __int16 v31 = sub_1000298E0(v95, v96, (uint64_t)BKMouseDestination, (v27 > 6) | (0xCu >> v27) & 1, v87, *((void **)&v102 + 1), *(void **)(a1 + 24), *(void **)(a1 + 224));
    id v32 = [v31 mutableCopy];
    [v32 minusSet:*(void *)(a1 + 224)];
    id v33 = v32;
    id v34 = [v31 mutableCopy];
    [v34 intersectSet:*(void *)(a1 + 224)];
    [v34 unionSet:*(void *)(a1 + 400)];
    long long v35 = *(void **)(a1 + 224);
    id v36 = v34;
    id v37 = [v35 mutableCopy];
    [v37 minusSet:v31];
    id v38 = *(void **)(a1 + 224);
    *(void *)(a1 + 224) = v31;
  }
  else
  {
    id v36 = *(id *)(a1 + 224);
    id v37 = 0;
    id v33 = 0;
  }
  id v39 = v33;
  id v40 = v36;
  id v41 = v37;

  id v85 = v39;
  id v83 = v40;
  id v88 = v41;
  double v92 = objc_alloc_init(BKHIDEventCollector);
  long long v42 = *(void **)(a1 + 384);
  long long v43 = [*(id *)(a1 + 120) displayUUID];
  double v84 = [v42 objectForKeyedSubscript:v43];

  sub_100068C5C(a1, v84, (uint64_t)&v98, (uint64_t)v92, v29, v30);
  long long v44 = [*(id *)(a1 + 120) displayUUID];
  long long v124 = 0u;
  long long v125 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  id v45 = [*(id *)(a1 + 392) copy];
  id v46 = [v45 countByEnumeratingWithState:&v122 objects:buf count:16];
  if (v46)
  {
    uint64_t v47 = *(void *)v123;
    do
    {
      long long v48 = 0;
      do
      {
        if (*(void *)v123 != v47) {
          objc_enumerationMutation(v45);
        }
        uint64_t v49 = *(void *)(*((void *)&v122 + 1) + 8 * (void)v48);
        if (v49) {
          uint64_t v50 = *(void **)(v49 + 40);
        }
        else {
          uint64_t v50 = 0;
        }
        id v51 = v50;
        char v52 = BSEqualObjects();

        if ((v52 & 1) == 0)
        {
          sub_1000298C8(v49, *((void **)&v102 + 1));
          sub_10006A9A0(a1, v49, v121, (uint64_t)&v98, v29, v30);
          sub_10006B0F0(a1, 0, (_DWORD *)v49, (uint64_t)&v98, (uint64_t)v92);
        }
        long long v48 = (char *)v48 + 1;
      }
      while (v46 != v48);
      id v53 = [v45 countByEnumeratingWithState:&v122 objects:buf count:16];
      id v46 = v53;
    }
    while (v53);
  }

  if ((void)v98 == 1) {
    sub_100068EB4(a1, 0, (uint64_t)v86, 1, (uint64_t)obj, (uint64_t)v92);
  }
  if ([*(id *)(a1 + 352) count])
  {
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    id obja = v85;
    id v54 = [obja countByEnumeratingWithState:&v116 objects:buf count:16];
    if (v54)
    {
      uint64_t v55 = *(void *)v117;
      do
      {
        for (uint64_t j = 0; j != v54; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v117 != v55) {
            objc_enumerationMutation(obja);
          }
          uint64_t v57 = *(void *)(*((void *)&v116 + 1) + 8 * (void)j);
          uint64_t v58 = sub_100029EF8(v57, *(void **)(a1 + 440));
          long long v114 = 0u;
          long long v115 = 0u;
          long long v112 = 0u;
          long long v113 = 0u;
          id v59 = *(id *)(a1 + 352);
          id v60 = [v59 countByEnumeratingWithState:&v112 objects:&v122 count:16];
          if (v60)
          {
            uint64_t v61 = *(void *)v113;
            do
            {
              uint64_t v62 = 0;
              do
              {
                if (*(void *)v113 != v61) {
                  objc_enumerationMutation(v59);
                }
                if (v57) {
                  uint64_t v63 = *(unsigned int *)(v57 + 8);
                }
                else {
                  uint64_t v63 = 0;
                }
                [*(id *)(*((void *)&v112 + 1) + 8 * (void)v62) observeMouseDidEnterContextID:v63 pid:v58];
                uint64_t v62 = (char *)v62 + 1;
              }
              while (v60 != v62);
              id v64 = [v59 countByEnumeratingWithState:&v112 objects:&v122 count:16];
              id v60 = v64;
            }
            while (v64);
          }
        }
        id v54 = [obja countByEnumeratingWithState:&v116 objects:buf count:16];
      }
      while (v54);
    }

    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    id objb = v88;
    id v65 = [objb countByEnumeratingWithState:&v108 objects:v121 count:16];
    if (v65)
    {
      uint64_t v66 = *(void *)v109;
      do
      {
        for (k = 0; k != v65; k = (char *)k + 1)
        {
          if (*(void *)v109 != v66) {
            objc_enumerationMutation(objb);
          }
          uint64_t v68 = *(void *)(*((void *)&v108 + 1) + 8 * (void)k);
          uint64_t v69 = sub_100029EF8(v68, *(void **)(a1 + 440));
          long long v106 = 0u;
          long long v107 = 0u;
          long long v104 = 0u;
          long long v105 = 0u;
          id v70 = *(id *)(a1 + 352);
          id v71 = [v70 countByEnumeratingWithState:&v104 objects:v120 count:16];
          if (v71)
          {
            uint64_t v72 = *(void *)v105;
            do
            {
              char v73 = 0;
              do
              {
                if (*(void *)v105 != v72) {
                  objc_enumerationMutation(v70);
                }
                if (v68) {
                  uint64_t v74 = *(unsigned int *)(v68 + 8);
                }
                else {
                  uint64_t v74 = 0;
                }
                [*(id *)(*((void *)&v104 + 1) + 8 * (void)v73) observeMouseDidExitContextID:v74 pid:v69];
                char v73 = (char *)v73 + 1;
              }
              while (v71 != v73);
              id v75 = [v70 countByEnumeratingWithState:&v104 objects:v120 count:16];
              id v71 = v75;
            }
            while (v75);
          }
        }
        id v65 = [objb countByEnumeratingWithState:&v108 objects:v121 count:16];
      }
      while (v65);
    }
  }
  sub_10006920C(a1, 1, v85, (uint64_t)&v98, (uint64_t)v92, v29, v30);
  sub_10006920C(a1, 0, v83, (uint64_t)&v98, (uint64_t)v92, v29, v30);
  if ([v88 count])
  {
    id v76 = [*(id *)(a1 + 400) count];
    [*(id *)(a1 + 400) minusSet:v88];
    if ([*(id *)(a1 + 400) count] != v76)
    {
      double v77 = BKLogMousePointer();
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 138543362;
        id v127 = v88;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "unpinning hit-test contexts (for context exit) %{public}@", buf, 0xCu);
      }
    }
    long long v124 = 0u;
    long long v125 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    id v78 = v88;
    id v79 = [v78 countByEnumeratingWithState:&v122 objects:buf count:16];
    if (v79)
    {
      uint64_t v80 = *(void *)v123;
      uint64_t v81 = v99;
      do
      {
        for (m = 0; m != v79; m = (char *)m + 1)
        {
          if (*(void *)v123 != v80) {
            objc_enumerationMutation(v78);
          }
          sub_10006A114(a1, *(void **)(*((void *)&v122 + 1) + 8 * (void)m), v81, (uint64_t)v92);
        }
        id v79 = [v78 countByEnumeratingWithState:&v122 objects:buf count:16];
      }
      while (v79);
    }
  }
  v93[0] = _NSConcreteStackBlock;
  v93[1] = 3221225472;
  v93[2] = sub_100069FDC;
  v93[3] = &unk_1000F7B68;
  v93[4] = a1;
  sub_1000175EC((uint64_t)v92, v93);

LABEL_97:
}

void sub_1000688D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37)
{
  _Unwind_Resume(a1);
}

void sub_100068944(uint64_t a1, uint64_t a2, double a3, double a4)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  if (*(void *)(a1 + 120))
  {
    [*(id *)(a1 + 112) convertToGlobalPoint:*(double *)(a1 + 144) fromRegion:*(double *)(a1 + 152)];
  }
  else
  {
    double x = CGPointZero.x;
    double y = CGPointZero.y;
  }
  if (a3 != 0.0 || a4 != 0.0)
  {
    double v10 = a3 + x;
    double v11 = a4 + y;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v12 = *(id *)(a1 + 352);
    id v13 = [v12 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v18;
      do
      {
        double v16 = 0;
        do
        {
          if (*(void *)v18 != v15) {
            objc_enumerationMutation(v12);
          }
          [*(id *)(*((void *)&v17 + 1) + 8 * (void)v16) observeMouseRelativePointDidChange:a3, a4, (void)v17];
          double v16 = (char *)v16 + 1;
        }
        while (v14 != v16);
        id v14 = [v12 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v14);
    }

    sub_10006B228(a1, 0, a2, v10, v11);
  }
}

void sub_100068B24(uint64_t a1, double *a2, void *a3, const os_unfair_lock **a4)
{
  id v24 = [*(id *)(a1 + 120) displayUUID];
  uint64_t v8 = [*(id *)(a1 + 56) immutableDisplayForUUID:v24];
  double v9 = [v8 uniqueId];
  double v10 = sub_10006AD2C((const os_unfair_lock *)a1, v24);
  sub_10006ADB8(v8, (uint64_t)v10, *(void **)(a1 + 288));
  [*(id *)(a1 + 288) convertReferenceLocation:v9 toCAScreenLocationForDisplayUUID:];
  double v12 = v11;
  double v14 = v13;
  [v8 bounds];
  double v18 = v17 + 1.0;
  double v20 = v17 + v19 + -2.0;
  if (v12 < v20) {
    double v20 = v12;
  }
  if (v18 >= v20) {
    double v20 = v18;
  }
  double v21 = v15 + 1.0;
  double v22 = v15 + v16 + -2.0;
  if (v14 < v22) {
    double v22 = v14;
  }
  if (v21 >= v22) {
    double v22 = v21;
  }
  *a2 = v20;
  a2[1] = v22;
  *a4 = v10;
  id v23 = v8;
  *a3 = v23;
}

void sub_100068C5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v11 = a2;
  id v12 = [v11 countByEnumeratingWithState:&v35 objects:v41 count:16];
  if (v12)
  {
    id v14 = v12;
    uint64_t v15 = *(void *)v36;
    *(void *)&long long v13 = 138543362;
    long long v33 = v13;
    double v16 = &selRef_serviceDidDisappear_;
    do
    {
      double v17 = 0;
      id v34 = v14;
      do
      {
        if (*(void *)v36 != v15) {
          objc_enumerationMutation(v11);
        }
        uint64_t v18 = *(void *)(*((void *)&v35 + 1) + 8 * (void)v17);
        if (v18) {
          double v19 = *(void **)(v18 + 24);
        }
        else {
          double v19 = 0;
        }
        double v20 = v19;
        if ((*(void *)a3 & 0xFFFFFFFFFFFFFFFELL) == 2)
        {
          double v21 = v18 ? *(void **)(v18 + 16) : 0;
          if (objc_msgSend(v21, "pinOnButtonDown", v33))
          {
            uint64_t v22 = v15;
            uint64_t v23 = a4;
            id v24 = v16;
            id v25 = v11;
            double v26 = *(void **)(a1 + 392);
            if (!v26)
            {
              id v27 = objc_alloc_init((Class)NSMutableSet);
              uint64_t v28 = *(void **)(a1 + 392);
              *(void *)(a1 + 392) = v27;

              double v26 = *(void **)(a1 + 392);
            }
            [v26 addObject:v20];
            double v29 = BKLogMousePointer();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int buf = v33;
              id v40 = v20;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "pinning global destination: %{public}@", buf, 0xCu);
            }

            id v11 = v25;
            double v16 = v24;
            a4 = v23;
            uint64_t v15 = v22;
            id v14 = v34;
          }
        }
        sub_1000298C8((uint64_t)v20, *(void **)(a3 + 72));
        if (v20)
        {
          double v30 = (double *)((char *)v20 + *((int *)v16 + 708));
          *double v30 = a5;
          v30[1] = a6;
        }
        if (v18)
        {
          if (*(unsigned char *)(v18 + 8))
          {
            uint64_t v31 = 0;
            goto LABEL_24;
          }
          *(unsigned char *)(v18 + 8) = 1;
        }
        uint64_t v31 = 1;
LABEL_24:
        sub_10006B0F0(a1, v31, v20, a3, a4);

        double v17 = (char *)v17 + 1;
      }
      while (v14 != v17);
      id v32 = [v11 countByEnumeratingWithState:&v35 objects:v41 count:16];
      id v14 = v32;
    }
    while (v32);
  }
}

void sub_100068EB4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a2 && a3)
  {
    uint64_t v23 = +[NSString stringWithFormat:@"cannot set both filter UUIDs"];
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      id v24 = NSStringFromSelector("_locked_exitGlobalContextsOnlyOnDisplayUUID:exceptDisplayUUID:exitPinned:timestamp:eventPoster:");
      id v25 = (objc_class *)objc_opt_class();
      double v26 = NSStringFromClass(v25);
      *(_DWORD *)int buf = 138544642;
      uint64_t v47 = v24;
      __int16 v48 = 2114;
      uint64_t v49 = v26;
      __int16 v50 = 2048;
      uint64_t v51 = a1;
      __int16 v52 = 2114;
      CFStringRef v53 = @"BKMousePointerController.m";
      __int16 v54 = 1024;
      int v55 = 1811;
      __int16 v56 = 2114;
      uint64_t v57 = v23;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
    }
    [v23 UTF8String];
    _bs_set_crash_log_message();
    __break(0);
    JUMPOUT(0x100069204);
  }
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id obj = [*(id *)(a1 + 384) allValues];
  id v29 = [obj countByEnumeratingWithState:&v40 objects:v45 count:16];
  if (v29)
  {
    uint64_t v28 = *(void *)v41;
    uint64_t v8 = (void *)BKSDisplayUUIDMainKey;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v41 != v28) {
          objc_enumerationMutation(obj);
        }
        uint64_t v30 = v9;
        double v10 = *(void **)(*((void *)&v40 + 1) + 8 * v9);
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        id v35 = v10;
        id v11 = [v35 countByEnumeratingWithState:&v36 objects:v44 count:16];
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = *(void *)v37;
          do
          {
            id v14 = 0;
            do
            {
              if (*(void *)v37 != v13) {
                objc_enumerationMutation(v35);
              }
              uint64_t v15 = *(void *)(*((void *)&v36 + 1) + 8 * (void)v14);
              if (v15)
              {
                id v16 = *(id *)(v15 + 24);
                double v17 = v16;
                if (v16)
                {
                  uint64_t v18 = (void *)*((void *)v16 + 5);
                  goto LABEL_16;
                }
              }
              else
              {
                double v17 = 0;
              }
              uint64_t v18 = 0;
LABEL_16:
              id v19 = v18;
              if ([v19 length]) {
                double v20 = v19;
              }
              else {
                double v20 = v8;
              }
              id v21 = v20;

              if ((!a2 || [v21 isEqual:a2])
                && (!a3 || ([v21 isEqual:a3] & 1) == 0))
              {
                sub_10006AE68(a1, v15, a5, a4, a6);
              }

              id v14 = (char *)v14 + 1;
            }
            while (v12 != v14);
            id v22 = [v35 countByEnumeratingWithState:&v36 objects:v44 count:16];
            id v12 = v22;
          }
          while (v22);
        }

        uint64_t v9 = v30 + 1;
      }
      while ((id)(v30 + 1) != v29);
      id v29 = [obj countByEnumeratingWithState:&v40 objects:v45 count:16];
    }
    while (v29);
  }
}

void sub_10006920C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  if ([a3 count])
  {
    if (*(void *)a4 == 1)
    {
      id v15 = [*(id *)(a1 + 400) count];
      [*(id *)(a1 + 400) minusSet:a3];
      if ([*(id *)(a1 + 400) count] != v15)
      {
        id v16 = BKLogMousePointer();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = a3;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "unpinning hit-test contexts (mouse up) %{public}@", (uint8_t *)&buf, 0xCu);
        }
      }
    }
    else if (*(void *)a4 == 2)
    {
      if (!*(void *)(a1 + 400))
      {
        id v12 = objc_alloc_init((Class)NSMutableSet);
        uint64_t v13 = *(void **)(a1 + 400);
        *(void *)(a1 + 400) = v12;
      }
      id v14 = BKLogMousePointer();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = a3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "pinning hit-test contexts (mouse down) %{public}@", (uint8_t *)&buf, 0xCu);
      }

      [*(id *)(a1 + 400) unionSet:a3];
    }
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    id obj = a3;
    id v86 = [obj countByEnumeratingWithState:&v89 objects:v96 count:16];
    if (v86)
    {
      uint64_t v84 = *(void *)v90;
      *(void *)&long long v17 = 138543362;
      long long v76 = v17;
      do
      {
        uint64_t v18 = 0;
        do
        {
          if (*(void *)v90 != v84) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void *)(*((void *)&v89 + 1) + 8 * (void)v18);
          sub_1000298C8(v19, *(void **)(a4 + 72));
          id v88 = *(const os_unfair_lock **)(a4 + 8);
          sub_10006A9A0(a1, v19, &v88, a4, a6, a7);
          double v20 = (__IOHIDEvent *)sub_10006A2E0(a1, *(void *)(a4 + 16), v19);
          id v21 = sub_10006A418(a1, 1, a2, v19, a4);
          uint64_t v87 = 0;
          if ([*(id *)(a1 + 216) buttonMaskDidChange]
            && ![*(id *)(a1 + 216) buttonMask])
          {
            if (!v19) {
              goto LABEL_28;
            }
            LOBYTE(v24) = 0;
LABEL_27:
            *(unsigned char *)(v19 + 25) = v24;
            goto LABEL_28;
          }
          if (v19)
          {
            if (*(unsigned char *)(v19 + 25)) {
              goto LABEL_106;
            }
            uint64_t v22 = *(unsigned int *)(v19 + 8);
          }
          else
          {
            uint64_t v22 = 0;
          }
          uint64_t v23 = *(void **)(a4 + 80);
          BSMonotonicReferencedTimeFromMachTime();
          unsigned int v24 = (v19 != 0) & [v23 shouldCancelTouchesDeliveredToContextId:v22 withInitialTouchTimestamp:];
          if (v24 == 1) {
            goto LABEL_27;
          }
LABEL_28:
          unsigned __int8 v25 = [*(id *)(a1 + 216) eventTypeMask:v76];
          uint64_t v26 = 0x200000000F6;
          if ((v25 & 0x40) == 0) {
            goto LABEL_35;
          }
          unsigned int v27 = [*(id *)(a1 + 216) scrollPhase:0x200000000F6];
          if (!v19)
          {
            uint64_t v26 = 0x200000000F6;
            if (!v27 || (v27 & 0xC) != 0) {
              goto LABEL_35;
            }
            uint64_t v42 = 0;
            goto LABEL_56;
          }
          if (!*(unsigned char *)(v19 + 24))
          {
            uint64_t v26 = 0x200000000F6;
            if (!v27 || (v27 & 0xC) != 0) {
              goto LABEL_35;
            }
            uint64_t v42 = *(unsigned int *)(v19 + 8);
LABEL_56:
            long long v43 = *(void **)(a4 + 80);
            BSMonotonicReferencedTimeFromMachTime();
            unsigned int v44 = [v43 shouldCancelTouchesDeliveredToContextId:v42];
            uint64_t v26 = 0x200000000F6;
            if (!v44) {
              goto LABEL_35;
            }
            if (v19) {
              *(unsigned char *)(v19 + 24) = 1;
            }
            id v45 = BKLogMousePointer();
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              if (v19) {
                int v46 = *(_DWORD *)(v19 + 8);
              }
              else {
                int v46 = 0;
              }
              LODWORD(buf) = 67109120;
              DWORD1(buf) = v46;
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "TDPS: scroll terminated for %X", (uint8_t *)&buf, 8u);
            }

            mach_absolute_time();
            ScrollEvent = (const void *)IOHIDEventCreateScrollEvent();
            IOHIDEventSetPhase();
            IOHIDEventAppendEvent();
            CFRelease(ScrollEvent);
            goto LABEL_33;
          }
          if ((v27 & 0x81) != 0) {
            *(unsigned char *)(v19 + 24) = 0;
          }
LABEL_33:
          uint64_t v28 = BKLogMousePointer();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            if (v19) {
              int v74 = *(_DWORD *)(v19 + 8);
            }
            else {
              int v74 = 0;
            }
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v74;
            _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "TDPS: skipping cancelled scroll for %X", (uint8_t *)&buf, 8u);
          }

          uint64_t v26 = 0x200000000B6;
LABEL_35:
          [*(id *)(a1 + 216) appendSubeventsForEventTypeMask:v26 toTopLevelEvent:v20 interfaceOrientation:v88 getEventSummary:&v87];
          if (v19 && *(unsigned char *)(v19 + 25) && [*(id *)(a1 + 216) buttonMask])
          {
            id v29 = BKLogMousePointer();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              int v30 = *(_DWORD *)(v19 + 8);
              LODWORD(buf) = 67109120;
              DWORD1(buf) = v30;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "TDPS: cancelling button up %X", (uint8_t *)&buf, 8u);
            }

            IOHIDEventSetIntegerValue();
            IOHIDEventSetPhase();
          }
          if (*(void *)(a4 + 24)) {
            BKSHIDEventSetRemoteTimestamp();
          }
          if ((v87 & 0x20) == 0) {
            goto LABEL_74;
          }
          if (!v19) {
            goto LABEL_74;
          }
          int v31 = *(_DWORD *)(v19 + 28);
          if (!v31) {
            goto LABEL_74;
          }
          id v32 = BKLogMousePointer();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v31;
            _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "slotID up! %X", (uint8_t *)&buf, 8u);
          }

          id v81 = *(id *)(v19 + 40);
          os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
          id v33 = *(id *)(v19 + 56);
          BOOL v34 = v33 == 0;

          if (v34)
          {
            __int16 v48 = BKLogMousePointer();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(__src[0]) = v76;
              *(void *)((char *)__src + 4) = v19;
              _os_log_debug_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "missing test info at down for destination %{public}@", (uint8_t *)__src, 0xCu);
            }

            long long v41 = 0;
            goto LABEL_73;
          }
          char v95 = 0;
          uint64_t v35 = *(unsigned int *)(v19 + 28);
          long long v36 = +[BKHIDEventProcessorRegistry sharedInstance];
          uint64_t v80 = [v36 eventProcessorOfClass:objc_opt_class()];

          long long v37 = [v80 authenticationSpecificationForSlotID:v35 registrantEntitled:&v95];
          long long v38 = v37;
          if (!v37) {
            goto LABEL_68;
          }
          id v78 = [v37 authenticationMessageContext];
          memset(__src, 0, sizeof(__src));
          id v79 = sub_100005E04((uint64_t)BKDisplayController, 0, 0, v38, 0);
          if (!objc_msgSend(*(id *)(a1 + 288), "contextIDAtCAScreenLocation:displayUUID:options:securityAnalysis:results:", v81, v79, 0, __src, *(double *)(v19 + 80), *(double *)(v19 + 88)))
          {

LABEL_68:
            long long v41 = 0;
            goto LABEL_71;
          }
          long long v93 = 0u;
          long long v94 = 0u;
          if (BSAuditTokenForTask())
          {
            long long v39 = +[BKHIDSystemInterface sharedInstance];
            double v77 = [v39 deliveryManager];

            long long v40 = [v77 authenticationOriginator];
            *(void *)&long long buf = _NSConcreteStackBlock;
            *((void *)&buf + 1) = 3221225472;
            long long v98 = sub_10006AC44;
            long long v99 = &unk_1000F7B90;
            memcpy(v101, __src, sizeof(v101));
            uint64_t v100 = v19;
            id v102 = v78;
            char v105 = v95;
            long long v103 = v93;
            long long v104 = v94;
            long long v41 = [v40 buildMessage:&buf];
          }
          else
          {
            long long v41 = 0;
          }

LABEL_71:
          if (v41) {
            [v21 setAuthenticationMessage:v41];
          }
LABEL_73:

LABEL_74:
          if (*(double *)(a4 + 40) != 0.0 || *(double *)(a4 + 48) != 0.0)
          {
            if (v19)
            {
              int v49 = *(_DWORD *)(v19 + 8);
              int v50 = *(_DWORD *)(v19 + 32);
            }
            else
            {
              int v49 = 0;
              int v50 = 0;
            }
            uint64_t v51 = *(void *)(a1 + 360);
            if (v51)
            {
              objc_initWeak((id *)__src, *(id *)(a1 + 360));
              __int16 v52 = *(void **)(v51 + 8);
              *(void *)&long long buf = _NSConcreteStackBlock;
              *((void *)&buf + 1) = 3221225472;
              long long v98 = sub_100095B1C;
              long long v99 = &unk_1000F8B58;
              objc_copyWeak((id *)&v100, (id *)__src);
              v101[0] = v49;
              v101[1] = v50;
              [v52 updateStatistics:&buf];
              objc_destroyWeak((id *)&v100);
              objc_destroyWeak((id *)__src);
            }
          }
          char v53 = v87;
          if ((v87 & 2) != 0)
          {
            if (v19)
            {
              int v54 = *(_DWORD *)(v19 + 8);
              int v55 = *(_DWORD *)(v19 + 32);
            }
            else
            {
              int v54 = 0;
              int v55 = 0;
            }
            uint64_t v56 = *(void *)(a1 + 360);
            if (v56)
            {
              objc_initWeak((id *)__src, *(id *)(a1 + 360));
              uint64_t v57 = *(void **)(v56 + 8);
              *(void *)&long long buf = _NSConcreteStackBlock;
              *((void *)&buf + 1) = 3221225472;
              long long v98 = sub_100095B90;
              long long v99 = &unk_1000F8B58;
              objc_copyWeak((id *)&v100, (id *)__src);
              v101[0] = v54;
              v101[1] = v55;
              [v57 updateStatistics:&buf];
              objc_destroyWeak((id *)&v100);
              objc_destroyWeak((id *)__src);
              char v53 = v87;
            }
          }
          if ((v53 & 4) != 0)
          {
            if (v19)
            {
              int v58 = *(_DWORD *)(v19 + 8);
              int v59 = *(_DWORD *)(v19 + 32);
            }
            else
            {
              int v58 = 0;
              int v59 = 0;
            }
            uint64_t v60 = *(void *)(a1 + 360);
            if (v60)
            {
              objc_initWeak((id *)__src, *(id *)(a1 + 360));
              uint64_t v61 = *(void **)(v60 + 8);
              *(void *)&long long buf = _NSConcreteStackBlock;
              *((void *)&buf + 1) = 3221225472;
              long long v98 = sub_100095C78;
              long long v99 = &unk_1000F8B58;
              objc_copyWeak((id *)&v100, (id *)__src);
              v101[0] = v58;
              v101[1] = v59;
              [v61 updateStatistics:&buf];
              objc_destroyWeak((id *)&v100);
              objc_destroyWeak((id *)__src);
              char v53 = v87;
            }
          }
          if ((v53 & 8) != 0)
          {
            if (v19)
            {
              int v62 = *(_DWORD *)(v19 + 8);
              int v63 = *(_DWORD *)(v19 + 32);
            }
            else
            {
              int v62 = 0;
              int v63 = 0;
            }
            uint64_t v64 = *(void *)(a1 + 360);
            if (v64)
            {
              objc_initWeak((id *)__src, *(id *)(a1 + 360));
              id v65 = *(void **)(v64 + 8);
              *(void *)&long long buf = _NSConcreteStackBlock;
              *((void *)&buf + 1) = 3221225472;
              long long v98 = sub_100095D60;
              long long v99 = &unk_1000F8B58;
              objc_copyWeak((id *)&v100, (id *)__src);
              v101[0] = v62;
              v101[1] = v63;
              [v65 updateStatistics:&buf];
              objc_destroyWeak((id *)&v100);
              objc_destroyWeak((id *)__src);
              char v53 = v87;
            }
          }
          if ((v53 & 0x10) != 0)
          {
            if (v19)
            {
              int v66 = *(_DWORD *)(v19 + 8);
              int v67 = *(_DWORD *)(v19 + 32);
            }
            else
            {
              int v66 = 0;
              int v67 = 0;
            }
            uint64_t v68 = *(void *)(a1 + 360);
            if (v68)
            {
              objc_initWeak((id *)__src, *(id *)(a1 + 360));
              uint64_t v69 = *(void **)(v68 + 8);
              *(void *)&long long buf = _NSConcreteStackBlock;
              *((void *)&buf + 1) = 3221225472;
              long long v98 = sub_100095CEC;
              long long v99 = &unk_1000F8B58;
              objc_copyWeak((id *)&v100, (id *)__src);
              v101[0] = v66;
              v101[1] = v67;
              [v69 updateStatistics:&buf];
              objc_destroyWeak((id *)&v100);
              objc_destroyWeak((id *)__src);
              char v53 = v87;
            }
          }
          if ((v53 & 0x40) != 0)
          {
            if (v19)
            {
              int v70 = *(_DWORD *)(v19 + 8);
              int v71 = *(_DWORD *)(v19 + 32);
            }
            else
            {
              int v70 = 0;
              int v71 = 0;
            }
            uint64_t v72 = *(void *)(a1 + 360);
            if (v72)
            {
              objc_initWeak((id *)__src, *(id *)(a1 + 360));
              char v73 = *(void **)(v72 + 8);
              *(void *)&long long buf = _NSConcreteStackBlock;
              *((void *)&buf + 1) = 3221225472;
              long long v98 = sub_100095C04;
              long long v99 = &unk_1000F8B58;
              objc_copyWeak((id *)&v100, (id *)__src);
              v101[0] = v70;
              v101[1] = v71;
              [v73 updateStatistics:&buf];
              objc_destroyWeak((id *)&v100);
              objc_destroyWeak((id *)__src);
            }
          }
          sub_100013710(a5, v20, v21, (void *)v19);
          CFRelease(v20);
LABEL_106:

          uint64_t v18 = (char *)v18 + 1;
        }
        while (v86 != v18);
        id v75 = [obj countByEnumeratingWithState:&v89 objects:v96 count:16];
        id v86 = v75;
      }
      while (v75);
    }
  }
}

void sub_100069F40(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x320]);
  _Unwind_Resume(a1);
}

void sub_100069FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100069FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    BKSHIDEventSetAttributes();
    uint64_t v7 = BKLogMousePointer();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = BKSHIDEventGetConciseDescription();
      id v12 = (void *)v11;
      if (a4) {
        int v13 = *(_DWORD *)(a4 + 8);
      }
      else {
        int v13 = 0;
      }
      int v14 = 138543618;
      uint64_t v15 = v11;
      __int16 v16 = 1024;
      int v17 = v13;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%{public}@ -> contextID:%X", (uint8_t *)&v14, 0x12u);
    }
    uint64_t v8 = [*(id *)(a1 + 24) eventDispatcher];
    uint64_t v9 = v8;
    if (a4) {
      uint64_t v10 = *(unsigned int *)(a4 + 12);
    }
    else {
      uint64_t v10 = 0;
    }
    [v8 sendEvent:a2 toClientTaskPort:v10];
  }
}

__IOHIDEvent *sub_10006A114(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  *((void *)&v11 + 1) = [*(id *)(a1 + 216) lastRemoteEventTimestamp];
  id v12 = [*(id *)(a1 + 216) eventSequenceStartTimestamp];
  CGPoint v13 = CGPointZero;
  CGPoint v14 = v13;
  id v15 = [*(id *)(a1 + 216) mostRecentSender];
  id v16 = +[BKTouchDeliveryPolicyServer sharedServer];
  __int16 v17 = 0;
  uint64_t v8 = sub_10006A210(a1, 1, 2, a2, (uint64_t)&v10, a4);

  return v8;
}

void sub_10006A1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

__IOHIDEvent *sub_10006A210(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  id v12 = (__IOHIDEvent *)sub_10006A2E0(a1, *(void *)(a5 + 16), (uint64_t)a4);
  if (*(void *)(a5 + 24)) {
    BKSHIDEventSetRemoteTimestamp();
  }
  CGPoint v13 = sub_10006A418(a1, a2, a3, (uint64_t)a4, a5);
  CGPoint v14 = v13;
  if (a2 == 2) {
    [v13 setPointerEdgeMask:*(unsigned __int8 *)(a1 + 160)];
  }
  sub_100013710(a6, v12, v14, a4);
  CFRelease(v12);

  return v12;
}

uint64_t sub_10006A2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  if (a3)
  {
    id v5 = *(id *)(a3 + 48);
    double v7 = *(double *)(a3 + 80);
    double v6 = *(double *)(a3 + 88);
    uint64_t v8 = *(unsigned int *)(a3 + 8);
    uint64_t v9 = *(void **)(a3 + 40);
  }
  else
  {
    uint64_t v8 = 0;
    id v5 = 0;
    uint64_t v9 = 0;
    double v6 = 0.0;
    double v7 = 0.0;
  }
  id v10 = v9;
  [*(id *)(a1 + 288) convertCAScreenLocation:v8 toContextID:v10 displayUUID:v7];
  [v5 senderID];
  uint64_t v11 = IOHIDEventCreate();
  IOHIDEventSetFloatValue();
  IOHIDEventSetFloatValue();
  IOHIDEventGetEventFlags();
  IOHIDEventSetEventFlags();
  IOHIDEventSetSenderID();

  return v11;
}

id sub_10006A418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  if (a4)
  {
    id v9 = *(id *)(a4 + 48);
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    uint64_t v11 = *(void **)(a4 + 40);
  }
  else
  {
    uint64_t v10 = 0;
    id v9 = 0;
    uint64_t v11 = 0;
  }
  id v12 = v11;
  id v50 = [v9 senderID];
  double v14 = *(double *)(a5 + 40);
  double v13 = *(double *)(a5 + 48);
  double v16 = *(double *)(a5 + 56);
  double v15 = *(double *)(a5 + 64);
  id v49 = objc_alloc_init((Class)BKSHIDEventPointerAttributes);
  id v17 = v12;
  __int16 v48 = v17;
  if (v17
    && (uint64_t v18 = v17,
        unsigned int v19 = [v17 isEqualToString:BKSDisplayUUIDMainKey],
        v18,
        !v19))
  {
    id v21 = +[BKSHIDEventDisplay displayWithHardwareIdentifier:v18];
    double v20 = v49;
    [v49 setDisplay:v21];
  }
  else
  {
    double v20 = v49;
    [v49 setDisplay:0];
  }
  uint64_t v22 = +[BKSHIDEventDeferringToken tokenForIdentifierOfCAContext:v10];
  [v20 setToken:v22];

  [v20 setSource:[v9 eventSource]];
  uint64_t v23 = +[BKSHIDEventDeferringEnvironment keyboardFocusEnvironment];
  [v20 setEnvironment:v23];

  [v20 setContextType:a2];
  [v20 setContextMove:a3];
  if (a4)
  {
    id v24 = *(id *)(a4 + 16);
    [v20 setSceneTouchBehavior:[v24 touchBehavior]];

    unsigned __int8 v25 = *(void **)(a4 + 64);
  }
  else
  {
    [v20 setSceneTouchBehavior:[0 touchBehavior]];
    unsigned __int8 v25 = 0;
  }
  id v26 = v25;
  [v20 setHitTestSecurityAnalysis:v26];

  if (a2 == 2)
  {
    uint64_t v47 = a5;
    unsigned int v27 = +[NSMutableArray array];
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id v28 = *(id *)(a1 + 224);
    id v29 = [v28 countByEnumeratingWithState:&v52 objects:v56 count:16];
    if (v29)
    {
      id v30 = v29;
      uint64_t v31 = *(void *)v53;
      do
      {
        for (uint64_t i = 0; i != v30; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v53 != v31) {
            objc_enumerationMutation(v28);
          }
          uint64_t v33 = *(void *)(*((void *)&v52 + 1) + 8 * i);
          if (v33 && (*(_DWORD *)(v33 + 12) - 1) <= 0xFFFFFFFD)
          {
            uint64_t v34 = *(unsigned int *)(v33 + 8);
            uint64_t v35 = sub_100029EF8(v33, *(void **)(a1 + 440));
            id v36 = objc_alloc_init((Class)BKSHIDEventHitTestClientContext);
            [v36 setContextID:v34];
            [v36 setPid:v35];
            [v27 addObject:v36];
          }
        }
        id v30 = [v28 countByEnumeratingWithState:&v52 objects:v56 count:16];
      }
      while (v30);
    }

    double v20 = v49;
    if ([v27 count]) {
      [v49 setHitTestContexts:v27];
    }

    a5 = v47;
  }
  long long v37 = *(void **)(a1 + 248);
  long long v38 = +[NSNumber numberWithUnsignedLongLong:v50];
  uint64_t v39 = [v37 objectForKey:v38];

  unsigned int v40 = 64;
  if (!v39 || (*(unsigned char *)(v39 + 8) ? (unsigned int v40 = 68) : (unsigned int v40 = 64), !*(unsigned char *)(v39 + 10)))
  {
    if ([*(id *)(a1 + 216) shouldScrollNaturally]) {
      v40 |= 0x20u;
    }
  }
  if (*(unsigned char *)(a5 + 89)) {
    v40 |= 0x400u;
  }
  if (sub_10006A944(a1)) {
    v40 |= 8u;
  }
  if ([*(id *)(a1 + 216) senderPostsAtHighFrequency:v50]
    && [*(id *)(a1 + 24) shouldUseHighFrequencyAttributeOption])
  {
    v40 |= 0x10u;
  }
  if (v39)
  {
    double v41 = *(double *)(v39 + 24);
    double v42 = *(double *)(v39 + 32);
  }
  else
  {
    double v42 = 0.0;
    double v41 = 0.0;
  }
  [v20 setDigitizerSurfaceWidth:v41];
  [v20 setDigitizerSurfaceHeight:v42];
  long long v43 = [*(id *)(a1 + 216) touchingPathIndexes];
  unsigned int v44 = v43;
  if (a3 == 2)
  {
    if ([v43 count]) {
      uint64_t v45 = v40 | 2;
    }
    else {
      uint64_t v45 = v40;
    }
  }
  else
  {
    [v20 setAcceleratedRelativePositionX:v16];
    [v20 setAcceleratedRelativePositionY:v15];
    [v20 setUnacceleratedRelativePositionX:v14];
    [v20 setUnacceleratedRelativePositionY:v13];
    [v20 setActiveModifiers:*(void *)(a1 + 256)];
    if ([*(id *)(a1 + 216) touchingPathIndexesDidChange]) {
      uint64_t v45 = v40 | 2;
    }
    else {
      uint64_t v45 = v40;
    }
    [v20 setFingerDownCount:[v44 count]];
  }
  if (*(void *)(a5 + 32))
  {
    BSMonotonicReferencedTimeFromMachTime();
    [v20 setInitialTouchTimestamp:];
  }
  [v20 setOptions:v45];

  return v20;
}

uint64_t sub_10006A944(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 417) || *(unsigned char *)(a1 + 420)) {
    return 0;
  }
  uint64_t v3 = +[BKDisplayController sharedInstance];
  uint64_t v1 = [v3 displayIsBlanked:0] ^ 1;

  return v1;
}

void sub_10006A9A0(uint64_t a1, uint64_t a2, const os_unfair_lock **a3, uint64_t a4, double a5, double a6)
{
  double v7 = a6;
  double v8 = a5;
  *a3 = *(const os_unfair_lock **)(a4 + 8);
  if (*(unsigned char *)(a4 + 88))
  {
    if (a2)
    {
      *(double *)(a2 + 80) = a5;
      *(double *)(a2 + 88) = a6;
    }
  }
  else
  {
    if (a2) {
      uint64_t v11 = *(void **)(a2 + 40);
    }
    else {
      uint64_t v11 = 0;
    }
    id v12 = v11;
    id v13 = [v12 length];
    double v14 = (void *)BKSDisplayUUIDMainKey;
    if (v13) {
      double v14 = v12;
    }
    id v27 = v14;

    double v15 = [*(id *)(a1 + 120) displayUUID];
    int v16 = BSEqualObjects();

    if (!v16)
    {
      id v17 = [*(id *)(a1 + 112) regionForDisplayUUID:v27];
      if (v17)
      {
        uint64_t v18 = [*(id *)(a1 + 56) immutableDisplayForUUID:v27];
        unsigned int v19 = [v18 uniqueId];
        double v20 = sub_10006AD2C((const os_unfair_lock *)a1, v27);
        if (*(void *)(a1 + 120))
        {
          [*(id *)(a1 + 112) convertToGlobalPoint:*(double *)(a1 + 144) fromRegion:*(double *)(a1 + 152)];
        }
        else
        {
          double x = CGPointZero.x;
          double y = CGPointZero.y;
        }
        [*(id *)(a1 + 112) convertFromGlobalPoint:v17 toRegion:x, y];
        sub_10006ADB8(v18, (uint64_t)v20, *(void **)(a1 + 288));
        [*(id *)(a1 + 288) convertReferenceLocation:v19 toCAScreenLocationForDisplayUUID:];
        double v8 = v24;
        double v7 = v25;
        *a3 = v20;
      }
      else
      {
        uint64_t v23 = BKLogMousePointer();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = *(void *)(a1 + 112);
          *(_DWORD *)long long buf = 138543618;
          id v29 = v27;
          __int16 v30 = 2114;
          uint64_t v31 = v26;
          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "getUnconstrainedHitTestPoint: no displayUUID:%{public}@ in arrangement:%{public}@", buf, 0x16u);
        }

        *a3 = (const os_unfair_lock *)1;
        double v8 = 0.0;
        double v7 = 0.0;
      }
    }
    if (a2)
    {
      *(double *)(a2 + 80) = v8;
      *(double *)(a2 + 88) = v7;
    }
  }
}

void sub_10006AC44(uint64_t a1, void *a2)
{
  [a2 setOriginIdentifier:0xC181BADB23D8497BLL];
  [a2 setEventType:17];
  sub_10001DE9C(a2, (unsigned int *)(a1 + 40));
  char v4 = *(void **)(a1 + 32);
  if (v4) {
    char v4 = (void *)v4[7];
  }
  id v5 = v4;
  [a2 setHitTestInformationFromStartEvent:v5];

  double v6 = sub_10001DEF8(a1 + 40);
  [a2 setHitTestInformationFromEndEvent:v6];
  [a2 setContext:*(void *)(a1 + 344)];
  [a2 setRegistrantEntitled:*(unsigned __int8 *)(a1 + 384)];
  [a2 setVersionedPID:BSVersionedPIDForAuditToken() a1 + 352, a1 + 360, a1 + 368, a1 + 376];
}

const os_unfair_lock *sub_10006AD2C(const os_unfair_lock *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    os_unfair_lock_assert_owner(result + 2);
    id v4 = a2;
    id v5 = [v4 length];
    double v6 = (void *)BKSDisplayUUIDMainKey;
    if (v5) {
      double v6 = v4;
    }
    id v7 = v6;

    unsigned int v8 = [v7 isEqual:*(void *)&v3[18]._os_unfair_lock_opaque];
    if (v8) {
      return *(const os_unfair_lock **)&v3[58]._os_unfair_lock_opaque;
    }
    else {
      return (const os_unfair_lock *)1;
    }
  }
  return result;
}

id sub_10006ADB8(id result, uint64_t a2, void *a3)
{
  if (a3) {
    return [a3 transformLayerPropertiesForDisplay:result displayInterfaceOrientation:a2];
  }
  return result;
}

void sub_10006AE68(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a2 && *(unsigned char *)(a2 + 8))
  {
    unsigned int v10 = [*(id *)(a1 + 392) containsObject:*(void *)(a2 + 24)];
    if (!v10 || a4 != 0)
    {
      unsigned int v12 = v10;
      id v13 = *(id *)(a2 + 24);
      double v14 = v13;
      if (v13) {
        double v15 = (void *)v13[6];
      }
      else {
        double v15 = 0;
      }
      id v16 = v15;

      if (v16)
      {
        if (v14) {
          id v17 = (void *)v14[5];
        }
        else {
          id v17 = 0;
        }
        id v18 = v17;
        id v19 = [v18 length];
        double v20 = (void *)BKSDisplayUUIDMainKey;
        if (v19) {
          double v20 = v18;
        }
        id v21 = v20;

        uint64_t v22 = sub_10006AD2C((const os_unfair_lock *)a1, v21);
        *(unsigned char *)(a2 + 8) = 0;
        *((void *)&v25 + 1) = [*(id *)(a1 + 216) lastRemoteEventTimestamp];
        id v26 = [*(id *)(a1 + 216) eventSequenceStartTimestamp];
        long long v27 = 0u;
        long long v28 = 0u;
        id v29 = [*(id *)(a1 + 216) mostRecentSender];
        id v30 = +[BKTouchDeliveryPolicyServer sharedServer];
        __int16 v31 = 0;
        [*(id *)(a1 + 216) appendSubeventsForEventTypeMask:0x200000008F6 toTopLevelEvent:sub_10006A210(a1, 2, 2, v14, (uint64_t)&v24, a5) interfaceOrientation:v22 getEventSummary:];
        sub_1000298C8((uint64_t)v14, 0);
        if (v12)
        {
          [*(id *)(a1 + 392) removeObject:v14];
          uint64_t v23 = BKLogMousePointer();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            uint64_t v33 = v14;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "unpinning global destination %{public}@", buf, 0xCu);
          }
        }
      }
    }
  }
}

void sub_10006B0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_10006B0F0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  [*(id *)(a1 + 216) appendSubeventsForEventTypeMask:0x200000008F6 toTopLevelEvent:sub_10006A210(a1, 2, a2, a3, a4, a5) interfaceOrientation:*(void *)(a4 + 8) getEventSummary:0];
  id v7 = *(void **)(a1 + 360);
  if (a3)
  {
    int v8 = a3[8];
    int v9 = a3[2];
    if (!v7) {
      return;
    }
  }
  else
  {
    int v8 = 0;
    int v9 = 0;
    if (!v7) {
      return;
    }
  }
  objc_initWeak(&location, v7);
  unsigned int v10 = (void *)v7[1];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_100095DD4;
  v11[3] = &unk_1000F8B58;
  objc_copyWeak(&v12, &location);
  int v13 = v9;
  int v14 = v8;
  [v10 updateStatistics:v11];
  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
}

void sub_10006B20C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006B228(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    CGPoint v33 = CGPointZero;
    char v32 = 0;
    unsigned int v10 = [*(id *)(a1 + 112) closestRegionForGlobalPoint:&v33 returningClosestContainingPoint:&v32 returningEdgeMask:a4, a5];
    if (*(void **)(a1 + 120) == v10 && BSPointEqualToPoint() && !a2)
    {
      id v12 = BKLogMousePointer();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138543362;
        uint64_t v36 = a3;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, " -> ignoring model point update (%{public}@)", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v11 = BKLogMousePointer();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138543874;
        uint64_t v36 = a3;
        __int16 v37 = 2048;
        CGFloat x = v33.x;
        __int16 v39 = 2048;
        CGFloat y = v33.y;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, " -> model point (%{public}@) %g,%g", buf, 0x20u);
      }

      id v12 = [v10 displayUUID];
      if ((a2 & 1) != 0
        || ([*(id *)(a1 + 408) objectForKeyedSubscript:v12],
            int v13 = objc_claimAutoreleasedReturnValue(),
            unsigned __int8 v14 = [v13 isActive],
            v13,
            (v14 & 1) == 0))
      {
        kdebug_trace();
        kdebug_trace();
        *(CGPoint *)(a1 + 144) = v33;
        *(unsigned char *)(a1 + 160) = v32;
        if (*(void **)(a1 + 120) != v10 || a2)
        {
          objc_storeStrong((id *)(a1 + 120), v10);
          sub_10006B5C4(a1, @"pointer region/display change");
        }
      }
      else
      {
        double v15 = BKLogMousePointer();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "    suppressed", buf, 2u);
        }
      }
      if (v12)
      {
        uint64_t v16 = [*(id *)(a1 + 56) immutableDisplayForUUID:v12];
        if (v16)
        {
          id v17 = (void *)v16;
          id v18 = sub_10006AD2C((const os_unfair_lock *)a1, v12);
          sub_10006ADB8(v17, (uint64_t)v18, *(void **)(a1 + 288));
          double v20 = v19;
          double v22 = v21;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          id v23 = *(id *)(a1 + 352);
          id v24 = [v23 countByEnumeratingWithState:&v28 objects:v34 count:16];
          if (v24)
          {
            id v25 = v24;
            uint64_t v26 = *(void *)v29;
            do
            {
              long long v27 = 0;
              do
              {
                if (*(void *)v29 != v26) {
                  objc_enumerationMutation(v23);
                }
                [*(id *)(*((void *)&v28 + 1) + 8 * (void)v27) observeMouseModelPointDidChange:v17 display:a3 reason:v20];
                long long v27 = (char *)v27 + 1;
              }
              while (v25 != v27);
              id v25 = [v23 countByEnumeratingWithState:&v28 objects:v34 count:16];
            }
            while (v25);
          }
        }
      }
    }
  }
}

void sub_10006B5C4(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  uint64_t v63 = [*(id *)(a1 + 120) displayUUID];
  unsigned int v4 = [*(id *)(a1 + 40) hasDeviceAvailable];
  unsigned int v5 = sub_10006C01C((const os_unfair_lock *)a1);
  int v6 = *(unsigned __int8 *)(a1 + 417);
  int v7 = v5 ^ 1;
  if (*(unsigned char *)(a1 + 417)) {
    int v7 = 0;
  }
  if (!v4) {
    int v7 = 0;
  }
  if (*(void *)(a1 + 120)) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  int v9 = *(void **)(a1 + 184);
  int v10 = *(unsigned __int8 *)(a1 + 419);
  unsigned int v11 = [v9 isPaused];
  id v12 = BKLogMousePointer();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67110914;
    *(_DWORD *)id v83 = v8;
    *(_WORD *)&v83[4] = 1024;
    *(_DWORD *)&v83[6] = v4;
    __int16 v84 = 1024;
    unsigned int v85 = v5;
    __int16 v86 = 1024;
    int v87 = v10;
    __int16 v88 = 1024;
    BOOL v89 = v6 == 0;
    __int16 v90 = 1024;
    BOOL v91 = v9 != 0;
    __int16 v92 = 1024;
    unsigned int v93 = v11;
    __int16 v94 = 2114;
    uint64_t v95 = a2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "reevaluateDisplayLink: wants:%{BOOL}u devices:%{BOOL}u eventsDisabled:%{BOOL}u eventsPaused:%{BOOL}u allowed:%{BOOL}u has:%{BOOL}u paused:%{BOOL}u -- %{public}@", buf, 0x36u);
  }

  BOOL v13 = v9 == 0;
  BOOL v14 = v9 == 0;
  if (v9) {
    int v15 = 0;
  }
  else {
    int v15 = v8;
  }
  if (v13) {
    int v16 = 0;
  }
  else {
    int v16 = v8 ^ 1;
  }
  if (v13) {
    int v17 = 1;
  }
  else {
    int v17 = v8 ^ 1;
  }
  int v18 = v11 ^ 1;
  if (!v10) {
    int v18 = 0;
  }
  int v61 = v10;
  if (v17)
  {
    unsigned int v19 = 0;
  }
  else if (v10)
  {
    unsigned int v19 = 0;
  }
  else
  {
    unsigned int v19 = v11;
  }
  uint64_t v64 = v18 & ~v17;
  double v20 = [*(id *)(a1 + 184) displayUUID];
  if ((v8 ^ 1 | v14))
  {
    double v21 = (__CFString *)v63;
    if (!v16) {
      goto LABEL_29;
    }
  }
  else
  {
    double v21 = (__CFString *)v63;
    int v24 = BSEqualObjects();
    v15 |= v24 ^ 1;
    if (((v24 ^ 1 | v16) & 1) == 0)
    {
LABEL_29:
      id v22 = 0;
      unsigned int v62 = 0;
      int v23 = 0;
      if (!v15) {
        goto LABEL_55;
      }
      goto LABEL_35;
    }
  }
  id v25 = BKLogMousePointer();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    *(void *)id v83 = v20;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "reevaluateDisplayLink: destroy %{public}@", buf, 0xCu);
  }

  [*(id *)(a1 + 184) invalidate];
  uint64_t v26 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = 0;

  id v22 = v20;
  unsigned int v62 = 1;
  if ((v15 & 1) == 0)
  {
    int v23 = 0;
    goto LABEL_55;
  }
LABEL_35:
  id v60 = v22;
  long long v27 = BKLogMousePointer();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    *(void *)id v83 = v21;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "reevaluateDisplayLink: create %{public}@", buf, 0xCu);
  }

  long long v28 = +[CADisplay mainDisplay];
  long long v29 = v21;
  if (v29)
  {
    long long v30 = v29;
    unsigned __int8 v31 = [(__CFString *)v29 isEqualToString:BKSDisplayUUIDMainKey];

    if ((v31 & 1) == 0)
    {
      unsigned int v58 = v19;
      int v59 = v20;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      char v32 = +[CADisplay displays];
      id v33 = [v32 countByEnumeratingWithState:&v66 objects:buf count:16];
      if (v33)
      {
        id v34 = v33;
        uint64_t v35 = *(void *)v67;
        while (2)
        {
          for (uint64_t i = 0; i != v34; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v67 != v35) {
              objc_enumerationMutation(v32);
            }
            __int16 v37 = *(void **)(*((void *)&v66 + 1) + 8 * i);
            long long v38 = [v37 uniqueId];
            char v39 = BSEqualObjects();

            if (v39)
            {
              id v40 = v37;

              long long v28 = v40;
              goto LABEL_52;
            }
          }
          id v34 = [v32 countByEnumeratingWithState:&v66 objects:buf count:16];
          if (v34) {
            continue;
          }
          break;
        }
      }

      char v32 = BKLogMousePointer();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v70 = 138543362;
        CFStringRef v71 = v30;
        _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "reevaluateDisplayLink: warning: missing CADisplay for %{public}@, using main display for displaylink", v70, 0xCu);
      }
LABEL_52:
      double v21 = (__CFString *)v63;
      double v20 = v59;
      id v22 = v60;
      unsigned int v19 = v58;
    }
  }
  if (*(void *)(a1 + 184))
  {
    long long v54 = +[NSString stringWithFormat:@"we should not have a display link here. c:%d d:%d p:%d u:%d", 1, v62, v64, v19];
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      NSStringFromSelector("_locked_reevaluateDisplayLinkForReason:sendExitEventsToDisplayUUID:");
      long long v55 = (__CFString *)objc_claimAutoreleasedReturnValue();
      uint64_t v56 = (objc_class *)objc_opt_class();
      NSStringFromClass(v56);
      uint64_t v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)int v70 = 138544642;
      CFStringRef v71 = v55;
      __int16 v72 = 2114;
      char v73 = v57;
      __int16 v74 = 2048;
      uint64_t v75 = a1;
      __int16 v76 = 2114;
      CFStringRef v77 = @"BKMousePointerController.m";
      __int16 v78 = 1024;
      int v79 = 1997;
      __int16 v80 = 2114;
      id v81 = v54;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", v70, 0x3Au);
    }
    [v54 UTF8String];
    _bs_set_crash_log_message();
    __break(0);
    JUMPOUT(0x10006BD30);
  }
  double v41 = -[BKDisplayLink initWithDisplayLinkClass:display:target:action:]([BKDisplayLink alloc], "initWithDisplayLinkClass:display:target:action:", [*(id *)(a1 + 24) displayLinkClass], v28, a1, "_displayLinkFired:");
  double v42 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = v41;

  *(unsigned char *)(a1 + 420) = 0;
  int v23 = 1;
LABEL_55:
  if ((v64 | v19) != 1) {
    goto LABEL_64;
  }
  long long v43 = BKLogMousePointer();
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v44 = @"unpause";
    if (v64) {
      CFStringRef v44 = @"pause";
    }
    *(_DWORD *)int v70 = 138543618;
    CFStringRef v71 = v44;
    __int16 v72 = 2114;
    char v73 = v21;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "reevaluateDisplayLink: %{public}@ %{public}@", v70, 0x16u);
  }

  [*(id *)(a1 + 184) setPaused:v61 != 0];
  if (v64)
  {
    *(unsigned char *)(a1 + 420) = 1;
    *(void *)(a1 + 192) = mach_absolute_time();
  }
  if (!v19)
  {
LABEL_64:
    if ((v62 | v23 | v64 | v19)) {
      goto LABEL_72;
    }
    id v45 = v22;
    uint64_t v46 = *(void *)(a1 + 184);
    uint64_t v47 = BKLogMousePointer();
    BOOL v48 = os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
    if (v46)
    {
      if (v48)
      {
        int v49 = *(unsigned __int8 *)(a1 + 420);
        *(_DWORD *)int v70 = 138543618;
        CFStringRef v71 = v21;
        __int16 v72 = 1024;
        LODWORD(v73) = v49;
        id v50 = "reevaluateDisplayLink: no-op -- %{public}@ -- paused:%{BOOL}u";
        uint64_t v51 = v47;
        uint32_t v52 = 18;
LABEL_70:
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, v50, v70, v52);
      }
    }
    else if (v48)
    {
      *(_WORD *)int v70 = 0;
      id v50 = "reevaluateDisplayLink: no-op -- no display link";
      uint64_t v51 = v47;
      uint32_t v52 = 2;
      goto LABEL_70;
    }

    id v22 = v45;
    goto LABEL_72;
  }
  *(void *)(a1 + 200) = mach_absolute_time();
LABEL_72:

  id v53 = v22;
  if (v53)
  {
    id v65 = v53;
    sub_10006BD70(a1, (uint64_t)v53);
    id v53 = v65;
  }
}

void sub_10006BD70(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    uint64_t v3 = mach_absolute_time();
    sub_100067884(a1, v3);
    [*(id *)(a1 + 216) frameWillBegin];
    unsigned int v4 = objc_alloc_init(BKHIDEventCollector);
    id v5 = [*(id *)(a1 + 224) mutableCopy];
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v6 = *(id *)(a1 + 224);
    id v7 = [v6 countByEnumeratingWithState:&v19 objects:v25 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v20;
      do
      {
        int v10 = 0;
        do
        {
          if (*(void *)v20 != v9) {
            objc_enumerationMutation(v6);
          }
          unsigned int v11 = *(_DWORD **)(*((void *)&v19 + 1) + 8 * (void)v10);
          if (([*(id *)(a1 + 392) containsObject:v11] & 1) == 0
            && ([*(id *)(a1 + 400) containsObject:v11] & 1) == 0)
          {
            [*(id *)(a1 + 216) appendSubeventsForEventTypeMask:0x200000000F6 toTopLevelEvent:sub_10006A114(a1, v11, v3, (uint64_t)v4) interfaceOrientation:1 getEventSummary:0];
            id v12 = BKLogMousePointer();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
            {
              if (v11) {
                int v13 = v11[2];
              }
              else {
                int v13 = 0;
              }
              *(_DWORD *)long long buf = 67109120;
              int v24 = v13;
              _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "exit context:%X", buf, 8u);
            }

            [v5 removeObject:v11];
          }
          int v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v14 = [v6 countByEnumeratingWithState:&v19 objects:v25 count:16];
        id v8 = v14;
      }
      while (v14);
    }

    int v15 = *(void **)(a1 + 224);
    *(void *)(a1 + 224) = v5;
    id v16 = v5;

    sub_100068EB4(a1, a2, 0, 0, v3, (uint64_t)v4);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    id v18[2] = sub_10006C014;
    void v18[3] = &unk_1000F7B68;
    void v18[4] = a1;
    sub_1000175EC((uint64_t)v4, v18);
    [*(id *)(a1 + 216) frameDidEnd];
  }
}

void sub_10006C014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

const os_unfair_lock *sub_10006C01C(const os_unfair_lock *result)
{
  if (result)
  {
    uint64_t v1 = result;
    os_unfair_lock_assert_owner(result + 2);
    if (*(void *)&v1[18]._os_unfair_lock_opaque
      && ([*(id *)&v1[28]._os_unfair_lock_opaque coalitionIdentifier],
          uint64_t v2 = objc_claimAutoreleasedReturnValue(),
          unsigned int v3 = [v2 isEqual:@"main"],
          v2,
          !v3))
    {
      return 0;
    }
    else
    {
      return (const os_unfair_lock *)([*(id *)&v1[42]._os_unfair_lock_opaque count] != 0);
    }
  }
  return result;
}

double sub_10006C09C(uint64_t a1, void *a2, void *a3)
{
  if (!a1) {
    return 0.0;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  [a2 point];
  double v7 = v6;
  double v9 = v8;
  id v10 = [a2 contextID];
  unsigned int v11 = [a3 uniqueId];
  id v12 = sub_100010CB8(v11, (uint64_t)"BKDisplayConvertContextLocationToCAScreen");
  [v12 convertPoint:v10 fromContextId:v7];

  sub_100039AD4(v11);
  if (v11)
  {
    int v13 = [*(id *)(a1 + 56) immutableDisplayForUUID:v11];
    id v14 = sub_10006AD2C((const os_unfair_lock *)a1, v11);
  }
  else
  {
    int v13 = 0;
    id v14 = *(const os_unfair_lock **)(a1 + 232);
  }
  sub_10006C3EC(v13, (uint64_t)v14, *(void **)(a1 + 288));
  double v16 = v15;

  return v16;
}

id sub_10006C1C0(uint64_t a1, double a2, double a3)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    double v6 = +[NSMutableSet set];
    double v7 = [*(id *)(a1 + 120) displayUUID];
    double v8 = [*(id *)(a1 + 56) immutableDisplayForUUID:v7];
    double v9 = v8;
    if (v8)
    {
      id v10 = [v8 uniqueId];
      unsigned int v11 = sub_10006AD2C((const os_unfair_lock *)a1, v10);
      [*(id *)(a1 + 112) convertFromGlobalPoint:*(void *)(a1 + 120) toRegion:a2, a3];
      sub_10006ADB8(v9, (uint64_t)v11, *(void **)(a1 + 288));
      long long v22 = v10;
      sub_100010B54(v10);
      id v14 = sub_1000298E0(v12, v13, (uint64_t)BKMouseDestination, 0, v9, 0, *(void **)(a1 + 24), *(void **)(a1 + 224));
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      id v15 = [v14 countByEnumeratingWithState:&v23 objects:v27 count:16];
      if (v15)
      {
        id v16 = v15;
        uint64_t v17 = *(void *)v24;
        do
        {
          for (uint64_t i = 0; i != v16; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v24 != v17) {
              objc_enumerationMutation(v14);
            }
            uint64_t v19 = *(void *)(*((void *)&v23 + 1) + 8 * i);
            if (v19 && (*(_DWORD *)(v19 + 12) - 1) <= 0xFFFFFFFD)
            {
              long long v20 = +[NSNumber numberWithInt:sub_100029EF8(v19, *(void **)(a1 + 440))];
              [v6 addObject:v20];
            }
          }
          id v16 = [v14 countByEnumeratingWithState:&v23 objects:v27 count:16];
        }
        while (v16);
      }
    }
  }
  else
  {
    double v6 = 0;
  }

  return v6;
}

id sub_10006C3EC(id result, uint64_t a2, void *a3)
{
  if (a3) {
    return [a3 transformLayerPropertiesForDisplay:result displayInterfaceOrientation:a2];
  }
  return result;
}

uint64_t sub_10006C518(uint64_t result, void *a2, int a3)
{
  if (result)
  {
    uint64_t v4 = result;
    if (a3) {
      [*(id *)(result + 216) addSyntheticTopLevelEventIfNeeded];
    }
    if (([*(id *)(v4 + 216) buttonMaskDidChange] & 1) != 0
      || (id result = sub_10006A944(v4), (result & 1) == 0))
    {
      return (uint64_t)sub_100067884((const os_unfair_lock *)v4, a2);
    }
  }
  return result;
}

id sub_10006C63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    v11[0] = @"ScreenOn";
    double v6 = +[NSNumber numberWithBool:a2];
    v12[0] = v6;
    v11[1] = @"DigitizerSurfaceCovered";
    double v7 = +[NSNumber numberWithBool:a3];
    v12[1] = v7;
    void v11[2] = @"DeviceOrientation";
    double v8 = +[NSNumber numberWithInteger:a4];
    _DWORD v12[2] = v8;
    double v9 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:3];
  }
  else
  {
    double v9 = 0;
  }

  return v9;
}

id *sub_10006C758(id *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    uint64_t v4 = [result[5] deviceServices];
    id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v10;
      do
      {
        double v8 = 0;
        do
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v4);
          }
          sub_10006C86C(v3, *(void **)(*((void *)&v9 + 1) + 8 * (void)v8), a2);
          double v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v6);
    }

    return (id *)[*(id *)(v3 + 48) evaluatePeriodicReportingTrigger];
  }
  return result;
}

void sub_10006C86C(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    id v6 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [a2 senderID]);
    uint64_t v7 = [*(id *)(a1 + 248) objectForKeyedSubscript:v6];

    if (v7 && *(unsigned char *)(v7 + 9))
    {
      id v8 = *(id *)(v7 + 16);
      if (([v8 isEqual:a3] & 1) == 0)
      {
        long long v9 = BKLogMousePointer();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = 138543618;
          long long v11 = a3;
          __int16 v12 = 2114;
          CGFloat v13 = a2;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "view state update:%{public}@ for service:%{public}@", (uint8_t *)&v10, 0x16u);
        }

        [a2 asyncSetProperty:a3 forKey:@"HostStateNotification"];
        objc_storeStrong((id *)(v7 + 16), a3);
      }
    }
  }
}

void sub_10006CA98(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = BKLogMousePointer();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "reevaluateDisplayArrangementForReason(%{public}@)", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v28 = a2;

    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v29 = a1;
    id v5 = [*(id *)(a1 + 40) deviceServices];
    id v6 = [v5 countByEnumeratingWithState:&v30 objects:&buf count:16];
    if (v6)
    {
      id v7 = v6;
      char v8 = 0;
      char v9 = 0;
      uint64_t v10 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v31 != v10) {
            objc_enumerationMutation(v5);
          }
          __int16 v12 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          CGFloat v13 = [v12 displayUUID:v28];

          id v14 = BKLogMousePointer();
          BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          if (v13)
          {
            if (v15)
            {
              id v16 = [v12 senderID];
              uint64_t v17 = [v12 displayUUID];
              *(_DWORD *)id v34 = 134218242;
              id v35 = v16;
              __int16 v36 = 2114;
              __int16 v37 = v17;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "have display-specific device (sender:%llX display:%{public}@)", v34, 0x16u);
            }
            char v8 = 1;
          }
          else
          {
            if (v15)
            {
              id v18 = [v12 senderID];
              *(_DWORD *)id v34 = 134217984;
              id v35 = v18;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "have normal device (sender:%llX)", v34, 0xCu);
            }
            char v9 = 1;
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v30 objects:&buf count:16];
      }
      while (v7);
    }
    else
    {
      char v8 = 0;
      char v9 = 0;
    }

    *(unsigned char *)(v29 + 421) = v9 & 1;
    *(unsigned char *)(v29 + 422) = v8 & 1;
    uint64_t v19 = +[CADisplay mainDisplay];
    id v20 = [v19 uniqueId];
    id v21 = [v20 length];
    long long v22 = (void *)BKSDisplayUUIDMainKey;
    if (v21) {
      long long v22 = v20;
    }
    id v23 = v22;

    long long v24 = *(void **)(v29 + 72);
    *(void *)(v29 + 72) = v23;

    long long v25 = [*(id *)(v29 + 56) activeDisplays];
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    char v39 = sub_10006D9A0;
    id v40 = &unk_1000F7B18;
    uint64_t v41 = v29;
    uint64_t v26 = [v25 bs_filter:&buf];
    long long v27 = *(void **)(v29 + 96);
    *(void *)(v29 + 96) = v26;

    sub_10006CE04(v29);
    sub_10006B5C4(v29, v28);
    sub_10006D414(v29);
  }
}

void sub_10006CE04(uint64_t a1)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    id v57 = objc_alloc_init((Class)NSMutableDictionary);
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
    int v59 = [(BKMousePointerRegionArrangement *)[BKMutableMousePointerRegionArrangement alloc] initWithCoalitionIdentifier:@"main"];
    id v3 = *(id *)(a1 + 96);
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    id obj = v3;
    id v4 = [v3 countByEnumeratingWithState:&v75 objects:v87 count:16];
    if (v4)
    {
      id v5 = v4;
      id v6 = 0;
      id v60 = *(id *)v76;
      id v7 = (void *)BKSDisplayUUIDMainKey;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(id *)v76 != v60) {
            objc_enumerationMutation(obj);
          }
          char v9 = *(void **)(*((void *)&v75 + 1) + 8 * i);
          id v10 = [v9 uniqueId];
          if ([v10 length]) {
            long long v11 = v10;
          }
          else {
            long long v11 = v7;
          }
          id v12 = v11;

          if ([v12 isEqual:*(void *)(a1 + 72)])
          {
            uint64_t v13 = *(void *)(a1 + 232);
            double v14 = *(double *)(a1 + 32);
          }
          else
          {
            double v14 = 0.0;
            uint64_t v13 = 1;
          }
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v70 = 0u;
          BOOL v15 = *(void **)(a1 + 288);
          if (v15)
          {
            [v15 transformLayerPropertiesForDisplay:v9 displayInterfaceOrientation:v13];
            uint64_t v16 = *(void *)(a1 + 288);
          }
          else
          {
            uint64_t v16 = 0;
          }
          double v86 = 0.0;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          *(_OWORD *)long long buf = 0u;
          +[BKMousePointerDisplayRenderer rootLayerPropertiesForDisplay:v9 displayController:v16];
          uint64_t v17 = [BKMousePointerRegion alloc];
          id v18 = [(BKMousePointerRegion *)v17 initWithPointSize:v12 cornerRadius:v74 scale:v14 displayUUID:v86];
          if ([v9 isExternal] && sub_10006D648(a1, v9))
          {
            uint64_t v19 = [(BKMousePointerRegionArrangement *)[BKMutableMousePointerRegionArrangement alloc] initWithCoalitionIdentifier:v12];
            [(BKMutableMousePointerRegionArrangement *)v19 addPrimaryRegion:v18];
            id v20 = [(BKMutableMousePointerRegionArrangement *)v19 copy];
            [v57 setObject:v20 forKeyedSubscript:v12];
          }
          else
          {
            if (v6)
            {
              id v21 = [*(id *)(a1 + 432) pointerRegionArrangementEdge];
              [(BKMutableMousePointerRegionArrangement *)v6 pointSize];
              double v23 = v22;
              double v25 = v24;
              [(BKMousePointerRegion *)v18 pointSize];
              double v27 = v25 - v26;
              double v29 = v23 - v28;
              if ((v21 & 0xFFFFFFFD) == 0) {
                double v29 = v27;
              }
              [(BKMutableMousePointerRegionArrangement *)v59 addRegion:v18 relativeToRegion:v6 alongEdge:v21 atPosition:v29 * 0.5];
            }
            else
            {
              [(BKMutableMousePointerRegionArrangement *)v59 addPrimaryRegion:v18];
            }
            uint64_t v19 = v6;
            id v6 = v18;
          }
        }
        id v5 = [obj countByEnumeratingWithState:&v75 objects:v87 count:16];
      }
      while (v5);
    }
    else
    {
      id v6 = 0;
    }
    if (!*(void *)(a1 + 72))
    {
      long long v30 = +[CADisplay mainDisplay];
      id v31 = [v30 uniqueId];
      id v32 = [v31 length];
      long long v33 = (void *)BKSDisplayUUIDMainKey;
      if (v32) {
        long long v33 = v31;
      }
      id v34 = v33;

      id v35 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v34;
    }
    uint64_t v56 = a1;
    id v36 = [(BKMutableMousePointerRegionArrangement *)v59 copy];
    __int16 v37 = [(BKMousePointerRegionArrangement *)v59 coalitionIdentifier];
    [v57 setObject:v36 forKeyedSubscript:v37];

    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    id v61 = [v57 allValues];
    id v38 = [v61 countByEnumeratingWithState:&v66 objects:v80 count:16];
    if (v38)
    {
      id v39 = v38;
      uint64_t v40 = *(void *)v67;
      do
      {
        for (uint64_t j = 0; j != v39; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v67 != v40) {
            objc_enumerationMutation(v61);
          }
          double v42 = *(void **)(*((void *)&v66 + 1) + 8 * (void)j);
          long long v62 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          long long v43 = [v42 regions];
          id v44 = [v43 countByEnumeratingWithState:&v62 objects:v79 count:16];
          if (v44)
          {
            id v45 = v44;
            uint64_t v46 = *(void *)v63;
            do
            {
              for (k = 0; k != v45; k = (char *)k + 1)
              {
                if (*(void *)v63 != v46) {
                  objc_enumerationMutation(v43);
                }
                BOOL v48 = [*(id *)(*((void *)&v62 + 1) + 8 * (void)k) displayUUID];
                [v2 setObject:v42 forKey:v48];
              }
              id v45 = [v43 countByEnumeratingWithState:&v62 objects:v79 count:16];
            }
            while (v45);
          }
        }
        id v39 = [v61 countByEnumeratingWithState:&v66 objects:v80 count:16];
      }
      while (v39);
    }

    objc_storeStrong((id *)(v56 + 80), v57);
    objc_storeStrong((id *)(v56 + 88), v2);
    int v49 = BKLogMousePointer();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      id v50 = +[BSDescriptionStream descriptionForRootObject:v57];
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v50;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "new region arrangements:%{public}@", buf, 0xCu);
    }
    if ([v57 count] == (id)1)
    {
      sub_10006D7FC(v56, v59);
    }
    else
    {
      uint64_t v51 = *(void **)(v56 + 112);
      if (v51)
      {
        uint32_t v52 = [v51 coalitionIdentifier];
        id v53 = [v57 objectForKey:v52];

        if (v53) {
          long long v54 = v53;
        }
        else {
          long long v54 = v59;
        }
        sub_10006D7FC(v56, v54);
      }
    }
  }
}

void sub_10006D414(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = ![*(id *)(a1 + 168) count] && (unint64_t)(objc_msgSend(*(id *)(a1 + 96), "count") != 0);
    if (*(unsigned char *)(a1 + 418) != v2)
    {
      *(unsigned char *)(a1 + 418) = v2;
      id v3 = BKLogMousePointer();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        BOOL v19 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ready to receive events: %{BOOL}u", buf, 8u);
      }

      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      id v4 = [*(id *)(a1 + 40) deviceServices];
      id v5 = [v4 copy];

      id v6 = [v5 countByEnumeratingWithState:&v14 objects:v22 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v15;
        do
        {
          for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v15 != v8) {
              objc_enumerationMutation(v5);
            }
            id v10 = *(void **)(*((void *)&v14 + 1) + 8 * i);
            long long v11 = BKLogMousePointer();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              int v12 = *(unsigned __int8 *)(a1 + 418);
              *(_DWORD *)long long buf = 67109378;
              BOOL v19 = v12;
              __int16 v20 = 2114;
              id v21 = v10;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "set _readyToReceiveEvents:%{BOOL}u on %{public}@", buf, 0x12u);
            }

            uint64_t v13 = +[NSNumber numberWithBool:v2];
            [v10 asyncSetProperty:v13 forKey:@"BKReadyToReceivePointerEvents"];
          }
          id v7 = [v5 countByEnumeratingWithState:&v14 objects:v22 count:16];
        }
        while (v7);
      }
    }
  }
}

uint64_t sub_10006D648(uint64_t a1, void *a2)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
  id v4 = [*(id *)(a1 + 40) deviceServices];
  id v5 = [v4 copy];

  id v6 = [a2 uniqueId];
  id v7 = [v6 length];
  uint64_t v8 = (void *)BKSDisplayUUIDMainKey;
  if (v7) {
    char v9 = v6;
  }
  else {
    char v9 = (void *)BKSDisplayUUIDMainKey;
  }
  id v10 = v9;

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v11 = v5;
  uint64_t v12 = (uint64_t)[v11 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v21;
    while (2)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v21 != v13) {
          objc_enumerationMutation(v11);
        }
        [*(id *)(*((void *)&v20 + 1) + 8 * i) displayUUID:v20];
        id v15 = (id)objc_claimAutoreleasedReturnValue();
        if ([v15 length]) {
          long long v16 = v15;
        }
        else {
          long long v16 = v8;
        }
        id v17 = v16;

        unsigned __int8 v18 = [v10 isEqual:v17];
        if (v18)
        {
          uint64_t v12 = 1;
          goto LABEL_17;
        }
      }
      uint64_t v12 = (uint64_t)[v11 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v12) {
        continue;
      }
      break;
    }
  }
LABEL_17:

  return v12;
}

void sub_10006D7FC(uint64_t a1, void *a2)
{
  double x = CGPointZero.x;
  double y = CGPointZero.y;
  id v6 = *(void **)(a1 + 112);
  if (v6 && *(void *)(a1 + 120))
  {
    [v6 convertToGlobalPoint:*(double *)(a1 + 144) fromRegion:*(double *)(a1 + 152)];
    double x = v7;
    double y = v8;
  }
  char v9 = [*(id *)(a1 + 120) displayUUID];
  id v10 = [a2 regionForDisplayUUID:v9];

  if (v10)
  {
    [a2 convertToGlobalPoint:v10 fromRegion:*(double *)(a1 + 144) *(double *)(a1 + 152)];
    double x = v11;
    double y = v12;
  }
  if (a2)
  {
    id v13 = [a2 copy];
    long long v14 = *(void **)(a1 + 112);
    *(void *)(a1 + 112) = v13;

    id v15 = BKLogMousePointer();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 112);
      int v19 = 138543362;
      uint64_t v20 = v16;
      id v17 = "selected region arrangement:%{public}@";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v19, 0xCu);
    }
  }
  else
  {
    id v15 = BKLogMousePointer();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 112);
      int v19 = 138543362;
      uint64_t v20 = v18;
      id v17 = "no region arrangement found; preserving previous:%{public}@";
      goto LABEL_11;
    }
  }

  sub_10006B228(a1, 1, @"updateRegionArrangement", x, y);
}

BOOL sub_10006D9A0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 104);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(v3 + 8));
  id v5 = *(id *)(v3 + 72);
  int v6 = sub_10006D648(v3, a2);
  int v7 = *(unsigned __int8 *)(v3 + 421);
  BOOL v8 = *(unsigned char *)(v3 + 421) != 0;
  id v9 = [a2 uniqueId];
  id v10 = [v9 length];
  double v11 = (void *)BKSDisplayUUIDMainKey;
  if (v10) {
    double v12 = v9;
  }
  else {
    double v12 = (void *)BKSDisplayUUIDMainKey;
  }
  id v13 = v12;

  if (BSEqualObjects())
  {
    if (v7) {
      long long v14 = @"main display";
    }
    else {
      long long v14 = @"no standard coalition pointer device";
    }
  }
  else if ([a2 isExternal] & v6)
  {
    BOOL v8 = 1;
    long long v14 = @"external display with associated pointer device";
  }
  else
  {
    unsigned int v15 = [a2 isExternal];
    BOOL v8 = 0;
    if (v15) {
      long long v14 = @"no standard coalition pointer device";
    }
    else {
      long long v14 = @"non-external but non-main";
    }
    if (v15 && v7)
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      id v16 = v4;
      id v17 = [v16 countByEnumeratingWithState:&v34 objects:buf count:16];
      if (v17)
      {
        id v18 = v17;
        uint64_t v19 = *(void *)v35;
        while (2)
        {
          for (uint64_t i = 0; i != v18; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v35 != v19) {
              objc_enumerationMutation(v16);
            }
            [*(id *)(*((void *)&v34 + 1) + 8 * i) displayUUID:v34];
            id v21 = (id)objc_claimAutoreleasedReturnValue();
            if ([v21 length]) {
              long long v22 = v21;
            }
            else {
              long long v22 = v11;
            }
            id v23 = v22;

            unsigned __int8 v24 = [v13 isEqual:v23];
            if (v24)
            {

              BOOL v8 = 1;
              long long v14 = @"in current arragement";
              goto LABEL_28;
            }
          }
          id v18 = [v16 countByEnumeratingWithState:&v34 objects:buf count:16];
          if (v18) {
            continue;
          }
          break;
        }
      }

      BOOL v8 = 0;
      long long v14 = @"not in current arrangement";
    }
  }
LABEL_28:

  double v25 = v14;
  double v26 = BKLogMousePointer();
  BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v27)
    {
      id v28 = [a2 uniqueId];
      if ([v28 length]) {
        double v29 = v28;
      }
      else {
        double v29 = v11;
      }
      id v30 = v29;

      *(_DWORD *)long long buf = 138543618;
      id v39 = v30;
      __int16 v40 = 2114;
      uint64_t v41 = v25;
      id v31 = "display %{public}@ interesting because %{public}@";
LABEL_39:
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v31, buf, 0x16u);
    }
  }
  else if (v27)
  {
    id v28 = [a2 uniqueId];
    if ([v28 length]) {
      id v32 = v28;
    }
    else {
      id v32 = v11;
    }
    id v30 = v32;

    *(_DWORD *)long long buf = 138543618;
    id v39 = v30;
    __int16 v40 = 2114;
    uint64_t v41 = v25;
    id v31 = "display %{public}@ uninteresting because %{public}@";
    goto LABEL_39;
  }

  return v8;
}

id sub_10006E234(uint64_t a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    id v4 = [a2 bs_compactMap:&stru_1000F7AC8];
    id v5 = [v4 componentsJoinedByString:@", "];
    int v6 = +[NSString stringWithFormat:@"%@: %@", a3, v5];
  }
  else
  {
    int v6 = 0;
  }

  return v6;
}

id sub_10006E2DC(uint64_t a1, void *a2)
{
  return [a2 pointingDevicesDidChange:*(void *)(a1 + 32)];
}

id sub_10006E2E8(id a1, BKIOHIDService *a2)
{
  return +[NSString stringWithFormat:@"%llX", [(BKIOHIDService *)a2 senderID]];
}

id sub_10006EB08(const os_unfair_lock *a1)
{
  if (a1)
  {
    os_unfair_lock_assert_owner(a1 + 3);
    uint64_t v1 = +[BKSDefaults localDefaults];
    BOOL v2 = [v1 globalMouseDevicePreferences];
    if (v2)
    {
      id v8 = 0;
      uint64_t v3 = +[BSProtobufSerialization decodeObjectOfClass:objc_opt_class() fromData:v2 error:&v8];
      id v4 = v8;
      id v5 = v4;
      if (v3)
      {

LABEL_11:
        goto LABEL_12;
      }
      int v6 = BKLogMousePointer();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        id v10 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "cannot decode global prefs: %{public}@", buf, 0xCu);
      }
    }
    else
    {
      id v5 = BKLogMousePointer();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "returning default prefs", buf, 2u);
      }
    }

    uint64_t v3 = +[BKSMousePointerDevicePreferences defaultPreferencesForHardwareType:9];
    goto LABEL_11;
  }
  uint64_t v3 = 0;
LABEL_12:

  return v3;
}

void sub_10006ECB8(const os_unfair_lock *a1, void *a2, void *a3)
{
  if (a1)
  {
    os_unfair_lock_assert_not_owner(a1 + 2);
    os_unfair_lock_assert_owner(a1 + 3);
    int v6 = BKLogMousePointer();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543618;
      id v32 = a2;
      __int16 v33 = 2114;
      long long v34 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "apply prefs:%{public}@ to service:%{public}@", buf, 0x16u);
    }

    [a2 pointerAccelerationFactor];
    unint64_t v8 = vcvtd_n_u64_f64(v7, 0x10uLL);
    [a2 scrollAccelerationFactor];
    unint64_t v10 = vcvtd_n_u64_f64(v9, 0x10uLL);
    id v11 = objc_alloc_init((Class)NSMutableDictionary);
    if ([a3 eventSource] != 12)
    {
      id v18 = [a2 buttonConfigurationForHardwareButtonMice];
      if ([a3 claimsToConformToUsagePage:13 usage:12]) {
        id v18 = [a2 buttonConfigurationForVirtualButtonMice];
      }
      if (v18)
      {
        v29[0] = &off_100103688;
        v29[1] = &off_1001036A0;
        v30[0] = @"OneButton";
        v30[1] = @"TwoButton";
        v29[2] = &off_1001036B8;
        v30[2] = @"TwoButtonSwapped";
        uint64_t v19 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:3];
        uint64_t v20 = +[NSNumber numberWithInteger:v18];
        id v21 = [v19 objectForKeyedSubscript:v20];

        if (v21)
        {
          [v11 setObject:v21 forKey:@"MouseButtonMode"];
          long long v22 = BKLogMousePointer();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412290;
            id v32 = v21;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "set MouseButtonMode:%@", buf, 0xCu);
          }
        }
      }
      CFStringRef v23 = @"HIDMouseAcceleration";
      CFStringRef v24 = @"HIDMouseScrollAcceleration";
      goto LABEL_22;
    }
    id v12 = [a2 enableTapToClick];
    id v13 = [a2 enableTwoFingerSecondaryClick];
    long long v14 = +[NSNumber numberWithBool:v12];
    [v11 setObject:v14 forKey:@"TapToClickEnabled"];

    unsigned int v15 = +[NSNumber numberWithBool:v13];
    [v11 setObject:v15 forKey:@"TwoFingersSecondaryClickEnabled"];

    id v16 = [a2 clickHapticStrength];
    if (v16 == (id)1)
    {
      id v17 = &__kCFBooleanTrue;
    }
    else
    {
      if (v16 != (id)2)
      {
LABEL_19:
        id v25 = [a2 doubleTapDragMode];
        if ((unint64_t)v25 <= 2)
        {
          uint64_t v26 = (uint64_t)*(&off_1000F7BF0 + (void)v25);
          [v11 setObject:*(&off_1000F7BD8 + (void)v25) forKey:@"DoubleTapToDragEnabled"];
          [v11 setObject:v26 forKey:@"DragLockEnabled"];
        }
        CFStringRef v23 = @"HIDTrackpadAcceleration";
        CFStringRef v24 = @"HIDTrackpadScrollAcceleration";
LABEL_22:
        BOOL v27 = +[NSNumber numberWithUnsignedInteger:v8];
        [v11 setObject:v27 forKey:v23];

        id v28 = +[NSNumber numberWithUnsignedInteger:v10];
        [v11 setObject:v28 forKey:v24];

        [a3 asyncSetProperties:v11];
        return;
      }
      id v17 = &__kCFBooleanFalse;
    }
    [v11 setObject:v17 forKey:@"ActuationStrength"];
    goto LABEL_19;
  }
}

id sub_10006F088(uint64_t a1, void *a2)
{
  return [a2 pointingDevicesDidChange:*(void *)(a1 + 32)];
}

void sub_10006F2B4(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_assert_not_owner((const os_unfair_lock *)(a1 + 8));
    os_unfair_lock_lock(v2);
    [*(id *)(a1 + 208) invalidate];
    uint64_t v3 = *(void **)(a1 + 208);
    *(void *)(a1 + 208) = 0;

    if (*(unsigned char *)(a1 + 419))
    {
      *(unsigned char *)(a1 + 419) = 0;
      sub_10006B5C4(a1, @"Events unpaused");
    }
    objc_initWeak(&location, (id)a1);
    id v4 = [objc_alloc((Class)BSAbsoluteMachTimer) initWithIdentifier:@"BKMousePointerController.displayLinkPauseTimer"];
    id v5 = *(void **)(a1 + 208);
    *(void *)(a1 + 208) = v4;

    int v6 = *(void **)(a1 + 208);
    id v7 = &_dispatch_main_q;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_10006F77C;
    v8[3] = &unk_1000F7FA0;
    objc_copyWeak(&v9, &location);
    [v6 scheduleWithFireInterval:&_dispatch_main_q leewayInterval:v8 queue:3.0 handler:0.5];

    os_unfair_lock_unlock(v2);
    objc_destroyWeak(&v9);
    objc_destroyWeak(&location);
  }
}

void sub_10006F3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006F420(uint64_t a1)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    if ([*(id *)(a1 + 216) scrollPhaseDidChange])
    {
      id v2 = [*(id *)(a1 + 216) scrollPhase];
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      id v3 = *(id *)(a1 + 352);
      id v4 = [v3 countByEnumeratingWithState:&v41 objects:v48 count:16];
      if (v4)
      {
        id v5 = v4;
        uint64_t v6 = *(void *)v42;
        do
        {
          id v7 = 0;
          do
          {
            if (*(void *)v42 != v6) {
              objc_enumerationMutation(v3);
            }
            [*(id *)(*((void *)&v41 + 1) + 8 * (void)v7) observeMouseScrollPhaseDidChange:v2];
            id v7 = (char *)v7 + 1;
          }
          while (v5 != v7);
          id v5 = [v3 countByEnumeratingWithState:&v41 objects:v48 count:16];
        }
        while (v5);
      }
    }
    if ([*(id *)(a1 + 216) buttonMaskDidChange])
    {
      id v8 = [*(id *)(a1 + 216) buttonMask];
      long long v37 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      id v9 = *(id *)(a1 + 352);
      id v10 = [v9 countByEnumeratingWithState:&v37 objects:v47 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v38;
        do
        {
          id v13 = 0;
          do
          {
            if (*(void *)v38 != v12) {
              objc_enumerationMutation(v9);
            }
            [*(id *)(*((void *)&v37 + 1) + 8 * (void)v13) observeMouseButtonMaskDidChange:v8];
            id v13 = (char *)v13 + 1;
          }
          while (v11 != v13);
          id v11 = [v9 countByEnumeratingWithState:&v37 objects:v47 count:16];
        }
        while (v11);
      }
    }
    if ([*(id *)(a1 + 216) touchingPathIndexesDidChange])
    {
      long long v14 = [*(id *)(a1 + 216) touchingPathIndexes];
      id v15 = [v14 count];

      kdebug_trace();
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      id v16 = *(id *)(a1 + 352);
      id v17 = [v16 countByEnumeratingWithState:&v33 objects:v46 count:16];
      if (v17)
      {
        id v18 = v17;
        uint64_t v19 = *(void *)v34;
        do
        {
          uint64_t v20 = 0;
          do
          {
            if (*(void *)v34 != v19) {
              objc_enumerationMutation(v16);
            }
            [*(id *)(*((void *)&v33 + 1) + 8 * (void)v20) observeMouseTouchCountDidChange:v15];
            uint64_t v20 = (char *)v20 + 1;
          }
          while (v18 != v20);
          id v18 = [v16 countByEnumeratingWithState:&v33 objects:v46 count:16];
        }
        while (v18);
      }
    }
    if ([*(id *)(a1 + 216) forceDidChange])
    {
      [*(id *)(a1 + 216) force];
      double v22 = v21;
      id v23 = [*(id *)(a1 + 216) stage];
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id v24 = *(id *)(a1 + 352);
      id v25 = [v24 countByEnumeratingWithState:&v29 objects:v45 count:16];
      if (v25)
      {
        id v26 = v25;
        uint64_t v27 = *(void *)v30;
        do
        {
          id v28 = 0;
          do
          {
            if (*(void *)v30 != v27) {
              objc_enumerationMutation(v24);
            }
            [*(id *)(*((void *)&v29 + 1) + 8 * (void)v28) observeMouseForceDidChange:v23 stage:v22];
            id v28 = (char *)v28 + 1;
          }
          while (v26 != v28);
          id v26 = [v24 countByEnumeratingWithState:&v29 objects:v45 count:16];
        }
        while (v26);
      }
    }
  }
}

void sub_10006F77C(uint64_t a1)
{
  id WeakRetained = (os_unfair_lock *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained + 2;
    id v3 = WeakRetained;
    os_unfair_lock_assert_not_owner(WeakRetained + 2);
    os_unfair_lock_lock(v2);
    HIBYTE(v3[104]._os_unfair_lock_opaque) = 1;
    sub_10006B5C4((uint64_t)v3, @"Events paused");
    os_unfair_lock_unlock(v2);
    id WeakRetained = v3;
  }
}

void sub_10006FB70(uint64_t a1)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    objc_initWeak(&location, (id)a1);
    [*(id *)(a1 + 216) invalidate];
    id v2 = [BKMouseEventAccumulator alloc];
    uint64_t v3 = *(void *)(a1 + 176);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_10006FEC8;
    v6[3] = &unk_1000F7B40;
    objc_copyWeak(&v7, &location);
    void v6[4] = a1;
    id v4 = [(BKMouseEventAccumulator *)v2 initWithInterpolatedEventTypeMask:v3 postEventsBlock:v6];
    id v5 = *(void **)(a1 + 216);
    *(void *)(a1 + 216) = v4;

    sub_10006FFC8(a1);
    objc_destroyWeak(&v7);
    objc_destroyWeak(&location);
  }
}

void sub_10006FC60(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006FC88(uint64_t a1)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    uint64_t v2 = mach_absolute_time();
    uint64_t v3 = objc_alloc_init(BKHIDEventCollector);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v4 = *(id *)(a1 + 224);
    id v5 = [v4 countByEnumeratingWithState:&v15 objects:v21 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v16;
      do
      {
        id v8 = 0;
        do
        {
          if (*(void *)v16 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(_DWORD **)(*((void *)&v15 + 1) + 8 * (void)v8);
          sub_10006A114(a1, v9, v2, (uint64_t)v3);
          id v10 = BKLogMousePointer();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            if (v9) {
              int v11 = v9[2];
            }
            else {
              int v11 = 0;
            }
            *(_DWORD *)long long buf = 67109120;
            int v20 = v11;
            _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "exit context:%X", buf, 8u);
          }

          id v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v12 = [v4 countByEnumeratingWithState:&v15 objects:v21 count:16];
        id v6 = v12;
      }
      while (v12);
    }

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10006FEC0;
    v14[3] = &unk_1000F7B68;
    void v14[4] = a1;
    sub_1000175EC((uint64_t)v3, v14);
    id v13 = *(void **)(a1 + 224);
    *(void *)(a1 + 224) = 0;
  }
}

id sub_10006FE94(id a1, NSNumber *a2)
{
  [(NSNumber *)a2 intValue];

  return (id)BSProcessDescriptionForPID();
}

void sub_10006FEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_10006FEC8(uint64_t a1, uint64_t a2, double a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (a3 == 0.0)
  {
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    sub_10006F420((uint64_t)WeakRetained);
    uint64_t v7 = (void *)mach_absolute_time();
    sub_10006C518((uint64_t)WeakRetained, v7, 0);
  }
  else
  {
    dispatch_time_t v8 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100070054;
    block[3] = &unk_1000F8130;
    uint64_t v9 = *(void *)(a1 + 32);
    void block[5] = WeakRetained;
    void block[6] = a2;
    void block[4] = v9;
    dispatch_after(v8, (dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_10006FFC8(uint64_t a1)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    id v2 = [(id)a1 globalDevicePreferences];
    [*(id *)(a1 + 216) setShouldScrollNaturally:[v2 enableNaturalScrolling]];
    [*(id *)(a1 + 216) setShouldSwapPrimaryAndSecondaryButtons:objc_msgSend(v2, "buttonConfigurationForHardwareButtonMice") == (id)3];
  }
}

void sub_100070054(void *a1)
{
  os_unfair_lock_assert_not_owner((const os_unfair_lock *)(a1[4] + 8));
  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 8));
  (*(void (**)(void))(a1[6] + 16))();
  sub_10006F420(a1[5]);
  uint64_t v2 = a1[5];
  uint64_t v3 = (void *)mach_absolute_time();
  sub_10006C518(v2, v3, 0);
  id v4 = (os_unfair_lock_s *)(a1[4] + 8);

  os_unfair_lock_unlock(v4);
}

void sub_100070318(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    [*(id *)(a1 + 352) removeObject:a2];
    if (![*(id *)(a1 + 352) count])
    {
      id v4 = *(void **)(a1 + 352);
      *(void *)(a1 + 352) = 0;
    }
  }
}

const os_unfair_lock *sub_1000703E4(const os_unfair_lock *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    os_unfair_lock_assert_owner(result + 2);
    id v4 = *(void **)&v3[88]._os_unfair_lock_opaque;
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableArray);
      id v6 = *(void **)&v3[88]._os_unfair_lock_opaque;
      *(void *)&v3[88]._os_unfair_lock_opaque = v5;

      id v4 = *(void **)&v3[88]._os_unfair_lock_opaque;
    }
    return (const os_unfair_lock *)[v4 addObject:a2];
  }
  return result;
}

void sub_100070894(uint64_t a1, void *a2)
{
}

void sub_1000708AC(uint64_t a1, void *a2, int a3, void *a4)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    id v6 = BKLogMousePointer();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = BSProcessDescriptionForPID();
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = a4;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v7;
      *(_WORD *)&buf[22] = 2114;
      *(void *)&unsigned char buf[24] = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "global route update: display:%{public}@ -> process %{public}@ %{public}@", buf, 0x20u);
    }
    dispatch_time_t v8 = *(void **)(a1 + 384);
    if (!v8)
    {
      id v9 = objc_alloc_init((Class)NSMutableDictionary);
      id v10 = *(void **)(a1 + 384);
      *(void *)(a1 + 384) = v9;

      dispatch_time_t v8 = *(void **)(a1 + 384);
    }
    id v56 = [v8 objectForKeyedSubscript:a4];
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    id v11 = [v56 copy];
    id v12 = 0;
    id v13 = [v11 countByEnumeratingWithState:&v66 objects:v78 count:16];
    if (v13)
    {
      uint64_t v14 = *(void *)v67;
      do
      {
        long long v15 = 0;
        do
        {
          if (*(void *)v67 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void *)(*((void *)&v66 + 1) + 8 * (void)v15);
          if (v16)
          {
            id v17 = *(id *)(v16 + 24);
            long long v18 = v17;
            if (v17)
            {
              int v19 = *((_DWORD *)v17 + 8);
              goto LABEL_14;
            }
          }
          else
          {
            long long v18 = 0;
          }
          int v19 = 0;
LABEL_14:
          if (v19 == a3)
          {
            if (!v12) {
              id v12 = objc_alloc_init((Class)NSMutableSet);
            }
            [v12 addObject:v16];
            [v56 removeObject:v16];
          }

          long long v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        id v20 = [v11 countByEnumeratingWithState:&v66 objects:v78 count:16];
        id v13 = v20;
      }
      while (v20);
    }

    if (![v56 count]) {
      [*(id *)(a1 + 384) removeObjectForKey:a4];
    }
    if ([a2 count])
    {
      if (!v56)
      {
        id v56 = objc_alloc_init((Class)NSMutableSet);
        [*(id *)(a1 + 384) setObject:v56 forKeyedSubscript:a4];
      }
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      id obja = a2;
      id v21 = [obja countByEnumeratingWithState:&v62 objects:v77 count:16];
      if (!v21)
      {
        uint32_t v52 = 0;
        goto LABEL_55;
      }
      uint32_t v52 = 0;
      uint64_t v23 = *(void *)v63;
      *(void *)&long long v22 = 67109376;
      long long v51 = v22;
      while (1)
      {
        for (uint64_t i = 0; i != v21; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v63 != v23) {
            objc_enumerationMutation(obja);
          }
          id v25 = *(void **)(*((void *)&v62 + 1) + 8 * i);
          id v26 = [v25 contextID:v51];
          if ((v26 + 1) <= 1)
          {
            p_super = BKLogMousePointer();
            if (!os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR)) {
              goto LABEL_50;
            }
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v26;
            id v28 = p_super;
            long long v29 = "attempt to establish global route for contextID %X ignored";
            uint32_t v30 = 8;
LABEL_45:
            _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, v29, buf, v30);
            goto LABEL_50;
          }
          id v31 = [*(id *)(a1 + 288) taskPortForContextID:v26 displayUUID:a4];
          if ((v31 - 1) >= 0xFFFFFFFE)
          {
            p_super = BKLogMousePointer();
            if (!os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR)) {
              goto LABEL_50;
            }
            *(_DWORD *)long long buf = v51;
            *(_DWORD *)&uint8_t buf[4] = v26;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v31;
            id v28 = p_super;
            long long v29 = "attempt to establish global route for contextID %X ignored due to invalid corresponding port %X";
            uint32_t v30 = 14;
            goto LABEL_45;
          }
          long long v32 = [(BKCAContextDestination *)[BKMouseDestination alloc] initWithContextID:v26 clientPort:v31];
          p_super = &v32->super.super;
          if (v32)
          {
            v32->_cachedPID = a3;
            v32->super._contextID = v26;
          }
          sub_1000298B0((uint64_t)v32, a4);
          sub_100029EC8((uint64_t)p_super, *(void **)(a1 + 24));
          long long v33 = objc_alloc_init(_BKMouseEventGlobalRoute);
          destination = [v25 options];
          if (v33)
          {
            objc_storeStrong((id *)&v33->_options, destination);

            long long v35 = p_super;
            destination = v33->_destination;
            v33->_destination = v35;
          }

          [v56 addObject:v33];
          if ([v12 containsObject:v33])
          {
            [v12 removeObject:v33];
          }
          else
          {
            id v36 = v52;
            if (!v52) {
              id v36 = objc_alloc_init((Class)NSMutableSet);
            }
            uint32_t v52 = v36;
            [v36 addObject:v33];
          }

LABEL_50:
        }
        id v21 = [obja countByEnumeratingWithState:&v62 objects:v77 count:16];
        if (!v21)
        {
LABEL_55:

          goto LABEL_56;
        }
      }
    }
    uint32_t v52 = 0;
LABEL_56:
    if ([v12 count] || objc_msgSend(v52, "count"))
    {
      uint64_t v37 = mach_absolute_time();
      long long v38 = objc_alloc_init(BKHIDEventCollector);
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      id v39 = v12;
      id v40 = [v39 countByEnumeratingWithState:&v58 objects:v76 count:16];
      if (v40)
      {
        uint64_t v41 = *(void *)v59;
        do
        {
          for (uint64_t j = 0; j != v40; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v59 != v41) {
              objc_enumerationMutation(v39);
            }
            sub_10006AE68(a1, *(void *)(*((void *)&v58 + 1) + 8 * (void)j), v37, 1, (uint64_t)v38);
          }
          id v40 = [v39 countByEnumeratingWithState:&v58 objects:v76 count:16];
        }
        while (v40);
      }

      if ([*(id *)(a1 + 216) buttonMask] && objc_msgSend(v52, "count"))
      {
        long long v80 = 0u;
        memset(buf, 0, sizeof(buf));
        *(void *)&uint8_t buf[16] = v37;
        *(void *)&unsigned char buf[24] = [*(id *)(a1 + 216) lastRemoteEventTimestamp];
        *(void *)&unsigned char buf[32] = [*(id *)(a1 + 216) eventSequenceStartTimestamp];
        memset(&buf[40], 0, 32);
        *(void *)&buf[72] = [*(id *)(a1 + 216) mostRecentSender];
        *(void *)&long long v80 = +[BKTouchDeliveryPolicyServer sharedServer];
        WORD4(v80) = 0;
        double v74 = 0.0;
        double v75 = 0.0;
        id v73 = 0;
        sub_100068B24(a1, &v74, &v73, (const os_unfair_lock **)&buf[8]);
        id v43 = v73;
        if (v43)
        {
          if ([*(id *)(a1 + 216) buttonMask]) {
            *(void *)long long buf = 2;
          }
          id v44 = [v43 uniqueId];
          id v45 = [v44 length];
          uint64_t v46 = (void *)BKSDisplayUUIDMainKey;
          if (v45) {
            uint64_t v46 = v44;
          }
          id v47 = v46;

          v71[0] = _NSConcreteStackBlock;
          v71[1] = 3221225472;
          v71[2] = sub_100071128;
          v71[3] = &unk_1000F7BB8;
          id v48 = v47;
          id v72 = v48;
          int v49 = [v52 bs_filter:v71];
          if ([v49 count])
          {
            id v50 = objc_alloc_init(BKHIDEventCollector);
            sub_100068C5C(a1, v49, (uint64_t)buf, (uint64_t)v50, v74, v75);
            v70[0] = _NSConcreteStackBlock;
            v70[1] = 3221225472;
            v70[2] = sub_10007119C;
            v70[3] = &unk_1000F7B68;
            uint8_t v70[4] = a1;
            sub_1000175EC((uint64_t)v50, v70);
          }
        }
      }
      v57[0] = _NSConcreteStackBlock;
      v57[1] = 3221225472;
      v57[2] = sub_100071120;
      v57[3] = &unk_1000F7B68;
      v57[4] = a1;
      sub_1000175EC((uint64_t)v38, v57);
    }
  }
}

void sub_1000710F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100071120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100071128(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  id v2 = *(id *)(a2 + 24);
  uint64_t v3 = v2;
  if (!v2)
  {
LABEL_6:
    id v4 = 0;
    goto LABEL_4;
  }
  id v4 = (void *)*((void *)v2 + 5);
LABEL_4:
  id v5 = v4;
  uint64_t v6 = BSEqualObjects();

  return v6;
}

void sub_10007119C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100071C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100071C84(uint64_t a1, uint64_t a2)
{
  id WeakRetained = (os_unfair_lock *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = WeakRetained + 2;
    uint64_t v6 = (id *)WeakRetained;
    os_unfair_lock_assert_not_owner(WeakRetained + 2);
    os_unfair_lock_lock(v4);
    [v6[47] removeObject:a2];
    if (![v6[47] count])
    {
      id v5 = v6[47];
      v6[47] = 0;
    }
    os_unfair_lock_unlock(v4);
    id WeakRetained = (os_unfair_lock *)v6;
  }
}

BKMousePointerScrollAnimationDriver *sub_100071EB0(double *a1, double a2, double a3)
{
  uint64_t v3 = -[BKMousePointerScrollAnimationDriver initWithRelativeTranslation:initialVelocity:decelerationRate:]([BKMousePointerScrollAnimationDriver alloc], "initWithRelativeTranslation:initialVelocity:decelerationRate:", a2, a3, a1[4], a1[5], a1[6]);

  return v3;
}

void sub_100071F10(uint64_t a1, void *a2, int a3, double a4, double a5, uint64_t a6, void (**a7)(void, double, double))
{
  if (a1)
  {
    id v13 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_assert_not_owner((const os_unfair_lock *)(a1 + 8));
    os_unfair_lock_lock(v13);
    if (*(void *)(a1 + 120))
    {
      [*(id *)(a1 + 112) convertToGlobalPoint:*(double *)(a1 + 144) fromRegion:*(double *)(a1 + 152)];
      double x = v14;
      double y = v16;
    }
    else
    {
      double x = CGPointZero.x;
      double y = CGPointZero.y;
    }
    long long v18 = *(void **)(a1 + 112);
    id v19 = a2;
    id v20 = [v19 length];
    id v21 = (void *)BKSDisplayUUIDMainKey;
    if (v20) {
      id v21 = v19;
    }
    id v22 = v21;

    uint64_t v23 = [v18 regionForDisplayUUID:v22];

    if (v23)
    {
      if ([*(id *)(a1 + 216) positionType] != (id)1)
      {
        kdebug_trace();
        if ([*(id *)(a1 + 128) count])
        {
          id v26 = [*(id *)(a1 + 128) lastObject];
          [v26 destinationPoint];
          double x = v27;
          double y = v28;
        }
        [*(id *)(a1 + 112) convertToGlobalPoint:v23 fromRegion:a4, a5];
        double v30 = v29;
        double v32 = v31;
        double v33 = v29 - x;
        double v34 = v31 - y;
        long long v35 = *(void **)(a1 + 136);
        os_unfair_lock_unlock(v13);
        if (a3 < 1)
        {
          objc_initWeak((id *)location, (id)a1);
          id v36 = BSProcessDescriptionForPID();
          long long v38 = +[NSString stringWithFormat:@"setPosition %@", v36];
        }
        else
        {
          if (sqrt(v33 * v33 + v34 * v34) > 160.0)
          {
            id v44 = BKLogMousePointer();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
            {
              uint64_t v46 = BSStringFromCGPoint();
              uint64_t v47 = *(void *)(a1 + 120);
              id v48 = BSStringFromCGPoint();
              int v49 = BSStringFromCGPoint();
              id v50 = BSStringFromCGPoint();
              *(_DWORD *)id location = 134219778;
              *(void *)&location[4] = 0x4064000000000000;
              __int16 v57 = 2114;
              long long v58 = v46;
              __int16 v59 = 1024;
              int v60 = a3;
              __int16 v61 = 2114;
              uint64_t v62 = v47;
              __int16 v63 = 2114;
              long long v64 = v48;
              __int16 v65 = 2114;
              long long v66 = v23;
              __int16 v67 = 2114;
              long long v68 = v49;
              __int16 v69 = 2114;
              long long v70 = v50;
              _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Stopping pointer movement because request exceeds limit of %f pts. Pointer position:%{public}@, pid:%d, region:%{public}@, region point:%{public}@, target region:%{public}@, desired location %{public}@, current location:%{public}@", location, 0x4Eu);
            }
            goto LABEL_34;
          }
          objc_initWeak((id *)location, (id)a1);
          id v36 = BSProcessDescriptionForPID();
          uint64_t v37 = BSProcessDescriptionForPID();
          long long v38 = +[NSString stringWithFormat:@"setPosition %@ restrict:%@", v36, v37];
        }
        v52[0] = _NSConcreteStackBlock;
        v52[1] = 3221225472;
        v52[2] = sub_10007251C;
        v52[3] = &unk_1000F79D0;
        objc_copyWeak(v54, (id *)location);
        v54[1] = v35;
        int v55 = a3;
        id v39 = v38;
        id v53 = v39;
        id v40 = objc_retainBlock(v52);
        if (a7
          && (a7[2](a7, v33, v34),
              (a7 = (void (**)(void, double, double))objc_claimAutoreleasedReturnValue()) != 0)
          && (unint64_t)[*(id *)(a1 + 128) count] <= 0x63)
        {
          uint64_t v41 = [BKMousePointerAnimation alloc];
          if (*(unsigned char *)(a1 + 417)) {
            uint64_t v42 = 120;
          }
          else {
            uint64_t v42 = 0;
          }
          v51[0] = _NSConcreteStackBlock;
          v51[1] = 3221225472;
          v51[2] = sub_1000728E0;
          v51[3] = &unk_1000F79F8;
          void v51[4] = a1;
          id v43 = -[BKMousePointerAnimation initWithRelativeTranslation:destinationPoint:animationDriver:updateRate:applierBlock:completionBlock:](v41, "initWithRelativeTranslation:destinationPoint:animationDriver:updateRate:applierBlock:completionBlock:", a7, v42, v40, v51, v33, v34, v30, v32);
          os_unfair_lock_lock(v13);
          [*(id *)(a1 + 128) addObject:v43];
          [(BKMousePointerAnimation *)v43 start];
          os_unfair_lock_unlock(v13);
        }
        else
        {
          ((void (*)(void *, double, double))v40[2])(v40, v33, v34);
        }

        objc_destroyWeak(v54);
        objc_destroyWeak((id *)location);
LABEL_34:

        return;
      }
      id v24 = BKLogMousePointer();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id location = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "_setPointerPosition: cannot reposition model point when the user is using a pointing device with absolute positioning", location, 2u);
      }
    }
    else
    {
      id v25 = BKLogMousePointer();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        id v45 = *(void **)(a1 + 112);
        *(_DWORD *)id location = 138543618;
        *(void *)&location[4] = v19;
        __int16 v57 = 2114;
        long long v58 = v45;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "_setPointerPosition: no displayUUID:%{public}@ in arrangement:%{public}@", location, 0x16u);
      }
    }
    os_unfair_lock_unlock(v13);
    goto LABEL_34;
  }
}

void sub_1000724EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10007251C(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = (void *)mach_absolute_time();
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v8 = (uint64_t)WeakRetained;
  if (!WeakRetained)
  {
LABEL_13:
    uint64_t v18 = 1;
    goto LABEL_34;
  }
  os_unfair_lock_lock(WeakRetained + 2);
  uint64_t v9 = [*(id *)(v8 + 224) anyObject];
  id v10 = (void *)v9;
  if (v9) {
    id v11 = *(void **)(v9 + 48);
  }
  else {
    id v11 = 0;
  }
  id v12 = v11;

  if (!v12)
  {
    id v13 = [*(id *)(v8 + 40) deviceServices];
    id v12 = [v13 lastObject];

    if (!v12)
    {
      id v17 = BKLogMousePointer();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "no device found during pointer animation -- is IOHIDService termination in progress?", buf, 2u);
      }

      os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 8));
      goto LABEL_13;
    }
  }
  if (*(void *)(v8 + 136) != *(void *)(a1 + 48)) {
    goto LABEL_17;
  }
  uint64_t v14 = *(unsigned int *)(a1 + 56);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_16;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(v8 + 8));
  if (*(void *)(v8 + 120))
  {
    [*(id *)(v8 + 112) convertToGlobalPoint:*(double *)(v8 + 144) fromRegion:*(double *)(v8 + 152)];
  }
  else
  {
    double x = CGPointZero.x;
    double y = CGPointZero.y;
  }
  id v19 = sub_10006C1C0(v8, a2 + x, a3 + y);
  id v20 = +[NSNumber numberWithInt:v14];
  unsigned __int8 v21 = [v19 containsObject:v20];

  if (v21)
  {
LABEL_16:
    sub_100068944(v8, *(void *)(a1 + 32), a2, a3);
    uint64_t v18 = 1;
    sub_10006C518(v8, v6, 1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 8));
  }
  else
  {
LABEL_17:
    id v22 = BKLogMousePointer();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Attempting to animate across process boundaries when that is not allowed. Terminating animation.", buf, 2u);
    }

    uint64_t v23 = +[NSMutableArray array];
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v24 = *(id *)(v8 + 128);
    id v25 = [v24 countByEnumeratingWithState:&v39 objects:v45 count:16];
    if (v25)
    {
      id v26 = v25;
      uint64_t v27 = *(void *)v40;
      do
      {
        for (uint64_t i = 0; i != v26; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v40 != v27) {
            objc_enumerationMutation(v24);
          }
          [v23 addObject:*(void *)(*((void *)&v39 + 1) + 8 * i)];
        }
        id v26 = [v24 countByEnumeratingWithState:&v39 objects:v45 count:16];
      }
      while (v26);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 8));
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v29 = v23;
    id v30 = [v29 countByEnumeratingWithState:&v35 objects:v44 count:16];
    if (v30)
    {
      id v31 = v30;
      uint64_t v32 = *(void *)v36;
      do
      {
        for (uint64_t j = 0; j != v31; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v36 != v32) {
            objc_enumerationMutation(v29);
          }
          [*(id *)(*((void *)&v35 + 1) + 8 * (void)j) stop:v35];
        }
        id v31 = [v29 countByEnumeratingWithState:&v35 objects:v44 count:16];
      }
      while (v31);
    }

    uint64_t v18 = 0;
  }
LABEL_34:

  return v18;
}

void sub_1000728E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  [*(id *)(*(void *)(a1 + 32) + 128) removeObject:a3];
  id v5 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);

  os_unfair_lock_unlock(v5);
}

BKMousePointerCAAnimationDriver *sub_100072A40(uint64_t a1, double a2, double a3)
{
  if (*(void *)(a1 + 32)) {
    uint64_t v3 = -[BKMousePointerCAAnimationDriver initWithRelativeTranslation:animationSettings:]([BKMousePointerCAAnimationDriver alloc], "initWithRelativeTranslation:animationSettings:", *(void *)(a1 + 32), a2, a3);
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

BKMousePointerCAAnimationDriver *sub_100072C38(uint64_t a1, double a2, double a3)
{
  if (*(void *)(a1 + 32)) {
    uint64_t v3 = -[BKMousePointerCAAnimationDriver initWithRelativeTranslation:animationSettings:]([BKMousePointerCAAnimationDriver alloc], "initWithRelativeTranslation:animationSettings:", *(void *)(a1 + 32), a2, a3);
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_100073078(uint64_t a1, void *a2)
{
  id v4 = BKLogMousePointer();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = [a2 isActive];
    uint64_t v6 = *(void *)(a1 + 32);
    v7[0] = 67109378;
    v7[1] = v5;
    __int16 v8 = 2114;
    uint64_t v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "pointer updates are suppressed: (%{BOOL}u): display:%{public}@", (uint8_t *)v7, 0x12u);
  }
}

void sub_100073924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  objc_destroyWeak(v11);
  objc_destroyWeak(v10);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v12 - 128));
  _Unwind_Resume(a1);
}

void sub_100073974(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_100073A4C((uint64_t)WeakRetained);
}

void sub_1000739B4(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  sub_10006CE04((uint64_t)WeakRetained);

  uint64_t v3 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);

  os_unfair_lock_unlock(v3);
}

void sub_100073A0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_100073A4C((uint64_t)WeakRetained);
}

void sub_100073A4C(uint64_t a1)
{
  if (a1)
  {
    id v2 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_assert_not_owner((const os_unfair_lock *)(a1 + 8));
    os_unfair_lock_lock(v2);
    int v3 = *(unsigned __int8 *)(a1 + 416);
    unsigned int v4 = [*(id *)(a1 + 432) visualizeMousePointer];
    *(unsigned char *)(a1 + 416) = v4;
    if (v3 != v4)
    {
      if (v4)
      {
        unsigned int v5 = objc_alloc_init(BKMousePointerAnnotationController);
        uint64_t v6 = *(void **)(a1 + 336);
        *(void *)(a1 + 336) = v5;

        sub_1000703E4((const os_unfair_lock *)a1, *(void *)(a1 + 336));
      }
      else
      {
        sub_100070318(a1, *(void *)(a1 + 336));
        [*(id *)(a1 + 336) invalidate];
        uint64_t v7 = *(void **)(a1 + 336);
        *(void *)(a1 + 336) = 0;
      }
    }
    uint64_t v8 = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = 0;
    uint64_t v9 = [*(id *)(a1 + 432) mouseInterpolation];
    v32[0] = BKMouseInterpolationPointer;
    v32[1] = BKMouseInterpolationScroll;
    v33[0] = &off_100103610;
    v33[1] = &off_100103628;
    v32[2] = BKMouseInterpolationScale;
    v32[3] = BKMouseInterpolationTranslation;
    v33[2] = &off_100103640;
    v33[3] = &off_100103658;
    v32[4] = BKMouseInterpolationRotation;
    v33[4] = &off_100103670;
    id v10 = +[NSDictionary dictionaryWithObjects:v33 forKeys:v32 count:5];
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v11 = v9;
    id v12 = [v11 countByEnumeratingWithState:&v23 objects:v31 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v24;
      do
      {
        long long v15 = 0;
        do
        {
          if (*(void *)v24 != v14) {
            objc_enumerationMutation(v11);
          }
          double v16 = [v10 objectForKeyedSubscript:*(void *)(*((void *)&v23 + 1) + 8 * (void)v15) withObject:v23];
          *(void *)(a1 + 176) |= (unint64_t)[v16 unsignedLongLongValue];

          long long v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        id v13 = [v11 countByEnumeratingWithState:&v23 objects:v31 count:16];
      }
      while (v13);
    }

    uint64_t v17 = *(void *)(a1 + 176);
    if (v17 != v8)
    {
      uint64_t v18 = BKLogMousePointer();
      BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      if (v17)
      {
        if (v19)
        {
          id v20 = [v11 componentsJoinedByString:@", "];
          uint64_t v21 = *(void *)(a1 + 176);
          *(_DWORD *)long long buf = 138543618;
          double v28 = v20;
          __int16 v29 = 2048;
          uint64_t v30 = v21;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "now interpolating [%{public}@] events: %llX", buf, 0x16u);
        }
        char v22 = 0;
      }
      else
      {
        if (v19)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "interpolation disabled", buf, 2u);
        }
        char v22 = 1;
      }

      *(unsigned char *)(a1 + 417) = v22;
      sub_10006FB70(a1);
      sub_10006CA98(a1, @"defaults changed");
    }
    os_unfair_lock_unlock(v2);
  }
}

void sub_100074488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose((const void *)(v34 - 112), 8);
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000744EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000744FC(uint64_t a1)
{
}

void sub_100074504(uint64_t a1, void *a2)
{
  uint64_t v3 = kCASecureModeViolationProcessId;
  id v4 = a2;
  id v18 = [v4 objectForKey:v3];
  unsigned int v5 = [v4 objectForKey:kCASecureModeViolationContextId];
  uint64_t v6 = [v4 objectForKey:kCASecureModeViolationLayerNames];

  int v7 = [v18 intValue];
  if (v7 >= 1 && v7 != getpid())
  {
    uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (!v8)
    {
      id v9 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
      id v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    }
    id v12 = [v8 objectForKey:v18];
    if (!v12) {
      id v12 = objc_alloc_init((Class)NSMutableArray);
    }
    [v12 addObject:v5];
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v12 forKey:v18];
    if ([v6 count])
    {
      id v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      if (!v13)
      {
        id v14 = objc_alloc_init((Class)NSMutableDictionary);
        uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
        double v16 = *(void **)(v15 + 40);
        *(void *)(v15 + 40) = v14;

        id v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      }
      id v17 = [v13 objectForKeyedSubscript:v5];
      if (!v17)
      {
        id v17 = objc_alloc_init((Class)NSMutableSet);
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v17 forKeyedSubscript:v5];
      }
      [v17 addObjectsFromArray:v6];
    }
  }
}

void sub_1000746F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [objc_alloc((Class)BKSSecureModeViolation) initWithProcessId:v6 contextIds:v5];

  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v8)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_100074AF0;
    v10[3] = &unk_1000F7C80;
    id v11 = v5;
    id v9 = [v8 bs_filter:v10];
    if ([v9 count]) {
      [v7 setLayerNamesByContext:v9];
    }
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v7];
}

void sub_100074810(uint64_t a1)
{
  sub_100074928();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FBSSystemService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100123060 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    uint64_t v3 = +[NSString stringWithUTF8String:"Class getFBSSystemServiceClass(void)_block_invoke"];
    [v2 handleFailureInFunction:v3 file:@"BKSecureDrawingMonitor.m" lineNumber:26 description:@"Unable to find class %s", "FBSSystemService"];

    __break(1u);
  }
}

void *sub_1000748D8(uint64_t a1)
{
  id v2 = sub_100074928();
  id result = dlsym(v2, "FBSOpenApplicationOptionKeyActions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100123070 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100074928()
{
  v4[0] = 0;
  if (!qword_100123068)
  {
    v4[1] = _NSConcreteStackBlock;
    void v4[2] = (void *)3221225472;
    v4[3] = sub_100074A7C;
    void v4[4] = &unk_1000F7D08;
    void v4[5] = v4;
    long long v5 = off_1000F7CF0;
    uint64_t v6 = 0;
    qword_100123068 = _sl_dlopen();
  }
  id v0 = (void *)qword_100123068;
  if (!qword_100123068)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    uint64_t v3 = +[NSString stringWithUTF8String:"void *FrontBoardServicesLibrary(void)"];
    [v0 handleFailureInFunction:v3 file:@"BKSecureDrawingMonitor.m" lineNumber:25 description:@"%s" v4[0]];

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t sub_100074A7C()
{
  uint64_t result = _sl_dlopen();
  qword_100123068 = result;
  return result;
}

id sub_100074AF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if ([a3 count]) {
    id v6 = [*(id *)(a1 + 32) containsObject:v5];
  }
  else {
    id v6 = 0;
  }

  return v6;
}

id sub_100074BD0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) reportAndKillInsecureProcesses];
}

void sub_100074CC8(id a1)
{
  uint64_t v1 = objc_alloc_init(BKSecureDrawingMonitor);
  id v2 = (void *)qword_100123050;
  qword_100123050 = (uint64_t)v1;
}

_DWORD *sub_100074D18(uint64_t a1, int a2)
{
  if (a1)
  {
    if (a2)
    {
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      uint64_t v3 = *(id *)(a1 + 8);
      id v4 = [v3 countByEnumeratingWithState:&v11 objects:v16 count:16];
      if (v4)
      {
        id v5 = v4;
        uint64_t v6 = *(void *)v12;
        while (2)
        {
          for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v12 != v6) {
              objc_enumerationMutation(v3);
            }
            uint64_t v8 = *(_DWORD **)(*((void *)&v11 + 1) + 8 * i);
            if (v8[4] == a2)
            {
              id v9 = v8;
              goto LABEL_16;
            }
          }
          id v5 = [v3 countByEnumeratingWithState:&v11 objects:v16 count:16];
          if (v5) {
            continue;
          }
          break;
        }
      }
    }
    else
    {
      uint64_t v3 = BKLogTouchEvents();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ignoring zero touchID", buf, 2u);
      }
    }
    id v9 = 0;
LABEL_16:
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

id sub_100074E8C(uint64_t a1, int *a2, uint64_t a3)
{
  if (a1)
  {
    id v6 = objc_alloc_init((Class)NSMutableArray);
    if (a3 >= 1)
    {
      do
      {
        int v7 = *a2++;
        uint64_t v8 = sub_100074D18(a1, v7);
        if (v8) {
          [v6 addObject:v8];
        }

        --a3;
      }
      while (a3);
    }
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_1000753A8(uint64_t a1)
{
  id v1 = objc_alloc(*(Class *)(a1 + 32));
  id v4 = objc_alloc_init(BKHIDHapticFeedbackInterface);
  id v2 = [v1 initWithHIDHapticFeedbackInterface:v4];
  uint64_t v3 = (void *)qword_100123080;
  qword_100123080 = (uint64_t)v2;
}

id sub_100076DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  if (a3) {
    a3 = *(void *)(a3 + 24);
  }
  return [v4 _lock_evaluateDisplay:a3 reason:*(void *)(a1 + 40)];
}

int64_t sub_100078E6C(id a1, BKNamespaceNode *a2)
{
  id v2 = [(BKNamespaceNode *)a2 object];
  uint64_t v3 = [v2 renderer];
  [v3 locationDidChange];

  return 0;
}

void sub_1000790B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000790D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000790E0(uint64_t a1)
{
}

void sub_1000790E8(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v4 = [v7 object];
  id v5 = [v4 renderer];
  unsigned __int8 v6 = [v5 shouldRenderWithSupernode];

  if ((v6 & 1) == 0) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
}

uint64_t sub_100079234(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

int64_t sub_100079890(id a1, BKNamespaceNode *a2)
{
  id v2 = [(BKNamespaceNode *)a2 object];
  uint64_t v3 = [v2 renderer];

  if ([v3 shouldRenderWithSupernode])
  {
    int64_t v4 = 0;
  }
  else
  {
    [v3 didAddAnnotation];
    int64_t v4 = 1;
  }

  return v4;
}

id sub_100079B90(uint64_t a1)
{
  +[CATransaction setDisableActions:1];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  id v2 = +[BKDisplayController sharedInstance];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 64);
  int64_t v4 = sub_10001C32C();
  uint64_t v5 = sub_1000039E8((uint64_t)v4);
  if (v2)
  {
    [v2 transformLayerPropertiesForDisplay:v3 displayInterfaceOrientation:v5];
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
  }

  unsigned __int8 v6 = *(void **)(*(void *)(a1 + 32) + 88);
  v8[0] = v9;
  v8[1] = v10;
  void v8[2] = v11;
  [v6 setAffineTransform:v8];
  [*(id *)(*(void *)(a1 + 32) + 88) setBounds:v12, v13];
  return [*(id *)(a1 + 32) _lock_locationDidChanges];
}

void sub_100079DD4(uint64_t a1)
{
  +[CATransaction setDisableActions:1];
  id v2 = +[NSMutableArray array];
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 56) nodeAtKeyPath:*(void *)(a1 + 40)];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10007A08C;
  v24[3] = &unk_1000F7DE0;
  id v4 = v2;
  id v25 = v4;
  [v3 enumerateNodesWithOptions:3 usingBlock:v24];
  uint64_t v5 = [*(id *)(a1 + 32) _lock_supernodeForRenderingAtKeyPath:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 56) removeNodeAtKeyPath:*(void *)(a1 + 40)];
  double v6 = *(double *)(a1 + 56);
  if (v6 > 0.0 && *(void *)(a1 + 48))
  {
    dispatch_time_t v7 = dispatch_time(0, (uint64_t)(v6 * 1000000000.0));
    uint64_t v8 = *(NSObject **)(a1 + 48);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    id v18[2] = sub_10007A168;
    void v18[3] = &unk_1000F8E50;
    void v18[4] = *(void *)(a1 + 32);
    id v19 = v4;
    dispatch_after(v7, v8, v18);
  }
  else
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v9 = v4;
    id v10 = [v9 countByEnumeratingWithState:&v20 objects:v26 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v21;
      do
      {
        long long v13 = 0;
        do
        {
          if (*(void *)v21 != v12) {
            objc_enumerationMutation(v9);
          }
          long long v14 = *(void **)(a1 + 32);
          uint64_t v15 = [*(id *)(*((void *)&v20 + 1) + 8 * (void)v13) object];
          [v14 _lock_removeAnnotation:v15];

          long long v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v20 objects:v26 count:16];
      }
      while (v11);
    }
  }
  if (v5 != v3)
  {
    double v16 = [v5 object];
    id v17 = [v16 renderer];

    [v17 didRemoveSubannotations];
  }
}

uint64_t sub_10007A08C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10005FB14();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = [v3 name];
    int v7 = 138543362;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "  remove %{public}@", (uint8_t *)&v7, 0xCu);
  }
  [*(id *)(a1 + 32) addObject:v3];

  return 0;
}

void sub_10007A168(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10007A1F8;
  v5[3] = &unk_1000F8E50;
  id v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 performSynchronizedWithCATransaction:v5];
}

void sub_10007A1F8(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(a1 + 40);
        uint64_t v8 = [*(id *)(*((void *)&v9 + 1) + 8 * (void)v6) object:(void)v9];
        [v7 _lock_removeAnnotation:v8];

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

void sub_10007A3D8(uint64_t a1)
{
  +[CATransaction setDisableActions:1];
  [*(id *)(a1 + 32) setAnnotationController:*(void *)(a1 + 40)];
  id v2 = [*(id *)(*(void *)(a1 + 40) + 56) objectAtKeyPath:*(void *)(a1 + 48)];
  id v3 = v2;
  if (v2)
  {
    if ([v2 isEqual:*(void *)(a1 + 32)]) {
      goto LABEL_9;
    }
    [*(id *)(a1 + 40) _lock_removeAnnotation:v3];
  }
  id v4 = sub_10005FB14();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 32);
    int v12 = 138543618;
    uint64_t v13 = v5;
    __int16 v14 = 2114;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "set %{public}@ to %{public}@", (uint8_t *)&v12, 0x16u);
  }

  uint64_t v7 = [*(id *)(*(void *)(a1 + 40) + 56) setObject:*(void *)(a1 + 32) atKeyPath:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) setNamespaceNode:v7];
  uint64_t v8 = [*(id *)(a1 + 40) _lock_supernodeForRenderingAtKeyPath:*(void *)(a1 + 48)];
  long long v9 = v8;
  if (v8)
  {
    long long v10 = [v8 object];
    long long v11 = [v10 renderer];

    [v11 didAddAnnotation];
  }

LABEL_9:
}

void sub_10007A634(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 56) nodeAtKeyPath:*(void *)(a1 + 40)];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10007A6DC;
  v3[3] = &unk_1000F7DE0;
  id v4 = *(id *)(a1 + 48);
  [v2 enumerateNodesWithOptions:3 usingBlock:v3];
}

uint64_t sub_10007A6DC(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 object];
  [v2 addObject:v3];

  return 0;
}

void sub_10007A830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007A848(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 56) objectAtKeyPath:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t sub_10007B93C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 object];
  id v4 = [v3 renderer];
  unsigned int v5 = [v4 shouldRenderWithSupernode];

  if (v5)
  {
    [*(id *)(a1 + 32) addObject:v3];
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = [v3 renderer];
    [v7 regenerateLayerTree];

    uint64_t v6 = 1;
  }

  return v6;
}

void sub_10007C004(id a1)
{
  id v1 = BSSystemRootDirectory();
  uint64_t v2 = [v1 stringByAppendingPathComponent:@"System/Library/AccessibilityBundles/BackBoard.axbundle"];
  id v3 = +[NSBundle bundleWithPath:v2];

  if ([v3 load]) {
    [objc_msgSend(v3, "principalClass") initialize];
  }
}

id sub_10007C204(uint64_t a1)
{
  return [*(id *)(a1 + 32) appendObject:*(void *)(*(void *)(a1 + 40) + 16) withName:0];
}

id sub_10007C234(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) appendBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 11) withName:@"isAlternateShell" ifEqualTo:1];
  id v3 = [*(id *)(a1 + 32) appendBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 9) withName:@"checkedIn" ifEqualTo:1];
  id v4 = [*(id *)(a1 + 32) appendBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 8) withName:@"pendingCheckIn" ifEqualTo:1];
  id v5 = [*(id *)(a1 + 32) appendBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 10) withName:@"finishedStartup" ifEqualTo:1];
  if (![*(id *)(*(void *)(a1 + 40) + 16) watchdogType]) {
    id v6 = [*(id *)(a1 + 32) appendBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 12) withName:@"wasAlive"];
  }
  id result = [*(id *)(a1 + 32) hasDebugStyle];
  if (result) {
    return [*(id *)(a1 + 32) appendObject:*(void *)(*(void *)(a1 + 40) + 24) withName:@"connection"];
  }
  return result;
}

id sub_10007C3B0(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = +[BSDescriptionStyle succinctStyle];
    id v1 = +[BSDescriptionStream descriptionForRootObject:v1 withStyle:v2];
  }

  return v1;
}

void sub_10007C428(uint64_t a1, int a2)
{
  if (a1 && [*(id *)(a1 + 16) watchdogType] == (id)1)
  {
    id v4 = [*(id *)(a1 + 16) jobLabel];
    sub_10003C6CC((uint64_t)[v4 UTF8String], a2);
  }
}

id sub_10007C7C4(uint64_t a1, void *a2)
{
  return _[a2 appendDescriptionToFormatter:*(void *)(a1 + 32)];
}

BOOL sub_10007C7D0(id a1, BKEventStatistic *a2)
{
  return [(BKEventStatistic *)a2 needsLogging];
}

id sub_10007CD90(id a1, BKEventStatistic *a2)
{
  id v2 = [(BKEventStatistic *)a2 copy];

  return v2;
}

void sub_10007CF14(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10007CFC8;
  v6[3] = &unk_1000F8E50;
  id v7 = v3;
  id v8 = v4;
  id v5 = v3;
  [v8 appendProem:0 block:v6];
}

void sub_10007CFC8(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = [*(id *)(a1 + 40) appendObject:v8 withName:0, (void)v8];
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

id sub_10007D0C8(id a1, NSArray *a2)
{
  id v2 = [(NSArray *)a2 bs_filter:&stru_1000F7E60];
  if ([v2 count]) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }

  return v3;
}

BOOL sub_10007D12C(id a1, BKEventStatistic *a2)
{
  return [(BKEventStatistic *)a2 needsLogging];
}

void sub_10007D1B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    sub_10001BE48((uint64_t)WeakRetained);
    id WeakRetained = v2;
  }
}

void sub_10007D1FC(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.backboard.BKEventStatistics", 0);
  id v2 = (void *)qword_1001230A0;
  qword_1001230A0 = (uint64_t)v1;
}

uint64_t sub_10007D600(uint64_t a1)
{
  id v2 = BKLogSystemShell();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Killing %{public}@.", (uint8_t *)&v5, 0xCu);
  }

  return kill((pid_t)[*(id *)(a1 + 32) pid], 9);
}

id sub_10007DC2C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) start];
}

uint64_t sub_10007E0E0(uint64_t a1)
{
  [*(id *)(a1 + 32) _lock_completeCheckInForShell:*(void *)(a1 + 40)];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v2();
}

void sub_10007E660(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v8 objects:v14 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        id v7 = BKLogSystemShell();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          uint64_t v13 = v6;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Killing %{public}@.", buf, 0xCu);
        }

        kill((pid_t)[v6 pid], 9);
      }
      id v3 = [v1 countByEnumeratingWithState:&v8 objects:v14 count:16];
    }
    while (v3);
  }
}

BKSystemShellDescriptor *__cdecl sub_10007E7C8(id a1, BKSystemShellClient *a2)
{
  if (a2) {
    return a2->_descriptor;
  }
  else {
    return 0;
  }
}

BKSystemShellDescriptor *__cdecl sub_10007E7DC(id a1, BKSystemShellClient *a2)
{
  if (a2) {
    return a2->_descriptor;
  }
  else {
    return 0;
  }
}

id sub_10007FC78(id a1, BKSystemShellClient *a2)
{
  if (a2) {
    return a2->_descriptor;
  }
  else {
    return 0;
  }
}

id sub_10007FC8C(id a1, BKSystemShellClient *a2)
{
  if (a2) {
    return a2->_descriptor;
  }
  else {
    return 0;
  }
}

id sub_10007FD00(id a1, BKSystemShellClient *a2)
{
  if (a2) {
    return a2->_descriptor;
  }
  else {
    return 0;
  }
}

id sub_10007FD8C(id a1, BKSystemShellClient *a2)
{
  if (a2) {
    return a2->_descriptor;
  }
  else {
    return 0;
  }
}

void sub_10007FFC4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) primarySystemShell];
  id v4 = [v2 appendObject:v3 withName:@"systemApp"];

  int v5 = *(void **)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) systemShells];
  [v5 appendArraySection:v6 withName:@"connectedSystemApps" skipIfEmpty:1];
}

void sub_100080274(id a1)
{
  uint64_t v1 = BSDispatchQueueCreateWithQualityOfService();
  id v2 = (void *)qword_1001230C0;
  qword_1001230C0 = v1;
}

void sub_1000802BC(id a1)
{
  uint64_t v1 = objc_alloc_init(BKSystemShellSentinel);
  id v2 = (void *)qword_1001230A8;
  qword_1001230A8 = (uint64_t)v1;
}

id sub_100080664(uint64_t a1)
{
  BSAbsoluteMachTimeNow();
  id v3 = *(double **)(a1 + 32);
  double v4 = v3[5];
  if (v4 <= 0.0 || v4 <= v2)
  {
    return [v3 _queue_invalidate];
  }
  else
  {
    return [_objc_msgSend(v3, "_queue_setTimerWithTimeIntervalSinceNow:");
  }
}

id sub_100080740(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queue_invalidate];
}

void sub_1000809D4(id a1)
{
  uint64_t Serial = BSDispatchQueueCreateSerial();
  double v2 = (void *)qword_1001230D0;
  qword_1001230D0 = Serial;
}

void sub_100080A60(id a1)
{
  uint64_t v1 = (void *)qword_1001230C8;
  if (!qword_1001230C8)
  {
    double v2 = [BKDisplayBrightnessUpdateTransaction alloc];
    id v3 = +[BKDisplayBrightnessUpdateTransactionManager sharedInstance];
    double v4 = [(BKDisplayBrightnessUpdateTransaction *)v2 initWithIdentifier:@"(implicit)" transactionManager:v3];
    int v5 = (void *)qword_1001230C8;
    qword_1001230C8 = (uint64_t)v4;

    uint64_t v1 = (void *)qword_1001230C8;
  }

  [v1 _queue_updateExpirationTimeWithIntervalSinceNow:1.0];
}

void sub_10008123C(id a1)
{
  uint64_t v1 = [BKDisplayBrightnessUpdateTransactionManager alloc];
  id v4 = +[BKDisplayBrightnessController sharedInstance];
  id v2 = [(BKDisplayBrightnessUpdateTransactionManager *)v1 _initWithBrightnessController:v4];
  id v3 = (void *)qword_1001230E0;
  qword_1001230E0 = (uint64_t)v2;
}

id sub_1000813EC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) appendBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 14) withName:@"shouldActivateByGesture" ifEqualTo:1];
  id v3 = [*(id *)(a1 + 32) appendObject:*(void *)(*(void *)(a1 + 40) + 64) withName:@"transport" skipIfNil:1];
  id v4 = [*(id *)(a1 + 32) appendObject:*(void *)(*(void *)(a1 + 40) + 56) withName:@"keyboardLanguage" skipIfNil:1];
  id v5 = [*(id *)(a1 + 32) appendObject:*(void *)(*(void *)(a1 + 40) + 48) withName:@"keyboardLayout" skipIfNil:1];
  id v6 = [*(id *)(a1 + 32) appendObject:*(void *)(*(void *)(a1 + 40) + 72) withName:@"exclusivityIdentifier" skipIfNil:1];
  id v7 = [*(id *)(a1 + 32) appendInt:*(unsigned __int8 *)(*(void *)(a1 + 40) + 12) withName:@"countryCode"];
  id v8 = [*(id *)(a1 + 32) appendInt:*(unsigned int *)(*(void *)(a1 + 40) + 16) withName:@"keyboardType"];
  id v9 = [*(id *)(a1 + 32) appendInteger:*(void *)(*(void *)(a1 + 40) + 40) withName:@"subinterfaceID"];
  id v10 = [*(id *)(a1 + 32) appendBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 8) withName:@"capsLockOn" ifEqualTo:1];
  id v11 = [*(id *)(a1 + 32) appendBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 9) withName:@"capsLockRomanSwitchMode" ifEqualTo:1];
  id v12 = [*(id *)(a1 + 32) appendBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 10) withName:@"capsLockKeyHasLanguageSwitchLabel" ifEqualTo:1];
  id v13 = [*(id *)(a1 + 32) appendBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 11) withName:@"globeKeyLabelHasGlobeSymbol" ifEqualTo:1];
  return [*(id *)(a1 + 32) appendPointer:*(void *)(*(void *)(a1 + 40) + 80) withName:@"gsKeyboard"];
}

id sub_100081600(uint64_t a1)
{
  id v2 = *(void **)(a1 + 112);
  if (v2)
  {
    if (*(void *)(a1 + 120))
    {
      id v2 = BKSHIDServicesProductIdentifierFromServiceProperties();
    }
    else
    {
      id v2 = 0;
    }
  }

  return v2;
}

id sub_10008164C(uint64_t a1)
{
  if (*(void *)(a1 + 112) && *(void *)(a1 + 120))
  {
    uint64_t v1 = BKSHIDServicesProductIdentifierFromServiceProperties();
    id v2 = +[BKSDefaults externalDefaults];
    id v3 = [v2 keyboardDefaults];

    id v4 = [v3 modifierKeyRemapping];
    id v5 = v4;
    if (v4)
    {
      id v6 = [v4 objectForKey:v1];
      uint64_t v7 = objc_opt_class();
      id v8 = v6;
      if (v7)
      {
        if (objc_opt_isKindOfClass()) {
          id v9 = v8;
        }
        else {
          id v9 = 0;
        }
      }
      else
      {
        id v9 = 0;
      }
      id v11 = v9;

      if ([v11 count])
      {
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        id v10 = v11;
        id v12 = [v10 countByEnumeratingWithState:&v30 objects:v36 count:16];
        if (v12)
        {
          id v13 = v12;
          id v27 = v11;
          double v28 = v5;
          __int16 v29 = v3;
          uint64_t v14 = *(void *)v31;
          while (2)
          {
            for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v31 != v14) {
                objc_enumerationMutation(v10);
              }
              double v16 = *(void **)(*((void *)&v30 + 1) + 8 * i);
              uint64_t v17 = objc_opt_class();
              id v18 = v16;
              if (v17)
              {
                if (objc_opt_isKindOfClass()) {
                  id v19 = v18;
                }
                else {
                  id v19 = 0;
                }
              }
              else
              {
                id v19 = 0;
              }
              id v20 = v19;

              long long v21 = [v20 allKeys];
              if ([v21 count] != (id)2) {
                goto LABEL_30;
              }
              long long v22 = [v20 objectForKey:@"HIDKeyboardModifierMappingSrc"];
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {

LABEL_30:
LABEL_31:
                id v25 = BKLogKeyboard();
                if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 138543362;
                  id v35 = v20;
                  _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "invalid key remapping dictionary: %{public}@", buf, 0xCu);
                }

                id v10 = 0;
                goto LABEL_34;
              }
              long long v23 = [v20 objectForKey:@"HIDKeyboardModifierMappingDst"];
              objc_opt_class();
              char isKindOfClass = objc_opt_isKindOfClass();

              if ((isKindOfClass & 1) == 0) {
                goto LABEL_31;
              }
            }
            id v13 = [v10 countByEnumeratingWithState:&v30 objects:v36 count:16];
            if (v13) {
              continue;
            }
            break;
          }
LABEL_34:
          id v3 = v29;
          id v11 = v27;
          id v5 = v28;
        }
      }
      else
      {
        id v10 = 0;
      }
    }
    else
    {
      id v10 = 0;
    }
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

uint64_t sub_100081990(uint64_t a1)
{
  if (a1)
  {
    sub_10008164C(a1);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v1 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v1)
    {
      id v2 = v1;
      char v3 = 0;
      char v4 = 0;
      uint64_t v5 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v2; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v5) {
            objc_enumerationMutation(obj);
          }
          uint64_t v7 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          id v8 = [v7 objectForKeyedSubscript:@"HIDKeyboardModifierMappingSrc"];
          id v9 = [v8 unsignedLongLongValue];

          id v10 = [v7 objectForKeyedSubscript:@"HIDKeyboardModifierMappingDst"];
          id v11 = [v10 unsignedLongLongValue];

          v4 |= v9 == (id)0x700000039;
          v3 |= v11 == (id)0x700000039;
        }
        id v2 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v2);
      char v12 = v4 ^ 1 | v3;
    }
    else
    {
      char v12 = 1;
    }
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_100081B28(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 14)) {
    return 1;
  }
  id v1 = [*(id *)(a1 + 24) propertyForKey:@"KeyboardEnabled"];
  uint64_t v2 = objc_opt_class();
  id v3 = v1;
  if (v2)
  {
    if (objc_opt_isKindOfClass()) {
      char v4 = v3;
    }
    else {
      char v4 = 0;
    }
  }
  else
  {
    char v4 = 0;
  }
  id v6 = v4;

  if (v6) {
    id v5 = [v6 BOOLValue];
  }
  else {
    id v5 = 0;
  }

  return (uint64_t)v5;
}

void sub_100081BE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = v3;
  if (a1 && v3)
  {
    id v5 = [v3 copy];
    id v6 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v5;

    if (*(void *)(a1 + 80))
    {
      if ([v4 isEqualToString:GSKeyboardGetLayout()]) {
        goto LABEL_9;
      }
      if (*(void *)(a1 + 80)) {
        GSKeyboardRelease();
      }
    }
    *(void *)(a1 + 80) = GSKeyboardCreateWithCountryCode();
    if (*(unsigned char *)(a1 + 8))
    {
      GSKeyboardTranslateKeyExtendedCommandWithUsagePage();
      GSKeyboardTranslateKeyExtendedCommandWithUsagePage();
    }
  }
LABEL_9:
}

void sub_100081D08(uint64_t a1, int a2)
{
  if (a1 && *(unsigned __int8 *)(a1 + 9) != a2)
  {
    *(unsigned char *)(a1 + 9) = a2;
    id v5 = *(id *)(a1 + 24);
    [v5 setProperty:&__kCFBooleanFalse forKey:@"HIDCapsLockState"];
    if (a2) {
      char v4 = &__kCFBooleanTrue;
    }
    else {
      char v4 = &__kCFBooleanFalse;
    }
    [v5 setProperty:v4 forKey:@"HIDCapsLockLEDInhibit"];
    if (*(unsigned char *)(a1 + 8))
    {
      *(unsigned char *)(a1 + 8) = 0;
      [*(id *)(a1 + 24) setElementValue:0 forUsagePage:8 usage:2];
    }
  }
}

void sub_100081DDC(uint64_t a1, double a2)
{
  if (a1)
  {
    id v3 = *(id *)(a1 + 24);
    if (a2 != -1.0) {
      a2 = a2 * 1000.0;
    }
    if (a2 == -1.0 || a2 >= 0.0 && a2 <= 3000.0)
    {
      char v4 = +[NSNumber numberWithInt:(int)a2];
      [v3 setProperty:v4 forKey:@"CapsLockDelayOverride"];
    }
    else
    {
      char v4 = BKLogKeyboard();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        v5[0] = 67109120;
        v5[1] = (int)a2;
        _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "setCapsLockDelayOverride called with invalid interval %d", (uint8_t *)v5, 8u);
      }
    }
  }
}

id sub_100081F08(void *a1)
{
  if (a1)
  {
    a1 = sub_100081600((uint64_t)a1);
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100081F38(void *a1)
{
  if (a1)
  {
    var28[0] = _NSConcreteStackBlock;
    var28[1] = 3221225472;
    var28[2] = sub_100081FC8;
    var28[3] = &unk_1000F81E0;
    var28[4] = a1;
    a1 = +[BKSHIDKeyboardDeviceProperties build:var28];
    uint64_t v1 = var28[6];
  }
  return a1;
}

void sub_100081FC8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 24);
  id v4 = a2;
  [v4 setSenderID:[v3 senderID]];
  [v4 setTransport:*(void *)(*(void *)(a1 + 32) + 64)];
  [v4 setLayout:*(void *)(*(void *)(a1 + 32) + 48)];
  [v4 setLanguage:*(void *)(*(void *)(a1 + 32) + 56)];
  [v4 setExclusivityIdentifier:*(void *)(*(void *)(a1 + 32) + 72)];
  [v4 setCountryCode:*(unsigned __int8 *)(*(void *)(a1 + 32) + 12)];
  [v4 setStandardType:*(unsigned int *)(*(void *)(a1 + 32) + 16)];
  [v4 setSubinterfaceID:*(void *)(*(void *)(a1 + 32) + 40)];
  [v4 setCapsLockKeyHasLanguageSwitchLabel:*(unsigned __int8 *)(*(void *)(a1 + 32) + 10)];
  [v4 setGlobeKeyLabelHasGlobeSymbol:*(unsigned __int8 *)(*(void *)(a1 + 32) + 11)];
}

void sub_100082254(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  [v3 setPid:[v2 pid]];
}

void sub_100082B64(uint64_t a1)
{
  if (a1) {
    +[NSArray arrayWithObject:a1];
  }
  else {
  id v1 = [(id)qword_1001230F0 allKeys];
  }
  [v1 enumerateObjectsUsingBlock:&stru_1000F8270];
}

void sub_100082BD0(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  CFBooleanRef v5 = (const __CFBoolean *)CFPreferencesCopyAppValue(v4, kCFPreferencesCurrentApplication);
  if (v5)
  {
    CFBooleanRef v6 = v5;
    id v7 = [(id)qword_1001230F0 objectForKey:v4];
    if (v7)
    {
      id v8 = v7;
      id v9 = +[BKDisplayBrightnessController sharedInstance];
      [v9 setProperty:v6 forKey:v8];

      if ([(__CFString *)v4 isEqualToString:BKDefaultKeyALSEnabled]) {
        BOOL v10 = v6 == kCFBooleanFalse;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        id v11 = BKLogDetailed();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)char v12 = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "resetting ALS curve", v12, 2u);
        }

        sub_100082CE8();
      }
      sub_100082D3C();
    }
    CFRelease(v6);
  }
}

void sub_100082CE8()
{
  id v0 = +[BKDisplayBrightnessController sharedInstance];
  [v0 setProperty:0 forKey:@"ALSResetCurve"];
}

void sub_100082D3C()
{
  id v0 = +[BKDisplayBrightnessController sharedInstance];
  id v4 = [v0 propertyForKey:@"ALSUserPreference"];

  id v1 = +[NSNull null];
  unsigned int v2 = [v4 isEqual:v1];

  if (v2)
  {

    id v4 = 0;
  }
  id v3 = +[BKSDefaults localDefaults];
  [v3 setALSUserPreferences:v4];
}

BOOL sub_100082DF8()
{
  id v0 = +[BKSDefaults localDefaults];
  id v1 = [v0 ALSUserPreferences];

  if (v1)
  {
    unsigned int v2 = +[BKDisplayBrightnessController sharedInstance];
    [v2 setProperty:v1 forKey:@"ALSUserPreference"];
  }
  return v1 != 0;
}

void sub_100082E74(id a1)
{
}

void sub_100082E84(int a1, uint64_t a2, CFArrayRef theArray)
{
  if (a2 == 1) {
    goto LABEL_6;
  }
  if (a2 == 128 || a2 == 32)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count <= 0) {
      __assert_rtn("_wrapRunLoopWithAutoreleasePoolHandler", "BKAutoreleasePoolRunLoopSupport.m", 27, "count > 0");
    }
    CFIndex v6 = Count - 1;
    CFArrayGetValueAtIndex(theArray, Count - 1);
    NSPopAutoreleasePool();
    CFArrayRemoveValueAtIndex(theArray, v6);
    if (a2 == 32)
    {
LABEL_6:
      id v7 = (const void *)NSPushAutoreleasePool();
      CFArrayAppendValue(theArray, v7);
    }
  }
}

id sub_10008385C(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    a1 = sub_1000838F4(a1);
    if (a1)
    {
      id v4 = [v3[1] copy];
      CFBooleanRef v5 = (void *)*((void *)a1 + 1);
      *((void *)a1 + 1) = v4;

      id v6 = [v3[2] copy];
      id v7 = (void *)*((void *)a1 + 2);
      *((void *)a1 + 2) = v6;

      id v8 = [v3[3] copy];
      id v9 = (void *)*((void *)a1 + 3);
      *((void *)a1 + 3) = v8;

      *((_DWORD *)a1 + 8) = *((_DWORD *)v3 + 8);
      *((void *)a1 + 5) = v3[5];
      *((void *)a1 + 6) = v3[6];
    }
  }

  return a1;
}

id sub_1000838F4(id result)
{
  if (result)
  {
    id v1 = result;
    uint64_t v2 = objc_opt_class();
    if (v2 != objc_opt_class())
    {
      uint64_t v3 = objc_opt_class();
      if (v3 != objc_opt_class())
      {
        id v4 = +[NSString stringWithFormat:@"BKSystemShellDescriptor cannot be subclassed"];
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          CFBooleanRef v5 = NSStringFromSelector("_init");
          id v6 = (objc_class *)objc_opt_class();
          id v7 = NSStringFromClass(v6);
          *(_DWORD *)long long buf = 138544642;
          BOOL v10 = v5;
          __int16 v11 = 2114;
          char v12 = v7;
          __int16 v13 = 2048;
          uint64_t v14 = v1;
          __int16 v15 = 2114;
          CFStringRef v16 = @"BKSystemShellDescriptor.m";
          __int16 v17 = 1024;
          int v18 = 44;
          __int16 v19 = 2114;
          id v20 = v4;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
        }
        [v4 UTF8String];
        _bs_set_crash_log_message();
        __break(0);
        JUMPOUT(0x100083A94);
      }
    }
    v8.receiver = v1;
    v8.super_class = (Class)BKSystemShellDescriptor;
    return [super init];
  }
  return result;
}

void sub_100084248(uint64_t a1, void *a2)
{
}

void sub_10008425C(uint64_t a1, void *a2)
{
}

void sub_100084270(uint64_t a1, void *a2)
{
}

void sub_100084284(uint64_t a1, void *a2)
{
}

void sub_100084298(void *a1, char a2)
{
  id v3 = a1;
  [v3 appendString:@"{"];
  if (a2)
  {
    [v3 appendString:@"open"];
    id v8 = v3;
    if ((a2 & 4) == 0) {
      goto LABEL_8;
    }
    [v8 appendString:@","];
  }
  else
  {
    id v4 = v3;
    if ((a2 & 4) == 0)
    {
      CFBooleanRef v5 = v4;

      id v6 = v5;
      if ((a2 & 8) == 0)
      {
        int v7 = 0;
        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }
  [v3 appendString:@"flap1"];
LABEL_8:

  id v9 = v3;
  if ((a2 & 8) != 0)
  {
    [v9 appendString:@","];
LABEL_10:
    [v3 appendString:@"flap2"];
  }
  int v7 = 1;
LABEL_12:

  id v10 = v3;
  if ((a2 & 0x10) != 0)
  {
    if (v7) {
      [v10 appendString:@","];
    }
    [v10 appendString:@"flap3"];
  }

  [v10 appendString:@"}"];
}

id sub_100084B00(char a1)
{
  id v2 = objc_alloc_init((Class)NSMutableString);
  sub_100084298(v2, a1);

  return v2;
}

void sub_100085504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *sub_100085528(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = +[BSDescriptionStream descriptionForRootObject:WeakRetained];
  }
  else
  {
    id v2 = @"<nil>";
  }

  return v2;
}

void sub_1000855D4(id a1)
{
  byte_1001230F8 = BSSystemHasCapability();
}

void sub_1000859A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100085AC0(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  id v8 = a3;
  id v9 = v8;
  if (*(void *)a1)
  {
    id v10 = [v8 senderID];
    if (v10 != [*(id *)a1 senderID])
    {
      __int16 v11 = BKLogMousePointer();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 138543362;
        uint64_t Name = IOHIDEventTypeGetName();
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ event from a different sender during phased scroll", (uint8_t *)&v15, 0xCu);
      }
LABEL_15:

      uint64_t v13 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    if ((a2 & 0x81) == 0)
    {
      __int16 v11 = BKLogMousePointer();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 138543362;
        uint64_t Name = IOHIDEventTypeGetName();
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ non-begin-phase phased event; no established sender",
          (uint8_t *)&v15,
          0xCu);
      }
      goto LABEL_15;
    }
    char v12 = BKLogMousePointer();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 138543362;
      uint64_t Name = IOHIDEventTypeGetName();
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%{public}@ sender locked", (uint8_t *)&v15, 0xCu);
    }

    objc_storeStrong((id *)a1, a3);
  }
  *(_WORD *)(a1 + 8) = a2;
  if (a2 == 1)
  {
    uint64_t v13 = 1;
    *(unsigned char *)(a1 + 24) = 1;
    *(void *)(a1 + 16) = a4;
  }
  else
  {
    uint64_t v13 = 1;
  }
LABEL_16:

  return v13;
}

void sub_100085CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100085DF0(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  id v8 = a3;
  id v9 = v8;
  if (*(void *)a1)
  {
    id v10 = [v8 senderID];
    if (v10 != [*(id *)a1 senderID])
    {
      __int16 v11 = BKLogMousePointer();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 138543362;
        uint64_t Name = IOHIDEventTypeGetName();
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ event from a different sender during phased scroll", (uint8_t *)&v15, 0xCu);
      }
LABEL_15:

      uint64_t v13 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    if ((a2 & 0x81) == 0)
    {
      __int16 v11 = BKLogMousePointer();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 138543362;
        uint64_t Name = IOHIDEventTypeGetName();
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ non-begin-phase phased event; no established sender",
          (uint8_t *)&v15,
          0xCu);
      }
      goto LABEL_15;
    }
    char v12 = BKLogMousePointer();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 138543362;
      uint64_t Name = IOHIDEventTypeGetName();
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%{public}@ sender locked", (uint8_t *)&v15, 0xCu);
    }

    objc_storeStrong((id *)a1, a3);
  }
  *(_WORD *)(a1 + 8) = a2;
  if (a2 == 1)
  {
    uint64_t v13 = 1;
    *(unsigned char *)(a1 + 24) = 1;
    *(void *)(a1 + 16) = a4;
  }
  else
  {
    uint64_t v13 = 1;
  }
LABEL_16:

  return v13;
}

void sub_100085FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10008602C(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  id v8 = a3;
  id v9 = v8;
  if (*(void *)a1)
  {
    id v10 = [v8 senderID];
    if (v10 != [*(id *)a1 senderID])
    {
      __int16 v11 = BKLogMousePointer();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 138543362;
        uint64_t Name = IOHIDEventTypeGetName();
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ event from a different sender during phased scroll", (uint8_t *)&v15, 0xCu);
      }
LABEL_15:

      uint64_t v13 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    if ((a2 & 0x81) == 0)
    {
      __int16 v11 = BKLogMousePointer();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 138543362;
        uint64_t Name = IOHIDEventTypeGetName();
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ non-begin-phase phased event; no established sender",
          (uint8_t *)&v15,
          0xCu);
      }
      goto LABEL_15;
    }
    char v12 = BKLogMousePointer();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 138543362;
      uint64_t Name = IOHIDEventTypeGetName();
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%{public}@ sender locked", (uint8_t *)&v15, 0xCu);
    }

    objc_storeStrong((id *)a1, a3);
  }
  *(_WORD *)(a1 + 8) = a2;
  if (a2 == 1)
  {
    uint64_t v13 = 1;
    *(unsigned char *)(a1 + 24) = 1;
    *(void *)(a1 + 16) = a4;
  }
  else
  {
    uint64_t v13 = 1;
  }
LABEL_16:

  return v13;
}

void sub_100086228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100086268(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  id v8 = a3;
  id v9 = v8;
  if (*(void *)a1)
  {
    id v10 = [v8 senderID];
    if (v10 != [*(id *)a1 senderID])
    {
      __int16 v11 = BKLogMousePointer();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 138543362;
        uint64_t Name = IOHIDEventTypeGetName();
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ event from a different sender during phased scroll", (uint8_t *)&v15, 0xCu);
      }
LABEL_15:

      uint64_t v13 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    if ((a2 & 0x81) == 0)
    {
      __int16 v11 = BKLogMousePointer();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 138543362;
        uint64_t Name = IOHIDEventTypeGetName();
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ignoring %{public}@ non-begin-phase phased event; no established sender",
          (uint8_t *)&v15,
          0xCu);
      }
      goto LABEL_15;
    }
    char v12 = BKLogMousePointer();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 138543362;
      uint64_t Name = IOHIDEventTypeGetName();
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%{public}@ sender locked", (uint8_t *)&v15, 0xCu);
    }

    objc_storeStrong((id *)a1, a3);
  }
  *(_WORD *)(a1 + 8) = a2;
  if (a2 == 1)
  {
    uint64_t v13 = 1;
    *(unsigned char *)(a1 + 24) = 1;
    *(void *)(a1 + 16) = a4;
  }
  else
  {
    uint64_t v13 = 1;
  }
LABEL_16:

  return v13;
}

void sub_100086464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000868A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100086BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_100086C00(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  id v2 = [*(id *)(a1 + 24) count];
  uint64_t v3 = (uint64_t)v2;
  if ((uint64_t)v2 >= 0) {
    uint64_t v4 = (uint64_t)v2;
  }
  else {
    uint64_t v4 = (uint64_t)v2 + 1;
  }
  CFBooleanRef v5 = *(void **)(a1 + 24);
  if (v4 >> 1 >= v3) {
    [v5 lastObject];
  }
  else {
  id v6 = [v5 objectAtIndex:];
  }
  [v6 doubleValue];
  double v8 = v7;

  return v8;
}

void sub_100086C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100086C9C(uint64_t a1, uint64_t a2, double a3)
{
  *(void *)(a1 + 8) = mach_absolute_time();
  uint64_t result = BSMonotonicReferencedTimeFromMachTime();
  *(double *)(a1 + 16) = v7;
  *(void *)a1 = a2;
  BOOL v8 = v7 <= a3 * 1.5;
  if (v7 > a3 * 1.5) {
    double v7 = a3;
  }
  double v9 = a3 * 0.5;
  if (!v8 || v7 < v9)
  {
    if (v7 < v9) {
      double v7 = a3;
    }
    *(double *)(a1 + 16) = v7;
  }
  return result;
}

void sub_100086F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008722C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

id sub_100087F08(uint64_t a1)
{
  if (a1)
  {
    id v2 = [*(id *)(a1 + 40) mutableCopy];
    id v3 = [*(id *)(a1 + 64) mutableCopy];
    uint64_t v4 = v3;
    if (*(void *)(a1 + 56)) {
      [v3 removeIndexes:];
    }
    [v2 removeIndexes:v4];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void sub_100087F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100087FA4(int a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    if (!v5) {
      id v6 = objc_alloc_init((Class)NSMutableIndexSet);
    }
    [v6 addIndex:a2];
  }
  else
  {
    [v5 removeIndex:a2];
  }
  id v7 = v6;

  return v7;
}

void sub_100088020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100088030()
{
  id v0 = objc_alloc_init((Class)NSMutableArray);
  int IntegerValue = IOHIDEventGetIntegerValue();
  if ((IntegerValue & 0x80) != 0) {
    [v0 addObject:@"cancel"];
  }
  if (IntegerValue)
  {
    if (IOHIDEventGetIntegerValue()) {
      CFStringRef v2 = @"range in";
    }
    else {
      CFStringRef v2 = @"range out";
    }
    [v0 addObject:v2];
  }
  if ((IntegerValue & 2) != 0)
  {
    if (IOHIDEventGetIntegerValue()) {
      CFStringRef v3 = @"touch down";
    }
    else {
      CFStringRef v3 = @"touch up";
    }
    [v0 addObject:v3];
  }
  if ((IntegerValue & 0x20000) != 0) {
    [v0 addObject:@"tap"];
  }
  if ((IntegerValue & 0x200) != 0) {
    [v0 addObject:@"resting"];
  }
  if ((IntegerValue & 4) != 0) {
    [v0 addObject:@"move"];
  }
  if ((IntegerValue & 0x20) != 0) {
    [v0 addObject:@"identity"];
  }
  if ((IntegerValue & 0x40) != 0) {
    [v0 addObject:@"attribute"];
  }
  uint64_t v4 = [v0 componentsJoinedByString:@", "];

  return v4;
}

void sub_10008818C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *sub_1000881A8(void *a1)
{
  id v1 = a1;
  if ([v1 count])
  {
    +[NSMutableString string];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_100088308;
    v6[3] = &unk_1000F8428;
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    id v7 = v2;
    [v1 enumerateIndexesUsingBlock:v6];
    CFStringRef v3 = +[NSCharacterSet whitespaceCharacterSet];
    uint64_t v4 = [v2 stringByTrimmingCharactersInSet:v3];
  }
  else
  {
    uint64_t v4 = &stru_1000FD108;
  }

  return v4;
}

void sub_1000882AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000882E4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsIndex:a2] ^ 1;
}

id sub_100088308(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@"%d ", a2];
}

void sub_10008840C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100088438(id a1, NSMutableIndexSet *a2, _BKMouseDeviceEventState *a3)
{
  uint64_t v4 = a2;
  id v5 = sub_100087F08((uint64_t)a3);
  [(NSMutableIndexSet *)v4 addIndexes:v5];

  return v4;
}

void sub_10008849C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000885BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100088700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000889CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100088A50(id a1, NSNumber *a2, _BKMouseDeviceEventState *a3)
{
  uint64_t v4 = a2;
  id v5 = a3;
  unsigned int v6 = [(NSNumber *)v4 unsignedIntValue];
  if (v5) {
    int64_t buttonMask = v5->_buttonMask;
  }
  else {
    int64_t buttonMask = 0;
  }
  BOOL v8 = +[NSNumber numberWithInteger:buttonMask | v6];

  return v8;
}

void sub_100088ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100088B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100088CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100089138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_100089314(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  double v2 = 0.0;
  if (v1)
  {
    *(void *)(a1 + 48) = v1 - 1;
    BSMonotonicReferencedTimeFromMachTime();
    double v5 = v4 / *(double *)(a1 + 16);
    if (v5 <= 1.0)
    {
      double v6 = *(double *)(a1 + 24);
      double v7 = (v6 + *(double *)(a1 + 32)) * 0.500378425
         + ((*(double *)(a1 + 32) - v6) * 1.0062109
          + ((v6 + *(double *)(a1 + 32)) * -0.00454110206 + (*(double *)(a1 + 32) - v6) * -1.57015627 * (v5 + -0.5))
          * (v5 + -0.5))
         * (v5 + -0.5);
      double v2 = v7 - *(double *)(a1 + 40);
      *(double *)(a1 + 40) = v7;
    }
  }
  return v2;
}

void sub_1000893D0(uint64_t a1)
{
  if (*(void *)(a1 + 72))
  {
    BSMonotonicReferencedTimeFromMachTime();
    double v3 = v2 / *(double *)(a1 + 16);
    if (v3 <= 1.0)
    {
      double v5 = *(double *)(a1 + 24);
      double v6 = *(double *)(a1 + 48);
      *(double *)(a1 + 40) = (v5 + *(double *)(a1 + 32)) * 0.500378425
                           + ((*(double *)(a1 + 32) - v5) * 1.0062109
                            + ((v5 + *(double *)(a1 + 32)) * -0.00454110206
                             + (*(double *)(a1 + 32) - v5) * -1.57015627 * (v3 + -0.5))
                            * (v3 + -0.5))
                           * (v3 + -0.5);
      *(double *)(a1 + 64) = (v6 + *(double *)(a1 + 56)) * 0.500378425
                           + ((*(double *)(a1 + 56) - v6) * 1.0062109
                            + ((v6 + *(double *)(a1 + 56)) * -0.00454110206
                             + (*(double *)(a1 + 56) - v6) * -1.57015627 * (v3 + -0.5))
                            * (v3 + -0.5))
                           * (v3 + -0.5);
    }
    else
    {
      double v4 = BKLogMousePointer();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 134217984;
        double v8 = v3;
        _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "skipping interpolation: %g", (uint8_t *)&v7, 0xCu);
      }
    }
    --*(void *)(a1 + 72);
  }
}

void sub_100089B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10008A410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10008A50C(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t result = sub_100086C9C(a1, a2, a7);
  double v13 = *(double *)(a1 + 32);
  *(double *)(a1 + 24) = v13;
  *(double *)(a1 + 32) = a3 + v13;
  double v14 = *(double *)(a1 + 56);
  *(double *)(a1 + 48) = v14;
  *(double *)(a1 + 56) = a4 + v14;
  *(void *)(a1 + 72) = 3;
  *(double *)(a1 + 80) = a5 / a3;
  *(double *)(a1 + 88) = a6 / a4;
  return result;
}

void sub_10008A5A0(uint64_t a1, double a2)
{
  if (a1)
  {
    if ((unint64_t)[*(id *)(a1 + 16) count] >= *(void *)(a1 + 8))
    {
      double v4 = [*(id *)(a1 + 16) firstObject];
      [*(id *)(a1 + 16) removeObjectAtIndex:0];
      id v5 = [[*(id *)(a1 + 24) indexOfObject:v4 inSortedRange:[*(id *)(a1 + 24) count] options:256 usingComparator:&stru_1000F8338];
      if (v5 == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        double v6 = +[NSString stringWithFormat:@"this should exist"];
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          NSStringFromSelector("addValue:");
          id v7 = (id)objc_claimAutoreleasedReturnValue();
          double v8 = (objc_class *)objc_opt_class();
          double v9 = NSStringFromClass(v8);
          *(_DWORD *)long long buf = 138544642;
          id v12 = v7;
          __int16 v13 = 2114;
          double v14 = v9;
          __int16 v15 = 2048;
          uint64_t v16 = a1;
          __int16 v17 = 2114;
          CFStringRef v18 = @"BKMousePointerEventAccumulator.mm";
          __int16 v19 = 1024;
          int v20 = 93;
          __int16 v21 = 2114;
          long long v22 = v6;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", buf, 0x3Au);
        }
        [v6 UTF8String];
        _bs_set_crash_log_message();
        __break(0);
        JUMPOUT(0x10008A7F4);
      }
      [*(id *)(a1 + 24) removeObjectAtIndex:v5];
    }
    id v10 = +[NSNumber numberWithDouble:a2];
    [*(id *)(a1 + 24) insertObject:v10 atIndex:[*(id *)(a1 + 24) indexOfObject:v10 inSortedRange:0 options:1024 usingComparator:&stru_1000F8358]];
    [*(id *)(a1 + 16) addObject:v10];
  }
}

void sub_10008A830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

int64_t sub_10008A880(id a1, id a2, id a3)
{
  return (int64_t)_[a2 compare:a3];
}

int64_t sub_10008A888(id a1, id a2, id a3)
{
  return (int64_t)_[a2 compare:a3];
}

void sub_10008A938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10008AED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *sub_10008AF88(void *result)
{
  if (result[7] == *(void *)(result[4] + 368))
  {
    uint64_t v1 = result;
    double v2 = BKLogMousePointer();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)double v4 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, " -> discrete scroll -- end phase", v4, 2u);
    }

    uint64_t v3 = v1[5];
    if (v3) {
      *(_WORD *)(v3 + 18) = 4;
    }
    return [(id)v1[4] _terminateScrollingForSender:v1[6]];
  }
  return result;
}

void sub_10008B0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10008B444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, objc_super a11)
{
  a11.super_class = (Class)BKMouseEventAccumulator;
  [(_Unwind_Exception *)&a11 dealloc];
  _Unwind_Resume(a1);
}

void sub_10008B48C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10005EC58(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10008B504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008B598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10008B5A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a4) {
    uint64_t v8 = *(unsigned int *)(a4 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  double v9 = +[BKSHIDEventDeferringToken tokenForIdentifierOfCAContext:v8];
  [a3 setToken:v9];

  uint64_t v10 = *(void *)(a1 + 32);
  __int16 v11 = *(void **)(v10 + 40);
  if (v11) {
    __int16 v11 = (void *)v11[2];
  }
  id v12 = v11;
  sub_100013978((double *)v10, a3, v12);

  BKSHIDEventSetAttributes();
  __int16 v13 = *(void **)(*(void *)(a1 + 32) + 48);
  if (a4) {
    uint64_t v14 = *(unsigned int *)(a4 + 12);
  }
  else {
    uint64_t v14 = 0;
  }

  return [v13 sendEvent:a2 toClientTaskPort:v14];
}

void sub_10008B67C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008B690(id *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v7 = mach_absolute_time();
  uint64_t v8 = objc_alloc_init(BKHIDEventCollector);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id obj = a2;
  id v9 = [obj countByEnumeratingWithState:&v36 objects:v42 count:16];
  if (v9)
  {
    uint64_t v24 = *(void *)v37;
    do
    {
      uint64_t v10 = 0;
      id v26 = v9;
      do
      {
        if (*(void *)v37 != v24) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void *)(*((void *)&v36 + 1) + 8 * v10);
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        id v12 = *(id *)(v11 + 280);
        id v13 = [v12 countByEnumeratingWithState:&v32 objects:v41 count:16];
        uint64_t v27 = v10;
        if (v13)
        {
          uint64_t v14 = *(void *)v33;
          do
          {
            __int16 v15 = 0;
            do
            {
              if (*(void *)v33 != v14) {
                objc_enumerationMutation(v12);
              }
              uint64_t v16 = *(void *)(*((void *)&v32 + 1) + 8 * (void)v15);
              if (v16) {
                uint64_t v17 = *(void *)(v16 + 32);
              }
              else {
                uint64_t v17 = 0;
              }
              if ((a3 & ~v17) == 0) {
                sub_10008BBA0(a1, v11, (_DWORD *)v16, (uint64_t)v8, v7, 0);
              }
              __int16 v15 = (char *)v15 + 1;
            }
            while (v13 != v15);
            id v18 = [v12 countByEnumeratingWithState:&v32 objects:v41 count:16];
            id v13 = v18;
          }
          while (v18);
        }

        if ((a4 & 1) == 0) {
          *(void *)(v11 + 48) = 2;
        }
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        id v19 = a1[9];
        id v20 = [v19 countByEnumeratingWithState:&v28 objects:v40 count:16];
        if (v20)
        {
          uint64_t v21 = *(void *)v29;
          do
          {
            long long v22 = 0;
            do
            {
              if (*(void *)v29 != v21) {
                objc_enumerationMutation(v19);
              }
              [*(id *)(*((void *)&v28 + 1) + 8 * (void)v22) touchDidSoftCancel:*(unsigned int *)(v11 + 16)];
              long long v22 = (char *)v22 + 1;
            }
            while (v20 != v22);
            id v20 = [v19 countByEnumeratingWithState:&v28 objects:v40 count:16];
          }
          while (v20);
        }

        uint64_t v10 = v27 + 1;
      }
      while ((id)(v27 + 1) != v26);
      id v9 = [obj countByEnumeratingWithState:&v36 objects:v42 count:16];
    }
    while (v9);
  }

  sub_100017364((uint64_t)a1, obj, a3);
  sub_100017570((uint64_t)a1, (uint64_t)v8);
}

void sub_10008B948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10008B9A0(id *a1, _DWORD *a2)
{
  double v4 = objc_alloc_init(BKHIDEventCollector);
  sub_10008BA24(a1, a2, (uint64_t)v4, 0);
  sub_100017570((uint64_t)a1, (uint64_t)v4);
}

void sub_10008BA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10008BA24(id *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v8 = mach_absolute_time();
    if (a2) {
      uint64_t v9 = a2[2];
    }
    else {
      uint64_t v9 = 0;
    }
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v10 = [a1[16] objectForKey:v9];
    id v11 = [v10 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v15;
      do
      {
        id v13 = 0;
        do
        {
          if (*(void *)v15 != v12) {
            objc_enumerationMutation(v10);
          }
          sub_10008BBA0(a1, *(void *)(*((void *)&v14 + 1) + 8 * (void)v13), a2, a3, v8, a4);
          id v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v11 = [v10 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v11);
    }

    [a1[16] removeObjectForKey:v9];
    sub_100016650((uint64_t)a1, (uint64_t)a2);
  }
}

void sub_10008BB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008BBA0(void *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3) {
    unsigned int v31 = a3[2];
  }
  else {
    unsigned int v31 = 0;
  }
  id v11 = a3;
  uint64_t v12 = v11;
  if (!a4)
  {

    id v20 = 0;
LABEL_20:
    long long v22 = a1;
    DigitizerEvent = (__IOHIDEvent *)IOHIDEventCreateDigitizerEvent();
    id v24 = v22[1];
    [v24 senderID:0x4400000000];
    IOHIDEventSetSenderID();

    IOHIDEventSetIntegerValue();
    IOHIDEventSetIntegerValue();

    if (a6) {
      IOHIDEventSetIntegerValue();
    }
    id v21 = objc_alloc_init((Class)BKSHIDEventDigitizerAttributes);

    id v25 = +[BKSHIDEventDeferringToken tokenForIdentifierOfCAContext:v31];
    [v21 setToken:v25];

    [v21 setInitialTouchTimestamp:*((double *)v22 + 12)];
    id v26 = objc_alloc_init((Class)NSMutableArray);
    [v21 setPathAttributes:v26];

    sub_100013710(a4, DigitizerEvent, v21, v12);
    CFRelease(DigitizerEvent);
    goto LABEL_23;
  }
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v13 = *(id *)(a4 + 16);
  id v14 = [v13 countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v33;
    do
    {
      long long v16 = 0;
      do
      {
        if (*(void *)v33 != v15) {
          objc_enumerationMutation(v13);
        }
        uint64_t v17 = *(void *)(*((void *)&v32 + 1) + 8 * (void)v16);
        if (v17)
        {
          if (*(void **)(v17 + 24) == v12)
          {
            id v30 = *(id *)(v17 + 16);
            goto LABEL_18;
          }
        }
        else if (!a3)
        {
          id v30 = 0;
LABEL_18:
          id v14 = v30;
          char v19 = 1;
          goto LABEL_19;
        }
        long long v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      id v18 = [v13 countByEnumeratingWithState:&v32 objects:v36 count:16];
      id v14 = v18;
    }
    while (v18);
  }
  char v19 = 0;
LABEL_19:

  id v20 = v14;
  id v21 = v20;
  if ((v19 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_23:
  uint64_t v27 = (const void *)IOHIDEventCreateDigitizerEvent();
  if (a6) {
    IOHIDEventSetIntegerValue();
  }
  id v28 = objc_alloc_init((Class)BKSHIDEventDigitizerPathAttributes);
  [v28 setPathIndex:*(void *)(a2 + 8) 0x4400000000];
  [v28 setTouchIdentifier:*(unsigned int *)(a2 + 16)];
  [v28 setUserIdentifier:*(unsigned int *)(a2 + 20)];
  [v28 setHitTestContextCategory:*(void *)(a2 + 56)];
  [v28 setLocus:*(unsigned __int8 *)(a2 + 296)];
  IOHIDEventAppendEvent();
  long long v29 = [v21 pathAttributes];
  [v29 addObject:v28];

  CFRelease(v27);
}

void sub_10008BF5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10008BFDC(id a1, BKTouchContact *a2)
{
  return a2->_presence == 2 && !a2->_touchDetached;
}

void sub_10008C190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10008C1C8(uint64_t a1, void *a2)
{
  double v4 = BKLogTouchEvents();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    long long v29 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "synth and post:%{public}@", buf, 0xCu);
  }

  sub_10008C568((uint64_t)buf, (void *)a1);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v5 = a2;
  id v6 = [v5 countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v7) {
          objc_enumerationMutation(v5);
        }
        sub_10008CB5C(*(void *)(*((void *)&v24 + 1) + 8 * i), (uint64_t)buf);
      }
      id v6 = [v5 countByEnumeratingWithState:&v24 objects:v30 count:16];
    }
    while (v6);
  }

  uint64_t v9 = (const void *)sub_10008C6E4((uint64_t *)buf);
  uint64_t v10 = sub_100017688(a1, (uint64_t)v9, *(void **)(a1 + 112));
  uint64_t v11 = sub_1000141C0(*(void *)(a1 + 24), (uint64_t)v9, v10, *(void **)(a1 + 176), *(void **)(a1 + 120), *(void **)(a1 + 128));
  uint64_t v12 = v11;
  if (!v11)
  {
    objc_storeStrong((id *)(a1 + 112), v10);
LABEL_14:
    id v13 = objc_alloc_init(BKHIDEventCollector);
    *(void *)id v30 = v13;
    id v14 = (id)a1;
    unsigned int v31 = v14;
    char v23 = 0;
    uint64_t v15 = (void *)v14[5];
    if (v15) {
      uint64_t v15 = (void *)v15[3];
    }
    long long v16 = v15;
    sub_100019710((uint64_t)v16, &v23, (unsigned __int8 *)&v24);

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10008C744;
    void v19[3] = &unk_1000F85C0;
    v19[4] = v14;
    uint64_t v17 = v13;
    id v20 = v17;
    id v21 = v9;
    char v22 = v23;
    sub_100013E00((void *)v12, (uint64_t)v19);

    sub_100013D14((uint64_t *)v30);
    goto LABEL_19;
  }
  if (*(unsigned char *)(v11 + 8)) {
    *(void *)(a1 + 96) = *(void *)(v11 + 16);
  }
  objc_storeStrong((id *)(a1 + 112), v10);
  if ([*(id *)(v12 + 24) count]) {
    goto LABEL_14;
  }
  uint64_t v17 = BKLogTouchEvents();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v30 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "no events for regular clients", v30, 2u);
  }
LABEL_19:

  if (v9) {
    CFRelease(v9);
  }
  return sub_10008C968((uint64_t)buf);
}

void sub_10008C4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  if (v17) {
    CFRelease(v17);
  }
  sub_10008C968((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10008C568(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(_OWORD *)(a1 + 16) = xmmword_1000BF670;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(unsigned char *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 32;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 200) = mach_absolute_time();
  double v4 = (id *)v3;
  uint64_t DigitizerEvent = IOHIDEventCreateDigitizerEvent();
  id v6 = v4[1];
  [v6 senderID:0x4400000000];
  IOHIDEventSetSenderID();

  IOHIDEventSetIntegerValue();
  IOHIDEventSetIntegerValue();

  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  *(void *)a1 = DigitizerEvent;

  return a1;
}

void sub_10008C69C(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v2 + 192))
  {
    free(*(void **)(v2 + 8));
    *(unsigned char *)(v2 + 192) = 0;
  }
  if (*(void *)v2) {
    CFRelease(*(CFTypeRef *)v2);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10008C6E4(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = 8 * v2;
    do
    {
      v3 += 8;
      IOHIDEventAppendEvent();
      v4 -= 8;
    }
    while (v4);
  }
  sub_10008C9DC((uint64_t)a1);
  uint64_t result = *a1;
  *a1 = 0;
  return result;
}

void sub_10008C744(uint64_t a1, _DWORD *a2, uint64_t a3, void *a4)
{
  if (a2) {
    uint64_t v7 = a2[2];
  }
  else {
    uint64_t v7 = 0;
  }
  if ([*(id *)(*(void *)(a1 + 32) + 56) shouldCancelTouchesDeliveredToContextId:v7 withInitialTouchTimestamp:*(double *)(*(void *)(a1 + 32) + 96)])
  {
    uint64_t v8 = [*(id *)(*(void *)(a1 + 32) + 128) objectForKey:v7];
    if ((uint64_t)[v8 count] >= 1)
    {
      uint64_t v9 = BKLogTouchDeliveryPolicy();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v16 = 67109120;
        int v17 = v7;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "(Synth) TDPS said this context should cancel: %X", (uint8_t *)&v16, 8u);
      }

      uint64_t v11 = *(id **)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t IntegerValue = IOHIDEventGetIntegerValue();
      sub_10008BA24(v11, a2, v10, IntegerValue);
    }
  }
  else if (a2)
  {
    int v13 = *(unsigned __int8 *)(a1 + 56);
    sub_10001159C(*(void **)(a1 + 32), *(void *)(a1 + 48), (uint64_t)a2, *(void *)(a1 + 40), v13 == 1, a4, *(double *)(*(void *)(a1 + 32) + 96));
    if (v13 == 1)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      sub_1000098E0(v14, (uint64_t)a2);
    }
  }
  else
  {
    uint64_t v15 = BKLogTouchEvents();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v16 = 67109120;
      int v17 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "(Synth) Missing destination for hit tested context: %X", (uint8_t *)&v16, 8u);
    }
  }
}

void sub_10008C94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10008C968(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192))
  {
    free(*(void **)(a1 + 8));
    *(unsigned char *)(a1 + 192) = 0;
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

void sub_10008C9B0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 192))
  {
    free(*(void **)(v1 + 8));
    *(unsigned char *)(v1 + 192) = 0;
  }
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_10008C9DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(CFTypeRef **)(a1 + 8);
    uint64_t v4 = 8 * v2;
    do
    {
      if (*v3) {
        CFRelease(*v3);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  if (*(unsigned char *)(a1 + 192))
  {
    free(*(void **)(a1 + 8));
    *(unsigned char *)(a1 + 192) = 0;
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_1000BF670;
  *(void *)(a1 + 8) = a1 + 32;
  return result;
}

void sub_10008CA54(uint64_t a1, void *a2)
{
  [a2 setOriginIdentifier:0xC181BADB23D8497BLL];
  [a2 setEventType:11];
  sub_10001DE9C(a2, (unsigned int *)(a1 + 56));
  uint64_t v4 = sub_10001DEF8(a1 + 56);
  [a2 setHitTestInformationFromStartEvent:*(void *)(*(void *)(a1 + 32) + 264)];
  [a2 setHitTestInformationFromEndEvent:v4];
  [a2 setSecureNameStatus:*(void *)(a1 + 360)];
  [a2 setContext:[*(id *)(a1 + 40) authenticationMessageContext]];
  [a2 setVersionedPID:BSVersionedPIDForAuditToken() *(void *)(a1 + 368), *(void *)(a1 + 376), *(void *)(a1 + 384), *(void *)(a1 + 392)];
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    BOOL v6 = *(unsigned __int8 *)(v5 + 8) != 0;
  }
  else {
    BOOL v6 = 0;
  }
  [a2 setRegistrantEntitled:v6];
}

void sub_10008CB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10008CB5C(uint64_t a1, uint64_t a2)
{
  sub_10008CC38(a2);
  IOHIDEventSetFloatValue();
  IOHIDEventSetFloatValue();
  uint64_t result = IOHIDEventSetFloatValue();
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 == 2)
  {
    uint64_t result = IOHIDEventSetIntegerValue();
    uint64_t v4 = *(void *)(a1 + 32);
  }
  if (v4 >= 1) {
    uint64_t result = IOHIDEventSetIntegerValue();
  }
  if (*(_WORD *)(a1 + 68))
  {
    return IOHIDEventSetPhase();
  }
  return result;
}

uint64_t sub_10008CC38(uint64_t a1)
{
  uint64_t DigitizerEvent = IOHIDEventCreateDigitizerEvent();
  uint64_t v3 = (void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 < *(void *)(a1 + 24))
  {
    uint64_t v5 = *v3;
LABEL_12:
    v5[v4] = DigitizerEvent;
    *(void *)(a1 + 16) = v4 + 1;
    return DigitizerEvent;
  }
  BOOL v6 = BKLogTouchEvents();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 134218240;
    uint64_t v13 = a1 + 8;
    __int16 v14 = 1024;
    int v15 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "array:%p exceeded capacity:%d; moving to heap",
      buf,
      0x12u);
  }

  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = malloc_type_calloc(2 * v7, 8uLL, 0x2004093837F09uLL);
  if (v8)
  {
    uint64_t v5 = v8;
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
        v8[i] = *((void *)*v3 + i);
    }
    if (*(unsigned char *)(a1 + 192)) {
      free(*v3);
    }
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 24) = 2 * v7;
    *(unsigned char *)(a1 + 192) = 1;
    unint64_t v4 = *(void *)(a1 + 16);
    goto LABEL_12;
  }
  return DigitizerEvent;
}

id *sub_10008CDE0(id *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (a2 == 3)
  {
    [result[4] addObject:result[5]];
    uint64_t result = (id *)[v2[6] shouldAvoidHitTesting];
    if (result) {
      *(void *)(*((void *)v2[7] + 1) + 24) = 1;
    }
  }
  else if (a2 == 2 || a2 == 1)
  {
    id v3 = result[4];
    id v4 = v2[5];
    return (id *)[v3 addObject:v4];
  }
  return result;
}

BKHitTestResultPathLocation *sub_10008CE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  sub_1000109A8((uint64_t)v11, a1, a2 + 200, a3, a4);
  uint64_t v7 = objc_alloc_init(BKHitTestResultPathLocation);
  if (v7)
  {
    int64_t v8 = *(void *)(a2 + 8);
    long long v9 = v11[1];
    *(_OWORD *)&v7->_pathLocation.locationsAreValid = v11[0];
    *(_OWORD *)&v7->_pathLocation.location.double y = v9;
    *(_OWORD *)&v7->_pathLocation.hitTestLocation.double y = v11[2];
    v7->_pathLocation.preciseLocation.double y = v12;
    v7->_pathIndedouble x = v8;
    v7->_contextRelationship = a5;
  }

  return v7;
}

uint64_t sub_10008CEE8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 296))
  {
    id v3 = BKLogTouchEvents();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = *(_DWORD *)(a2 + 16);
      int v13 = 67109120;
      int v14 = v4;
      uint64_t v5 = "transfer: touch %X detached";
LABEL_14:
      uint64_t v10 = v3;
      uint32_t v11 = 8;
      goto LABEL_15;
    }
  }
  else if (*(unsigned char *)(a2 + 297))
  {
    id v3 = BKLogTouchEvents();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v12 = *(_DWORD *)(a2 + 16);
      int v13 = 67109120;
      int v14 = v12;
      uint64_t v5 = "transfer: touch %X already transferred once";
      goto LABEL_14;
    }
  }
  else
  {
    if (!*(void *)(a1 + 32) || !objc_msgSend(*(id *)(a2 + 280), "containsObject:")) {
      return 1;
    }
    id v3 = BKLogTouchEvents();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v8 = *(_DWORD *)(a2 + 16);
      int v9 = *(_DWORD *)(a1 + 40);
      int v13 = 67109376;
      int v14 = v8;
      __int16 v15 = 1024;
      int v16 = v9;
      uint64_t v5 = "transfer: touch %X already in contextID:%X";
      uint64_t v10 = v3;
      uint32_t v11 = 14;
LABEL_15:
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v13, v11);
    }
  }

  return 0;
}

int64_t sub_10008D070(id a1, BKTouchContact *a2, BKTouchContact *a3)
{
  pathIndedouble x = a2->_pathIndex;
  int64_t v4 = a3->_pathIndex;
  BOOL v5 = pathIndex <= v4;
  if (pathIndex >= v4) {
    int64_t v6 = 0;
  }
  else {
    int64_t v6 = -1;
  }
  if (v5) {
    return v6;
  }
  else {
    return 1;
  }
}

void sub_10008D088(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 succinctDescription];
  [v2 appendString:withName:];
}

void sub_10008D0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_10008E154(uint64_t a1, void *a2)
{
  return [a2 monitor:*(void *)(a1 + 32) displayDidBecomeActive:*(void *)(a1 + 40)];
}

id sub_10008E160(uint64_t a1, void *a2)
{
  return [a2 monitor:*(void *)(a1 + 32) activeDisplayPropertiesDidChange:*(void *)(a1 + 40)];
}

id sub_10008E16C(uint64_t a1, void *a2)
{
  return [a2 monitor:*(void *)(a1 + 32) displayDidBecomeInactive:*(void *)(a1 + 40)];
}

void sub_10008E38C(id a1)
{
  uint64_t v1 = objc_alloc_init(BKSharedCADisplayProvider);
  uint64_t v2 = (void *)qword_100123118;
  qword_100123118 = (uint64_t)v1;
}

void sub_10008E914(uint64_t a1, void *a2, void *a3)
{
  int64_t v4 = *(void **)(*(void *)(a1 + 32) + 48);
  id v5 = a2;
  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [a3 displayId]);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  [v4 setObject:v5 forKey:v6];
}

id sub_10008EFF0(id a1, CADisplay *a2)
{
  id v2 = [(CADisplay *)a2 immutableCopy];

  return v2;
}

void sub_10008F4FC(uint64_t a1, void *a2, void *a3)
{
  int64_t v4 = *(void **)(*(void *)(a1 + 32) + 48);
  id v5 = a2;
  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [a3 displayId]);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  [v4 setObject:v5 forKey:v6];
}

id sub_10008FC88(void *a1, char a2)
{
  id v3 = a1;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  if ([v3 digitizerEnabled]) {
    [v4 setObject:&__kCFBooleanTrue forKeyedSubscript:@"ScreenOn"];
  }
  if (a2) {
    goto LABEL_4;
  }
  if ([v3 proximityDetectionMode] == 6)
  {
    uint64_t v5 = 6;
  }
  else
  {
    if (!v3) {
      goto LABEL_11;
    }
    if ([v3 estimatedProximityMode])
    {
LABEL_4:
      uint64_t v5 = 3;
      goto LABEL_12;
    }
    unsigned int v6 = [v3 proximityDetectionMode] - 1;
    if (v6 <= 0xC) {
      uint64_t v5 = dword_1000BF8B4[v6];
    }
    else {
LABEL_11:
    }
      uint64_t v5 = 0;
  }
LABEL_12:
  uint64_t v7 = +[NSNumber numberWithUnsignedInt:v5];
  [v4 setObject:v7 forKeyedSubscript:@"ProxDetectionMode"];

  int v8 = (char *)[v3 displayState];
  if ((unint64_t)(v8 - 1) <= 2)
  {
    int v9 = +[NSNumber numberWithInteger:v8];
    [v4 setObject:v9 forKeyedSubscript:@"DisplayState"];
  }
  if ([v3 changeSource] == (id)4) {
    [v4 setObject:&off_100103718 forKeyedSubscript:@"ChangeSource"];
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v10 = [v3 proximityHostStateKeys];
  id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v13) {
          objc_enumerationMutation(v10);
        }
        [v4 setObject:&__kCFBooleanTrue forKeyedSubscript:*(void *)(*((void *)&v16 + 1) + 8 * i)];
      }
      id v12 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v12);
  }

  return v4;
}

void sub_10008FF70(id a1)
{
  if (!qword_100123120)
  {
    uint64_t v1 = objc_alloc_init(BKWatchdogService);
    id v2 = (void *)qword_100123120;
    qword_100123120 = (uint64_t)v1;
  }
}

uint64_t sub_10008FFC8(uint64_t a1)
{
  return mach_port_mod_refs(mach_task_self_, *(_DWORD *)(a1 + 32), 1u, -1);
}

uint64_t sub_10008FFE8(uint64_t a1)
{
  return _dispatch_mig_server(*(void *)(a1 + 32), 40, sub_1000A8000);
}

id sub_100090440(uint64_t a1)
{
  return [*(id *)(a1 + 32) appendObject:*(void *)(*(void *)(a1 + 40) + 8) withName:@"displayUUID"];
}

void sub_100090650(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = *(void **)(v2 + 32);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_1000906F8;
    v4[3] = &unk_1000F8E50;
    void v4[4] = v2;
    id v5 = v1;
    [v3 terminateAlternateSystemApp:v5 forReason:0 andReport:0 withDescription:0 completion:v4];
  }
}

void sub_1000906F8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 16) remoteObjectProxy];
  [v2 alternateSystemAppWithBundleIDDidTerminate:*(void *)(a1 + 40)];

  id v3 = BKLogAlternateSystemApp();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138543362;
    uint64_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Server] Sent notification that alternate system app \"%{public}@\" did terminate", (uint8_t *)&v5, 0xCu);
  }
}

void sub_1000908E0(uint64_t a1)
{
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_100090A7C;
  void v16[3] = &unk_1000F88D8;
  uint64_t v2 = *(void **)(a1 + 40);
  v16[4] = *(void *)(a1 + 32);
  id v17 = v2;
  id v3 = objc_retainBlock(v16);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100090B84;
    v13[3] = &unk_1000F8900;
    uint64_t v7 = v3;
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = *(void **)(a1 + 40);
    id v15 = v7;
    void v13[4] = v8;
    id v14 = v9;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_100090C94;
    _OWORD v11[3] = &unk_1000F8928;
    uint64_t v10 = *(void **)(a1 + 40);
    void v11[4] = *(void *)(a1 + 32);
    id v12 = v10;
    [v6 openAlternateSystemApp:v5 options:0 withResult:v13 andExitBlock:v11];
  }
  else
  {
    ((void (*)(void *, uint64_t))v3[2])(v3, 2);
  }
}

void sub_100090A7C(uint64_t a1, unsigned int a2)
{
  id v3 = +[NSError errorWithDomain:@"com.apple.backboardd.altsysapp" code:a2 userInfo:0];
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 16) remoteObjectProxy];
  [v4 alternateSystemAppWithBundleID:*(void *)(a1 + 40) failedToOpenWithResult:v3];

  uint64_t v5 = BKLogAlternateSystemApp();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 138543618;
    uint64_t v8 = v6;
    __int16 v9 = 2114;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Server] Sent notification that alternate system app \"%{public}@\" failed to open with error %{public}@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100090B84(void *a1, int a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(a1[6] + 16);
    v3();
  }
  else
  {
    uint64_t v4 = [*(id *)(a1[4] + 16) remoteObjectProxy];
    [v4 alternateSystemAppWithBundleIDDidOpen:a1[5]];

    uint64_t v5 = BKLogAlternateSystemApp();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[5];
      int v7 = 138543362;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Server] Sent notification that alternate system app \"%{public}@\" did open", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_100090C94(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 16) remoteObjectProxy];
  [v4 alternateSystemAppWithBundleID:*(void *)(a1 + 40) didExitWithContext:v3];

  uint64_t v5 = BKLogAlternateSystemApp();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 138543618;
    uint64_t v8 = v6;
    __int16 v9 = 2114;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Server] Sent notification that alternate system app \"%{public}@\" did exit with reason %{public}@", (uint8_t *)&v7, 0x16u);
  }
}

id sub_100090E40(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) terminateAnyAlternateSystemApp];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100090ECC;
  v5[3] = &unk_1000F8E78;
  void v5[4] = v2;
  return [v3 unblockSystemAppForAlternateSystemAppWithCompletion:v5];
}

void sub_100090ECC(uint64_t a1)
{
  uint64_t v1 = [*(id *)(*(void *)(a1 + 32) + 16) remoteObjectProxy];
  [v1 didUnblockSystemAppForAlternateSystemApp];

  uint64_t v2 = BKLogAlternateSystemApp();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Server] Sent notification that system app is no longer blocked for alternate system app", v3, 2u);
  }
}

id sub_100091010(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100091084;
  v4[3] = &unk_1000F8E78;
  void v4[4] = v1;
  return [v2 blockSystemAppForAlternateSystemAppWithCompletion:v4];
}

void sub_100091084(uint64_t a1)
{
  uint64_t v1 = [*(id *)(*(void *)(a1 + 32) + 16) remoteObjectProxy];
  [v1 didBlockSystemAppForAlternateSystemApp];

  uint64_t v2 = BKLogAlternateSystemApp();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Server] Sent notification that system app is blocked for alternate system app", v3, 2u);
  }
}

id sub_100091288(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _queue_listener:*(void *)(a1 + 40) shouldAcceptNewConnection:*(void *)(a1 + 48)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1000915D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

void sub_100091614(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleInterruptedOrInvalidatedConnection];
}

void sub_100091654(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleInterruptedOrInvalidatedConnection];
}

id sub_100091708(uint64_t a1)
{
  [*(id *)(a1 + 32) setClientConnection:0];
  [*(id *)(*(void *)(a1 + 32) + 32) terminateAnyAlternateSystemApp];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);

  return [v2 unblockSystemAppForAlternateSystemAppWithCompletion:0];
}

void sub_1000918C8(id a1)
{
  uint64_t v1 = objc_alloc_init(BKAlternateSystemAppServer);
  uint64_t v2 = (void *)qword_100123130;
  qword_100123130 = (uint64_t)v1;
}

id sub_100091B48(uint64_t a1, void *a2)
{
  return [a2 appendSuccinctDescriptionToFormatter:*(void *)(a1 + 32)];
}

void sub_100092270(uint64_t a1)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 8));
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x3032000000;
    id v15 = sub_100092478;
    long long v16 = sub_100092488;
    id v17 = (id)objc_opt_new();
    uint64_t v2 = *(void **)(a1 + 88);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_100092490;
    _OWORD v11[3] = &unk_1000F89D8;
    void v11[4] = a1;
    void v11[5] = &v12;
    [v2 enumerateWithBlock:v11];
    uint64_t v3 = objc_opt_new();
    uint64_t v4 = (void *)v13[5];
    if (v4) {
      id v5 = [v4 disableFeatures];
    }
    else {
      id v5 = 0;
    }
    uint64_t v6 = +[NSNumber numberWithInt:v5];
    [v3 setObject:v6 forKeyedSubscript:@"Status"];

    [(id)v13[5] fixedBrightnessNitsWhileDisabled];
    if (v7 >= 0.0)
    {
      uint64_t v8 = +[NSNumber numberWithDouble:v7];
      [v3 setObject:v8 forKeyedSubscript:@"FixBrightnessNits"];
    }
    [(id)v13[5] fixedBrightnessLevelWhileDisabled];
    if (v9 >= 0.0)
    {
      id v10 = +[NSNumber numberWithDouble:v9];
      [v3 setObject:v10 forKeyedSubscript:@"FixBrightness"];
    }
    sub_10000B3A0(a1, v3, @"CoreBrightnessFeaturesDisabled");

    _Block_object_dispose(&v12, 8);
  }
}

void sub_100092454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100092478(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100092488(uint64_t a1)
{
}

void sub_100092490(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = v4;
  if (v4 && (id v6 = *(id *)(v4 + 62)) != 0)
  {
    id v7 = v6;
    if ([v6 disableFeatures]
      && ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) disableFeatures] & 1) == 0)
    {
      goto LABEL_24;
    }
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) fixedBrightnessNitsWhileDisabled];
    float v9 = v8;
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) fixedBrightnessLevelWhileDisabled];
    float v11 = v10;
    [v7 fixedBrightnessNitsWhileDisabled];
    float v13 = v12;
    [v7 fixedBrightnessLevelWhileDisabled];
    if (v9 < 0.0 && v11 < 0.0 && (v13 >= 0.0 || v14 >= 0.0)) {
      goto LABEL_24;
    }
    if ((v11 >= 0.0 || v14 < 0.0)
      && (v11 >= 0.0 ? (BOOL v15 = v14 <= v11) : (BOOL v15 = 1), v15 && (v9 >= 0.0 ? (v16 = v13 <= v9) : (v16 = 1), v16)))
    {
      id v17 = BKLogBacklight();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 88);
        int v24 = 138543618;
        uint64_t v25 = v18;
        __int16 v26 = 2114;
        uint64_t v27 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "effective backlight features:%{public}@ clients:(%{public}@)", (uint8_t *)&v24, 0x16u);
      }
    }
    else
    {
LABEL_24:
      uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 8);
      id v21 = *(void **)(v20 + 40);
      *(void *)(v20 + 40) = v7;
      id v7 = v7;
    }
  }
  else
  {
    uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8);
    char v23 = *(void **)(v22 + 40);
    *(void *)(v22 + 40) = 0;
  }
}

void sub_100092AAC(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 && (*(_DWORD *)(a1 + 16) != a2 || !*(unsigned char *)(a1 + 80)))
  {
    *(_DWORD *)(a1 + 16) = a2;
    *(unsigned char *)(a1 + 80) = 1;
    id v5 = *(void **)(a1 + 96);
    id v6 = +[NSNumber numberWithUnsignedInt:a2];
    [v5 setProperty:v6 forKey:@"BrightnessCurveLevel"];

    if (a3)
    {
      id v7 = +[BKSDefaults localDefaults];
      [v7 setBrightnessCurve:a2];
    }
  }
}

void sub_1000933C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000933E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  id v7 = v5;
  if (WeakRetained)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000934D4;
    block[3] = &unk_1000F8E50;
    id v10 = v7;
    id v11 = WeakRetained;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_1000934D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = objc_opt_class();
  id v4 = v2;
  if (v3)
  {
    if (objc_opt_isKindOfClass()) {
      id v5 = v4;
    }
    else {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = 0;
  }
  id v6 = v5;

  if (v6)
  {
    id v7 = [v6 objectForKey:@"Brightness"];
    uint64_t v8 = objc_opt_class();
    id v9 = v7;
    if (v8 && (objc_opt_isKindOfClass() & 1) != 0)
    {

      if (v9)
      {
        [v9 floatValue];
        [*(id *)(a1 + 40) setBrightnessLevel:@"BrightnessSystemDidChange" reason:4];

        goto LABEL_16;
      }
    }
    else
    {
    }
  }
  id v10 = BKLogBacklight();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v11 = 138543362;
    id v12 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "property change handler arguments seem bogus: %{public}@", (uint8_t *)&v11, 0xCu);
  }

LABEL_16:
}

void sub_10009364C(id a1)
{
  uint64_t v1 = BKLogBacklight();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "instantiating BrightnessSystem", v8, 2u);
  }

  id v2 = objc_alloc_init((Class)BrightnessSystem);
  uint64_t v3 = [BKDisplayBrightnessController alloc];
  id v4 = +[BKSystemShellSentinel sharedInstance];
  id v5 = sub_10001C32C();
  id v6 = [(BKDisplayBrightnessController *)v3 _initWithBrightnessSystem:v2 systemShellSentinel:v4 orientationManager:v5];
  id v7 = (void *)qword_100123140;
  qword_100123140 = (uint64_t)v6;
}

void sub_100093840(uint64_t a1)
{
  int v2 = dword_100122454;
  if (dword_100122454 != -1
    || (notify_register_check("com.apple.backboardd.rawOrientation", &dword_100122454),
        int v2 = dword_100122454,
        dword_100122454 != -1))
  {
    notify_set_state(v2, *(void *)(a1 + 40));
    notify_post("com.apple.backboardd.rawOrientation");
  }
  uint64_t v3 = BKLogOrientationDevice();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    id v4 = BSDeviceOrientationDescription();
    int v5 = 138543362;
    id v6 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Current raw accelerometer device orientation changed to: %{public}@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_100093CC0(void *a1)
{
  if (!a1[12])
  {
    int v2 = BKLogOrientationDevice();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Resetting device orientation.", v3, 2u);
    }

    kdebug_trace();
    sub_100093D84(a1, 0, 1);
    if (a1[7] != 1)
    {
      a1[7] = 1;
      sub_100093EF0((uint64_t)a1, 1);
    }
  }
}

void sub_100093D84(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = a2;
  if (a1[11] != a2)
  {
    a1[11] = a2;
    id v6 = a1[18];
    *(void *)&long long v9 = _NSConcreteStackBlock;
    *((void *)&v9 + 1) = 3221225472;
    id v10 = sub_10009406C;
    int v11 = &unk_1000F8C30;
    id v12 = a1;
    uint64_t v13 = a2;
    dispatch_async(v6, &v9);
    a2 = a1[11];
  }
  if (a2)
  {
    if (a1[7] != a2)
    {
      a1[7] = a2;
      sub_100093EF0((uint64_t)a1, a2);
    }
    if (((a3 & 1) != 0 || a1[10] == -1) && BSInterfaceOrientationIsValid())
    {
      a1[10] = v4;
      id v7 = BKLogOrientationDevice();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = BSInterfaceOrientationDescription();
        LODWORD(v9) = 138543362;
        *(void *)((char *)&v9 + 4) = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Last effective interface orientation changed to: %{public}@", (uint8_t *)&v9, 0xCu);
      }
    }
  }
}

void sub_100093EF0(uint64_t a1, uint64_t a2)
{
  int v2 = *(NSObject **)(a1 + 144);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100093F64;
  v3[3] = &unk_1000F8C30;
  void v3[4] = a1;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

void sub_100093F64(uint64_t a1)
{
  int v2 = dword_100122458;
  if (dword_100122458 != -1
    || (notify_register_check("com.apple.backboardd.unambiguousOrientation", &dword_100122458),
        int v2 = dword_100122458,
        dword_100122458 != -1))
  {
    notify_set_state(v2, *(void *)(a1 + 40));
    notify_post("com.apple.backboardd.unambiguousOrientation");
  }
  uint64_t v3 = BKLogOrientationDevice();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = BSDeviceOrientationDescription();
    int v5 = 138543362;
    id v6 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Last unambiguous device orientation changed to: %{public}@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10009406C(uint64_t a1)
{
  int v2 = dword_100122450;
  if (dword_100122450 != -1
    || (notify_register_check("com.apple.backboardd.orientation", &dword_100122450),
        int v2 = dword_100122450,
        dword_100122450 != -1))
  {
    notify_set_state(v2, *(void *)(a1 + 40));
    notify_post("com.apple.backboardd.orientation");
  }
  uint64_t v3 = BKLogOrientationDevice();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = BSDeviceOrientationDescription();
    int v5 = 138543362;
    id v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Effective device orientation changed to: %{public}@", (uint8_t *)&v5, 0xCu);
  }
}

__CFString *sub_1000941B8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    int v2 = +[NSMutableArray array];
    uint64_t v3 = v2;
    if (v1)
    {
      [v2 addObject:@"user"];
      v1 &= ~1uLL;
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_14;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"system"];
    v1 &= ~2uLL;
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if (!v1)
      {
LABEL_7:
        int v5 = [v3 componentsJoinedByString:@", "];
        id v6 = +[NSString stringWithFormat:@"(%@)", v5];

        goto LABEL_9;
      }
LABEL_6:
      uint64_t v4 = +[NSNumber numberWithUnsignedInteger:v1];
      [v3 addObject:v4];

      goto LABEL_7;
    }
LABEL_14:
    [v3 addObject:@"overlay"];
    v1 &= ~4uLL;
    if (!v1) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  id v6 = @"none";
LABEL_9:

  return v6;
}

void sub_1000942E8(id a1)
{
  uint64_t v1 = objc_alloc_init(BKOrientationManager);
  int v2 = (void *)qword_100123150;
  qword_100123150 = (uint64_t)v1;
}

uint64_t sub_100094324(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 52);
  return result;
}

void sub_100094338(uint64_t a1, void *a2)
{
  id v3 = a2;
  BSDispatchQueueAssert();
  sub_100094458(*(void *)(a1 + 32), v3);
}

void sub_100094398(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 52))
  {
    id v3 = [*(id *)(a1 + 120) deviceOrientationBlocking];
    sub_100094458(a1, v3);
  }
  else
  {
    int v2 = BKLogOrientationDevice();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "WARNING: Attempting synchronous device orientation update while events disabled!", buf, 2u);
    }

    sub_100094554(a1);
  }
}

void sub_100094458(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a2 orientation];
    uint64_t v4 = BKLogOrientationDevice();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = BSDeviceOrientationDescription();
      int v6 = 138543362;
      id v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Updating device orientation from CoreMotion to: %{public}@", (uint8_t *)&v6, 0xCu);
    }
    kdebug_trace();
    sub_100094674(a1, v3, 1);
  }
}

void sub_100094554(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_alloc_init((Class)CMDeviceOrientationManager);
    [v2 startDeviceOrientationUpdatesToQueue:*(void *)(a1 + 112) withHandler:0];
    uint64_t v3 = [v2 deviceOrientationBlocking];
    [v2 stopDeviceOrientationUpdates];
    uint64_t v4 = BKLogOrientationDevice();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      [v3 orientation];
      int v5 = BSDeviceOrientationDescription();
      int v6 = 138543362;
      id v7 = v5;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fetching effective device orientation with temporary manager: %{public}@", (uint8_t *)&v6, 0xCu);
    }
    sub_100094458(a1, v3);
  }
}

void sub_100094674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && !*(unsigned char *)(a1 + 104))
  {
    if (*(void *)(a1 + 72) != a2)
    {
      *(void *)(a1 + 72) = a2;
      [a1 _queue_postUpdatedRawAccelerometerDeviceOrientation:a2];
    }
    if (!*(void *)(a1 + 96)) {
      sub_100093D84((void *)a1, a2, 1);
    }
    sub_100094710(a1, a2, a3);
  }
}

void sub_100094710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = *(void *)(a1 + 96) != 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v7 = [*(id *)(a1 + 24) orderedContext];
  uint64_t v8 = [v7 array];

  id obj = v8;
  id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v19;
    do
    {
      id v12 = 0;
      do
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v18 + 1) + 8 * (void)v12);
        float v14 = *(NSObject **)(a1 + 16);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000948A4;
        block[3] = &unk_1000F8AE8;
        void block[4] = v13;
        void block[5] = a1;
        void block[6] = a2;
        void block[7] = a3;
        BOOL v17 = v6;
        dispatch_async(v14, block);
        id v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v10);
  }
}

uint64_t sub_1000948A4(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(unsigned __int8 *)(a1 + 64);
    return (uint64_t)[v3 orientationManager:v4 deviceOrientationMayHaveChanged:v5 changeSource:v6 isDeviceOrientationLocked:v7];
  }
  return result;
}

uint64_t sub_100094900(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1000949B8;
  v4[3] = &unk_1000F8EA0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1000949B8(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 64);
  return result;
}

void sub_1000949CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(v1 + 64);
    if (v3 != v2)
    {
      uint64_t v4 = BKLogOrientationDevice();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        BOOL v17 = BSInterfaceOrientationDescription();
        long long v18 = BSInterfaceOrientationDescription();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v27 = v17;
        __int16 v28 = 2114;
        long long v29 = v18;
        _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Current user interface orientation is changing from %{public}@ to %{public}@", buf, 0x16u);
      }
    }
    uint64_t v5 = +[BKHIDEventProcessorRegistry sharedInstance];
    uint64_t v6 = [v5 eventProcessorOfClass:objc_opt_class()];

    [v6 setBuiltInDisplayInterfaceOrientation:v2];
    kdebug_trace();
    *(void *)(v1 + 64) = v2;
    if (v3 != v2)
    {
      long long v19 = v6;
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.backboardd.deviceinterfaceorientation", 0, 0, 1u);
      BOOL v8 = *(void *)(v1 + 96) != 0;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      id v9 = [*(id *)(v1 + 24) orderedContext];
      id v10 = [v9 array];

      id v11 = [v10 countByEnumeratingWithState:&v22 objects:buf count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v23;
        do
        {
          float v14 = 0;
          do
          {
            if (*(void *)v23 != v13) {
              objc_enumerationMutation(v10);
            }
            uint64_t v15 = *(void *)(*((void *)&v22 + 1) + 8 * (void)v14);
            BOOL v16 = *(NSObject **)(v1 + 16);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100094C84;
            block[3] = &unk_1000F8B10;
            void block[4] = v15;
            void block[5] = v1;
            void block[6] = v2;
            BOOL v21 = v8;
            dispatch_async(v16, block);
            float v14 = (char *)v14 + 1;
          }
          while (v12 != v14);
          id v12 = [v10 countByEnumeratingWithState:&v22 objects:buf count:16];
        }
        while (v12);
      }

      uint64_t v6 = v19;
    }
  }
}

uint64_t sub_100094C84(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
    return (uint64_t)_[v3 orientationManager:v4 userInterfaceOrientationMayHaveChanged:v5 isDeviceOrientationLocked:v6];
  }
  return result;
}

uint64_t sub_100094CE0(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100094D98;
  v4[3] = &unk_1000F8EA0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100094D98(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 72);
  return result;
}

uint64_t sub_100094DAC(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100094E64;
  v4[3] = &unk_1000F8EA0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100094E64(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 88);
  return result;
}

uint64_t sub_100094E78(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1) {
    LOBYTE(v1) = *(void *)(v1 + 96) != 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v1;
  return result;
}

BOOL sub_100094E9C(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100094F60;
  block[3] = &unk_1000F8A70;
  void block[4] = a1;
  void block[5] = &v6;
  void block[6] = a2;
  dispatch_sync(v2, block);
  BOOL v3 = *((unsigned char *)v7 + 24) != 0;
  _Block_object_dispose(&v6, 8);
  return v3;
}

void *sub_100094F60(void *result)
{
  uint64_t v1 = result[4];
  if (v1) {
    LOBYTE(v1) = *(void *)(v1 + 96) != 0;
  }
  uint64_t v2 = (void *)result[6];
  *(unsigned char *)(*(void *)(result[5] + 8) + 24) = v1;
  if (v2)
  {
    uint64_t v3 = *(void *)(result[4] + 88);
    if (v3 == -1) {
      uint64_t v3 = 0;
    }
    *uint64_t v2 = v3;
  }
  return result;
}

void sub_100094F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v4 = *(NSObject **)(a1 + 8);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_10009501C;
    v5[3] = &unk_1000F8A98;
    void v5[4] = a1;
    void v5[5] = a2;
    v5[6] = a3;
    v5[7] = a4;
    dispatch_sync(v4, v5);
  }
}

void sub_10009501C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v1 = a1[5];
  if (v2) {
    BOOL v3 = v1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v4 = a1[6];
    if (v1 == 2)
    {
      uint64_t v5 = a1[7];
      uint64_t v6 = +[NSNumber numberWithInt:v5];
      uint64_t v7 = [*(id *)(v2 + 32) objectForKey:v6];

      if (!v7)
      {
        id v8 = objc_alloc((Class)BSProcessDeathWatcher);
        uint64_t v9 = *(void *)(v2 + 8);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_10009533C;
        v20[3] = &unk_1000F8C30;
        v20[4] = v2;
        v20[5] = v5;
        id v10 = [v8 initWithPID:v5 queue:v9 deathHandler:v20];
        [*(id *)(v2 + 32) setObject:v10 forKey:v6];
      }
    }
    if ((*(void *)(v2 + 96) & v1) == 0)
    {
      id v11 = BKLogOrientationDevice();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = sub_1000941B8(v1);
        uint64_t v13 = BSDeviceOrientationDescription();
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Locking device orientation for lock type: %{public}@ to: %{public}@", buf, 0x16u);
      }
      kdebug_trace();
      uint64_t v14 = *(void *)(v2 + 96);
      if (v14)
      {
        *(void *)(v2 + 96) = v14 | v1;
        BOOL v15 = 1;
      }
      else
      {
        sub_100093D84((void *)v2, v4, v1 != 2);
        sub_100094710(v2, v4, 3);
        *(void *)(v2 + 96) |= v1;
        sub_100094710(v2, v4, 3);
        BOOL v15 = *(void *)(v2 + 96) != 0;
      }
      BOOL v16 = *(NSObject **)(v2 + 144);
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1000953C8;
      long long v22 = &unk_1000F8B30;
      BOOL v23 = v15;
      dispatch_async(v16, buf);
      BOOL v17 = BKLogOrientationDevice();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        long long v18 = sub_1000941B8(v1);
        long long v19 = BSDeviceOrientationDescription();
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v18;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v19;
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Locked device orientation for lock type: %{public}@ to: %{public}@", buf, 0x16u);
      }
    }
  }
}

void sub_10009533C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 32) count] == (id)1)
  {
    uint64_t v2 = BKLogOrientationDevice();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Last system shell with an orientation lock exited -- unlocking system device orientation", v3, 2u);
    }

    sub_100095448(*(void *)(a1 + 32), 2, *(void *)(a1 + 40));
  }
}

uint64_t sub_1000953C8(uint64_t result)
{
  uint64_t v1 = result;
  LODWORD(result) = dword_10012245C;
  if (dword_10012245C != -1
    || (notify_register_check("com.apple.backboardd.orientationlock", &dword_10012245C),
        uint64_t result = dword_10012245C,
        dword_10012245C != -1))
  {
    notify_set_state(result, *(unsigned __int8 *)(v1 + 32));
    return notify_post("com.apple.backboardd.orientationlock");
  }
  return result;
}

void sub_100095448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && (*(void *)(a1 + 96) & a2) != 0)
  {
    uint64_t v6 = BKLogOrientationDevice();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = sub_1000941B8(a2);
      LODWORD(v12) = 138543362;
      *(void *)((char *)&v12 + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unlocking device orientation for lock type: %{public}@", (uint8_t *)&v12, 0xCu);
    }
    kdebug_trace();
    *(void *)(a1 + 96) &= ~a2;
    if ((a2 & 2) != 0)
    {
      id v8 = +[NSNumber numberWithInt:a3];
      uint64_t v9 = [*(id *)(a1 + 32) objectForKey:v8];
      [*(id *)(a1 + 32) removeObjectForKey:v8];
      [v9 invalidate];
    }
    sub_100094398(a1);
    BOOL v10 = *(void *)(a1 + 96) != 0;
    id v11 = *(NSObject **)(a1 + 144);
    *(void *)&long long v12 = _NSConcreteStackBlock;
    *((void *)&v12 + 1) = 3221225472;
    uint64_t v13 = sub_1000953C8;
    uint64_t v14 = &unk_1000F8B30;
    BOOL v15 = v10;
    dispatch_async(v11, &v12);
  }
}

void sub_100095604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    BOOL v3 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100095684;
    block[3] = &unk_1000F8C58;
    void block[4] = a1;
    void block[5] = a2;
    void block[6] = a3;
    dispatch_sync(v3, block);
  }
}

void sub_100095684(uint64_t *a1)
{
}

void sub_100095694(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100095718;
    block[3] = &unk_1000F8C58;
    void block[4] = a1;
    void block[5] = a2;
    void block[6] = 2;
    dispatch_sync(v2, block);
  }
}

void sub_100095718(uint64_t *a1)
{
}

void sub_100095728(uint64_t a1)
{
}

id *sub_100095730(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    a1 = [a1[3] acquireForReason:@"observing" withContext:v3];
  }

  return a1;
}

void sub_100095B1C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained[2] increment];
    [v3[8] setValue:*(unsigned int *)(a1 + 40)];
    [v3[9] setValue:*(int *)(a1 + 44)];
    id WeakRetained = v3;
  }
}

void sub_100095B90(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained[3] increment];
    [v3[8] setValue:*(unsigned int *)(a1 + 40)];
    [v3[9] setValue:*(int *)(a1 + 44)];
    id WeakRetained = v3;
  }
}

void sub_100095C04(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained[7] increment];
    [v3[8] setValue:*(unsigned int *)(a1 + 40)];
    [v3[9] setValue:*(int *)(a1 + 44)];
    id WeakRetained = v3;
  }
}

void sub_100095C78(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained[4] increment];
    [v3[8] setValue:*(unsigned int *)(a1 + 40)];
    [v3[9] setValue:*(int *)(a1 + 44)];
    id WeakRetained = v3;
  }
}

void sub_100095CEC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained[6] increment];
    [v3[8] setValue:*(unsigned int *)(a1 + 40)];
    [v3[9] setValue:*(int *)(a1 + 44)];
    id WeakRetained = v3;
  }
}

void sub_100095D60(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained[5] increment];
    [v3[8] setValue:*(unsigned int *)(a1 + 40)];
    [v3[9] setValue:*(int *)(a1 + 44)];
    id WeakRetained = v3;
  }
}

void sub_100095DD4(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained[11] setValue:*(unsigned int *)(a1 + 40)];
    [v3[12] setValue:*(int *)(a1 + 44)];
    id v4 = v3[10];
    id v5 = v3[12];
    v7[0] = v3[11];
    v7[1] = v5;
    uint64_t v6 = +[NSArray arrayWithObjects:v7 count:2];
    [v4 pushStatistics:v6];
  }
}

id sub_100095F64(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) appendVersionedPID:*(void *)(*(void *)(a1 + 40) + 40) withName:@"pid"];
  [*(id *)(a1 + 32) appendString:*(void *)(*(void *)(a1 + 40) + 64) withName:0 skipIfEmpty:1];
  id v3 = *(void **)(a1 + 32);
  id v4 = NSStringFromBKSTouchStreamIdentifier();
  [v3 appendString:v4 withName:0];

  id v5 = [*(id *)(a1 + 32) appendDouble:@"creationTime" withName:4 decimalPrecision:*(double *)(*(void *)(a1 + 40) + 24)];
  id v6 = [*(id *)(a1 + 32) appendObject:*(void *)(*(void *)(a1 + 40) + 48) withName:@"touchDestination"];
  id v7 = [*(id *)(a1 + 32) appendBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 12) withName:@"valid"];
  unint64_t v8 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 10);
  if (v8 > 3) {
    CFStringRef v9 = @"<unknown>";
  }
  else {
    CFStringRef v9 = off_1000F8B78[v8];
  }
  id v10 = [*(id *)(a1 + 32) appendObject:v9 withName:@"dispatchMode"];
  unint64_t v11 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 11);
  if (v11 > 2) {
    CFStringRef v12 = @"<unknown>";
  }
  else {
    CFStringRef v12 = off_1000F8B98[v11];
  }
  return [*(id *)(a1 + 32) appendObject:v12 withName:@"ambiguityRecommendation"];
}

id *sub_10009629C(id *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*((unsigned char *)result + 12))
    {
      *((unsigned char *)result + 12) = 0;
      [result[7] invalidate];
      id v2 = v1[7];
      v1[7] = 0;

      id WeakRetained = (id *)objc_loadWeakRetained(v1 + 4);
      id v4 = WeakRetained;
      if (WeakRetained) {
        [WeakRetained[2] removeObject:v1];
      }

      return (id *)objc_storeWeak(v1 + 4, 0);
    }
  }
  return result;
}

id sub_100096BE8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) increment];
}

id sub_100096C68(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) increment];
}

id sub_100096CE8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 88) increment];
}

id sub_100096D68(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 80) increment];
}

BOOL sub_100096D7C(id a1, BKTouchDestination *a2)
{
  return !a2 || (a2->_predicate & 1) == 0;
}

void sub_100096DA0(void *a1, void *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  id v11 = a1;
  CFStringRef v12 = a2;
  int v13 = *(unsigned __int8 *)(a4 + 89);
  id v14 = v12[2];
  BOOL v15 = sub_100005E04((uint64_t)BKDisplayController, v13, 0, v14, *(void **)(a4 + 16));

  memset(v20, 0, sizeof(v20));
  [*(id *)a4 contextIDAtCAScreenLocation:*(void *)(a4 + 8) displayUUID:v15 options:0 securityAnalysis:v20 results:a5, a6];
  if (DWORD1(v20[0]) == *(_DWORD *)(a3 + 4))
  {
    BOOL v16 = BKLogTouchEvents();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v22 = DWORD1(v20[0]);
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "auth: recording hit test info for slotID:%X", buf, 8u);
    }

    *((_DWORD *)v11 + 6) = DWORD1(v20[0]);
    uint64_t v17 = sub_10001DEF8((uint64_t)v20);
    long long v18 = *((void *)v11 + 33);
    *((void *)v11 + 33) = v17;
  }
  else
  {
    long long v18 = BKLogTouchEvents();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)long long buf = 67109376;
      int v22 = v19;
      __int16 v23 = 1024;
      int v24 = DWORD1(v20[0]);
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "auth: slotID mismatch between down hit tests: %X vs %X", buf, 0xEu);
    }
  }
}

void sub_100096FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_100096FE8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

id sub_100097160(uint64_t a1)
{
  [*(id *)(a1 + 32) appendSuccinctDescriptionToFormatter:*(void *)(a1 + 40)];
  id result = [*(id *)(*(void *)(a1 + 32) + 24) count];
  if (result) {
    return [*(id *)(a1 + 40) appendInteger:[*(id *)(*(void *)(a1 + 32) + 24) count] withName:@"externalReferences"];
  }
  return result;
}

void sub_1000976C0(id a1)
{
  uint64_t v1 = objc_alloc_init(BKDisplayAnnotationLocation);
  id v2 = (void *)qword_100123160;
  qword_100123160 = (uint64_t)v1;
}

void sub_100098134(id a1)
{
  uint64_t v1 = objc_alloc_init(BKDisplayRenderOverlayPersistenceCoordinator);
  id v2 = (void *)qword_100123170;
  qword_100123170 = (uint64_t)v1;
}

void sub_10009906C(id a1)
{
  uint64_t v1 = [BKBootUIOverlayVendor alloc];
  id v4 = +[BKFirstBootDetector sharedInstance];
  id v2 = [(BKBootUIOverlayVendor *)v1 initWithFirstBootDetector:v4];
  long long v3 = (void *)qword_100123180;
  qword_100123180 = (uint64_t)v2;
}

void sub_10009A7D4(id a1)
{
  if (!sub_1000073A4())
  {
    uint64_t v1 = [BKDisplayRenderOverlayManager alloc];
    id v7 = +[BKDisplayRenderOverlayPersistenceCoordinator sharedInstance];
    id v2 = sub_10001C32C();
    long long v3 = +[BKDisplayBrightnessController sharedInstance];
    id v4 = +[CAWindowServer serverIfRunning];
    id v5 = [(BKDisplayRenderOverlayManager *)v1 _initWithPersistenceCoordinator:v7 orientationManager:v2 backlightManager:v3 windowServer:v4];
    id v6 = (void *)qword_100123190;
    qword_100123190 = (uint64_t)v5;
  }
}

void sub_10009AE40(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) appendObject:*(void *)(*(void *)(a1 + 40) + 8) withName:0];
  id v3 = [[*(id *)(a1 + 32) appendPoint:withName:@"baseTranslation" withName:*(double *)(*(void *)(a1 + 40) + 16) withName:*(double *)(*(void *)(a1 + 40) + 24)];
  id v4 = [[*(id *)(a1 + 32) appendRect:withName:@"globalBounds" withName:*(double *)(*(void *)(a1 + 40) + 32) withName:*(double *)(*(void *)(a1 + 40) + 40) withName:*(double *)(*(void *)(a1 + 40) + 48) withName:*(double *)(*(void *)(a1 + 40) + 56)];
  id v5 = *(void **)(a1 + 48);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 64);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_10009AF38;
    v7[3] = &unk_1000F8DE0;
    id v8 = v5;
    [v8 appendDictionary:v6 withName:@"regionToComputedFrame" itemBlock:v7];
  }
}

id sub_10009AF38(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = [v5 appendObject:a2 withName:0];
  BSRectFromValue();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;

  [*(id *)(a1 + 32) appendRightArrow];
  BOOL v16 = *(void **)(a1 + 32);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  id v18[2] = sub_10009B024;
  void v18[3] = &unk_1000F8DB8;
  void v18[4] = v9;
  void v18[5] = v11;
  v18[6] = v13;
  v18[7] = v15;
  return [v16 appendCustomFormatWithName:&stru_1000FD108 block:v18];
}

id sub_10009B024(void *a1, void *a2)
{
  return [a2 appendFormat:@"(%g,%g,%g,%g)", a1[4], a1[5], a1[6], a1[7]];
}

void sub_10009C86C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10009C92C;
  void v9[3] = &unk_1000F8F60;
  id v10 = v3;
  uint64_t v11 = v4;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v12 = v6;
  uint64_t v13 = v7;
  id v8 = v3;
  dispatch_async(v5, v9);
}

id sub_10009C92C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  if (v3 == v2[9])
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    return [_objc_msgSend(v2, "_queue_continueAddingOverlayForReason:generation:", v6, v7);
  }
  else
  {
    uint64_t v4 = sub_10005F9DC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 56);
      v10[0] = 67109378;
      v10[1] = v8;
      __int16 v11 = 2114;
      uint64_t v12 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "addOverlay(%d-%{public}@): this overlay was removed or canceled; not continuing",
        (uint8_t *)v10,
        0x12u);
    }

    return [*(id *)(a1 + 32) invalidate];
  }
}

void sub_10009CCE4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  BSContinuousMachTimeNow();
  double v6 = v5;
  uint64_t v7 = sub_10005F9DC();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 32);
    double v10 = v6 - *(double *)(a1 + 64);
    int v14 = 67109634;
    int v15 = v8;
    __int16 v16 = 2114;
    uint64_t v17 = v9;
    __int16 v18 = 2048;
    double v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "addOverlay(%d-%{public}@): acquire returned in %gs", (uint8_t *)&v14, 0x1Cu);
  }

  if (v4)
  {
    __int16 v11 = sub_10005F9DC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(a1 + 32);
      int v14 = 67109634;
      int v15 = v12;
      __int16 v16 = 2114;
      uint64_t v17 = v13;
      __int16 v18 = 2114;
      double v19 = *(double *)&v4;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "addOverlay(%d-%{public}@): could not acquire activity assertion (but we shall continue anyway): %{public}@", (uint8_t *)&v14, 0x1Cu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10009D8D8(uint64_t a1)
{
  id v2 = sub_10005F9DC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "systemShellChangedWithPrimary: %{public}@", buf, 0xCu);
  }

  id v4 = *(void **)(a1 + 40);
  double v5 = +[NSString stringWithFormat:@"shell changed (%@)", *(void *)(a1 + 32)];
  [v4 _queue_updateOverlayForReason:v5];
}

void sub_10009DA4C(uint64_t a1)
{
  id v2 = sub_10005F9DC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "systemShellDidFinishLaunching: - %{public}@", buf, 0xCu);
  }

  id v4 = *(void **)(a1 + 40);
  double v5 = +[NSString stringWithFormat:@"shell launched (%@)", *(void *)(a1 + 32)];
  [v4 _queue_updateOverlayForReason:v5];
}

id sub_10009DBC0(uint64_t a1)
{
  id v2 = sub_10005F9DC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 138543362;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Re-evalutate - firstBootDetectorDidFinishFirstBoot - %{public}@", (uint8_t *)&v7, 0xCu);
  }

  id v4 = *(void **)(a1 + 40);
  if (v4[7])
  {
    double v5 = BKLogDetailed();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Toggling underlay.", (uint8_t *)&v7, 2u);
    }

    [*(id *)(a1 + 40) _queue_removeUnderlay];
    [*(id *)(a1 + 40) _queue_addUnderlay];
    id v4 = *(void **)(a1 + 40);
  }
  return [v4 _queue_updateOverlayForReason:@"didFinishFirstBoot"];
}

void sub_10009DD70(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 104);
  uint64_t v3 = sub_10005F9DC();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v8 = 138543362;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unsustaining the boot overlay: %{public}@", (uint8_t *)&v8, 0xCu);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 104) = 0;
    double v6 = *(unsigned char **)(a1 + 32);
    if (v6[105])
    {
      [v6 _queue_removeOverlayWithAnimationSettings:0];
      *(unsigned char *)(*(void *)(a1 + 32) + 105) = 0;
    }
  }
  else
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = 138543362;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Can't unsustain nonexistent boot overlay: %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_10009DF60(void *a1)
{
  uint64_t v2 = *(void *)(a1[4] + 72);
  uint64_t v3 = sub_10005F9DC();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = a1[5];
      int v7 = 138543362;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sustaining the boot overlay: %{public}@", (uint8_t *)&v7, 0xCu);
    }

    *(unsigned char *)(a1[4] + 104) = 1;
    *(unsigned char *)(a1[4] + 105) = 0;
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = a1[5];
      int v7 = 138543362;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Can't persist a boot overlay that isn't there: %{public}@", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_10009E128(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 72);
  uint64_t v3 = sub_10005F9DC();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      int v5 = *(_DWORD *)(a1 + 48);
      int v7 = 67109120;
      int v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dismissing boot logo (pid:%d)", (uint8_t *)&v7, 8u);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 104) = 0;
    *(unsigned char *)(*(void *)(a1 + 32) + 105) = 0;
    [*(id *)(a1 + 32) _queue_setScreenOwnerPID:*(unsigned int *)(a1 + 48)];
    [*(id *)(a1 + 32) _queue_removeOverlayWithAnimationSettings:*(void *)(a1 + 40)];
  }
  else
  {
    if (v4)
    {
      int v6 = *(_DWORD *)(a1 + 48);
      int v7 = 67109120;
      int v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Cannot dismiss nonexistent boot logo (pid:%d)", (uint8_t *)&v7, 8u);
    }
  }
}

uint64_t sub_10009E2F8(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 72) != 0;
  return result;
}

id sub_10009E9C4(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) hideAppleLogoOnLaunch];
  uint64_t v3 = *(void **)(a1 + 40);
  if (v2) {
    [v3 _queue_removeUnderlay];
  }
  else {
    [v3 _queue_addUnderlay];
  }
  BOOL v4 = *(void **)(a1 + 40);

  return [v4 _queue_updateOverlayForReason:@"init"];
}

id sub_10009EA20(uint64_t a1)
{
  [*(id *)(a1 + 32) _queue_addUnderlay];
  unsigned int v2 = *(void **)(a1 + 32);

  return [v2 _queue_updateOverlayForReason:@"init 2"];
}

void sub_10009EAB8(id a1)
{
  if (sub_1000073A4())
  {
    uint64_t v1 = (void *)qword_1001231A0;
    qword_1001231A0 = 0;
  }
  else
  {
    unsigned int v2 = [BKBootUIPresenter alloc];
    id v9 = +[BKSystemShellSentinel sharedInstance];
    uint64_t v3 = +[BKAlternateSystemAppManager sharedInstance];
    BOOL v4 = +[BKFirstBootDetector sharedInstance];
    int v5 = +[BKBootUIOverlayVendor sharedInstance];
    int v6 = +[BKDisplayRenderOverlayManager sharedInstance];
    int v7 = [(BKBootUIPresenter *)v2 initWithSystemAppSentinel:v9 alternateSystemAppManager:v3 firstBootDetector:v4 bootUIOverlayVendor:v5 renderOverlayManager:v6];
    int v8 = (void *)qword_1001231A0;
    qword_1001231A0 = (uint64_t)v7;

    uint64_t v1 = v9;
  }
}

void sub_10009EE34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = +[BSObjCProtocol protocolForProtocol:&OBJC_PROTOCOL___BKSSystemShellControlClientInterface];
  BOOL v4 = +[BSObjCProtocol protocolForProtocol:&OBJC_PROTOCOL___BKSSystemShellControlServerInterface];
  int v5 = +[BSMutableServiceInterface interfaceWithIdentifier:BKSSystemShellControllerServiceName];
  [v5 setServer:v4];
  [v5 setClient:v7];
  int v6 = +[BSServiceQuality userInitiated];
  [v3 setServiceQuality:v6];

  [v3 setInterface:v5];
  [v3 setInterfaceTarget:*(void *)(*(void *)(a1 + 32) + 16)];
  [v3 setTargetQueue:*(void *)(*(void *)(a1 + 32) + 24)];
  [v3 setInvalidationHandler:&stru_1000F8FF0];
  [v3 setInterruptionHandler:&stru_1000F9010];
}

void sub_10009F0C4(uint64_t a1, void *a2)
{
  uint64_t v3 = BKSSystemShellServiceDomainName;
  id v4 = a2;
  [v4 setDomain:v3];
  [v4 setService:BKSSystemShellControllerServiceName];
  [v4 setDelegate:*(void *)(a1 + 32)];
}

BKNamespaceNode *__cdecl sub_10009F8E0(id a1, NSString *a2, BKNamespaceNode *a3, BOOL a4)
{
  id v4 = a2;
  int v5 = objc_alloc_init(BKNamespaceNode);
  [(BKNamespaceNode *)v5 setName:v4];

  return v5;
}

void sub_10009FAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009FACC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10009FADC(uint64_t a1)
{
}

void sub_10009FAE4(uint64_t a1, int a2, id obj)
{
}

id sub_10009FCEC(id a1, id a2)
{
  return +[BSDescriptionBuilder descriptionForObject:a2];
}

void sub_1000A0048(void *a1)
{
  id v1 = a1;
  if (qword_1001231C0) {
    goto LABEL_3;
  }
  unsigned int v2 = +[BKHIDSystemInterface sharedInstance];
  uint64_t v3 = [v2 HIDSystemChannel];
  id v4 = (void *)qword_1001231C0;
  qword_1001231C0 = v3;

  if (qword_1001231C0)
  {
LABEL_3:
    dispatch_mach_receive_barrier();
  }
  else
  {
    int v5 = sub_10005FC4C();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v6 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "BKHIDSystem HID server runloop not yet initialized", v6, 2u);
    }
  }
}

void sub_1000A065C(id a1)
{
  id v1 = objc_alloc_init(BKHIDSystemInterface);
  unsigned int v2 = (void *)qword_1001231B0;
  qword_1001231B0 = (uint64_t)v1;
}

NSNumber *sub_1000A06FC(uint64_t a1, int a2, double a3)
{
  BOOL v3 = *(_DWORD *)(a1 + 40) == a2 && *(double *)(a1 + 32) == a3;
  return +[NSNumber numberWithInt:v3];
}

id sub_1000A072C(id a1, unsigned int a2, unsigned int a3)
{
  return &__kCFBooleanFalse;
}

NSNumber *sub_1000A0738(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    LODWORD(v3) = *(_DWORD *)(v3 + 8);
  }
  if (v3 == a2)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      LODWORD(v4) = *(_DWORD *)(v4 + 8);
    }
    BOOL v5 = v4 == a3;
  }
  else
  {
    BOOL v5 = 0;
  }
  return +[NSNumber numberWithInt:v5];
}

id sub_1000A0778(id a1, unsigned int a2, double a3)
{
  return &__kCFBooleanFalse;
}

uint64_t sub_1000A08E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 assertionEndpoint];
  BOOL v5 = [v3 assertionEndpoint];

  if (v5)
  {
    int v6 = xpc_connection_create_from_endpoint(v4);
    xpc_connection_set_target_queue(v6, *(dispatch_queue_t *)(*(void *)(a1 + 32) + 8));
    objc_initWeak(&location, *(id *)(a1 + 32));
    objc_initWeak(&from, v6);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1000A0A98;
    handler[3] = &unk_1000F9220;
    objc_copyWeak(&v11, &location);
    id v10 = v3;
    objc_copyWeak(&v12, &from);
    xpc_connection_set_event_handler(v6, handler);
    [*(id *)(*(void *)(a1 + 32) + 24) addObject:v6];
    xpc_connection_resume(v6);
    xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
    xpc_connection_send_message(v6, v7);

    objc_destroyWeak(&v12);
    objc_destroyWeak(&v11);
    objc_destroyWeak(&from);
    objc_destroyWeak(&location);
  }
  return 0;
}

void sub_1000A0A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1000A0A98(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (a2 == &_xpc_error_connection_invalid || a2 == &_xpc_error_connection_interrupted)
  {
    int v6 = BKLogTouchDeliveryPolicy();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v7 = *(void **)(a1 + 32);
      int v16 = 138543362;
      uint64_t v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "TDPS server received policy invalidation %{public}@", (uint8_t *)&v16, 0xCu);
    }

    int v8 = (void *)WeakRetained[3];
    id v9 = objc_loadWeakRetained((id *)(a1 + 48));
    [v8 removeObject:v9];

    id v10 = BKLogTouchDeliveryPolicy();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v14 = [WeakRetained _policy];
      int v16 = 138543362;
      uint64_t v17 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Policy was %{public}@", (uint8_t *)&v16, 0xCu);
    }
    id v11 = [WeakRetained _policy];
    id v12 = [v11 policyExcludingPolicyIdenticalTo:*(void *)(a1 + 32)];
    [WeakRetained _queue_setPolicy:v12];

    uint64_t v13 = BKLogTouchDeliveryPolicy();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v15 = [WeakRetained _policy];
      int v16 = 138543362;
      uint64_t v17 = v15;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Policy is %{public}@", (uint8_t *)&v16, 0xCu);
    }
  }
}

id sub_1000A0E40(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1000A0F50;
  _OWORD v8[3] = &unk_1000F9168;
  id v9 = *(id *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1000A0FDC;
  v6[3] = &unk_1000F9190;
  id v7 = *(id *)(a1 + 32);
  uint64_t v4 = [a2 matchSharingTouchesPolicy:v8 orCancelTouchesPolicy:v6 orCombinedPolicy:&stru_1000F91D0];

  return v4;
}

id sub_1000A0F50(uint64_t a1)
{
  uint64_t v1 = BKHostRequiresTouchesFromHostedContentEntitlement;
  unsigned int v2 = [*(id *)(a1 + 32) _xpcConnection];
  id v3 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[BKSecurityManager hasEntitlement:v1 forConnection:v2]);

  return v3;
}

id sub_1000A0FDC(uint64_t a1)
{
  uint64_t v1 = BKCancelsTouchesInHostedContentEntitlement;
  unsigned int v2 = [*(id *)(a1 + 32) _xpcConnection];
  id v3 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[BKSecurityManager hasEntitlement:v1 forConnection:v2]);

  return v3;
}

id sub_1000A1068(id a1, NSArray *a2)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  unsigned int v2 = a2;
  id v3 = [(NSArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        if (!objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "BOOLValue", (void)v10))
        {
          uint64_t v7 = 0;
          goto LABEL_11;
        }
      }
      id v4 = [(NSArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v7 = 1;
LABEL_11:

  int v8 = +[NSNumber numberWithBool:v7];

  return v8;
}

void sub_1000A13F8(id a1)
{
  uint64_t v1 = objc_alloc_init(BKTouchDeliveryPolicyServer);
  unsigned int v2 = (void *)qword_1001231C8;
  qword_1001231C8 = (uint64_t)v1;
}

char *sub_1000A1434(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 40)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*((_DWORD *)result + 10) || *((_DWORD *)result + 11) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  int32x2_t v4 = *(int32x2_t *)(result + 32);
  long long v5 = *(_OWORD *)(result + 76);
  v7[0] = *(_OWORD *)(result + 60);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  id v9 = sub_10002F3D8;
  long long v10 = &unk_1000F6900;
  long long v11 = v7[0];
  long long v12 = v5;
  int32x2_t v13 = vrev64_s32(v4);
  id result = (char *)sub_10000B130((uint64_t)"_BKHIDXXTouchSensitiveButtonSetScanMode", BKBackBoardClientEntitlement, (uint64_t)v7);
  if (result)
  {
    id result = (char *)((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t sub_1000A1550(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v4 = -304;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 24);
    result += 24;
    if (v3 || *(_DWORD *)(result + 4) <= 0x1Fu)
    {
      int v4 = -309;
    }
    else
    {
      *(_DWORD *)(a2 + 52) = 0;
      *(_DWORD *)(a2 + 36) = 16777472;
      long long v5 = *(_OWORD *)(result + 36);
      v6[0] = *(_OWORD *)(result + 20);
      v6[1] = v5;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      int v8 = sub_10002F280;
      id v9 = &unk_1000F6860;
      uint64_t v10 = a2 + 28;
      uint64_t v11 = a2 + 52;
      id result = (uint64_t)sub_10000B130((uint64_t)"_BKHIDXXGetUISensorCharacteristics", BKBackBoardClientEntitlement, (uint64_t)v6);
      if (result)
      {
        id result = ((uint64_t (*)(void *))v8)(v7);
        *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
        *(NDR_record_t *)(a2 + 44) = NDR_record;
        *(_DWORD *)a2 |= 0x80000000;
        *(_DWORD *)(a2 + 4) = 56;
        *(_DWORD *)(a2 + 24) = 1;
        return result;
      }
      int v4 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_1000A1690(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (unsigned int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        uint64_t v6 = *(void *)(a1 + 28);
        long long v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_10002B70C(v6, v4, v8);
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A176C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (unsigned int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        uint64_t v6 = *(void *)(a1 + 28);
        long long v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        sub_10002EE68(v6, v4, v8);
        *(_DWORD *)(a2 + 32) = 0;
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A1848(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 1 || *(_DWORD *)(a1 + 4) != 56)
  {
    int v5 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 39) != 1 || (unsigned int v4 = *(_DWORD *)(a1 + 40), v4 != *(_DWORD *)(a1 + 52)))
  {
    int v5 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 56) || *(_DWORD *)(a1 + 60) <= 0x1Fu)
  {
    int v5 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v6 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(a1 + 28);
  long long v8 = *(_OWORD *)(a1 + 92);
  v9[0] = *(_OWORD *)(a1 + 76);
  v9[1] = v8;
  sub_10002F494(v7, v4, (unsigned int *)(a2 + 36), (uint64_t)v9);
  *(_DWORD *)(a2 + 32) = 0;
  mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(void *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  NDR_record_t v6 = NDR_record;
  if (!*(_DWORD *)(a2 + 32))
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v6;
}

void sub_1000A1948(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 2 || *(_DWORD *)(a1 + 4) != 76)
  {
    int v4 = -304;
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 39) != 1
    || *(unsigned char *)(a1 + 55) != 1
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a1 + 68)
    || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 72))
  {
    int v4 = -300;
    goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 76) || *(_DWORD *)(a1 + 80) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v4;
    goto LABEL_13;
  }
  *(_DWORD *)(a2 + 52) = 0;
  int v5 = (_DWORD *)(a2 + 52);
  NDR_record_t v6 = (void *)(a2 + 28);
  *(_DWORD *)(a2 + 36) = 16777472;
  uint64_t v7 = *(void *)(a1 + 28);
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 44);
  unsigned int v10 = *(_DWORD *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 112);
  v13[0] = *(_OWORD *)(a1 + 96);
  v13[1] = v11;
  int v12 = sub_10002EA7C(v7, v8, v9, v10, v6, v5, (uint64_t)v13);
  mig_deallocate(*(void *)(a1 + 44), *(unsigned int *)(a1 + 56));
  *(void *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(void *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (!v12)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return;
  }
  *(_DWORD *)(a2 + 32) = v12;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A1AB8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 76)
  {
    if (*(unsigned char *)(a1 + 39) == 1
      && *(unsigned char *)(a1 + 55) == 1
      && (unsigned int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 68))
      && (unsigned int v5 = *(_DWORD *)(a1 + 56), v5 == *(_DWORD *)(a1 + 72)))
    {
      if (!*(_DWORD *)(a1 + 76) && *(_DWORD *)(a1 + 80) > 0x1Fu)
      {
        uint64_t v7 = *(void *)(a1 + 28);
        uint64_t v8 = *(void *)(a1 + 44);
        long long v9 = *(_OWORD *)(a1 + 112);
        v10[0] = *(_OWORD *)(a1 + 96);
        v10[1] = v9;
        *(_DWORD *)(a2 + 32) = sub_10002E17C(v7, v4, v8, v5, (uint64_t)v10);
        mig_deallocate(*(void *)(a1 + 44), *(unsigned int *)(a1 + 56));
        *(void *)(a1 + 44) = 0;
        *(_DWORD *)(a1 + 56) = 0;
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      int v6 = -309;
    }
    else
    {
      int v6 = -300;
    }
  }
  else
  {
    int v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A1BC8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 2 || *(_DWORD *)(a1 + 4) != 76)
  {
    int v4 = -304;
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 39) != 1
    || *(unsigned char *)(a1 + 55) != 1
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a1 + 68)
    || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 72))
  {
    int v4 = -300;
    goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 76) || *(_DWORD *)(a1 + 80) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v4;
    goto LABEL_13;
  }
  *(_DWORD *)(a2 + 52) = 0;
  unsigned int v5 = (_DWORD *)(a2 + 52);
  int v6 = (void *)(a2 + 28);
  *(_DWORD *)(a2 + 36) = 16777472;
  uint64_t v7 = *(void *)(a1 + 28);
  int v8 = *(_DWORD *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 44);
  int v10 = *(_DWORD *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 112);
  v13[0] = *(_OWORD *)(a1 + 96);
  v13[1] = v11;
  int v12 = sub_10002BFA4(v7, v8, v9, v10, v6, v5, (uint64_t)v13);
  mig_deallocate(*(void *)(a1 + 44), *(unsigned int *)(a1 + 56));
  *(void *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(void *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (!v12)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return;
  }
  *(_DWORD *)(a2 + 32) = v12;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A1D38(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 2 || *(_DWORD *)(a1 + 4) != 76)
  {
    int v4 = -304;
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 39) != 1
    || *(unsigned char *)(a1 + 55) != 1
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a1 + 68)
    || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 72))
  {
    int v4 = -300;
    goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 76) || *(_DWORD *)(a1 + 80) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v4;
    goto LABEL_13;
  }
  *(_DWORD *)(a2 + 52) = 0;
  unsigned int v5 = (_DWORD *)(a2 + 52);
  int v6 = (void *)(a2 + 28);
  *(_DWORD *)(a2 + 36) = 16777472;
  uint64_t v7 = *(void *)(a1 + 28);
  int v8 = *(_DWORD *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 44);
  int v10 = *(_DWORD *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 112);
  v13[0] = *(_OWORD *)(a1 + 96);
  v13[1] = v11;
  int v12 = sub_10002BC34(v7, v8, v9, v10, v6, v5, (uint64_t)v13);
  mig_deallocate(*(void *)(a1 + 44), *(unsigned int *)(a1 + 56));
  *(void *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(void *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (!v12)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return;
  }
  *(_DWORD *)(a2 + 32) = v12;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A1EA8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        uint64_t v6 = *(void *)(a1 + 28);
        long long v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_10002C314(v6, v4, (uint64_t)v8);
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A1F84(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0
    && (uint64_t v4 = *(unsigned int *)(a1 + 4), v4 >= 0x30)
    && v4 <= 0x430
    && ((unsigned int v5 = *(_DWORD *)(a1 + 44), v5 <= 0x400) ? (v6 = (int)v4 - 48 >= v5) : (v6 = 0),
        (unsigned int v7 = ((v5 + 3) & 0xFFFFFFFC) + 48, v6) ? (v8 = v4 == v7) : (v8 = 0),
        v8 && memchr((void *)(a1 + 48), 0, v4 - 48)))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = +[NSString stringWithUTF8String:a1 + 48];
      if ([v10 length])
      {
        long long v11 = +[BKHIDEventProcessorRegistry sharedInstance];
        int v12 = [v11 eventProcessorOfClass:objc_opt_class()];

        if (v9) {
          [v12 setKeyboardLayout:v10 forSenderID:v9];
        }
        else {
          [v12 setKeyboardLayout:v10];
        }
      }
    }
    else
    {
      int v10 = 0;
    }

    *(_DWORD *)(a2 + 32) = 0;
  }
  else
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
}

void sub_1000A20C0(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = +[BKHIDEventProcessorRegistry sharedInstance];
    unsigned int v5 = [v4 eventProcessorOfClass:objc_opt_class()];

    *(unsigned char *)(a2 + 36) = [v5 keyboardWantsStandardTypeOverrideForSenderID:v3];
    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_1000A2184(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(unsigned __int8 *)(a1 + 40);
    unsigned int v5 = +[BKHIDEventProcessorRegistry sharedInstance];
    BOOL v6 = [v5 eventProcessorOfClass:objc_opt_class()];

    [v6 setCapsLockActive:v4 != 0 onSenderID:v3];
    *(_DWORD *)(a2 + 32) = 0;
  }
}

void sub_1000A2240(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(unsigned int *)(a1 + 40);
    unsigned int v5 = +[BKHIDEventProcessorRegistry sharedInstance];
    BOOL v6 = [v5 eventProcessorOfClass:objc_opt_class()];

    [v6 setStandardType:v4 forSenderID:v3];
    *(_DWORD *)(a2 + 32) = 0;
  }
}

void sub_1000A22F8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 48)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    double v4 = *(double *)(a1 + 40);
    unsigned int v5 = +[BKHIDEventProcessorRegistry sharedInstance];
    BOOL v6 = [v5 eventProcessorOfClass:objc_opt_class()];

    if (v3) {
      [v6 setCapsLockDelayOverride:v3 forSenderID:v4];
    }
    else {
      [v6 setCapsLockDelayOverride:v4];
    }

    *(_DWORD *)(a2 + 32) = 0;
  }
}

void sub_1000A23BC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(unsigned __int8 *)(a1 + 40);
    unsigned int v5 = +[BKHIDEventProcessorRegistry sharedInstance];
    BOOL v6 = [v5 eventProcessorOfClass:objc_opt_class()];

    BOOL v7 = v4 != 0;
    if (v3) {
      [v6 setRomanCapsLockSwitchModeActive:v7 forSenderID:v3];
    }
    else {
      [v6 setRomanCapsLockSwitchModeActive:v7];
    }

    *(_DWORD *)(a2 + 32) = 0;
  }
}

void sub_1000A2484(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = +[BKHIDEventProcessorRegistry sharedInstance];
    unsigned int v5 = [v4 eventProcessorOfClass:objc_opt_class()];

    if (v3) {
      unsigned __int8 v6 = [v5 isCapsLockLightOnForSenderID:v3];
    }
    else {
      unsigned __int8 v6 = [v5 isCapsLockLightOn];
    }
    *(unsigned char *)(a2 + 36) = v6;

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_1000A2554(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) == 0
    && (uint64_t v3 = a1[1], v3 >= 0x28)
    && v3 <= 0x428
    && ((v4 = a1[9], v4 <= 0x400) ? (BOOL v5 = (int)v3 - 40 >= v4) : (BOOL v5 = 0),
        (v6 = ((v4 + 3) & 0xFFFFFFFC) + 40, v5) ? (BOOL v7 = v3 == v6) : (BOOL v7 = 0),
        v7 && (BOOL v8 = a1 + 10, memchr(a1 + 10, 0, v3 - 40))))
  {
    if (*v8)
    {
      uint64_t v9 = +[NSString stringWithUTF8String:v8];
    }
    else
    {
      uint64_t v9 = 0;
    }
    int v10 = +[BKHIDEventProcessorRegistry sharedInstance];
    long long v11 = [v10 eventProcessorOfClass:objc_opt_class()];

    uint64_t v14 = 0;
    double v15 = 0.0;
    char v13 = 0;
    [v11 getStatus:&v14 presence:&v13 proximityInCentimeters:&v15 forDisplayUUID:v9];
    *(_DWORD *)(a2 + 36) = v14;
    *(unsigned char *)(a2 + 40) = v13;
    float v12 = v15;
    *(float *)(a2 + 44) = v12;

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 48;
  }
  else
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
}

uint64_t sub_1000A26B8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  char v4 = *(unsigned char *)(result + 32);
  long long v5 = *(_OWORD *)(result + 72);
  v7[0] = *(_OWORD *)(result + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  uint64_t v9 = sub_10002E11C;
  int v10 = &unk_1000F8B30;
  char v11 = v4;
  id result = sub_1000168CC(BKDisplayBrightnessEntitlement, (uint64_t)v7);
  if (result)
  {
    id result = ((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t sub_1000A27BC(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  char v4 = *(unsigned char *)(result + 32);
  long long v5 = *(_OWORD *)(result + 72);
  v7[0] = *(_OWORD *)(result + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  uint64_t v9 = sub_10002E0C4;
  int v10 = &unk_1000F8B30;
  char v11 = v4;
  id result = sub_1000168CC(BKDisplayBrightnessEntitlement, (uint64_t)v7);
  if (result)
  {
    id result = ((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

void sub_1000A28C0(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    int v3 = +[BKDisplayBrightnessController sharedInstance];
    *(unsigned char *)(a2 + 36) = [v3 displayBrightnessCurve];

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_1000A294C(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
    goto LABEL_7;
  }
  int v4 = a1[6];
  int v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    int v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  long long v6 = *(_OWORD *)(v3 + 9);
  v9[0] = *(_OWORD *)(v3 + 5);
  v9[1] = v6;
  if (sub_1000168CC(BKDisplayBrightnessEntitlement, (uint64_t)v9))
  {
    BOOL v7 = +[BKDisplayBrightnessUpdateTransactionManager sharedInstance];
    [v7 restoreSystemDisplayBrightness];

    int v8 = 0;
  }
  else
  {
    int v8 = 5;
  }
  *(_DWORD *)(a2 + 32) = v8;
}

_DWORD *sub_1000A2A10(_DWORD *result, uint64_t a2)
{
  int v2 = -304;
  if ((*result & 0x80000000) == 0)
  {
    if (result[1] == 24) {
      int v2 = 0;
    }
    else {
      int v2 = -304;
    }
  }
  *(_DWORD *)(a2 + 32) = v2;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_1000A2A40(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 40) || *(_DWORD *)(result + 44) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  int v4 = *(_DWORD *)(result + 32);
  char v5 = *(unsigned char *)(result + 36);
  long long v6 = *(_OWORD *)(result + 76);
  v8[0] = *(_OWORD *)(result + 60);
  v8[1] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  int v10 = sub_10002E060;
  char v11 = &unk_1000F6268;
  int v12 = v4;
  char v13 = v5;
  id result = sub_1000168CC(BKDisplayBrightnessEntitlement, (uint64_t)v8);
  if (result)
  {
    id result = ((uint64_t (*)(void *))v10)(v9);
    int v7 = 0;
  }
  else
  {
    int v7 = 5;
  }
  *(_DWORD *)(a2 + 32) = v7;
  return result;
}

void sub_1000A2B4C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 32);
    long long v9 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)long long buf = *(_OWORD *)(a1 + 56);
    long long v11 = v9;
    char v5 = +[BSAuditToken tokenFromAuditToken:](BSAuditToken, "tokenFromAuditToken:", buf, *(void *)buf, *(void *)&buf[8], v9);
    long long v6 = +[BSProcessHandle processHandleForAuditToken:v5];

    if ([v6 isValid])
    {
      +[BKDisplayBrightnessUpdateTransaction beginImplicitTransaction];
      int v7 = +[BKDisplayBrightnessUpdateTransactionManager sharedInstance];
      LODWORD(v8) = v4;
      [v7 setDisplayBrightness:0 permanently:v8];
      int v3 = 0;
    }
    else
    {
      int v7 = BKLogBacklight();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Ignoring implicit brightness transaction request because sender is invalid: %{public}@", buf, 0xCu);
      }
      int v3 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

uint64_t sub_1000A2CE8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 40)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112)
    {
      uint64_t v3 = a1 + 40;
      if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) < 0x20u)
      {
        uint64_t result = 4294966987;
      }
      else
      {
        uint64_t v5 = *(unsigned int *)(a1 + 28);
        long long v6 = *(_OWORD *)(v3 + 36);
        v7[0] = *(_OWORD *)(v3 + 20);
        v7[1] = v6;
        uint64_t result = sub_10002DDD0(v5, v7);
      }
    }
    else
    {
      uint64_t result = 4294966996;
    }
  }
  else
  {
    uint64_t result = 4294966992;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_1000A2D9C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        uint64_t v4 = *(unsigned int *)(a1 + 28);
        int v5 = *(unsigned __int8 *)(a1 + 48);
        int v6 = *(unsigned __int8 *)(a1 + 52);
        long long v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        sub_10002DD2C(v4, v5, v6, (uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        return;
      }
      int v3 = -309;
    }
    else
    {
      int v3 = -300;
    }
  }
  else
  {
    int v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

uint64_t sub_1000A2E60(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v4 = -304;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 24);
    result += 24;
    if (v3 || *(_DWORD *)(result + 4) <= 0x1Fu)
    {
      int v4 = -309;
    }
    else
    {
      long long v5 = *(_OWORD *)(result + 36);
      v6[0] = *(_OWORD *)(result + 20);
      v6[1] = v5;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      double v8 = sub_10002DCCC;
      long long v9 = &unk_1000F6860;
      uint64_t v10 = a2 + 36;
      uint64_t v11 = a2 + 40;
      uint64_t result = (uint64_t)sub_10000B130((uint64_t)"_BKHIDXXIsOrientationLockedWithOrientation", BKBackBoardClientEntitlement, (uint64_t)v6);
      if (result)
      {
        uint64_t result = ((uint64_t (*)(void *))v8)(v7);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 44;
        return result;
      }
      int v4 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

char *sub_1000A2F80(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 24)
  {
    int v4 = -304;
    goto LABEL_7;
  }
  int v3 = *((_DWORD *)result + 6);
  result += 24;
  if (v3 || *((_DWORD *)result + 1) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v4;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  long long v5 = *(_OWORD *)(result + 36);
  v7[0] = *(_OWORD *)(result + 20);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  long long v9 = sub_10002DC6C;
  uint64_t v10 = &unk_1000F6248;
  long long v11 = v7[0];
  long long v12 = v5;
  uint64_t result = (char *)sub_10000B130((uint64_t)"_BKHIDXXUnlockOrientation", BKBackBoardClientEntitlement, (uint64_t)v7);
  if (result)
  {
    uint64_t result = (char *)((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

char *sub_1000A3084(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 40)
  {
    int v3 = -304;
  }
  else if (*((_DWORD *)result + 10) || *((_DWORD *)result + 11) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    int v4 = *((_DWORD *)result + 8);
    char v5 = result[36];
    long long v6 = *(_OWORD *)(result + 76);
    v7[0] = *(_OWORD *)(result + 60);
    v7[1] = v6;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    long long v9 = sub_10002DBE8;
    uint64_t v10 = &unk_1000F6228;
    char v14 = v5;
    int v11 = v4;
    long long v12 = v7[0];
    long long v13 = v6;
    uint64_t result = (char *)sub_10000B130((uint64_t)"_BKHIDXXLockOrientation", BKBackBoardClientEntitlement, (uint64_t)v7);
    if (result)
    {
      uint64_t result = (char *)((uint64_t (*)(void *))v9)(v8);
      int v3 = 0;
    }
    else
    {
      int v3 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_1000A319C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0) {
    goto LABEL_16;
  }
  int v3 = result;
  uint64_t v4 = result[1];
  if (v4 < 0x2C) {
    goto LABEL_16;
  }
  if (v4 > 0x42C) {
    goto LABEL_16;
  }
  unsigned int v5 = result[9];
  if (v5 > 0x400) {
    goto LABEL_16;
  }
  unsigned int v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 44 < v5 || v4 != v6 + 44) {
    goto LABEL_16;
  }
  uint64_t v8 = 1064;
  if (result[1] < 0x428uLL) {
    uint64_t v8 = result[1];
  }
  uint64_t result = memchr(result + 10, 0, v8 - 40);
  if (result)
  {
    long long v9 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v9 && *((_DWORD *)v9 + 1) > 0x1Fu)
    {
      char v11 = *((unsigned char *)v3 + v6 + 40);
      long long v12 = *(_OWORD *)(v9 + 36);
      v13[0] = *(_OWORD *)(v9 + 20);
      v13[1] = v12;
      uint64_t result = (_DWORD *)sub_10002DAA0((uint64_t)(v3 + 10), v11, v13);
      *(_DWORD *)(a2 + 32) = result;
      return result;
    }
    int v10 = -309;
  }
  else
  {
LABEL_16:
    int v10 = -304;
  }
  *(_DWORD *)(a2 + 32) = v10;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_1000A32AC(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    int v3 = sub_10001C32C();
    *(_DWORD *)(a2 + 36) = sub_100094DAC((uint64_t)v3);

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_1000A3338(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    int v3 = +[BKUserEventTimer sharedInstance];
    *(unsigned char *)(a2 + 36) = [v3 isSafeToResetIdleTimer];

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

uint64_t sub_1000A33C4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v4 = -304;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 24);
    result += 24;
    if (v3 || *(_DWORD *)(result + 4) <= 0x1Fu)
    {
      int v4 = -309;
    }
    else
    {
      long long v5 = *(_OWORD *)(result + 36);
      v6[0] = *(_OWORD *)(result + 20);
      v6[1] = v5;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      uint64_t v8 = sub_10002D924;
      long long v9 = &unk_1000F7D08;
      uint64_t v10 = a2 + 36;
      uint64_t result = sub_1000168CC(BKBackBoardLastUserEventTimeEntitlement, (uint64_t)v6);
      if (result)
      {
        uint64_t result = ((uint64_t (*)(void *))v8)(v7);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 44;
        return result;
      }
      int v4 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_1000A34D8(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
    goto LABEL_7;
  }
  int v4 = a1[6];
  int v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    int v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  long long v6 = *(_OWORD *)(v3 + 9);
  v9[0] = *(_OWORD *)(v3 + 5);
  v9[1] = v6;
  if (sub_10000B130((uint64_t)"_BKHIDXXNotifyOnNextUserEvent", BKBackBoardClientEntitlement, (uint64_t)v9))
  {
    long long v7 = +[BKUserEventTimer sharedInstance];
    [v7 notifyOnNextUserEvent];

    int v8 = 0;
  }
  else
  {
    int v8 = 5;
  }
  *(_DWORD *)(a2 + 32) = v8;
}

_DWORD *sub_1000A35A4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 44)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (result[11] || result[12] <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  uint64_t v4 = *((void *)result + 4);
  int v5 = result[10];
  long long v6 = *((_OWORD *)result + 5);
  v8[0] = *((_OWORD *)result + 4);
  v8[1] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  uint64_t v10 = sub_10002D8C8;
  char v11 = &unk_1000F6920;
  uint64_t v12 = v4;
  int v13 = v5;
  uint64_t result = sub_10000B130((uint64_t)"_BKHIDXXResetUserEventTimer", BKBackBoardClientEntitlement, (uint64_t)v8);
  if (result)
  {
    uint64_t result = (_DWORD *)((uint64_t (*)(void *))v10)(v9);
    int v7 = 0;
  }
  else
  {
    int v7 = 5;
  }
  *(_DWORD *)(a2 + 32) = v7;
  return result;
}

void sub_1000A36B8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 60)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 56)))
    {
      if (!*(_DWORD *)(a1 + 60) && *(_DWORD *)(a1 + 64) > 0x1Fu)
      {
        int v6 = *(_DWORD *)(a1 + 52);
        uint64_t v7 = *(void *)(a1 + 28);
        long long v8 = *(_OWORD *)(a1 + 96);
        v9[0] = *(_OWORD *)(a1 + 80);
        v9[1] = v8;
        *(_DWORD *)(a2 + 32) = sub_10002D5F8(v6, v7, v4, (uint64_t)v9);
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

uint64_t sub_1000A3798(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 44)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 44) || *(_DWORD *)(result + 48) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  int v4 = *(_DWORD *)(result + 32);
  uint64_t v5 = *(void *)(result + 36);
  long long v6 = *(_OWORD *)(result + 80);
  v8[0] = *(_OWORD *)(result + 64);
  v8[1] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  uint64_t v10 = sub_10002D56C;
  char v11 = &unk_1000F6920;
  uint64_t v12 = v5;
  int v13 = v4;
  uint64_t result = sub_100005C1C((uint64_t)"_BKHIDXXDigitizerTouchSetOffset", BKDetachTouchesEntitlement, BKBackBoardClientEntitlement, (uint64_t)v8);
  if (result)
  {
    uint64_t result = ((uint64_t (*)(void *))v10)(v9);
    int v7 = 0;
  }
  else
  {
    int v7 = 5;
  }
  *(_DWORD *)(a2 + 32) = v7;
  return result;
}

void sub_1000A38BC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0) {
    goto LABEL_2;
  }
  int v3 = -304;
  if (*(_DWORD *)(a1 + 24) != 1) {
    goto LABEL_3;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 4);
  if (v6 < 0x48 || v6 > 0xC8) {
    goto LABEL_3;
  }
  if (*(unsigned char *)(a1 + 39) != 1) {
    goto LABEL_17;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 52);
  if (v7 > 0x20)
  {
LABEL_2:
    int v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_4;
  }
  int v3 = -304;
  if (v7 > (v6 - 72) >> 2 || v6 != 4 * v7 + 72) {
    goto LABEL_3;
  }
  long long v8 = (float *)(a1 + 4 * v7);
  int v9 = *(_DWORD *)(a1 + 40);
  if (v9 != *((_DWORD *)v8 + 17))
  {
LABEL_17:
    int v3 = -300;
    goto LABEL_3;
  }
  uint64_t v10 = ((v6 + 3) & 0x1FFFFFFFCLL) + a1;
  if (*(_DWORD *)v10 || *(_DWORD *)(v10 + 4) <= 0x1Fu)
  {
    int v3 = -309;
    goto LABEL_3;
  }
  int v11 = *((_DWORD *)v8 + 14);
  float v12 = v8[15];
  float v13 = v8[16];
  uint64_t v14 = *(void *)(a1 + 28);
  long long v15 = *(_OWORD *)(v10 + 36);
  v16[0] = *(_OWORD *)(v10 + 20);
  v16[1] = v15;
  *(_DWORD *)(a2 + 32) = sub_10002D2C0(a1 + 56, v7, v11, v14, v9, a2 + 36, (uint64_t)v16, v12, v13);
  mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(void *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  NDR_record_t v4 = NDR_record;
  if (!*(_DWORD *)(a2 + 32))
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return;
  }
LABEL_4:
  *(NDR_record_t *)(a2 + 24) = v4;
}

void sub_1000A3A10(_DWORD *a1, uint64_t a2)
{
  int v3 = -304;
  if ((*a1 & 0x80000000) == 0)
  {
    uint64_t v5 = a1[1];
    if (v5 >= 0x28 && v5 <= 0xA8)
    {
      uint64_t v6 = a1[8];
      if (v6 > 0x20
        || (v6 <= (v5 - 40) >> 2 ? (BOOL v7 = v5 == 4 * v6 + 40) : (BOOL v7 = 0), !v7))
      {
        int v3 = -304;
        goto LABEL_13;
      }
      long long v8 = (char *)a1 + ((v5 + 3) & 0x1FFFFFFFCLL);
      if (*(_DWORD *)v8 || *((_DWORD *)v8 + 1) < 0x20u)
      {
        int v3 = -309;
        goto LABEL_13;
      }
      uint64_t v9 = *(unsigned int *)((char *)a1 + (4 * v6) + 36);
      long long v10 = *(_OWORD *)(v8 + 36);
      long long v19 = *(_OWORD *)(v8 + 20);
      long long v20 = v10;
      uint64_t v11 = BSPIDForAuditToken();
      if (sub_100016874(BKTransferTouchesEntitlement, (uint64_t)&v19))
      {
        float v12 = BKHIDEventRoutingGetClientConnectionManager();
        float v13 = [v12 bundleIDForPID:v11, v19, v20];

        if ([v13 isEqual:@"com.apple.springboard"])
        {
          if (v6)
          {
            uint64_t v14 = +[BKHIDEventProcessorRegistry sharedInstance];
            long long v15 = [v14 eventProcessorOfClass:objc_opt_class()];

            [v15 transferTouchIdentifiers:a1 + 9 count:v6 toContextID:v9];
            int v3 = 0;
LABEL_25:

            goto LABEL_13;
          }
          int v16 = BKLogTouchEvents();
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            goto LABEL_23;
          }
          uint64_t v17 = BSProcessDescriptionForPID();
          *(_DWORD *)long long buf = 138543362;
          int v22 = v17;
          __int16 v18 = "TouchTransfer: %{public}@ requested transfer of no touches";
          goto LABEL_27;
        }
        int v16 = BKLogTouchEvents();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = BSProcessDescriptionForPID();
          *(_DWORD *)long long buf = 138543362;
          int v22 = v17;
          __int16 v18 = "TouchTransfer: %{public}@ is not an authorized client";
LABEL_27:
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, v18, buf, 0xCu);
        }
      }
      else
      {
        float v13 = BKLogTouchEvents();
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
LABEL_24:
          int v3 = 5;
          goto LABEL_25;
        }
        int v16 = BSProcessDescriptionForPID();
        *(_DWORD *)long long buf = 138543362;
        int v22 = v16;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "TouchTransfer: %{public}@ is not an authorized client", buf, 0xCu);
      }
LABEL_23:

      goto LABEL_24;
    }
  }
LABEL_13:
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

uint64_t sub_1000A3CF4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 32);
    long long v5 = *(_OWORD *)(result + 72);
    v6[0] = *(_OWORD *)(result + 56);
    v6[1] = v5;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    long long v8 = sub_10002D240;
    uint64_t v9 = &unk_1000F8820;
    int v10 = v4;
    uint64_t result = sub_100005C1C((uint64_t)"_BKHIDXXTouchStreamInvalidate", BKTouchStreamsEntitlement, BKBackBoardClientEntitlement, (uint64_t)v6);
    if (result)
    {
      uint64_t result = ((uint64_t (*)(void *))v8)(v7);
      int v3 = 0;
    }
    else
    {
      int v3 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_1000A3E08(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0) {
    goto LABEL_16;
  }
  int v3 = result;
  uint64_t v4 = result[1];
  if (v4 < 0x34) {
    goto LABEL_16;
  }
  if (v4 > 0x434) {
    goto LABEL_16;
  }
  unsigned int v5 = result[10];
  if (v5 > 0x400) {
    goto LABEL_16;
  }
  unsigned int v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 52 < v5 || v4 != v6 + 52) {
    goto LABEL_16;
  }
  uint64_t v8 = 1068;
  if (result[1] < 0x42CuLL) {
    uint64_t v8 = result[1];
  }
  uint64_t result = memchr(result + 11, 0, v8 - 44);
  if (!result)
  {
LABEL_16:
    int v10 = -304;
    goto LABEL_17;
  }
  uint64_t v9 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v9 || *((_DWORD *)v9 + 1) <= 0x1Fu)
  {
    int v10 = -309;
LABEL_17:
    *(_DWORD *)(a2 + 32) = v10;
    NDR_record_t v11 = NDR_record;
    goto LABEL_18;
  }
  int v12 = v3[8];
  int v13 = *(_DWORD *)((char *)v3 + v6 + 44);
  char v14 = *((unsigned char *)v3 + v6 + 48);
  long long v15 = *(_OWORD *)(v9 + 36);
  v16[0] = *(_OWORD *)(v9 + 20);
  v16[1] = v15;
  uint64_t result = (_DWORD *)sub_10002D094(v12, (uint64_t)(v3 + 11), v13, v14, a2 + 36, v16);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v11 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_18:
  *(NDR_record_t *)(a2 + 24) = v11;
  return result;
}

void sub_1000A3F40(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (unsigned int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        uint64_t v6 = *(void *)(a1 + 28);
        long long v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        sub_10002CCE4(v6, v4, (uint64_t)v8);
        *(_DWORD *)(a2 + 32) = 0;
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

uint64_t sub_1000A401C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 40) || *(_DWORD *)(result + 44) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  uint64_t v4 = *(void *)(result + 32);
  long long v5 = *(_OWORD *)(result + 76);
  v7[0] = *(_OWORD *)(result + 60);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  uint64_t v9 = sub_10002CC8C;
  int v10 = &unk_1000F7D08;
  uint64_t v11 = v4;
  uint64_t result = sub_100005C1C((uint64_t)"_BKHIDXXPlayHaptic", BKFastHapticPlayEntitlement, BKBackBoardClientEntitlement, (uint64_t)v7);
  if (result)
  {
    uint64_t result = ((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

void sub_1000A4138(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (unsigned int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        sub_10002CE84(*(void *)(a1 + 28), v4);
        *(_DWORD *)(a2 + 32) = 0;
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A4214(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        uint64_t v6 = *(void *)(a1 + 28);
        long long v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_10002CA1C(v6, v4, (uint64_t)v8);
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A42F0(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        uint64_t v6 = *(void *)(a1 + 28);
        long long v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_10002C7A8(v6, v4, v8);
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A43CC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        uint64_t v6 = *(void *)(a1 + 28);
        long long v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_10002C59C(v6, v4, (uint64_t)v8);
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A44A8(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
    goto LABEL_7;
  }
  int v4 = a1[6];
  int v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    int v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  long long v6 = *(_OWORD *)(v3 + 9);
  v10[0] = *(_OWORD *)(v3 + 5);
  v10[1] = v6;
  if (sub_1000168CC(BKBackBoardClientEntitlement, (uint64_t)v10))
  {
    long long v7 = +[BKHIDEventProcessorRegistry sharedInstance];
    uint64_t v8 = [v7 eventProcessorOfClass:objc_opt_class()];

    [v8 cancelTouchesOnAllDisplays];
    int v9 = 0;
  }
  else
  {
    int v9 = 5;
  }
  *(_DWORD *)(a2 + 32) = v9;
}

_DWORD *sub_1000A459C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0) {
    goto LABEL_16;
  }
  int v3 = result;
  uint64_t v4 = result[1];
  if (v4 < 0x2C) {
    goto LABEL_16;
  }
  if (v4 > 0x42C) {
    goto LABEL_16;
  }
  unsigned int v5 = result[9];
  if (v5 > 0x400) {
    goto LABEL_16;
  }
  unsigned int v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 44 < v5 || v4 != v6 + 44) {
    goto LABEL_16;
  }
  uint64_t v8 = 1064;
  if (result[1] < 0x428uLL) {
    uint64_t v8 = result[1];
  }
  uint64_t result = memchr(result + 10, 0, v8 - 40);
  if (result)
  {
    int v9 = (_DWORD *)((char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL));
    if (!*v9 && v9[1] > 0x1Fu)
    {
      uint64_t result = (_DWORD *)sub_10002BA18((unsigned char *)v3 + 40, *(_DWORD *)((char *)v3 + v6 + 40));
      *(_DWORD *)(a2 + 32) = result;
      return result;
    }
    int v10 = -309;
  }
  else
  {
LABEL_16:
    int v10 = -304;
  }
  *(_DWORD *)(a2 + 32) = v10;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_1000A46AC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 48)
  {
    int v8 = -304;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(unsigned __int16 *)(a1 + 40);
    uint64_t v5 = *(unsigned __int16 *)(a1 + 44);
    unsigned int v6 = +[BKHIDEventProcessorRegistry sharedInstance];
    long long v7 = [v6 eventProcessorOfClass:objc_opt_class()];
    [v7 cancelButtonForSenderID:v3 uagePage:v4 usage:v5];

    int v8 = 0;
  }
  *(_DWORD *)(a2 + 32) = v8;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A4768(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    uint64_t v3 = +[BKHIDEventProcessorRegistry sharedInstance];
    uint64_t v4 = [v3 eventProcessorOfClass:objc_opt_class()];
    *(unsigned char *)(a2 + 36) = [v4 isSmartCoverClosed];

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_1000A4820(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    uint64_t v3 = +[BKHIDEventProcessorRegistry sharedInstance];
    uint64_t v4 = [v3 eventProcessorOfClass:objc_opt_class()];
    *(_DWORD *)(a2 + 36) = [v4 ringerState];

    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

char *sub_1000A48D8(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*((_DWORD *)result + 9) || *((_DWORD *)result + 10) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  char v4 = result[32];
  long long v5 = *(_OWORD *)(result + 72);
  v7[0] = *(_OWORD *)(result + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  int v9 = sub_10002B684;
  int v10 = &unk_1000F8B30;
  char v11 = v4;
  uint64_t result = (char *)sub_10000B130((uint64_t)"_BKHIDXXSetObjectInProximityIgnoresTouches", BKBackBoardClientEntitlement, (uint64_t)v7);
  if (result)
  {
    uint64_t result = (char *)((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

void sub_1000A49E4(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    int v3 = +[BKHIDEventProcessorRegistry sharedInstance];
    char v4 = [v3 eventProcessorOfClass:objc_opt_class()];

    *(unsigned char *)(a2 + 36) = [v4 shouldIgnoreTouchesWhileObjectInProximity];
    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_1000A4AA0(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    int v3 = +[BKHIDEventProcessorRegistry sharedInstance];
    char v4 = [v3 eventProcessorOfClass:objc_opt_class()];

    *(unsigned char *)(a2 + 36) = [v4 isProximityDetectionActive];
    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_1000A4B5C(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    int v3 = +[BKHIDEventProcessorRegistry sharedInstance];
    char v4 = [v3 eventProcessorOfClass:objc_opt_class()];

    *(unsigned char *)(a2 + 36) = [v4 isObjectWithinProximity];
    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

void sub_1000A4C18(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
    goto LABEL_7;
  }
  int v4 = a1[6];
  int v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    int v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  long long v6 = *(_OWORD *)(v3 + 9);
  v9[0] = *(_OWORD *)(v3 + 5);
  v9[1] = v6;
  if (sub_10000B130((uint64_t)"_BKHIDXXProximityDidUnoccludeAfterScreenWake", BKBackBoardClientEntitlement, (uint64_t)v9))
  {
    long long v7 = +[BKHIDUISensorController sharedInstance];
    [v7 proximityDidUnoccludeAfterScreenWake];

    int v8 = 0;
  }
  else
  {
    int v8 = 5;
  }
  *(_DWORD *)(a2 + 32) = v8;
}

void sub_1000A4CE4(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
    goto LABEL_7;
  }
  int v4 = a1[6];
  int v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    int v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  long long v6 = *(_OWORD *)(v3 + 9);
  v9[0] = *(_OWORD *)(v3 + 5);
  v9[1] = v6;
  if (sub_10000B130((uint64_t)"_BKHIDXXResetProximityCalibration", BKBackBoardClientEntitlement, (uint64_t)v9))
  {
    long long v7 = +[BKHIDUISensorController sharedInstance];
    [v7 resetCalibration];

    int v8 = 0;
  }
  else
  {
    int v8 = 5;
  }
  *(_DWORD *)(a2 + 32) = v8;
}

_DWORD *sub_1000A4DB0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) == 0
    && (int v3 = result, v4 = result[1], v4 >= 0x28)
    && v4 <= 0x428
    && ((unsigned int v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (unsigned int v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = v4 == v7) : (v8 = 0),
        v8 && (uint64_t result = memchr(result + 10, 0, v4 - 40)) != 0))
  {
    int v10 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v10 && *((_DWORD *)v10 + 1) > 0x1Fu)
    {
      long long v11 = *(_OWORD *)(v10 + 36);
      v12[0] = *(_OWORD *)(v10 + 20);
      v12[1] = v11;
      uint64_t result = (_DWORD *)sub_10002B5B4((unsigned char *)v3 + 40, v12);
      *(_DWORD *)(a2 + 32) = result;
      return result;
    }
    int v9 = -309;
  }
  else
  {
    int v9 = -304;
  }
  *(_DWORD *)(a2 + 32) = v9;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_1000A4E9C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  float v4 = *(float *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v7 = *(_OWORD *)(a1 + 56);
  long long v8 = v5;
  if ((sub_100005C1C((uint64_t)"_BKHIDXXRequestEstimatedProximityEvents", BKEstimatedProximityDetectionEntitlement, BKBackBoardClientEntitlement, (uint64_t)&v7) & 1) == 0)
  {
    int v3 = 5;
    goto LABEL_7;
  }
  BOOL v6 = +[BKHIDUISensorController sharedInstance];
  long long v9 = v7;
  long long v10 = v8;
  *(_DWORD *)(a2 + 36) = [v6 requestEstimatedProximityEventsWithTimeout:BSVersionedPIDForAuditToken() versionedPID:v4];

  *(_DWORD *)(a2 + 32) = 0;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  *(_DWORD *)(a2 + 4) = 40;
}

uint64_t sub_1000A4FBC(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  char v4 = *(unsigned char *)(result + 32);
  long long v5 = *(_OWORD *)(result + 72);
  v7[0] = *(_OWORD *)(result + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  long long v9 = sub_10002DA48;
  long long v10 = &unk_1000F8B30;
  char v11 = v4;
  uint64_t result = sub_1000168CC(BKBackBoardSetDeviceOrientationEntitlement, (uint64_t)v7);
  if (result)
  {
    uint64_t result = ((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

char *sub_1000A50C0(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*((_DWORD *)result + 9) || *((_DWORD *)result + 10) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  char v4 = result[32];
  long long v5 = *(_OWORD *)(result + 72);
  v7[0] = *(_OWORD *)(result + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  long long v9 = sub_10002D998;
  long long v10 = &unk_1000F8B30;
  char v11 = v4;
  uint64_t result = (char *)sub_10000B130((uint64_t)"_BKHIDXXSetDeviceInterfaceOrientation", BKBackBoardClientEntitlement, (uint64_t)v7);
  if (result)
  {
    uint64_t result = (char *)((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

char *sub_1000A51CC(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*((_DWORD *)result + 9) || *((_DWORD *)result + 10) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  char v4 = result[32];
  long long v5 = *(_OWORD *)(result + 72);
  v7[0] = *(_OWORD *)(result + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  long long v9 = sub_10002B424;
  long long v10 = &unk_1000F8B30;
  char v11 = v4;
  uint64_t result = (char *)sub_10000B130((uint64_t)"_BKHIDXXAmbientLightSensorEnableAutoBrightness", BKBackBoardClientEntitlement, (uint64_t)v7);
  if (result)
  {
    uint64_t result = (char *)((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

void sub_1000A52D8(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
    goto LABEL_7;
  }
  int v4 = a1[6];
  int v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    int v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  long long v6 = *(_OWORD *)(v3 + 9);
  v11[0] = *(_OWORD *)(v3 + 5);
  v11[1] = v6;
  if (sub_10000B130((uint64_t)"_BKHIDXXAmbientLightSensorDisableAutoBrightness", BKBackBoardClientEntitlement, (uint64_t)v11))
  {
    long long v7 = BKLogBacklight();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BKAmbientLightSensorDisableAutoBrightness", buf, 2u);
    }

    long long v8 = +[BKDisplayBrightnessController sharedInstance];
    CFStringRef v12 = @"DisplayAutoBrightnessActive";
    *(void *)long long buf = &__kCFBooleanFalse;
    long long v9 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v12 count:1];
    [v8 setProperty:v9 forKey:@"DisplayAutoBrightnessStatus"];

    int v10 = 0;
  }
  else
  {
    int v10 = 5;
  }
  *(_DWORD *)(a2 + 32) = v10;
}

uint64_t sub_1000A5468(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v4 = -304;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 24);
    result += 24;
    if (v3 || *(_DWORD *)(result + 4) <= 0x1Fu)
    {
      int v4 = -309;
    }
    else
    {
      long long v5 = *(_OWORD *)(result + 36);
      v6[0] = *(_OWORD *)(result + 20);
      v6[1] = v5;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      long long v8 = sub_10002B3C8;
      long long v9 = &unk_1000F7D08;
      uint64_t v10 = a2 + 36;
      uint64_t result = (uint64_t)sub_10000B130((uint64_t)"_BKHIDXXAmbientLightSensorExists", BKBackBoardClientEntitlement, (uint64_t)v6);
      if (result)
      {
        uint64_t result = ((uint64_t (*)(void *))v8)(v7);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 40;
        return result;
      }
      int v4 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_1000A5584(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        uint64_t v6 = *(void *)(a1 + 28);
        long long v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_10002B0D0(v6, v4, v8);
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A5660(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    int v3 = [(id)qword_100122E78 propertyForKey:@"DisplayBackLightArchitecture"];
    uint64_t v4 = objc_opt_class();
    id v5 = v3;
    if (v4)
    {
      if (objc_opt_isKindOfClass()) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    id v7 = v6;

    unsigned __int8 v8 = [v7 unsignedCharValue];
    *(unsigned char *)(a2 + 36) = v8;
    *(_DWORD *)(a2 + 32) = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
  }
}

uint64_t sub_1000A574C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v4 = -304;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 24);
    result += 24;
    if (v3 || *(_DWORD *)(result + 4) <= 0x1Fu)
    {
      int v4 = -309;
    }
    else
    {
      long long v5 = *(_OWORD *)(result + 36);
      v6[0] = *(_OWORD *)(result + 20);
      v6[1] = v5;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      unsigned __int8 v8 = sub_10002B36C;
      long long v9 = &unk_1000F7D08;
      uint64_t v10 = a2 + 36;
      uint64_t result = sub_1000168CC(BKDisplayBrightnessEntitlement, (uint64_t)v6);
      if (result)
      {
        uint64_t result = ((uint64_t (*)(void *))v8)(v7);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 40;
        return result;
      }
      int v4 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_1000A5860(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v4 = -304;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 24);
    result += 24;
    if (v3 || *(_DWORD *)(result + 4) <= 0x1Fu)
    {
      int v4 = -309;
    }
    else
    {
      long long v5 = *(_OWORD *)(result + 36);
      v6[0] = *(_OWORD *)(result + 20);
      v6[1] = v5;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      unsigned __int8 v8 = sub_10002B310;
      long long v9 = &unk_1000F7D08;
      uint64_t v10 = a2 + 36;
      uint64_t result = sub_1000168CC(BKDisplayBrightnessEntitlement, (uint64_t)v6);
      if (result)
      {
        uint64_t result = ((uint64_t (*)(void *))v8)(v7);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 40;
        return result;
      }
      int v4 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

char *sub_1000A5974(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 52)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*((_DWORD *)result + 13) || *((_DWORD *)result + 14) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  char v4 = result[40];
  char v5 = result[44];
  char v6 = result[48];
  uint64_t v7 = *((void *)result + 4);
  long long v8 = *(_OWORD *)(result + 88);
  v10[0] = *(_OWORD *)(result + 72);
  v10[1] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  CFStringRef v12 = sub_10002B0A0;
  int v13 = &unk_1000F6160;
  uint64_t v14 = v7;
  char v15 = v4;
  char v16 = v5;
  char v17 = v6;
  uint64_t result = (char *)sub_10000B130((uint64_t)"_BKHIDXXNotifySetBacklightFactorWithFadeDurationAsync", BKBackBoardClientEntitlement, (uint64_t)v10);
  if (result)
  {
    uint64_t result = (char *)((uint64_t (*)(void *))v12)(v11);
    int v9 = 0;
  }
  else
  {
    int v9 = 5;
  }
  *(_DWORD *)(a2 + 32) = v9;
  return result;
}

char *sub_1000A5A9C(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 48)
  {
    int v3 = -304;
  }
  else if (*((_DWORD *)result + 12) || *((_DWORD *)result + 13) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    char v4 = result[40];
    char v5 = result[44];
    uint64_t v6 = *((void *)result + 4);
    long long v7 = *(_OWORD *)(result + 84);
    v8[0] = *(_OWORD *)(result + 68);
    v8[1] = v7;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    uint64_t v10 = sub_10002B07C;
    char v11 = &unk_1000F6840;
    uint64_t v12 = v6;
    char v13 = v4;
    char v14 = v5;
    uint64_t result = (char *)sub_10000B130((uint64_t)"_BKHIDXXSetBacklightFactorWithFadeDuration", BKBackBoardClientEntitlement, (uint64_t)v8);
    if (result)
    {
      uint64_t result = (char *)((uint64_t (*)(void *))v10)(v9);
      int v3 = 0;
    }
    else
    {
      int v3 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

char *sub_1000A5BB8(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*((_DWORD *)result + 9) || *((_DWORD *)result + 10) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  int v4 = *((_DWORD *)result + 8);
  long long v5 = *(_OWORD *)(result + 72);
  v7[0] = *(_OWORD *)(result + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  int v9 = sub_10002AF74;
  uint64_t v10 = &unk_1000F8820;
  int v11 = v4;
  uint64_t result = (char *)sub_10000B130((uint64_t)"_BKHIDXXSetBacklightFactorPending", BKBackBoardClientEntitlement, (uint64_t)v7);
  if (result)
  {
    uint64_t result = (char *)((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t sub_1000A5CC4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v4 = -304;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 24);
    result += 24;
    if (v3 || *(_DWORD *)(result + 4) <= 0x1Fu)
    {
      int v4 = -309;
    }
    else
    {
      long long v5 = *(_OWORD *)(result + 36);
      v6[0] = *(_OWORD *)(result + 20);
      v6[1] = v5;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      long long v8 = sub_10002AF1C;
      int v9 = &unk_1000F7D08;
      uint64_t v10 = a2 + 36;
      uint64_t result = (uint64_t)sub_10000B130((uint64_t)"_BKHIDXXGetBacklightFactor", BKBackBoardClientEntitlement, (uint64_t)v6);
      if (result)
      {
        uint64_t result = ((uint64_t (*)(void *))v8)(v7);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 40;
        return result;
      }
      int v4 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_1000A5DE0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 6000081) >= 0xFFFFFFAF) {
    return (uint64_t)*(&off_1000F9390 + 5 * (v1 - 6000000) + 5);
  }
  else {
    return 0;
  }
}

void sub_1000A5E20(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        uint64_t v6 = *(void *)(a1 + 28);
        long long v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_1000401F0(v6, v4, (uint64_t)v8);
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A5EFC(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
    goto LABEL_7;
  }
  int v4 = a1[6];
  int v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    int v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return;
  }
  *(_DWORD *)(a2 + 36) = 16777472;
  *(_DWORD *)(a2 + 52) = 0;
  uint64_t v6 = +[BKBootUIPresenter sharedInstance];
  long long v7 = +[BKDisplayRenderOverlayManager sharedInstance];
  uint64_t v8 = BSPIDForAuditToken();
  unsigned int v9 = 0;
  if (([v7 isShowingNonBootUIOverlays] & 1) == 0)
  {
    uint64_t v10 = +[NSString stringWithFormat:@"pid %d", v8];
    unsigned int v9 = [v6 sustainOverlayForReason:v10];
  }
  int v11 = +[NSMutableSet set];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v12 = [v7 activeOverlays];
  id v13 = [v12 countByEnumeratingWithState:&v27 objects:v33 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v28 != v15) {
          objc_enumerationMutation(v12);
        }
        char v17 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        [v17 level];
        if (v18 > 0.0)
        {
          long long v19 = [v17 descriptor];
          [v11 addObject:v19];
        }
      }
      id v14 = [v12 countByEnumeratingWithState:&v27 objects:v33 count:16];
    }
    while (v14);
  }

  id v20 = [v11 count];
  BOOL v21 = sub_10005F9DC();
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if (!v20)
  {
    if (v22)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "GetRenderOverlayDismissActions: no active overlays", buf, 2u);
    }

    if (!v9) {
      goto LABEL_28;
    }
LABEL_27:
    [v6 unsustainOverlayForReason:@"failed to encode dismiss actions"];
LABEL_28:

    int v5 = 5;
    goto LABEL_7;
  }
  if (v22)
  {
    __int16 v23 = +[BSDescriptionStream descriptionForRootObject:v11];
    *(_DWORD *)long long buf = 138543362;
    long long v32 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "GetRenderOverlayDismissActions: returning %{public}@", buf, 0xCu);
  }
  int v24 = [v11 bs_secureEncoded];
  if (!v24)
  {
    __int16 v26 = sub_10005F9DC();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "GetRenderOverlayDismissActions failed to encode actions", buf, 2u);
    }

    if ((v9 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  long long v25 = v24;
  *(void *)(a2 + 28) = [v24 bs_bytesForMIG];
  *(_DWORD *)(a2 + 52) = [v25 bs_lengthForMIG];

  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
}

void sub_1000A62A8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        uint64_t v6 = *(void *)(a1 + 28);
        long long v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_100040BC4(v6, v4, v8);
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        goto LABEL_11;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A6384(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (unsigned int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 52)))
    {
      if (!*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60) > 0x1Fu)
      {
        uint64_t v6 = *(void *)(a1 + 28);
        long long v7 = *(_OWORD *)(a1 + 92);
        v8[0] = *(_OWORD *)(a1 + 76);
        v8[1] = v7;
        *(_DWORD *)(a2 + 32) = sub_1000409EC(v6, v4, (uint64_t)v8);
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        goto LABEL_11;
      }
      int v5 = -309;
    }
    else
    {
      int v5 = -300;
    }
  }
  else
  {
    int v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A6460(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 76)
  {
    if (*(unsigned char *)(a1 + 39) == 1
      && *(unsigned char *)(a1 + 55) == 1
      && (unsigned int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 68))
      && (unsigned int v5 = *(_DWORD *)(a1 + 56), v5 == *(_DWORD *)(a1 + 72)))
    {
      if (!*(_DWORD *)(a1 + 76) && *(_DWORD *)(a1 + 80) > 0x1Fu)
      {
        uint64_t v7 = *(void *)(a1 + 28);
        uint64_t v8 = *(void *)(a1 + 44);
        long long v9 = *(_OWORD *)(a1 + 112);
        v10[0] = *(_OWORD *)(a1 + 96);
        v10[1] = v9;
        *(_DWORD *)(a2 + 32) = sub_1000408F8(v7, v4, v8, v5, (uint64_t)v10);
        mig_deallocate(*(void *)(a1 + 44), *(unsigned int *)(a1 + 56));
        *(void *)(a1 + 44) = 0;
        *(_DWORD *)(a1 + 56) = 0;
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        goto LABEL_13;
      }
      int v6 = -309;
    }
    else
    {
      int v6 = -300;
    }
  }
  else
  {
    int v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

void sub_1000A6570(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 76)
  {
    if (*(unsigned char *)(a1 + 39) == 1
      && *(unsigned char *)(a1 + 55) == 1
      && (unsigned int v4 = *(_DWORD *)(a1 + 40), v4 == *(_DWORD *)(a1 + 68))
      && (unsigned int v5 = *(_DWORD *)(a1 + 56), v5 == *(_DWORD *)(a1 + 72)))
    {
      if (!*(_DWORD *)(a1 + 76) && *(_DWORD *)(a1 + 80) > 0x1Fu)
      {
        uint64_t v7 = *(void *)(a1 + 28);
        uint64_t v8 = *(void *)(a1 + 44);
        long long v9 = *(_OWORD *)(a1 + 112);
        v10[0] = *(_OWORD *)(a1 + 96);
        v10[1] = v9;
        *(_DWORD *)(a2 + 32) = sub_10004047C(v7, v4, v8, v5, (uint64_t)v10);
        mig_deallocate(*(void *)(a1 + 44), *(unsigned int *)(a1 + 56));
        *(void *)(a1 + 44) = 0;
        *(_DWORD *)(a1 + 56) = 0;
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        goto LABEL_13;
      }
      int v6 = -309;
    }
    else
    {
      int v6 = -300;
    }
  }
  else
  {
    int v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

_DWORD *sub_1000A6680(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0
    || (int v3 = result, v4 = result[1], v4 < 0x28)
    || v4 > 0x428
    || ((unsigned int v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (unsigned int v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = v4 == v7) : (v8 = 0),
        !v8 || (uint64_t result = memchr(result + 10, 0, v4 - 40)) == 0))
  {
    int v9 = -304;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v9;
    goto LABEL_13;
  }
  uint64_t v10 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v10 || *((_DWORD *)v10 + 1) <= 0x1Fu)
  {
    int v9 = -309;
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + 36) = 16777472;
  long long v11 = *(_OWORD *)(v10 + 36);
  v12[0] = *(_OWORD *)(v10 + 20);
  v12[1] = v11;
  uint64_t result = (_DWORD *)sub_100040AB0((unsigned char *)v3 + 40, (void *)(a2 + 28), (_DWORD *)(a2 + 52), (uint64_t)v12);
  if (!result)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

char *sub_1000A67B8(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 36)
  {
    int v3 = -304;
  }
  else if (*((_DWORD *)result + 9) || *((_DWORD *)result + 10) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    char v4 = result[32];
    long long v5 = *(_OWORD *)(result + 72);
    v6[0] = *(_OWORD *)(result + 56);
    v6[1] = v5;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    BOOL v8 = sub_100040CF8;
    int v9 = &unk_1000F8B30;
    char v10 = v4;
    uint64_t result = (char *)sub_10000B130((uint64_t)"_BKDisplayXXSetSecureMode", BKBackBoardClientEntitlement, (uint64_t)v6);
    if (result)
    {
      uint64_t result = (char *)((uint64_t (*)(void *))v8)(v7);
      int v3 = 0;
    }
    else
    {
      int v3 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

char *sub_1000A68C0(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*((_DWORD *)result + 9) || *((_DWORD *)result + 10) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  char v4 = result[32];
  long long v5 = *(_OWORD *)(result + 72);
  v7[0] = *(_OWORD *)(result + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  int v9 = sub_10003FE30;
  char v10 = &unk_1000F8B30;
  char v11 = v4;
  uint64_t result = (char *)sub_10000B130((uint64_t)"_BKDisplayXXUpdateMirroredDisplayOrientationWithInterfaceOrientation", BKBackBoardClientEntitlement, (uint64_t)v7);
  if (result)
  {
    uint64_t result = (char *)((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

char *sub_1000A69CC(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*((_DWORD *)result + 9) || *((_DWORD *)result + 10) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  char v4 = result[32];
  long long v5 = *(_OWORD *)(result + 72);
  v7[0] = *(_OWORD *)(result + 56);
  v7[1] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  int v9 = sub_10003FDCC;
  char v10 = &unk_1000F8B30;
  char v11 = v4;
  uint64_t result = (char *)sub_10000B130((uint64_t)"_BKDisplayXXUpdateTetheredDisplayOrientationIfNecessaryWithInterfaceOrientation", BKBackBoardClientEntitlement, (uint64_t)v7);
  if (result)
  {
    uint64_t result = (char *)((uint64_t (*)(void *))v9)(v8);
    int v6 = 0;
  }
  else
  {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

char *sub_1000A6AD8(char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *((_DWORD *)result + 1) != 36)
  {
    int v3 = -304;
  }
  else if (*((_DWORD *)result + 9) || *((_DWORD *)result + 10) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    char v4 = result[32];
    long long v5 = *(_OWORD *)(result + 72);
    v6[0] = *(_OWORD *)(result + 56);
    v6[1] = v5;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    BOOL v8 = sub_10003FD6C;
    int v9 = &unk_1000F8B30;
    char v10 = v4;
    uint64_t result = (char *)sub_10000B130((uint64_t)"_BKDisplayXXSetTetheredOrientationNotificationsDisabled", BKBackBoardClientEntitlement, (uint64_t)v6);
    if (result)
    {
      uint64_t result = (char *)((uint64_t (*)(void *))v8)(v7);
      int v3 = 0;
    }
    else
    {
      int v3 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_1000A6BE0(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v4 = -304;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 24);
    result += 24;
    if (v3 || *(_DWORD *)(result + 4) <= 0x1Fu)
    {
      int v4 = -309;
    }
    else
    {
      long long v5 = *(_OWORD *)(result + 36);
      v6[0] = *(_OWORD *)(result + 20);
      v6[1] = v5;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      BOOL v8 = sub_10003FCE0;
      int v9 = &unk_1000F7D08;
      uint64_t v10 = a2 + 36;
      uint64_t result = (uint64_t)sub_10000B130((uint64_t)"_BKDisplayXXTetherPrefsNeedImmediateUpdate", BKBackBoardClientEntitlement, (uint64_t)v6);
      if (result)
      {
        uint64_t result = ((uint64_t (*)(void *))v8)(v7);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 40;
        return result;
      }
      int v4 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_1000A6CFC(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v4 = -304;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 24);
    result += 24;
    if (v3 || *(_DWORD *)(result + 4) <= 0x1Fu)
    {
      int v4 = -309;
    }
    else
    {
      long long v5 = *(_OWORD *)(result + 36);
      v6[0] = *(_OWORD *)(result + 20);
      v6[1] = v5;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      BOOL v8 = sub_10003FC84;
      int v9 = &unk_1000F7D08;
      uint64_t v10 = a2 + 36;
      uint64_t result = (uint64_t)sub_10000B130((uint64_t)"_BKDisplayXXDisplayIsTethered", BKBackBoardClientEntitlement, (uint64_t)v6);
      if (result)
      {
        uint64_t result = ((uint64_t (*)(void *))v8)(v7);
        *(_DWORD *)(a2 + 32) = 0;
        *(NDR_record_t *)(a2 + 24) = NDR_record;
        *(_DWORD *)(a2 + 4) = 40;
        return result;
      }
      int v4 = 5;
    }
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_1000A6E18(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) == 0
    && (int v3 = result, v4 = result[1], v4 >= 0x28)
    && v4 <= 0x428
    && ((unsigned int v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (unsigned int v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = v4 == v7) : (v8 = 0),
        v8 && (uint64_t result = memchr(result + 10, 0, v4 - 40)) != 0))
  {
    uint64_t v10 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v10 && *((_DWORD *)v10 + 1) > 0x1Fu)
    {
      long long v11 = *(_OWORD *)(v10 + 36);
      v12[0] = *(_OWORD *)(v10 + 20);
      v12[1] = v11;
      uint64_t result = (_DWORD *)sub_10003FA70((uint64_t)(v3 + 10), v12);
      *(_DWORD *)(a2 + 32) = result;
      return result;
    }
    int v9 = -309;
  }
  else
  {
    int v9 = -304;
  }
  *(_DWORD *)(a2 + 32) = v9;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_1000A6F04(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0) {
    goto LABEL_16;
  }
  int v3 = result;
  uint64_t v4 = result[1];
  if (v4 < 0x2C) {
    goto LABEL_16;
  }
  if (v4 > 0x42C) {
    goto LABEL_16;
  }
  unsigned int v5 = result[9];
  if (v5 > 0x400) {
    goto LABEL_16;
  }
  unsigned int v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 44 < v5 || v4 != v6 + 44) {
    goto LABEL_16;
  }
  uint64_t v8 = 1064;
  if (result[1] < 0x428uLL) {
    uint64_t v8 = result[1];
  }
  uint64_t result = memchr(result + 10, 0, v8 - 40);
  if (result)
  {
    int v9 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v9 && *((_DWORD *)v9 + 1) > 0x1Fu)
    {
      char v11 = *((unsigned char *)v3 + v6 + 40);
      long long v12 = *(_OWORD *)(v9 + 36);
      v13[0] = *(_OWORD *)(v9 + 20);
      v13[1] = v12;
      uint64_t result = (_DWORD *)sub_10003F7A4((uint64_t)(v3 + 10), v11, v13);
      *(_DWORD *)(a2 + 32) = result;
      return result;
    }
    int v10 = -309;
  }
  else
  {
LABEL_16:
    int v10 = -304;
  }
  *(_DWORD *)(a2 + 32) = v10;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

void sub_1000A7014(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    int v3 = *(unsigned __int8 *)(a1 + 32);
    uint64_t v4 = sub_1000668EC();
    unsigned int v5 = (void *)v4;
    if (v4)
    {
      unsigned int v6 = *(NSObject **)(v4 + 8);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      void v7[2] = sub_1000669EC;
      v7[3] = &unk_1000F8A48;
      void v7[4] = v5;
      BOOL v8 = v3 != 0;
      dispatch_async(v6, v7);
    }

    *(_DWORD *)(a2 + 32) = 0;
  }
}

uint64_t sub_1000A70F8(_DWORD *a1, uint64_t a2)
{
  int v4 = *a1;
  uint64_t result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v6 = a1[1];
    if (v6 >= 0x2C && v6 <= 0x42C)
    {
      unsigned int v7 = a1[9];
      if (v7 <= 0x400)
      {
        unsigned int v8 = (v7 + 3) & 0xFFFFFFFC;
        if ((int)v6 - 44 >= v7 && v6 == v8 + 44)
        {
          uint64_t v10 = 1064;
          if (a1[1] < 0x428uLL) {
            uint64_t v10 = a1[1];
          }
          if (memchr(a1 + 10, 0, v10 - 40))
          {
            char v11 = (char *)a1 + ((v6 + 3) & 0x1FFFFFFFCLL);
            if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) < 0x20u)
            {
              uint64_t result = 4294966987;
            }
            else
            {
              char v12 = *((unsigned char *)a1 + v8 + 40);
              long long v13 = *(_OWORD *)(v11 + 36);
              v14[0] = *(_OWORD *)(v11 + 20);
              v14[1] = v13;
              uint64_t result = sub_10003F274((uint64_t)(a1 + 10), v12, (uint64_t)v14);
            }
          }
          else
          {
            uint64_t result = 4294966992;
          }
        }
      }
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_1000A7208(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0
    || (int v3 = result, v4 = result[1], v4 < 0x28)
    || v4 > 0x428
    || ((unsigned int v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (unsigned int v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = v4 == v7) : (v8 = 0),
        !v8 || (uint64_t result = memchr(result + 10, 0, v4 - 40)) == 0))
  {
    int v9 = -304;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v9;
    NDR_record_t v10 = NDR_record;
    goto LABEL_13;
  }
  char v11 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) <= 0x1Fu)
  {
    int v9 = -309;
    goto LABEL_12;
  }
  long long v12 = *(_OWORD *)(v11 + 36);
  v13[0] = *(_OWORD *)(v11 + 20);
  v13[1] = v12;
  uint64_t result = (_DWORD *)sub_10003F11C((uint64_t)(v3 + 10), a2 + 36, (uint64_t)v13);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v10 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_1000A7314(int *a1, uint64_t a2)
{
  int v4 = *a1;
  uint64_t result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v6 = a1[1];
    if (v6 >= 0x30 && v6 <= 0x430)
    {
      unsigned int v7 = a1[9];
      if (v7 <= 0x400)
      {
        unsigned int v8 = (v7 + 3) & 0xFFFFFFFC;
        if ((int)v6 - 48 >= v7 && v6 == v8 + 48)
        {
          uint64_t v10 = 1064;
          if (a1[1] < 0x428uLL) {
            uint64_t v10 = a1[1];
          }
          if (memchr(a1 + 10, 0, v10 - 40))
          {
            char v11 = (char *)a1 + ((v6 + 3) & 0x1FFFFFFFCLL);
            if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) < 0x20u)
            {
              uint64_t result = 4294966987;
            }
            else
            {
              int v12 = *(int *)((char *)a1 + v8 + 40);
              int v13 = *(int *)((char *)a1 + v8 + 44);
              long long v14 = *(_OWORD *)(v11 + 36);
              v15[0] = *(_OWORD *)(v11 + 20);
              v15[1] = v14;
              uint64_t result = sub_10003F01C((uint64_t)(a1 + 10), v12, v13, (uint64_t)v15);
            }
          }
          else
          {
            uint64_t result = 4294966992;
          }
        }
      }
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_1000A7428(_DWORD *a1, uint64_t a2)
{
  int v4 = *a1;
  uint64_t result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v6 = a1[1];
    if (v6 >= 0x2C && v6 <= 0x42C)
    {
      unsigned int v7 = a1[9];
      if (v7 <= 0x400)
      {
        unsigned int v8 = (v7 + 3) & 0xFFFFFFFC;
        if ((int)v6 - 44 >= v7 && v6 == v8 + 44)
        {
          uint64_t v10 = 1064;
          if (a1[1] < 0x428uLL) {
            uint64_t v10 = a1[1];
          }
          if (memchr(a1 + 10, 0, v10 - 40))
          {
            char v11 = (char *)a1 + ((v6 + 3) & 0x1FFFFFFFCLL);
            if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) < 0x20u)
            {
              uint64_t result = 4294966987;
            }
            else
            {
              char v12 = *((unsigned char *)a1 + v8 + 40);
              long long v13 = *(_OWORD *)(v11 + 36);
              v14[0] = *(_OWORD *)(v11 + 20);
              v14[1] = v13;
              uint64_t result = sub_10003EE44((uint64_t)(a1 + 10), v12, (uint64_t)v14);
            }
          }
          else
          {
            uint64_t result = 4294966992;
          }
        }
      }
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_1000A7538(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0
    || (int v3 = result, v4 = result[1], v4 < 0x28)
    || v4 > 0x428
    || ((unsigned int v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (unsigned int v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = v4 == v7) : (v8 = 0),
        !v8 || (uint64_t result = memchr(result + 10, 0, v4 - 40)) == 0))
  {
    int v9 = -304;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v9;
    NDR_record_t v10 = NDR_record;
    goto LABEL_13;
  }
  char v11 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) <= 0x1Fu)
  {
    int v9 = -309;
    goto LABEL_12;
  }
  long long v12 = *(_OWORD *)(v11 + 36);
  v13[0] = *(_OWORD *)(v11 + 20);
  v13[1] = v12;
  uint64_t result = (_DWORD *)sub_10003ECEC((uint64_t)(v3 + 10), a2 + 36, (uint64_t)v13);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v10 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = v10;
  return result;
}

void sub_1000A7644(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0) {
    goto LABEL_2;
  }
  int v3 = -304;
  if (*(_DWORD *)(a1 + 24) != 1) {
    goto LABEL_3;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 4);
  if (v5 < 0x40 || v5 > 0x440) {
    goto LABEL_3;
  }
  if (*(unsigned char *)(a1 + 39) != 1) {
    goto LABEL_19;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 56);
  if (v6 > 0x400)
  {
LABEL_2:
    int v3 = -304;
    goto LABEL_3;
  }
  int v3 = -304;
  if ((int)v5 - 64 < v6) {
    goto LABEL_3;
  }
  unsigned int v7 = (v6 + 3) & 0xFFFFFFFC;
  if (v5 != v7 + 64) {
    goto LABEL_3;
  }
  int v8 = *(_DWORD *)(a1 + 40);
  if (v8 != *(_DWORD *)(a1 + v7 + 60))
  {
LABEL_19:
    int v3 = -300;
    goto LABEL_3;
  }
  uint64_t v9 = 1084;
  if (*(unsigned int *)(a1 + 4) < 0x43CuLL) {
    uint64_t v9 = *(unsigned int *)(a1 + 4);
  }
  if (!memchr((void *)(a1 + 60), 0, v9 - 60)) {
    goto LABEL_2;
  }
  uint64_t v10 = ((v5 + 3) & 0x1FFFFFFFCLL) + a1;
  if (!*(_DWORD *)v10 && *(_DWORD *)(v10 + 4) > 0x1Fu)
  {
    uint64_t v11 = *(void *)(a1 + 28);
    long long v12 = *(_OWORD *)(v10 + 36);
    v13[0] = *(_OWORD *)(v10 + 20);
    v13[1] = v12;
    *(_DWORD *)(a2 + 32) = sub_10003E954(a1 + 60, v11, v8, (uint64_t)v13);
    mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
    *(void *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    return;
  }
  int v3 = -309;
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
}

_DWORD *sub_1000A77A4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0
    || (int v3 = result, v4 = result[1], v4 < 0x28)
    || v4 > 0x428
    || ((unsigned int v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (unsigned int v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = v4 == v7) : (v8 = 0),
        !v8 || (uint64_t result = memchr(result + 10, 0, v4 - 40)) == 0))
  {
    int v9 = -304;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v9;
    goto LABEL_13;
  }
  uint64_t v10 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v10 || *((_DWORD *)v10 + 1) <= 0x1Fu)
  {
    int v9 = -309;
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + 36) = 16777472;
  long long v11 = *(_OWORD *)(v10 + 36);
  v12[0] = *(_OWORD *)(v10 + 20);
  v12[1] = v11;
  uint64_t result = (_DWORD *)sub_10003E7C8((unsigned char *)v3 + 40, (void *)(a2 + 28), (_DWORD *)(a2 + 52), (uint64_t)v12);
  if (!result)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_1000A78DC(_DWORD *a1, uint64_t a2)
{
  int v4 = *a1;
  uint64_t result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v6 = a1[1];
    if (v6 >= 0x2C && v6 <= 0x42C)
    {
      unsigned int v7 = a1[9];
      if (v7 <= 0x400)
      {
        unsigned int v8 = (v7 + 3) & 0xFFFFFFFC;
        if ((int)v6 - 44 >= v7 && v6 == v8 + 44)
        {
          uint64_t v10 = 1064;
          if (a1[1] < 0x428uLL) {
            uint64_t v10 = a1[1];
          }
          if (memchr(a1 + 10, 0, v10 - 40))
          {
            long long v11 = (char *)a1 + ((v6 + 3) & 0x1FFFFFFFCLL);
            if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) < 0x20u)
            {
              uint64_t result = 4294966987;
            }
            else
            {
              char v12 = *((unsigned char *)a1 + v8 + 40);
              long long v13 = *(_OWORD *)(v11 + 36);
              v14[0] = *(_OWORD *)(v11 + 20);
              v14[1] = v13;
              uint64_t result = sub_10003E5F0((uint64_t)(a1 + 10), v12, (uint64_t)v14);
            }
          }
          else
          {
            uint64_t result = 4294966992;
          }
        }
      }
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_1000A79EC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0
    || (int v3 = result, v4 = result[1], v4 < 0x28)
    || v4 > 0x428
    || ((unsigned int v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (unsigned int v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = v4 == v7) : (v8 = 0),
        !v8 || (uint64_t result = memchr(result + 10, 0, v4 - 40)) == 0))
  {
    int v9 = -304;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v9;
    NDR_record_t v10 = NDR_record;
    goto LABEL_13;
  }
  long long v11 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) <= 0x1Fu)
  {
    int v9 = -309;
    goto LABEL_12;
  }
  long long v12 = *(_OWORD *)(v11 + 36);
  v13[0] = *(_OWORD *)(v11 + 20);
  v13[1] = v12;
  uint64_t result = (_DWORD *)sub_10003E498((uint64_t)(v3 + 10), a2 + 36, (uint64_t)v13);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v10 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = v10;
  return result;
}

_DWORD *sub_1000A7AF8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) == 0
    && (int v3 = result, v4 = result[1], v4 >= 0x28)
    && v4 <= 0x428
    && ((unsigned int v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (unsigned int v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = v4 == v7) : (v8 = 0),
        v8 && (uint64_t result = memchr(result + 10, 0, v4 - 40)) != 0))
  {
    NDR_record_t v10 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v10 && *((_DWORD *)v10 + 1) > 0x1Fu)
    {
      long long v11 = *(_OWORD *)(v10 + 36);
      v12[0] = *(_OWORD *)(v10 + 20);
      v12[1] = v11;
      uint64_t result = (_DWORD *)sub_10003E2D4((uint64_t)(v3 + 10), (uint64_t)v12);
      *(_DWORD *)(a2 + 32) = result;
      return result;
    }
    int v9 = -309;
  }
  else
  {
    int v9 = -304;
  }
  *(_DWORD *)(a2 + 32) = v9;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_1000A7BE4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0) {
    goto LABEL_16;
  }
  int v3 = result;
  uint64_t v4 = result[1];
  if (v4 < 0x30) {
    goto LABEL_16;
  }
  if (v4 > 0x430) {
    goto LABEL_16;
  }
  unsigned int v5 = result[9];
  if (v5 > 0x400) {
    goto LABEL_16;
  }
  unsigned int v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 48 < v5 || v4 != v6 + 48) {
    goto LABEL_16;
  }
  uint64_t v8 = 1064;
  if (result[1] < 0x428uLL) {
    uint64_t v8 = result[1];
  }
  uint64_t result = memchr(result + 10, 0, v8 - 40);
  if (result)
  {
    int v9 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
    if (!*(_DWORD *)v9 && *((_DWORD *)v9 + 1) > 0x1Fu)
    {
      char v11 = *((unsigned char *)v3 + v6 + 40);
      char v12 = *((unsigned char *)v3 + v6 + 44);
      long long v13 = *(_OWORD *)(v9 + 36);
      v14[0] = *(_OWORD *)(v9 + 20);
      v14[1] = v13;
      uint64_t result = (_DWORD *)sub_10003DF10((uint64_t)(v3 + 10), v11, v12, (uint64_t)v14);
      *(_DWORD *)(a2 + 32) = result;
      return result;
    }
    int v10 = -309;
  }
  else
  {
LABEL_16:
    int v10 = -304;
  }
  *(_DWORD *)(a2 + 32) = v10;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_1000A7CF8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0) {
    goto LABEL_16;
  }
  int v3 = result;
  uint64_t v4 = result[1];
  if (v4 < 0x2C) {
    goto LABEL_16;
  }
  if (v4 > 0x42C) {
    goto LABEL_16;
  }
  unsigned int v5 = result[9];
  if (v5 > 0x400) {
    goto LABEL_16;
  }
  unsigned int v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 44 < v5 || v4 != v6 + 44) {
    goto LABEL_16;
  }
  uint64_t v8 = 1064;
  if (result[1] < 0x428uLL) {
    uint64_t v8 = result[1];
  }
  uint64_t result = memchr(result + 10, 0, v8 - 40);
  if (!result)
  {
LABEL_16:
    int v10 = -304;
    goto LABEL_17;
  }
  int v9 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v9 || *((_DWORD *)v9 + 1) <= 0x1Fu)
  {
    int v10 = -309;
LABEL_17:
    *(_DWORD *)(a2 + 32) = v10;
    NDR_record_t v11 = NDR_record;
    goto LABEL_18;
  }
  char v12 = *((unsigned char *)v3 + v6 + 40);
  long long v13 = *(_OWORD *)(v9 + 36);
  v14[0] = *(_OWORD *)(v9 + 20);
  v14[1] = v13;
  uint64_t result = (_DWORD *)sub_10003F5A4((uint64_t)(v3 + 10), v12, a2 + 36, v14);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v11 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_18:
  *(NDR_record_t *)(a2 + 24) = v11;
  return result;
}

_DWORD *sub_1000A7E28(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0
    || (int v3 = result, v4 = result[1], v4 < 0x28)
    || v4 > 0x428
    || ((unsigned int v5 = result[9], v5 <= 0x400) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (unsigned int v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = v4 == v7) : (v8 = 0),
        !v8 || (uint64_t result = memchr(result + 10, 0, v4 - 40)) == 0))
  {
    int v9 = -304;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v9;
    NDR_record_t v10 = NDR_record;
    goto LABEL_13;
  }
  NDR_record_t v11 = (char *)v3 + ((v4 + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) <= 0x1Fu)
  {
    int v9 = -309;
    goto LABEL_12;
  }
  long long v12 = *(_OWORD *)(v11 + 36);
  v13[0] = *(_OWORD *)(v11 + 20);
  v13[1] = v12;
  uint64_t result = (_DWORD *)sub_10003F44C((uint64_t)(v3 + 10), a2 + 36, (uint64_t)v13);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v10 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_1000A7F34(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 6001030) >= 0xFFFFFFE2) {
    return (uint64_t)*(&off_1000FA058 + 5 * (v1 - 6001000) + 5);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000A7F74(mach_port_t a1, int a2, double a3, float a4, float a5, float a6)
{
  NDR_record_t v8 = NDR_record;
  double v9 = a3;
  float v10 = a4;
  float v11 = a5;
  float v12 = a6;
  int v13 = a2;
  *(void *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 980665;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set(&msg);
  }
  return mach_msg(&msg, 17, 0x38u, 0, 0, 0, 0);
}

uint64_t sub_1000A8000(_DWORD *a1, uint64_t a2)
{
  unsigned int v3 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v4 = a1[5] + 100;
  *(void *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v4;
  if (a1[5] != 6002000)
  {
    uint64_t result = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
    return result;
  }
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v7 = NDR_record;
LABEL_13:
    *(NDR_record_t *)(a2 + 24) = v7;
    return 1;
  }
  if (qword_100123128 != -1) {
    dispatch_once(&qword_100123128, &stru_1000F8840);
  }
  unsigned int v5 = [(id)qword_100123120 isAlive];
  *(unsigned char *)(a2 + 36) = 1;
  if (v5) {
    int v6 = 0;
  }
  else {
    int v6 = 5;
  }
  *(_DWORD *)(a2 + 32) = v6;
  NDR_record_t v7 = NDR_record;
  if ((v5 & 1) == 0) {
    goto LABEL_13;
  }
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  *(_DWORD *)(a2 + 4) = 40;
  return 1;
}

uint64_t AWStartAttentionAwarenessServer()
{
  return _AWStartAttentionAwarenessServer();
}

uint64_t AnalyticsIsEventUsed()
{
  return _AnalyticsIsEventUsed();
}

uint64_t AnalyticsSendEvent()
{
  return _AnalyticsSendEvent();
}

uint64_t BKHIDCreatePrimaryEventProcessor()
{
  return _BKHIDCreatePrimaryEventProcessor();
}

uint64_t BKHIDEventRoutingGetClientConnectionManager()
{
  return _BKHIDEventRoutingGetClientConnectionManager();
}

uint64_t BKLogAlternateSystemApp()
{
  return _BKLogAlternateSystemApp();
}

uint64_t BKLogBacklight()
{
  return _BKLogBacklight();
}

uint64_t BKLogCommon()
{
  return _BKLogCommon();
}

uint64_t BKLogDetailed()
{
  return _BKLogDetailed();
}

uint64_t BKLogDisplay()
{
  return _BKLogDisplay();
}

uint64_t BKLogEvent()
{
  return _BKLogEvent();
}

uint64_t BKLogEventDelivery()
{
  return _BKLogEventDelivery();
}

uint64_t BKLogKeyboard()
{
  return _BKLogKeyboard();
}

uint64_t BKLogMousePointer()
{
  return _BKLogMousePointer();
}

uint64_t BKLogOrientationDevice()
{
  return _BKLogOrientationDevice();
}

uint64_t BKLogSystemShell()
{
  return _BKLogSystemShell();
}

uint64_t BKLogTouchDeliveryObserver()
{
  return _BKLogTouchDeliveryObserver();
}

uint64_t BKLogTouchDeliveryPolicy()
{
  return _BKLogTouchDeliveryPolicy();
}

uint64_t BKLogTouchEvents()
{
  return _BKLogTouchEvents();
}

uint64_t BKLogUISensor()
{
  return _BKLogUISensor();
}

uint64_t BKNSStringFromIOHIDEventPhase()
{
  return _BKNSStringFromIOHIDEventPhase();
}

uint64_t BKSDisplayServicesGetExternalDisplayScale()
{
  return _BKSDisplayServicesGetExternalDisplayScale();
}

uint64_t BKSHIDDigitizerEventIsFirstTouchDown()
{
  return _BKSHIDDigitizerEventIsFirstTouchDown();
}

uint64_t BKSHIDEventContainsUpdates()
{
  return _BKSHIDEventContainsUpdates();
}

uint64_t BKSHIDEventGetConciseDescription()
{
  return _BKSHIDEventGetConciseDescription();
}

uint64_t BKSHIDEventGetDigitizerAttributes()
{
  return _BKSHIDEventGetDigitizerAttributes();
}

uint64_t BKSHIDEventGetRemoteTimestamp()
{
  return _BKSHIDEventGetRemoteTimestamp();
}

uint64_t BKSHIDEventSetAttributes()
{
  return _BKSHIDEventSetAttributes();
}

uint64_t BKSHIDEventSetDigitizerAttributes()
{
  return _BKSHIDEventSetDigitizerAttributes();
}

uint64_t BKSHIDEventSetRemoteTimestamp()
{
  return _BKSHIDEventSetRemoteTimestamp();
}

uint64_t BKSHIDEventSetSimpleDeliveryInfo()
{
  return _BKSHIDEventSetSimpleDeliveryInfo();
}

uint64_t BKSHIDEventSetSmartCoverInfo()
{
  return _BKSHIDEventSetSmartCoverInfo();
}

uint64_t BKSHIDServicesDeviceHasHighFrequencyDigitizer()
{
  return _BKSHIDServicesDeviceHasHighFrequencyDigitizer();
}

uint64_t BKSHIDServicesProductIdentifierFromServiceProperties()
{
  return _BKSHIDServicesProductIdentifierFromServiceProperties();
}

uint64_t BKSHIDServicesSetTouchPadAvailability()
{
  return _BKSHIDServicesSetTouchPadAvailability();
}

uint64_t BKSNSStringFromIOHIDProximityDetectionMask()
{
  return _BKSNSStringFromIOHIDProximityDetectionMask();
}

uint64_t BKSRestartActionOptionsDescription()
{
  return _BKSRestartActionOptionsDescription();
}

uint64_t BKSendHIDEventToClientWithDestination()
{
  return _BKSendHIDEventToClientWithDestination();
}

uint64_t BSAbsoluteMachTimeNow()
{
  return _BSAbsoluteMachTimeNow();
}

uint64_t BSAuditTokenForTask()
{
  return _BSAuditTokenForTask();
}

uint64_t BSBundleIDForPID()
{
  return _BSBundleIDForPID();
}

uint64_t BSContinuousMachTimeNow()
{
  return _BSContinuousMachTimeNow();
}

uint64_t BSDegreesToRadians()
{
  return _BSDegreesToRadians();
}

uint64_t BSDescriptionStreamAppendBKSKeyModifierFlags()
{
  return _BSDescriptionStreamAppendBKSKeyModifierFlags();
}

uint64_t BSDeviceOrientationDescription()
{
  return _BSDeviceOrientationDescription();
}

uint64_t BSDispatchQueueAssert()
{
  return _BSDispatchQueueAssert();
}

uint64_t BSDispatchQueueCreate()
{
  return _BSDispatchQueueCreate();
}

uint64_t BSDispatchQueueCreateSerial()
{
  return _BSDispatchQueueCreateSerial();
}

uint64_t BSDispatchQueueCreateSerialWithQoS()
{
  return _BSDispatchQueueCreateSerialWithQoS();
}

uint64_t BSDispatchQueueCreateWithFixedPriority()
{
  return _BSDispatchQueueCreateWithFixedPriority();
}

uint64_t BSDispatchQueueCreateWithQualityOfService()
{
  return _BSDispatchQueueCreateWithQualityOfService();
}

uint64_t BSEqualObjects()
{
  return _BSEqualObjects();
}

uint64_t BSEqualStrings()
{
  return _BSEqualStrings();
}

uint64_t BSFloatApproximatelyEqualToFloat()
{
  return _BSFloatApproximatelyEqualToFloat();
}

uint64_t BSFloatEqualToFloat()
{
  return _BSFloatEqualToFloat();
}

uint64_t BSFloatGreaterThanFloat()
{
  return _BSFloatGreaterThanFloat();
}

uint64_t BSFloatIsZero()
{
  return _BSFloatIsZero();
}

uint64_t BSFloatLessThanFloat()
{
  return _BSFloatLessThanFloat();
}

uint64_t BSFloatLessThanOrEqualToFloat()
{
  return _BSFloatLessThanOrEqualToFloat();
}

uint64_t BSGetDeviceType()
{
  return _BSGetDeviceType();
}

uint64_t BSGetVersionedPID()
{
  return _BSGetVersionedPID();
}

uint64_t BSIntegerMapEnumerateWithBlock()
{
  return _BSIntegerMapEnumerateWithBlock();
}

uint64_t BSInterfaceOrientationDescription()
{
  return _BSInterfaceOrientationDescription();
}

uint64_t BSInterfaceOrientationIsValid()
{
  return _BSInterfaceOrientationIsValid();
}

uint64_t BSLogAddStateCaptureBlockWithTitle()
{
  return _BSLogAddStateCaptureBlockWithTitle();
}

uint64_t BSMonotonicReferencedTimeFromMachTime()
{
  return _BSMonotonicReferencedTimeFromMachTime();
}

uint64_t BSNSStringFromCGRect()
{
  return _BSNSStringFromCGRect();
}

uint64_t BSPIDForAuditToken()
{
  return _BSPIDForAuditToken();
}

uint64_t BSPIDIsBeingDebugged()
{
  return _BSPIDIsBeingDebugged();
}

uint64_t BSPointEqualToPoint()
{
  return _BSPointEqualToPoint();
}

uint64_t BSProcessDescriptionForPID()
{
  return _BSProcessDescriptionForPID();
}

uint64_t BSProcessNameForPID()
{
  return _BSProcessNameForPID();
}

uint64_t BSRectEqualToRect()
{
  return _BSRectEqualToRect();
}

uint64_t BSRectFromValue()
{
  return _BSRectFromValue();
}

uint64_t BSRectWithSize()
{
  return _BSRectWithSize();
}

uint64_t BSSettingFlagIsYes()
{
  return _BSSettingFlagIsYes();
}

uint64_t BSSizeEqualToSize()
{
  return _BSSizeEqualToSize();
}

uint64_t BSStringFromCGPoint()
{
  return _BSStringFromCGPoint();
}

uint64_t BSStringFromCGRect()
{
  return _BSStringFromCGRect();
}

uint64_t BSSystemHasCapability()
{
  return _BSSystemHasCapability();
}

uint64_t BSSystemRootDirectory()
{
  return _BSSystemRootDirectory();
}

uint64_t BSSystemSharedDirectoryForCurrentProcess()
{
  return _BSSystemSharedDirectoryForCurrentProcess();
}

uint64_t BSValueWithRect()
{
  return _BSValueWithRect();
}

uint64_t BSVersionedPIDForAuditToken()
{
  return _BSVersionedPIDForAuditToken();
}

CFTimeInterval CACurrentMediaTime(void)
{
  return _CACurrentMediaTime();
}

uint64_t CARenderServerRenderDisplay()
{
  return _CARenderServerRenderDisplay();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return _CFAutorelease(arg);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return _CFNotificationCenterGetLocalCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

Boolean CFPropertyListIsValid(CFPropertyListRef plist, CFPropertyListFormat format)
{
  return _CFPropertyListIsValid(plist, format);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

Boolean CFRunLoopContainsObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
  return _CFRunLoopContainsObserver(rl, observer, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context)
{
  return _CFRunLoopObserverCreate(allocator, activities, repeats, order, callout, context);
}

void CFRunLoopRun(void)
{
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return _CFRunLoopRunInMode(mode, seconds, returnAfterSourceHandled);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return _CFStringCreateWithFormat(alloc, formatOptions, format);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return _CGAffineTransformConcat(retstr, t1, t2);
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return _CGAffineTransformEqualToTransform(t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return _CGAffineTransformMakeRotation(retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformMakeScale(retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return _CGAffineTransformRotate(retstr, t, angle);
}

uint64_t CGBitmapGetAlignedBytesPerRow()
{
  return _CGBitmapGetAlignedBytesPerRow();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return _CGColorCreate(space, components);
}

CGColorRef CGColorCreateWithPattern(CGColorSpaceRef space, CGPatternRef pattern, const CGFloat *components)
{
  return _CGColorCreateWithPattern(space, pattern, components);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return _CGColorSpaceCreateDeviceRGB();
}

CGColorSpaceRef CGColorSpaceCreatePattern(CGColorSpaceRef baseSpace)
{
  return _CGColorSpaceCreatePattern(baseSpace);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextSetFillColor(CGContextRef c, const CGFloat *components)
{
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return _CGDataProviderCreateWithCFData(data);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return _CGDataProviderCreateWithData(info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return _CGImageCreate(width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, bitmapInfo, provider, decode, shouldInterpolate, intent);
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return _CGImageCreateWithPNGDataProvider(source, decode, shouldInterpolate, intent);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return _CGImageDestinationCreateWithData(data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return _CGImageDestinationFinalize(idst);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return _CGImageGetHeight(image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return _CGImageGetWidth(image);
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return _CGImageRetain(image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCreateImageAtIndex(isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithURL(url, options);
}

void CGPathAddEllipseInRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return _CGPathCreateMutable();
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

CGPatternRef CGPatternCreate(void *info, CGRect bounds, CGAffineTransform *matrix, CGFloat xStep, CGFloat yStep, CGPatternTiling tiling, BOOL isColored, const CGPatternCallbacks *callbacks)
{
  return _CGPatternCreate(info, bounds, matrix, xStep, yStep, tiling, isColored, callbacks);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  return _CGRectApplyAffineTransform(rect, t);
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return _CGRectContainsPoint(rect, point);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return _CGRectEqualToRect(rect1, rect2);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  return _CGRectGetMaxX(rect);
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  return _CGRectGetMaxY(rect);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  return _CGRectGetMidX(rect);
}

CGFloat CGRectGetMidY(CGRect rect)
{
  return _CGRectGetMidY(rect);
}

CGFloat CGRectGetMinX(CGRect rect)
{
  return _CGRectGetMinX(rect);
}

CGFloat CGRectGetMinY(CGRect rect)
{
  return _CGRectGetMinY(rect);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return _CGRectIsEmpty(rect);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  return _CGRectUnion(r1, r2);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return _CTFontCreateWithName(name, size, matrix);
}

uint64_t CoreAccessoriesInitForHID()
{
  return _CoreAccessoriesInitForHID();
}

uint64_t DMPerformMigrationIfNeeded()
{
  return _DMPerformMigrationIfNeeded();
}

uint64_t DMProgressHostIsReady()
{
  return _DMProgressHostIsReady();
}

uint64_t GSEventGetSenderPID()
{
  return _GSEventGetSenderPID();
}

uint64_t GSEventGetType()
{
  return _GSEventGetType();
}

uint64_t GSEventInitializeWorkspaceWithQueue()
{
  return _GSEventInitializeWorkspaceWithQueue();
}

uint64_t GSEventRegisterEventCallBack()
{
  return _GSEventRegisterEventCallBack();
}

uint64_t GSInitialize()
{
  return _GSInitialize();
}

uint64_t GSKeyboardCreateWithCountryCode()
{
  return _GSKeyboardCreateWithCountryCode();
}

uint64_t GSKeyboardGetLayout()
{
  return _GSKeyboardGetLayout();
}

uint64_t GSKeyboardGetModifierState()
{
  return _GSKeyboardGetModifierState();
}

uint64_t GSKeyboardIsGlobeKeyUsagePair()
{
  return _GSKeyboardIsGlobeKeyUsagePair();
}

uint64_t GSKeyboardRelease()
{
  return _GSKeyboardRelease();
}

uint64_t GSKeyboardSetHardwareKeyboardAttached()
{
  return _GSKeyboardSetHardwareKeyboardAttached();
}

uint64_t GSKeyboardTranslateKeyExtendedCommandWithUsagePage()
{
  return _GSKeyboardTranslateKeyExtendedCommandWithUsagePage();
}

uint64_t GSRegisterPurpleNamedPort()
{
  return _GSRegisterPurpleNamedPort();
}

kern_return_t IOConnectCallScalarMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return _IOConnectCallScalarMethod(connection, selector, input, inputCnt, output, outputCnt);
}

uint64_t IOHIDEventAppendEvent()
{
  return _IOHIDEventAppendEvent();
}

uint64_t IOHIDEventConformsTo()
{
  return _IOHIDEventConformsTo();
}

uint64_t IOHIDEventCreate()
{
  return _IOHIDEventCreate();
}

uint64_t IOHIDEventCreateButtonEvent()
{
  return _IOHIDEventCreateButtonEvent();
}

uint64_t IOHIDEventCreateCopy()
{
  return _IOHIDEventCreateCopy();
}

uint64_t IOHIDEventCreateData()
{
  return _IOHIDEventCreateData();
}

uint64_t IOHIDEventCreateDeviceOrientationEventWithUsage()
{
  return _IOHIDEventCreateDeviceOrientationEventWithUsage();
}

uint64_t IOHIDEventCreateDigitizerEvent()
{
  return _IOHIDEventCreateDigitizerEvent();
}

uint64_t IOHIDEventCreateForceStageEvent()
{
  return _IOHIDEventCreateForceStageEvent();
}

uint64_t IOHIDEventCreateKeyboardEvent()
{
  return _IOHIDEventCreateKeyboardEvent();
}

uint64_t IOHIDEventCreateProximtyEvent()
{
  return _IOHIDEventCreateProximtyEvent();
}

uint64_t IOHIDEventCreateRotationEvent()
{
  return _IOHIDEventCreateRotationEvent();
}

uint64_t IOHIDEventCreateScaleEvent()
{
  return _IOHIDEventCreateScaleEvent();
}

uint64_t IOHIDEventCreateScrollEvent()
{
  return _IOHIDEventCreateScrollEvent();
}

uint64_t IOHIDEventCreateTouchSensitiveButtonEvent()
{
  return _IOHIDEventCreateTouchSensitiveButtonEvent();
}

uint64_t IOHIDEventCreateTranslationEvent()
{
  return _IOHIDEventCreateTranslationEvent();
}

uint64_t IOHIDEventGetChildren()
{
  return _IOHIDEventGetChildren();
}

uint64_t IOHIDEventGetDataValue()
{
  return _IOHIDEventGetDataValue();
}

uint64_t IOHIDEventGetDoubleValue()
{
  return _IOHIDEventGetDoubleValue();
}

uint64_t IOHIDEventGetEventFlags()
{
  return _IOHIDEventGetEventFlags();
}

uint64_t IOHIDEventGetFloatValue()
{
  return _IOHIDEventGetFloatValue();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return _IOHIDEventGetIntegerValue();
}

uint64_t IOHIDEventGetPhase()
{
  return _IOHIDEventGetPhase();
}

uint64_t IOHIDEventGetSenderID()
{
  return _IOHIDEventGetSenderID();
}

uint64_t IOHIDEventGetTimeStamp()
{
  return _IOHIDEventGetTimeStamp();
}

uint64_t IOHIDEventGetType()
{
  return _IOHIDEventGetType();
}

uint64_t IOHIDEventGetTypeString()
{
  return _IOHIDEventGetTypeString();
}

uint64_t IOHIDEventGetVendorDefinedData()
{
  return _IOHIDEventGetVendorDefinedData();
}

uint64_t IOHIDEventSetEventFlags()
{
  return _IOHIDEventSetEventFlags();
}

uint64_t IOHIDEventSetFloatValue()
{
  return _IOHIDEventSetFloatValue();
}

uint64_t IOHIDEventSetIntegerValue()
{
  return _IOHIDEventSetIntegerValue();
}

uint64_t IOHIDEventSetPhase()
{
  return _IOHIDEventSetPhase();
}

uint64_t IOHIDEventSetSenderID()
{
  return _IOHIDEventSetSenderID();
}

uint64_t IOHIDEventTypeGetName()
{
  return _IOHIDEventTypeGetName();
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return _IOIteratorNext(iterator);
}

kern_return_t IOMainPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return _IOMainPort(bootstrapPort, mainPort);
}

uint64_t IOMobileFramebufferOpen()
{
  return _IOMobileFramebufferOpen();
}

uint64_t IOMobileFramebufferSetDebugFlags()
{
  return _IOMobileFramebufferSetDebugFlags();
}

BOOLean_t IOObjectConformsTo(io_object_t object, const io_name_t className)
{
  return _IOObjectConformsTo(object, className);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

IOReturn IOPMAssertionCreateWithName(CFStringRef AssertionType, IOPMAssertionLevel AssertionLevel, CFStringRef AssertionName, IOPMAssertionID *AssertionID)
{
  return _IOPMAssertionCreateWithName(AssertionType, AssertionLevel, AssertionName, AssertionID);
}

uint64_t IOPMAssertionDeclareSystemActivity()
{
  return _IOPMAssertionDeclareSystemActivity();
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return _IOPMAssertionRelease(AssertionID);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return _IORegistryEntryFromPath(mainPort, path);
}

kern_return_t IORegistryEntryGetParentEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return _IORegistryEntryGetParentEntry(entry, plane, parent);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntrySearchCFProperty(entry, plane, key, allocator, options);
}

kern_return_t IORegistryEntrySetCFProperty(io_registry_entry_t entry, CFStringRef propertyName, CFTypeRef property)
{
  return _IORegistryEntrySetCFProperty(entry, propertyName, property);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return _IOServiceGetMatchingServices(mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return _IOSurfaceCreate(properties);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return _IOSurfaceGetAllocSize(buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return _IOSurfaceGetBaseAddress(buffer);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return _IOSurfaceGetBytesPerRow(buffer);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return _IOSurfaceGetHeight(buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return _IOSurfaceGetWidth(buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return _IOSurfaceLock(buffer, options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return _IOSurfaceUnlock(buffer, options, seed);
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetFloat32Answer()
{
  return _MGGetFloat32Answer();
}

uint64_t MGGetSInt32Answer()
{
  return _MGGetSInt32Answer();
}

uint64_t MTLMakeShaderCacheWritableByAllUsers()
{
  return _MTLMakeShaderCacheWritableByAllUsers();
}

uint64_t MTLSetShaderCachePath()
{
  return _MTLSetShaderCachePath();
}

uint64_t NSPopAutoreleasePool()
{
  return _NSPopAutoreleasePool();
}

uint64_t NSPushAutoreleasePool()
{
  return _NSPushAutoreleasePool();
}

uint64_t NSRequestConcreteImplementation()
{
  return _NSRequestConcreteImplementation();
}

uint64_t NSStringFromBKSButtonHapticAssetType()
{
  return _NSStringFromBKSButtonHapticAssetType();
}

uint64_t NSStringFromBKSDisplayServicesCloneMirroringMode()
{
  return _NSStringFromBKSDisplayServicesCloneMirroringMode();
}

uint64_t NSStringFromBKSDisplayTags()
{
  return _NSStringFromBKSDisplayTags();
}

uint64_t NSStringFromBKSHIDEventHardwareType()
{
  return _NSStringFromBKSHIDEventHardwareType();
}

uint64_t NSStringFromBKSHIDEventSmartCoverState()
{
  return _NSStringFromBKSHIDEventSmartCoverState();
}

uint64_t NSStringFromBKSHIDEventSource()
{
  return _NSStringFromBKSHIDEventSource();
}

uint64_t NSStringFromBKSHIDForceStageTransition()
{
  return _NSStringFromBKSHIDForceStageTransition();
}

uint64_t NSStringFromBKSHIDServicesHumanPresenceStatus()
{
  return _NSStringFromBKSHIDServicesHumanPresenceStatus();
}

uint64_t NSStringFromBKSHIDServicesUserEventTimerMode()
{
  return _NSStringFromBKSHIDServicesUserEventTimerMode();
}

uint64_t NSStringFromBKSHIDTouchSensitiveButtonIdentifier()
{
  return _NSStringFromBKSHIDTouchSensitiveButtonIdentifier();
}

uint64_t NSStringFromBKSSceneHostTouchBehavior()
{
  return _NSStringFromBKSSceneHostTouchBehavior();
}

uint64_t NSStringFromBKSTouchHitTestContextCategory()
{
  return _NSStringFromBKSTouchHitTestContextCategory();
}

uint64_t NSStringFromBKSTouchStreamIdentifier()
{
  return _NSStringFromBKSTouchStreamIdentifier();
}

uint64_t NSStringFromBSVersionedPID()
{
  return _NSStringFromBSVersionedPID();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

NSString *__cdecl NSStringFromSize(NSSize aSize)
{
  return _NSStringFromSize(aSize);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

int SCError(void)
{
  return _SCError();
}

CFStringRef SCNetworkInterfaceGetBSDName(SCNetworkInterfaceRef interface)
{
  return _SCNetworkInterfaceGetBSDName(interface);
}

CFArrayRef SCNetworkServiceCopyAll(SCPreferencesRef prefs)
{
  return _SCNetworkServiceCopyAll(prefs);
}

SCNetworkInterfaceRef SCNetworkServiceGetInterface(SCNetworkServiceRef service)
{
  return _SCNetworkServiceGetInterface(service);
}

SCPreferencesRef SCPreferencesCreateWithAuthorization(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID, AuthorizationRef authorization)
{
  return _SCPreferencesCreateWithAuthorization(allocator, name, prefsID, authorization);
}

Boolean SCPreferencesLock(SCPreferencesRef prefs, Boolean wait)
{
  return _SCPreferencesLock(prefs, wait);
}

void SCPreferencesSynchronize(SCPreferencesRef prefs)
{
}

Boolean SCPreferencesUnlock(SCPreferencesRef prefs)
{
  return _SCPreferencesUnlock(prefs);
}

uint64_t _AXSVoiceOverTouchEnabled()
{
  return __AXSVoiceOverTouchEnabled();
}

uint64_t _BKHIDNoteUserEventOccurredOnDisplay()
{
  return __BKHIDNoteUserEventOccurredOnDisplay();
}

uint64_t _BKHIDSetUserEventNotifier()
{
  return __BKHIDSetUserEventNotifier();
}

uint64_t _BKSGetExternalDisplayScale()
{
  return __BKSGetExternalDisplayScale();
}

uint64_t _BKSHIDEventGetConciseDescriptionKeyboard()
{
  return __BKSHIDEventGetConciseDescriptionKeyboard();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFRunLoopSetPerCalloutAutoreleasepoolEnabled()
{
  return __CFRunLoopSetPerCalloutAutoreleasepoolEnabled();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void std::terminate(void)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

int *__error(void)
{
  return ___error();
}

uint64_t _bs_set_crash_log_message()
{
  return __bs_set_crash_log_message();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t abort_with_reason()
{
  return _abort_with_reason();
}

int atoi(const char *a1)
{
  return _atoi(a1);
}

int close(int a1)
{
  return _close(a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return _dispatch_block_wait(block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

uint64_t dispatch_mach_connect()
{
  return _dispatch_mach_connect();
}

uint64_t dispatch_mach_create_f()
{
  return _dispatch_mach_create_f();
}

uint64_t dispatch_mach_mig_demux()
{
  return _dispatch_mach_mig_demux();
}

uint64_t dispatch_mach_msg_get_msg()
{
  return _dispatch_mach_msg_get_msg();
}

uint64_t dispatch_mach_receive_barrier()
{
  return _dispatch_mach_receive_barrier();
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

uint64_t dispatch_set_qos_class_fallback()
{
  return _dispatch_set_qos_class_fallback();
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return _dispatch_workloop_create_inactive(label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return _dispatch_workloop_set_scheduler_priority();
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void exit(int a1)
{
}

void free(void *a1)
{
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

pid_t getpid(void)
{
  return _getpid();
}

const char *getprogname(void)
{
  return _getprogname();
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

int kill(pid_t a1, int a2)
{
  return _kill(a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return _mach_msg(msg, option, send_size, rcv_size, rcv_name, timeout, notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return _mach_port_mod_refs(task, name, right, delta);
}

kern_return_t mach_port_set_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt)
{
  return _mach_port_set_attributes(task, name, flavor, port_info, port_infoCnt);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void mig_deallocate(vm_address_t a1, vm_size_t a2)
{
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

long double pow(long double __x, long double __y)
{
  return _pow(__x, __y);
}

int pthread_get_qos_class_np(pthread_t __pthread, qos_class_t *__qos_class, int *__relative_priority)
{
  return _pthread_get_qos_class_np(__pthread, __qos_class, __relative_priority);
}

pthread_t pthread_self(void)
{
  return _pthread_self();
}

uint64_t pthread_set_fixedpriority_self()
{
  return _pthread_set_fixedpriority_self();
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return _pthread_set_qos_class_self_np(__qos_class, __relative_priority);
}

uint64_t pthread_set_timeshare_self()
{
  return _pthread_set_timeshare_self();
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return _pthread_setschedparam(a1, a2, a3);
}

BOOL sel_isEqual(SEL lhs, SEL rhs)
{
  return _sel_isEqual(lhs, rhs);
}

int sem_close(sem_t *a1)
{
  return _sem_close(a1);
}

sem_t *sem_open(const char *a1, int a2, ...)
{
  return _sem_open(a1, a2);
}

int sem_unlink(const char *a1)
{
  return _sem_unlink(a1);
}

int setiopolicy_np(int a1, int a2, int a3)
{
  return _setiopolicy_np(a1, a2, a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return _voucher_mach_msg_set(msg);
}

uint64_t wd_endpoint_activate()
{
  return _wd_endpoint_activate();
}

uint64_t wd_endpoint_begin_watchdog_monitoring_for_service()
{
  return _wd_endpoint_begin_watchdog_monitoring_for_service();
}

uint64_t wd_endpoint_disable_monitoring_for_service()
{
  return _wd_endpoint_disable_monitoring_for_service();
}

uint64_t wd_endpoint_register()
{
  return _wd_endpoint_register();
}

uint64_t wd_endpoint_set_alive_func()
{
  return _wd_endpoint_set_alive_func();
}

uint64_t wd_endpoint_set_platform_controller()
{
  return _wd_endpoint_set_platform_controller();
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return _xpc_connection_create_from_endpoint(endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return _xpc_connection_create_mach_service(name, targetq, flags);
}

uint64_t xpc_connection_get_audit_token()
{
  return _xpc_connection_get_audit_token();
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

id objc_msgSend_ALSDelayOnUnlock(void *a1, const char *a2, ...)
{
  return _[a1 ALSDelayOnUnlock];
}

id objc_msgSend_ALSEpoch(void *a1, const char *a2, ...)
{
  return _[a1 ALSEpoch];
}

id objc_msgSend_ALSUserPreferences(void *a1, const char *a2, ...)
{
  return _[a1 ALSUserPreferences];
}

id objc_msgSend_CATransform3DValue(void *a1, const char *a2, ...)
{
  return _[a1 CATransform3DValue];
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _[a1 CGColor];
}

id objc_msgSend_HIDSystemChannel(void *a1, const char *a2, ...)
{
  return _[a1 HIDSystemChannel];
}

id objc_msgSend_TVOutDisplay(void *a1, const char *a2, ...)
{
  return _[a1 TVOutDisplay];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return [a1 URLForResource:x0 withExtension:x1];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return [a1 URLWithString:];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend__accessStateForReason_entitlement_logEntitlementOnFailure_usingBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_accessStateForReason:entitlement:logEntitlementOnFailure:usingBlock:");
}

id objc_msgSend__activateConnection_withContext_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_activateConnection:withContext:");
}

id objc_msgSend__addSystemShellToCollectivePingSet_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_addSystemShellToCollectivePingSet:");
}

id objc_msgSend__animationForBackgroundLayerCrossfading_(void *a1, const char *a2, ...)
{
  return [_animationForBackgroundLayerCrossfading:];
}

id objc_msgSend__animationForContentLayerCrossfading_(void *a1, const char *a2, ...)
{
  return [_animationForContentLayerCrossfading:];
}

id objc_msgSend__animationForKeyPath_withSettings_(void *a1, const char *a2, ...)
{
  return [a1 _animationForKeyPath:x0 withSettings:x1];
}

id objc_msgSend__applyExtendedHitTestInformationForCAScreenCoordinates_displayUUID_toPathAttributes_secureName_excludeContextIDs_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_applyExtendedHitTestInformationForCAScreenCoordinates:displayUUID:toPathAttributes:secureName:excludeContextIDs:");
}

id objc_msgSend__applyGainForHapticType_toConfigDictionary_clickSpeed_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_applyGainForHapticType:toConfigDictionary:clickSpeed:");
}

id objc_msgSend__assertModelUpdatesSuppressed_displayUUID_clientDisplayInfo_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_assertModelUpdatesSuppressed:displayUUID:clientDisplayInfo:");
}

id objc_msgSend__assetPrefix(void *a1, const char *a2, ...)
{
  return _[a1 _assetPrefix];
}

id objc_msgSend__baseConfigDictionary(void *a1, const char *a2, ...)
{
  return _[a1 _baseConfigDictionary];
}

id objc_msgSend__beginUpdateTransaction_(void *a1, const char *a2, ...)
{
  return [a1 _beginUpdateTransaction:];
}

id objc_msgSend__bounds(void *a1, const char *a2, ...)
{
  return _[a1 _bounds];
}

id objc_msgSend__bundleInfoOverrides(void *a1, const char *a2, ...)
{
  return _[a1 _bundleInfoOverrides];
}

id objc_msgSend__classesRequiredToDecode(void *a1, const char *a2, ...)
{
  return _[a1 _classesRequiredToDecode];
}

id objc_msgSend__cleanUpContentLayer(void *a1, const char *a2, ...)
{
  return _[a1 _cleanUpContentLayer];
}

id objc_msgSend__cleanup(void *a1, const char *a2, ...)
{
  return _[a1 _cleanup];
}

id objc_msgSend__collectivePingSystemShellSet(void *a1, const char *a2, ...)
{
  return _[a1 _collectivePingSystemShellSet];
}

id objc_msgSend__commonInitWithContext_server_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_commonInitWithContext:server:")];
}

id objc_msgSend__computeFrameForRegionLayoutDescriptor_accumulatedFrames_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_computeFrameForRegionLayoutDescriptor:accumulatedFrames:");
}

id objc_msgSend__configureAsyncWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 _configureAsyncWithBlock:];
}

id objc_msgSend__configureReferenceSpaceLayerTransformWithScale_(void *a1, const char *a2, ...)
{
  return [a1 _configureReferenceSpaceLayerTransformWithScale:];
}

id objc_msgSend__configureSyncWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 _configureSyncWithBlock:];
}

id objc_msgSend__createImageForIndex_basename_scale_idiom_bundle_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_createImageForIndex:basename:scale:idiom:bundle:");
}

id objc_msgSend__currentMaskForUsage_HIDSystem_mask_maskIfEngaged_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_currentMaskForUsage:HIDSystem:mask:maskIfEngaged:")];
}

id objc_msgSend__dataMigrationCheckInListener_didReceiveConnection_withContext_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_dataMigrationCheckInListener:didReceiveConnection:withContext:");
}

id objc_msgSend__deathByPid(void *a1, const char *a2, ...)
{
  return _[a1 _deathByPid];
}

id objc_msgSend__deathBySendRight(void *a1, const char *a2, ...)
{
  return _[a1 _deathBySendRight];
}

id objc_msgSend__demoCardConnection(void *a1, const char *a2, ...)
{
  return _[a1 _demoCardConnection];
}

id objc_msgSend__determineServiceForEvent_sender_fromTouchPad_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_determineServiceForEvent:sender:fromTouchPad:");
}

id objc_msgSend__didRespondToTouchDelivery(void *a1, const char *a2, ...)
{
  return _[a1 _didRespondToTouchDelivery];
}

id objc_msgSend__digitizerServiceWrapper(void *a1, const char *a2, ...)
{
  return _[a1 _digitizerServiceWrapper];
}

id objc_msgSend__dumpNodeTree_level_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_dumpNodeTree:level:");
}

id objc_msgSend__endUpdateTransaction_(void *a1, const char *a2, ...)
{
  return [a1 _endUpdateTransaction:];
}

id objc_msgSend__enumerateKeyPathNodesByComponent_options_ifFound_ifMissing_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_enumerateKeyPathNodesByComponent:options:ifFound:ifMissing:");
}

id objc_msgSend__enumerateNodesWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_enumerateNodesWithOptions:usingBlock:");
}

id objc_msgSend__eventSourceForKeyboardInfo_sender_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_eventSourceForKeyboardInfo:sender:");
}

id objc_msgSend__eventStateForSender_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_eventStateForSender:");
}

id objc_msgSend__exclusiveTouchNormalizedSubRectInReferenceSpace(void *a1, const char *a2, ...)
{
  return _[a1 _exclusiveTouchNormalizedSubRectInReferenceSpace];
}

id objc_msgSend__fileNameForOverlay_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_fileNameForOverlay:");
}

id objc_msgSend__filePathForOverlay_(void *a1, const char *a2, ...)
{
  return [a1 _filePathForOverlay:];
}

id objc_msgSend__filterDisplay_usingPredicate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_filterDisplay:usingPredicate:");
}

id objc_msgSend__filterDisplays_usingPredicate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_filterDisplays:usingPredicate:");
}

id objc_msgSend__frameForRegion_(void *a1, const char *a2, ...)
{
  return [a1 _frameForRegion:x0];
}

id objc_msgSend__getFrames_ofAnnotations_fixSuperlayer_scale_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getFrames:ofAnnotations:fixSuperlayer:scale:");
}

id objc_msgSend__handleAccelerometerRequestForPort_auditToken_updateBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleAccelerometerRequestForPort:auditToken:updateBlock:");
}

id objc_msgSend__handleDirectTouchEvent_service_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleDirectTouchEvent:service:");
}

id objc_msgSend__handleEvent_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleEvent:");
}

id objc_msgSend__handleInterruptedOrInvalidatedConnection(void *a1, const char *a2, ...)
{
  return _[a1 _handleInterruptedOrInvalidatedConnection];
}

id objc_msgSend__hardwareIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 _hardwareIdentifier];
}

id objc_msgSend__idiomSuffix(void *a1, const char *a2, ...)
{
  return _[a1 _idiomSuffix];
}

id objc_msgSend__imageAtIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_imageAtIndex:");
}

id objc_msgSend__immutableDisplays(void *a1, const char *a2, ...)
{
  return _[a1 _immutableDisplays];
}

id objc_msgSend__init(void *a1, const char *a2, ...)
{
  return _[a1 _init];
}

id objc_msgSend__initWithBrightnessController_(void *a1, const char *a2, ...)
{
  return [a1 _initWithBrightnessController:];
}

id objc_msgSend__initWithBrightnessSystem_systemShellSentinel_orientationManager_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_initWithBrightnessSystem:systemShellSentinel:orientationManager:");
}

id objc_msgSend__initWithDescriptor_overlayType_imageData_level_frozen_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_initWithDescriptor:overlayType:imageData:level:frozen:");
}

id objc_msgSend__initWithDeviceOrientationManager_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_initWithDeviceOrientationManager:");
}

id objc_msgSend__initWithPersistenceCoordinator_orientationManager_backlightManager_windowServer_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_initWithPersistenceCoordinator:orientationManager:backlightManager:windowServer:");
}

id objc_msgSend__initWithPersistenceData_(void *a1, const char *a2, ...)
{
  return [a1 _initWithPersistenceData:];
}

id objc_msgSend__initWithSettings_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_initWithSettings:");
}

id objc_msgSend__isBuiltinDisplay(void *a1, const char *a2, ...)
{
  return _[a1 _isBuiltinDisplay];
}

id objc_msgSend__isModifierKeyWithPage_usage_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_isModifierKeyWithPage:usage:");
}

id objc_msgSend__isNullDisplay(void *a1, const char *a2, ...)
{
  return _[a1 _isNullDisplay];
}

id objc_msgSend__isUpClickStateType_(void *a1, const char *a2, ...)
{
  return [a1 _isUpClickStateType:];
}

id objc_msgSend__keyPathForTouchIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 _keyPathForTouchIdentifier:];
}

id objc_msgSend__layoutDescriptorForRegion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_layoutDescriptorForRegion:");
}

id objc_msgSend__loadAllImages(void *a1, const char *a2, ...)
{
  return _[a1 _loadAllImages];
}

id objc_msgSend__lock_CATransaction_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_CATransaction:");
}

id objc_msgSend__lock_activeModifiers(void *a1, const char *a2, ...)
{
  return [a1 _lock_activeModifiers];
}

id objc_msgSend__lock_addDeathWatcherForPid_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_addDeathWatcherForPid:");
}

id objc_msgSend__lock_addModifierKeyDown_(void *a1, const char *a2, ...)
{
  return [a1 _lock_addModifierKeyDown:];
}

id objc_msgSend__lock_addObserversToDisplay_(void *a1, const char *a2, ...)
{
  return [a1 _lock_addObserversToDisplay:];
}

id objc_msgSend__lock_anyKeyboardHasCapsLockActive(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_anyKeyboardHasCapsLockActive");
}

id objc_msgSend__lock_applyDeliveryInformation_resolution_toEvent_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_applyDeliveryInformation:resolution:toEvent:");
}

id objc_msgSend__lock_applyUIMode_toWrappers_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_applyUIMode:toWrappers:");
}

id objc_msgSend__lock_blockSystemApp(void *a1, const char *a2, ...)
{
  return [a1 _lock_blockSystemApp];
}

id objc_msgSend__lock_bootstrapSystemApp(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_bootstrapSystemApp");
}

id objc_msgSend__lock_cancelKeyDownEvents_(void *a1, const char *a2, ...)
{
  return [a1 _lock_cancelKeyDownEvents:];
}

id objc_msgSend__lock_checkInWithRemoteCompletionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_checkInWithRemoteCompletionBlock:");
}

id objc_msgSend__lock_clearSystemAppOrientationClient(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_clearSystemAppOrientationClient");
}

id objc_msgSend__lock_clearWindowServerDisplayTags_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_clearWindowServerDisplayTags:");
}

id objc_msgSend__lock_cloneMirroringOptionsFromSourceDisplay_destinationDisplay_virtualMode_isStevenote_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_cloneMirroringOptionsFromSourceDisplay:destinationDisplay:virtualMode:isStevenote:");
}

id objc_msgSend__lock_cloneMirroringOptionsSteveNote_contextIDs_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_cloneMirroringOptionsSteveNote:contextIDs:");
}

id objc_msgSend__lock_commitDisplayBrightness(void *a1, const char *a2, ...)
{
  return [a1 _lock_commitDisplayBrightness];
}

id objc_msgSend__lock_completeCheckInForShell_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_completeCheckInForShell:");
}

id objc_msgSend__lock_completeCheckInForShell_completionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_completeCheckInForShell:completionBlock:");
}

id objc_msgSend__lock_currentConnectionShell(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_currentConnectionShell");
}

id objc_msgSend__lock_dispatchKeyEvent_keyCommand_keyboardInfo_eventSource_fromSender_dispatcher_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_dispatchKeyEvent:keyCommand:keyboardInfo:eventSource:fromSender:dispatcher:");
}

id objc_msgSend__lock_evaluateAllDisplaysForReason_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_evaluateAllDisplaysForReason:");
}

id objc_msgSend__lock_evaluateCarPlayDisplay_label_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_evaluateCarPlayDisplay:label:");
}

id objc_msgSend__lock_evaluateConnectedDisplay_because_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_evaluateConnectedDisplay:because:");
}

id objc_msgSend__lock_evaluateContinuityDisplay_label_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_evaluateContinuityDisplay:label:");
}

id objc_msgSend__lock_evaluateDisplay_reason_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_evaluateDisplay:reason:");
}

id objc_msgSend__lock_evaluateExistingClonesForReason_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_evaluateExistingClonesForReason:");
}

id objc_msgSend__lock_existingClientForSendRight_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_existingClientForSendRight:");
}

id objc_msgSend__lock_freezeOverlay_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_freezeOverlay:");
}

id objc_msgSend__lock_handleKeyEvent_fromSender_dispatcher_bypassCapsLockChecks_(void *a1, const char *a2, ...)
{
  return [a1 _lock_handleKeyEvent:x0 fromSender:x1 dispatcher:x2 bypassCapsLockChecks:x3];
}

id objc_msgSend__lock_handleRelaunchRequestFromSystemApp_withOptions_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_handleRelaunchRequestFromSystemApp:withOptions:");
}

id objc_msgSend__lock_handleUnicodeEvent_fromSender_dispatcher_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_handleUnicodeEvent:fromSender:dispatcher:");
}

id objc_msgSend__lock_hasEntitlement_usingCacheForAuditToken_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_hasEntitlement:usingCacheForAuditToken:");
}

id objc_msgSend__lock_invalidate(void *a1, const char *a2, ...)
{
  return [a1 _lock_invalidate];
}

id objc_msgSend__lock_keyboardRemoved_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_keyboardRemoved:");
}

id objc_msgSend__lock_keyboardsDetected_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_keyboardsDetected:");
}

id objc_msgSend__lock_locationDidChanges(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_locationDidChanges")];
}

id objc_msgSend__lock_postDetectionMaskChangeToObservers(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_postDetectionMaskChangeToObservers");
}

id objc_msgSend__lock_postSyntheticCapsLockPressForKeyboard_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_postSyntheticCapsLockPressForKeyboard:");
}

id objc_msgSend__lock_postSyntheticEventWithDetectionMaskToClients_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_postSyntheticEventWithDetectionMaskToClients:");
}

id objc_msgSend__lock_publishUsableKeyboards_toServiceConnection_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_publishUsableKeyboards:toServiceConnection:");
}

id objc_msgSend__lock_publishUsableKeyboardsToServiceConnections(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_publishUsableKeyboardsToServiceConnections");
}

id objc_msgSend__lock_rebuildModeCache(void *a1, const char *a2, ...)
{
  return [a1 _lock_rebuildModeCache];
}

id objc_msgSend__lock_recomputeTagsForDisplay_shouldHide_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_recomputeTagsForDisplay:shouldHide:");
}

id objc_msgSend__lock_removeAnnotation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_removeAnnotation:");
}

id objc_msgSend__lock_removeCapsLockEntryIfNeeded_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_removeCapsLockEntryIfNeeded:");
}

id objc_msgSend__lock_removeClone_fromWindowServerDisplay_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_removeClone:fromWindowServerDisplay:");
}

id objc_msgSend__lock_removeDisplayCloneDestination_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_removeDisplayCloneDestination:");
}

id objc_msgSend__lock_removeModifierKeyDown_(void *a1, const char *a2, ...)
{
  return [a1 _lock_removeModifierKeyDown:];
}

id objc_msgSend__lock_removeObserversFromDisplay_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_removeObserversFromDisplay:");
}

id objc_msgSend__lock_removeSenderIDFromTracking_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_removeSenderIDFromTracking:)];
}

id objc_msgSend__lock_restoreCapsLockStateToKeyboard_(void *a1, const char *a2, ...)
{
  return [a1 _lock_restoreCapsLockStateToKeyboard:];
}

id objc_msgSend__lock_sendQueuedUpdatesToClient(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_sendQueuedUpdatesToClient");
}

id objc_msgSend__lock_setBacklightLocked_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_setBacklightLocked:");
}

id objc_msgSend__lock_setCapsLockActive_onSenderID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_setCapsLockActive:onSenderID:");
}

id objc_msgSend__lock_setCapsLockState_forKeyboard_(void *a1, const char *a2, ...)
{
  return [a1 _lock_setCapsLockState:forKeyboard:];
}

id objc_msgSend__lock_setKeyboardLightsSuspended_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_setKeyboardLightsSuspended:");
}

id objc_msgSend__lock_setLockedOrientation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_setLockedOrientation:");
}

id objc_msgSend__lock_setOverlaysDisablingUpdates_(void *a1, const char *a2, ...)
{
  return [a1 _lock_setOverlaysDisablingUpdates:];
}

id objc_msgSend__lock_setPrimaryKeyboard_(void *a1, const char *a2, ...)
{
  return [a1 _lock_setPrimaryKeyboard:];
}

id objc_msgSend__lock_setupCloningToDestination_fromVirtualMode_hideByDefault_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_setupCloningToDestination:fromVirtualMode:hideByDefault:");
}

id objc_msgSend__lock_setupLayerTree(void *a1, const char *a2, ...)
{
  return [a1 _lock_setupLayerTree];
}

id objc_msgSend__lock_smartKeyboardAttachmentStateDidChange_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_smartKeyboardAttachmentStateDidChange:");
}

id objc_msgSend__lock_stopWatchingForGestures_(void *a1, const char *a2, ...)
{
  return [a1 _lock_stopWatchingForGestures:];
}

id objc_msgSend__lock_supernodeForRenderingAtKeyPath_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_supernodeForRenderingAtKeyPath:");
}

id objc_msgSend__lock_systemAppSetOrientationEventsClient_wantsOrientationEvents_auditToken_(void *a1, const char *a2, ...)
{
  return [a1 _lock_systemAppSetOrientationEventsClient:wantsOrientationEvents:auditToken:];
}

id objc_msgSend__lock_tearDownLayerTree(void *a1, const char *a2, ...)
{
  return [a1 _lock_tearDownLayerTree];
}

id objc_msgSend__lock_unblockSystemApp(void *a1, const char *a2, ...)
{
  return [a1 _lock_unblockSystemApp];
}

id objc_msgSend__lock_updateContextIDMap(void *a1, const char *a2, ...)
{
  return [a1 _lock_updateContextIDMap];
}

id objc_msgSend__lock_updateGlobalModifierState(void *a1, const char *a2, ...)
{
  return [a1 _lock_updateGlobalModifierState];
}

id objc_msgSend__lock_updateLayerTree(void *a1, const char *a2, ...)
{
  return [a1 _lock_updateLayerTree];
}

id objc_msgSend__lock_updateObservingState(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_updateObservingState")
}

id objc_msgSend__lock_updatePrimarySystemApp(void *a1, const char *a2, ...)
{
  return [a1 _lock_updatePrimarySystemApp];
}

id objc_msgSend__lock_updateSceneHostSettings(void *a1, const char *a2, ...)
{
  return [a1 _lock_updateSceneHostSettings];
}

id objc_msgSend__lock_updateStateForActiveOverlayChange(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_updateStateForActiveOverlayChange");
}

id objc_msgSend__lock_usableKeyboardAttached_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_usableKeyboardAttached:");
}

id objc_msgSend__lock_usableKeyboardDetached_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_usableKeyboardDetached:");
}

id objc_msgSend__lock_virtualDisplayModeFromClientParametersForDisplay_shouldHide_shouldDisable_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_lock_virtualDisplayModeFromClientParametersForDisplay:shouldHide:shouldDisable:");
}

id objc_msgSend__lock_watchForGestures_(void *a1, const char *a2, ...)
{
  return [a1 _lock_watchForGestures:];
}

id objc_msgSend__locked_notifyIfNeededCurrentDetectionMaskChangeWithTimstamp_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_locked_notifyIfNeededCurrentDetectionMaskChangeWithTimstamp:");
}

id objc_msgSend__locked_notifyObserversDidAddDevices_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_locked_notifyObserversDidAddDevices:");
}

id objc_msgSend__locked_notifyObserversDidChangeAvailability(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_locked_notifyObserversDidChangeAvailability");
}

id objc_msgSend__locked_notifyObserversDidRemoveDevices_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_locked_notifyObserversDidRemoveDevices:");
}

id objc_msgSend__locked_postEventWithDetectionMask_toDestinations_dispatcher_reason_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_locked_postEventWithDetectionMask:toDestinations:dispatcher:reason:");
}

id objc_msgSend__locked_setObjectWithinProximity_notify_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_locked_setObjectWithinProximity:notify:");
}

id objc_msgSend__locked_updateTouchSuppressionAssertion(void *a1, const char *a2, ...)
{
  return [_a1 _locked_updateTouchSuppressionAssertion];
}

id objc_msgSend__migrateBackBoard(void *a1, const char *a2, ...)
{
  return _[a1 _migrateBackBoard];
}

id objc_msgSend__modifierRemappingsDidChange(void *a1, const char *a2, ...)
{
  return _[a1 _modifierRemappingsDidChange];
}

id objc_msgSend__moveRestoredFileAtPath_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_moveRestoredFileAtPath:");
}

id objc_msgSend__passesThresholdForX_y_z_(void *a1, const char *a2, ...)
{
  return [a1 _passesThresholdForX:y:z:];
}

id objc_msgSend__perDisplayClientInfoForCurrentConnectionWithDisplayUUID_createIfNeeded_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_perDisplayClientInfoForCurrentConnectionWithDisplayUUID:createIfNeeded:");
}

id objc_msgSend__persistenceCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 _persistenceCoordinator];
}

id objc_msgSend__persistenceData(void *a1, const char *a2, ...)
{
  return _[a1 _persistenceData];
}

id objc_msgSend__persistentPropertyKeyDenylist(void *a1, const char *a2, ...)
{
  return _[a1 _persistentPropertyKeyDenylist];
}

id objc_msgSend__pidForClientPort_(void *a1, const char *a2, ...)
{
  return [a1 _pidForClientPort:x0];
}

id objc_msgSend__pingSystemShellForCollectiveWatchdog_(void *a1, const char *a2, ...)
{
  return [a1 _pingSystemShellForCollectiveWatchdog:];
}

id objc_msgSend__pointerDevicesFromIOHIDServices_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_pointerDevicesFromIOHIDServices:");
}

id objc_msgSend__policy(void *a1, const char *a2, ...)
{
  return _[a1 _policy];
}

id objc_msgSend__postDisplayPortNotificationCode_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_postDisplayPortNotificationCode:");
}

id objc_msgSend__postEvent_sender_dispatcher_destination_cancelled_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_postEvent:sender:dispatcher:destination:cancelled:");
}

id objc_msgSend__prepareContentLayerForPresentation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_prepareContentLayerForPresentation:");
}

id objc_msgSend__presentWithAnimationSettings_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_presentWithAnimationSettings:");
}

id objc_msgSend__prevailingMode_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_prevailingMode:");
}

id objc_msgSend__processRingerSwitchEvent_down_sender_dispatcher_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_processRingerSwitchEvent:down:sender:dispatcher:");
}

id objc_msgSend__proximityServiceWrapper(void *a1, const char *a2, ...)
{
  return _[a1 _proximityServiceWrapper];
}

id objc_msgSend__queue_acquireActivityAssertionForReason_generation_continuation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_acquireActivityAssertionForReason:generation:continuation:");
}

id objc_msgSend__queue_addChangesForPendingState_configuredState_toStates_configs_assets_enable_disable_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_addChangesForPendingState:configuredState:toStates:configs:assets:enable:disable:");
}

id objc_msgSend__queue_addConfigsAndAssetsForClickState_toStates_configs_assets_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_addConfigsAndAssetsForClickState:toStates:configs:assets:");
}

id objc_msgSend__queue_addDigitizerStateForService_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_addDigitizerStateForService:");
}

id objc_msgSend__queue_addOverlayForReason_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_addOverlayForReason:");
}

id objc_msgSend__queue_addServicesMatchingSenderDescriptor_inPerDisplayInfo_toArray_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_addServicesMatchingSenderDescriptor:inPerDisplayInfo:toArray:");
}

id objc_msgSend__queue_addTouchStreamClient_toDisplayUUID_versionedPID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_addTouchStreamClient:toDisplayUUID:versionedPID:");
}

id objc_msgSend__queue_addUnderlay(void *a1, const char *a2, ...)
{
  return [a1 _queue_addUnderlay];
}

id objc_msgSend__queue_annotateTouch_withString_uniqueIdentifier_fromPID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_annotateTouch:withString:uniqueIdentifier:fromPID:");
}

id objc_msgSend__queue_annotateTouch_withUniqueString_(void *a1, const char *a2, ...)
{
  return [a1 _queue_annotateTouch:withUniqueString:];
}

id objc_msgSend__queue_applyBasicAnnotationTextForTouchIdentifier_pathIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_applyBasicAnnotationTextForTouchIdentifier:pathIndex:");
}

id objc_msgSend__queue_applyCachedPropertiesToMultitouchService_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_applyCachedPropertiesToMultitouchService:");
}

id objc_msgSend__queue_applyConfigurationChanges(void *a1, const char *a2, ...)
{
  return [a1 _queue_applyConfigurationChanges];
}

id objc_msgSend__queue_assetOfType_parameters_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_assetOfType:parameters:");
}

id objc_msgSend__queue_cleanUpAfterAlternativeSystemApp_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_cleanUpAfterAlternativeSystemApp:");
}

id objc_msgSend__queue_clearTimer(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_clearTimer");
}

id objc_msgSend__queue_contextIDsToIgnoreForZoomSenders(void *a1, const char *a2, ...)
{
  return [a1 _queue_contextIDsToIgnoreForZoomSenders];
}

id objc_msgSend__queue_digitizerStateForService_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_digitizerStateForService:");
}

id objc_msgSend__queue_displayInfoForDisplay_createIfNeeded_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_displayInfoForDisplay:createIfNeeded:");
}

id objc_msgSend__queue_enumerateDigitizersForAllDisplaysUsingBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_enumerateDigitizersForAllDisplaysUsingBlock:");
}

id objc_msgSend__queue_enumerateDigitizersForDisplay_usingBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_enumerateDigitizersForDisplay:usingBlock:)
}

id objc_msgSend__queue_getSlowHapticType_getMediumHapticType_getFastHapticType_fromAssetType_clickCount_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_getSlowHapticType:getMediumHapticType:getFastHapticType:fromAssetType:clickCount:");
}

id objc_msgSend__queue_handleEvent_fromTouchPad_dispatcher_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_handleEvent:fromTouchPad:dispatcher:");
}

id objc_msgSend__queue_hasTouchEnterSlots(void *a1, const char *a2, ...)
{
  return [a1 _queue_hasTouchEnterSlots];
}

id objc_msgSend__queue_listener_shouldAcceptNewConnection_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_listener:shouldAcceptNewConnection:");
}

id objc_msgSend__queue_pendUpdate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_pendUpdate:)
}

id objc_msgSend__queue_performDelegateCallout_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_performDelegateCallout:");
}

id objc_msgSend__queue_postNotification_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_postNotification:");
}

id objc_msgSend__queue_postUpdate_forTouchIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_postUpdate:forTouchIdentifier:");
}

id objc_msgSend__queue_postUpdatedRawAccelerometerDeviceOrientation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_postUpdatedRawAccelerometerDeviceOrientation:");
}

id objc_msgSend__queue_removeAnnotationForTouch_withUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_removeAnnotationForTouch:withUniqueIdentifier:");
}

id objc_msgSend__queue_removeConnection_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_removeConnection:");
}

id objc_msgSend__queue_removeOverlayWithAnimationSettings_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_removeOverlayWithAnimationSettings:)];
}

id objc_msgSend__queue_removeUnderlay(void *a1, const char *a2, ...)
{
  return [a1 _queue_removeUnderlay];
}

id objc_msgSend__queue_resetTouchAuthenticationInitialSampleEvent(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_resetTouchAuthenticationInitialSampleEvent");
}

id objc_msgSend__queue_scheduleTimerWithTimeInterval_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_scheduleTimerWithTimeInterval:");
}

id objc_msgSend__queue_sendCancelEventForTouchPad_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_sendCancelEventForTouchPad:");
}

id objc_msgSend__queue_sendEvent_fromTouchPad_toDestination_dispatcher_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_sendEvent:fromTouchPad:toDestination:dispatcher:");
}

id objc_msgSend__queue_servicesMatchingSenderDescriptor_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_servicesMatchingSenderDescriptor:");
}

id objc_msgSend__queue_setCenter_forTouchIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_setCenter:forTouchIdentifier:");
}

id objc_msgSend__queue_setPolicy_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_setPolicy:");
}

id objc_msgSend__queue_setProcessPID_observesGlobalTouches_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_setProcessPID:observesGlobalTouches:");
}

id objc_msgSend__queue_setProcessPID_observesTouch_withIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 _queue_setProcessPID:x0 observesTouch:x1 withIdentifier:x2];
}

id objc_msgSend__queue_setScreenOwnerPID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_setScreenOwnerPID:)
}

id objc_msgSend__queue_slotRecordForSlotID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_slotRecordForSlotID:");
}

id objc_msgSend__queue_touchPadRemoved_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_touchPadRemoved:");
}

id objc_msgSend__queue_touchPadsDetected_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_touchPadsDetected:");
}

id objc_msgSend__queue_touchStreamClientForReference_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_touchStreamClientForReference:");
}

id objc_msgSend__queue_touchStreamInfoForDisplayUUID_createIfNeeded_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_touchStreamInfoForDisplayUUID:createIfNeeded:");
}

id objc_msgSend__queue_updateOverlayForReason_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_updateOverlayForReason:");
}

id objc_msgSend__queue_userEventOccurredInIdleMode(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queue_userEventOccurredInIdleMode");
}

id objc_msgSend__queue_userEventOccurredInPresenceMode(void *a1, const char *a2, ...)
{
  return [a1 _queue_userEventOccurredInPresenceMode];
}

id objc_msgSend__remoteProcessIsAlreadyConnected_(void *a1, const char *a2, ...)
{
  return [a1 _remoteProcessIsAlreadyConnected:];
}

id objc_msgSend__removeSystemShellFromCollectivePingSet_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_removeSystemShellFromCollectivePingSet:");
}

id objc_msgSend__removeUnusedFiles(void *a1, const char *a2, ...)
{
  return _[a1 _removeUnusedFiles];
}

id objc_msgSend__resetServiceStatus(void *a1, const char *a2, ...)
{
  return _[a1 _resetServiceStatus];
}

id objc_msgSend__reverseTetheringActive(void *a1, const char *a2, ...)
{
  return _[a1 _reverseTetheringActive];
}

id objc_msgSend__routeSqueezeEventToSystem(void *a1, const char *a2, ...)
{
  return _[a1 _routeSqueezeEventToSystem];
}

id objc_msgSend__scale(void *a1, const char *a2, ...)
{
  return _[a1 _scale];
}

id objc_msgSend__serviceExists_(void *a1, const char *a2, ...)
{
  return [a1 _serviceExists:];
}

id objc_msgSend__setAdditionalEnvironment_(void *a1, const char *a2, ...)
{
  return [a1 _setAdditionalEnvironment:];
}

id objc_msgSend__setAdditionalMachServices_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_setAdditionalMachServices:");
}

id objc_msgSend__setBlockingSystemApp_(void *a1, const char *a2, ...)
{
  return [a1 _setBlockingSystemApp:];
}

id objc_msgSend__setBounds_(void *a1, const char *a2, ...)
{
  return [a1 _setBounds:];
}

id objc_msgSend__setInterstitial_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_setInterstitial:");
}

id objc_msgSend__setOverrideExecutablePath_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_setOverrideExecutablePath:");
}

id objc_msgSend__setPresence_forDisplayUUID_(void *a1, const char *a2, ...)
{
  return [a1 _setPresence:forDisplayUUID:];
}

id objc_msgSend__setProximityInCentimeters_forDisplayUUID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_setProximityInCentimeters:forDisplayUUID:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__setTetherState_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_setTetherState:");
}

id objc_msgSend__setType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_setType:");
}

id objc_msgSend__sharedQueue(void *a1, const char *a2, ...)
{
  return _[a1 _sharedQueue];
}

id objc_msgSend__shellListener_didReceiveConnection_withContext_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_shellListener:didReceiveConnection:withContext:");
}

id objc_msgSend__shouldHitTestForGestureBegan(void *a1, const char *a2, ...)
{
  return _[a1 _shouldHitTestForGestureBegan];
}

id objc_msgSend__shouldMatchKeyCommandsForEvent_gsKeyboard_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_shouldMatchKeyCommandsForEvent:gsKeyboard:");
}

id objc_msgSend__shouldPostLPATransitionEvents(void *a1, const char *a2, ...)
{
  return _[a1 _shouldPostLPATransitionEvents];
}

id objc_msgSend__shouldSendSampleEventWithTimestamp_samplingInterval_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_shouldSendSampleEventWithTimestamp:samplingInterval:");
}

id objc_msgSend__shouldUseDoublePressAssetForClickStateType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_shouldUseDoublePressAssetForClickStateType:");
}

id objc_msgSend__shouldUseHapticForClickState_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_shouldUseHapticForClickState:");
}

id objc_msgSend__shouldUseSplitGainForClickState_(void *a1, const char *a2, ...)
{
  return [a1 _shouldUseSplitGainForClickState:];
}

id objc_msgSend__smartCoverSensorsDidDisengage_(void *a1, const char *a2, ...)
{
  return [a1 _smartCoverSensorsDidDisengage:];
}

id objc_msgSend__smartCoverSensorsDidEngage_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_smartCoverSensorsDidEngage:");
}

id objc_msgSend__spinnyImageSequence(void *a1, const char *a2, ...)
{
  return _[a1 _spinnyImageSequence];
}

id objc_msgSend__stopAnimating(void *a1, const char *a2, ...)
{
  return _[a1 _stopAnimating];
}

id objc_msgSend__stringByRemovingPrefix_fromString_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_stringByRemovingPrefix:fromString:");
}

id objc_msgSend__stringDescribingContextID_clientPort_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_stringDescribingContextID:clientPort:");
}

id objc_msgSend__stringDescribingContextID_pid_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_stringDescribingContextID:pid:");
}

id objc_msgSend__stringDescribingPID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_stringDescribingPID:");
}

id objc_msgSend__terminateAllGesturesForSender_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_terminateAllGesturesForSender:");
}

id objc_msgSend__terminateScrollingForSender_(void *a1, const char *a2, ...)
{
  return [a1 _terminateScrollingForSender:];
}

id objc_msgSend__unloadSpinnyImageSequence(void *a1, const char *a2, ...)
{
  return _[a1 _unloadSpinnyImageSequence];
}

id objc_msgSend__updateBounds(void *a1, const char *a2, ...)
{
  return _[a1 _updateBounds];
}

id objc_msgSend__updateFrames(void *a1, const char *a2, ...)
{
  return _[a1 _updateFrames];
}

id objc_msgSend__updateSettings(void *a1, const char *a2, ...)
{
  return _[a1 _updateSettings];
}

id objc_msgSend__updateTouchingPathIndexesFromDeviceEventState(void *a1, const char *a2, ...)
{
  return _[a1 _updateTouchingPathIndexesFromDeviceEventState];
}

id objc_msgSend__updateTransformLayerPosition(void *a1, const char *a2, ...)
{
  return _[a1 _updateTransformLayerPosition];
}

id objc_msgSend__updateWindowServerUpdatesForOverlays_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_updateWindowServerUpdatesForOverlays:");
}

id objc_msgSend__useLightBackground(void *a1, const char *a2, ...)
{
  return _[a1 _useLightBackground];
}

id objc_msgSend__validateConnection_withContext_forListenerLabel_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_validateConnection:withContext:forListenerLabel:");
}

id objc_msgSend__validateHapticFeedbackRequest_forAuditToken_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_validateHapticFeedbackRequest:forAuditToken:");
}

id objc_msgSend__validatePencilHapticFeedbackRequest_forPID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_validatePencilHapticFeedbackRequest:forPID:");
}

id objc_msgSend__validateTrackpadHapticFeedbackRequest_forPID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_validateTrackpadHapticFeedbackRequest:forPID:");
}

id objc_msgSend__wakeAnimationStyle(void *a1, const char *a2, ...)
{
  return _[a1 _wakeAnimationStyle];
}

id objc_msgSend__wrapInCATransaction_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_wrapInCATransaction:");
}

id objc_msgSend__xpcConnection(void *a1, const char *a2, ...)
{
  return _[a1 _xpcConnection];
}

id objc_msgSend_absolutePositionIsValid(void *a1, const char *a2, ...)
{
  return _[a1 absolutePositionIsValid];
}

id objc_msgSend_acceleratedRelativePointerPosition(void *a1, const char *a2, ...)
{
  return _[a1 acceleratedRelativePointerPosition];
}

id objc_msgSend_accelerometerUpdateInterval(void *a1, const char *a2, ...)
{
  return _[a1 accelerometerUpdateInterval];
}

id objc_msgSend_accessPort_(void *a1, const char *a2, ...)
{
  return [a1 accessPort:];
}

id objc_msgSend_accessibilityHIDServices(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityHIDServices];
}

id objc_msgSend_acquireButtonDownPointerRepositionAssertionForReason_contextRelativePointerPosition_onDisplay_restrictingToPID_(void *a1, const char *a2, ...)
{
  return [a1 acquireButtonDownPointerRepositionAssertionForReason:x0 contextRelativePointerPosition:x1 onDisplay:x2 restrictingToPID:x3];
}

id objc_msgSend_acquireForReason_(void *a1, const char *a2, ...)
{
  return [a1 acquireForReason:];
}

id objc_msgSend_acquireForReason_withContext_(void *a1, const char *a2, ...)
{
  return [a1 acquireForReason:withContext:];
}

id objc_msgSend_acquireWithError_(void *a1, const char *a2, ...)
{
  return [a1 acquireWithError:];
}

id objc_msgSend_acquireWithTimeout_handler_(void *a1, const char *a2, ...)
{
  return [a1 acquireWithTimeout:x0 handler:x1];
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_activateWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 activateWithHandler:];
}

id objc_msgSend_activateWithMousePointerController_(void *a1, const char *a2, ...)
{
  return [a1 activateWithMousePointerController:];
}

id objc_msgSend_activeDisplays(void *a1, const char *a2, ...)
{
  return _[a1 activeDisplays];
}

id objc_msgSend_activeMultilinePrefix(void *a1, const char *a2, ...)
{
  return _[a1 activeMultilinePrefix];
}

id objc_msgSend_activeOverlayWithDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 activeOverlayWithDescriptor:];
}

id objc_msgSend_activeOverlays(void *a1, const char *a2, ...)
{
  return _[a1 activeOverlays];
}

id objc_msgSend_addAnimation_forKey_(void *a1, const char *a2, ...)
{
  return [a1 addAnimation:forKey:];
}

id objc_msgSend_addBeginNotification_endNotification_(void *a1, const char *a2, ...)
{
  return [a1 addBeginNotification:endNotification:];
}

id objc_msgSend_addButtonEvent_fromSender_(void *a1, const char *a2, ...)
{
  return [a1 addButtonEvent:fromSender:];
}

id objc_msgSend_addButtonNumber_down_fromSender_(void *a1, const char *a2, ...)
{
  return [a1 addButtonNumber:x0 down:x1 fromSender:x2];
}

id objc_msgSend_addClone_options_(void *a1, const char *a2, ...)
{
  return [a1 addClone:options:];
}

id objc_msgSend_addDigitizerEvent_fromSender_(void *a1, const char *a2, ...)
{
  return [a1 addDigitizerEvent:fromSender:];
}

id objc_msgSend_addDisappearanceObserver_queue_(void *a1, const char *a2, ...)
{
  return [a1 addDisappearanceObserver:queue:];
}

id objc_msgSend_addDisplayBlankingObserver_(void *a1, const char *a2, ...)
{
  return [a1 addDisplayBlankingObserver:];
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return [a1 addEntriesFromDictionary:];
}

id objc_msgSend_addForceEvent_fromSender_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "addForceEvent:fromSender:");
}

id objc_msgSend_addGlobalDevicePreferencesObserver_(void *a1, const char *a2, ...)
{
  return [a1 addGlobalDevicePreferencesObserver:];
}

id objc_msgSend_addGlobalKeyboardObserver_(void *a1, const char *a2, ...)
{
  return [a1 addGlobalKeyboardObserver:];
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return [a1 addIndex:];
}

id objc_msgSend_addIndexes_(void *a1, const char *a2, ...)
{
  return [a1 addIndexes:];
}

id objc_msgSend_addMonitor_(void *a1, const char *a2, ...)
{
  return [a1 addMonitor:];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_addObject_toCollectionClass_forKey_(void *a1, const char *a2, ...)
{
  return [a1 addObject:forKey:];
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 addObjectsFromArray:];
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:];
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:forKeyPath:options:context:];
}

id objc_msgSend_addObserver_queue_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:queue:];
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:x0 selector:x1 name:x2 object:x3];
}

id objc_msgSend_addPrimaryRegion_(void *a1, const char *a2, ...)
{
  return [a1 addPrimaryRegion:];
}

id objc_msgSend_addRecognizer_recognitionBlock_(void *a1, const char *a2, ...)
{
  return [a1 addRecognizer:recognitionBlock:];
}

id objc_msgSend_addRegion_relativeToRegion_alongEdge_atPosition_(void *a1, const char *a2, ...)
{
  return [a1 addRegion:x0 relativeToRegion:x1 alongEdge:x2 atPosition:x3];
}

id objc_msgSend_addRepeatingField_containsClass_(void *a1, const char *a2, ...)
{
  return [a1 addRepeatingField:containsClass:];
}

id objc_msgSend_addRotationEvent_fromSender_(void *a1, const char *a2, ...)
{
  return [a1 addRotationEvent:fromSender:];
}

id objc_msgSend_addScaleEvent_fromSender_(void *a1, const char *a2, ...)
{
  return [a1 addScaleEvent:fromSender:];
}

id objc_msgSend_addScrollEvent_fromSender_(void *a1, const char *a2, ...)
{
  return [a1 addScrollEvent:fromSender:];
}

id objc_msgSend_addSenderInfo_(void *a1, const char *a2, ...)
{
  return [a1 addSenderInfo:];
}

id objc_msgSend_addSensorModeChangeObserver_(void *a1, const char *a2, ...)
{
  return [a1 addSensorModeChangeObserver:];
}

id objc_msgSend_addService_(void *a1, const char *a2, ...)
{
  return [a1 addService:];
}

id objc_msgSend_addSmartCoverObserver_(void *a1, const char *a2, ...)
{
  return [a1 addSmartCoverObserver:];
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return [a1 addSublayer:];
}

id objc_msgSend_addSyntheticTopLevelEventIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 addSyntheticTopLevelEventIfNeeded];
}

id objc_msgSend_addSystemShellObserver_reason_(void *a1, const char *a2, ...)
{
  return [a1 addSystemShellObserver:reason:];
}

id objc_msgSend_addToRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return [a1 addToRunLoop:forMode:];
}

id objc_msgSend_addTopLevelEvent_fromSender_(void *a1, const char *a2, ...)
{
  return [a1 addTopLevelEvent:fromSender:];
}

id objc_msgSend_addTopLevelScaleEvent_fromSender_(void *a1, const char *a2, ...)
{
  return [a1 addTopLevelScaleEvent:fromSender:];
}

id objc_msgSend_addTopLevelScrollEvent_fromSender_(void *a1, const char *a2, ...)
{
  return [a1 addTopLevelScrollEvent:fromSender:];
}

id objc_msgSend_addTouchAuthenticationSpecifications_registrantEntitled_(void *a1, const char *a2, ...)
{
  return [a1 addTouchAuthenticationSpecifications:registrantEntitled:];
}

id objc_msgSend_addTouchStreamForContextID_display_versionedPID_identifier_shouldSendAmbiguityRecommendations_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "addTouchStreamForContextID:display:versionedPID:identifier:shouldSendAmbiguityRecommendations:");
}

id objc_msgSend_addTranslationEvent_fromSender_(void *a1, const char *a2, ...)
{
  return [a1 addTranslationEvent:fromSender:];
}

id objc_msgSend_allAnnotationsForKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 allAnnotationsForKeyPath:];
}

id objc_msgSend_allImages(void *a1, const char *a2, ...)
{
  return _[a1 allImages];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allPersistentPropertiesForServicesMatchingDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 allPersistentPropertiesForServicesMatchingDescriptor:];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return [a1 allocWithZone:];
}

id objc_msgSend_alternateSystemApp(void *a1, const char *a2, ...)
{
  return _[a1 alternateSystemApp];
}

id objc_msgSend_alternateSystemAppBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 alternateSystemAppBundleIdentifier];
}

id objc_msgSend_alternateSystemAppWithBundleID_didExitWithContext_(void *a1, const char *a2, ...)
{
  return [a1 alternateSystemAppWithBundleID:didExitWithContext:];
}

id objc_msgSend_alternateSystemAppWithBundleID_failedToOpenWithResult_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "alternateSystemAppWithBundleID:failedToOpenWithResult:");
}

id objc_msgSend_alternateSystemAppWithBundleIDDidOpen_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "alternateSystemAppWithBundleIDDidOpen:");
}

id objc_msgSend_alternateSystemAppWithBundleIDDidTerminate_(void *a1, const char *a2, ...)
{
  return [a1 alternateSystemAppWithBundleIDDidTerminate:];
}

id objc_msgSend_analyticsReporter(void *a1, const char *a2, ...)
{
  return _[a1 analyticsReporter];
}

id objc_msgSend_anchorPoint(void *a1, const char *a2, ...)
{
  return _[a1 anchorPoint];
}

id objc_msgSend_animates(void *a1, const char *a2, ...)
{
  return _[a1 animates];
}

id objc_msgSend_animationWithKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 animationWithKeyPath:];
}

id objc_msgSend_annotateTouch_withString_uniqueIdentifier_fromPID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "annotateTouch:withString:uniqueIdentifier:fromPID:");
}

id objc_msgSend_annotation(void *a1, const char *a2, ...)
{
  return _[a1 annotation];
}

id objc_msgSend_annotationController(void *a1, const char *a2, ...)
{
  return _[a1 annotationController];
}

id objc_msgSend_annotationControllerForDisplay_(void *a1, const char *a2, ...)
{
  return [a1 annotationControllerForDisplay:];
}

id objc_msgSend_annotationForKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 annotationForKeyPath:];
}

id objc_msgSend_annotationWithEllipseSize_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "annotationWithEllipseSize:");
}

id objc_msgSend_annotationWithRectangleSize_(void *a1, const char *a2, ...)
{
  return [a1 annotationWithRectangleSize:];
}

id objc_msgSend_annotationWithString_(void *a1, const char *a2, ...)
{
  return [a1 annotationWithString:];
}

id objc_msgSend_anyBuiltinTouchscreenDigitizer(void *a1, const char *a2, ...)
{
  return _[a1 anyBuiltinTouchscreenDigitizer];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appendArraySection_withName_multilinePrefix_skipIfEmpty_(void *a1, const char *a2, ...)
{
  return [a1 appendArraySection:withName:multilinePrefix:skipIfEmpty:];
}

id objc_msgSend_appendArraySection_withName_multilinePrefix_skipIfEmpty_objectTransformer_(void *a1, const char *a2, ...)
{
  return [a1 appendArraySection:withName:multilinePrefix:skipIfEmpty:objectTransformer:];
}

id objc_msgSend_appendArraySection_withName_skipIfEmpty_(void *a1, const char *a2, ...)
{
  return [a1 appendArraySection:withName:skipIfEmpty:];
}

id objc_msgSend_appendBodySectionWithName_block_(void *a1, const char *a2, ...)
{
  return [a1 appendBodySectionWithName:block:];
}

id objc_msgSend_appendBodySectionWithName_multilinePrefix_block_(void *a1, const char *a2, ...)
{
  return [a1 appendBodySectionWithName:x0 multilinePrefix:x1 block:x2];
}

id objc_msgSend_appendBodySectionWithName_openDelimiter_closeDelimiter_block_(void *a1, const char *a2, ...)
{
  return [a1 appendBodySectionWithName:x0 openDelimiter:x1 closeDelimiter:x2 block:x3];
}

id objc_msgSend_appendBool_withName_(void *a1, const char *a2, ...)
{
  return [a1 appendBool:x0 withName:x1];
}

id objc_msgSend_appendBool_withName_ifEqualTo_(void *a1, const char *a2, ...)
{
  return [a1 appendBool:x0 withName:x1 ifEqualTo:x2];
}

id objc_msgSend_appendCollection_withName_itemBlock_(void *a1, const char *a2, ...)
{
  return [a1 appendCollection:withName:itemBlock:];
}

id objc_msgSend_appendCustomFormatForValue_withCustomFormatForName_(void *a1, const char *a2, ...)
{
  return [a1 appendCustomFormatForValue:withCustomFormatForName:];
}

id objc_msgSend_appendCustomFormatWithName_block_(void *a1, const char *a2, ...)
{
  return [a1 appendCustomFormatWithName:block:];
}

id objc_msgSend_appendDictionary_withName_itemBlock_(void *a1, const char *a2, ...)
{
  return [a1 appendDictionary:withName:itemBlock:];
}

id objc_msgSend_appendDouble_withName_decimalPrecision_(void *a1, const char *a2, ...)
{
  return [a1 appendDouble:x0 withName:x1 decimalPrecision:x2];
}

id objc_msgSend_appendFloat_withName_(void *a1, const char *a2, ...)
{
  return [a1 appendFloat:x0 withName:x1];
}

id objc_msgSend_appendFloat_withName_decimalPrecision_(void *a1, const char *a2, ...)
{
  return [a1 appendFloat:x0 withName:x1 decimalPrecision:x2];
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return [a1 appendFormat:];
}

id objc_msgSend_appendInt_withName_(void *a1, const char *a2, ...)
{
  return [a1 appendInt:withName:];
}

id objc_msgSend_appendInteger_withName_(void *a1, const char *a2, ...)
{
  return [a1 appendInteger:x0 withName:x1];
}

id objc_msgSend_appendIntegerMap_withName_keyFormat_valueBlock_(void *a1, const char *a2, ...)
{
  return [a1 appendIntegerMap:withName:keyFormat:valueBlock:];
}

id objc_msgSend_appendObject_withName_(void *a1, const char *a2, ...)
{
  return [a1 appendObject:withName:];
}

id objc_msgSend_appendObject_withName_skipIfNil_(void *a1, const char *a2, ...)
{
  return [a1 appendObject:withName:skipIfNil:];
}

id objc_msgSend_appendPoint_withName_(void *a1, const char *a2, ...)
{
  return [a1 appendPoint:withName:];
}

id objc_msgSend_appendPointer_withName_(void *a1, const char *a2, ...)
{
  return [a1 appendPointer:withName:];
}

id objc_msgSend_appendProem_block_(void *a1, const char *a2, ...)
{
  return [a1 appendProem:block:];
}

id objc_msgSend_appendRect_withName_(void *a1, const char *a2, ...)
{
  return [a1 appendRect:withName:];
}

id objc_msgSend_appendRightArrow(void *a1, const char *a2, ...)
{
  return _[a1 appendRightArrow];
}

id objc_msgSend_appendSize_withName_(void *a1, const char *a2, ...)
{
  return [a1 appendSize:withName:];
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return [a1 appendString:];
}

id objc_msgSend_appendString_withName_(void *a1, const char *a2, ...)
{
  return [a1 appendString:withName:];
}

id objc_msgSend_appendString_withName_skipIfEmpty_(void *a1, const char *a2, ...)
{
  return [a1 appendString:x0 withName:x1 skipIfEmpty:x2];
}

id objc_msgSend_appendSubeventsForEventTypeMask_toTopLevelEvent_interfaceOrientation_getEventSummary_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "appendSubeventsForEventTypeMask:toTopLevelEvent:interfaceOrientation:getEventSummary:");
}

id objc_msgSend_appendSuccinctDescriptionToFormatter_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "appendSuccinctDescriptionToFormatter:");
}

id objc_msgSend_appendTimeInterval_withName_decomposeUnits_(void *a1, const char *a2, ...)
{
  return [a1 appendTimeInterval:x0 withName:x1 decomposeUnits:x2];
}

id objc_msgSend_appendUInt64_withName_format_(void *a1, const char *a2, ...)
{
  return [a1 appendUInt64:x0 withName:x1 format:x2];
}

id objc_msgSend_appendUnsignedInteger_withName_(void *a1, const char *a2, ...)
{
  return [a1 appendUnsignedInteger:x0 withName:x1];
}

id objc_msgSend_appendUnsignedInteger_withName_format_(void *a1, const char *a2, ...)
{
  return [a1 appendUnsignedInteger:x0 withName:x1 format:x2];
}

id objc_msgSend_appendVersionedPID_withName_(void *a1, const char *a2, ...)
{
  return [a1 appendVersionedPID:withName:];
}

id objc_msgSend_applyAppearanceToShapeLayer_(void *a1, const char *a2, ...)
{
  return [a1 applyAppearanceToShapeLayer:];
}

id objc_msgSend_applyAppearanceToTextLayer_(void *a1, const char *a2, ...)
{
  return [a1 applyAppearanceToTextLayer:];
}

id objc_msgSend_applyDefinitions_(void *a1, const char *a2, ...)
{
  return [a1 applyDefinitions:];
}

id objc_msgSend_applyExtendedHitTestInformationForCAScreenCoordinates_displayUUID_toPathAttributes_secureName_excludeContextIDs_(void *a1, const char *a2, ...)
{
  return [a1 applyExtendedHitTestInformationForCAScreenCoordinates:x0 displayUUID:x1 toPathAttributes:x2 secureName:x3 excludeContextIDs:x4];
}

id objc_msgSend_applyForTime_(void *a1, const char *a2, ...)
{
  return [a1 applyForTime:];
}

id objc_msgSend_applyForTime_presentationObject_modelObject_(void *a1, const char *a2, ...)
{
  return [a1 applyForTime:x0 presentationObject:x1 modelObject:x2];
}

id objc_msgSend_applyOverlay_withAnimationSettings_(void *a1, const char *a2, ...)
{
  return [a1 applyOverlay:withAnimationSettings:];
}

id objc_msgSend_applySceneHostSettingsToHostingChain_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "applySceneHostSettingsToHostingChain:");
}

id objc_msgSend_applySensorMode_requestOrigin_(void *a1, const char *a2, ...)
{
  return [a1 applySensorMode:requestOrigin:];
}

id objc_msgSend_applyToCAAnimation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "applyToCAAnimation:");
}

id objc_msgSend_applyToLayer_forContent_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "applyToLayer:forContent:");
}

id objc_msgSend_applyUIMode_(void *a1, const char *a2, ...)
{
  return [a1 applyUIMode:];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 arrayByAddingObjectsFromArray:];
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObject:];
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:];
}

id objc_msgSend_assertionEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 assertionEndpoint];
}

id objc_msgSend_assertionWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 assertionWithIdentifier:];
}

id objc_msgSend_assertionWithIdentifier_stateDidChangeHandler_(void *a1, const char *a2, ...)
{
  return [a1 assertionWithIdentifier:stateDidChangeHandler:];
}

id objc_msgSend_assetType(void *a1, const char *a2, ...)
{
  return _[a1 assetType];
}

id objc_msgSend_associatedDisplay(void *a1, const char *a2, ...)
{
  return _[a1 associatedDisplay];
}

id objc_msgSend_asyncSetProperties_(void *a1, const char *a2, ...)
{
  return [a1 asyncSetProperties:];
}

id objc_msgSend_asyncSetProperty_forKey_(void *a1, const char *a2, ...)
{
  return [a1 asyncSetProperty:forKey:];
}

id objc_msgSend_asyncSetProperty_forKey_andDelayForSeconds_(void *a1, const char *a2, ...)
{
  return [a1 asyncSetProperty:x0 forKey:x1 andDelayForSeconds:x2];
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _[a1 auditToken];
}

id objc_msgSend_auditTokenRepresentsSystemApp_(void *a1, const char *a2, ...)
{
  return [a1 auditTokenRepresentsSystemApp:];
}

id objc_msgSend_authenticationMessage(void *a1, const char *a2, ...)
{
  return _[a1 authenticationMessage];
}

id objc_msgSend_authenticationMessageContext(void *a1, const char *a2, ...)
{
  return _[a1 authenticationMessageContext];
}

id objc_msgSend_authenticationOriginator(void *a1, const char *a2, ...)
{
  return _[a1 authenticationOriginator];
}

id objc_msgSend_authenticationSpecificationForSlotID_registrantEntitled_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "authenticationSpecificationForSlotID:registrantEntitled:");
}

id objc_msgSend_automaticResetDisabled(void *a1, const char *a2, ...)
{
  return _[a1 automaticResetDisabled];
}

id objc_msgSend_availableDevices(void *a1, const char *a2, ...)
{
  return _[a1 availableDevices];
}

id objc_msgSend_availableDevicesDidChange(void *a1, const char *a2, ...)
{
  return _[a1 availableDevicesDidChange];
}

id objc_msgSend_availableModes(void *a1, const char *a2, ...)
{
  return _[a1 availableModes];
}

id objc_msgSend_backgroundStatisticsFailingContrast(void *a1, const char *a2, ...)
{
  return _[a1 backgroundStatisticsFailingContrast];
}

id objc_msgSend_backgroundStatisticsForeground(void *a1, const char *a2, ...)
{
  return _[a1 backgroundStatisticsForeground];
}

id objc_msgSend_backgroundStatisticsPassingContrast(void *a1, const char *a2, ...)
{
  return _[a1 backgroundStatisticsPassingContrast];
}

id objc_msgSend_backgroundStatisticsRegion(void *a1, const char *a2, ...)
{
  return _[a1 backgroundStatisticsRegion];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 base64EncodedStringWithOptions:];
}

id objc_msgSend_baseAttributesFromProvider_(void *a1, const char *a2, ...)
{
  return [a1 baseAttributesFromProvider:];
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _[a1 begin];
}

id objc_msgSend_beginImplicitTransaction(void *a1, const char *a2, ...)
{
  return _[a1 beginImplicitTransaction];
}

id objc_msgSend_beginTransactionForReason_(void *a1, const char *a2, ...)
{
  return [a1 beginTransactionForReason:];
}

id objc_msgSend_bk_setBackgroundColorRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return [a1 bk_setBackgroundColorRed:green:blue:alpha:];
}

id objc_msgSend_bk_setForegroundColorRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return [a1 bk_setForegroundColorRed:green:blue:alpha:];
}

id objc_msgSend_bksAccelerometerClientRequestedAccelerometerEvents_updateInterval_xThreshold_yThreshold_zThreshold_auditToken_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "bksAccelerometerClientRequestedAccelerometerEvents:updateInterval:xThreshold:yThreshold:zThreshold:auditToken:");
}

id objc_msgSend_bksAccelerometerClientRequestedOrientationEvents_enabled_passiveEvents_auditToken_(void *a1, const char *a2, ...)
{
  return [a1 bksAccelerometerClientRequestedOrientationEvents:enabled:passiveEvents:auditToken:];
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _[a1 blackColor];
}

id objc_msgSend_blank(void *a1, const char *a2, ...)
{
  return _[a1 blank];
}

id objc_msgSend_blankingRemovesPower(void *a1, const char *a2, ...)
{
  return _[a1 blankingRemovesPower];
}

id objc_msgSend_blockSystemApp(void *a1, const char *a2, ...)
{
  return _[a1 blockSystemApp];
}

id objc_msgSend_blockSystemAppForAlternateSystemAppWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 blockSystemAppForAlternateSystemAppWithCompletion:];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _[a1 bounds];
}

id objc_msgSend_brightness(void *a1, const char *a2, ...)
{
  return _[a1 brightness];
}

id objc_msgSend_brightnessCurve(void *a1, const char *a2, ...)
{
  return _[a1 brightnessCurve];
}

id objc_msgSend_brightnessLevel(void *a1, const char *a2, ...)
{
  return _[a1 brightnessLevel];
}

id objc_msgSend_bs_CGPointValue(void *a1, const char *a2, ...)
{
  return [a1 bs_CGPointValue];
}

id objc_msgSend_bs_bytesForMIG(void *a1, const char *a2, ...)
{
  return [a1 bs_bytesForMIG];
}

id objc_msgSend_bs_compactMap_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "bs_compactMap:");
}

id objc_msgSend_bs_containsObjectPassingTest_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "bs_containsObjectPassingTest:");
}

id objc_msgSend_bs_filter_(void *a1, const char *a2, ...)
{
  return [a1 bs_filter:];
}

id objc_msgSend_bs_lengthForMIG(void *a1, const char *a2, ...)
{
  return [a1 bs_lengthForMIG];
}

id objc_msgSend_bs_map_(void *a1, const char *a2, ...)
{
  return [a1 bs_map:];
}

id objc_msgSend_bs_reduce_block_(void *a1, const char *a2, ...)
{
  return [a1 bs_reduce:block:];
}

id objc_msgSend_bs_safeDictionaryForKey_(void *a1, const char *a2, ...)
{
  return [a1 bs_safeDictionaryForKey:];
}

id objc_msgSend_bs_safeStringForKey_(void *a1, const char *a2, ...)
{
  return [a1 bs_safeStringForKey:];
}

id objc_msgSend_bs_secureDecodedFromData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "bs_secureDecodedFromData:");
}

id objc_msgSend_bs_secureDecodedFromData_withAdditionalClasses_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "bs_secureDecodedFromData:withAdditionalClasses:")
}

id objc_msgSend_bs_secureEncoded(void *a1, const char *a2, ...)
{
  return [a1 bs_secureEncoded];
}

id objc_msgSend_bs_secureObjectFromData_ofClass_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "bs_secureObjectFromData:ofClass:");
}

id objc_msgSend_bs_secureObjectFromData_ofClasses_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "bs_secureObjectFromData:ofClasses:");
}

id objc_msgSend_bs_setSafeObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 bs_setSafeObject:forKey:];
}

id objc_msgSend_bs_valueWithCGPoint_(void *a1, const char *a2, ...)
{
  return [a1 bs_valueWithCGPoint:];
}

id objc_msgSend_build(void *a1, const char *a2, ...)
{
  return _[a1 build];
}

id objc_msgSend_build_(void *a1, const char *a2, ...)
{
  return [a1 build:];
}

id objc_msgSend_buildMessage_(void *a1, const char *a2, ...)
{
  return [a1 buildMessage:];
}

id objc_msgSend_buildModeForReason_builder_(void *a1, const char *a2, ...)
{
  return [a1 buildModeForReason:builder:];
}

id objc_msgSend_buildSchemaForClass_builder_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "buildSchemaForClass:builder:");
}

id objc_msgSend_builderWithObject_(void *a1, const char *a2, ...)
{
  return [a1 builderWithObject:];
}

id objc_msgSend_builtinDisplay(void *a1, const char *a2, ...)
{
  return _[a1 builtinDisplay];
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return [a1 bundleForClass:];
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return _[a1 bundleID];
}

id objc_msgSend_bundleIDForPID_(void *a1, const char *a2, ...)
{
  return [a1 bundleIDForPID:];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundlePath(void *a1, const char *a2, ...)
{
  return _[a1 bundlePath];
}

id objc_msgSend_bundleRecordWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "bundleRecordWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return [a1 bundleWithPath:];
}

id objc_msgSend_buttonConfigurationForHardwareButtonMice(void *a1, const char *a2, ...)
{
  return _[a1 buttonConfigurationForHardwareButtonMice];
}

id objc_msgSend_buttonConfigurationForVirtualButtonMice(void *a1, const char *a2, ...)
{
  return _[a1 buttonConfigurationForVirtualButtonMice];
}

id objc_msgSend_buttonDownRepositionUniqueIdentifierToAssertionMap(void *a1, const char *a2, ...)
{
  return _[a1 buttonDownRepositionUniqueIdentifierToAssertionMap];
}

id objc_msgSend_buttonMask(void *a1, const char *a2, ...)
{
  return _[a1 buttonMask];
}

id objc_msgSend_buttonMaskDidChange(void *a1, const char *a2, ...)
{
  return _[a1 buttonMaskDidChange];
}

id objc_msgSend_cachesPath(void *a1, const char *a2, ...)
{
  return _[a1 cachesPath];
}

id objc_msgSend_calendarWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 calendarWithIdentifier:];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAndSuppressTouchesOnDisplay_reason_(void *a1, const char *a2, ...)
{
  return [a1 cancelAndSuppressTouchesOnDisplay:reason:];
}

id objc_msgSend_cancelButtonForSenderID_uagePage_usage_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "cancelButtonForSenderID:uagePage:usage:");
}

id objc_msgSend_cancelTouchesOnAllDisplays(void *a1, const char *a2, ...)
{
  return _[a1 cancelTouchesOnAllDisplays];
}

id objc_msgSend_cancelTouchesOnDisplay_(void *a1, const char *a2, ...)
{
  return [a1 cancelTouchesOnDisplay:];
}

id objc_msgSend_cancelTouchesWithIdentifiers_(void *a1, const char *a2, ...)
{
  return [a1 cancelTouchesWithIdentifiers:];
}

id objc_msgSend_canceledStyle(void *a1, const char *a2, ...)
{
  return _[a1 canceledStyle];
}

id objc_msgSend_centerAtPoint_(void *a1, const char *a2, ...)
{
  return [a1 centerAtPoint:];
}

id objc_msgSend_changeSource(void *a1, const char *a2, ...)
{
  return _[a1 changeSource];
}

id objc_msgSend_claimsToConformToUsagePage_usage_(void *a1, const char *a2, ...)
{
  return [a1 claimsToConformToUsagePage:usage:];
}

id objc_msgSend_classForCoder(void *a1, const char *a2, ...)
{
  return _[a1 classForCoder];
}

id objc_msgSend_classesRequiredToDecode(void *a1, const char *a2, ...)
{
  return _[a1 classesRequiredToDecode];
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return _[a1 clear];
}

id objc_msgSend_clickHapticStrength(void *a1, const char *a2, ...)
{
  return _[a1 clickHapticStrength];
}

id objc_msgSend_clickState(void *a1, const char *a2, ...)
{
  return _[a1 clickState];
}

id objc_msgSend_clickStateWithState_(void *a1, const char *a2, ...)
{
  return [a1 clickStateWithState:];
}

id objc_msgSend_clientConnectionManager(void *a1, const char *a2, ...)
{
  return _[a1 clientConnectionManager];
}

id objc_msgSend_clientEntitlement(void *a1, const char *a2, ...)
{
  return _[a1 clientEntitlement];
}

id objc_msgSend_clientForTaskPort_(void *a1, const char *a2, ...)
{
  return [a1 clientForTaskPort:];
}

id objc_msgSend_cloneMaster(void *a1, const char *a2, ...)
{
  return _[a1 cloneMaster];
}

id objc_msgSend_cloneMirroringRequestsDidChange(void *a1, const char *a2, ...)
{
  return _[a1 cloneMirroringRequestsDidChange];
}

id objc_msgSend_clones(void *a1, const char *a2, ...)
{
  return _[a1 clones];
}

id objc_msgSend_closestRegionForGlobalPoint_returningClosestContainingPoint_returningEdgeMask_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "closestRegionForGlobalPoint:returningClosestContainingPoint:returningEdgeMask:");
}

id objc_msgSend_coalitionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 coalitionIdentifier];
}

id objc_msgSend_collectionLineBreakNoneStyle(void *a1, const char *a2, ...)
{
  return _[a1 collectionLineBreakNoneStyle];
}

id objc_msgSend_collectiveWatchdogPing(void *a1, const char *a2, ...)
{
  return _[a1 collectiveWatchdogPing];
}

id objc_msgSend_colorVariationStyleWithIndex_(void *a1, const char *a2, ...)
{
  return [a1 colorVariationStyleWithIndex:];
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _[a1 commit];
}

id objc_msgSend_compareDate_toDate_toUnitGranularity_(void *a1, const char *a2, ...)
{
  return [a1 compareDate:toDate:toUnitGranularity:];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return [a1 componentsJoinedByString:];
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_configureConnection_(void *a1, const char *a2, ...)
{
  return [a1 configureConnection:];
}

id objc_msgSend_connectionForPID_(void *a1, const char *a2, ...)
{
  return [a1 connectionForPID:];
}

id objc_msgSend_containsIndex_(void *a1, const char *a2, ...)
{
  return [a1 containsIndex:];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return _[a1 content];
}

id objc_msgSend_contentLayer(void *a1, const char *a2, ...)
{
  return _[a1 contentLayer];
}

id objc_msgSend_contentWithSize_(void *a1, const char *a2, ...)
{
  return [a1 contentWithSize:];
}

id objc_msgSend_contentWithString_(void *a1, const char *a2, ...)
{
  return [a1 contentWithString:];
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_contextID(void *a1, const char *a2, ...)
{
  return _[a1 contextID];
}

id objc_msgSend_contextIDAtCAScreenLocation_displayUUID_options_securityAnalysis_results_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "contextIDAtCAScreenLocation:displayUUID:options:securityAnalysis:results:");
}

id objc_msgSend_contextIDsToAlwaysSendTouches(void *a1, const char *a2, ...)
{
  return _[a1 contextIDsToAlwaysSendTouches];
}

id objc_msgSend_contextIDsToExcludeFromHitTesting(void *a1, const char *a2, ...)
{
  return _[a1 contextIDsToExcludeFromHitTesting];
}

id objc_msgSend_contextId(void *a1, const char *a2, ...)
{
  return _[a1 contextId];
}

id objc_msgSend_contextIdHostingContextId_(void *a1, const char *a2, ...)
{
  return [a1 contextIdHostingContextId:];
}

id objc_msgSend_contextRelativePointerPosition(void *a1, const char *a2, ...)
{
  return _[a1 contextRelativePointerPosition];
}

id objc_msgSend_contextWithIdentity_(void *a1, const char *a2, ...)
{
  return [a1 contextWithIdentity:];
}

id objc_msgSend_controlledBySupernode(void *a1, const char *a2, ...)
{
  return _[a1 controlledBySupernode];
}

id objc_msgSend_convertCAScreenLocation_toContextID_displayUUID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertCAScreenLocation:toContextID:displayUUID:");
}

id objc_msgSend_convertFromGlobalPoint_toRegion_(void *a1, const char *a2, ...)
{
  return [a1 convertFromGlobalPoint:x0 toRegion:x1];
}

id objc_msgSend_convertPoint_fromContextId_(void *a1, const char *a2, ...)
{
  return [a1 convertPoint:x0 fromContextId:x1];
}

id objc_msgSend_convertPoint_fromLayer_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertPoint:fromLayer:");
}

id objc_msgSend_convertPoint_toContextId_(void *a1, const char *a2, ...)
{
  return [a1 convertPoint:toContextId:];
}

id objc_msgSend_convertReferenceLocation_toCAScreenLocationForDisplayUUID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertReferenceLocation:toCAScreenLocationForDisplayUUID:");
}

id objc_msgSend_convertToGlobalPoint_fromRegion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertToGlobalPoint:fromRegion:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyPropertyForKey_(void *a1, const char *a2, ...)
{
  return [a1 copyPropertyForKey:];
}

id objc_msgSend_cornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 cornerRadius];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "countByEnumeratingWithState:objects:count:")];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return [a1 createDirectoryAtPath:x0 withIntermediateDirectories:x1 attributes:x2 error:x3];
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return [a1 createFileAtPath:x0 contents:x1 attributes:x2];
}

id objc_msgSend_crosshatchedBackgroundStyle(void *a1, const char *a2, ...)
{
  return _[a1 crosshatchedBackgroundStyle];
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return _[a1 currentConnection];
}

id objc_msgSend_currentContext(void *a1, const char *a2, ...)
{
  return _[a1 currentContext];
}

id objc_msgSend_currentDestinations(void *a1, const char *a2, ...)
{
  return _[a1 currentDestinations];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentMode(void *a1, const char *a2, ...)
{
  return _[a1 currentMode];
}

id objc_msgSend_currentOverlayWithLevel_(void *a1, const char *a2, ...)
{
  return [a1 currentOverlayWithLevel:];
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 currentRunLoop];
}

id objc_msgSend_currentSession(void *a1, const char *a2, ...)
{
  return _[a1 currentSession];
}

id objc_msgSend_currentTranslation(void *a1, const char *a2, ...)
{
  return _[a1 currentTranslation];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataMigrationQueue(void *a1, const char *a2, ...)
{
  return _[a1 dataMigrationQueue];
}

id objc_msgSend_dataMigratorDidComplete(void *a1, const char *a2, ...)
{
  return _[a1 dataMigratorDidComplete];
}

id objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return [a1 dataWithBytesNoCopy:x0 length:x1 freeWhenDone:x2];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingUnit_value_toDate_options_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dateByAddingUnit:value:toDate:options:");
}

id objc_msgSend_deathWatcher(void *a1, const char *a2, ...)
{
  return _[a1 deathWatcher];
}

id objc_msgSend_debugStyle(void *a1, const char *a2, ...)
{
  return _[a1 debugStyle];
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeBoolForKey:];
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeDoubleForKey:];
}

id objc_msgSend_decodeFloatForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeFloatForKey:];
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeInt64ForKey:];
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeIntegerForKey:];
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeObjectOfClass:forKey:];
}

id objc_msgSend_decodeObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return [a1 decodeObjectOfClass:x0 fromData:x1 error:x2];
}

id objc_msgSend_decodeStringForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeStringForKey:];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultDownGainForType_(void *a1, const char *a2, ...)
{
  return [a1 defaultDownGainForType:];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultPreferencesForHardwareType_(void *a1, const char *a2, ...)
{
  return [a1 defaultPreferencesForHardwareType:];
}

id objc_msgSend_defaultUpGainForType_(void *a1, const char *a2, ...)
{
  return [a1 defaultUpGainForType:];
}

id objc_msgSend_definedInReferenceSpace(void *a1, const char *a2, ...)
{
  return _[a1 definedInReferenceSpace];
}

id objc_msgSend_definitionForHomeButton(void *a1, const char *a2, ...)
{
  return _[a1 definitionForHomeButton];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deliveryManager(void *a1, const char *a2, ...)
{
  return _[a1 deliveryManager];
}

id objc_msgSend_denormalizedAbsoluteGlobalPosition_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "denormalizedAbsoluteGlobalPosition:");
}

id objc_msgSend_describes_(void *a1, const char *a2, ...)
{
  return [a1 describes:];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptionBuilderWithMultilinePrefix_(void *a1, const char *a2, ...)
{
  return [a1 descriptionBuilderWithMultilinePrefix:];
}

id objc_msgSend_descriptionForRootObject_(void *a1, const char *a2, ...)
{
  return [a1 descriptionForRootObject:];
}

id objc_msgSend_descriptionForRootObject_withStyle_(void *a1, const char *a2, ...)
{
  return [a1 descriptionForRootObject:withStyle:];
}

id objc_msgSend_descriptionOfResolutionPathForEventDescriptor_senderDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 descriptionOfResolutionPathForEventDescriptor:senderDescriptor:];
}

id objc_msgSend_descriptionOfResolutionPathForKeyCommand_senderDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 descriptionOfResolutionPathForKeyCommand:senderDescriptor:];
}

id objc_msgSend_descriptionWithMultilinePrefix_(void *a1, const char *a2, ...)
{
  return [a1 descriptionWithMultilinePrefix:];
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return _[a1 descriptor];
}

id objc_msgSend_descriptorByAddingSenderIDToMatchCriteria_(void *a1, const char *a2, ...)
{
  return [a1 descriptorByAddingSenderIDToMatchCriteria:];
}

id objc_msgSend_descriptorForHIDEventType_page_usage_(void *a1, const char *a2, ...)
{
  return [a1 descriptorForHIDEventType:page:usage:];
}

id objc_msgSend_destinationPoint(void *a1, const char *a2, ...)
{
  return _[a1 destinationPoint];
}

id objc_msgSend_destinationsForEvent_fromSender_(void *a1, const char *a2, ...)
{
  return [a1 destinationsForEvent:fromSender:];
}

id objc_msgSend_destinationsForEvent_fromSender_overrideSenderDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 destinationsForEvent:fromSender:overrideSenderDescriptor:];
}

id objc_msgSend_destinationsForEvent_sender_(void *a1, const char *a2, ...)
{
  return [a1 destinationsForEvent:sender:];
}

id objc_msgSend_destroyOverlay_(void *a1, const char *a2, ...)
{
  return [a1 destroyOverlay:];
}

id objc_msgSend_detachTouchIdentifiers_count_assignUserIdentifier_policy_offset_(void *a1, const char *a2, ...)
{
  return [a1 detachTouchIdentifiers:x0 count:x1 assignUserIdentifier:x2 policy:x3 offset:x4];
}

id objc_msgSend_detectionMask(void *a1, const char *a2, ...)
{
  return _[a1 detectionMask];
}

id objc_msgSend_deviceAvailabilityMonitor(void *a1, const char *a2, ...)
{
  return _[a1 deviceAvailabilityMonitor];
}

id objc_msgSend_deviceClass(void *a1, const char *a2, ...)
{
  return _[a1 deviceClass];
}

id objc_msgSend_deviceOrientationBlocking(void *a1, const char *a2, ...)
{
  return _[a1 deviceOrientationBlocking];
}

id objc_msgSend_deviceServiceDidAppear_(void *a1, const char *a2, ...)
{
  return [a1 deviceServiceDidAppear:];
}

id objc_msgSend_deviceServiceDidTerminate_(void *a1, const char *a2, ...)
{
  return [a1 deviceServiceDidTerminate:];
}

id objc_msgSend_deviceServices(void *a1, const char *a2, ...)
{
  return _[a1 deviceServices];
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return _[a1 deviceType];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithCapacity:];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObjects:forKeys:count:];
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObjectsAndKeys:];
}

id objc_msgSend_didAddAnnotation(void *a1, const char *a2, ...)
{
  return _[a1 didAddAnnotation];
}

id objc_msgSend_didBlockSystemAppForAlternateSystemApp(void *a1, const char *a2, ...)
{
  return _[a1 didBlockSystemAppForAlternateSystemApp];
}

id objc_msgSend_didPostEvent(void *a1, const char *a2, ...)
{
  return _[a1 didPostEvent];
}

id objc_msgSend_didReceiveEventFromDevice(void *a1, const char *a2, ...)
{
  return _[a1 didReceiveEventFromDevice];
}

id objc_msgSend_didRemoveAnnotation(void *a1, const char *a2, ...)
{
  return _[a1 didRemoveAnnotation];
}

id objc_msgSend_didRemoveSubannotations(void *a1, const char *a2, ...)
{
  return _[a1 didRemoveSubannotations];
}

id objc_msgSend_didRespondBlockForConnection_(void *a1, const char *a2, ...)
{
  return [a1 didRespondBlockForConnection:];
}

id objc_msgSend_didUnblockSystemAppForAlternateSystemApp(void *a1, const char *a2, ...)
{
  return _[a1 didUnblockSystemAppForAlternateSystemApp];
}

id objc_msgSend_diffFromSettings_toSettings_(void *a1, const char *a2, ...)
{
  return [a1 diffFromSettings:toSettings:];
}

id objc_msgSend_digitizerEnabled(void *a1, const char *a2, ...)
{
  return _[a1 digitizerEnabled];
}

id objc_msgSend_digitizerEvents(void *a1, const char *a2, ...)
{
  return _[a1 digitizerEvents];
}

id objc_msgSend_digitizerMatchingDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 digitizerMatchingDictionaries];
}

id objc_msgSend_digitizerServicePersistentPropertyController(void *a1, const char *a2, ...)
{
  return _[a1 digitizerServicePersistentPropertyController];
}

id objc_msgSend_digitizerSurfaceDimensions(void *a1, const char *a2, ...)
{
  return _[a1 digitizerSurfaceDimensions];
}

id objc_msgSend_digitizerVisualizeHitTestRegions(void *a1, const char *a2, ...)
{
  return _[a1 digitizerVisualizeHitTestRegions];
}

id objc_msgSend_digitizerVisualizeTouches(void *a1, const char *a2, ...)
{
  return _[a1 digitizerVisualizeTouches];
}

id objc_msgSend_disableCAOverscan(void *a1, const char *a2, ...)
{
  return _[a1 disableCAOverscan];
}

id objc_msgSend_disableCAScaling(void *a1, const char *a2, ...)
{
  return _[a1 disableCAScaling];
}

id objc_msgSend_disableCAYUV(void *a1, const char *a2, ...)
{
  return _[a1 disableCAYUV];
}

id objc_msgSend_disableCloneMirroring(void *a1, const char *a2, ...)
{
  return _[a1 disableCloneMirroring];
}

id objc_msgSend_disableFeatures(void *a1, const char *a2, ...)
{
  return _[a1 disableFeatures];
}

id objc_msgSend_disableStates_clearAsset_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "disableStates:clearAsset:error:");
}

id objc_msgSend_disableStudyLogALSLogging(void *a1, const char *a2, ...)
{
  return _[a1 disableStudyLogALSLogging];
}

id objc_msgSend_disableStudyLogAccelerometerLogging(void *a1, const char *a2, ...)
{
  return _[a1 disableStudyLogAccelerometerLogging];
}

id objc_msgSend_disableStudyLogBTKeyboardEventLogging(void *a1, const char *a2, ...)
{
  return _[a1 disableStudyLogBTKeyboardEventLogging];
}

id objc_msgSend_disableStudyLogBTKeyboardEventRedirection(void *a1, const char *a2, ...)
{
  return _[a1 disableStudyLogBTKeyboardEventRedirection];
}

id objc_msgSend_disableStudyLogButtonLogging(void *a1, const char *a2, ...)
{
  return _[a1 disableStudyLogButtonLogging];
}

id objc_msgSend_disableStudyLogCameraKeyLogging(void *a1, const char *a2, ...)
{
  return _[a1 disableStudyLogCameraKeyLogging];
}

id objc_msgSend_disableStudyLogGyroLogging(void *a1, const char *a2, ...)
{
  return _[a1 disableStudyLogGyroLogging];
}

id objc_msgSend_disableStudyLogPowerButtonLogging(void *a1, const char *a2, ...)
{
  return _[a1 disableStudyLogPowerButtonLogging];
}

id objc_msgSend_disableStudyLogVolumeKeyLogging(void *a1, const char *a2, ...)
{
  return _[a1 disableStudyLogVolumeKeyLogging];
}

id objc_msgSend_disableUpdateMask(void *a1, const char *a2, ...)
{
  return _[a1 disableUpdateMask];
}

id objc_msgSend_disabled(void *a1, const char *a2, ...)
{
  return _[a1 disabled];
}

id objc_msgSend_disablesDisplayUpdates(void *a1, const char *a2, ...)
{
  return _[a1 disablesDisplayUpdates];
}

id objc_msgSend_disablesUpdates(void *a1, const char *a2, ...)
{
  return _[a1 disablesUpdates];
}

id objc_msgSend_dismissOverlayWithAnimationSettings_requstedByPID_(void *a1, const char *a2, ...)
{
  return [a1 dismissOverlayWithAnimationSettings:x0 requstedByPID:x1];
}

id objc_msgSend_dismissWithAnimationSettings_(void *a1, const char *a2, ...)
{
  return [a1 dismissWithAnimationSettings:];
}

id objc_msgSend_dispatcher(void *a1, const char *a2, ...)
{
  return _[a1 dispatcher];
}

id objc_msgSend_display(void *a1, const char *a2, ...)
{
  return _[a1 display];
}

id objc_msgSend_display_didBecomeBlank_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "display:didBecomeBlank:");
}

id objc_msgSend_displayBrightnessCurve(void *a1, const char *a2, ...)
{
  return _[a1 displayBrightnessCurve];
}

id objc_msgSend_displayController(void *a1, const char *a2, ...)
{
  return _[a1 displayController];
}

id objc_msgSend_displayId(void *a1, const char *a2, ...)
{
  return _[a1 displayId];
}

id objc_msgSend_displayIsBlanked_(void *a1, const char *a2, ...)
{
  return [a1 displayIsBlanked:];
}

id objc_msgSend_displayIsConnected_(void *a1, const char *a2, ...)
{
  return [a1 displayIsConnected:];
}

id objc_msgSend_displayLinkClass(void *a1, const char *a2, ...)
{
  return _[a1 displayLinkClass];
}

id objc_msgSend_displayLinkDisabled(void *a1, const char *a2, ...)
{
  return _[a1 displayLinkDisabled];
}

id objc_msgSend_displayLinkFired_(void *a1, const char *a2, ...)
{
  return [a1 displayLinkFired:];
}

id objc_msgSend_displayLinkWithDisplay_target_selector_(void *a1, const char *a2, ...)
{
  return [a1 displayLinkWithDisplay:x0 target:x1 selector:x2];
}

id objc_msgSend_displayLinkWithTarget_selector_(void *a1, const char *a2, ...)
{
  return [a1 displayLinkWithTarget:selector:];
}

id objc_msgSend_displayProvider(void *a1, const char *a2, ...)
{
  return _[a1 displayProvider];
}

id objc_msgSend_displayState(void *a1, const char *a2, ...)
{
  return _[a1 displayState];
}

id objc_msgSend_displayUUID(void *a1, const char *a2, ...)
{
  return _[a1 displayUUID];
}

id objc_msgSend_displayUUIDIsActive_(void *a1, const char *a2, ...)
{
  return [a1 displayUUIDIsActive:];
}

id objc_msgSend_displayWithDisplayId_(void *a1, const char *a2, ...)
{
  return [a1 displayWithDisplayId:];
}

id objc_msgSend_displayWithHardwareIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 displayWithHardwareIdentifier:];
}

id objc_msgSend_displayWithName_(void *a1, const char *a2, ...)
{
  return [a1 displayWithName:];
}

id objc_msgSend_displayWithUniqueId_(void *a1, const char *a2, ...)
{
  return [a1 displayWithUniqueId:];
}

id objc_msgSend_displays(void *a1, const char *a2, ...)
{
  return _[a1 displays];
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _[a1 distantPast];
}

id objc_msgSend_doItHide(void *a1, const char *a2, ...)
{
  return _[a1 doItHide];
}

id objc_msgSend_doubleTapDragMode(void *a1, const char *a2, ...)
{
  return _[a1 doubleTapDragMode];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _[a1 duration];
}

id objc_msgSend_edge(void *a1, const char *a2, ...)
{
  return _[a1 edge];
}

id objc_msgSend_edgePosition(void *a1, const char *a2, ...)
{
  return _[a1 edgePosition];
}

id objc_msgSend_ellipseStyle(void *a1, const char *a2, ...)
{
  return _[a1 ellipseStyle];
}

id objc_msgSend_emphasizedStyle(void *a1, const char *a2, ...)
{
  return _[a1 emphasizedStyle];
}

id objc_msgSend_enableNaturalScrolling(void *a1, const char *a2, ...)
{
  return _[a1 enableNaturalScrolling];
}

id objc_msgSend_enableStates_error_(void *a1, const char *a2, ...)
{
  return [a1 enableStates:error];
}

id objc_msgSend_enableTapToClick(void *a1, const char *a2, ...)
{
  return _[a1 enableTapToClick];
}

id objc_msgSend_enableTwoFingerSecondaryClick(void *a1, const char *a2, ...)
{
  return _[a1 enableTwoFingerSecondaryClick];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeBool:forKey:];
}

id objc_msgSend_encodeFloat_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeFloat:forKey:];
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeInteger:forKey:];
}

id objc_msgSend_encodeObject_error_(void *a1, const char *a2, ...)
{
  return [a1 encodeObject:error:];
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeObject:forKey:];
}

id objc_msgSend_entitlementCache(void *a1, const char *a2, ...)
{
  return _[a1 entitlementCache];
}

id objc_msgSend_enumerateIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateIndexesUsingBlock:];
}

id objc_msgSend_enumerateIndexesWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateIndexesWithOptions:];
}

id objc_msgSend_enumerateKeyPathNodes_options_ifFound_ifMissing_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeyPathNodes:options:ifFound:ifMissing:];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndObjectsUsingBlock:];
}

id objc_msgSend_enumerateKeysAndObjectsWithIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndObjectsWithIndexesUsingBlock:];
}

id objc_msgSend_enumerateNodesWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateNodesWithOptions:];
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateObjectsUsingBlock:];
}

id objc_msgSend_enumerateRangesUsingBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "enumerateRangesUsingBlock:");
}

id objc_msgSend_enumerateUserInfoWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateUserInfoWithBlock:];
}

id objc_msgSend_enumerateWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateWithBlock:];
}

id objc_msgSend_enumeratorAtPath_(void *a1, const char *a2, ...)
{
  return [a1 enumeratorAtPath:];
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _[a1 environment];
}

id objc_msgSend_environmentRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 environmentRepresentation];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:code:userInfo:];
}

id objc_msgSend_estimatedProxPowerAssertionID(void *a1, const char *a2, ...)
{
  return _[a1 estimatedProxPowerAssertionID];
}

id objc_msgSend_estimatedProximityMode(void *a1, const char *a2, ...)
{
  return _[a1 estimatedProximityMode];
}

id objc_msgSend_evaluateDisplay_reason_(void *a1, const char *a2, ...)
{
  return [a1 evaluateDisplay:reason:];
}

id objc_msgSend_evaluatePeriodicReportingTrigger(void *a1, const char *a2, ...)
{
  return _[a1 evaluatePeriodicReportingTrigger];
}

id objc_msgSend_eventDispatcher(void *a1, const char *a2, ...)
{
  return _[a1 eventDispatcher];
}

id objc_msgSend_eventProcessorOfClass_(void *a1, const char *a2, ...)
{
  return [a1 eventProcessorOfClass:];
}

id objc_msgSend_eventProcessorRegistry(void *a1, const char *a2, ...)
{
  return _[a1 eventProcessorRegistry];
}

id objc_msgSend_eventSequenceStartTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 eventSequenceStartTimestamp];
}

id objc_msgSend_eventSource(void *a1, const char *a2, ...)
{
  return _[a1 eventSource];
}

id objc_msgSend_eventSourceForSender_(void *a1, const char *a2, ...)
{
  return [a1 eventSourceForSender:];
}

id objc_msgSend_eventTypeMask(void *a1, const char *a2, ...)
{
  return _[a1 eventTypeMask];
}

id objc_msgSend_executablePath(void *a1, const char *a2, ...)
{
  return _[a1 executablePath];
}

id objc_msgSend_execute_(void *a1, const char *a2, ...)
{
  return [a1 execute:];
}

id objc_msgSend_execute_error_(void *a1, const char *a2, ...)
{
  return [a1 execute:error];
}

id objc_msgSend_externalDefaults(void *a1, const char *a2, ...)
{
  return _[a1 externalDefaults];
}

id objc_msgSend_fastConfigDictionaryForHAButtonHapticType_(void *a1, const char *a2, ...)
{
  return [a1 fastConfigDictionaryForHAButtonHapticType:];
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return [a1 fileExistsAtPath:];
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:x0 isDirectory:x1];
}

id objc_msgSend_filterDestinations_(void *a1, const char *a2, ...)
{
  return [a1 filterDestinations:];
}

id objc_msgSend_firstAdditionalContext(void *a1, const char *a2, ...)
{
  return _[a1 firstAdditionalContext];
}

id objc_msgSend_firstBootDetectorDidFinishFirstBoot_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "firstBootDetectorDidFinishFirstBoot:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_fixedBrightnessLevelWhileDisabled(void *a1, const char *a2, ...)
{
  return _[a1 fixedBrightnessLevelWhileDisabled];
}

id objc_msgSend_fixedBrightnessNitsWhileDisabled(void *a1, const char *a2, ...)
{
  return _[a1 fixedBrightnessNitsWhileDisabled];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _[a1 flush];
}

id objc_msgSend_force(void *a1, const char *a2, ...)
{
  return _[a1 force];
}

id objc_msgSend_forceCloneMirroring(void *a1, const char *a2, ...)
{
  return _[a1 forceCloneMirroring];
}

id objc_msgSend_forceDidChange(void *a1, const char *a2, ...)
{
  return _[a1 forceDidChange];
}

id objc_msgSend_forceMirroredOrientation(void *a1, const char *a2, ...)
{
  return _[a1 forceMirroredOrientation];
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _[a1 frame];
}

id objc_msgSend_frameDidEnd(void *a1, const char *a2, ...)
{
  return _[a1 frameDidEnd];
}

id objc_msgSend_frameWillBegin(void *a1, const char *a2, ...)
{
  return _[a1 frameWillBegin];
}

id objc_msgSend_freeze(void *a1, const char *a2, ...)
{
  return _[a1 freeze];
}

id objc_msgSend_freezeOverlay_(void *a1, const char *a2, ...)
{
  return [a1 freezeOverlay:];
}

id objc_msgSend_geometryForDisplayUUID_(void *a1, const char *a2, ...)
{
  return [a1 geometryForDisplayUUID:];
}

id objc_msgSend_getArgument_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 getArgument:atIndex:];
}

id objc_msgSend_getHitTestContextsAtPoint_withAdditionalContexts_onDisplay_withCompletion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getHitTestContextsAtPoint:withAdditionalContexts:onDisplay:withCompletion:");
}

id objc_msgSend_getStatus_presence_proximityInCentimeters_forDisplayUUID_(void *a1, const char *a2, ...)
{
  return [a1 getStatus:x0 presence:x1 proximityInCentimeters:x2 forDisplayUUID:x3];
}

id objc_msgSend_globalDevicePreferences(void *a1, const char *a2, ...)
{
  return _[a1 globalDevicePreferences];
}

id objc_msgSend_globalKeyboardModifiersDidChange_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "globalKeyboardModifiersDidChange:");
}

id objc_msgSend_globalMouseDevicePreferences(void *a1, const char *a2, ...)
{
  return _[a1 globalMouseDevicePreferences];
}

id objc_msgSend_globalPointerPosition(void *a1, const char *a2, ...)
{
  return _[a1 globalPointerPosition];
}

id objc_msgSend_grant(void *a1, const char *a2, ...)
{
  return _[a1 grant];
}

id objc_msgSend_grantWithForegroundPriority(void *a1, const char *a2, ...)
{
  return _[a1 grantWithForegroundPriority];
}

id objc_msgSend_grantWithNamespace_endowment_(void *a1, const char *a2, ...)
{
  return [a1 grantWithNamespace:endowment:];
}

id objc_msgSend_grantWithResistance_(void *a1, const char *a2, ...)
{
  return [a1 grantWithResistance:];
}

id objc_msgSend_grantWithUserInteractivity(void *a1, const char *a2, ...)
{
  return _[a1 grantWithUserInteractivity];
}

id objc_msgSend_handleAccelerometerEventWithTimestamp_x_y_z_samplingInterval_(void *a1, const char *a2, ...)
{
  return [a1 handleAccelerometerEventWithTimestamp:x0 x:x1 y:x2 z:x3 samplingInterval:x4];
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleOrientationEvent_orientationLocked_(void *a1, const char *a2, ...)
{
  return [a1 handleOrientationEvent:orientationLocked:];
}

id objc_msgSend_hapticClickCount(void *a1, const char *a2, ...)
{
  return _[a1 hapticClickCount];
}

id objc_msgSend_hapticGainForType_(void *a1, const char *a2, ...)
{
  return [a1 hapticGainForType:];
}

id objc_msgSend_hardwareType(void *a1, const char *a2, ...)
{
  return _[a1 hardwareType];
}

id objc_msgSend_hasDebugStyle(void *a1, const char *a2, ...)
{
  return _[a1 hasDebugStyle];
}

id objc_msgSend_hasDeviceAvailable(void *a1, const char *a2, ...)
{
  return _[a1 hasDeviceAvailable];
}

id objc_msgSend_hasEntitlement_(void *a1, const char *a2, ...)
{
  return [a1 hasEntitlement:];
}

id objc_msgSend_hasEntitlement_forAuditToken_(void *a1, const char *a2, ...)
{
  return [a1 hasEntitlement:forAuditToken:];
}

id objc_msgSend_hasEntitlement_forConnection_(void *a1, const char *a2, ...)
{
  return [a1 hasEntitlement:forConnection:];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return [a1 hasPrefix:];
}

id objc_msgSend_hasSuccinctStyle(void *a1, const char *a2, ...)
{
  return _[a1 hasSuccinctStyle];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return [a1 hasSuffix:];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_height(void *a1, const char *a2, ...)
{
  return _[a1 height];
}

id objc_msgSend_hideAppleLogoOnLaunch(void *a1, const char *a2, ...)
{
  return _[a1 hideAppleLogoOnLaunch];
}

id objc_msgSend_hitTestAtPosition_options_(void *a1, const char *a2, ...)
{
  return [a1 hitTestAtPosition:x0 options:x1];
}

id objc_msgSend_hitTestCategoryForContextID_(void *a1, const char *a2, ...)
{
  return [a1 hitTestCategoryForContextID:];
}

id objc_msgSend_hitTestInformationMask(void *a1, const char *a2, ...)
{
  return _[a1 hitTestInformationMask];
}

id objc_msgSend_hitTestReason(void *a1, const char *a2, ...)
{
  return _[a1 hitTestReason];
}

id objc_msgSend_hitTestRegionsDidChange_(void *a1, const char *a2, ...)
{
  return [a1 hitTestRegionsDidChange:];
}

id objc_msgSend_hitTestRegionsDidChange_forDisplayUUID_(void *a1, const char *a2, ...)
{
  return [a1 hitTestRegionsDidChange:forDisplayUUID:];
}

id objc_msgSend_homeButtonType(void *a1, const char *a2, ...)
{
  return _[a1 homeButtonType];
}

id objc_msgSend_hostContextIDForEmbeddedContextID_displayUUID_(void *a1, const char *a2, ...)
{
  return [a1 hostContextIDForEmbeddedContextID:displayUUID:];
}

id objc_msgSend_humanIsPresent(void *a1, const char *a2, ...)
{
  return _[a1 humanIsPresent];
}

id objc_msgSend_iapDefaults(void *a1, const char *a2, ...)
{
  return _[a1 iapDefaults];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identityForEmbeddedApplicationIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 identityForEmbeddedApplicationIdentifier:];
}

id objc_msgSend_ignoreAccelerometerAndOrientationEvents(void *a1, const char *a2, ...)
{
  return _[a1 ignoreAccelerometerAndOrientationEvents];
}

id objc_msgSend_ignoreTetheringPreferences(void *a1, const char *a2, ...)
{
  return _[a1 ignoreTetheringPreferences];
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _[a1 image];
}

id objc_msgSend_imageAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 imageAtIndex:];
}

id objc_msgSend_immutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 immutableCopy];
}

id objc_msgSend_immutableDisplayForUUID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "immutableDisplayForUUID:");
}

id objc_msgSend_includeBitNumber_(void *a1, const char *a2, ...)
{
  return [a1 includeBitNumber:];
}

id objc_msgSend_increment(void *a1, const char *a2, ...)
{
  return _[a1 increment];
}

id objc_msgSend_indexOfObject_inSortedRange_options_usingComparator_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "indexOfObject:inSortedRange:options:usingComparator:");
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _[a1 indexSet];
}

id objc_msgSend_indexesPassingTest_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "indexesPassingTest:");
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return _[a1 infoDictionary];
}

id objc_msgSend_infoForDisplayUUID_createIfNeeded_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "infoForDisplayUUID:createIfNeeded:");
}

id objc_msgSend_inhibitRotation(void *a1, const char *a2, ...)
{
  return _[a1 inhibitRotation];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initForAllManagedWithReason_(void *a1, const char *a2, ...)
{
  return [a1 initForAllManagedWithReason:];
}

id objc_msgSend_initForDisplay_(void *a1, const char *a2, ...)
{
  return [a1 initForDisplay:];
}

id objc_msgSend_initWithBHButtonHapticsController_(void *a1, const char *a2, ...)
{
  return [a1 initWithBHButtonHapticsController:];
}

id objc_msgSend_initWithBasename_bundle_imageCount_scale_(void *a1, const char *a2, ...)
{
  return [a1 initWithBasename:x0 bundle:x1 imageCount:x2 scale:x3];
}

id objc_msgSend_initWithBundleId_options_queue_(void *a1, const char *a2, ...)
{
  return [a1 initWithBundleId:options:queue:];
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return [a1 initWithBytesNoCopy:x0 length:x1 freeWhenDone:x2];
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 initWithCapacity:];
}

id objc_msgSend_initWithCoalitionIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithCoalitionIdentifier:];
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 initWithConfiguration:];
}

id objc_msgSend_initWithConnection_pid_(void *a1, const char *a2, ...)
{
  return [a1 initWithConnection:pid];
}

id objc_msgSend_initWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithContentsOfFile:x0 options:x1 error:x2];
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return [a1 initWithContext:];
}

id objc_msgSend_initWithContextID_clientPort_(void *a1, const char *a2, ...)
{
  return [a1 initWithContextID:clientPort:];
}

id objc_msgSend_initWithController_(void *a1, const char *a2, ...)
{
  return [a1 initWithController:];
}

id objc_msgSend_initWithDelegate_serverTarget_serverProtocol_clientProtocol_serviceName_queue_log_entitlement_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:a2 serverTarget:a3 serverProtocol:a4 clientProtocol:a5 serviceName:a6 queue:a7 log:a8 entitlement:a9];
}

id objc_msgSend_initWithDeliveryManager_ruleChangeAuthority_(void *a1, const char *a2, ...)
{
  return [a1 initWithDeliveryManager:ruleChangeAuthority:];
}

id objc_msgSend_initWithDisplayLinkClass_display_target_action_(void *a1, const char *a2, ...)
{
  return [a1 initWithDisplayLinkClass:display:target:action:];
}

id objc_msgSend_initWithDisplayProvider_(void *a1, const char *a2, ...)
{
  return [a1 initWithDisplayProvider:];
}

id objc_msgSend_initWithDisplayProvider_log_filterPredicate_(void *a1, const char *a2, ...)
{
  return [a1 initWithDisplayProvider:x0 log:x1 filterPredicate:x2];
}

id objc_msgSend_initWithDisplayUUID_(void *a1, const char *a2, ...)
{
  return [a1 initWithDisplayUUID:];
}

id objc_msgSend_initWithExplanation_(void *a1, const char *a2, ...)
{
  return [a1 initWithExplanation:];
}

id objc_msgSend_initWithExplanation_target_attributes_(void *a1, const char *a2, ...)
{
  return [a1 initWithExplanation:x0 target:x1 attributes:x2];
}

id objc_msgSend_initWithFireInterval_queue_handler_(void *a1, const char *a2, ...)
{
  return [a1 initWithFireInterval:x0 queue:x1 handler:x2];
}

id objc_msgSend_initWithFirstBootDetector_(void *a1, const char *a2, ...)
{
  return [a1 initWithFirstBootDetector:];
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 initWithFormat:];
}

id objc_msgSend_initWithHIDHapticFeedbackInterface_(void *a1, const char *a2, ...)
{
  return [a1 initWithHIDHapticFeedbackInterface:];
}

id objc_msgSend_initWithHIDSystem_(void *a1, const char *a2, ...)
{
  return [a1 initWithHIDSystem:];
}

id objc_msgSend_initWithIOHIDService_(void *a1, const char *a2, ...)
{
  return [a1 initWithIOHIDService:];
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:];
}

id objc_msgSend_initWithIdentifier_forReason_contextRelativePointerPosition_displayUUID_restrictingToPID_invalidationBlock_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 forReason:x1 contextRelativePointerPosition:x2 displayUUID:x3 restrictingToPID:x4 invalidationBlock:x5];
}

id objc_msgSend_initWithIdentifier_forReason_invalidationBlock_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 forReason:x1 invalidationBlock:x2];
}

id objc_msgSend_initWithIdentifier_transactionManager_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 transactionManager:x1];
}

id objc_msgSend_initWithInterpolatedEventTypeMask_postEventsBlock_(void *a1, const char *a2, ...)
{
  return [a1 initWithInterpolatedEventTypeMask:postEventsBlock:];
}

id objc_msgSend_initWithLabel_(void *a1, const char *a2, ...)
{
  return [a1 initWithLabel:];
}

id objc_msgSend_initWithLabel_logCategory_(void *a1, const char *a2, ...)
{
  return [a1 initWithLabel:x0 logCategory:x1];
}

id objc_msgSend_initWithLog_(void *a1, const char *a2, ...)
{
  return [a1 initWithLog:];
}

id objc_msgSend_initWithLogger_(void *a1, const char *a2, ...)
{
  return [a1 initWithLogger:];
}

id objc_msgSend_initWithLogger_duration_(void *a1, const char *a2, ...)
{
  return [a1 initWithLogger:x0 duration:x1];
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return [a1 initWithMachServiceName:];
}

id objc_msgSend_initWithMatchingDictionary_dataProvider_(void *a1, const char *a2, ...)
{
  return [a1 initWithMatchingDictionary:x0 dataProvider:x1];
}

id objc_msgSend_initWithMatchingDictionary_instantiateWrapperUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 initWithMatchingDictionary:x0 instantiateWrapperUsingBlock:x1];
}

id objc_msgSend_initWithName_display_(void *a1, const char *a2, ...)
{
  return [a1 initWithName:display:];
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return [a1 initWithObjects:];
}

id objc_msgSend_initWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 initWithObjects:];
}

id objc_msgSend_initWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return [a1 initWithObjects:forKeys:];
}

id objc_msgSend_initWithObserver_queue_(void *a1, const char *a2, ...)
{
  return [a1 initWithObserver:queue:];
}

id objc_msgSend_initWithObserverService_(void *a1, const char *a2, ...)
{
  return [a1 initWithObserverService:];
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 initWithOptions:];
}

id objc_msgSend_initWithOptions_capacity_(void *a1, const char *a2, ...)
{
  return [a1 initWithOptions:x0 capacity:x1];
}

id objc_msgSend_initWithOverlayDescriptor_level_(void *a1, const char *a2, ...)
{
  return [a1 initWithOverlayDescriptor:level:];
}

id objc_msgSend_initWithPID_queue_deathHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithPID:x0 queue:x1 deathHandler:x2];
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return [a1 initWithPath:];
}

id objc_msgSend_initWithPid_sendRight_(void *a1, const char *a2, ...)
{
  return [a1 initWithPid:x0 sendRight:x1];
}

id objc_msgSend_initWithPid_sendRight_queue_(void *a1, const char *a2, ...)
{
  return [a1 initWithPid:x0 sendRight:x1 queue:x2];
}

id objc_msgSend_initWithPid_sendRight_queue_processName_(void *a1, const char *a2, ...)
{
  return [a1 initWithPid:x0 sendRight:x1 queue:x2 processName:x3];
}

id objc_msgSend_initWithPoint_contextID_(void *a1, const char *a2, ...)
{
  return [a1 initWithPoint:x0 contextID:x1];
}

id objc_msgSend_initWithPointSize_cornerRadius_scale_displayUUID_(void *a1, const char *a2, ...)
{
  return [a1 initWithPointSize:x0 cornerRadius:x1 scale:x2 displayUUID:x3];
}

id objc_msgSend_initWithPort_(void *a1, const char *a2, ...)
{
  return [a1 initWithPort:];
}

id objc_msgSend_initWithPredicate_context_(void *a1, const char *a2, ...)
{
  return [a1 initWithPredicate:x0 context:x1];
}

id objc_msgSend_initWithProcessId_contextIds_(void *a1, const char *a2, ...)
{
  return [a1 initWithProcessId:x0 contextIds:x1];
}

id objc_msgSend_initWithProgressBarVisibility_createContext_contextLevel_appearance_(void *a1, const char *a2, ...)
{
  return [a1 initWithProgressBarVisibility:x0 createContext:x1 contextLevel:x2 appearance:x3];
}

id objc_msgSend_initWithRed_green_blue_(void *a1, const char *a2, ...)
{
  return [a1 initWithRed:x0 green:x1 blue:x2];
}

id objc_msgSend_initWithRegion_relativeRegion_edge_edgePosition_(void *a1, const char *a2, ...)
{
  return [a1 initWithRegion:x0 relativeRegion:x1 edge:x2 edgePosition:x3];
}

id objc_msgSend_initWithRelativeTranslation_animationSettings_(void *a1, const char *a2, ...)
{
  return [a1 initWithRelativeTranslation:x0 animationSettings:x1];
}

id objc_msgSend_initWithRelativeTranslation_destinationPoint_animationDriver_updateRate_applierBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 initWithRelativeTranslation:x0 destinationPoint:x1 animationDriver:x2 updateRate:x3 applierBlock:x4 completionBlock:x5];
}

id objc_msgSend_initWithRelativeTranslation_initialVelocity_decelerationRate_(void *a1, const char *a2, ...)
{
  return [a1 initWithRelativeTranslation:x0 initialVelocity:x1 decelerationRate:x2];
}

id objc_msgSend_initWithSecureModeViolations_(void *a1, const char *a2, ...)
{
  return [a1 initWithSecureModeViolations:];
}

id objc_msgSend_initWithSendRight_(void *a1, const char *a2, ...)
{
  return [a1 initWithSendRight:];
}

id objc_msgSend_initWithSenderDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 initWithSenderDescriptor:];
}

id objc_msgSend_initWithSenderDescriptor_matcherDataProvider_persistentPropertyController_(void *a1, const char *a2, ...)
{
  return [a1 initWithSenderDescriptor:x0 matcherDataProvider:x1 persistentPropertyController:x2];
}

id objc_msgSend_initWithSensorConfiguration_displayBrightnessController_(void *a1, const char *a2, ...)
{
  return [a1 initWithSensorConfiguration:displayBrightnessController:];
}

id objc_msgSend_initWithSentinel_(void *a1, const char *a2, ...)
{
  return [a1 initWithSentinel:];
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return [a1 initWithService:];
}

id objc_msgSend_initWithSupportedHES_disengagedHES_attached_unknownState_(void *a1, const char *a2, ...)
{
  return [a1 initWithSupportedHES:x0 disengagedHES:x1 attached:x2 unknownState:x3];
}

id objc_msgSend_initWithSystemAppSentinel_alternateSystemAppManager_firstBootDetector_bootUIOverlayVendor_renderOverlayManager_(void *a1, const char *a2, ...)
{
  return [a1 initWithSystemAppSentinel:x0 alternateSystemAppManager:x1 firstBootDetector:x2 bootUIOverlayVendor:x3 renderOverlayManager:x4];
}

id objc_msgSend_initWithSystemAppSentinel_firstBootToken_alternateSystemAppManager_(void *a1, const char *a2, ...)
{
  return [a1 initWithSystemAppSentinel:x0 firstBootToken:x1 alternateSystemAppManager:x2];
}

id objc_msgSend_initWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return [a1 initWithTarget:a2 selector:a3 object:a4];
}

id objc_msgSend_initWithUsagePage_usage_builtIn_dataProvider_(void *a1, const char *a2, ...)
{
  return [a1 initWithUsagePage:x0 usage:x1 builtIn:x2 dataProvider:x3];
}

id objc_msgSend_initialSampleEvent(void *a1, const char *a2, ...)
{
  return _[a1 initialSampleEvent];
}

id objc_msgSend_initialize(void *a1, const char *a2, ...)
{
  return _[a1 initialize];
}

id objc_msgSend_injectGSEvent_(void *a1, const char *a2, ...)
{
  return [a1 injectGSEvent:];
}

id objc_msgSend_injectHIDEvent_(void *a1, const char *a2, ...)
{
  return [a1 injectHIDEvent:];
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 insertObject:atIndex:];
}

id objc_msgSend_insertSublayer_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 insertSublayer:atIndex:];
}

id objc_msgSend_inspectChangesFromState_toState_withBlock_(void *a1, const char *a2, ...)
{
  return [a1 inspectChangesFromState:toState:withBlock:];
}

id objc_msgSend_inspectChangesWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 inspectChangesWithBlock:];
}

id objc_msgSend_inspectChangesWithOldPolicy_newPolicy_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 inspectChangesWithOldPolicy:newPolicy:usingBlock:];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _[a1 interface];
}

id objc_msgSend_interfaceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 interfaceOrientation];
}

id objc_msgSend_interfaceWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 interfaceWithIdentifier:];
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return [a1 interfaceWithProtocol:];
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return [a1 intersectSet:];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateAbsolutePosition(void *a1, const char *a2, ...)
{
  return _[a1 invalidateAbsolutePosition];
}

id objc_msgSend_invalidateTouchStreamReference_(void *a1, const char *a2, ...)
{
  return [a1 invalidateTouchStreamReference:];
}

id objc_msgSend_invoke(void *a1, const char *a2, ...)
{
  return _[a1 invoke];
}

id objc_msgSend_isALSSupported(void *a1, const char *a2, ...)
{
  return _[a1 isALSSupported];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isAlive(void *a1, const char *a2, ...)
{
  return _[a1 isAlive];
}

id objc_msgSend_isAlsSupported(void *a1, const char *a2, ...)
{
  return _[a1 isAlsSupported];
}

id objc_msgSend_isAuthenticated(void *a1, const char *a2, ...)
{
  return _[a1 isAuthenticated];
}

id objc_msgSend_isAutoBrightnessAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isAutoBrightnessAvailable];
}

id objc_msgSend_isBlanked(void *a1, const char *a2, ...)
{
  return _[a1 isBlanked];
}

id objc_msgSend_isBrightnessLevelControlAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isBrightnessLevelControlAvailable];
}

id objc_msgSend_isBuiltIn(void *a1, const char *a2, ...)
{
  return _[a1 isBuiltIn];
}

id objc_msgSend_isCapsLockLightOn(void *a1, const char *a2, ...)
{
  return _[a1 isCapsLockLightOn];
}

id objc_msgSend_isCapsLockLightOnForSenderID_(void *a1, const char *a2, ...)
{
  return [a1 isCapsLockLightOnForSenderID:];
}

id objc_msgSend_isComplete(void *a1, const char *a2, ...)
{
  return _[a1 isComplete];
}

id objc_msgSend_isDigitizerSignpostsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isDigitizerSignpostsEnabled];
}

id objc_msgSend_isDitheringEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isDitheringEnabled];
}

id objc_msgSend_isEffectivelyEqualToMode_(void *a1, const char *a2, ...)
{
  return [a1 isEffectivelyEqualToMode:];
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isEnabled];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return [a1 isEqual:];
}

id objc_msgSend_isEqualToIndexSet_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToIndexSet:];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToString:];
}

id objc_msgSend_isExternal(void *a1, const char *a2, ...)
{
  return _[a1 isExternal];
}

id objc_msgSend_isFirstBoot(void *a1, const char *a2, ...)
{
  return _[a1 isFirstBoot];
}

id objc_msgSend_isFlipBookEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isFlipBookEnabled];
}

id objc_msgSend_isFlipBookSuppressed(void *a1, const char *a2, ...)
{
  return _[a1 isFlipBookSuppressed];
}

id objc_msgSend_isFrozen(void *a1, const char *a2, ...)
{
  return _[a1 isFrozen];
}

id objc_msgSend_isLongPressEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isLongPressEnabled];
}

id objc_msgSend_isObjectWithinProximity(void *a1, const char *a2, ...)
{
  return _[a1 isObjectWithinProximity];
}

id objc_msgSend_isPaused(void *a1, const char *a2, ...)
{
  return _[a1 isPaused];
}

id objc_msgSend_isPencilDigitizer(void *a1, const char *a2, ...)
{
  return _[a1 isPencilDigitizer];
}

id objc_msgSend_isProximityDetectionActive(void *a1, const char *a2, ...)
{
  return _[a1 isProximityDetectionActive];
}

id objc_msgSend_isRequired(void *a1, const char *a2, ...)
{
  return _[a1 isRequired];
}

id objc_msgSend_isRestrictedToSystemShell(void *a1, const char *a2, ...)
{
  return _[a1 isRestrictedToSystemShell];
}

id objc_msgSend_isSafeToResetIdleTimer(void *a1, const char *a2, ...)
{
  return _[a1 isSafeToResetIdleTimer];
}

id objc_msgSend_isSecureModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isSecureModeEnabled];
}

id objc_msgSend_isSenderLocked(void *a1, const char *a2, ...)
{
  return _[a1 isSenderLocked];
}

id objc_msgSend_isShowingNonBootUIOverlays(void *a1, const char *a2, ...)
{
  return _[a1 isShowingNonBootUIOverlays];
}

id objc_msgSend_isSmartCoverClosed(void *a1, const char *a2, ...)
{
  return _[a1 isSmartCoverClosed];
}

id objc_msgSend_isSmartCoverSupported(void *a1, const char *a2, ...)
{
  return _[a1 isSmartCoverSupported];
}

id objc_msgSend_isSpringAnimation(void *a1, const char *a2, ...)
{
  return _[a1 isSpringAnimation];
}

id objc_msgSend_isSqueezeForSystemShortcutEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isSqueezeForSystemShortcutEnabled];
}

id objc_msgSend_isSteveNoteOverscanEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isSteveNoteOverscanEnabled];
}

id objc_msgSend_isSteveNoteRotationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isSteveNoteRotationEnabled];
}

id objc_msgSend_isTethered(void *a1, const char *a2, ...)
{
  return _[a1 isTethered];
}

id objc_msgSend_isTokenSet(void *a1, const char *a2, ...)
{
  return _[a1 isTokenSet];
}

id objc_msgSend_isUsable(void *a1, const char *a2, ...)
{
  return _[a1 isUsable];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isVirtualService(void *a1, const char *a2, ...)
{
  return _[a1 isVirtualService];
}

id objc_msgSend_jobLabel(void *a1, const char *a2, ...)
{
  return _[a1 jobLabel];
}

id objc_msgSend_keyCommand(void *a1, const char *a2, ...)
{
  return _[a1 keyCommand];
}

id objc_msgSend_keyCommandForEvent_gsKeyboard_activeModifiers_(void *a1, const char *a2, ...)
{
  return [a1 keyCommandForEvent:gsKeyboard:activeModifiers:];
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 keyEnumerator];
}

id objc_msgSend_keyPath(void *a1, const char *a2, ...)
{
  return _[a1 keyPath];
}

id objc_msgSend_keyboardDefaults(void *a1, const char *a2, ...)
{
  return _[a1 keyboardDefaults];
}

id objc_msgSend_keyboardEventProcessor(void *a1, const char *a2, ...)
{
  return _[a1 keyboardEventProcessor];
}

id objc_msgSend_keyboardFocusEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 keyboardFocusEnvironment];
}

id objc_msgSend_keyboardTypeRemap(void *a1, const char *a2, ...)
{
  return _[a1 keyboardTypeRemap];
}

id objc_msgSend_keyboardWantsStandardTypeOverrideForSenderID_(void *a1, const char *a2, ...)
{
  return [a1 keyboardWantsStandardTypeOverrideForSenderID:];
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _[a1 label];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastRemoteEventTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 lastRemoteEventTimestamp];
}

id objc_msgSend_lastUserEventTime(void *a1, const char *a2, ...)
{
  return _[a1 lastUserEventTime];
}

id objc_msgSend_launchPreboardWithCompletion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "launchPreboardWithCompletion:");
}

id objc_msgSend_launchWithResultBlock_exitBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "launchWithResultBlock:exitBlock:");
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _[a1 layer];
}

id objc_msgSend_layoutAnnotationStack_(void *a1, const char *a2, ...)
{
  return [a1 layoutAnnotationStack:];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_level(void *a1, const char *a2, ...)
{
  return _[a1 level];
}

id objc_msgSend_listenerWithConfigurator_(void *a1, const char *a2, ...)
{
  return [a1 listenerWithConfigurator:];
}

id objc_msgSend_load(void *a1, const char *a2, ...)
{
  return _[a1 load];
}

id objc_msgSend_localDefaults(void *a1, const char *a2, ...)
{
  return _[a1 localDefaults];
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _[a1 location];
}

id objc_msgSend_locationDidChange(void *a1, const char *a2, ...)
{
  return _[a1 locationDidChange];
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_lockBacklight(void *a1, const char *a2, ...)
{
  return _[a1 lockBacklight];
}

id objc_msgSend_lockdownDefaults(void *a1, const char *a2, ...)
{
  return _[a1 lockdownDefaults];
}

id objc_msgSend_log_(void *a1, const char *a2, ...)
{
  return [a1 log:];
}

id objc_msgSend_logBlock_domain_(void *a1, const char *a2, ...)
{
  return [a1 logBlock:domain:];
}

id objc_msgSend_mainDisplay(void *a1, const char *a2, ...)
{
  return _[a1 mainDisplay];
}

id objc_msgSend_mainDisplayCornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 mainDisplayCornerRadius];
}

id objc_msgSend_mainDisplayDigitizerService(void *a1, const char *a2, ...)
{
  return _[a1 mainDisplayDigitizerService];
}

id objc_msgSend_mainDisplayPencilDigitizerService(void *a1, const char *a2, ...)
{
  return _[a1 mainDisplayPencilDigitizerService];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 mainRunLoop];
}

id objc_msgSend_makeObjectsPerformSelector_withObject_(void *a1, const char *a2, ...)
{
  return [a1 makeObjectsPerformSelector:withObject:];
}

id objc_msgSend_matchSharingTouchesPolicy_orCancelTouchesPolicy_orCombinedPolicy_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "matchSharingTouchesPolicy:orCancelTouchesPolicy:orCombinedPolicy:");
}

id objc_msgSend_matchesDescriptor_failureReason_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "matchesDescriptor:failureReason:");
}

id objc_msgSend_matchesPortOfRight_(void *a1, const char *a2, ...)
{
  return [a1 matchesPortOfRight:];
}

id objc_msgSend_maxAssetSlots(void *a1, const char *a2, ...)
{
  return _[a1 maxAssetSlots];
}

id objc_msgSend_maxForce(void *a1, const char *a2, ...)
{
  return _[a1 maxForce];
}

id objc_msgSend_maximumTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 maximumTimeInterval];
}

id objc_msgSend_member_(void *a1, const char *a2, ...)
{
  return [a1 member:];
}

id objc_msgSend_migrateDefaultsIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 migrateDefaultsIfNecessary];
}

id objc_msgSend_migrateIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 migrateIfNecessary];
}

id objc_msgSend_migrateIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 migrateIfNeeded];
}

id objc_msgSend_minimalStyle(void *a1, const char *a2, ...)
{
  return _[a1 minimalStyle];
}

id objc_msgSend_minimumTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 minimumTimeInterval];
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return [a1 minusSet:];
}

id objc_msgSend_modelUpdateAssertion(void *a1, const char *a2, ...)
{
  return _[a1 modelUpdateAssertion];
}

id objc_msgSend_modifierKeyRemapping(void *a1, const char *a2, ...)
{
  return _[a1 modifierKeyRemapping];
}

id objc_msgSend_monitor_activeDisplayPropertiesDidChange_(void *a1, const char *a2, ...)
{
  return [a1 monitor:activeDisplayPropertiesDidChange:];
}

id objc_msgSend_monitor_displayDidBecomeActive_(void *a1, const char *a2, ...)
{
  return [a1 monitor:displayDidBecomeActive:];
}

id objc_msgSend_monitor_displayDidBecomeInactive_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "monitor:displayDidBecomeInactive:");
}

id objc_msgSend_monitorForDeath_(void *a1, const char *a2, ...)
{
  return [a1 monitorForDeath:];
}

id objc_msgSend_monitorSendRight_withHandler_(void *a1, const char *a2, ...)
{
  return [a1 monitorSendRight:withHandler:];
}

id objc_msgSend_mostRecentSender(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentSender];
}

id objc_msgSend_mouseInterpolation(void *a1, const char *a2, ...)
{
  return _[a1 mouseInterpolation];
}

id objc_msgSend_mousePointerController(void *a1, const char *a2, ...)
{
  return _[a1 mousePointerController];
}

id objc_msgSend_mousePointerDeviceAvailabilityMonitorDidChangeAvailability_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "mousePointerDeviceAvailabilityMonitorDidChangeAvailability:");
}

id objc_msgSend_mousePointerGlobalDevicePreferencesDidChange_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "mousePointerGlobalDevicePreferencesDidChange:");
}

id objc_msgSend_mousePointerIOHIDServicesAdded_(void *a1, const char *a2, ...)
{
  return [a1 mousePointerIOHIDServicesAdded:];
}

id objc_msgSend_mousePointerIOHIDServicesRemoved_(void *a1, const char *a2, ...)
{
  return [a1 mousePointerIOHIDServicesRemoved:];
}

id objc_msgSend_moveItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return [a1 moveItemAtPath:x0 toPath:x1 error:x2];
}

id objc_msgSend_multitouchHostStateKeys(void *a1, const char *a2, ...)
{
  return _[a1 multitouchHostStateKeys];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_namespaceNode(void *a1, const char *a2, ...)
{
  return _[a1 namespaceNode];
}

id objc_msgSend_nativeOrientation(void *a1, const char *a2, ...)
{
  return _[a1 nativeOrientation];
}

id objc_msgSend_nativeRotation(void *a1, const char *a2, ...)
{
  return _[a1 nativeRotation];
}

id objc_msgSend_needsLogging(void *a1, const char *a2, ...)
{
  return _[a1 needsLogging];
}

id objc_msgSend_new(void *a1, const char *a2, ...)
{
  return _[a1 new];
}

id objc_msgSend_newLayerForContent_scale_(void *a1, const char *a2, ...)
{
  return [a1 newLayerForContent:x0 scale:x1];
}

id objc_msgSend_nextEvent(void *a1, const char *a2, ...)
{
  return _[a1 nextEvent];
}

id objc_msgSend_nodeAtKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 nodeAtKeyPath:];
}

id objc_msgSend_normalConfigDictionaryForHAButtonHapticType_(void *a1, const char *a2, ...)
{
  return [a1 normalConfigDictionaryForHAButtonHapticType:];
}

id objc_msgSend_normalizedDigitizerRect(void *a1, const char *a2, ...)
{
  return _[a1 normalizedDigitizerRect];
}

id objc_msgSend_normalizedGlobalPointerPosition(void *a1, const char *a2, ...)
{
  return _[a1 normalizedGlobalPointerPosition];
}

id objc_msgSend_noteInterfaceOrientationChangedWithInterfaceOrientation_(void *a1, const char *a2, ...)
{
  return [a1 noteInterfaceOrientationChangedWithInterfaceOrientation:];
}

id objc_msgSend_noteTouchUpOccurred_detached_context_clientPort_(void *a1, const char *a2, ...)
{
  return [a1 noteTouchUpOccurred:x0 detached:x1 context:x2 clientPort:x3];
}

id objc_msgSend_notifyOnNextUserEvent(void *a1, const char *a2, ...)
{
  return _[a1 notifyOnNextUserEvent];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_nullAsset(void *a1, const char *a2, ...)
{
  return _[a1 nullAsset];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return [a1 numberWithBool:];
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return [a1 numberWithDouble:];
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return [a1 numberWithFloat:];
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInt:];
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInteger:];
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithLong:];
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithLongLong:];
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedChar:];
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedInt:];
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedInteger:];
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedLong:];
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedLongLong:];
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedShort:];
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndex:];
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndexedSubscript:];
}

id objc_msgSend_objectAtKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 objectAtKeyPath:];
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 objectEnumerator];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return [a1 objectForKey:];
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectForKeyedSubscript:];
}

id objc_msgSend_objectForSetting_(void *a1, const char *a2, ...)
{
  return [a1 objectForSetting:];
}

id objc_msgSend_observeDefault_onQueue_withBlock_(void *a1, const char *a2, ...)
{
  return [a1 observeDefault:onQueue:withBlock:];
}

id objc_msgSend_observeDefaults_onQueue_withBlock_(void *a1, const char *a2, ...)
{
  return [a1 observeDefaults:onQueue:withBlock:];
}

id objc_msgSend_observeMouseAbsolutePointDidChange_(void *a1, const char *a2, ...)
{
  return [a1 observeMouseAbsolutePointDidChange:];
}

id objc_msgSend_observeMouseAvailabilityDidChange_(void *a1, const char *a2, ...)
{
  return [a1 observeMouseAvailabilityDidChange:];
}

id objc_msgSend_observeMouseButtonMaskDidChange_(void *a1, const char *a2, ...)
{
  return [a1 observeMouseButtonMaskDidChange:];
}

id objc_msgSend_observeMouseDidEnterContextID_pid_(void *a1, const char *a2, ...)
{
  return [a1 observeMouseDidEnterContextID:pid:];
}

id objc_msgSend_observeMouseDidExitContextID_pid_(void *a1, const char *a2, ...)
{
  return [a1 observeMouseDidExitContextID:pid:];
}

id objc_msgSend_observeMouseForceDidChange_stage_(void *a1, const char *a2, ...)
{
  return [a1 observeMouseForceDidChange:stage:];
}

id objc_msgSend_observeMouseModelPointDidChange_display_reason_(void *a1, const char *a2, ...)
{
  return [a1 observeMouseModelPointDidChange:display:reason:];
}

id objc_msgSend_observeMouseRelativePointDidChange_(void *a1, const char *a2, ...)
{
  return [a1 observeMouseRelativePointDidChange:];
}

id objc_msgSend_observeMouseScrollPhaseDidChange_(void *a1, const char *a2, ...)
{
  return [a1 observeMouseScrollPhaseDidChange:];
}

id objc_msgSend_observeMouseTouchCountDidChange_(void *a1, const char *a2, ...)
{
  return [a1 observeMouseTouchCountDidChange:];
}

id objc_msgSend_observeTouchEventDeliveryDidOccur_response_(void *a1, const char *a2, ...)
{
  return [a1 observeTouchEventDeliveryDidOccur:response:];
}

id objc_msgSend_observeValueForKeyPath_ofObject_change_context_(void *a1, const char *a2, ...)
{
  return [a1 observeValueForKeyPath:ofObject:change:context:];
}

id objc_msgSend_observer(void *a1, const char *a2, ...)
{
  return _[a1 observer];
}

id objc_msgSend_openAlternateSystemApp_options_withResult_andExitBlock_(void *a1, const char *a2, ...)
{
  return [a1 openAlternateSystemApp:x0 options:x1 withResult:x2 andExitBlock:x3];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_orderedContext(void *a1, const char *a2, ...)
{
  return _[a1 orderedContext];
}

id objc_msgSend_orderedSetWithArray_(void *a1, const char *a2, ...)
{
  return [a1 orderedSetWithArray:];
}

id objc_msgSend_orderedSetWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 orderedSetWithCapacity:];
}

id objc_msgSend_orientation(void *a1, const char *a2, ...)
{
  return _[a1 orientation];
}

id objc_msgSend_orientationManager(void *a1, const char *a2, ...)
{
  return _[a1 orientationManager];
}

id objc_msgSend_orientationManager_deviceOrientationMayHaveChanged_changeSource_isDeviceOrientationLocked_(void *a1, const char *a2, ...)
{
  return [a1 orientationManager:deviceOrientationMayHaveChanged:changeSource:isDeviceOrientationLocked:];
}

id objc_msgSend_overlayStyle_block_(void *a1, const char *a2, ...)
{
  return [a1 overlayStyle:x0 block:x1];
}

id objc_msgSend_overlayType(void *a1, const char *a2, ...)
{
  return _[a1 overlayType];
}

id objc_msgSend_overlayWithLevel_display_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "overlayWithLevel:display:");
}

id objc_msgSend_overrideSenderDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 overrideSenderDescriptor];
}

id objc_msgSend_passiveOrientationEvents(void *a1, const char *a2, ...)
{
  return _[a1 passiveOrientationEvents];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathAttributes(void *a1, const char *a2, ...)
{
  return _[a1 pathAttributes];
}

id objc_msgSend_pathIndexInRangeMask(void *a1, const char *a2, ...)
{
  return _[a1 pathIndexInRangeMask];
}

id objc_msgSend_pathIndexTouchingMask(void *a1, const char *a2, ...)
{
  return _[a1 pathIndexTouchingMask];
}

id objc_msgSend_pathProviderForSystemContainerForCurrentProcess(void *a1, const char *a2, ...)
{
  return _[a1 pathProviderForSystemContainerForCurrentProcess];
}

id objc_msgSend_pattern(void *a1, const char *a2, ...)
{
  return _[a1 pattern];
}

id objc_msgSend_perDisplayUUIDInfo(void *a1, const char *a2, ...)
{
  return _[a1 perDisplayUUIDInfo];
}

id objc_msgSend_performSelector_onThread_withObject_waitUntilDone_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "performSelector:onThread:withObject:waitUntilDone:");
}

id objc_msgSend_performSelector_onThread_withObject_waitUntilDone_modes_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "performSelector:onThread:withObject:waitUntilDone:modes:");
}

id objc_msgSend_performSelectorOnMainThread_withObject_waitUntilDone_(void *a1, const char *a2, ...)
{
  return [a1 performSelectorOnMainThread:];
}

id objc_msgSend_performSynchronized_(void *a1, const char *a2, ...)
{
  return [a1 performSynchronized:];
}

id objc_msgSend_performSynchronizedWithCATransaction_(void *a1, const char *a2, ...)
{
  return [a1 performSynchronizedWithCATransaction:];
}

id objc_msgSend_persistentConnectionDefaults(void *a1, const char *a2, ...)
{
  return _[a1 persistentConnectionDefaults];
}

id objc_msgSend_persistentPropertiesForKeys_forSenderDescriptor_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "persistentPropertiesForKeys:forSenderDescriptor:");
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _[a1 pid];
}

id objc_msgSend_pidForBundleID_(void *a1, const char *a2, ...)
{
  return [a1 pidForBundleID:];
}

id objc_msgSend_pinOnButtonDown(void *a1, const char *a2, ...)
{
  return _[a1 pinOnButtonDown];
}

id objc_msgSend_playFeedback_powerSourceID_timestamp_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "playFeedback:powerSourceID:timestamp:error:");
}

id objc_msgSend_playFeedback_senderID_timestamp_error_(void *a1, const char *a2, ...)
{
  return [a1 playFeedback:x0 senderID:x1 timestamp:x2 error:x3];
}

id objc_msgSend_playHapticFeedbackRequest_(void *a1, const char *a2, ...)
{
  return [a1 playHapticFeedbackRequest:];
}

id objc_msgSend_playHapticForClickState_clickSpeed_(void *a1, const char *a2, ...)
{
  return [a1 playHapticForClickState:clickState clickSpeed:clickSpeed];
}

id objc_msgSend_playState_forSpeed_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "playState:forSpeed:error:");
}

id objc_msgSend_pocketTouchesExpected(void *a1, const char *a2, ...)
{
  return _[a1 pocketTouchesExpected];
}

id objc_msgSend_point(void *a1, const char *a2, ...)
{
  return _[a1 point];
}

id objc_msgSend_pointScale(void *a1, const char *a2, ...)
{
  return _[a1 pointScale];
}

id objc_msgSend_pointSize(void *a1, const char *a2, ...)
{
  return _[a1 pointSize];
}

id objc_msgSend_pointerAbsolutePosition(void *a1, const char *a2, ...)
{
  return _[a1 pointerAbsolutePosition];
}

id objc_msgSend_pointerAccelerationFactor(void *a1, const char *a2, ...)
{
  return _[a1 pointerAccelerationFactor];
}

id objc_msgSend_pointerArrayWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 pointerArrayWithOptions:];
}

id objc_msgSend_pointerAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 pointerAtIndex:];
}

id objc_msgSend_pointerGlobalDevicePreferencesDidChange_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "pointerGlobalDevicePreferencesDidChange:");
}

id objc_msgSend_pointerRegionArrangementEdge(void *a1, const char *a2, ...)
{
  return _[a1 pointerRegionArrangementEdge];
}

id objc_msgSend_pointerStyle(void *a1, const char *a2, ...)
{
  return _[a1 pointerStyle];
}

id objc_msgSend_pointingDevicesDidChange_(void *a1, const char *a2, ...)
{
  return [a1 pointingDevicesDidChange:];
}

id objc_msgSend_policyByCombiningPolicies_(void *a1, const char *a2, ...)
{
  return [a1 policyByCombiningPolicies:];
}

id objc_msgSend_policyExcludingPolicyIdenticalTo_(void *a1, const char *a2, ...)
{
  return [a1 policyExcludingPolicyIdenticalTo:];
}

id objc_msgSend_policyIncludingPolicy_(void *a1, const char *a2, ...)
{
  return [a1 policyIncludingPolicy:];
}

id objc_msgSend_position(void *a1, const char *a2, ...)
{
  return _[a1 position];
}

id objc_msgSend_positionType(void *a1, const char *a2, ...)
{
  return _[a1 positionType];
}

id objc_msgSend_postEvent_fromSender_(void *a1, const char *a2, ...)
{
  return [a1 postEvent:fromSender:];
}

id objc_msgSend_postEvent_position_additionalContext_(void *a1, const char *a2, ...)
{
  return [a1 postEvent:position:additionalContext:];
}

id objc_msgSend_postEvent_position_additionalContext_fromBuffer_toResolution_(void *a1, const char *a2, ...)
{
  return [a1 postEvent:position:additionalContext:fromBuffer:toResolution:];
}

id objc_msgSend_postEvent_toDestination_(void *a1, const char *a2, ...)
{
  return [a1 postEvent:toDestination:];
}

id objc_msgSend_postEventWithCurrentDetectionMask(void *a1, const char *a2, ...)
{
  return _[a1 postEventWithCurrentDetectionMask];
}

id objc_msgSend_postHapticFeedbackRequest_forAuditToken_(void *a1, const char *a2, ...)
{
  return [a1 postHapticFeedbackRequest:forAuditToken:];
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return [a1 postNotificationName:];
}

id objc_msgSend_postTouchAnnotations_sourcePID_(void *a1, const char *a2, ...)
{
  return [a1 postTouchAnnotations:sourcePID:];
}

id objc_msgSend_powerSourceID(void *a1, const char *a2, ...)
{
  return _[a1 powerSourceID];
}

id objc_msgSend_predicateMatchingIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 predicateMatchingIdentifier:];
}

id objc_msgSend_preferencesForDevice_(void *a1, const char *a2, ...)
{
  return [a1 preferencesForDevice:];
}

id objc_msgSend_preferredFrameSize(void *a1, const char *a2, ...)
{
  return _[a1 preferredFrameSize];
}

id objc_msgSend_preferredScale(void *a1, const char *a2, ...)
{
  return _[a1 preferredScale];
}

id objc_msgSend_prepareForRestart(void *a1, const char *a2, ...)
{
  return _[a1 prepareForRestart];
}

id objc_msgSend_presentWithAnimationSettings_(void *a1, const char *a2, ...)
{
  return [a1 presentWithAnimationSettings:];
}

id objc_msgSend_previousButtonMask(void *a1, const char *a2, ...)
{
  return _[a1 previousButtonMask];
}

id objc_msgSend_primaryPage(void *a1, const char *a2, ...)
{
  return _[a1 primaryPage];
}

id objc_msgSend_primarySystemShell(void *a1, const char *a2, ...)
{
  return _[a1 primarySystemShell];
}

id objc_msgSend_primaryUsage(void *a1, const char *a2, ...)
{
  return _[a1 primaryUsage];
}

id objc_msgSend_primaryUsagePage(void *a1, const char *a2, ...)
{
  return _[a1 primaryUsagePage];
}

id objc_msgSend_principalClass(void *a1, const char *a2, ...)
{
  return _[a1 principalClass];
}

id objc_msgSend_processDescription(void *a1, const char *a2, ...)
{
  return _[a1 processDescription];
}

id objc_msgSend_processEvent_sender_dispatcher_(void *a1, const char *a2, ...)
{
  return [a1 processEvent:sender:dispatcher:];
}

id objc_msgSend_processEvent_sender_display_dispatcher_(void *a1, const char *a2, ...)
{
  return [a1 processEvent:x0 sender:x1 display:x2 dispatcher:x3];
}

id objc_msgSend_processHandleForAuditToken_(void *a1, const char *a2, ...)
{
  return [a1 processHandleForAuditToken:];
}

id objc_msgSend_processId(void *a1, const char *a2, ...)
{
  return _[a1 processId];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_progressIndicatorProperties(void *a1, const char *a2, ...)
{
  return _[a1 progressIndicatorProperties];
}

id objc_msgSend_progressIndicatorWithStyle_position_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "progressIndicatorWithStyle:position:");
}

id objc_msgSend_propertyForKey_(void *a1, const char *a2, ...)
{
  return [a1 propertyForKey:];
}

id objc_msgSend_propertyOfClass_forKey_(void *a1, const char *a2, ...)
{
  return [a1 propertyOfClass:forKey:];
}

id objc_msgSend_protocolForProtocol_(void *a1, const char *a2, ...)
{
  return [a1 protocolForProtocol:];
}

id objc_msgSend_proximityDetectionMaskDidChange_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "proximityDetectionMaskDidChange:");
}

id objc_msgSend_proximityDetectionMode(void *a1, const char *a2, ...)
{
  return _[a1 proximityDetectionMode];
}

id objc_msgSend_proximityDidUnoccludeAfterScreenWake(void *a1, const char *a2, ...)
{
  return _[a1 proximityDidUnoccludeAfterScreenWake];
}

id objc_msgSend_proximityHostStateKeys(void *a1, const char *a2, ...)
{
  return _[a1 proximityHostStateKeys];
}

id objc_msgSend_proximityInCentimeters(void *a1, const char *a2, ...)
{
  return _[a1 proximityInCentimeters];
}

id objc_msgSend_pushStatistics_(void *a1, const char *a2, ...)
{
  return [a1 pushStatistics:];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_rasterizationScale(void *a1, const char *a2, ...)
{
  return _[a1 rasterizationScale];
}

id objc_msgSend_realToken(void *a1, const char *a2, ...)
{
  return _[a1 realToken];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_reasons(void *a1, const char *a2, ...)
{
  return _[a1 reasons];
}

id objc_msgSend_rebuildPersistentOverlays(void *a1, const char *a2, ...)
{
  return _[a1 rebuildPersistentOverlays];
}

id objc_msgSend_recognizerForEventDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 recognizerForEventDescriptor:];
}

id objc_msgSend_rect(void *a1, const char *a2, ...)
{
  return _[a1 rect];
}

id objc_msgSend_rectangleStyle(void *a1, const char *a2, ...)
{
  return _[a1 rectangleStyle];
}

id objc_msgSend_reducePolicyToObjectWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 reducePolicyToObjectWithBlock:];
}

id objc_msgSend_reevaluateActiveDisplaysWithReason_(void *a1, const char *a2, ...)
{
  return [a1 reevaluateActiveDisplaysWithReason:];
}

id objc_msgSend_referenceSpaceLayer(void *a1, const char *a2, ...)
{
  return _[a1 referenceSpaceLayer];
}

id objc_msgSend_regenerateLayerTree(void *a1, const char *a2, ...)
{
  return _[a1 regenerateLayerTree];
}

id objc_msgSend_region(void *a1, const char *a2, ...)
{
  return _[a1 region];
}

id objc_msgSend_regionForDisplayUUID_(void *a1, const char *a2, ...)
{
  return [a1 regionForDisplayUUID:];
}

id objc_msgSend_regions(void *a1, const char *a2, ...)
{
  return _[a1 regions];
}

id objc_msgSend_registerClientsForMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 registerClientsForMonitoring];
}

id objc_msgSend_registerHandler_(void *a1, const char *a2, ...)
{
  return [a1 registerHandler:];
}

id objc_msgSend_registerNotificationBlock_(void *a1, const char *a2, ...)
{
  return [a1 registerNotificationBlock:];
}

id objc_msgSend_registerWatchdog(void *a1, const char *a2, ...)
{
  return _[a1 registerWatchdog];
}

id objc_msgSend_relativeRegion(void *a1, const char *a2, ...)
{
  return _[a1 relativeRegion];
}

id objc_msgSend_relativeToTopLeftOfSuper_(void *a1, const char *a2, ...)
{
  return [a1 relativeToTopLeftOfSuper:];
}

id objc_msgSend_remoteContextWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 remoteContextWithOptions:];
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return _[a1 remoteObjectProxy];
}

id objc_msgSend_remoteProcess(void *a1, const char *a2, ...)
{
  return _[a1 remoteProcess];
}

id objc_msgSend_remoteTarget(void *a1, const char *a2, ...)
{
  return _[a1 remoteTarget];
}

id objc_msgSend_removeAllAnimations(void *a1, const char *a2, ...)
{
  return _[a1 removeAllAnimations];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAnnotationsForKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 removeAnnotationsForKeyPath:];
}

id objc_msgSend_removeAnnotationsForKeyPath_afterDelay_queue_(void *a1, const char *a2, ...)
{
  return [a1 removeAnnotationsForKeyPath:afterDelay:queue:];
}

id objc_msgSend_removeClone_(void *a1, const char *a2, ...)
{
  return [a1 removeClone:];
}

id objc_msgSend_removeDisappearanceObserver_(void *a1, const char *a2, ...)
{
  return [a1 removeDisappearanceObserver:];
}

id objc_msgSend_removeDisplay_(void *a1, const char *a2, ...)
{
  return [a1 removeDisplay:];
}

id objc_msgSend_removeFromSuperlayer(void *a1, const char *a2, ...)
{
  return _[a1 removeFromSuperlayer];
}

id objc_msgSend_removeGlobalDevicePreferencesObserver_(void *a1, const char *a2, ...)
{
  return [a1 removeGlobalDevicePreferencesObserver:];
}

id objc_msgSend_removeIndex_(void *a1, const char *a2, ...)
{
  return [a1 removeIndex:];
}

id objc_msgSend_removeIndexes_(void *a1, const char *a2, ...)
{
  return [a1 removeIndexes:];
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return [a1 removeItemAtPath:error:];
}

id objc_msgSend_removeModesForVersionedPID_(void *a1, const char *a2, ...)
{
  return [a1 removeModesForVersionedPID:];
}

id objc_msgSend_removeMonitor_(void *a1, const char *a2, ...)
{
  return [a1 removeMonitor:];
}

id objc_msgSend_removeNodeAtKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 removeNodeAtKeyPath:];
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectAtIndex:];
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectForKey:];
}

id objc_msgSend_removeObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectIdenticalTo:];
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectsForKeys:];
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver:];
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver:forKeyPath:];
}

id objc_msgSend_removeObserver_forKeyPath_context_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver:forKeyPath:context:];
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver:name:object:];
}

id objc_msgSend_removeOverlay_withAnimationSettings_(void *a1, const char *a2, ...)
{
  return [a1 removeOverlay:withAnimationSettings:];
}

id objc_msgSend_removeRecognizer_(void *a1, const char *a2, ...)
{
  return [a1 removeRecognizer:];
}

id objc_msgSend_removeService_(void *a1, const char *a2, ...)
{
  return [a1 removeService:];
}

id objc_msgSend_renderer(void *a1, const char *a2, ...)
{
  return _[a1 renderer];
}

id objc_msgSend_renderingAssertion(void *a1, const char *a2, ...)
{
  return _[a1 renderingAssertion];
}

id objc_msgSend_replacePointerAtIndex_withPointer_(void *a1, const char *a2, ...)
{
  return [a1 replacePointerAtIndex:withPointer:];
}

id objc_msgSend_repostFirstEventToBufferedTargets_(void *a1, const char *a2, ...)
{
  return [a1 repostFirstEventToBufferedTargets:];
}

id objc_msgSend_representsHomeButton(void *a1, const char *a2, ...)
{
  return _[a1 representsHomeButton];
}

id objc_msgSend_requestEstimatedProximityEventsWithTimeout_versionedPID_(void *a1, const char *a2, ...)
{
  return [a1 requestEstimatedProximityEventsWithTimeout:versionedPID:];
}

id objc_msgSend_requestProximityStatusEventForReason_versionedPID_(void *a1, const char *a2, ...)
{
  return [a1 requestProximityStatusEventForReason:versionedPID:];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _[a1 reset];
}

id objc_msgSend_resetCalibration(void *a1, const char *a2, ...)
{
  return _[a1 resetCalibration];
}

id objc_msgSend_resetForCancel(void *a1, const char *a2, ...)
{
  return _[a1 resetForCancel];
}

id objc_msgSend_resetTimer_mode_(void *a1, const char *a2, ...)
{
  return [a1 resetTimer:mode:];
}

id objc_msgSend_responsePendingForConnection_(void *a1, const char *a2, ...)
{
  return [a1 responsePendingForConnection:];
}

id objc_msgSend_restoreSystemDisplayBrightness(void *a1, const char *a2, ...)
{
  return _[a1 restoreSystemDisplayBrightness];
}

id objc_msgSend_restrictingToPID(void *a1, const char *a2, ...)
{
  return _[a1 restrictingToPID];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 reverseObjectEnumerator];
}

id objc_msgSend_ringerState(void *a1, const char *a2, ...)
{
  return _[a1 ringerState];
}

id objc_msgSend_rootLayer(void *a1, const char *a2, ...)
{
  return _[a1 rootLayer];
}

id objc_msgSend_rootLayerPropertiesForDisplay_displayController_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "rootLayerPropertiesForDisplay:displayController:")];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_saveOverlay_(void *a1, const char *a2, ...)
{
  return [a1 saveOverlay:];
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _[a1 scale];
}

id objc_msgSend_schedule(void *a1, const char *a2, ...)
{
  return _[a1 schedule];
}

id objc_msgSend_scheduleReadyNotificationOnDispatchQueue_withBlock_(void *a1, const char *a2, ...)
{
  return [a1 scheduleReadyNotificationOnDispatchQueue:withBlock:];
}

id objc_msgSend_scheduleWithFireInterval_leewayInterval_queue_handler_(void *a1, const char *a2, ...)
{
  return [a1 scheduleWithFireInterval:leewayInterval:queue:handler:];
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return [a1 scheduledTimerWithTimeInterval:x0 target:x1 selector:x2 userInfo:x3 repeats:x4];
}

id objc_msgSend_screenInfoForScreenID_(void *a1, const char *a2, ...)
{
  return [a1 screenInfoForScreenID:];
}

id objc_msgSend_scrollAccelerationFactor(void *a1, const char *a2, ...)
{
  return _[a1 scrollAccelerationFactor];
}

id objc_msgSend_scrollPhase(void *a1, const char *a2, ...)
{
  return _[a1 scrollPhase];
}

id objc_msgSend_scrollPhaseDidChange(void *a1, const char *a2, ...)
{
  return _[a1 scrollPhaseDidChange];
}

id objc_msgSend_section(void *a1, const char *a2, ...)
{
  return _[a1 section];
}

id objc_msgSend_secureModeViolations(void *a1, const char *a2, ...)
{
  return _[a1 secureModeViolations];
}

id objc_msgSend_secureName(void *a1, const char *a2, ...)
{
  return _[a1 secureName];
}

id objc_msgSend_securityAnalysisFromCAHitTestDictionary_errorString_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "securityAnalysisFromCAHitTestDictionary:errorString:");
}

id objc_msgSend_selector(void *a1, const char *a2, ...)
{
  return _[a1 selector];
}

id objc_msgSend_sendActions_withResult_(void *a1, const char *a2, ...)
{
  return [a1 sendActions:];
}

id objc_msgSend_sendCancelEventForAllDisplays(void *a1, const char *a2, ...)
{
  return _[a1 sendCancelEventForAllDisplays];
}

id objc_msgSend_sendCancelEventForDisplay_(void *a1, const char *a2, ...)
{
  return [a1 sendCancelEventForDisplay:];
}

id objc_msgSend_sendEvent_toClientTaskPort_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendEvent:toClientTaskPort:");
}

id objc_msgSend_sendRight(void *a1, const char *a2, ...)
{
  return _[a1 sendRight];
}

id objc_msgSend_sendTouchUpdate_(void *a1, const char *a2, ...)
{
  return [a1 sendTouchUpdate:];
}

id objc_msgSend_senderCache(void *a1, const char *a2, ...)
{
  return _[a1 senderCache];
}

id objc_msgSend_senderDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 senderDescriptor];
}

id objc_msgSend_senderDescriptorForEventType_(void *a1, const char *a2, ...)
{
  return [a1 senderDescriptorForEventType:];
}

id objc_msgSend_senderID(void *a1, const char *a2, ...)
{
  return _[a1 senderID];
}

id objc_msgSend_senderInfo(void *a1, const char *a2, ...)
{
  return _[a1 senderInfo];
}

id objc_msgSend_senderPostsAtHighFrequency_(void *a1, const char *a2, ...)
{
  return [a1 senderPostsAtHighFrequency:];
}

id objc_msgSend_sensorCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 sensorCharacteristics];
}

id objc_msgSend_sensorConfiguratorForCurrentPlatform(void *a1, const char *a2, ...)
{
  return _[a1 sensorConfiguratorForCurrentPlatform];
}

id objc_msgSend_sensorModeDidChange_(void *a1, const char *a2, ...)
{
  return [a1 sensorModeDidChange:];
}

id objc_msgSend_sensorsRequiredForOpenState(void *a1, const char *a2, ...)
{
  return _[a1 sensorsRequiredForOpenState];
}

id objc_msgSend_sequenceForFirstEvent_sender_processor_dispatcher_additionalContext_(void *a1, const char *a2, ...)
{
  return [a1 sequenceForFirstEvent:x0 sender:x1 processor:x2 dispatcher:x3 additionalContext:x4];
}

id objc_msgSend_sequenceForKeyCommand_sender_processor_dispatcher_additionalContext_(void *a1, const char *a2, ...)
{
  return [a1 sequenceForKeyCommand:x0 sender:x1 processor:x2 dispatcher:x3 additionalContext:x4];
}

id objc_msgSend_serial(void *a1, const char *a2, ...)
{
  return _[a1 serial];
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return _[a1 server];
}

id objc_msgSend_serverIfRunning(void *a1, const char *a2, ...)
{
  return _[a1 serverIfRunning];
}

id objc_msgSend_serverWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 serverWithOptions:];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _[a1 service];
}

id objc_msgSend_serviceClass_(void *a1, const char *a2, ...)
{
  return [a1 serviceClass:];
}

id objc_msgSend_serviceMatcherDataProvider(void *a1, const char *a2, ...)
{
  return _[a1 serviceMatcherDataProvider];
}

id objc_msgSend_serviceQuality(void *a1, const char *a2, ...)
{
  return _[a1 serviceQuality];
}

id objc_msgSend_serviceServer(void *a1, const char *a2, ...)
{
  return _[a1 serviceServer];
}

id objc_msgSend_serviceStatus(void *a1, const char *a2, ...)
{
  return _[a1 serviceStatus];
}

id objc_msgSend_services(void *a1, const char *a2, ...)
{
  return _[a1 services];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setALSEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setALSEnabled:];
}

id objc_msgSend_setALSEpoch_(void *a1, const char *a2, ...)
{
  return [a1 setALSEpoch:];
}

id objc_msgSend_setALSUserPreferences_(void *a1, const char *a2, ...)
{
  return [a1 setALSUserPreferences:];
}

id objc_msgSend_setAcceleratedRelativePositionX_(void *a1, const char *a2, ...)
{
  return [a1 setAcceleratedRelativePositionX:];
}

id objc_msgSend_setAcceleratedRelativePositionY_(void *a1, const char *a2, ...)
{
  return [a1 setAcceleratedRelativePositionY:];
}

id objc_msgSend_setAccelerometerUpdateInterval_(void *a1, const char *a2, ...)
{
  return [a1 setAccelerometerUpdateInterval:];
}

id objc_msgSend_setActivationHandler_(void *a1, const char *a2, ...)
{
  return [a1 setActivationHandler:];
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return [a1 setActive:];
}

id objc_msgSend_setActiveAlternateSystemAppBundleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setActiveAlternateSystemAppBundleIdentifier:];
}

id objc_msgSend_setActiveModifiers_(void *a1, const char *a2, ...)
{
  return [a1 setActiveModifiers:];
}

id objc_msgSend_setAffineTransform_(void *a1, const char *a2, ...)
{
  return [a1 setAffineTransform:];
}

id objc_msgSend_setAlternateSystemApp_(void *a1, const char *a2, ...)
{
  return [a1 setAlternateSystemApp:];
}

id objc_msgSend_setAlternateSystemAppManager_(void *a1, const char *a2, ...)
{
  return [a1 setAlternateSystemAppManager:];
}

id objc_msgSend_setAnalyticsReporter_(void *a1, const char *a2, ...)
{
  return [a1 setAnalyticsReporter:];
}

id objc_msgSend_setAnchorPoint_(void *a1, const char *a2, ...)
{
  return [a1 setAnchorPoint:];
}

id objc_msgSend_setAnimates_(void *a1, const char *a2, ...)
{
  return [a1 setAnimates:];
}

id objc_msgSend_setAnnotation_(void *a1, const char *a2, ...)
{
  return [a1 setAnnotation:];
}

id objc_msgSend_setAnnotation_forKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 setAnnotation:forKeyPath:];
}

id objc_msgSend_setAnnotationController_(void *a1, const char *a2, ...)
{
  return [a1 setAnnotationController:];
}

id objc_msgSend_setAssetType_(void *a1, const char *a2, ...)
{
  return [a1 setAssetType:];
}

id objc_msgSend_setAssociatedDisplay_(void *a1, const char *a2, ...)
{
  return [a1 setAssociatedDisplay:];
}

id objc_msgSend_setAttachedCoverRequiresWorkaroundForOpenState_(void *a1, const char *a2, ...)
{
  return [a1 setAttachedCoverRequiresWorkaroundForOpenState:];
}

id objc_msgSend_setAuthenticationMessage_(void *a1, const char *a2, ...)
{
  return [a1 setAuthenticationMessage:];
}

id objc_msgSend_setAutoBrightnessEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setAutoBrightnessEnabled:];
}

id objc_msgSend_setAutomaticResetDisabled_(void *a1, const char *a2, ...)
{
  return [a1 setAutomaticResetDisabled:];
}

id objc_msgSend_setBackground_(void *a1, const char *a2, ...)
{
  return [a1 setBackground:];
}

id objc_msgSend_setBackgroundAverage_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundAverage:];
}

id objc_msgSend_setBackgroundAverageContrastThreshold_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundAverageContrastThreshold:];
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundColor:];
}

id objc_msgSend_setBackgroundStandardDeviation_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundStandardDeviation:];
}

id objc_msgSend_setBacklightFeatures_forPID_(void *a1, const char *a2, ...)
{
  return [a1 setBacklightFeatures:forPID:];
}

id objc_msgSend_setBacklightLocked_forReason_(void *a1, const char *a2, ...)
{
  return [a1 setBacklightLocked:forReason:];
}

id objc_msgSend_setBaseStyle_(void *a1, const char *a2, ...)
{
  return [a1 setBaseStyle:];
}

id objc_msgSend_setBeginTime_(void *a1, const char *a2, ...)
{
  return [a1 setBeginTime:];
}

id objc_msgSend_setBeginTimeMode_(void *a1, const char *a2, ...)
{
  return [a1 setBeginTimeMode:];
}

id objc_msgSend_setBlanked_(void *a1, const char *a2, ...)
{
  return [a1 setBlanked:];
}

id objc_msgSend_setBlankingRemovesPower_(void *a1, const char *a2, ...)
{
  return [a1 setBlankingRemovesPower:];
}

id objc_msgSend_setBounds_(void *a1, const char *a2, ...)
{
  return [a1 setBounds:];
}

id objc_msgSend_setBrightness_(void *a1, const char *a2, ...)
{
  return [a1 setBrightness:];
}

id objc_msgSend_setBrightnessCurve_(void *a1, const char *a2, ...)
{
  return [a1 setBrightnessCurve:];
}

id objc_msgSend_setBrightnessLevel_reason_options_(void *a1, const char *a2, ...)
{
  return [a1 setBrightnessLevel:reason:options:];
}

id objc_msgSend_setBuiltInDisplayInterfaceOrientation_(void *a1, const char *a2, ...)
{
  return [a1 setBuiltInDisplayInterfaceOrientation];
}

id objc_msgSend_setBundleID_(void *a1, const char *a2, ...)
{
  return [a1 setBundleID:];
}

id objc_msgSend_setBundleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setBundleIdentifier:];
}

id objc_msgSend_setBundlePath_(void *a1, const char *a2, ...)
{
  return [a1 setBundlePath:];
}

id objc_msgSend_setButtonDownRepositionUniqueIdentifierToAssertionMap_(void *a1, const char *a2, ...)
{
  return [a1 setButtonDownRepositionUniqueIdentifierToAssertionMap:];
}

id objc_msgSend_setCalculationMode_(void *a1, const char *a2, ...)
{
  return [a1 setCalculationMode:];
}

id objc_msgSend_setCapsLockActive_onSenderID_(void *a1, const char *a2, ...)
{
  return [a1 setCapsLockActive:onSenderID:];
}

id objc_msgSend_setCapsLockDelayOverride_(void *a1, const char *a2, ...)
{
  return [a1 setCapsLockDelayOverride:];
}

id objc_msgSend_setCapsLockDelayOverride_forSenderID_(void *a1, const char *a2, ...)
{
  return [a1 setCapsLockDelayOverride:forSenderID:];
}

id objc_msgSend_setCapsLockKeyHasLanguageSwitchLabel_(void *a1, const char *a2, ...)
{
  return [a1 setCapsLockKeyHasLanguageSwitchLabel:];
}

id objc_msgSend_setCapsLockLightOn_(void *a1, const char *a2, ...)
{
  return [a1 setCapsLockLightOn:];
}

id objc_msgSend_setChangeSource_(void *a1, const char *a2, ...)
{
  return [a1 setChangeSource:];
}

id objc_msgSend_setClickHapticAssetType_(void *a1, const char *a2, ...)
{
  return [a1 setClickHapticAssetType:];
}

id objc_msgSend_setClickState_(void *a1, const char *a2, ...)
{
  return [a1 setClickState:];
}

id objc_msgSend_setClient_(void *a1, const char *a2, ...)
{
  return [a1 setClient:];
}

id objc_msgSend_setClientConnection_(void *a1, const char *a2, ...)
{
  return [a1 setClientConnection:];
}

id objc_msgSend_setClientConnectionManager_(void *a1, const char *a2, ...)
{
  return [a1 setClientConnectionManager:];
}

id objc_msgSend_setConfigs_withAssets_forStates_error_(void *a1, const char *a2, ...)
{
  return [a1 setConfigs:x0 withAssets:x1 forStates:x2 error:x3];
}

id objc_msgSend_setConnectedKeyboards_withReply_(void *a1, const char *a2, ...)
{
  return [a1 setConnectedKeyboards:withReply:];
}

id objc_msgSend_setContent_(void *a1, const char *a2, ...)
{
  return [a1 setContent:];
}

id objc_msgSend_setContents_(void *a1, const char *a2, ...)
{
  return [a1 setContents:];
}

id objc_msgSend_setContentsFormat_(void *a1, const char *a2, ...)
{
  return [a1 setContentsFormat:];
}

id objc_msgSend_setContentsScale_(void *a1, const char *a2, ...)
{
  return [a1 setContentsScale:];
}

id objc_msgSend_setContext_(void *a1, const char *a2, ...)
{
  return [a1 setContext:];
}

id objc_msgSend_setContextID_(void *a1, const char *a2, ...)
{
  return [a1 setContextID:];
}

id objc_msgSend_setContextMove_(void *a1, const char *a2, ...)
{
  return [a1 setContextMove:];
}

id objc_msgSend_setContextRelativePointerPosition_onDisplay_withAnimationParameters_restrictingToPID_auditPID_(void *a1, const char *a2, ...)
{
  return [a1 setContextRelativePointerPosition:x0 onDisplay:x1 withAnimationParameters:x2 restrictingToPID:x3 auditPID:x4];
}

id objc_msgSend_setContextRelativePointerPosition_withInitialVelocity_onDisplay_withDecelerationRate_restrictingToPID_auditPID_(void *a1, const char *a2, ...)
{
  return [a1 setContextRelativePointerPosition:x0 withInitialVelocity:x1 onDisplay:x2 withDecelerationRate:x3 restrictingToPID:x4 auditPID:x5];
}

id objc_msgSend_setContextType_(void *a1, const char *a2, ...)
{
  return [a1 setContextType:];
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return [a1 setCount:];
}

id objc_msgSend_setCountryCode_(void *a1, const char *a2, ...)
{
  return [a1 setCountryCode:];
}

id objc_msgSend_setCumulativeContentsTransform_(void *a1, const char *a2, ...)
{
  return [a1 setCumulativeContentsTransform:];
}

id objc_msgSend_setCumulativeLayerTransform_(void *a1, const char *a2, ...)
{
  return [a1 setCumulativeLayerTransform:];
}

id objc_msgSend_setCumulativeOpacity_(void *a1, const char *a2, ...)
{
  return [a1 setCumulativeOpacity:];
}

id objc_msgSend_setCurrentDestinations_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentDestinations:];
}

id objc_msgSend_setDeactivationHandler_(void *a1, const char *a2, ...)
{
  return [a1 setDeactivationHandler:];
}

id objc_msgSend_setDeathWatcher_(void *a1, const char *a2, ...)
{
  return [a1 setDeathWatcher:];
}

id objc_msgSend_setDefinedInReferenceSpace_(void *a1, const char *a2, ...)
{
  return [a1 setDefinedInReferenceSpace:];
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setDelegate:];
}

id objc_msgSend_setDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 setDescriptor:];
}

id objc_msgSend_setDetectedOcclusion_(void *a1, const char *a2, ...)
{
  return [a1 setDetectedOcclusion:];
}

id objc_msgSend_setDetectionMask_(void *a1, const char *a2, ...)
{
  return [a1 setDetectionMask:];
}

id objc_msgSend_setDeviceAvailabilityMonitor_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceAvailabilityMonitor:];
}

id objc_msgSend_setDigitizerEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setDigitizerEnabled:];
}

id objc_msgSend_setDigitizerSurfaceHeight_(void *a1, const char *a2, ...)
{
  return [a1 setDigitizerSurfaceHeight:];
}

id objc_msgSend_setDigitizerSurfaceSize_(void *a1, const char *a2, ...)
{
  return [a1 setDigitizerSurfaceSize:];
}

id objc_msgSend_setDigitizerSurfaceWidth_(void *a1, const char *a2, ...)
{
  return [a1 setDigitizerSurfaceWidth:];
}

id objc_msgSend_setDisableActions_(void *a1, const char *a2, ...)
{
  return [a1 setDisableActions:];
}

id objc_msgSend_setDisableUpdateMask_(void *a1, const char *a2, ...)
{
  return [a1 setDisableUpdateMask:];
}

id objc_msgSend_setDisabled_(void *a1, const char *a2, ...)
{
  return [a1 setDisabled:];
}

id objc_msgSend_setDisablesUpdates_(void *a1, const char *a2, ...)
{
  return [a1 setDisablesUpdates:];
}

id objc_msgSend_setDisplay_(void *a1, const char *a2, ...)
{
  return [a1 setDisplay:];
}

id objc_msgSend_setDisplayArrangement_(void *a1, const char *a2, ...)
{
  return [a1 setDisplayArrangement:];
}

id objc_msgSend_setDisplayBrightness_permanently_(void *a1, const char *a2, ...)
{
  return [a1 setDisplayBrightness:permanently:];
}

id objc_msgSend_setDisplayBrightnessCurve_(void *a1, const char *a2, ...)
{
  return [a1 setDisplayBrightnessCurve:];
}

id objc_msgSend_setDisplayController_(void *a1, const char *a2, ...)
{
  return [a1 setDisplayController:];
}

id objc_msgSend_setDisplayLinkClass_(void *a1, const char *a2, ...)
{
  return [a1 setDisplayLinkClass:];
}

id objc_msgSend_setDisplayProvider_(void *a1, const char *a2, ...)
{
  return [a1 setDisplayProvider:];
}

id objc_msgSend_setDitheringEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setDitheringEnabled:];
}

id objc_msgSend_setDomain_(void *a1, const char *a2, ...)
{
  return [a1 setDomain:];
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return [a1 setDuration:];
}

id objc_msgSend_setElementValue_forUsagePage_usage_(void *a1, const char *a2, ...)
{
  return [a1 setElementValue:x0 forUsagePage:x1 usage:x2];
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setEnabled:];
}

id objc_msgSend_setEntitlementCache_(void *a1, const char *a2, ...)
{
  return [a1 setEntitlementCache:];
}

id objc_msgSend_setEntitlements_(void *a1, const char *a2, ...)
{
  return [a1 setEntitlements:];
}

id objc_msgSend_setEnvironment_(void *a1, const char *a2, ...)
{
  return [a1 setEnvironment:];
}

id objc_msgSend_setEstimatedProxPowerAssertionID_(void *a1, const char *a2, ...)
{
  return [a1 setEstimatedProxPowerAssertionID:];
}

id objc_msgSend_setEstimatedProximityMode_(void *a1, const char *a2, ...)
{
  return [a1 setEstimatedProximityMode:];
}

id objc_msgSend_setEventDestination_forDisplayUUID_(void *a1, const char *a2, ...)
{
  return [a1 setEventDestination:forDisplayUUID:];
}

id objc_msgSend_setEventDispatchMode_ambiguityRecommendation_lastTouchTimestamp_forTouchStreamIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setEventDispatchMode:ambiguityRecommendation:lastTouchTimestamp:forTouchStreamIdentifier:];
}

id objc_msgSend_setEventDispatcher_(void *a1, const char *a2, ...)
{
  return [a1 setEventDispatcher:];
}

id objc_msgSend_setEventProcessorRegistry_(void *a1, const char *a2, ...)
{
  return [a1 setEventProcessorRegistry:];
}

id objc_msgSend_setEventType_(void *a1, const char *a2, ...)
{
  return [a1 setEventType:];
}

id objc_msgSend_setEventsDisabled_pid_(void *a1, const char *a2, ...)
{
  return [a1 setEventsDisabled:pid:];
}

id objc_msgSend_setExcludedZoomContextIDs_fromVersionedPID_(void *a1, const char *a2, ...)
{
  return [a1 setExcludedZoomContextIDs:fromVersionedPID:];
}

id objc_msgSend_setExclusivityIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setExclusivityIdentifier:];
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return [a1 setExportedInterface:];
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return [a1 setExportedObject:];
}

id objc_msgSend_setExternal_(void *a1, const char *a2, ...)
{
  return [a1 setExternal:];
}

id objc_msgSend_setFillColor_(void *a1, const char *a2, ...)
{
  return [a1 setFillColor:];
}

id objc_msgSend_setFillMode_(void *a1, const char *a2, ...)
{
  return [a1 setFillMode:];
}

id objc_msgSend_setFingerDownCount_(void *a1, const char *a2, ...)
{
  return [a1 setFingerDownCount:];
}

id objc_msgSend_setFlipBookEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setFlipBookEnabled:];
}

id objc_msgSend_setFlipBookSuppressed_(void *a1, const char *a2, ...)
{
  return [a1 setFlipBookSuppressed:];
}

id objc_msgSend_setFont_(void *a1, const char *a2, ...)
{
  return [a1 setFont:];
}

id objc_msgSend_setFontSize_(void *a1, const char *a2, ...)
{
  return [a1 setFontSize:];
}

id objc_msgSend_setForceDemoMaxHBI_(void *a1, const char *a2, ...)
{
  return [a1 setForceDemoMaxHBI:];
}

id objc_msgSend_setForegroundColor_(void *a1, const char *a2, ...)
{
  return [a1 setForegroundColor:];
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return [a1 setFrame:];
}

id objc_msgSend_setFromValue_(void *a1, const char *a2, ...)
{
  return [a1 setFromValue:];
}

id objc_msgSend_setFrozen_(void *a1, const char *a2, ...)
{
  return [a1 setFrozen:];
}

id objc_msgSend_setGSModifierState_(void *a1, const char *a2, ...)
{
  return [a1 setGSModifierState:];
}

id objc_msgSend_setGlobalMouseDevicePreferences_(void *a1, const char *a2, ...)
{
  return [a1 setGlobalMouseDevicePreferences:];
}

id objc_msgSend_setGlobalPointerEventRoutes_forPID_displayUUID_(void *a1, const char *a2, ...)
{
  return [a1 setGlobalPointerEventRoutes:forPID:displayUUID:];
}

id objc_msgSend_setGlobalPointerPosition_process_(void *a1, const char *a2, ...)
{
  return [a1 setGlobalPointerPosition:process:];
}

id objc_msgSend_setGlobeKeyLabelHasGlobeSymbol_(void *a1, const char *a2, ...)
{
  return [a1 setGlobeKeyLabelHasGlobeSymbol:];
}

id objc_msgSend_setHasDiscreteProximitySensor_(void *a1, const char *a2, ...)
{
  return [a1 setHasDiscreteProximitySensor:];
}

id objc_msgSend_setHasInsecureFilter_(void *a1, const char *a2, ...)
{
  return [a1 setHasInsecureFilter:];
}

id objc_msgSend_setHasVirtualMouseButtons_(void *a1, const char *a2, ...)
{
  return [a1 setHasVirtualMouseButtons:];
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return [a1 setHidden:];
}

id objc_msgSend_setHideAppleLogoOnLaunch_(void *a1, const char *a2, ...)
{
  return [a1 setHideAppleLogoOnLaunch:];
}

id objc_msgSend_setHitTestContextCategory_(void *a1, const char *a2, ...)
{
  return [a1 setHitTestContextCategory:];
}

id objc_msgSend_setHitTestContexts_(void *a1, const char *a2, ...)
{
  return [a1 setHitTestContexts:];
}

id objc_msgSend_setHitTestInformationFromEndEvent_(void *a1, const char *a2, ...)
{
  return [a1 setHitTestInformationFromEndEvent:];
}

id objc_msgSend_setHitTestInformationFromStartEvent_(void *a1, const char *a2, ...)
{
  return [a1 setHitTestInformationFromStartEvent:];
}

id objc_msgSend_setHitTestLocation_(void *a1, const char *a2, ...)
{
  return [a1 setHitTestLocation:];
}

id objc_msgSend_setHitTestRegions_forDisplay_(void *a1, const char *a2, ...)
{
  return [a1 setHitTestRegions:forDisplay:];
}

id objc_msgSend_setHitTestSecurityAnalysis_(void *a1, const char *a2, ...)
{
  return [a1 setHitTestSecurityAnalysis:];
}

id objc_msgSend_setHumanIsPresent_(void *a1, const char *a2, ...)
{
  return [a1 setHumanIsPresent:];
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return [a1 setImage:];
}

id objc_msgSend_setInitialTouchTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setInitialTouchTimestamp:];
}

id objc_msgSend_setInterface_(void *a1, const char *a2, ...)
{
  return [a1 setInterface:];
}

id objc_msgSend_setInterfaceTarget_(void *a1, const char *a2, ...)
{
  return [a1 setInterfaceTarget:];
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return [a1 setInterruptionHandler:];
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return [a1 setInvalidationHandler:];
}

id objc_msgSend_setIsDetached_(void *a1, const char *a2, ...)
{
  return [a1 setIsDetached:];
}

id objc_msgSend_setJobLabel_(void *a1, const char *a2, ...)
{
  return [a1 setJobLabel:];
}

id objc_msgSend_setKeyCommandsToAuthenticate_(void *a1, const char *a2, ...)
{
  return [a1 setKeyCommandsToAuthenticate:];
}

id objc_msgSend_setKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 setKeyPath:];
}

id objc_msgSend_setKeyboardEventProcessor_(void *a1, const char *a2, ...)
{
  return [a1 setKeyboardEventProcessor:];
}

id objc_msgSend_setKeyboardLayout_(void *a1, const char *a2, ...)
{
  return [a1 setKeyboardLayout:];
}

id objc_msgSend_setKeyboardLayout_forSenderID_(void *a1, const char *a2, ...)
{
  return [a1 setKeyboardLayout:forSenderID:];
}

id objc_msgSend_setKeyboardTypeRemap_(void *a1, const char *a2, ...)
{
  return [a1 setKeyboardTypeRemap:];
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return [a1 setLabel:];
}

id objc_msgSend_setLanguage_(void *a1, const char *a2, ...)
{
  return [a1 setLanguage:];
}

id objc_msgSend_setLayer_(void *a1, const char *a2, ...)
{
  return [a1 setLayer:];
}

id objc_msgSend_setLayerNamesByContext_(void *a1, const char *a2, ...)
{
  return [a1 setLayerNamesByContext:];
}

id objc_msgSend_setLayout_(void *a1, const char *a2, ...)
{
  return [a1 setLayout:];
}

id objc_msgSend_setLevel_(void *a1, const char *a2, ...)
{
  return [a1 setLevel:];
}

id objc_msgSend_setLineDashPattern_(void *a1, const char *a2, ...)
{
  return [a1 setLineDashPattern:];
}

id objc_msgSend_setLineWidth_(void *a1, const char *a2, ...)
{
  return [a1 setLineWidth:];
}

id objc_msgSend_setLocalDefaults_(void *a1, const char *a2, ...)
{
  return [a1 setLocalDefaults:];
}

id objc_msgSend_setLocation_(void *a1, const char *a2, ...)
{
  return [a1 setLocation:];
}

id objc_msgSend_setLockBacklight_(void *a1, const char *a2, ...)
{
  return [a1 setLockBacklight:];
}

id objc_msgSend_setLocus_(void *a1, const char *a2, ...)
{
  return [a1 setLocus:];
}

id objc_msgSend_setLog_(void *a1, const char *a2, ...)
{
  return [a1 setLog:];
}

id objc_msgSend_setMainDisplayCornerRadius_(void *a1, const char *a2, ...)
{
  return [a1 setMainDisplayCornerRadius:];
}

id objc_msgSend_setManufacturerName_(void *a1, const char *a2, ...)
{
  return [a1 setManufacturerName:];
}

id objc_msgSend_setMaximumForce_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumForce:];
}

id objc_msgSend_setMaximumLongPressTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumLongPressTimeInterval:];
}

id objc_msgSend_setMaximumMultiplePressTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumMultiplePressTimeInterval:];
}

id objc_msgSend_setMaximumPositionZ_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumPositionZ:];
}

id objc_msgSend_setMaximumPressCount_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumPressCount:];
}

id objc_msgSend_setMaximumTapCount_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumTapCount:];
}

id objc_msgSend_setMaximumTerminationResistance_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumTerminationResistance:];
}

id objc_msgSend_setMaximumTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumTimeInterval:];
}

id objc_msgSend_setMinimumBrightnessLevel_fadeDuration_(void *a1, const char *a2, ...)
{
  return [a1 setMinimumBrightnessLevel:fadeDuration:];
}

id objc_msgSend_setMinimumLongPressTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 setMinimumLongPressTimeInterval:];
}

id objc_msgSend_setMinimumMultiplePressTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 setMinimumMultiplePressTimeInterval:];
}

id objc_msgSend_setMinimumTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 setMinimumTimeInterval:];
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return [a1 setMode:];
}

id objc_msgSend_setModelUpdateAssertion_(void *a1, const char *a2, ...)
{
  return [a1 setModelUpdateAssertion:];
}

id objc_msgSend_setMousePointerController_(void *a1, const char *a2, ...)
{
  return [a1 setMousePointerController:];
}

id objc_msgSend_setMultitouchHostStateKeys_(void *a1, const char *a2, ...)
{
  return [a1 setMultitouchHostStateKeys:];
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return [a1 setName:];
}

id objc_msgSend_setNamespaceNode_(void *a1, const char *a2, ...)
{
  return [a1 setNamespaceNode:];
}

id objc_msgSend_setNativeRotation_(void *a1, const char *a2, ...)
{
  return [a1 setNativeRotation:];
}

id objc_msgSend_setNeedsDisplay(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsDisplay];
}

id objc_msgSend_setNeedsLogging_(void *a1, const char *a2, ...)
{
  return [a1 setNeedsLogging:];
}

id objc_msgSend_setNormalizedDigitizerRect_(void *a1, const char *a2, ...)
{
  return [a1 setNormalizedDigitizerRect:];
}

id objc_msgSend_setObject_(void *a1, const char *a2, ...)
{
  return [a1 setObject:];
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:atIndexedSubscript:];
}

id objc_msgSend_setObject_atKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 setObject:atKeyPath:];
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKey:];
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKeyedSubscript:];
}

id objc_msgSend_setObject_forSetting_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forSetting:];
}

id objc_msgSend_setOffset_forTouchesWithUserIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setOffset:forTouchesWithUserIdentifier:];
}

id objc_msgSend_setOpacity_(void *a1, const char *a2, ...)
{
  return [a1 setOpacity:];
}

id objc_msgSend_setOpenBundleId_(void *a1, const char *a2, ...)
{
  return [a1 setOpenBundleId:];
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return [a1 setOptions:];
}

id objc_msgSend_setOrientation_(void *a1, const char *a2, ...)
{
  return [a1 setOrientation:];
}

id objc_msgSend_setOrientationManager_(void *a1, const char *a2, ...)
{
  return [a1 setOrientationManager:];
}

id objc_msgSend_setOrientationNotificationDisabled_(void *a1, const char *a2, ...)
{
  return [a1 setOrientationNotificationDisabled:];
}

id objc_msgSend_setOriginIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setOriginIdentifier:];
}

id objc_msgSend_setOverlayType_(void *a1, const char *a2, ...)
{
  return [a1 setOverlayType:];
}

id objc_msgSend_setOverrideSenderDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 setOverrideSenderDescriptor:];
}

id objc_msgSend_setPID_(void *a1, const char *a2, ...)
{
  return [a1 setPID:];
}

id objc_msgSend_setPassiveOrientationEvents_(void *a1, const char *a2, ...)
{
  return [a1 setPassiveOrientationEvents:];
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return [a1 setPath:];
}

id objc_msgSend_setPathAttributes_(void *a1, const char *a2, ...)
{
  return [a1 setPathAttributes:];
}

id objc_msgSend_setPathIndex_(void *a1, const char *a2, ...)
{
  return [a1 setPathIndex:];
}

id objc_msgSend_setPathIndexInRangeMask_(void *a1, const char *a2, ...)
{
  return [a1 setPathIndexInRangeMask:];
}

id objc_msgSend_setPathIndexTouchingMask_(void *a1, const char *a2, ...)
{
  return [a1 setPathIndexTouchingMask:];
}

id objc_msgSend_setPaused_(void *a1, const char *a2, ...)
{
  return [a1 setPaused:];
}

id objc_msgSend_setPersistentProperties_forSenderDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 setPersistentProperties:forSenderDescriptor:];
}

id objc_msgSend_setPid_(void *a1, const char *a2, ...)
{
  return [a1 setPid:];
}

id objc_msgSend_setPoint_(void *a1, const char *a2, ...)
{
  return [a1 setPoint:];
}

id objc_msgSend_setPointerEdgeMask_(void *a1, const char *a2, ...)
{
  return [a1 setPointerEdgeMask:];
}

id objc_msgSend_setPointerPosition_onDisplay_withAnimationParameters_auditPID_(void *a1, const char *a2, ...)
{
  return [a1 setPointerPosition:x0 onDisplay:x1 withAnimationParameters:x2 auditPID:x3];
}

id objc_msgSend_setPointerRegionArrangementEdge_(void *a1, const char *a2, ...)
{
  return [a1 setPointerRegionArrangementEdge:];
}

id objc_msgSend_setPosition_(void *a1, const char *a2, ...)
{
  return [a1 setPosition:];
}

id objc_msgSend_setPostEventWithCurrentDetectionMask_(void *a1, const char *a2, ...)
{
  return [a1 setPostEventWithCurrentDetectionMask:];
}

id objc_msgSend_setPreciseLocation_(void *a1, const char *a2, ...)
{
  return [a1 setPreciseLocation:];
}

id objc_msgSend_setPreferenceKey_(void *a1, const char *a2, ...)
{
  return [a1 setPreferenceKey:];
}

id objc_msgSend_setPreferredFramesPerSecond_(void *a1, const char *a2, ...)
{
  return [a1 setPreferredFramesPerSecond:];
}

id objc_msgSend_setProcessDescription_(void *a1, const char *a2, ...)
{
  return [a1 setProcessDescription:];
}

id objc_msgSend_setProcessId_(void *a1, const char *a2, ...)
{
  return [a1 setProcessId:];
}

id objc_msgSend_setProductName_(void *a1, const char *a2, ...)
{
  return [a1 setProductName:];
}

id objc_msgSend_setProgressIndicatorProperties_(void *a1, const char *a2, ...)
{
  return [a1 setProgressIndicatorProperties:];
}

id objc_msgSend_setProperties_(void *a1, const char *a2, ...)
{
  return [a1 setProperties:];
}

id objc_msgSend_setProperty_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setProperty:forKey:];
}

id objc_msgSend_setProximityDetectionMode_(void *a1, const char *a2, ...)
{
  return [a1 setProximityDetectionMode:];
}

id objc_msgSend_setProximityInCentimeters_(void *a1, const char *a2, ...)
{
  return [a1 setProximityInCentimeters:];
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return [a1 setQueue:];
}

id objc_msgSend_setRasterizationScale_(void *a1, const char *a2, ...)
{
  return [a1 setRasterizationScale:];
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return [a1 setReason:];
}

id objc_msgSend_setRegistrantEntitled_(void *a1, const char *a2, ...)
{
  return [a1 setRegistrantEntitled:];
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return [a1 setRemoteObjectInterface:];
}

id objc_msgSend_setRemovedOnCompletion_(void *a1, const char *a2, ...)
{
  return [a1 setRemovedOnCompletion:];
}

id objc_msgSend_setRenderer_(void *a1, const char *a2, ...)
{
  return [a1 setRenderer:];
}

id objc_msgSend_setRendererFlags_(void *a1, const char *a2, ...)
{
  return [a1 setRendererFlags:];
}

id objc_msgSend_setRepeatCount_(void *a1, const char *a2, ...)
{
  return [a1 setRepeatCount:];
}

id objc_msgSend_setReportType_(void *a1, const char *a2, ...)
{
  return [a1 setReportType:];
}

id objc_msgSend_setResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return [a1 setResourceValue:forKey:error:];
}

id objc_msgSend_setRomanCapsLockSwitchModeActive_(void *a1, const char *a2, ...)
{
  return [a1 setRomanCapsLockSwitchModeActive:];
}

id objc_msgSend_setRomanCapsLockSwitchModeActive_forSenderID_(void *a1, const char *a2, ...)
{
  return [a1 setRomanCapsLockSwitchModeActive:forSenderID:];
}

id objc_msgSend_setRoutingPolicy_forTouchesWithUserIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setRoutingPolicy:forTouchesWithUserIdentifier:];
}

id objc_msgSend_setScale_(void *a1, const char *a2, ...)
{
  return [a1 setScale:];
}

id objc_msgSend_setScanningActive_buttonIdentifier_forPID_(void *a1, const char *a2, ...)
{
  return [a1 setScanningActive:buttonIdentifier:forPID:];
}

id objc_msgSend_setSceneHostSettings_(void *a1, const char *a2, ...)
{
  return [a1 setSceneHostSettings:];
}

id objc_msgSend_setSceneTouchBehavior_(void *a1, const char *a2, ...)
{
  return [a1 setSceneTouchBehavior:];
}

id objc_msgSend_setSection_(void *a1, const char *a2, ...)
{
  return [a1 setSection:];
}

id objc_msgSend_setSecure_(void *a1, const char *a2, ...)
{
  return [a1 setSecure:];
}

id objc_msgSend_setSecureModeEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setSecureModeEnabled:];
}

id objc_msgSend_setSecureNameStatus_(void *a1, const char *a2, ...)
{
  return [a1 setSecureNameStatus:];
}

id objc_msgSend_setSecurityAnalysis_(void *a1, const char *a2, ...)
{
  return [a1 setSecurityAnalysis:];
}

id objc_msgSend_setSenderID_(void *a1, const char *a2, ...)
{
  return [a1 setSenderID:];
}

id objc_msgSend_setServer_(void *a1, const char *a2, ...)
{
  return [a1 setServer:];
}

id objc_msgSend_setService_(void *a1, const char *a2, ...)
{
  return [a1 setService:];
}

id objc_msgSend_setService_forAlias_(void *a1, const char *a2, ...)
{
  return [a1 setService:forAlias:];
}

id objc_msgSend_setServiceConfigurings_(void *a1, const char *a2, ...)
{
  return [a1 setServiceConfigurings:];
}

id objc_msgSend_setServiceMatcherDataProvider_(void *a1, const char *a2, ...)
{
  return [a1 setServiceMatcherDataProvider:];
}

id objc_msgSend_setServiceQuality_(void *a1, const char *a2, ...)
{
  return [a1 setServiceQuality:];
}

id objc_msgSend_setServiceServer_(void *a1, const char *a2, ...)
{
  return [a1 setServiceServer:];
}

id objc_msgSend_setShapeSize_(void *a1, const char *a2, ...)
{
  return [a1 setShapeSize:];
}

id objc_msgSend_setShouldAutoposition_(void *a1, const char *a2, ...)
{
  return [a1 setShouldAutoposition:];
}

id objc_msgSend_setShouldConsumeEvents_(void *a1, const char *a2, ...)
{
  return [a1 setShouldConsumeEvents:];
}

id objc_msgSend_setShouldScrollNaturally_(void *a1, const char *a2, ...)
{
  return [a1 setShouldScrollNaturally:];
}

id objc_msgSend_setShouldSuppressTouchesWhileObjectWithinProximity_(void *a1, const char *a2, ...)
{
  return [a1 setShouldSuppressTouchesWhileObjectWithinProximity:];
}

id objc_msgSend_setShouldSwapPrimaryAndSecondaryButtons_(void *a1, const char *a2, ...)
{
  return [a1 setShouldSwapPrimaryAndSecondaryButtons:];
}

id objc_msgSend_setShouldUseButtonDownRecenteringBehavior_(void *a1, const char *a2, ...)
{
  return [a1 setShouldUseButtonDownRecenteringBehavior:];
}

id objc_msgSend_setShouldUseHighFrequencyAttributeOption_(void *a1, const char *a2, ...)
{
  return [a1 setShouldUseHighFrequencyAttributeOption:];
}

id objc_msgSend_setShouldVisualizeHitTestRegions_(void *a1, const char *a2, ...)
{
  return [a1 setShouldVisualizeHitTestRegions:];
}

id objc_msgSend_setShouldVisualizeTouches_(void *a1, const char *a2, ...)
{
  return [a1 setShouldVisualizeTouches:];
}

id objc_msgSend_setSize_(void *a1, const char *a2, ...)
{
  return [a1 setSize:];
}

id objc_msgSend_setSlotDeletionCallback_(void *a1, const char *a2, ...)
{
  return [a1 setSlotDeletionCallback:];
}

id objc_msgSend_setSmartCoverEventProcessor_(void *a1, const char *a2, ...)
{
  return [a1 setSmartCoverEventProcessor:];
}

id objc_msgSend_setSource_(void *a1, const char *a2, ...)
{
  return [a1 setSource:];
}

id objc_msgSend_setSpawnType_(void *a1, const char *a2, ...)
{
  return [a1 setSpawnType:];
}

id objc_msgSend_setStandardType_(void *a1, const char *a2, ...)
{
  return [a1 setStandardType:];
}

id objc_msgSend_setStandardType_forSenderID_(void *a1, const char *a2, ...)
{
  return [a1 setStandardType:forSenderID:];
}

id objc_msgSend_setStatistics_(void *a1, const char *a2, ...)
{
  return [a1 setStatistics:];
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return [a1 setString:];
}

id objc_msgSend_setStrokeColor_(void *a1, const char *a2, ...)
{
  return [a1 setStrokeColor:];
}

id objc_msgSend_setStyleModifier_(void *a1, const char *a2, ...)
{
  return [a1 setStyleModifier:];
}

id objc_msgSend_setStyleSheet_(void *a1, const char *a2, ...)
{
  return [a1 setStyleSheet:];
}

id objc_msgSend_setSubinterfaceID_(void *a1, const char *a2, ...)
{
  return [a1 setSubinterfaceID:];
}

id objc_msgSend_setSubnodeScreenEdgeTreatment_(void *a1, const char *a2, ...)
{
  return [a1 setSubnodeScreenEdgeTreatment:];
}

id objc_msgSend_setSuggestedSystemApertureGracePeriodForScreenOff_(void *a1, const char *a2, ...)
{
  return [a1 setSuggestedSystemApertureGracePeriodForScreenOff:];
}

id objc_msgSend_setSuperBias_(void *a1, const char *a2, ...)
{
  return [a1 setSuperBias:];
}

id objc_msgSend_setSupportsDragLock_(void *a1, const char *a2, ...)
{
  return [a1 setSupportsDragLock:];
}

id objc_msgSend_setSupportsLightClick_(void *a1, const char *a2, ...)
{
  return [a1 setSupportsLightClick:];
}

id objc_msgSend_setSupportsSystemHaptics_(void *a1, const char *a2, ...)
{
  return [a1 setSupportsSystemHaptics:];
}

id objc_msgSend_setSystemGestureStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setSystemGestureStateChange:];
}

id objc_msgSend_setSystemGesturesPossible_(void *a1, const char *a2, ...)
{
  return [a1 setSystemGesturesPossible:];
}

id objc_msgSend_setSystemIdentifiers_(void *a1, const char *a2, ...)
{
  return [a1 setSystemIdentifiers:];
}

id objc_msgSend_setSystemIdleSleepInterval_(void *a1, const char *a2, ...)
{
  return [a1 setSystemIdleSleepInterval:];
}

id objc_msgSend_setSystemInterface_(void *a1, const char *a2, ...)
{
  return [a1 setSystemInterface:];
}

id objc_msgSend_setTag_(void *a1, const char *a2, ...)
{
  return [a1 setTag:];
}

id objc_msgSend_setTargetContextID_(void *a1, const char *a2, ...)
{
  return [a1 setTargetContextID:];
}

id objc_msgSend_setTargetQueue_(void *a1, const char *a2, ...)
{
  return [a1 setTargetQueue:];
}

id objc_msgSend_setTargetSlotID_(void *a1, const char *a2, ...)
{
  return [a1 setTargetSlotID:];
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setTimestamp:];
}

id objc_msgSend_setToValue_(void *a1, const char *a2, ...)
{
  return [a1 setToValue:];
}

id objc_msgSend_setToken_(void *a1, const char *a2, ...)
{
  return [a1 setToken:];
}

id objc_msgSend_setTouchDeliveryPolicyServer_(void *a1, const char *a2, ...)
{
  return [a1 setTouchDeliveryPolicyServer:];
}

id objc_msgSend_setTouchIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setTouchIdentifier:];
}

id objc_msgSend_setTouchPadManager_(void *a1, const char *a2, ...)
{
  return [a1 setTouchPadManager:];
}

id objc_msgSend_setTouchStreamIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setTouchStreamIdentifier:];
}

id objc_msgSend_setTracksCarPlayRegions_(void *a1, const char *a2, ...)
{
  return [a1 setTracksCarPlayRegions:];
}

id objc_msgSend_setTransform_(void *a1, const char *a2, ...)
{
  return [a1 setTransform:];
}

id objc_msgSend_setTransport_(void *a1, const char *a2, ...)
{
  return [a1 setTransport:];
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return [a1 setType:];
}

id objc_msgSend_setUnacceleratedRelativePositionX_(void *a1, const char *a2, ...)
{
  return [a1 setUnacceleratedRelativePositionX:];
}

id objc_msgSend_setUnacceleratedRelativePositionY_(void *a1, const char *a2, ...)
{
  return [a1 setUnacceleratedRelativePositionY:];
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return [a1 setUnderlyingQueue:];
}

id objc_msgSend_setUserIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setUserIdentifier:];
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return [a1 setUserInfo:];
}

id objc_msgSend_setUserInfo_forConnection_(void *a1, const char *a2, ...)
{
  return [a1 setUserInfo:forConnection:];
}

id objc_msgSend_setValidMask_(void *a1, const char *a2, ...)
{
  return [a1 setValidMask:];
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return [a1 setValue:];
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return [a1 setValues:];
}

id objc_msgSend_setVersionedPID_(void *a1, const char *a2, ...)
{
  return [a1 setVersionedPID:];
}

id objc_msgSend_setVisible_(void *a1, const char *a2, ...)
{
  return [a1 setVisible:];
}

id objc_msgSend_setWantsAccelerometerEvents_(void *a1, const char *a2, ...)
{
  return [a1 setWantsAccelerometerEvents:];
}

id objc_msgSend_setWantsOrientationEvents_(void *a1, const char *a2, ...)
{
  return [a1 setWantsOrientationEvents:];
}

id objc_msgSend_setWatchdogType_(void *a1, const char *a2, ...)
{
  return [a1 setWatchdogType:];
}

id objc_msgSend_setWifiInterfaceName_(void *a1, const char *a2, ...)
{
  return [a1 setWifiInterfaceName:];
}

id objc_msgSend_setWindowServerDisplay_(void *a1, const char *a2, ...)
{
  return [a1 setWindowServerDisplay:];
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return [a1 setWithArray:];
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return [a1 setWithObject:];
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return [a1 setWithObjects:];
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return [a1 setWithSet:];
}

id objc_msgSend_setXThreshold_(void *a1, const char *a2, ...)
{
  return [a1 setXThreshold:];
}

id objc_msgSend_setYThreshold_(void *a1, const char *a2, ...)
{
  return [a1 setYThreshold:];
}

id objc_msgSend_setZGradient_(void *a1, const char *a2, ...)
{
  return [a1 setZGradient:];
}

id objc_msgSend_setZThreshold_(void *a1, const char *a2, ...)
{
  return [a1 setZThreshold:];
}

id objc_msgSend_settings(void *a1, const char *a2, ...)
{
  return _[a1 settings];
}

id objc_msgSend_settlingDuration(void *a1, const char *a2, ...)
{
  return _[a1 settlingDuration];
}

id objc_msgSend_shapeSize(void *a1, const char *a2, ...)
{
  return _[a1 shapeSize];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedInstances(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstances];
}

id objc_msgSend_sharedServer(void *a1, const char *a2, ...)
{
  return _[a1 sharedServer];
}

id objc_msgSend_shouldAutoposition(void *a1, const char *a2, ...)
{
  return _[a1 shouldAutoposition];
}

id objc_msgSend_shouldAvoidHitTesting(void *a1, const char *a2, ...)
{
  return _[a1 shouldAvoidHitTesting];
}

id objc_msgSend_shouldCancelTouchesDeliveredToContextId_withInitialTouchTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 shouldCancelTouchesDeliveredToContextId:withInitialTouchTimestamp:];
}

id objc_msgSend_shouldCreateStudyLogger(void *a1, const char *a2, ...)
{
  return _[a1 shouldCreateStudyLogger];
}

id objc_msgSend_shouldIgnoreTouchesWhileObjectInProximity(void *a1, const char *a2, ...)
{
  return _[a1 shouldIgnoreTouchesWhileObjectInProximity];
}

id objc_msgSend_shouldRenderWithSupernode(void *a1, const char *a2, ...)
{
  return _[a1 shouldRenderWithSupernode];
}

id objc_msgSend_shouldScrollNaturally(void *a1, const char *a2, ...)
{
  return _[a1 shouldScrollNaturally];
}

id objc_msgSend_shouldUseButtonDownRecenteringBehavior(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseButtonDownRecenteringBehavior];
}

id objc_msgSend_shouldUseHaptic(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseHaptic];
}

id objc_msgSend_shouldUseHighFrequencyAttributeOption(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseHighFrequencyAttributeOption];
}

id objc_msgSend_shouldVisualizeHitTestRegions(void *a1, const char *a2, ...)
{
  return _[a1 shouldVisualizeHitTestRegions];
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _[a1 size];
}

id objc_msgSend_sizeLayer_toFitAtScale_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sizeLayer:toFitAtScale:");
}

id objc_msgSend_sizeLayerToFitAtScale_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sizeLayerToFitAtScale:");
}

id objc_msgSend_slotID(void *a1, const char *a2, ...)
{
  return _[a1 slotID];
}

id objc_msgSend_slowConfigDictionaryForHAButtonHapticType_(void *a1, const char *a2, ...)
{
  return [a1 slowConfigDictionaryForHAButtonHapticType:];
}

id objc_msgSend_smartCoverEventProcessor(void *a1, const char *a2, ...)
{
  return _[a1 smartCoverEventProcessor];
}

id objc_msgSend_smartCoverStateDidChange_(void *a1, const char *a2, ...)
{
  return [a1 smartCoverStateDidChange:];
}

id objc_msgSend_smartKeyboardAttachmentStateDidChange_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "smartKeyboardAttachmentStateDidChange:");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return [a1 sortUsingComparator:];
}

id objc_msgSend_springBoardDefaults(void *a1, const char *a2, ...)
{
  return _[a1 springBoardDefaults];
}

id objc_msgSend_stage(void *a1, const char *a2, ...)
{
  return _[a1 stage];
}

id objc_msgSend_standardConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 standardConfiguration];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startDeviceOrientationUpdatesToQueue_withHandler_(void *a1, const char *a2, ...)
{
  return [a1 startDeviceOrientationUpdatesToQueue:withHandler:];
}

id objc_msgSend_startEventProcessor_mainDisplayObserver_deliveryManager_dispatcherProvider_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "startEventProcessor:mainDisplayObserver:deliveryManager:dispatcherProvider:");
}

id objc_msgSend_startMonitoringSecureDrawing(void *a1, const char *a2, ...)
{
  return _[a1 startMonitoringSecureDrawing];
}

id objc_msgSend_startObserving_queue_(void *a1, const char *a2, ...)
{
  return [a1 startObserving:x0 queue:x1];
}

id objc_msgSend_startOfDayForDate_(void *a1, const char *a2, ...)
{
  return [a1 startOfDayForDate:];
}

id objc_msgSend_startServerWithChannel_(void *a1, const char *a2, ...)
{
  return [a1 startServerWithChannel:];
}

id objc_msgSend_startServerWithDataMigration(void *a1, const char *a2, ...)
{
  return _[a1 startServerWithDataMigration];
}

id objc_msgSend_startServerWithoutDataMigration(void *a1, const char *a2, ...)
{
  return _[a1 startServerWithoutDataMigration];
}

id objc_msgSend_statisticWithLabel_(void *a1, const char *a2, ...)
{
  return [a1 statisticWithLabel:];
}

id objc_msgSend_statisticWithLabel_hexFormatModifier_(void *a1, const char *a2, ...)
{
  return [a1 statisticWithLabel:x0 hexFormatModifier:x1];
}

id objc_msgSend_statisticWithLabel_scale_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "statisticWithLabel:scale:");
}

id objc_msgSend_statisticsWithLabel_capacity_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "statisticsWithLabel:capacity:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_stopDeviceOrientationUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopDeviceOrientationUpdates];
}

id objc_msgSend_stopRoutingGlobalEventsForPID_(void *a1, const char *a2, ...)
{
  return [a1 stopRoutingGlobalEventsForPID:];
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingFormat:];
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingPathComponent:];
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingPathExtension:];
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingString:];
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringByExpandingTildeInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByExpandingTildeInPath];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return [a1 stringByReplacingOccurrencesOfString:withString:];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return [a1 stringByReplacingOccurrencesOfString:withString:options:range:];
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return [a1 stringByTrimmingCharactersInSet:];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringWithFormat:];
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return [a1 stringWithString:];
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 stringWithUTF8String:];
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToStrongObjectsMapTable];
}

id objc_msgSend_style(void *a1, const char *a2, ...)
{
  return _[a1 style];
}

id objc_msgSend_styleSheet(void *a1, const char *a2, ...)
{
  return _[a1 styleSheet];
}

id objc_msgSend_styleSheetDidChange(void *a1, const char *a2, ...)
{
  return _[a1 styleSheetDidChange];
}

id objc_msgSend_stylusOpaqueTouchDigitizer(void *a1, const char *a2, ...)
{
  return _[a1 stylusOpaqueTouchDigitizer];
}

id objc_msgSend_subannotationWithString_(void *a1, const char *a2, ...)
{
  return [a1 subannotationWithString:];
}

id objc_msgSend_subnodeScreenEdgeTreatment(void *a1, const char *a2, ...)
{
  return _[a1 subnodeScreenEdgeTreatment];
}

id objc_msgSend_subnodeStyleModifier(void *a1, const char *a2, ...)
{
  return _[a1 subnodeStyleModifier];
}

id objc_msgSend_subnodes(void *a1, const char *a2, ...)
{
  return _[a1 subnodes];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return [a1 substringFromIndex:];
}

id objc_msgSend_succinctDescription(void *a1, const char *a2, ...)
{
  return _[a1 succinctDescription];
}

id objc_msgSend_succinctDescriptionBuilder(void *a1, const char *a2, ...)
{
  return _[a1 succinctDescriptionBuilder];
}

id objc_msgSend_succinctStyle(void *a1, const char *a2, ...)
{
  return _[a1 succinctStyle];
}

id objc_msgSend_superBias(void *a1, const char *a2, ...)
{
  return _[a1 superBias];
}

id objc_msgSend_superlayer(void *a1, const char *a2, ...)
{
  return _[a1 superlayer];
}

id objc_msgSend_supportCloningToDisplay_(void *a1, const char *a2, ...)
{
  return [a1 supportCloningToDisplay:];
}

id objc_msgSend_supportedSensors(void *a1, const char *a2, ...)
{
  return _[a1 supportedSensors];
}

id objc_msgSend_supportsLayerTracking(void *a1, const char *a2, ...)
{
  return _[a1 supportsLayerTracking];
}

id objc_msgSend_supportsProximityLPAEventTransitions(void *a1, const char *a2, ...)
{
  return _[a1 supportsProximityLPAEventTransitions];
}

id objc_msgSend_suppressBrightnessNotificationsForReason_(void *a1, const char *a2, ...)
{
  return [a1 suppressBrightnessNotificationsForReason:];
}

id objc_msgSend_suppressPointerModelUpdatesAssertionForDisplay_reason_(void *a1, const char *a2, ...)
{
  return [a1 suppressPointerModelUpdatesAssertionForDisplay:reason:];
}

id objc_msgSend_sustainOverlayForReason_(void *a1, const char *a2, ...)
{
  return [a1 sustainOverlayForReason:];
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _[a1 synchronize];
}

id objc_msgSend_synchronizeALSPreferencesAndSystemDisplayBrightness(void *a1, const char *a2, ...)
{
  return _[a1 synchronizeALSPreferencesAndSystemDisplayBrightness];
}

id objc_msgSend_systemAppSetOrientationEventsClient_wantsOrientationEvents_auditToken_(void *a1, const char *a2, ...)
{
  return [a1 systemAppSetOrientationEventsClient:x0 wantsOrientationEvents:x1 auditToken:x2];
}

id objc_msgSend_systemApplicationBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 systemApplicationBundleIdentifier];
}

id objc_msgSend_systemEventOfType_matchingEvent_options_(void *a1, const char *a2, ...)
{
  return [a1 systemEventOfType:matchingEvent:options:];
}

id objc_msgSend_systemGestureStateChange(void *a1, const char *a2, ...)
{
  return _[a1 systemGestureStateChange];
}

id objc_msgSend_systemIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 systemIdentifiers];
}

id objc_msgSend_systemIdleSleepInterval(void *a1, const char *a2, ...)
{
  return _[a1 systemIdleSleepInterval];
}

id objc_msgSend_systemInterface(void *a1, const char *a2, ...)
{
  return _[a1 systemInterface];
}

id objc_msgSend_systemShellChangedWithPrimary_(void *a1, const char *a2, ...)
{
  return [a1 systemShellChangedWithPrimary:];
}

id objc_msgSend_systemShellDidConnect_connection_(void *a1, const char *a2, ...)
{
  return [a1 systemShellDidConnect:connection];
}

id objc_msgSend_systemShellDidFinishLaunching_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "systemShellDidFinishLaunching:");
}

id objc_msgSend_systemShellDidTerminate_(void *a1, const char *a2, ...)
{
  return [a1 systemShellDidTerminate:];
}

id objc_msgSend_systemShellState(void *a1, const char *a2, ...)
{
  return _[a1 systemShellState];
}

id objc_msgSend_systemShellWillBootstrap(void *a1, const char *a2, ...)
{
  return _[a1 systemShellWillBootstrap];
}

id objc_msgSend_systemShells(void *a1, const char *a2, ...)
{
  return _[a1 systemShells];
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _[a1 tag];
}

id objc_msgSend_tapToWakeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 tapToWakeEnabled];
}

id objc_msgSend_targetWithPid_environmentIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 targetWithPid:environmentIdentifier:];
}

id objc_msgSend_taskNamePortOfContextId_(void *a1, const char *a2, ...)
{
  return [a1 taskNamePortOfContextId:];
}

id objc_msgSend_taskPortForContextID_displayUUID_(void *a1, const char *a2, ...)
{
  return [a1 taskPortForContextID:displayUUID:];
}

id objc_msgSend_terminate(void *a1, const char *a2, ...)
{
  return _[a1 terminate];
}

id objc_msgSend_terminateAlternateSystemApp_forReason_andReport_withDescription_completion_(void *a1, const char *a2, ...)
{
  return [a1 terminateAlternateSystemApp:forReason:andReport:withDescription:completion:];
}

id objc_msgSend_terminateAnyAlternateSystemApp(void *a1, const char *a2, ...)
{
  return _[a1 terminateAnyAlternateSystemApp];
}

id objc_msgSend_terminateWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 terminateWithCompletion:];
}

id objc_msgSend_tetheredDisplayPortMode(void *a1, const char *a2, ...)
{
  return _[a1 tetheredDisplayPortMode];
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _[a1 text];
}

id objc_msgSend_textBackgroundStyle(void *a1, const char *a2, ...)
{
  return _[a1 textBackgroundStyle];
}

id objc_msgSend_textStyle(void *a1, const char *a2, ...)
{
  return _[a1 textStyle];
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _[a1 token];
}

id objc_msgSend_tokenForIdentifierOfCAContext_(void *a1, const char *a2, ...)
{
  return [a1 tokenForIdentifierOfCAContext:];
}

id objc_msgSend_tokenFromAuditToken_(void *a1, const char *a2, ...)
{
  return [a1 tokenFromAuditToken:];
}

id objc_msgSend_touch_didHitTestToDestination_hostingChainIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "touch:didHitTestToDestination:hostingChainIndex:");
}

id objc_msgSend_touch_didMoveToPoint_eventMask_z_maxZ_(void *a1, const char *a2, ...)
{
  return [a1 touch:x0 didMoveToPoint:x1 eventMask:x2 z:x3 maxZ:x4];
}

id objc_msgSend_touch_pathIndex_downAtPoint_eventMask_transducerType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "touch:pathIndex:downAtPoint:eventMask:transducerType:");
}

id objc_msgSend_touch_pathIndex_rangeInAtPoint_eventMask_z_maxZ_transducerType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "touch:pathIndex:rangeInAtPoint:eventMask:z:maxZ:transducerType:");
}

id objc_msgSend_touch_pathIndex_rangeOutAtPoint_(void *a1, const char *a2, ...)
{
  return [a1 touch:pathIndex:rangeOutAtPoint:];
}

id objc_msgSend_touch_pathIndex_upAtPoint_detached_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "touch:pathIndex:upAtPoint:detached:");
}

id objc_msgSend_touchBehavior(void *a1, const char *a2, ...)
{
  return _[a1 touchBehavior];
}

id objc_msgSend_touchDeliveryPolicyServer(void *a1, const char *a2, ...)
{
  return _[a1 touchDeliveryPolicyServer];
}

id objc_msgSend_touchDidDetach_destinations_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "touchDidDetach:destinations:");
}

id objc_msgSend_touchDidFinishProcessingTouchCollection(void *a1, const char *a2, ...)
{
  return _[a1 touchDidFinishProcessingTouchCollection];
}

id objc_msgSend_touchDidHIDCancel_(void *a1, const char *a2, ...)
{
  return [a1 touchDidHIDCancel:];
}

id objc_msgSend_touchDidSoftCancel_(void *a1, const char *a2, ...)
{
  return [a1 touchDidSoftCancel:];
}

id objc_msgSend_touchDidTransfer_destination_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "touchDidTransfer:destination:")];
}

id objc_msgSend_touchIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 touchIdentifier];
}

id objc_msgSend_touchIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 touchIdentifiers];
}

id objc_msgSend_touchPadManager(void *a1, const char *a2, ...)
{
  return _[a1 touchPadManager];
}

id objc_msgSend_touchScales(void *a1, const char *a2, ...)
{
  return _[a1 touchScales];
}

id objc_msgSend_touchSensitiveButtonServicePersistentPropertyController(void *a1, const char *a2, ...)
{
  return _[a1 touchSensitiveButtonServicePersistentPropertyController];
}

id objc_msgSend_touchWillStartProcessingTouchCollection(void *a1, const char *a2, ...)
{
  return _[a1 touchWillStartProcessingTouchCollection];
}

id objc_msgSend_touchingPathIndexes(void *a1, const char *a2, ...)
{
  return _[a1 touchingPathIndexes];
}

id objc_msgSend_touchingPathIndexesDidChange(void *a1, const char *a2, ...)
{
  return _[a1 touchingPathIndexesDidChange];
}

id objc_msgSend_transferTouchIdentifiers_count_toContextID_(void *a1, const char *a2, ...)
{
  return [a1 transferTouchIdentifiers:count:toContextID:];
}

id objc_msgSend_transformFromLayerId_inContextId_(void *a1, const char *a2, ...)
{
  return [a1 transformFromLayerId:inContextId:];
}

id objc_msgSend_transformLayer(void *a1, const char *a2, ...)
{
  return _[a1 transformLayer];
}

id objc_msgSend_transformLayerPropertiesForDisplay_displayInterfaceOrientation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "transformLayerPropertiesForDisplay:displayInterfaceOrientation:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_unacceleratedRelativePointerPosition(void *a1, const char *a2, ...)
{
  return _[a1 unacceleratedRelativePointerPosition];
}

id objc_msgSend_unblockSystemApp(void *a1, const char *a2, ...)
{
  return _[a1 unblockSystemApp];
}

id objc_msgSend_unblockSystemAppForAlternateSystemAppWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 unblockSystemAppForAlternateSystemAppWithCompletion:];
}

id objc_msgSend_unentitledBrightnessLevel(void *a1, const char *a2, ...)
{
  return _[a1 unentitledBrightnessLevel];
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return [a1 unionSet:];
}

id objc_msgSend_uniqueId(void *a1, const char *a2, ...)
{
  return _[a1 uniqueId];
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIdentifier];
}

id objc_msgSend_uniqueProductIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueProductIdentifier];
}

id objc_msgSend_unknownSenderInfo(void *a1, const char *a2, ...)
{
  return _[a1 unknownSenderInfo];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_unsetToken(void *a1, const char *a2, ...)
{
  return _[a1 unsetToken];
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedCharValue];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsustainOverlayForReason_(void *a1, const char *a2, ...)
{
  return [a1 unsustainOverlayForReason:];
}

id objc_msgSend_unusedAssetSlots(void *a1, const char *a2, ...)
{
  return _[a1 unusedAssetSlots];
}

id objc_msgSend_updateCharacteristics_(void *a1, const char *a2, ...)
{
  return [a1 updateCharacteristics:];
}

id objc_msgSend_updateFromDefinition_withChangeInspectorBlock_(void *a1, const char *a2, ...)
{
  return [a1 updateFromDefinition:withChangeInspectorBlock:];
}

id objc_msgSend_updatePreferencesIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 updatePreferencesIfNeeded];
}

id objc_msgSend_updateStatistics_(void *a1, const char *a2, ...)
{
  return [a1 updateStatistics:];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userInfoForConnection_(void *a1, const char *a2, ...)
{
  return [a1 userInfoForConnection:];
}

id objc_msgSend_userInitiated(void *a1, const char *a2, ...)
{
  return _[a1 userInitiated];
}

id objc_msgSend_usesDisplayPortTethering(void *a1, const char *a2, ...)
{
  return _[a1 usesDisplayPortTethering];
}

id objc_msgSend_validateMessage_(void *a1, const char *a2, ...)
{
  return [a1 validateMessage:];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return [a1 valueForKey:];
}

id objc_msgSend_versionedPID(void *a1, const char *a2, ...)
{
  return _[a1 versionedPID];
}

id objc_msgSend_versionedPIDForPID_(void *a1, const char *a2, ...)
{
  return [a1 versionedPIDForPID:];
}

id objc_msgSend_videoTVOutReservedForIPodOut(void *a1, const char *a2, ...)
{
  return _[a1 videoTVOutReservedForIPodOut];
}

id objc_msgSend_videoTVOutReservedForRemoteUI(void *a1, const char *a2, ...)
{
  return _[a1 videoTVOutReservedForRemoteUI];
}

id objc_msgSend_virtualDisplayMode(void *a1, const char *a2, ...)
{
  return _[a1 virtualDisplayMode];
}

id objc_msgSend_visualizeMousePointer(void *a1, const char *a2, ...)
{
  return _[a1 visualizeMousePointer];
}

id objc_msgSend_wantsAccelerometerEvents(void *a1, const char *a2, ...)
{
  return _[a1 wantsAccelerometerEvents];
}

id objc_msgSend_wantsOrientationEvents(void *a1, const char *a2, ...)
{
  return _[a1 wantsOrientationEvents];
}

id objc_msgSend_watchdogType(void *a1, const char *a2, ...)
{
  return _[a1 watchdogType];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceCharacterSet];
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return _[a1 width];
}

id objc_msgSend_willUnblank(void *a1, const char *a2, ...)
{
  return _[a1 willUnblank];
}

id objc_msgSend_windowServerDisplay(void *a1, const char *a2, ...)
{
  return _[a1 windowServerDisplay];
}

id objc_msgSend_windowServerDisplayForDisplayIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 windowServerDisplayForDisplayIdentifier:];
}

id objc_msgSend_windowServerDisplays(void *a1, const char *a2, ...)
{
  return _[a1 windowServerDisplays];
}

id objc_msgSend_withType_andParameters_(void *a1, const char *a2, ...)
{
  return [a1 withType:andParameters:];
}

id objc_msgSend_workQueue(void *a1, const char *a2, ...)
{
  return _[a1 workQueue];
}

id objc_msgSend_xThreshold(void *a1, const char *a2, ...)
{
  return _[a1 xThreshold];
}

id objc_msgSend_yThreshold(void *a1, const char *a2, ...)
{
  return _[a1 yThreshold];
}

id objc_msgSend_zThreshold(void *a1, const char *a2, ...)
{
  return _[a1 zThreshold];
}