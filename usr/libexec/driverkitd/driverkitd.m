uint64_t sub_100003288(void *a1)
{
  uint64_t vars8;

  qword_100180A60 = objc_retainBlock(a1);

  return _objc_release_x1();
}

uint64_t sub_1000032BC()
{
  if (!qword_100180A60) {
    return 3758097112;
  }
  (*(void (**)(void))(qword_100180A60 + 16))();
  return 0;
}

uint64_t sub_100003304(void *a1, _DWORD *a2)
{
  id v3 = a1;
  id v4 = objc_alloc((Class)OSLaunchdJob);
  v5 = +[OSLaunchdDomain systemDomain];
  id v6 = [v4 initWithPlist:v3 domain:v5];

  id v11 = 0;
  v7 = [v6 submitAndStart:&v11];
  id v8 = v11;
  if (v7)
  {
    if ([v7 state] == (id)2)
    {
      uint64_t v9 = 0;
      if (a2) {
        *a2 = [v7 pid];
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10013006C(v7);
      }
      uint64_t v9 = 8;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10012FFD4(v8);
    }
    uint64_t v9 = 72;
  }

  return v9;
}

_DWORD *(*sub_10000345C(uint64_t a1))(_DWORD *result, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) == 77000) {
    return sub_10000347C;
  }
  else {
    return 0;
  }
}

_DWORD *sub_10000347C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000032BC();
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_1000034D8(_DWORD *a1, uint64_t a2)
{
  unsigned int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(void *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (a1[5] == 77000)
  {
    if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
    {
      *(_DWORD *)(a2 + 32) = -304;
      *(NDR_record_t *)(a2 + 24) = NDR_record;
    }
    else
    {
      *(_DWORD *)(a2 + 32) = sub_1000032BC();
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void sub_10000358C(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_1000036B0(a1, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000469C((uint64_t)a1, (uint64_t)v8);
  uint64_t v5 = swift_allocObject();
  sub_10000372C(v8, v5 + 16);
  aBlock[4] = sub_100003744;
  aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100003B38;
  aBlock[3] = &unk_10016A1D0;
  id v6 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v6);
}

void *sub_1000036B0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1000036F4()
{
  sub_10000478C(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10000372C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100003744()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_1000036B0(v0 + 2, v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  sub_1000037B0(v3);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  return v5;
}

void sub_1000037B0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100004700(&qword_10017BC58);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v34 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  id v6 = &v40;
  int64_t v33 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  id v8 = (unint64_t *)&unk_10017BC50;
  uint64_t v9 = NSObject_ptr;
  v10 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v5)
    {
      uint64_t v35 = (v5 - 1) & v5;
      int64_t v36 = v7;
      unint64_t v18 = __clz(__rbit64(v5)) | (v7 << 6);
    }
    else
    {
      int64_t v19 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_36;
      }
      if (v19 >= v33)
      {
LABEL_33:
        sub_1000048D8();
        return;
      }
      unint64_t v20 = *(void *)(v34 + 8 * v19);
      int64_t v21 = v7 + 1;
      if (!v20)
      {
        int64_t v21 = v7 + 2;
        if (v7 + 2 >= v33) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v34 + 8 * v21);
        if (!v20)
        {
          int64_t v21 = v7 + 3;
          if (v7 + 3 >= v33) {
            goto LABEL_33;
          }
          unint64_t v20 = *(void *)(v34 + 8 * v21);
          if (!v20)
          {
            int64_t v21 = v7 + 4;
            if (v7 + 4 >= v33) {
              goto LABEL_33;
            }
            unint64_t v20 = *(void *)(v34 + 8 * v21);
            if (!v20)
            {
              uint64_t v22 = v7 + 5;
              if (v7 + 5 >= v33) {
                goto LABEL_33;
              }
              unint64_t v20 = *(void *)(v34 + 8 * v22);
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_37;
                  }
                  if (v21 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = *(void *)(v34 + 8 * v21);
                  ++v22;
                  if (v20) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v21 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v35 = (v20 - 1) & v20;
      int64_t v36 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    v23 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v18);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    sub_1000047DC(*(void *)(v1 + 56) + 32 * v18, (uint64_t)v6);
    v39[0] = v25;
    v39[1] = v24;
    sub_1000047DC((uint64_t)v6, (uint64_t)v38);
    swift_bridgeObjectRetain_n();
    sub_100004878((uint64_t)v39);
    sub_10000483C(0, v8);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();

      sub_1000048D8();
      swift_release();
      return;
    }
    unint64_t v26 = sub_1000048E0(v25, v24);
    unint64_t v27 = v26;
    if (v28)
    {
      id v11 = v10;
      v12 = v9;
      v13 = v6;
      uint64_t v14 = v1;
      v15 = v8;
      v16 = (uint64_t *)(v2[6] + 16 * v26);
      swift_bridgeObjectRelease();
      uint64_t *v16 = v25;
      v16[1] = v24;
      id v8 = v15;
      uint64_t v1 = v14;
      id v6 = v13;
      uint64_t v9 = v12;
      v10 = v11;
      uint64_t v17 = v2[7];

      *(void *)(v17 + 8 * v27) = v37;
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v26;
    v29 = (uint64_t *)(v2[6] + 16 * v26);
    uint64_t *v29 = v25;
    v29[1] = v24;
    *(void *)(v2[7] + 8 * v26) = v37;
    uint64_t v30 = v2[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_35;
    }
    v2[2] = v32;
LABEL_8:
    unint64_t v5 = v35;
    int64_t v7 = v36;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

Class sub_100003B38(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_10000483C(0, &qword_10017BC50);
    v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_100003BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100003BE4()
{
  return swift_release();
}

uint64_t sub_100003BEC()
{
  return swift_allocObject();
}

uint64_t sub_100003BFC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

void sub_100003C40()
{
  os_log_type_t v0 = static os_log_type_t.error.getter();
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  os_log_type_t v1 = v0;
  log = static OS_os_log.default.getter();
  if (os_log_type_enabled(log, v0))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315138;
    sub_100003F90(0x65766528646E6573, 0xEC000000293A746ELL, &v4);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, log, v1, "Unexpected call to %s", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_100003DBC()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_100003DCC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t sub_100003E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  id v6 = sub_1000045E8(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_10000464C(a1, v7);
  return sub_100003EA8((uint64_t)v10, v7, v8);
}

uint64_t sub_100003EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000469C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100004700(&qword_10017BB00);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_10000478C(a1);
}

uint64_t sub_100003F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017BB00);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32);

  return v5(v4, v4, a1);
}

uint64_t sub_100003F90(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100004064(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000047DC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000047DC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000478C((uint64_t)v12);
  return v7;
}

uint64_t sub_100004064(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100004220(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100004220(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000042B8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100004498(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100004498(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000042B8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100004430(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100004430(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100004700(&qword_10017BC48);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100004498(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017BC48);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *sub_1000045E8(uint64_t *a1)
{
  os_log_type_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10000464C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10000469C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100004700(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for RealCoreAnalyticsClient()
{
  return self;
}

uint64_t type metadata accessor for NullCoreAnalyticsClient()
{
  return self;
}

uint64_t sub_10000478C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000047DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000483C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100004878(uint64_t a1)
{
  uint64_t v2 = sub_100004700(&qword_10017BC60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000048D8()
{
  return swift_release();
}

unint64_t sub_1000048E0(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100004958(a1, a2, v4);
}

unint64_t sub_100004958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void sub_100004A40(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)a3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(void *)a3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a1(v4);
  os_unfair_lock_unlock(v5);
}

BOOL static KMAllocatedUnfairLock.Ownership.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void KMAllocatedUnfairLock.Ownership.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int KMAllocatedUnfairLock.Ownership.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_100004B74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static KMAllocatedUnfairLock.Ownership.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100004B80()
{
  return KMAllocatedUnfairLock.Ownership.hashValue.getter(*v0);
}

void sub_100004B88(uint64_t a1)
{
  KMAllocatedUnfairLock.Ownership.hash(into:)(a1, *v1);
}

Swift::Int sub_100004B90()
{
  Hasher.init(_seed:)();
  KMAllocatedUnfairLock.Ownership.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_100004BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004C38();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t sub_100004C38()
{
  return static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
}

uint64_t sub_100004CB4()
{
  return swift_getWitnessTable();
}

uint64_t sub_100004CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata accessor for KMAllocatedUnfairLock()
{
  return sub_100004FAC();
}

uint64_t sub_100004CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

unsigned char *initializeBufferWithCopyOfBuffer for KextsOutOfOSImageFeatureFlags(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for KextsOutOfOSImageFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_100004D98(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100004E64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_100004E8C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100004E98(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for KMAllocatedUnfairLock.Ownership()
{
  return sub_100004FAC();
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!qword_10017BC68)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10017BC68);
    }
  }
}

uint64_t sub_100004F14@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(v4 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4
                                                                             + class metadata base offset for ManagedBuffer)
                                                                 - 8)
                                                     + 16))(a2, v3);
}

uint64_t sub_100004FAC()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100004FDC@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_100005028(v1 + 64, a1);
}

uint64_t sub_100005028(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017BC70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100005090(uint64_t a1)
{
  swift_beginAccess();
  sub_1000050E4(a1, v1 + 64);
  return swift_endAccess();
}

uint64_t sub_1000050E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017BC70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_10000514C())()
{
  return j_j__swift_endAccess;
}

id sub_1000051A0()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 104);

  return v1;
}

void sub_1000051E4(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 104);
  *(void *)(v1 + 104) = a1;
}

uint64_t (*sub_10000522C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100005280()
{
  return swift_retain();
}

uint64_t sub_1000052B8(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 112) = a1;
  return swift_release();
}

uint64_t (*sub_100005300())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100005354()
{
  return swift_retain();
}

uint64_t sub_10000538C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 120) = a1;
  return swift_release();
}

uint64_t (*sub_1000053D4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100005428()
{
  return swift_retain();
}

uint64_t sub_100005460(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 128) = a1;
  return swift_release();
}

uint64_t (*sub_1000054A8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000054FC()
{
  return swift_retain();
}

uint64_t sub_100005534(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 136) = a1;
  return swift_release();
}

uint64_t (*sub_10000557C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000055D0()
{
  return swift_retain();
}

uint64_t sub_100005608(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 144) = a1;
  return swift_release();
}

uint64_t (*sub_100005650())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000056A8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000056E0(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 152) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100005728())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10000577C(uint64_t a1, uint64_t a2, void *a3)
{
  swift_allocObject();
  uint64_t v6 = sub_100010F2C(a1, a2, a3);

  sub_10001100C(a1);
  return v6;
}

uint64_t sub_1000057E4()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 216);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 208))(v3);
  if (result)
  {
    uint64_t v5 = type metadata accessor for ApprovalManager();
    sub_1000E94E0(v0, (uint64_t)&off_10016A358, v5, (uint64_t)&off_10016EC40);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000589C()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 240);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 232))(v3);
  if (result)
  {
    uint64_t v5 = type metadata accessor for DriverBinManager();
    sub_1000E94E0(v0, (uint64_t)&off_10016A358, v5, (uint64_t)&off_10016B4F0);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100005954()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 264);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 256))(v3);
  if (result)
  {
    uint64_t v5 = type metadata accessor for ApplicationManager();
    sub_1000E94E0(v0, (uint64_t)&off_10016A358, v5, (uint64_t)&off_10016A7D8);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100005A28()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 288);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 280))(v3);
  if (result)
  {
    uint64_t active = type metadata accessor for ActiveDriversStateManager();
    sub_1000E94E0(v0, (uint64_t)&off_10016A358, active, (uint64_t)&off_10016AA30);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100005AFC()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 312);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 304))(v3);
  if (result)
  {
    uint64_t v5 = type metadata accessor for ActivationStateManager();
    sub_1000E94E0(v0, (uint64_t)&off_10016A358, v5, (uint64_t)&off_10016EF30);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100005BD0(uint64_t a1)
{
  sub_10000469C(a1, (uint64_t)v3);
  return (*(uint64_t (**)(unsigned char *))(*(void *)v1 + 168))(v3);
}

void *sub_100005C1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LookupSpec();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t result = (void *)((uint64_t (*)(uint64_t))(*v0)[29])(v3);
  if (result)
  {
    uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)result + 360))(result);
    uint64_t v8 = swift_release();
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*v0[7] + 144))(v8);
    sub_10005FAF8(v9, (uint64_t)v15);
    swift_release();
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = sub_10005E4B0((uint64_t)v5, 0, 0);
    sub_100011138((uint64_t)v15);
    sub_10001305C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LookupSpec);
    if (v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      BOOL v11 = sub_100011F7C((unint64_t)v10, v7, v1);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release();
      KeyPath = (void *)swift_getKeyPath();
      uint64_t v13 = sub_1000EE9A8(KeyPath, (uint64_t (*)(char *, char *))sub_100006324, 0, (uint64_t)v11, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return &_swiftEmptyArrayStorage;
    }
    return (void *)v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100005E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  __chkstk_darwin(v5);
  uint64_t v25 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100004700((uint64_t *)&unk_10017EBF0);
  uint64_t v8 = v7 - 8;
  uint64_t v9 = __chkstk_darwin(v7);
  BOOL v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v25 - v12;
  BOOL v14 = (char *)&v25 + *(int *)(v8 + 56) - v12;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17(v13, a1, v15);
  sub_100012F8C(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
  uint64_t v18 = (uint64_t)&v11[*(int *)(v8 + 56)];
  v17(v11, (uint64_t)v13, v15);
  sub_100012F8C((uint64_t)v14, v18, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
  uint64_t v19 = type metadata accessor for DriverBinEntry();
  unint64_t v20 = v25;
  uint64_t v21 = v26;
  uint64_t v22 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v18 + *(int *)(v19 + 28), v27);
  sub_10001305C(v18, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
  v23 = v20;
  LOBYTE(v20) = static URL.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v22);
  sub_1000130EC((uint64_t)v13, (uint64_t *)&unk_10017EBF0);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v15);
  return v20 & 1;
}

uint64_t sub_1000060E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004700((uint64_t *)&unk_10017EBF0);
  uint64_t v14 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_100010EA4(a1);
  if (v9) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 36) != v8)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v10(a2, 1, 1, v4);
  }
  else
  {
    uint64_t v11 = (uint64_t)&v6[*(int *)(v4 + 48)];
    sub_100010DA0((uint64_t)v6, v11, result, v8, 0, a1);
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 16))(a2, v6, v12);
    sub_100012F8C(v11, a2 + *(int *)(v4 + 48), (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    sub_1000130EC((uint64_t)v6, (uint64_t *)&unk_10017EBF0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v4);
  }
}

uint64_t sub_1000062D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

BOOL sub_100006324(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  type metadata accessor for RealizedInfo(0);
  return sub_10003928C(v2, v3);
}

uint64_t sub_100006368()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v157 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v152 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v156 = (char *)&v152 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  uint64_t v158 = *(void *)(active - 8);
  uint64_t v8 = __chkstk_darwin(active);
  v167 = (char *)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v174 = (uint64_t)&v152 - v11;
  __chkstk_darwin(v10);
  *(void *)&long long v168 = (char *)&v152 - v12;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v152 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  v169 = (char *)&v152 - v19;
  __chkstk_darwin(v18);
  v160 = (char *)&v152 - v20;
  uint64_t v21 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v21 - 8);
  v23 = (char *)&v152 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = type metadata accessor for URL();
  v173 = *(void **)(v179 - 8);
  uint64_t v24 = __chkstk_darwin(v179);
  v180 = (uint8_t *)&v152 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v172 = ((char *)&v152 - v26);
  uint64_t v177 = type metadata accessor for LookupSpec();
  uint64_t v27 = __chkstk_darwin(v177);
  v178 = (void **)((char *)&v152 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*v0 + 232))(v27);
  if (!result)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  uint64_t v166 = v14;
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)result + 360))(result);
  uint64_t v181 = v31;
  v176 = v32;
  uint64_t v33 = swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*v0 + 208))(v33);
  if (!result)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  v171 = (void *)v30;
  v159 = v17;
  uint64_t v152 = v6;
  v153 = v4;
  uint64_t v154 = v5;
  uint64_t v175 = v13;
  uint64_t v155 = v2;
  uint64_t v165 = (*(uint64_t (**)(uint64_t))(*(void *)result + 344))(result);
  uint64_t v164 = v34;
  uint64_t v35 = swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*v0 + 256))(v35);
  if (!result)
  {
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)result + 216))(result);
  swift_release();
  uint64_t v37 = sub_100007DD4(v36);
  swift_bridgeObjectRelease();
  uint64_t v38 = sub_100012544(v37);
  uint64_t v39 = swift_bridgeObjectRelease();
  uint64_t v40 = (uint64_t (**)(uint64_t))(*(void *)v1[7] + 144);
  v162 = *v40;
  v163 = v40;
  uint64_t v41 = v162(v39);
  v161 = &v152;
  __chkstk_darwin(v41);
  uint64_t v42 = v181;
  *(&v152 - 8) = (uint64_t)v171;
  *(&v152 - 7) = v42;
  uint64_t v43 = v165;
  *(&v152 - 6) = (uint64_t)v176;
  *(&v152 - 5) = v43;
  *(&v152 - 4) = v164;
  *(&v152 - 3) = v38;
  *(&v152 - 2) = (uint64_t)v1;
  uint64_t v164 = sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100004A40((void (*)(uint64_t))sub_1000125E0, (uint64_t)(&v152 - 10), v41);
  uint64_t v181 = 0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v44 = swift_bridgeObjectRelease();
  uint64_t v45 = v162(v44);
  sub_10005FAF8(v45, (uint64_t)v191);
  swift_release();
  uint64_t v46 = (uint64_t)v178;
  swift_storeEnumTagMultiPayload();
  v47 = sub_10005E4B0(v46, 0, 0);
  sub_100011138((uint64_t)v191);
  uint64_t v48 = sub_10001305C(v46, (uint64_t (*)(void))type metadata accessor for LookupSpec);
  v171 = v1;
  if (!v47) {
    goto LABEL_48;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*v1 + 280))(v48);
  if (!result)
  {
LABEL_86:
    __break(1u);
    return result;
  }
  uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)result + 176))(result);
  swift_release();
  if ((unint64_t)v47 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v50 = result;
  }
  else
  {
    uint64_t v50 = *(void *)(((unint64_t)v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v165 = v49;
  if (v50)
  {
    if (v50 >= 1)
    {
      uint64_t v51 = 0;
      v176 = (void (*)(char *, void **, uint64_t))((unint64_t)v47 & 0xC000000000000001);
      v52 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v173 + 7);
      v53 = (unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 6);
      v54 = (void (**)(NSObject *, char *, uint64_t))(v173 + 4);
      v55 = _swiftEmptyArrayStorage;
      v178 = v47;
      uint64_t v177 = v50;
      do
      {
        if (v176)
        {
          uint64_t v56 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v56 = (uint64_t)v47[v51 + 4];
          swift_retain();
        }
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(v56 + 24) + 112))(&aBlock);
        v57 = v186;
        if (v186)
        {
          v58 = v187;
          sub_1000036B0(&aBlock, (uint64_t)v186);
          (*((void (**)(void *, uint64_t (*)()))v58 + 8))(v57, v58);
          uint64_t v59 = v179;
          (*v52)(v23, 0, 1, v179);
          sub_10000478C((uint64_t)&aBlock);
        }
        else
        {
          sub_1000130EC((uint64_t)&aBlock, &qword_10017BC78);
          uint64_t v59 = v179;
          (*v52)(v23, 1, 1, v179);
        }
        swift_release();
        if ((*v53)(v23, 1, v59) == 1)
        {
          sub_1000130EC((uint64_t)v23, (uint64_t *)&unk_10017FA60);
        }
        else
        {
          v60 = *v54;
          v61 = v172;
          (*v54)(v172, v23, v59);
          v60(v180, (char *)v61, v59);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v55 = (void *)sub_10000C4CC(0, v55[2] + 1, 1, (unint64_t)v55);
          }
          unint64_t v63 = v55[2];
          unint64_t v62 = v55[3];
          if (v63 >= v62 >> 1) {
            v55 = (void *)sub_10000C4CC(v62 > 1, v63 + 1, 1, (unint64_t)v55);
          }
          v55[2] = v63 + 1;
          v60(((char *)v55+ ((*((unsigned __int8 *)v173 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v173 + 80))+ v173[9] * v63), (char *)v180, v59);
        }
        ++v51;
        v47 = v178;
      }
      while (v177 != v51);
      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_82;
  }
  v55 = _swiftEmptyArrayStorage;
LABEL_26:
  swift_bridgeObjectRelease_n();
  uint64_t v64 = sub_100012700((uint64_t)v55);
  swift_bridgeObjectRelease();
  uint64_t v65 = v181;
  v66 = sub_100012134(v165, v64);
  uint64_t v181 = v65;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v67 = active;
  if (sub_1000EF0B4())
  {
    uint64_t v48 = swift_bridgeObjectRelease();
    uint64_t v1 = v171;
  }
  else
  {
    uint64_t v68 = sub_1000EFDE4();
    uint64_t v69 = v166;
    v70 = *(void (**)(char *, void **, uint64_t))(v166 + 16);
    v71 = v160;
    v178 = (void **)v68;
    uint64_t v72 = v175;
    uint64_t v177 = v166 + 16;
    v176 = v70;
    ((void (*)(char *))v70)(v160);
    swift_bridgeObjectRetain_n();
    v73 = Logger.logObject.getter();
    int v74 = static os_log_type_t.default.getter();
    BOOL v75 = os_log_type_enabled(v73, (os_log_type_t)v74);
    v163 = (uint64_t (**)(uint64_t))v66;
    if (v75)
    {
      LODWORD(v179) = v74;
      v76 = (uint8_t *)swift_slowAlloc();
      v173 = (void *)swift_slowAlloc();
      v189 = v173;
      v180 = v76;
      *(_DWORD *)v76 = 136315138;
      int64_t v77 = v66[2];
      v78 = _swiftEmptyArrayStorage;
      uint64_t v79 = v174;
      if (v77)
      {
        v172 = v73;
        v182 = _swiftEmptyArrayStorage;
        sub_10000C884(0, v77, 0);
        uint64_t v80 = (uint64_t)v66
            + ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
        uint64_t v81 = *(void *)(v158 + 72);
        do
        {
          uint64_t v82 = v168;
          sub_100012F8C(v80, v168, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
          uint64_t aBlock = 8224;
          unint64_t v184 = 0xE200000000000000;
          v83._countAndFlagsBits = URL.path.getter();
          String.append(_:)(v83);
          swift_bridgeObjectRelease();
          uint64_t v84 = aBlock;
          unint64_t v85 = v184;
          sub_10001305C(v82, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
          v78 = v182;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10000C884(0, v78[2] + 1, 1);
            v78 = v182;
          }
          unint64_t v87 = v78[2];
          unint64_t v86 = v78[3];
          if (v87 >= v86 >> 1)
          {
            sub_10000C884(v86 > 1, v87 + 1, 1);
            v78 = v182;
          }
          v78[2] = v87 + 1;
          v88 = &v78[2 * v87];
          v88[4] = v84;
          v88[5] = v85;
          v80 += v81;
          --v77;
          uint64_t v79 = v174;
        }
        while (v77);
        uint64_t v72 = v175;
        v71 = v160;
        v73 = v172;
      }
      uint64_t aBlock = (uint64_t)v78;
      v91 = v180;
      sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
      uint64_t v92 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v94 = v93;
      swift_bridgeObjectRelease();
      uint64_t aBlock = sub_100003F90(v92, v94, (uint64_t *)&v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v66 = v163;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v179, "Drivers that should be unloaded:\n%s", v91, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v173 = *(void **)(v166 + 8);
      ((void (*)(char *, uint64_t))v173)(v71, v72);
      uint64_t v67 = active;
      uint64_t v90 = (uint64_t)v167;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v173 = *(void **)(v69 + 8);
      ((void (*)(char *, uint64_t))v173)(v71, v72);
      uint64_t v90 = (uint64_t)v167;
      uint64_t v79 = v174;
    }
    uint64_t v95 = v66[2];
    uint64_t v1 = v171;
    if (v95)
    {
      v180 = (uint8_t *)(v171 + 2);
      uint64_t v96 = (uint64_t)v66
          + ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
      uint64_t v179 = *(void *)(v158 + 72);
      v172 = (v166 + 8);
      *(void *)&long long v89 = 136315394;
      long long v168 = v89;
      uint64_t v165 = (uint64_t)&type metadata for Any + 8;
      do
      {
        sub_100012F8C(v96, v79, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
        v97 = (uint64_t *)(v79 + *(int *)(v67 + 20));
        uint64_t v98 = *v97;
        uint64_t v99 = v97[1];
        swift_bridgeObjectRetain();
        v189 = (void *)sub_100078FBC(v98, v99);
        uint64_t v100 = v1[5];
        uint64_t v101 = v1[6];
        sub_1000036B0(v180, v100);
        sub_10007F4B4(v100, v101);
        v102 = (void *)v181;
        sub_100077FDC(&aBlock, (uint64_t)&type metadata for KernelRequests.UnloadExtension, (uint64_t)&off_10017D8F8, v103);
        if (v102)
        {
          sub_10000478C((uint64_t)&aBlock);
          swift_bridgeObjectRelease();
          v104 = v169;
          v176(v169, v178, v175);
          sub_100012F8C(v79, v90, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
          swift_errorRetain();
          swift_errorRetain();
          v105 = v102;
          v106 = Logger.logObject.getter();
          uint64_t v107 = v90;
          os_log_type_t v108 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v106, v108))
          {
            uint64_t v109 = swift_slowAlloc();
            uint64_t v181 = swift_slowAlloc();
            uint64_t aBlock = v181;
            *(_DWORD *)uint64_t v109 = v168;
            v110 = (uint64_t *)(v107 + *(int *)(active + 20));
            uint64_t v111 = *v110;
            unint64_t v112 = v110[1];
            swift_bridgeObjectRetain();
            *(void *)(v109 + 4) = sub_100003F90(v111, v112, &aBlock);
            swift_bridgeObjectRelease();
            sub_10001305C(v107, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
            *(_WORD *)(v109 + 12) = 2080;
            v189 = v105;
            swift_errorRetain();
            sub_100004700(&qword_10017EB50);
            uint64_t v113 = String.init<A>(describing:)();
            *(void *)(v109 + 14) = sub_100003F90(v113, v114, &aBlock);
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v106, v108, "Failed to unload driver %s: %s", (uint8_t *)v109, 0x16u);
            swift_arrayDestroy();
            uint64_t v67 = active;
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
            ((void (*)(char *, uint64_t))v173)(v104, v175);
            uint64_t v79 = v174;
            sub_10001305C(v174, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
            uint64_t v181 = 0;
            uint64_t v1 = v171;
            uint64_t v90 = (uint64_t)v167;
          }
          else
          {

            swift_errorRelease();
            swift_errorRelease();
            sub_10001305C(v107, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
            swift_errorRelease();
            ((void (*)(char *, uint64_t))v173)(v104, v175);
            sub_10001305C(v79, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
            uint64_t v181 = 0;
            uint64_t v1 = v171;
            uint64_t v90 = v107;
          }
        }
        else
        {
          uint64_t v181 = 0;
          sub_10000478C((uint64_t)&aBlock);
          swift_bridgeObjectRelease();
          sub_10001305C(v79, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
        }
        v96 += v179;
        --v95;
      }
      while (v95);
    }
    uint64_t v48 = swift_bridgeObjectRelease();
  }
LABEL_48:
  v115 = (char *)v1;
  unint64_t v116 = (*(uint64_t (**)(uint64_t))(*v1 + 408))(v48);
  unint64_t v117 = v116;
  if (v116 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v118 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v118 = *(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v119 = (char *)_swiftEmptyArrayStorage;
  if (v118)
  {
    if (v118 < 1)
    {
      __break(1u);
      goto LABEL_80;
    }
    for (uint64_t i = 0; i != v118; ++i)
    {
      if ((v117 & 0xC000000000000001) != 0)
      {
        v121 = (void **)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        v121 = *(void ***)(v117 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(uint64_t *__return_ptr))(*v121[3] + 112))(&aBlock);
      v122 = v186;
      sub_1000130EC((uint64_t)&aBlock, &qword_10017BC78);
      if (v122)
      {
        char v123 = sub_10002A278();
        uint64_t v124 = ((uint64_t (*)(void, void, void))(*v121)[36])(0, 0, v123 & 1);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v119 = sub_10000C734(0, *((void *)v119 + 2) + 1, 1, v119);
        }
        unint64_t v126 = *((void *)v119 + 2);
        unint64_t v125 = *((void *)v119 + 3);
        if (v126 >= v125 >> 1) {
          v119 = sub_10000C734((char *)(v125 > 1), v126 + 1, 1, v119);
        }
        *((void *)v119 + 2) = v126 + 1;
        *(void *)&v119[8 * v126 + 32] = v124;
      }
      swift_release();
    }
  }
  uint64_t v127 = swift_bridgeObjectRelease_n();
  v128 = v171;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*v171 + 304))(v127);
  if (!result) {
    goto LABEL_85;
  }
  char v129 = (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
  swift_release();
  v115 = v190;
  uint64_t v130 = v175;
  uint64_t v118 = v166;
  if ((v129 & 1) == 0)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_66:
      unint64_t v132 = *((void *)v115 + 2);
      unint64_t v131 = *((void *)v115 + 3);
      if (v132 >= v131 >> 1) {
        v115 = sub_10000C3BC((char *)(v131 > 1), v132 + 1, 1, v115);
      }
      *((void *)v115 + 2) = v132 + 1;
      v133 = &v115[16 * v132];
      *((void *)v133 + 4) = 0xD00000000000001BLL;
      *((void *)v133 + 5) = 0x80000001001453F0;
      v190 = v115;
      uint64_t v130 = v175;
      v128 = v171;
      goto LABEL_69;
    }
LABEL_80:
    v115 = sub_10000C3BC(0, *((void *)v115 + 2) + 1, 1, v115);
    goto LABEL_66;
  }
LABEL_69:
  swift_bridgeObjectRetain();
  BOOL v134 = sub_1000EF0B4();
  swift_bridgeObjectRelease();
  if (v134)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v189 = (void *)sub_100079170(0, 0, 0, 0, (uint64_t)v119);
    uint64_t v135 = v128[5];
    uint64_t v136 = v128[6];
    sub_1000036B0(v128 + 2, v135);
    sub_10007F4B4(v135, v136);
    v137 = (void *)v181;
    sub_100077FDC(&aBlock, (uint64_t)&type metadata for KernelRequests.LoadFileset, (uint64_t)&off_10017D928, v138);
    if (v137)
    {
      sub_10000478C((uint64_t)&aBlock);
      swift_bridgeObjectRelease();
      uint64_t v139 = sub_1000EFDE4();
      v140 = v159;
      (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v159, v139, v130);
      swift_errorRetain();
      swift_errorRetain();
      v141 = Logger.logObject.getter();
      os_log_type_t v142 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v141, v142))
      {
        v143 = (uint8_t *)swift_slowAlloc();
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)v143 = 136315138;
        v189 = v137;
        swift_errorRetain();
        sub_100004700(&qword_10017EB50);
        uint64_t v144 = String.init<A>(describing:)();
        v189 = (void *)sub_100003F90(v144, v145, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v141, v142, "An error occurred while loading dext personalities: %s", v143, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v118 + 8))(v140, v175);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(char *, uint64_t))(v118 + 8))(v140, v130);
      }
    }
    else
    {
      sub_10000478C((uint64_t)&aBlock);
      uint64_t v146 = swift_bridgeObjectRelease();
      v147 = (void *)(*(uint64_t (**)(uint64_t))(*v128 + 184))(v146);
      v187 = sub_100012608;
      v188 = v128;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v184 = 1107296256;
      v185 = sub_10000AFF8;
      v186 = &unk_10016A330;
      v148 = _Block_copy(&aBlock);
      swift_retain();
      v149 = v156;
      static DispatchQoS.unspecified.getter();
      v189 = _swiftEmptyArrayStorage;
      sub_100013148((unint64_t *)&qword_10017EBD0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100004700((uint64_t *)&unk_10017DEB0);
      sub_10001348C((unint64_t *)&qword_10017EBE0, (uint64_t *)&unk_10017DEB0);
      v150 = v153;
      uint64_t v151 = v155;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v148);

      (*(void (**)(char *, uint64_t))(v157 + 8))(v150, v151);
      (*(void (**)(char *, uint64_t))(v152 + 8))(v149, v154);
      swift_release();
    }
    return (uint64_t)v190;
  }
}

uint64_t sub_100007DD4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ApplicationRecord(0);
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v39 = (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v38 = (uint64_t)&v32 - v6;
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = &_swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  uint64_t v32 = v1;
  uint64_t v42 = &_swiftEmptyArrayStorage;
  sub_10000C864(0, v7, 0);
  uint64_t result = sub_100010EA4(a1);
  uint64_t v11 = result;
  uint64_t v12 = 0;
  uint64_t v13 = a1 + 64;
  uint64_t v33 = a1 + 80;
  int64_t v34 = v7;
  uint64_t v36 = a1 + 64;
  uint64_t v37 = a1;
  uint64_t v35 = v10;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v16 = (unint64_t)v11 >> 6;
    if ((*(void *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v10) {
      goto LABEL_26;
    }
    uint64_t v17 = *(void *)(a1 + 56) + *(void *)(v40 + 72) * v11;
    uint64_t v18 = v38;
    sub_100012F8C(v17, v38, type metadata accessor for ApplicationRecord);
    uint64_t v19 = v18;
    uint64_t v20 = v39;
    sub_100012FF4(v19, v39, type metadata accessor for ApplicationRecord);
    uint64_t v21 = (uint64_t *)(v20 + *(int *)(v41 + 28));
    uint64_t v23 = *v21;
    unint64_t v22 = v21[1];
    sub_100012DE4(*v21, v22);
    sub_10001305C(v20, type metadata accessor for ApplicationRecord);
    uint64_t v8 = v42;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10000C864(0, v8[2] + 1, 1);
      uint64_t v8 = v42;
    }
    unint64_t v25 = v8[2];
    unint64_t v24 = v8[3];
    if (v25 >= v24 >> 1)
    {
      uint64_t result = sub_10000C864(v24 > 1, v25 + 1, 1);
      uint64_t v8 = v42;
    }
    long long v8[2] = v25 + 1;
    uint64_t v26 = (char *)&v8[2 * v25];
    *((void *)v26 + 4) = v23;
    *((void *)v26 + 5) = v22;
    a1 = v37;
    int64_t v14 = 1 << *(unsigned char *)(v37 + 32);
    if (v11 >= v14) {
      goto LABEL_27;
    }
    uint64_t v13 = v36;
    uint64_t v27 = *(void *)(v36 + 8 * v16);
    if ((v27 & (1 << v11)) == 0) {
      goto LABEL_28;
    }
    LODWORD(v10) = v35;
    if (*(_DWORD *)(v37 + 36) != v35) {
      goto LABEL_29;
    }
    unint64_t v28 = v27 & (-2 << (v11 & 0x3F));
    if (v28)
    {
      int64_t v14 = __clz(__rbit64(v28)) | v11 & 0xFFFFFFFFFFFFFFC0;
      int64_t v15 = v34;
    }
    else
    {
      unint64_t v29 = v16 + 1;
      unint64_t v30 = (unint64_t)(v14 + 63) >> 6;
      int64_t v15 = v34;
      if (v16 + 1 < v30)
      {
        unint64_t v31 = *(void *)(v36 + 8 * v29);
        if (v31)
        {
LABEL_22:
          int64_t v14 = __clz(__rbit64(v31)) + (v29 << 6);
        }
        else
        {
          while (v30 - 2 != v16)
          {
            unint64_t v31 = *(void *)(v33 + 8 * v16++);
            if (v31)
            {
              unint64_t v29 = v16 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v12;
    uint64_t v11 = v14;
    if (v12 == v15) {
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100008114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  void (*v180)(uint64_t *__return_ptr, uint64_t);
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  Swift::String v187;
  Swift::String v188;
  Swift::String v189;
  Swift::String v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  long long v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void (**v213)(void **, uint64_t);
  void **v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(uint64_t, uint64_t);
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t result;
  char v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  char v226;
  void (*v227)(char *, uint64_t);
  Swift::String v228;
  Swift::String v229;
  Swift::String v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  void (*v236)(char *, void *, uint64_t);
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  void *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  long long v255;
  unint64_t *v256;
  uint64_t v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  uint64_t v263;
  char *v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  void (**v268)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v269;
  void *v270;
  char *v271;
  char *v272;
  void **v273;
  uint64_t v274;
  int64_t v275;
  uint64_t v276;
  long long v277;
  void (*v278)(char *, char *, uint64_t);
  void **v279;
  void **v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void (*v288)(char *, uint64_t);
  uint64_t v289;
  void (*v290)(void **, uint64_t);
  int64_t v291;
  uint64_t v292;
  long long *v293;
  void *v294;
  void (*v295)(char *, void *, uint64_t);
  void (**v296)(char *, uint64_t);
  uint64_t v297;
  uint64_t (**v298)(char *, uint64_t, uint64_t);
  void (**v299)(void **, uint64_t, uint64_t);
  void (**v300)(void **, uint64_t);
  void (**v301)(char *, uint64_t, uint64_t);
  char v302;
  char v303;
  long long v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  long long v310;
  long long v311;
  long long v312;
  uint64_t v313;
  long long v314;
  long long v315;
  long long v316;
  uint64_t v317;
  long long v318;
  long long v319;
  long long v320;
  uint64_t v321;
  char *v322;

  v276 = a7;
  v266 = a5;
  v267 = a6;
  v244 = a3;
  v245 = a4;
  v293 = (long long *)a1;
  v243 = a9;
  uint64_t v11 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  v259 = (char *)&v237 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v253 = (char *)&v237 - v14;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  v271 = (char *)&v237 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  v264 = (char *)&v237 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v273 = (void **)((char *)&v237 - v22);
  uint64_t v23 = __chkstk_darwin(v21);
  v279 = (void **)((char *)&v237 - v24);
  __chkstk_darwin(v23);
  uint64_t v26 = (void **)((char *)&v237 - v25);
  v283 = type metadata accessor for LookupSpec();
  __chkstk_darwin(v283);
  v284 = (char *)&v237 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for URL();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  v261 = (char *)&v237 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  v249 = (char *)&v237 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v258 = (char *)&v237 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v247 = (char *)&v237 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v272 = (char *)&v237 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v42 = (char *)&v237 - v41;
  __chkstk_darwin(v40);
  v322 = (char *)&v237 - v43;
  v297 = type metadata accessor for DriverBinEntry();
  v282 = *(void *)(v297 - 8);
  uint64_t v44 = __chkstk_darwin(v297);
  v263 = (uint64_t)&v237 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __chkstk_darwin(v44);
  __chkstk_darwin(v46);
  v281 = (uint64_t)&v237 - v48;
  uint64_t v49 = *(void *)(a2 + 64);
  v274 = a2 + 64;
  uint64_t v50 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  unint64_t v52 = v51 & v49;
  v270 = (void *)a8;
  v265 = (void *)(a8 + 16);
  v275 = (unint64_t)(v50 + 63) >> 6;
  v301 = (void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v299 = (void (**)(void **, uint64_t, uint64_t))(v16 + 16);
  v250 = v29 + 8;
  v296 = (void (**)(char *, uint64_t))(v29 + 8);
  v300 = (void (**)(void **, uint64_t))(v16 + 8);
  v241 = v29;
  v53 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  v54 = v26;
  v268 = v53;
  v256 = &v307;
  v285 = a2;
  uint64_t v55 = v47;
  swift_bridgeObjectRetain();
  int64_t v56 = 0;
  v254 = (char *)_swiftEmptyArrayStorage;
  *(void *)&long long v57 = 136315138;
  v277 = v57;
  v262 = (char *)&type metadata for Any + 8;
  v252 = 0x8000000100145680;
  *(void *)&long long v57 = 136315394;
  v255 = v57;
  v248 = (void *)0x80000001001456A0;
  v242 = 0x80000001001456D0;
  v246 = 0x8000000100145700;
  v238 = 0x8000000100145720;
  v239 = 0x8000000100145770;
  v240 = 0x8000000100145740;
  v286 = v28;
  v289 = v15;
  v280 = v26;
  v260 = v42;
  uint64_t v58 = v28;
  v292 = v55;
  while (v52)
  {
    v298 = (uint64_t (**)(char *, uint64_t, uint64_t))((v52 - 1) & v52);
    unint64_t v60 = __clz(__rbit64(v52)) | (v56 << 6);
LABEL_22:
    uint64_t v64 = v281;
    sub_100012F8C(*(void *)(v285 + 56) + *(void *)(v282 + 72) * v60, v281, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    sub_100012FF4(v64, v55, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v65 = *v301;
    a8 = (uint64_t)v322;
    (*v301)(v322, v55 + *(int *)(v297 + 28), v58);
    long long v66 = v293[1];
    v314 = *v293;
    v315 = v66;
    v316 = v293[2];
    v317 = *((void *)v293 + 6);
    uint64_t v67 = (uint64_t)v284;
    v65(v284, a8, v58);
    swift_storeEnumTagMultiPayload();
    uint64_t v68 = sub_10005E4B0(v67, 0, 0);
    sub_10001305C(v67, (uint64_t (*)(void))type metadata accessor for LookupSpec);
    if (v68)
    {
      if (!((unint64_t)v68 >> 62))
      {
        uint64_t v69 = *(void *)(((unint64_t)v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v69) {
          goto LABEL_25;
        }
LABEL_53:
        swift_bridgeObjectRelease_n();
        goto LABEL_54;
      }
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_53;
      }
LABEL_25:
      if (((unint64_t)v68 & 0xC000000000000001) == 0)
      {
        uint64_t v70 = (unint64_t)v68 & 0xFFFFFFFFFFFFFF8;
        if (!*(void *)(((unint64_t)v68 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
          goto LABEL_124;
        }
        a8 = (uint64_t)v68[4];
        swift_retain();
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      a8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
      if (!((unint64_t)v68 >> 62))
      {
        uint64_t v70 = (unint64_t)v68 & 0xFFFFFFFFFFFFFF8;
LABEL_28:
        uint64_t v71 = *(void *)(v70 + 16);
        goto LABEL_29;
      }
      swift_bridgeObjectRetain();
      uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_29:
      uint64_t v72 = swift_bridgeObjectRelease();
      if (v71 == 1)
      {
        uint64_t v73 = (*(uint64_t (**)(uint64_t))(**(void **)(a8 + 24) + 144))(v72);
        uint64_t v75 = v74;
        uint64_t v76 = v292 + *(int *)(v297 + 20);
        int64_t v77 = (uint64_t *)(v76 + *(int *)(type metadata accessor for ApplicationRecord(0) + 28));
        uint64_t v78 = *v77;
        unint64_t v79 = v77[1];
        sub_100012DE4(*v77, v79);
        char v80 = sub_10006A4CC(v73, v75, v78, v79, v266);
        sub_100012A10(v78, v79);
        swift_bridgeObjectRelease();
        sub_100012DE4(v78, v79);
        LOBYTE(v75) = sub_10000A404(v78, v79, v276);
        sub_100012A10(v78, v79);
        if (v75)
        {
          if (v80 == 3) {
            char v81 = 0;
          }
          else {
            char v81 = v80;
          }
          LOBYTE(v318) = v81;
          LOBYTE(v306) = 1;
          sub_100012EE4();
          if (dispatch thunk of static Equatable.== infix(_:_:)())
          {
LABEL_35:
            swift_release();
            (*v296)(v322, v58);
            uint64_t v55 = v292;
            sub_10001305C(v292, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
            goto LABEL_36;
          }
          sub_10005D9D4(a8);
          *(void *)&v318 = 0;
          *((void *)&v318 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          v94._countAndFlagsBits = 0x20726576697244;
          v94._object = (void *)0xE700000000000000;
          String.append(_:)(v94);
          v306 = a8;
          type metadata accessor for RealizedInfo(0);
          _print_unlocked<A, B>(_:_:)();
          unint64_t v92 = 0xD000000000000025;
          unint64_t v93 = v239;
        }
        else
        {
          sub_10005D9D4(a8);
          *(void *)&v318 = 0;
          *((void *)&v318 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(47);
          v91._countAndFlagsBits = 0x20726576697244;
          v91._object = (void *)0xE700000000000000;
          String.append(_:)(v91);
          v306 = a8;
          type metadata accessor for RealizedInfo(0);
          _print_unlocked<A, B>(_:_:)();
          unint64_t v92 = 0xD000000000000026;
          unint64_t v93 = v240;
        }
        String.append(_:)(*(Swift::String *)&v92);
        long long v95 = v318;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v254 = sub_10000C3BC(0, *((void *)v254 + 2) + 1, 1, v254);
        }
        unint64_t v97 = *((void *)v254 + 2);
        unint64_t v96 = *((void *)v254 + 3);
        if (v97 >= v96 >> 1) {
          v254 = sub_10000C3BC((char *)(v96 > 1), v97 + 1, 1, v254);
        }
        uint64_t v98 = v254;
        *((void *)v254 + 2) = v97 + 1;
        *(_OWORD *)&v98[16 * v97 + 32] = v95;
        goto LABEL_35;
      }
      v295 = (void (*)(char *, void *, uint64_t))a8;
      uint64_t v82 = sub_1000EFDE4();
      (*v299)(v54, v82, v15);
      a8 = v58;
      Swift::String v83 = v260;
      v65(v260, (uint64_t)v322, a8);
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = swift_slowAlloc();
        *(void *)&v318 = swift_slowAlloc();
        *(_DWORD *)uint64_t v86 = v277;
        uint64_t v87 = URL.path.getter();
        *(void *)(v86 + 4) = sub_100003F90(v87, v88, (uint64_t *)&v318);
        swift_bridgeObjectRelease();
        v291 = v56;
        long long v89 = *v296;
        (*v296)(v260, a8);
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "Internal error: found multiple realized infos for %s in manager", (uint8_t *)v86, 0xCu);
        swift_arrayDestroy();
        uint64_t v15 = v289;
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();

        v54 = v280;
        (*v300)(v280, v15);
        v89(v322, a8);
        int64_t v56 = v291;
      }
      else
      {
        swift_release();

        uint64_t v90 = *v296;
        (*v296)(v83, a8);
        v54 = v280;
        (*v300)(v280, v15);
        v90(v322, a8);
      }
      uint64_t v55 = v292;
      sub_10001305C(v292, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      unint64_t v52 = (unint64_t)v298;
      uint64_t v58 = a8;
    }
    else
    {
LABEL_54:
      uint64_t v99 = sub_1000EFDE4();
      uint64_t v100 = *v299;
      uint64_t v101 = v279;
      v294 = (void *)v99;
      v295 = (void (*)(char *, void *, uint64_t))v100;
      ((void (*)(void **))v100)(v279);
      v102 = v272;
      v278 = (void (*)(char *, char *, uint64_t))v65;
      v65(v272, (uint64_t)v322, v58);
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.default.getter();
      BOOL v105 = os_log_type_enabled(v103, v104);
      v291 = v56;
      if (v105)
      {
        v106 = v102;
        uint64_t v107 = swift_slowAlloc();
        *(void *)&v318 = swift_slowAlloc();
        *(_DWORD *)uint64_t v107 = v277;
        sub_100013148(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v107 + 4) = sub_100003F90(v108, v109, (uint64_t *)&v318);
        swift_bridgeObjectRelease();
        v288 = *v296;
        v288(v106, v58);
        _os_log_impl((void *)&_mh_execute_header, v103, v104, "Bundle at %s not in manager", (uint8_t *)v107, 0xCu);
        swift_arrayDestroy();
        uint64_t v15 = v289;
        swift_slowDealloc();
        swift_slowDealloc();

        v110 = *v300;
        (*v300)(v279, v15);
      }
      else
      {
        v288 = *v296;
        v288(v102, v58);

        v110 = *v300;
        (*v300)(v101, v15);
      }
      uint64_t v111 = *((void *)v293 + 5);
      unint64_t v112 = v273;
      v295((char *)v273, v294, v15);
      swift_bridgeObjectRetain_n();
      uint64_t v113 = Logger.logObject.getter();
      os_log_type_t v114 = static os_log_type_t.default.getter();
      BOOL v115 = os_log_type_enabled(v113, v114);
      v287 = v111;
      v290 = v110;
      if (v115)
      {
        uint64_t v116 = swift_slowAlloc();
        *(void *)&v318 = swift_slowAlloc();
        *(_DWORD *)uint64_t v116 = v277;
        swift_bridgeObjectRetain();
        sub_100004700(&qword_10017BEC8);
        sub_100013148(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v117 = Dictionary.Keys.description.getter();
        unint64_t v119 = v118;
        swift_bridgeObjectRelease();
        uint64_t v120 = v117;
        v110 = v290;
        *(void *)(v116 + 4) = sub_100003F90(v120, v119, (uint64_t *)&v318);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v113, v114, "Available URLs: %s", (uint8_t *)v116, 0xCu);
        swift_arrayDestroy();
        uint64_t v15 = v289;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v110(v112, v15);
      uint64_t v121 = v292;
      uint64_t v122 = v292 + *(int *)(v297 + 20);
      char v123 = (uint64_t *)(v122 + *(int *)(type metadata accessor for ApplicationRecord(0) + 28));
      uint64_t v124 = *v123;
      unint64_t v125 = v123[1];
      sub_100012DE4(*v123, v125);
      char v126 = sub_10000A404(v124, v125, v276);
      sub_100012A10(v124, v125);
      if (v126)
      {
        uint64_t v127 = v270[5];
        uint64_t v128 = v270[6];
        sub_1000036B0(v265, v127);
        sub_1000B07CC(v127, v128);
        uint64_t v129 = v308;
        uint64_t v130 = v309;
        sub_1000036B0(&v306, v308);
        (*(void (**)(long long *__return_ptr, char *, uint64_t, uint64_t))(v130 + 24))(&v304, v322, v129, v130);
        if (!v305)
        {
          sub_1000130EC((uint64_t)&v304, &qword_10017BC78);
          sub_10000478C((uint64_t)&v306);
          *(void *)&v318 = 0;
          *((void *)&v318 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(30);
          swift_bridgeObjectRelease();
          *(void *)&v318 = 0xD00000000000001CLL;
          *((void *)&v318 + 1) = v252;
          v153._countAndFlagsBits = URL.path.getter();
          String.append(_:)(v153);
          swift_bridgeObjectRelease();
          long long v154 = v318;
          sub_100012E3C();
          a8 = swift_allocError();
          *(_OWORD *)uint64_t v155 = v154;
          *(_OWORD *)(v155 + 16) = 0u;
          *(_OWORD *)(v155 + 32) = 0u;
          *(_OWORD *)(v155 + 48) = 0u;
          *(void *)(v155 + 64) = 0;
          *(unsigned char *)(v155 + 72) = 19;
          swift_willThrow();
LABEL_73:
          v269 = 0;
          uint64_t v58 = v286;
          uint64_t v146 = v271;
          goto LABEL_74;
        }
        sub_10000372C(&v304, (uint64_t)&v318);
        sub_10000478C((uint64_t)&v306);
        uint64_t v131 = *((void *)&v319 + 1);
        uint64_t v132 = v320;
        sub_1000036B0(&v318, *((uint64_t *)&v319 + 1));
        uint64_t v133 = (*(uint64_t (**)(uint64_t, uint64_t))(v132 + 24))(v131, v132);
        if (!v134)
        {
          v306 = 0;
          v307 = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          swift_bridgeObjectRelease();
          v306 = 0x20656C646E7542;
          v307 = 0xE700000000000000;
          v156._countAndFlagsBits = URL.path.getter();
          String.append(_:)(v156);
          swift_bridgeObjectRelease();
          v157._countAndFlagsBits = 0xD000000000000025;
          v157._object = v248;
          String.append(_:)(v157);
          uint64_t v158 = v306;
          unint64_t v159 = v307;
          sub_100012E3C();
          a8 = swift_allocError();
          *(void *)uint64_t v160 = v158;
          *(void *)(v160 + 8) = v159;
          *(_OWORD *)(v160 + 16) = 0u;
          *(_OWORD *)(v160 + 32) = 0u;
          *(_OWORD *)(v160 + 48) = 0u;
          *(void *)(v160 + 64) = 0;
          *(unsigned char *)(v160 + 72) = 9;
          swift_willThrow();
          sub_10000478C((uint64_t)&v318);
          goto LABEL_73;
        }
        a8 = v133;
        uint64_t v135 = v134;
        uint64_t v136 = *v123;
        unint64_t v137 = v123[1];
        sub_100012DE4(*v123, v137);
        char v138 = sub_10006A4CC(a8, (uint64_t)v135, v136, v137, v266);
        sub_100012A10(v136, v137);
        if (v138 == 3) {
          char v139 = 0;
        }
        else {
          char v139 = v138;
        }
        v303 = v139;
        v302 = 1;
        sub_100012E90();
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v306 == (void)v304)
        {
          v251 = a8;
          uint64_t v140 = v270[7];
          uint64_t v141 = (uint64_t)v253;
          uint64_t v58 = v286;
          (*v268)(v253, 1, 1, v286);
          char v142 = sub_10002A278();
          char v143 = sub_10002A278();
          uint64_t v144 = (uint64_t)v293;
          uint64_t v145 = v269;
          sub_1000B3024(&v318, v141, v142 & 1, v143 & 1, (uint64_t)v293);
          uint64_t v146 = v271;
          v257 = v145;
          if (v145)
          {
            sub_1000130EC(v141, (uint64_t *)&unk_10017FA60);
            swift_bridgeObjectRelease();
            sub_10000478C((uint64_t)&v318);
            v269 = 0;
            a8 = v257;
LABEL_74:
            v161 = v146;
            uint64_t v15 = v289;
            v295(v161, v294, v289);
            v162 = v261;
            v278(v261, v322, v58);
            swift_errorRetain();
            swift_errorRetain();
            v163 = Logger.logObject.getter();
            os_log_type_t v164 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v163, v164))
            {
              uint64_t v165 = swift_slowAlloc();
              v295 = (void (*)(char *, void *, uint64_t))swift_slowAlloc();
              *(void *)&v318 = v295;
              *(_DWORD *)uint64_t v165 = v255;
              uint64_t v166 = URL.path.getter();
              v306 = sub_100003F90(v166, v167, (uint64_t *)&v318);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              long long v168 = v162;
              v169 = v288;
              v288(v168, v286);
              *(_WORD *)(v165 + 12) = 2080;
              v306 = a8;
              swift_errorRetain();
              sub_100004700(&qword_10017EB50);
              uint64_t v170 = String.init<A>(describing:)();
              v306 = sub_100003F90(v170, v171, (uint64_t *)&v318);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t v58 = v286;
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v163, v164, "Could not insert bundle at %s into manager: %s", (uint8_t *)v165, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              swift_errorRelease();
              swift_bridgeObjectRelease();
              uint64_t v15 = v289;
              v290((void **)v271, v289);
            }
            else
            {

              swift_errorRelease();
              swift_errorRelease();
              v172 = v162;
              v169 = v288;
              v288(v172, v58);
              swift_errorRelease();
              swift_bridgeObjectRelease();
              v110((void **)v271, v15);
            }
            v169(v322, v58);
            uint64_t v55 = v292;
            uint64_t v59 = v292;
            goto LABEL_6;
          }
          v269 = v140;
          swift_release();
          sub_1000130EC(v141, (uint64_t *)&unk_10017FA60);
          long long v173 = *(_OWORD *)(v144 + 16);
          v310 = *(_OWORD *)v144;
          v311 = v173;
          v312 = *(_OWORD *)(v144 + 32);
          v313 = *(void *)(v144 + 48);
          uint64_t v174 = *((void *)&v319 + 1);
          uint64_t v175 = v320;
          sub_1000036B0(&v318, *((uint64_t *)&v319 + 1));
          v176 = *(void (**)(uint64_t, uint64_t))(v175 + 64);
          uint64_t v177 = (uint64_t)v247;
          uint64_t v178 = v175;
          uint64_t v58 = v286;
          v176(v174, v178);
          uint64_t v179 = sub_10005E27C(v177);
          v288((char *)v177, v58);
          if (!v179)
          {
            swift_bridgeObjectRelease();
            sub_100012E3C();
            a8 = swift_allocError();
            unint64_t v184 = v242;
            *(void *)v185 = 0xD000000000000028;
            *(void *)(v185 + 8) = v184;
            *(_OWORD *)(v185 + 16) = 0u;
            *(_OWORD *)(v185 + 32) = 0u;
            *(_OWORD *)(v185 + 48) = 0u;
            *(void *)(v185 + 64) = 0;
            *(unsigned char *)(v185 + 72) = 50;
            swift_willThrow();
            goto LABEL_82;
          }
          v180 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(v179 + 24) + 112);
          uint64_t v181 = swift_retain();
          v180(&v306, v181);
          swift_release();
          if (!v308)
          {
            swift_bridgeObjectRelease();
            sub_1000130EC((uint64_t)&v306, &qword_10017BC78);
            sub_100012E3C();
            a8 = swift_allocError();
            v182 = v246;
            *(void *)v183 = 0xD00000000000001BLL;
            *(void *)(v183 + 8) = v182;
            *(_OWORD *)(v183 + 16) = 0u;
            *(_OWORD *)(v183 + 32) = 0u;
            *(_OWORD *)(v183 + 48) = 0u;
            *(void *)(v183 + 64) = 0;
            *(unsigned char *)(v183 + 72) = 50;
            swift_willThrow();
            swift_release();
LABEL_82:
            sub_10000478C((uint64_t)&v318);
            v269 = 0;
            goto LABEL_74;
          }
          v186 = v179;
          sub_1000130EC((uint64_t)&v306, &qword_10017BC78);
          v306 = 0;
          v307 = 0xE000000000000000;
          _StringGuts.grow(_:)(41);
          swift_bridgeObjectRelease();
          v306 = 0xD000000000000014;
          v307 = v238;
          v187._countAndFlagsBits = v251;
          v187._object = v135;
          String.append(_:)(v187);
          swift_bridgeObjectRelease();
          v188._countAndFlagsBits = 544497952;
          v188._object = (void *)0xE400000000000000;
          String.append(_:)(v188);
          v189._countAndFlagsBits = URL.path.getter();
          String.append(_:)(v189);
          swift_bridgeObjectRelease();
          v190._countAndFlagsBits = 0x616D206F746E6920;
          v190._object = (void *)0xED0000726567616ELL;
          String.append(_:)(v190);
          v191 = v306;
          v192 = v307;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v254 = sub_10000C3BC(0, *((void *)v254 + 2) + 1, 1, v254);
          }
          int64_t v56 = v291;
          v193 = v269;
          v195 = *((void *)v254 + 2);
          v194 = *((void *)v254 + 3);
          if (v195 >= v194 >> 1) {
            v254 = sub_10000C3BC((char *)(v194 > 1), v195 + 1, 1, v254);
          }
          v196 = v254;
          *((void *)v254 + 2) = v195 + 1;
          v197 = &v196[16 * v195];
          *((void *)v197 + 4) = v191;
          *((void *)v197 + 5) = v192;
          v198 = v270[5];
          v199 = v270[6];
          sub_1000036B0(v265, v198);
          sub_100003F24(v198, v199);
          v200 = v308;
          v201 = v309;
          sub_1000036B0(&v306, v308);
          v202 = *(void *)(v193 + 160);
          v203 = *(void *)(v193 + 168);
          swift_bridgeObjectRetain();
          a8 = v186;
          sub_100017B94(v186, v202, v203, v200, v201);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          v288(v322, v58);
          uint64_t v55 = v292;
          sub_10001305C(v292, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
          sub_10000478C((uint64_t)&v306);
          v269 = v257;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v58 = v286;
          v288(v322, v286);
          uint64_t v55 = v292;
          sub_10001305C(v292, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
          int64_t v56 = v291;
        }
        sub_10000478C((uint64_t)&v318);
        uint64_t v15 = v289;
LABEL_36:
        v54 = v280;
        unint64_t v52 = (unint64_t)v298;
      }
      else
      {
        a8 = (uint64_t)v264;
        v295(v264, v294, v15);
        uint64_t v147 = v263;
        sub_100012F8C(v121, v263, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        v148 = Logger.logObject.getter();
        os_log_type_t v149 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v148, v149))
        {
          uint64_t v150 = swift_slowAlloc();
          *(void *)&v318 = swift_slowAlloc();
          *(_DWORD *)uint64_t v150 = v277;
          sub_100013148(&qword_10017BEB8, (void (*)(uint64_t))type metadata accessor for DriverBinEntry);
          uint64_t v151 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v150 + 4) = sub_100003F90(v151, v152, (uint64_t *)&v318);
          swift_bridgeObjectRelease();
          sub_10001305C(v147, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
          _os_log_impl((void *)&_mh_execute_header, v148, v149, "Found stale staged driver %s belonging to an uninstalled app", (uint8_t *)v150, 0xCu);
          swift_arrayDestroy();
          uint64_t v15 = v289;
          swift_slowDealloc();
          uint64_t v55 = v292;
          swift_slowDealloc();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v55 = v121;

          sub_10001305C(v147, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
          swift_bridgeObjectRelease();
        }
        v290((void **)a8, v15);
        uint64_t v58 = v286;
        v288(v322, v286);
        uint64_t v59 = v55;
LABEL_6:
        sub_10001305C(v59, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        v54 = v280;
        int64_t v56 = v291;
        unint64_t v52 = (unint64_t)v298;
      }
    }
  }
  if (__OFADD__(v56++, 1)) {
    goto LABEL_121;
  }
  if (v56 < v275)
  {
    unint64_t v62 = *(void *)(v274 + 8 * v56);
    if (!v62)
    {
      int64_t v63 = v56 + 1;
      if (v56 + 1 >= v275) {
        goto LABEL_93;
      }
      unint64_t v62 = *(void *)(v274 + 8 * v63);
      if (!v62)
      {
        int64_t v63 = v56 + 2;
        if (v56 + 2 >= v275) {
          goto LABEL_93;
        }
        unint64_t v62 = *(void *)(v274 + 8 * v63);
        if (!v62)
        {
          int64_t v63 = v56 + 3;
          if (v56 + 3 >= v275) {
            goto LABEL_93;
          }
          unint64_t v62 = *(void *)(v274 + 8 * v63);
          if (!v62)
          {
            int64_t v63 = v56 + 4;
            if (v56 + 4 >= v275) {
              goto LABEL_93;
            }
            unint64_t v62 = *(void *)(v274 + 8 * v63);
            if (!v62)
            {
              while (1)
              {
                int64_t v56 = v63 + 1;
                if (__OFADD__(v63, 1)) {
                  goto LABEL_123;
                }
                if (v56 >= v275) {
                  goto LABEL_93;
                }
                unint64_t v62 = *(void *)(v274 + 8 * v56);
                ++v63;
                if (v62) {
                  goto LABEL_21;
                }
              }
            }
          }
        }
      }
      int64_t v56 = v63;
    }
LABEL_21:
    v298 = (uint64_t (**)(char *, uint64_t, uint64_t))((v62 - 1) & v62);
    unint64_t v60 = __clz(__rbit64(v62)) + (v56 << 6);
    goto LABEL_22;
  }
LABEL_93:
  v204 = (uint64_t)v293;
  swift_release();
  v205 = sub_100040BCC();
  a8 = sub_100012700(v205);
  swift_bridgeObjectRelease();
  v206 = *(_OWORD *)(v204 + 16);
  v318 = *(_OWORD *)v204;
  v319 = v206;
  v320 = *(_OWORD *)(v204 + 32);
  v321 = *(void *)(v204 + 48);
  v207 = (uint64_t)v284;
  swift_storeEnumTagMultiPayload();
  v54 = sub_10005E4B0(v207, 0, 0);
  sub_10001305C(v207, (uint64_t (*)(void))type metadata accessor for LookupSpec);
  if (!v54) {
    goto LABEL_126;
  }
  if (!((unint64_t)v54 >> 62))
  {
    v208 = *(void *)(((unint64_t)v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v208) {
      goto LABEL_96;
    }
LABEL_125:
    swift_bridgeObjectRelease();
LABEL_126:
    uint64_t result = swift_bridgeObjectRelease();
    *v243 = v254;
    return result;
  }
LABEL_124:
  swift_bridgeObjectRetain();
  v208 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v208) {
    goto LABEL_125;
  }
LABEL_96:
  v297 = a8;
  v322 = (char *)((unint64_t)v54 & 0xC000000000000001);
  v299 = (void (**)(void **, uint64_t, uint64_t))(v241 + 48);
  v298 = (uint64_t (**)(char *, uint64_t, uint64_t))(v241 + 32);
  v209 = 4;
  v250 = v250 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v294 = (void *)0x80000001001457A0;
  v300 = (void (**)(void **, uint64_t))v208;
  while (2)
  {
    v211 = v209 - 4;
    if (v322)
    {
      v212 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      v213 = (void (**)(void **, uint64_t))(v209 - 3);
      if (__OFADD__(v211, 1)) {
        goto LABEL_122;
      }
    }
    else
    {
      v212 = (uint64_t)v54[v209];
      swift_retain();
      v213 = (void (**)(void **, uint64_t))(v209 - 3);
      if (__OFADD__(v211, 1)) {
        goto LABEL_122;
      }
    }
    v214 = v54;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v212 + 24) + 112))(&v306);
    v215 = v308;
    if (!v308)
    {
      sub_1000130EC((uint64_t)&v306, &qword_10017BC78);
      v210 = (uint64_t)v259;
      (*v268)(v259, 1, 1, v58);
LABEL_98:
      swift_release();
      sub_1000130EC(v210, (uint64_t *)&unk_10017FA60);
      goto LABEL_99;
    }
    v216 = v309;
    sub_1000036B0(&v306, v308);
    v217 = *(void (**)(uint64_t, uint64_t))(v216 + 64);
    a8 = (uint64_t)v259;
    v218 = v216;
    uint64_t v58 = v286;
    v217(v215, v218);
    v210 = a8;
    (*v268)((char *)a8, 0, 1, v58);
    sub_10000478C((uint64_t)&v306);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v299)(a8, 1, v58) == 1) {
      goto LABEL_98;
    }
    v219 = v258;
    v220 = (*v298)(v258, v210, v58);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*v270 + 232))(v220);
    if (result)
    {
      v222 = (*(uint64_t (**)(char *))(*(void *)result + 392))(v219);
      swift_release();
      v223 = (uint64_t)v249;
      (*v301)(v249, (uint64_t)v219, v58);
      a8 = v58;
      if (v222)
      {
        v224 = sub_10000ADE4(v223, v297);
        v225 = v223;
        v226 = v224;
        v227 = *v296;
        (*v296)((char *)v225, a8);
        if (v226)
        {
          swift_release();
        }
        else
        {
          sub_10005D9D4(v212);
          v306 = 0;
          v307 = 0xE000000000000000;
          _StringGuts.grow(_:)(76);
          v228._countAndFlagsBits = 0x6120726576697244;
          v228._object = (void *)0xEE00204C52552074;
          String.append(_:)(v228);
          sub_100013148(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
          v229._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v229);
          swift_bridgeObjectRelease();
          v230._countAndFlagsBits = 0xD00000000000003CLL;
          v230._object = v294;
          String.append(_:)(v230);
          v231 = v306;
          v295 = (void (*)(char *, void *, uint64_t))v307;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v254 = sub_10000C3BC(0, *((void *)v254 + 2) + 1, 1, v254);
          }
          v233 = *((void *)v254 + 2);
          v232 = *((void *)v254 + 3);
          if (v233 >= v232 >> 1) {
            v254 = sub_10000C3BC((char *)(v232 > 1), v233 + 1, 1, v254);
          }
          v234 = v254;
          *((void *)v254 + 2) = v233 + 1;
          v235 = &v234[16 * v233];
          v236 = v295;
          *((void *)v235 + 4) = v231;
          *((void *)v235 + 5) = v236;
          swift_release();
          a8 = v286;
        }
      }
      else
      {
        swift_release();
        v227 = *v296;
        (*v296)((char *)v223, a8);
      }
      v227(v258, a8);
      uint64_t v58 = a8;
LABEL_99:
      v54 = v214;
      ++v209;
      if (v213 == v300) {
        goto LABEL_125;
      }
      continue;
    }
    break;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000A404(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Data.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = a3 + 56;
  if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
    return 0;
  }
  unint64_t v10 = a2 >> 62;
  uint64_t v83 = ~v7;
  unint64_t v82 = a2 >> 62;
  BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v81 = v11;
  unint64_t v80 = a2;
  uint64_t v78 = (a1 >> 32) - (int)a1;
  uint64_t v79 = a1 >> 32;
  uint64_t v84 = v10;
  size_t __n = BYTE6(a2);
  while (2)
  {
    uint64_t v12 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v8);
    uint64_t v14 = *v12;
    unint64_t v13 = v12[1];
    uint64_t v15 = 0;
    switch(v13 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
        }
        uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_15:
        sub_100012DE4(v14, v13);
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v14 + 16);
        uint64_t v16 = *(void *)(v14 + 24);
        uint64_t v15 = v16 - v17;
        if (!__OFSUB__(v16, v17)) {
          goto LABEL_15;
        }
        goto LABEL_122;
      case 3uLL:
        break;
      default:
        uint64_t v15 = BYTE6(v13);
        break;
    }
    size_t v18 = __n;
    switch(v84)
    {
      case 1:
        size_t v18 = HIDWORD(a1) - (int)a1;
        if (v81) {
          goto LABEL_123;
        }
        goto LABEL_20;
      case 2:
        uint64_t v20 = *(void *)(a1 + 16);
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v21 = __OFSUB__(v19, v20);
        size_t v18 = v19 - v20;
        if (!v21) {
          goto LABEL_20;
        }
        goto LABEL_124;
      case 3:
        if (v15) {
          goto LABEL_8;
        }
        goto LABEL_120;
      default:
LABEL_20:
        if (v15 != v18)
        {
LABEL_8:
          sub_100012A10(v14, v13);
          goto LABEL_9;
        }
        if (v15 >= 1)
        {
          switch(v13 >> 62)
          {
            case 1uLL:
              if ((int)v14 > v14 >> 32) {
                goto LABEL_125;
              }
              uint64_t v25 = __DataStorage._bytes.getter();
              if (v25)
              {
                uint64_t v26 = v25;
                uint64_t v27 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v14, v27)) {
                  goto LABEL_127;
                }
                uint64_t v28 = (const void *)(v26 + (int)v14 - v27);
              }
              else
              {
                uint64_t v28 = 0;
              }
              __DataStorage._length.getter();
              LODWORD(v10) = v82;
              if (!v82)
              {
                *(void *)__s1 = a1;
                *(_WORD *)&__s1[8] = a2;
                __s1[10] = BYTE2(a2);
                __s1[11] = BYTE3(a2);
                __s1[12] = BYTE4(a2);
                __s1[13] = BYTE5(a2);
                if (!v28) {
                  goto LABEL_155;
                }
                int v44 = memcmp(v28, __s1, __n);
LABEL_103:
                sub_100012A10(v14, v13);
                uint64_t v9 = a3 + 56;
                if (!v44) {
                  return 1;
                }
                break;
              }
              if (v82 == 1)
              {
                if (v79 < (int)a1) {
                  goto LABEL_136;
                }
                swift_retain();
                uint64_t v45 = (char *)__DataStorage._bytes.getter();
                if (v45)
                {
                  uint64_t v46 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a1, v46)) {
                    goto LABEL_143;
                  }
                  v45 += (int)a1 - v46;
                }
                uint64_t v47 = __DataStorage._length.getter();
                size_t v48 = (a1 >> 32) - (int)a1;
                if (v47 < v78) {
                  size_t v48 = v47;
                }
                if (!v28) {
                  goto LABEL_148;
                }
                if (!v45) {
                  goto LABEL_149;
                }
                int v44 = memcmp(v28, v45, v48);
                sub_100012A10(a1, a2);
                goto LABEL_103;
              }
              uint64_t v67 = *(void *)(a1 + 16);
              uint64_t v77 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v68 = __DataStorage._bytes.getter();
              if (v68)
              {
                uint64_t v69 = v68;
                uint64_t v70 = __DataStorage._offset.getter();
                if (__OFSUB__(v67, v70)) {
                  goto LABEL_142;
                }
                uint64_t v71 = (const void *)(v69 + v67 - v70);
              }
              else
              {
                uint64_t v71 = 0;
              }
              BOOL v21 = __OFSUB__(v77, v67);
              int64_t v72 = v77 - v67;
              if (v21) {
                goto LABEL_137;
              }
              uint64_t v73 = __DataStorage._length.getter();
              if (v73 >= v72) {
                size_t v74 = v72;
              }
              else {
                size_t v74 = v73;
              }
              if (!v28) {
                goto LABEL_156;
              }
              LODWORD(v10) = v82;
              if (!v71) {
                goto LABEL_157;
              }
              int v60 = memcmp(v28, v71, v74);
LABEL_116:
              swift_release();
LABEL_117:
              swift_release();
              sub_100012A10(v14, v13);
              uint64_t v9 = a3 + 56;
              a2 = v80;
              if (!v60) {
                return 1;
              }
              break;
            case 2uLL:
              uint64_t v29 = *(void *)(v14 + 16);
              swift_retain();
              swift_retain();
              uint64_t v30 = __DataStorage._bytes.getter();
              if (v30)
              {
                uint64_t v31 = v30;
                uint64_t v32 = __DataStorage._offset.getter();
                if (__OFSUB__(v29, v32)) {
                  goto LABEL_126;
                }
                uint64_t v33 = (const void *)(v31 + v29 - v32);
              }
              else
              {
                uint64_t v33 = 0;
              }
              __DataStorage._length.getter();
              LODWORD(v10) = v82;
              if (!v82)
              {
                *(void *)__s1 = a1;
                *(_DWORD *)&__s1[8] = v80;
                *(_WORD *)&__s1[12] = WORD2(v80);
                if (!v33) {
                  goto LABEL_152;
                }
                int v60 = memcmp(v33, __s1, __n);
                swift_release();
                goto LABEL_117;
              }
              if (v82 == 1)
              {
                if (v79 < (int)a1) {
                  goto LABEL_130;
                }
                swift_retain();
                uint64_t v40 = (char *)__DataStorage._bytes.getter();
                if (v40)
                {
                  uint64_t v41 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a1, v41)) {
                    goto LABEL_141;
                  }
                  v40 += (int)a1 - v41;
                }
                uint64_t v42 = __DataStorage._length.getter();
                size_t v43 = (a1 >> 32) - (int)a1;
                if (v42 < v78) {
                  size_t v43 = v42;
                }
                if (!v33) {
                  goto LABEL_146;
                }
                if (!v40) {
                  goto LABEL_147;
                }
                int v44 = memcmp(v33, v40, v43);
                a2 = v80;
                sub_100012A10(a1, v80);
                swift_release();
                swift_release();
                goto LABEL_103;
              }
              uint64_t v61 = *(void *)(a1 + 16);
              uint64_t v76 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              unint64_t v62 = (char *)__DataStorage._bytes.getter();
              if (v62)
              {
                uint64_t v63 = __DataStorage._offset.getter();
                if (__OFSUB__(v61, v63)) {
                  goto LABEL_140;
                }
                v62 += v61 - v63;
              }
              BOOL v21 = __OFSUB__(v76, v61);
              int64_t v64 = v76 - v61;
              if (v21) {
                goto LABEL_135;
              }
              uint64_t v65 = __DataStorage._length.getter();
              if (v65 >= v64) {
                size_t v66 = v64;
              }
              else {
                size_t v66 = v65;
              }
              if (!v33) {
                goto LABEL_153;
              }
              LODWORD(v10) = v82;
              if (!v62) {
                goto LABEL_154;
              }
              int v60 = memcmp(v33, v62, v66);
              swift_release();
              swift_release();
              goto LABEL_116;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v10) {
                goto LABEL_47;
              }
              if (v10 == 1)
              {
                if (v79 < (int)a1) {
                  goto LABEL_129;
                }
                swift_retain();
                uint64_t v34 = __DataStorage._bytes.getter();
                if (!v34) {
                  goto LABEL_145;
                }
                uint64_t v23 = v34;
                uint64_t v35 = __DataStorage._offset.getter();
                unint64_t v10 = (int)a1 - v35;
                if (__OFSUB__((int)a1, v35)) {
                  goto LABEL_134;
                }
                goto LABEL_42;
              }
              uint64_t v56 = *(void *)(a1 + 16);
              uint64_t v55 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v51 = (char *)__DataStorage._bytes.getter();
              if (v51)
              {
                uint64_t v57 = __DataStorage._offset.getter();
                if (__OFSUB__(v56, v57)) {
                  goto LABEL_139;
                }
                v51 += v56 - v57;
              }
              BOOL v21 = __OFSUB__(v55, v56);
              int64_t v53 = v55 - v56;
              if (v21) {
                goto LABEL_132;
              }
              uint64_t v54 = __DataStorage._length.getter();
              a2 = v80;
              if (!v51) {
                goto LABEL_151;
              }
              goto LABEL_84;
            default:
              *(void *)__s1 = v14;
              *(_WORD *)&__s1[8] = v13;
              __s1[10] = BYTE2(v13);
              __s1[11] = BYTE3(v13);
              __s1[12] = BYTE4(v13);
              __s1[13] = BYTE5(v13);
              if (v10)
              {
                if (v10 == 1)
                {
                  if (v79 < (int)a1) {
                    goto LABEL_128;
                  }
                  swift_retain();
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_145:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    JUMPOUT(0x10000ADB4);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  unint64_t v10 = (int)a1 - v24;
                  if (__OFSUB__((int)a1, v24)) {
                    goto LABEL_133;
                  }
LABEL_42:
                  uint64_t v36 = __DataStorage._length.getter();
                  if (v36 >= v78) {
                    size_t v37 = (a1 >> 32) - (int)a1;
                  }
                  else {
                    size_t v37 = v36;
                  }
                  int v38 = memcmp(__s1, (const void *)(v23 + v10), v37);
                  sub_100012A10(a1, a2);
                  sub_100012A10(v14, v13);
                  LODWORD(v10) = v82;
                  if (!v38) {
                    return 1;
                  }
                }
                else
                {
                  uint64_t v49 = *(void *)(a1 + 16);
                  uint64_t v50 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v51 = (char *)__DataStorage._bytes.getter();
                  if (v51)
                  {
                    uint64_t v52 = __DataStorage._offset.getter();
                    if (__OFSUB__(v49, v52)) {
                      goto LABEL_138;
                    }
                    v51 += v49 - v52;
                  }
                  BOOL v21 = __OFSUB__(v50, v49);
                  int64_t v53 = v50 - v49;
                  if (v21) {
                    goto LABEL_131;
                  }
                  uint64_t v54 = __DataStorage._length.getter();
                  a2 = v80;
                  if (!v51) {
                    goto LABEL_150;
                  }
LABEL_84:
                  if (v54 >= v53) {
                    size_t v58 = v53;
                  }
                  else {
                    size_t v58 = v54;
                  }
                  int v59 = memcmp(__s1, v51, v58);
                  swift_release();
                  swift_release();
                  sub_100012A10(v14, v13);
                  LODWORD(v10) = v82;
                  if (!v59) {
                    return 1;
                  }
                }
              }
              else
              {
LABEL_47:
                uint64_t __s2 = a1;
                __int16 v87 = a2;
                char v88 = BYTE2(a2);
                char v89 = BYTE3(a2);
                char v90 = BYTE4(a2);
                char v91 = BYTE5(a2);
                int v39 = memcmp(__s1, &__s2, __n);
                sub_100012A10(v14, v13);
                if (!v39) {
                  return 1;
                }
              }
              break;
          }
LABEL_9:
          unint64_t v8 = (v8 + 1) & v83;
          if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
            return 0;
          }
          continue;
        }
LABEL_120:
        sub_100012A10(v14, v13);
        return 1;
    }
  }
}

uint64_t sub_10000ADE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::Int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_100013148(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL),
        uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_100013148(&qword_10017BE98, (void (*)(uint64_t))&type metadata accessor for URL);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_10000AFF8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

unint64_t sub_10000B03C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v115 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v109 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100004700(&qword_10017BC80);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v109 - v9;
  uint64_t v110 = v0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(**(void **)(v0 + 56) + 144))(v8);
  sub_10005FAF8(v11, (uint64_t)v130);
  swift_release();
  unint64_t v128 = 0xD000000000000024;
  unint64_t v129 = 0x8000000100145410;
  uint64_t v12 = *(void *)(v131 + 64);
  int64_t v116 = v131 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v131 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v117 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v118 = v131;
  swift_bridgeObjectRetain();
  int64_t object = 0;
  unint64_t v113 = (unint64_t)"ions by identifier:\n";
  os_log_type_t v114 = (void *)0x8000000100145440;
  uint64_t v121 = v3;
  uint64_t v122 = v1;
  unint64_t v119 = v7;
  uint64_t v120 = v10;
  if (v15) {
    goto LABEL_6;
  }
LABEL_9:
  int64_t v21 = object + 1;
  if (__OFADD__(object, 1)) {
    goto LABEL_107;
  }
  if (v21 >= v117) {
    goto LABEL_46;
  }
  unint64_t v22 = *(void *)(v116 + 8 * v21);
  ++object;
  if (v22) {
    goto LABEL_22;
  }
  int64_t object = v21 + 1;
  if (v21 + 1 >= v117) {
    goto LABEL_46;
  }
  unint64_t v22 = *(void *)(v116 + 8 * object);
  if (v22) {
    goto LABEL_22;
  }
  int64_t object = v21 + 2;
  if (v21 + 2 >= v117)
  {
LABEL_46:
    swift_release();
    v49._countAndFlagsBits = 10;
    v49._int64_t object = (void *)0xE100000000000000;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 0xD00000000000001DLL;
    v50._int64_t object = (void *)0x8000000100145460;
    String.append(_:)(v50);
    uint64_t v51 = v132;
    int64_t object = *(void *)(v132 + 64);
    uint64_t v112 = v132 + 64;
    uint64_t v52 = 1 << *(unsigned char *)(v132 + 32);
    swift_bridgeObjectRetain();
    unint64_t result = sub_100011138((uint64_t)v130);
    unint64_t v124 = 0;
    uint64_t v54 = -1;
    if (v52 < 64) {
      uint64_t v54 = ~(-1 << v52);
    }
    unint64_t v55 = v54 & object;
    char v123 = (void (**)(char *, char *, uint64_t))(v115 + 32);
    uint64_t v118 = v115 + 8;
    int64_t v116 = (unint64_t)(v52 + 63) >> 6;
    unint64_t v109 = v116 - 1;
    os_log_type_t v114 = (void *)(v113 | 0x8000000000000000);
    unint64_t v113 = v115 + 16;
    uint64_t v111 = v51;
    while (!v55)
    {
      int64_t v63 = v124 + 1;
      if (__OFADD__(v124, 1)) {
        goto LABEL_108;
      }
      if (v63 < v116)
      {
        unint64_t v64 = *(void *)(v112 + 8 * v63);
        if (v64) {
          goto LABEL_57;
        }
        unint64_t v65 = v124 + 2;
        ++v124;
        if (v63 + 1 < v116)
        {
          unint64_t v64 = *(void *)(v112 + 8 * v65);
          if (v64) {
            goto LABEL_60;
          }
          unint64_t v124 = v63 + 1;
          if (v63 + 2 < v116)
          {
            unint64_t v64 = *(void *)(v112 + 8 * (v63 + 2));
            if (v64)
            {
              v63 += 2;
LABEL_57:
              uint64_t v59 = (v64 - 1) & v64;
              unint64_t v60 = __clz(__rbit64(v64)) + (v63 << 6);
              unint64_t v124 = v63;
LABEL_53:
              (*(void (**)(char *, unint64_t, uint64_t))(v115 + 16))(v7, *(void *)(v51 + 48) + *(void *)(v115 + 72) * v60, v1);
              uint64_t v61 = *(void *)(v51 + 56);
              uint64_t v62 = sub_100004700(&qword_10017BC88);
              *(void *)&v7[*(int *)(v62 + 48)] = *(void *)(v61 + 8 * v60);
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v7, 0, 1, v62);
              swift_bridgeObjectRetain();
              goto LABEL_72;
            }
            unint64_t v65 = v63 + 3;
            unint64_t v124 = v63 + 2;
            if (v63 + 3 < v116)
            {
              unint64_t v64 = *(void *)(v112 + 8 * v65);
              if (v64)
              {
LABEL_60:
                int64_t v63 = v65;
                goto LABEL_57;
              }
              while (1)
              {
                int64_t v63 = v65 + 1;
                if (__OFADD__(v65, 1)) {
                  goto LABEL_115;
                }
                if (v63 >= v116) {
                  break;
                }
                unint64_t v64 = *(void *)(v112 + 8 * v63);
                ++v65;
                if (v64) {
                  goto LABEL_57;
                }
              }
              unint64_t v124 = v109;
            }
          }
        }
      }
      uint64_t v66 = sub_100004700(&qword_10017BC88);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v7, 1, 1, v66);
      uint64_t v59 = 0;
LABEL_72:
      sub_1000129A8((uint64_t)v7, (uint64_t)v10);
      uint64_t v67 = sub_100004700(&qword_10017BC88);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 48))(v10, 1, v67) == 1)
      {
        swift_release();
        v91._countAndFlagsBits = 10;
        v91._int64_t object = (void *)0xE100000000000000;
        String.append(_:)(v91);
        v92._countAndFlagsBits = 0xD000000000000010;
        v92._int64_t object = (void *)0x8000000100145480;
        String.append(_:)(v92);
        unint64_t result = (*(uint64_t (**)(void))(*(void *)v110 + 408))();
        int64_t object = result;
        if (result >> 62) {
          goto LABEL_112;
        }
        uint64_t v125 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v125) {
          goto LABEL_99;
        }
LABEL_113:
        swift_bridgeObjectRelease();
        return v128;
      }
      uint64_t v125 = v59;
      unint64_t v68 = *(void *)&v10[*(int *)(v67 + 48)];
      (*v123)(v3, v10, v1);
      if (v68 >> 62)
      {
        swift_bridgeObjectRetain();
        if (!_CocoaArrayWrapper.endIndex.getter())
        {
LABEL_49:
          swift_bridgeObjectRelease_n();
          sub_100013148(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
          v127._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          v127._int64_t object = v56;
          v57._countAndFlagsBits = 0x3E7974706D653C20;
          v57._int64_t object = (void *)0xE90000000000000ALL;
          String.append(_:)(v57);
          int64_t object = (int64_t)v127._object;
          String.append(_:)(v127);
          swift_bridgeObjectRelease();
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v69 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v69) {
          goto LABEL_49;
        }
      }
      int64_t object = v68 & 0xC000000000000001;
      if ((v68 & 0xC000000000000001) != 0)
      {
        uint64_t v70 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_106;
        }
        uint64_t v70 = *(void *)(v68 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease();
      if (v68 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v71 == 1)
        {
LABEL_91:
          swift_bridgeObjectRelease();
          sub_100013148(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
          v127._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          v127._int64_t object = v82;
          v83._countAndFlagsBits = 8250;
          v83._int64_t object = (void *)0xE200000000000000;
          String.append(_:)(v83);
          v84._countAndFlagsBits = sub_100039EC0();
          int64_t object = v70;
          String.append(_:)(v84);
          swift_bridgeObjectRelease();
          v85._countAndFlagsBits = 10;
          v85._int64_t object = (void *)0xE100000000000000;
          String.append(_:)(v85);
          String.append(_:)(v127);
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v7 = v119;
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v71 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v71 == 1) {
          goto LABEL_91;
        }
      }
      int64_t v117 = v70;
      v127._countAndFlagsBits = 0;
      v127._int64_t object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      v127._countAndFlagsBits = 0xD00000000000001ELL;
      v127._int64_t object = v114;
      sub_100013148(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
      v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v72);
      swift_bridgeObjectRelease();
      v73._countAndFlagsBits = 2618;
      v73._int64_t object = (void *)0xE200000000000000;
      String.append(_:)(v73);
      String.append(_:)(v127);
      swift_bridgeObjectRelease();
      if (v71)
      {
        v127._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
        sub_10000C884(0, v71 & ~(v71 >> 63), 0);
        if (v71 < 0) {
          goto LABEL_110;
        }
        uint64_t v74 = 0;
        countAndFlagsBits = (void *)v127._countAndFlagsBits;
        do
        {
          if (object) {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            swift_retain();
          }
          uint64_t v76 = sub_100039EC0();
          uint64_t v78 = v77;
          swift_release();
          v127._countAndFlagsBits = (uint64_t)countAndFlagsBits;
          unint64_t v80 = countAndFlagsBits[2];
          unint64_t v79 = countAndFlagsBits[3];
          if (v80 >= v79 >> 1)
          {
            sub_10000C884(v79 > 1, v80 + 1, 1);
            countAndFlagsBits = (void *)v127._countAndFlagsBits;
          }
          ++v74;
          countAndFlagsBits[2] = v80 + 1;
          BOOL v81 = &countAndFlagsBits[2 * v80];
          v81[4] = v76;
          v81[5] = v78;
        }
        while (v71 != v74);
        swift_bridgeObjectRelease();
        uint64_t v3 = v121;
        uint64_t v1 = v122;
        uint64_t v10 = v120;
        uint64_t v51 = v111;
      }
      else
      {
        swift_bridgeObjectRelease();
        countAndFlagsBits = _swiftEmptyArrayStorage;
      }
      v127._countAndFlagsBits = (uint64_t)countAndFlagsBits;
      int64_t object = (int64_t)&unk_10017E5D0;
      sub_100004700((uint64_t *)&unk_10017E5D0);
      sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
      BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      Swift::Int v86 = sub_10002A270();
      uint64_t v87 = sub_1000EDF8C(v86);
      char v89 = v88;
      swift_bridgeObjectRelease();
      v127._countAndFlagsBits = v87;
      v127._int64_t object = v89;
      swift_bridgeObjectRetain();
      v90._countAndFlagsBits = 10;
      v90._int64_t object = (void *)0xE100000000000000;
      String.append(_:)(v90);
      swift_bridgeObjectRelease();
      String.append(_:)(v127);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v7 = v119;
LABEL_50:
      unint64_t v55 = v125;
      unint64_t result = (*(uint64_t (**)(char *, uint64_t))v118)(v3, v1);
    }
    unint64_t v58 = __clz(__rbit64(v55));
    uint64_t v59 = (v55 - 1) & v55;
    unint64_t v60 = v58 | (v124 << 6);
    goto LABEL_53;
  }
  unint64_t v22 = *(void *)(v116 + 8 * object);
  if (!v22)
  {
    int64_t v23 = v21 + 3;
    if (v23 < v117)
    {
      unint64_t v22 = *(void *)(v116 + 8 * v23);
      if (v22)
      {
        int64_t object = v23;
        goto LABEL_22;
      }
      while (1)
      {
        int64_t object = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_111;
        }
        if (object >= v117) {
          break;
        }
        unint64_t v22 = *(void *)(v116 + 8 * object);
        ++v23;
        if (v22) {
          goto LABEL_22;
        }
      }
    }
    goto LABEL_46;
  }
LABEL_22:
  unint64_t v15 = (v22 - 1) & v22;
  for (unint64_t i = __clz(__rbit64(v22)) + (object << 6); ; unint64_t i = v18 | (object << 6))
  {
    uint64_t v24 = (uint64_t *)(*(void *)(v118 + 48) + 16 * i);
    uint64_t v25 = *v24;
    uint64_t v26 = (void *)v24[1];
    unint64_t v27 = *(void *)(*(void *)(v118 + 56) + 8 * i);
    unint64_t v28 = v27 >> 62;
    if (v27 >> 62)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v20) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v29)
      {
LABEL_5:
        swift_bridgeObjectRelease();
        v127._countAndFlagsBits = v25;
        v127._int64_t object = v26;
        v17._countAndFlagsBits = 0x3E7974706D653C20;
        v17._int64_t object = (void *)0xE90000000000000ALL;
        String.append(_:)(v17);
        String.append(_:)(v127);
        swift_bridgeObjectRelease();
        uint64_t v3 = v121;
        uint64_t v1 = v122;
        uint64_t v10 = v120;
        if (!v15) {
          goto LABEL_9;
        }
        goto LABEL_6;
      }
    }
    unint64_t v124 = v15;
    uint64_t v125 = object;
    if ((v27 & 0xC000000000000001) == 0) {
      break;
    }
    char v123 = (void (**)(char *, char *, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v30 = v27 & 0xFFFFFFFFFFFFFF8;
    if (!v28)
    {
LABEL_28:
      uint64_t v31 = *(void *)(v30 + 16);
      if (v31 == 1) {
        goto LABEL_43;
      }
      goto LABEL_29;
    }
LABEL_42:
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v31 == 1)
    {
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v127._countAndFlagsBits = sub_100039EC0();
      v127._int64_t object = v47;
      v48._countAndFlagsBits = 10;
      v48._int64_t object = (void *)0xE100000000000000;
      String.append(_:)(v48);
      String.append(_:)(v127);
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
LABEL_29:
    v127._countAndFlagsBits = 0;
    v127._int64_t object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v127._countAndFlagsBits = 0xD00000000000001ELL;
    v127._int64_t object = v114;
    v32._countAndFlagsBits = v25;
    v32._int64_t object = v26;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 2618;
    v33._int64_t object = (void *)0xE200000000000000;
    String.append(_:)(v33);
    String.append(_:)(v127);
    swift_bridgeObjectRelease();
    if (v31)
    {
      v127._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      sub_10000C884(0, v31 & ~(v31 >> 63), 0);
      if (v31 < 0) {
        goto LABEL_109;
      }
      uint64_t v34 = 0;
      uint64_t v35 = (void *)v127._countAndFlagsBits;
      do
      {
        if ((v27 & 0xC000000000000001) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_retain();
        }
        uint64_t v36 = sub_100039EC0();
        uint64_t v38 = v37;
        swift_release();
        v127._countAndFlagsBits = (uint64_t)v35;
        unint64_t v40 = v35[2];
        unint64_t v39 = v35[3];
        if (v40 >= v39 >> 1)
        {
          sub_10000C884(v39 > 1, v40 + 1, 1);
          uint64_t v35 = (void *)v127._countAndFlagsBits;
        }
        ++v34;
        v35[2] = v40 + 1;
        uint64_t v41 = &v35[2 * v40];
        v41[4] = v36;
        v41[5] = v38;
      }
      while (v31 != v34);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v35 = _swiftEmptyArrayStorage;
    }
    v127._countAndFlagsBits = (uint64_t)v35;
    sub_100004700((uint64_t *)&unk_10017E5D0);
    sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    Swift::Int v42 = sub_10002A270();
    uint64_t v43 = sub_1000EDF8C(v42);
    uint64_t v45 = v44;
    swift_bridgeObjectRelease();
    v127._countAndFlagsBits = v43;
    v127._int64_t object = v45;
    swift_bridgeObjectRetain();
    v46._countAndFlagsBits = 10;
    v46._int64_t object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    String.append(_:)(v127);
    swift_bridgeObjectRelease();
LABEL_44:
    swift_release();
    uint64_t v3 = v121;
    uint64_t v1 = v122;
    uint64_t v7 = v119;
    uint64_t v10 = v120;
    unint64_t v15 = v124;
    int64_t object = v125;
    if (!v124) {
      goto LABEL_9;
    }
LABEL_6:
    unint64_t v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
  }
  if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    char v123 = *(void (***)(char *, char *, uint64_t))(v27 + 32);
    swift_retain();
    uint64_t v30 = v27 & 0xFFFFFFFFFFFFFF8;
    if (!v28) {
      goto LABEL_28;
    }
    goto LABEL_42;
  }
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  swift_bridgeObjectRetain();
  uint64_t v108 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v125 = v108;
  if (!v108) {
    goto LABEL_113;
  }
LABEL_99:
  if (v125 >= 1)
  {
    uint64_t v93 = 0;
    unint64_t v124 = object & 0xC000000000000001;
    int64_t v94 = object;
    do
    {
      if (v124)
      {
        long long v95 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        long long v95 = *(void **)(object + 8 * v93 + 32);
        swift_retain();
      }
      ++v93;
      v127._countAndFlagsBits = 0;
      v127._int64_t object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(25);
      uint64_t v126 = v95[3];
      type metadata accessor for OSExtension(0);
      sub_100013148((unint64_t *)&qword_10017BC90, (void (*)(uint64_t))type metadata accessor for OSExtension);
      swift_retain();
      uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v98 = v97;
      swift_release();
      swift_bridgeObjectRelease();
      v127._countAndFlagsBits = v96;
      v127._int64_t object = v98;
      v99._countAndFlagsBits = 0xD000000000000014;
      v99._int64_t object = (void *)0x80000001001454A0;
      String.append(_:)(v99);
      uint64_t v100 = (*(uint64_t (**)(void))(*v95 + 296))();
      unint64_t v102 = v101;
      uint64_t v103 = sub_100014690(v100, v101);
      BOOL v105 = v104;
      sub_100012A10(v100, v102);
      v106._countAndFlagsBits = v103;
      v106._int64_t object = v105;
      String.append(_:)(v106);
      swift_bridgeObjectRelease();
      v107._countAndFlagsBits = 10;
      v107._int64_t object = (void *)0xE100000000000000;
      String.append(_:)(v107);
      String.append(_:)(v127);
      swift_release();
      swift_bridgeObjectRelease();
      int64_t object = v94;
    }
    while (v125 != v93);
    goto LABEL_113;
  }
  __break(1u);
LABEL_115:
  __break(1u);
  return result;
}

uint64_t sub_10000C17C()
{
  sub_10000478C(v0 + 16);
  swift_release();
  sub_1000130EC(v0 + 64, &qword_10017BC70);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000C1EC()
{
  sub_10000C17C();

  return _swift_deallocClassInstance(v0, 160, 7);
}

uint64_t sub_10000C220()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t sub_10000C244()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t sub_10000C270()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

void (*sub_10000C29C(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 344))();
  return sub_10000C31C;
}

void sub_10000C31C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_10000C364()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t sub_10000C390()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

char *sub_10000C3BC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100004700((uint64_t *)&unk_10017DE60);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100012CF0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000C4CC(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100004700(&qword_10017FB40);
  uint64_t v10 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100012A8C(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

char *sub_10000C734(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100004700(&qword_10017BEB0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 32]) {
          memmove(v13, a4 + 32, 8 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100012BE4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000C844(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000C8A4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10000C864(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000CAE4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10000C884(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000CC50(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10000C8A4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100004700(&qword_10017BEA0);
  uint64_t v10 = *(void *)(type metadata accessor for ActiveDriverInfo() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for ActiveDriverInfo() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  int64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10000CAE4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017BEE8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10000CC50(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700((uint64_t *)&unk_10017DE60);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10000CDBC(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (uint64_t (*)(char *, char *))isStackAllocationSafe;
  char v7 = *(unsigned char *)(a3 + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = sub_10000D94C((unint64_t *)((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a3, v6);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    int64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a2 = sub_10000D94C((unint64_t *)v11, v8, a3, v6);
    swift_slowDealloc();
  }
  return a2;
}

unint64_t sub_10000CF34(uint64_t a1, unint64_t a2)
{
  Hasher.init(_seed:)();
  Data.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10000CFAC(a1, a2, v4);
}

unint64_t sub_10000CFAC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v8 = a2;
    uint64_t v10 = ~v5;
    unint64_t v80 = HIDWORD(a1);
    size_t v85 = HIDWORD(a1) - (int)a1;
    uint64_t v86 = ~v5;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v84 = v11;
    unint64_t v87 = a2 >> 62;
    uint64_t v82 = v3 + 64;
    uint64_t v83 = (int)a1;
    uint64_t v81 = a1 >> 32;
    uint64_t v78 = (a1 >> 32) - (int)a1;
    unint64_t v88 = a2 >> 62;
    size_t __n = BYTE6(a2);
    while (1)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          sub_100012DE4(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_121;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v88)
      {
        case 1uLL:
          size_t v18 = v85;
          if (v84) {
            goto LABEL_122;
          }
          goto LABEL_19;
        case 2uLL:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_123;
        case 3uLL:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_118;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_118:
              sub_100012A10(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_124;
                }
                uint64_t v26 = __DataStorage._bytes.getter();
                if (v26)
                {
                  uint64_t v27 = v26;
                  uint64_t v28 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v14, v28)) {
                    goto LABEL_126;
                  }
                  uint64_t v29 = (const void *)(v27 + (int)v14 - v28);
                }
                else
                {
                  uint64_t v29 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v10 = v86;
                if (!v87)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v29) {
                    goto LABEL_154;
                  }
                  int v50 = memcmp(v29, __s1, __n);
LABEL_102:
                  sub_100012A10(v14, v13);
                  uint64_t v4 = v82;
                  if (!v50) {
                    return v6;
                  }
                  break;
                }
                if (v87 == 1)
                {
                  if (v81 < v83) {
                    goto LABEL_135;
                  }
                  swift_retain();
                  Swift::String v46 = (char *)__DataStorage._bytes.getter();
                  if (v46)
                  {
                    uint64_t v47 = __DataStorage._offset.getter();
                    if (__OFSUB__(v83, v47)) {
                      goto LABEL_142;
                    }
                    v46 += v83 - v47;
                  }
                  uint64_t v48 = __DataStorage._length.getter();
                  size_t v49 = v78;
                  if (v48 < v78) {
                    size_t v49 = v48;
                  }
                  if (!v29) {
                    goto LABEL_147;
                  }
                  if (!v46) {
                    goto LABEL_148;
                  }
                  int v50 = memcmp(v29, v46, v49);
                  sub_100012A10(a1, v8);
                  goto LABEL_102;
                }
                uint64_t v68 = *(void *)(a1 + 16);
                uint64_t v77 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v69 = __DataStorage._bytes.getter();
                if (v69)
                {
                  uint64_t v70 = v69;
                  uint64_t v71 = __DataStorage._offset.getter();
                  if (__OFSUB__(v68, v71)) {
                    goto LABEL_141;
                  }
                  Swift::String v72 = (const void *)(v70 + v68 - v71);
                }
                else
                {
                  Swift::String v72 = 0;
                }
                if (__OFSUB__(v77, v68)) {
                  goto LABEL_136;
                }
                uint64_t v73 = __DataStorage._length.getter();
                if (v73 >= v77 - v68) {
                  size_t v74 = v77 - v68;
                }
                else {
                  size_t v74 = v73;
                }
                if (!v29) {
                  goto LABEL_155;
                }
                unint64_t v8 = a2;
                if (!v72) {
                  goto LABEL_156;
                }
                int v45 = memcmp(v29, v72, v74);
LABEL_115:
                swift_release();
                swift_release();
                sub_100012A10(v14, v13);
                uint64_t v4 = v82;
                uint64_t v10 = v86;
                if (!v45) {
                  return v6;
                }
                break;
              case 2uLL:
                uint64_t v30 = *(void *)(v14 + 16);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_125;
                  }
                  uint64_t v34 = (const void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v34 = 0;
                }
                __DataStorage._length.getter();
                if (v87)
                {
                  if (v87 == 1)
                  {
                    if (v81 < v83) {
                      goto LABEL_129;
                    }
                    swift_retain();
                    uint64_t v41 = (char *)__DataStorage._bytes.getter();
                    if (v41)
                    {
                      uint64_t v42 = __DataStorage._offset.getter();
                      if (__OFSUB__(v83, v42)) {
                        goto LABEL_140;
                      }
                      v41 += v83 - v42;
                    }
                    uint64_t v43 = __DataStorage._length.getter();
                    size_t v44 = v78;
                    if (v43 < v78) {
                      size_t v44 = v43;
                    }
                    if (!v34) {
                      goto LABEL_145;
                    }
                    if (!v41) {
                      goto LABEL_146;
                    }
                    int v45 = memcmp(v34, v41, v44);
                    sub_100012A10(a1, v8);
                  }
                  else
                  {
                    uint64_t v62 = *(void *)(a1 + 16);
                    uint64_t v76 = *(void *)(a1 + 24);
                    swift_retain();
                    swift_retain();
                    int64_t v63 = (char *)__DataStorage._bytes.getter();
                    if (v63)
                    {
                      uint64_t v64 = __DataStorage._offset.getter();
                      if (__OFSUB__(v62, v64)) {
                        goto LABEL_139;
                      }
                      v63 += v62 - v64;
                    }
                    BOOL v21 = __OFSUB__(v76, v62);
                    int64_t v65 = v76 - v62;
                    if (v21) {
                      goto LABEL_134;
                    }
                    uint64_t v66 = __DataStorage._length.getter();
                    if (v66 >= v65) {
                      size_t v67 = v65;
                    }
                    else {
                      size_t v67 = v66;
                    }
                    if (!v34) {
                      goto LABEL_152;
                    }
                    unint64_t v8 = a2;
                    if (!v63) {
                      goto LABEL_153;
                    }
                    int v45 = memcmp(v34, v63, v67);
                    swift_release();
                    swift_release();
                  }
                }
                else
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v34) {
                    goto LABEL_151;
                  }
                  int v45 = memcmp(v34, __s1, __n);
                }
                goto LABEL_115;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v87) {
                  goto LABEL_46;
                }
                if (v87 == 1)
                {
                  if (v81 < v83) {
                    goto LABEL_128;
                  }
                  swift_retain();
                  uint64_t v35 = __DataStorage._bytes.getter();
                  if (!v35) {
                    goto LABEL_144;
                  }
                  uint64_t v23 = v35;
                  uint64_t v36 = __DataStorage._offset.getter();
                  uint64_t v25 = v83 - v36;
                  if (__OFSUB__(v83, v36)) {
                    goto LABEL_133;
                  }
LABEL_41:
                  uint64_t v37 = __DataStorage._length.getter();
                  if (v37 >= v78) {
                    size_t v38 = v78;
                  }
                  else {
                    size_t v38 = v37;
                  }
                  int v39 = memcmp(__s1, (const void *)(v23 + v25), v38);
                  sub_100012A10(a1, v8);
                  sub_100012A10(v14, v13);
                  uint64_t v10 = v86;
                  if (!v39) {
                    return v6;
                  }
                }
                else
                {
                  uint64_t v57 = *(void *)(a1 + 16);
                  uint64_t v58 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  int64_t v53 = (char *)__DataStorage._bytes.getter();
                  if (v53)
                  {
                    uint64_t v59 = __DataStorage._offset.getter();
                    if (__OFSUB__(v57, v59)) {
                      goto LABEL_138;
                    }
                    v53 += v57 - v59;
                  }
                  BOOL v21 = __OFSUB__(v58, v57);
                  int64_t v55 = v58 - v57;
                  if (v21) {
                    goto LABEL_131;
                  }
                  uint64_t v56 = __DataStorage._length.getter();
                  if (!v53) {
                    goto LABEL_150;
                  }
LABEL_83:
                  if (v56 >= v55) {
                    size_t v60 = v55;
                  }
                  else {
                    size_t v60 = v56;
                  }
                  int v61 = memcmp(__s1, v53, v60);
                  swift_release();
                  swift_release();
                  sub_100012A10(v14, v13);
                  unint64_t v8 = a2;
                  uint64_t v10 = v86;
                  if (!v61) {
                    return v6;
                  }
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v87)
                {
LABEL_46:
                  __int16 __s2 = a1;
                  char v91 = BYTE2(a1);
                  char v92 = BYTE3(a1);
                  char v93 = v80;
                  char v94 = BYTE5(a1);
                  char v95 = BYTE6(a1);
                  char v96 = HIBYTE(a1);
                  __int16 v97 = v8;
                  char v98 = BYTE2(v8);
                  char v99 = BYTE3(v8);
                  char v100 = BYTE4(v8);
                  char v101 = BYTE5(v8);
                  int v40 = memcmp(__s1, &__s2, __n);
                  sub_100012A10(v14, v13);
                  if (!v40) {
                    return v6;
                  }
                  break;
                }
                if (v87 == 1)
                {
                  if (v81 < v83) {
                    goto LABEL_127;
                  }
                  swift_retain();
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_144:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_145:
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
                    JUMPOUT(0x10000D91CLL);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  uint64_t v25 = v83 - v24;
                  if (__OFSUB__(v83, v24)) {
                    goto LABEL_132;
                  }
                  goto LABEL_41;
                }
                uint64_t v51 = *(void *)(a1 + 16);
                uint64_t v52 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                int64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v51, v54)) {
                    goto LABEL_137;
                  }
                  v53 += v51 - v54;
                }
                BOOL v21 = __OFSUB__(v52, v51);
                int64_t v55 = v52 - v51;
                if (v21) {
                  goto LABEL_130;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_149;
                }
                goto LABEL_83;
            }
          }
          else
          {
LABEL_7:
            sub_100012A10(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v10;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

uint64_t sub_10000D94C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, char *))
{
  size_t v38 = a4;
  uint64_t v28 = a2;
  uint64_t v29 = a1;
  uint64_t v6 = type metadata accessor for DriverBinEntry();
  uint64_t v37 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for UUID();
  uint64_t result = __chkstk_darwin(v36);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = 0;
  int v39 = (void *)a3;
  uint64_t v14 = *(void *)(a3 + 64);
  uint64_t v30 = 0;
  uint64_t v31 = a3 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v32 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v33 = v10 + 16;
  uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t v35 = v10;
  while (v17)
  {
    unint64_t v18 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    unint64_t v19 = v18 | (v13 << 6);
LABEL_17:
    uint64_t v23 = v36;
    uint64_t v24 = v39;
    (*(void (**)(char *, unint64_t, uint64_t))(v35 + 16))(v12, v39[6] + *(void *)(v35 + 72) * v19, v36);
    sub_100012F8C(v24[7] + *(void *)(v37 + 72) * v19, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    char v25 = v38(v12, v8);
    if (v4)
    {
      sub_10001305C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      return (*v34)(v12, v23);
    }
    char v26 = v25;
    sub_10001305C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t result = (*v34)(v12, v23);
    if (v26)
    {
      *(unint64_t *)((char *)v29 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      BOOL v20 = __OFADD__(v30++, 1);
      if (v20) {
        goto LABEL_30;
      }
    }
  }
  BOOL v20 = __OFADD__(v13++, 1);
  if (v20)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v13 >= v32) {
    return sub_10000DCF0(v29, v28, v30, v39);
  }
  unint64_t v21 = *(void *)(v31 + 8 * v13);
  if (v21)
  {
LABEL_16:
    unint64_t v17 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v13 << 6);
    goto LABEL_17;
  }
  int64_t v22 = v13 + 1;
  if (v13 + 1 >= v32) {
    return sub_10000DCF0(v29, v28, v30, v39);
  }
  unint64_t v21 = *(void *)(v31 + 8 * v22);
  if (v21) {
    goto LABEL_15;
  }
  int64_t v22 = v13 + 2;
  if (v13 + 2 >= v32) {
    return sub_10000DCF0(v29, v28, v30, v39);
  }
  unint64_t v21 = *(void *)(v31 + 8 * v22);
  if (v21) {
    goto LABEL_15;
  }
  int64_t v22 = v13 + 3;
  if (v13 + 3 >= v32) {
    return sub_10000DCF0(v29, v28, v30, v39);
  }
  unint64_t v21 = *(void *)(v31 + 8 * v22);
  if (v21)
  {
LABEL_15:
    int64_t v13 = v22;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v13 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v13 >= v32) {
      return sub_10000DCF0(v29, v28, v30, v39);
    }
    unint64_t v21 = *(void *)(v31 + 8 * v13);
    ++v22;
    if (v21) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10000DCF0(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DriverBinEntry();
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v54 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v47 = (char *)&v41 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v49 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  int64_t v53 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  Swift::String v46 = (char *)&v41 - v15;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_100004700(&qword_10017BF08);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v17 = result;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  if (a2 < 1) {
    unint64_t v18 = 0;
  }
  else {
    unint64_t v18 = *a1;
  }
  uint64_t v19 = 0;
  uint64_t v44 = v49 + 16;
  uint64_t v45 = result;
  uint64_t v52 = v49 + 32;
  uint64_t v20 = result + 64;
  uint64_t v43 = a4;
  uint64_t v21 = (uint64_t)v47;
  while (1)
  {
    if (v18)
    {
      uint64_t v50 = (v18 - 1) & v18;
      uint64_t v51 = v19;
      unint64_t v22 = __clz(__rbit64(v18)) | (v19 << 6);
    }
    else
    {
      uint64_t v23 = v19 + 1;
      if (__OFADD__(v19, 1)) {
        goto LABEL_40;
      }
      if (v23 >= v42) {
        return v17;
      }
      unint64_t v24 = v41[v23];
      uint64_t v25 = v19 + 1;
      if (!v24)
      {
        uint64_t v25 = v19 + 2;
        if (v19 + 2 >= v42) {
          return v17;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          uint64_t v25 = v19 + 3;
          if (v19 + 3 >= v42) {
            return v17;
          }
          unint64_t v24 = v41[v25];
          if (!v24)
          {
            uint64_t v26 = v19 + 4;
            if (v19 + 4 >= v42) {
              return v17;
            }
            unint64_t v24 = v41[v26];
            if (!v24)
            {
              while (1)
              {
                uint64_t v25 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_41;
                }
                if (v25 >= v42) {
                  return v17;
                }
                unint64_t v24 = v41[v25];
                ++v26;
                if (v24) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v25 = v19 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v50 = (v24 - 1) & v24;
      uint64_t v51 = v25;
      unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
    }
    uint64_t v27 = v49;
    uint64_t v28 = *(void *)(v49 + 72);
    uint64_t v29 = v46;
    (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v46, a4[6] + v28 * v22, v12);
    uint64_t v30 = *(void *)(v48 + 72);
    sub_100012F8C(a4[7] + v30 * v22, v21, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v31(v53, v29, v12);
    sub_100012FF4(v21, v54, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v17 = v45;
    sub_100013148(&qword_10017BF10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = -1 << *(unsigned char *)(v17 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v20 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v35 = __clz(__rbit64((-1 << v33) & ~*(void *)(v20 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v38 = v34 == v37;
        if (v34 == v37) {
          unint64_t v34 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v34);
      }
      while (v39 == -1);
      unint64_t v35 = __clz(__rbit64(~v39)) + (v34 << 6);
    }
    *(void *)(v20 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
    v31((char *)(*(void *)(v17 + 48) + v35 * v28), v53, v12);
    uint64_t result = sub_100012FF4(v54, *(void *)(v17 + 56) + v35 * v30, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    ++*(void *)(v17 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v43;
    unint64_t v18 = v50;
    uint64_t v19 = v51;
    if (!a3) {
      return v17;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10000E1B8(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100013148(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
  swift_bridgeObjectRetain();
  unint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100013148(&qword_10017BE98, (void (*)(uint64_t))&type metadata accessor for URL);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10000F5FC((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_10000E4DC(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Data.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_116:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)__s1 = *(void *)v81;
    *(void *)uint64_t v81 = 0x8000000000000000;
    sub_100012DE4(a2, a3);
    sub_10000F89C(a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v81 = *(void *)__s1;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v86 = ~v8;
  unint64_t v11 = a3 >> 62;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v84 = v12;
  uint64_t v83 = v6;
  size_t __n = BYTE6(a3);
  uint64_t v85 = v6 + 56;
  uint64_t v79 = (a2 >> 32) - (int)a2;
  uint64_t v80 = a2 >> 32;
  unint64_t v78 = a3;
  while (2)
  {
    unint64_t v13 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
        }
        uint64_t v16 = HIDWORD(v14) - (int)v14;
LABEL_14:
        sub_100012DE4(v14, v15);
        break;
      case 2uLL:
        uint64_t v18 = *(void *)(v14 + 16);
        uint64_t v17 = *(void *)(v14 + 24);
        uint64_t v16 = v17 - v18;
        if (!__OFSUB__(v17, v18)) {
          goto LABEL_14;
        }
        goto LABEL_120;
      case 3uLL:
        break;
      default:
        uint64_t v16 = BYTE6(v15);
        break;
    }
    size_t v19 = __n;
    switch((int)v11)
    {
      case 1:
        size_t v19 = HIDWORD(a2) - (int)a2;
        if (v84) {
          goto LABEL_121;
        }
        goto LABEL_19;
      case 2:
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v20 = *(void *)(a2 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        size_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_19;
        }
        goto LABEL_122;
      case 3:
        if (v16) {
          goto LABEL_7;
        }
        goto LABEL_117;
      default:
LABEL_19:
        if (v16 != v19)
        {
LABEL_7:
          sub_100012A10(v14, v15);
          goto LABEL_8;
        }
        if (v16 >= 1)
        {
          switch(v15 >> 62)
          {
            case 1uLL:
              if ((int)v14 > v14 >> 32) {
                goto LABEL_123;
              }
              uint64_t v27 = (char *)__DataStorage._bytes.getter();
              if (!v27) {
                goto LABEL_33;
              }
              uint64_t v28 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v14, v28)) {
                goto LABEL_125;
              }
              v27 += (int)v14 - v28;
LABEL_33:
              __DataStorage._length.getter();
              uint64_t v10 = v85;
              if (v11)
              {
                if (v11 == 1)
                {
                  if (v80 < (int)a2) {
                    goto LABEL_134;
                  }
                  swift_retain();
                  uint64_t v29 = (char *)__DataStorage._bytes.getter();
                  if (v29)
                  {
                    uint64_t v30 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)a2, v30)) {
                      goto LABEL_141;
                    }
                    v29 += (int)a2 - v30;
                  }
                  uint64_t v31 = __DataStorage._length.getter();
                  size_t v32 = (a2 >> 32) - (int)a2;
                  if (v31 < v79) {
                    size_t v32 = v31;
                  }
                  if (!v27) {
                    goto LABEL_143;
                  }
                  if (!v29) {
                    goto LABEL_144;
                  }
                  int v33 = memcmp(v27, v29, v32);
                  sub_100012A10(a2, a3);
                }
                else
                {
                  uint64_t v66 = *(void *)(a2 + 16);
                  uint64_t v65 = *(void *)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  size_t v67 = (char *)__DataStorage._bytes.getter();
                  if (v67)
                  {
                    uint64_t v68 = __DataStorage._offset.getter();
                    if (__OFSUB__(v66, v68)) {
                      goto LABEL_140;
                    }
                    v67 += v66 - v68;
                  }
                  BOOL v22 = __OFSUB__(v65, v66);
                  int64_t v69 = v65 - v66;
                  if (v22) {
                    goto LABEL_135;
                  }
                  uint64_t v70 = __DataStorage._length.getter();
                  if (v70 >= v69) {
                    size_t v71 = v69;
                  }
                  else {
                    size_t v71 = v70;
                  }
                  if (!v27) {
                    goto LABEL_154;
                  }
                  a3 = v78;
                  uint64_t v6 = v83;
                  if (!v67) {
                    goto LABEL_155;
                  }
                  int v33 = memcmp(v27, v67, v71);
                  swift_release();
LABEL_112:
                  swift_release();
                }
                sub_100012A10(v14, v15);
LABEL_114:
                uint64_t v10 = v85;
                if (!v33) {
                  goto LABEL_118;
                }
              }
              else
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v27) {
                  goto LABEL_153;
                }
                uint64_t v47 = (uint64_t *)__s1;
                Swift::String v46 = v27;
LABEL_99:
                int v45 = memcmp(v46, v47, __n);
LABEL_100:
                sub_100012A10(v14, v15);
                if (!v45) {
                  goto LABEL_118;
                }
              }
              break;
            case 2uLL:
              uint64_t v34 = *(void *)(v14 + 16);
              swift_retain();
              swift_retain();
              unint64_t v35 = (char *)__DataStorage._bytes.getter();
              if (!v35) {
                goto LABEL_47;
              }
              uint64_t v36 = __DataStorage._offset.getter();
              if (__OFSUB__(v34, v36)) {
                goto LABEL_124;
              }
              v35 += v34 - v36;
LABEL_47:
              __DataStorage._length.getter();
              uint64_t v6 = v83;
              if (!v11)
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v35) {
                  goto LABEL_150;
                }
                int v33 = memcmp(v35, __s1, __n);
                swift_release();
                goto LABEL_112;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_128;
                }
                swift_retain();
                unint64_t v37 = (char *)__DataStorage._bytes.getter();
                if (v37)
                {
                  uint64_t v38 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a2, v38)) {
                    goto LABEL_139;
                  }
                  v37 += (int)a2 - v38;
                }
                uint64_t v39 = __DataStorage._length.getter();
                size_t v40 = (a2 >> 32) - (int)a2;
                if (v39 < v79) {
                  size_t v40 = v39;
                }
                if (!v35) {
                  goto LABEL_145;
                }
                if (!v37) {
                  goto LABEL_146;
                }
                int v33 = memcmp(v35, v37, v40);
                sub_100012A10(a2, a3);
                swift_release();
              }
              else
              {
                uint64_t v59 = *(void *)(a2 + 16);
                uint64_t v77 = *(void *)(a2 + 24);
                swift_retain();
                swift_retain();
                size_t v60 = (char *)__DataStorage._bytes.getter();
                if (v60)
                {
                  uint64_t v61 = __DataStorage._offset.getter();
                  if (__OFSUB__(v59, v61)) {
                    goto LABEL_138;
                  }
                  v60 += v59 - v61;
                }
                BOOL v22 = __OFSUB__(v77, v59);
                int64_t v62 = v77 - v59;
                if (v22) {
                  goto LABEL_133;
                }
                uint64_t v63 = __DataStorage._length.getter();
                if (v63 >= v62) {
                  size_t v64 = v62;
                }
                else {
                  size_t v64 = v63;
                }
                if (!v35) {
                  goto LABEL_151;
                }
                a3 = v78;
                if (!v60) {
                  goto LABEL_152;
                }
                int v33 = memcmp(v35, v60, v64);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              sub_100012A10(v14, v15);
              uint64_t v6 = v83;
              goto LABEL_114;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v11) {
                goto LABEL_67;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_127;
                }
                swift_retain();
                uint64_t v41 = __DataStorage._bytes.getter();
                if (!v41) {
                  goto LABEL_147;
                }
                uint64_t v24 = v41;
                uint64_t v42 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v42;
                if (__OFSUB__((int)a2, v42)) {
                  goto LABEL_132;
                }
LABEL_63:
                uint64_t v43 = __DataStorage._length.getter();
                if (v43 >= v79) {
                  size_t v44 = (a2 >> 32) - (int)a2;
                }
                else {
                  size_t v44 = v43;
                }
                int v45 = memcmp(__s1, (const void *)(v24 + v26), v44);
                a3 = v78;
                sub_100012A10(a2, v78);
                goto LABEL_100;
              }
              uint64_t v54 = *(void *)(a2 + 16);
              uint64_t v55 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v56 = __DataStorage._offset.getter();
                if (__OFSUB__(v54, v56)) {
                  goto LABEL_137;
                }
                v50 += v54 - v56;
              }
              BOOL v22 = __OFSUB__(v55, v54);
              int64_t v52 = v55 - v54;
              if (v22) {
                goto LABEL_130;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_149;
              }
LABEL_79:
              if (v53 >= v52) {
                size_t v57 = v52;
              }
              else {
                size_t v57 = v53;
              }
              int v58 = memcmp(__s1, v50, v57);
              swift_release();
              swift_release();
              sub_100012A10(v14, v15);
              uint64_t v6 = v83;
              uint64_t v10 = v85;
              if (!v58) {
                goto LABEL_118;
              }
              break;
            default:
              *(void *)__s1 = v14;
              *(_WORD *)&__s1[8] = v15;
              __s1[10] = BYTE2(v15);
              __s1[11] = BYTE3(v15);
              __s1[12] = BYTE4(v15);
              __s1[13] = BYTE5(v15);
              if (!v11)
              {
LABEL_67:
                uint64_t v88 = a2;
                __int16 v89 = a3;
                char v90 = BYTE2(a3);
                char v91 = BYTE3(a3);
                char v92 = BYTE4(a3);
                char v93 = BYTE5(a3);
                Swift::String v46 = __s1;
                uint64_t v47 = &v88;
                goto LABEL_99;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_126;
                }
                swift_retain();
                uint64_t v23 = __DataStorage._bytes.getter();
                if (!v23)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
                  JUMPOUT(0x10000EEF0);
                }
                uint64_t v24 = v23;
                uint64_t v25 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v25;
                if (__OFSUB__((int)a2, v25)) {
                  goto LABEL_131;
                }
                goto LABEL_63;
              }
              uint64_t v48 = *(void *)(a2 + 16);
              uint64_t v49 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v51 = __DataStorage._offset.getter();
                if (__OFSUB__(v48, v51)) {
                  goto LABEL_136;
                }
                v50 += v48 - v51;
              }
              BOOL v22 = __OFSUB__(v49, v48);
              int64_t v52 = v49 - v48;
              if (v22) {
                goto LABEL_129;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_148;
              }
              goto LABEL_79;
          }
LABEL_8:
          unint64_t v9 = (v9 + 1) & v86;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_116;
          }
          continue;
        }
LABEL_117:
        sub_100012A10(v14, v15);
LABEL_118:
        swift_bridgeObjectRelease();
        sub_100012A10(a2, a3);
        size_t v74 = (uint64_t *)(*(void *)(*(void *)v81 + 48) + 16 * v9);
        uint64_t v75 = *v74;
        unint64_t v76 = v74[1];
        *a1 = *v74;
        a1[1] = v76;
        sub_100012DE4(v75, v76);
        return 0;
    }
  }
}

uint64_t sub_10000EF20()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100004700(&qword_10017BEA8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    unint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    unint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100013148(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10000F31C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100004700(&qword_10017BEE0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10000F5FC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10000EF20();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1000102E4();
      goto LABEL_12;
    }
    sub_10001073C();
  }
  uint64_t v12 = *v3;
  sub_100013148(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    int64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100013148(&qword_10017BE98, (void (*)(uint64_t))&type metadata accessor for URL);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_10000F89C(Swift::Int result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if (a4)
    {
      sub_10000F31C();
    }
    else
    {
      if (v10 > v9)
      {
        uint64_t result = (Swift::Int)sub_100010588();
        goto LABEL_125;
      }
      sub_100010AEC();
    }
    uint64_t v11 = *v4;
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
    a3 = result & ~v12;
    uint64_t v13 = v11 + 56;
    if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v92 = ~v12;
      uint64_t v88 = v11;
      unint64_t v90 = a2 >> 62;
      BOOL v14 = __OFSUB__(HIDWORD(v8), v8);
      BOOL v89 = v14;
      uint64_t v91 = v11 + 56;
      uint64_t v86 = v4;
      uint64_t v87 = v8 >> 32;
      uint64_t v85 = (v8 >> 32) - (int)v8;
      do
      {
        uint64_t v15 = (uint64_t *)(*(void *)(v11 + 48) + 16 * a3);
        uint64_t v17 = *v15;
        unint64_t v16 = v15[1];
        uint64_t v18 = 0;
        switch(v16 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v17), v17))
            {
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
              goto LABEL_131;
            }
            uint64_t v18 = HIDWORD(v17) - (int)v17;
LABEL_21:
            sub_100012DE4(v17, v16);
LABEL_22:
            uint64_t v21 = BYTE6(a2);
            switch(a2 >> 62)
            {
              case 1uLL:
                uint64_t v21 = HIDWORD(v8) - (int)v8;
                if (v89) {
                  goto LABEL_129;
                }
                goto LABEL_26;
              case 2uLL:
                uint64_t v23 = *(void *)(v8 + 16);
                uint64_t v22 = *(void *)(v8 + 24);
                BOOL v24 = __OFSUB__(v22, v23);
                uint64_t v21 = v22 - v23;
                if (!v24) {
                  goto LABEL_26;
                }
                goto LABEL_130;
              case 3uLL:
                if (v18) {
                  goto LABEL_14;
                }
                goto LABEL_165;
              default:
LABEL_26:
                if (v18 != v21)
                {
LABEL_14:
                  uint64_t result = sub_100012A10(v17, v16);
                  goto LABEL_15;
                }
                if (v18 < 1) {
                  goto LABEL_165;
                }
                break;
            }
            break;
          case 2uLL:
            uint64_t v20 = *(void *)(v17 + 16);
            uint64_t v19 = *(void *)(v17 + 24);
            uint64_t v18 = v19 - v20;
            if (!__OFSUB__(v19, v20)) {
              goto LABEL_21;
            }
            goto LABEL_128;
          case 3uLL:
            goto LABEL_22;
          default:
            uint64_t v18 = BYTE6(v16);
            goto LABEL_22;
        }
        switch(v16 >> 62)
        {
          case 1uLL:
            if ((int)v17 > v17 >> 32) {
              goto LABEL_132;
            }
            int64_t v40 = (unsigned char *)__DataStorage._bytes.getter();
            if (!v40) {
              goto LABEL_52;
            }
            uint64_t v41 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v17, v41)) {
              goto LABEL_134;
            }
            v40 += (int)v17 - v41;
LABEL_52:
            __DataStorage._length.getter();
            uint64_t v13 = v91;
            if (!v90)
            {
              *(void *)__s1 = v8;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v40) {
                goto LABEL_160;
              }
              uint64_t v48 = (uint64_t *)__s1;
              uint64_t v47 = v40;
LABEL_110:
              int v71 = memcmp(v47, v48, BYTE6(a2));
              uint64_t result = sub_100012A10(v17, v16);
              if (!v71) {
                goto LABEL_166;
              }
              break;
            }
            if (v90 == 1)
            {
              if (v87 < (int)v8) {
                goto LABEL_143;
              }
              swift_retain();
              uint64_t v42 = __DataStorage._bytes.getter();
              if (v42)
              {
                uint64_t v43 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v8, v43)) {
                  goto LABEL_150;
                }
                v42 += (int)v8 - v43;
              }
              uint64_t v44 = __DataStorage._length.getter();
              uint64_t v45 = (v8 >> 32) - (int)v8;
              if (v44 < v85) {
                uint64_t v45 = v44;
              }
              if (!v40) {
                goto LABEL_153;
              }
              if (!v42) {
                goto LABEL_154;
              }
              size_t v38 = v45;
              uint64_t v39 = v40;
              unint64_t v37 = (const void *)v42;
              goto LABEL_63;
            }
            uint64_t v72 = *(void *)(v8 + 16);
            uint64_t v84 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v73 = __DataStorage._bytes.getter();
            if (v73)
            {
              uint64_t v74 = v73;
              uint64_t v75 = __DataStorage._offset.getter();
              if (__OFSUB__(v72, v75)) {
                goto LABEL_149;
              }
              unint64_t v76 = (const void *)(v74 + v72 - v75);
            }
            else
            {
              unint64_t v76 = 0;
            }
            if (__OFSUB__(v84, v72)) {
              goto LABEL_144;
            }
            uint64_t v77 = __DataStorage._length.getter();
            if (v77 >= v84 - v72) {
              size_t v78 = v84 - v72;
            }
            else {
              size_t v78 = v77;
            }
            uint64_t v11 = v88;
            if (!v40) {
              goto LABEL_163;
            }
            uint64_t v13 = v91;
            if (!v76) {
              goto LABEL_164;
            }
            int v64 = memcmp(v40, v76, v78);
            swift_release();
LABEL_123:
            swift_release();
            uint64_t result = sub_100012A10(v17, v16);
            uint64_t v5 = v86;
            if (!v64) {
              goto LABEL_166;
            }
            break;
          case 2uLL:
            uint64_t v29 = *(void *)(v17 + 16);
            swift_retain();
            swift_retain();
            uint64_t v30 = __DataStorage._bytes.getter();
            if (v30)
            {
              uint64_t v31 = v30;
              uint64_t v32 = __DataStorage._offset.getter();
              if (__OFSUB__(v29, v32)) {
                goto LABEL_133;
              }
              uint64_t v33 = (const void *)(v31 + v29 - v32);
            }
            else
            {
              uint64_t v33 = 0;
            }
            __DataStorage._length.getter();
            uint64_t v11 = v88;
            uint64_t v13 = v91;
            if (v90)
            {
              if (v90 == 1)
              {
                if (v87 < (int)v8) {
                  goto LABEL_137;
                }
                swift_retain();
                uint64_t v49 = (char *)__DataStorage._bytes.getter();
                if (v49)
                {
                  uint64_t v50 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v8, v50)) {
                    goto LABEL_148;
                  }
                  v49 += (int)v8 - v50;
                }
                uint64_t v51 = __DataStorage._length.getter();
                size_t v52 = (v8 >> 32) - (int)v8;
                if (v51 < v85) {
                  size_t v52 = v51;
                }
                if (!v33) {
                  goto LABEL_155;
                }
                if (!v49) {
                  goto LABEL_156;
                }
                int v46 = memcmp(v33, v49, v52);
                sub_100012A10(v8, a2);
                swift_release();
              }
              else
              {
                uint64_t v65 = *(void *)(v8 + 16);
                uint64_t v83 = *(void *)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v66 = (char *)__DataStorage._bytes.getter();
                if (v66)
                {
                  uint64_t v67 = __DataStorage._offset.getter();
                  if (__OFSUB__(v65, v67)) {
                    goto LABEL_147;
                  }
                  v66 += v65 - v67;
                }
                BOOL v24 = __OFSUB__(v83, v65);
                int64_t v68 = v83 - v65;
                if (v24) {
                  goto LABEL_142;
                }
                uint64_t v69 = __DataStorage._length.getter();
                if (v69 >= v68) {
                  size_t v70 = v68;
                }
                else {
                  size_t v70 = v69;
                }
                if (!v33) {
                  goto LABEL_161;
                }
                uint64_t v11 = v88;
                if (!v66) {
                  goto LABEL_162;
                }
                int v46 = memcmp(v33, v66, v70);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              uint64_t result = sub_100012A10(v17, v16);
              uint64_t v5 = v86;
              goto LABEL_106;
            }
            *(void *)__s1 = v8;
            *(_WORD *)&__s1[8] = a2;
            __s1[10] = BYTE2(a2);
            __s1[11] = BYTE3(a2);
            __s1[12] = BYTE4(a2);
            __s1[13] = BYTE5(a2);
            if (!v33) {
              goto LABEL_159;
            }
            int v64 = memcmp(v33, __s1, BYTE6(a2));
            swift_release();
            goto LABEL_123;
          case 3uLL:
            *(void *)&__s1[6] = 0;
            *(void *)__s1 = 0;
            if (!v90) {
              goto LABEL_64;
            }
            if (v90 == 1)
            {
              if (v87 < (int)v8) {
                goto LABEL_136;
              }
              swift_retain();
              uint64_t v34 = __DataStorage._bytes.getter();
              if (!v34) {
                goto LABEL_152;
              }
              uint64_t v26 = v34;
              uint64_t v35 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v35;
              if (__OFSUB__((int)v8, v35)) {
                goto LABEL_141;
              }
              goto LABEL_44;
            }
            uint64_t v59 = *(void *)(v8 + 16);
            uint64_t v60 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v55 = (char *)__DataStorage._bytes.getter();
            if (v55)
            {
              uint64_t v61 = __DataStorage._offset.getter();
              if (__OFSUB__(v59, v61)) {
                goto LABEL_146;
              }
              v55 += v59 - v61;
            }
            BOOL v24 = __OFSUB__(v60, v59);
            int64_t v57 = v60 - v59;
            if (v24) {
              goto LABEL_139;
            }
            uint64_t v58 = __DataStorage._length.getter();
            uint64_t v11 = v88;
            if (!v55) {
              goto LABEL_158;
            }
            goto LABEL_88;
          default:
            *(void *)__s1 = v17;
            *(_WORD *)&__s1[8] = v16;
            __s1[10] = BYTE2(v16);
            __s1[11] = BYTE3(v16);
            __s1[12] = BYTE4(v16);
            __s1[13] = BYTE5(v16);
            if (!v90)
            {
LABEL_64:
              uint64_t v93 = v8;
              __int16 v94 = a2;
              char v95 = BYTE2(a2);
              char v96 = BYTE3(a2);
              char v97 = BYTE4(a2);
              char v98 = BYTE5(a2);
              uint64_t v47 = __s1;
              uint64_t v48 = &v93;
              goto LABEL_110;
            }
            if (v90 == 1)
            {
              if (v87 < (int)v8) {
                goto LABEL_135;
              }
              swift_retain();
              uint64_t v25 = __DataStorage._bytes.getter();
              if (!v25)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_152:
                __DataStorage._length.getter();
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                sub_100012A10(v17, v16);
LABEL_166:
                ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x1000102B4);
              }
              uint64_t v26 = v25;
              uint64_t v27 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v27;
              if (__OFSUB__((int)v8, v27)) {
                goto LABEL_140;
              }
LABEL_44:
              uint64_t v36 = __DataStorage._length.getter();
              unint64_t v37 = (const void *)(v26 + v28);
              if (v36 >= v85) {
                size_t v38 = (v8 >> 32) - (int)v8;
              }
              else {
                size_t v38 = v36;
              }
              uint64_t v39 = __s1;
LABEL_63:
              int v46 = memcmp(v39, v37, v38);
              sub_100012A10(v8, a2);
              uint64_t result = sub_100012A10(v17, v16);
LABEL_106:
              uint64_t v13 = v91;
              if (!v46) {
                goto LABEL_166;
              }
              break;
            }
            uint64_t v53 = *(void *)(v8 + 16);
            uint64_t v54 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v55 = (char *)__DataStorage._bytes.getter();
            if (v55)
            {
              uint64_t v56 = __DataStorage._offset.getter();
              if (__OFSUB__(v53, v56)) {
                goto LABEL_145;
              }
              v55 += v53 - v56;
            }
            BOOL v24 = __OFSUB__(v54, v53);
            int64_t v57 = v54 - v53;
            if (v24) {
              goto LABEL_138;
            }
            uint64_t v58 = __DataStorage._length.getter();
            uint64_t v11 = v88;
            if (!v55) {
              goto LABEL_157;
            }
LABEL_88:
            if (v58 >= v57) {
              size_t v62 = v57;
            }
            else {
              size_t v62 = v58;
            }
            int v63 = memcmp(__s1, v55, v62);
            swift_release();
            swift_release();
            uint64_t result = sub_100012A10(v17, v16);
            uint64_t v13 = v91;
            if (!v63) {
              goto LABEL_166;
            }
            break;
        }
LABEL_15:
        a3 = (a3 + 1) & v92;
      }
      while (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
    }
  }
LABEL_125:
  uint64_t v79 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v80 = (uint64_t *)(*(void *)(v79 + 48) + 16 * a3);
  *uint64_t v80 = v8;
  v80[1] = a2;
  uint64_t v81 = *(void *)(v79 + 16);
  BOOL v24 = __OFADD__(v81, 1);
  uint64_t v82 = v81 + 1;
  if (v24)
  {
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
  }
  *(void *)(v79 + 16) = v82;
  return result;
}

void *sub_1000102E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004700(&qword_10017BEA8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_100010588()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017BEE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_100012DE4(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10001073C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100004700(&qword_10017BEA8);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100013148(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100010AEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100004700(&qword_10017BEE0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    sub_100012DE4(v20, v21);
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    uint64_t *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100010DA0(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < 0 || 1 << *(unsigned char *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a6 + 8 * ((unint64_t)a3 >> 6) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a6 + 36) == a4)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(a6 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a3, v11);
    uint64_t v12 = *(void *)(a6 + 56);
    uint64_t v13 = type metadata accessor for DriverBinEntry();
    return sub_100012F8C(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a3, a2, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100010EA4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_100010F2C(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(void *)(v3 + 144) = 0;
  *(void *)(v3 + 152) = _swiftEmptyArrayStorage;
  sub_10000469C(a2, v3 + 16);
  *(void *)(v3 + 104) = a3;
  type metadata accessor for ExtensionManager();
  id v6 = a3;
  sub_1000D5CA8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/KernelManagement_executables/driverkitd/KernelStateManager.swift", 102, 2, 36, a2, 0xD000000000000025, 0x8000000100145850, (void (*)(uint64_t))sub_100013190);
  sub_10000478C(a2);
  *(void *)(v3 + 56) = v8;
  return v3;
}

uint64_t sub_10001100C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100011138(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000111B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v86 = a3;
  uint64_t v89 = a2;
  uint64_t v4 = sub_100004700(&qword_10017BEF0);
  __chkstk_darwin(v4 - 8);
  uint64_t v85 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100004700(&qword_10017BEF8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004700(&qword_10017BF00);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for DriverBinEntry();
  uint64_t v12 = __chkstk_darwin(v87);
  uint64_t v83 = (uint64_t)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v88 = (uint64_t)&v81 - v14;
  uint64_t v95 = type metadata accessor for Logger();
  uint64_t v92 = *(void *)(v95 - 8);
  uint64_t v15 = __chkstk_darwin(v95);
  uint64_t v84 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  int64_t v18 = (char *)&v81 - v17;
  uint64_t v19 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v19 - 8);
  unint64_t v21 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v91 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = *a1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(v94 + 24) + 112))(v96, v24);
  uint64_t v26 = v97;
  if (v97)
  {
    uint64_t v90 = v22;
    uint64_t v27 = v98;
    sub_1000036B0(v96, v97);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v27 + 64);
    uint64_t v29 = v27;
    uint64_t v30 = v90;
    v28(v26, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v30);
    sub_10000478C((uint64_t)v96);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v30) != 1)
    {
      uint64_t v82 = v9;
      BOOL v31 = v91;
      uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v91, v21, v30);
      __chkstk_darwin(v32);
      *(&v81 - 2) = (uint64_t)v31;
      uint64_t v33 = v89;
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_10000CDBC((uint64_t)sub_1000130BC, (uint64_t)(&v81 - 4), v33);
      swift_bridgeObjectRelease();
      sub_1000060E8(v34, (uint64_t)v8);
      swift_release();
      uint64_t v35 = sub_100004700((uint64_t *)&unk_10017EBF0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v8, 1, v35) == 1)
      {
        sub_1000130EC((uint64_t)v8, &qword_10017BEF8);
        (*(void (**)(char *, uint64_t))(v23 + 8))(v31, v30);
        return 1;
      }
      else
      {
        uint64_t v93 = v23;
        uint64_t v46 = (uint64_t)&v8[*(int *)(v35 + 48)];
        uint64_t v47 = v82;
        uint64_t v48 = (uint64_t)&v11[*(int *)(v82 + 48)];
        uint64_t v49 = type metadata accessor for UUID();
        uint64_t v50 = *(void *)(v49 - 8);
        (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v11, v8, v49);
        sub_100012FF4(v46, v48, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        uint64_t v51 = v88;
        sub_100012FF4((uint64_t)&v11[*(int *)(v47 + 48)], v88, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        uint64_t v52 = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v11, v49);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 256))(v52);
        if (result)
        {
          uint64_t v53 = (*(uint64_t (**)(void))(*(void *)result + 216))();
          swift_release();
          uint64_t v54 = *(int *)(v87 + 20);
          uint64_t v55 = type metadata accessor for ApplicationRecord(0);
          uint64_t v56 = v55;
          int64_t v57 = (uint64_t *)(v51 + v54 + *(int *)(v55 + 32));
          uint64_t v58 = *v57;
          unint64_t v59 = v57[1];
          uint64_t v60 = v91;
          uint64_t v61 = (uint64_t)v85;
          if (*(void *)(v53 + 16))
          {
            sub_100012DE4(v58, v59);
            unint64_t v62 = sub_10000CF34(v58, v59);
            uint64_t v64 = *(void *)(v56 - 8);
            if (v63)
            {
              sub_100012F8C(*(void *)(v53 + 56) + *(void *)(*(void *)(v56 - 8) + 72) * v62, v61, type metadata accessor for ApplicationRecord);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v56);
            }
            else
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v61, 1, 1, v56);
            }
          }
          else
          {
            uint64_t v64 = *(void *)(v55 - 8);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v85, 1, 1, v55);
            sub_100012DE4(v58, v59);
          }
          swift_bridgeObjectRelease();
          sub_100012A10(v58, v59);
          int v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v61, 1, v56);
          sub_1000130EC(v61, &qword_10017BEF0);
          if (v65 == 1)
          {
            uint64_t v66 = sub_1000EFDE4();
            uint64_t v67 = v92;
            int64_t v68 = v84;
            uint64_t v69 = v95;
            (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v84, v66, v95);
            uint64_t v70 = v83;
            sub_100012F8C(v51, v83, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
            uint64_t v71 = v94;
            swift_retain_n();
            uint64_t v72 = Logger.logObject.getter();
            os_log_type_t v73 = static os_log_type_t.default.getter();
            LODWORD(v89) = v73;
            if (os_log_type_enabled(v72, v73))
            {
              uint64_t v74 = swift_slowAlloc();
              uint64_t v86 = swift_slowAlloc();
              v96[0] = v86;
              *(_DWORD *)uint64_t v74 = 136315394;
              uint64_t v85 = (char *)(v74 + 4);
              uint64_t v99 = *(void *)(v71 + 24);
              type metadata accessor for OSExtension(0);
              sub_100013148((unint64_t *)&qword_10017BC90, (void (*)(uint64_t))type metadata accessor for OSExtension);
              uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v99 = sub_100003F90(v75, v76, v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v74 + 12) = 2080;
              sub_100013148(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
              uint64_t v77 = v90;
              uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v99 = sub_100003F90(v78, v79, v96);
              uint64_t v80 = v77;
              uint64_t v60 = v91;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10001305C(v70, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
              _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v89, "Omitting third party driver %s at %s: app is not installed", (uint8_t *)v74, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(char *, uint64_t))(v67 + 8))(v84, v95);
              sub_10001305C(v88, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
            }
            else
            {

              sub_10001305C(v70, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
              swift_release_n();
              (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
              sub_10001305C(v51, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
              uint64_t v80 = v90;
            }
            (*(void (**)(char *, uint64_t))(v93 + 8))(v60, v80);
            return 0;
          }
          else
          {
            sub_10001305C(v51, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
            (*(void (**)(char *, uint64_t))(v93 + 8))(v60, v90);
            return 1;
          }
        }
        else
        {
          __break(1u);
        }
      }
      return result;
    }
  }
  else
  {
    sub_1000130EC((uint64_t)v96, &qword_10017BC78);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
  }
  sub_1000130EC((uint64_t)v21, (uint64_t *)&unk_10017FA60);
  uint64_t v37 = sub_1000EFDE4();
  uint64_t v38 = v92;
  uint64_t v39 = v95;
  (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v18, v37, v95);
  uint64_t v40 = v94;
  swift_retain_n();
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t v91 = (char *)(v43 + 4);
    uint64_t v99 = *(void *)(v40 + 24);
    type metadata accessor for OSExtension(0);
    sub_100013148((unint64_t *)&qword_10017BC90, (void (*)(uint64_t))type metadata accessor for OSExtension);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v99 = sub_100003F90(v44, v45, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Omitting driver %s: does not have a bundle", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v95);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v39);
  }
  return 0;
}

void *sub_100011F7C(unint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v6 = a1;
  int64_t v18 = &_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_18:
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7)
    {
LABEL_3:
      unint64_t v8 = 0;
      unint64_t v9 = v6 & 0xC000000000000001;
      unint64_t v15 = v6;
      uint64_t v16 = v6 & 0xFFFFFFFFFFFFFF8;
      uint64_t v14 = v7;
      while (1)
      {
        if (v9)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v11 = v8 + 1;
          if (__OFADD__(v8, 1))
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return a3;
          }
        }
        else
        {
          if (v8 >= *(void *)(v16 + 16))
          {
            __break(1u);
            goto LABEL_18;
          }
          uint64_t v10 = *(void *)(v6 + 8 * v8 + 32);
          swift_retain();
          unint64_t v11 = v8 + 1;
          if (__OFADD__(v8, 1)) {
            goto LABEL_14;
          }
        }
        uint64_t v17 = v10;
        char v12 = sub_1000111B8(&v17, a2, (uint64_t)a3);
        if (v3) {
          goto LABEL_15;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v7 = v14;
          unint64_t v6 = v15;
        }
        else
        {
          swift_release();
        }
        ++v8;
        if (v11 == v7)
        {
          a3 = v18;
          goto LABEL_20;
        }
      }
    }
  }
  a3 = &_swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return a3;
}

void *sub_100012134(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ActiveDriverInfo() - 8;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v34 = (uint64_t)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v39 = (uint64_t)v29 - v13;
  uint64_t result = &_swiftEmptyArrayStorage;
  uint64_t v40 = &_swiftEmptyArrayStorage;
  uint64_t v33 = *(void *)(a1 + 16);
  if (v33)
  {
    v29[1] = v2;
    uint64_t v30 = v6;
    uint64_t v15 = 0;
    unint64_t v31 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v32 = a1 + v31;
    uint64_t v35 = *(void *)(v12 + 72);
    uint64_t v37 = v6 + 16;
    uint64_t v38 = a2 + 56;
    uint64_t v16 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v17 = a2;
    do
    {
      uint64_t v36 = v15;
      sub_100012F8C(v32 + v35 * v15, v39, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
      if (*(void *)(a2 + 16)
        && (sub_100013148(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL),
            uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v19 = -1 << *(unsigned char *)(v17 + 32),
            unint64_t v20 = v18 & ~v19,
            ((*(void *)(v38 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0))
      {
        uint64_t v21 = v17;
        uint64_t v22 = ~v19;
        uint64_t v23 = *(void *)(v30 + 72);
        uint64_t v24 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
        while (1)
        {
          v24(v8, *(void *)(v21 + 48) + v23 * v20, v5);
          sub_100013148(&qword_10017BE98, (void (*)(uint64_t))&type metadata accessor for URL);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v16)(v8, v5);
          if (v25) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v22;
          uint64_t v21 = v17;
          if (((*(void *)(v38 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
            goto LABEL_10;
          }
        }
        sub_10001305C(v39, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
      }
      else
      {
LABEL_10:
        sub_100012FF4(v39, v34, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
        uint64_t v26 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10000C844(0, v26[2] + 1, 1);
          uint64_t v26 = v40;
        }
        unint64_t v28 = v26[2];
        unint64_t v27 = v26[3];
        if (v28 >= v27 >> 1)
        {
          sub_10000C844(v27 > 1, v28 + 1, 1);
          uint64_t v26 = v40;
        }
        void v26[2] = v28 + 1;
        sub_100012FF4(v34, (uint64_t)v26 + v31 + v28 * v35, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
      }
      uint64_t v15 = v36 + 1;
      a2 = v17;
    }
    while (v36 + 1 != v33);
    return v40;
  }
  return result;
}

uint64_t sub_100012544(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100012F38();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_100012DE4(v5, *v4);
      sub_10000E4DC(v7, v5, v6);
      sub_100012A10(v7[0], v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1000125E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100008114(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], a2);
}

uint64_t sub_100012608()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 280))();
  if (result)
  {
    uint64_t active = type metadata accessor for ActiveDriversStateManager();
    sub_1000EA080(0xD000000000000010, (char *)0x8000000100145660, active, &off_10016AA30);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000126A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000126B0()
{
  return swift_release();
}

uint64_t sub_1000126B8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100012700(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v28 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v27 = (char *)v21 - v6;
  uint64_t v7 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_100013148(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    uint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    char v25 = v12;
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    uint64_t v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      sub_10000E1B8(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

uint64_t sub_1000129A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017BC80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100012A10(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t type metadata accessor for KernelStateManager()
{
  return self;
}

uint64_t sub_100012A8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for URL() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100012BE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_100004700((uint64_t *)&unk_10017FA80);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100012CF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100012DE4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

unint64_t sub_100012E3C()
{
  unint64_t result = qword_10017FA50;
  if (!qword_10017FA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FA50);
  }
  return result;
}

unint64_t sub_100012E90()
{
  unint64_t result = qword_10017BEC0;
  if (!qword_10017BEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BEC0);
  }
  return result;
}

unint64_t sub_100012EE4()
{
  unint64_t result = qword_10017BED0;
  if (!qword_10017BED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BED0);
  }
  return result;
}

unint64_t sub_100012F38()
{
  unint64_t result = qword_10017BED8;
  if (!qword_10017BED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BED8);
  }
  return result;
}

uint64_t sub_100012F8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100012FF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001305C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000130BC(uint64_t a1, uint64_t a2)
{
  return sub_100005E54(a1, a2, *(void *)(v2 + 16)) & 1;
}

uint64_t sub_1000130EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100004700(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100013148(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100013190@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  type metadata accessor for ExtensionManager();
  sub_10000469C(v5, (uint64_t)v10);
  sub_10000469C(v5, (uint64_t)v9);
  sub_100004700(&qword_10017BF18);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100132CF0;
  sub_100013318(v4);
  *(_DWORD *)(v6 + 32) = *(_DWORD *)sub_1000B9580();
  *(_DWORD *)(v6 + 36) = *sub_1000B96F0();
  *(_DWORD *)(v6 + 40) = *sub_1000B974C();
  *(_DWORD *)(v6 + 44) = *(_DWORD *)sub_1000B99D0();
  *(_DWORD *)(v6 + 48) = *(_DWORD *)sub_1000B9A88();
  *(_DWORD *)(v6 + 52) = *sub_1000B9A2C();
  *(_DWORD *)(v6 + 56) = *(_DWORD *)sub_1000B9C14();
  sub_100013438();
  sub_100004700(&qword_10017BF20);
  sub_10001348C(&qword_10017DD40, &qword_10017BF20);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_1000835F0(v9, v4, v8, v11);
  uint64_t result = sub_1000BAE20(v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100013318(uint64_t a1)
{
  return a1;
}

unint64_t sub_100013438()
{
  unint64_t result = qword_10017DD30;
  if (!qword_10017DD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DD30);
  }
  return result;
}

uint64_t sub_10001348C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000126B8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000134D4(uint64_t a1, uint64_t a2)
{
  return sub_100013C84(a1, a2, (SEL *)&selRef__overrideExecutablePath);
}

void sub_1000134E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void (*sub_1000134EC(uint64_t **a1))(void *)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_10001354C(v2);
  return sub_100013548;
}

void (*sub_10001354C(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = (uint64_t)v1;
  id v3 = [v1 _overrideExecutablePath];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  return sub_1000135D4;
}

void sub_1000135D4(uint64_t a1, char a2)
{
}

id sub_1000135E0()
{
  return [*v0 executionOptions];
}

id sub_1000135F0(uint64_t a1)
{
  return [*v1 setExecutionOptions:a1];
}

id (*sub_100013604(void *a1))(uint64_t a1)
{
  id v3 = *v1;
  a1[1] = *v1;
  *a1 = [v3 executionOptions];
  return sub_100013658;
}

id sub_100013658(uint64_t a1)
{
  return [*(id *)(a1 + 8) setExecutionOptions:*(void *)a1];
}

uint64_t sub_10001366C()
{
  id v1 = [*v0 arguments];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1000136C8(uint64_t a1)
{
  uint64_t v2 = *v1;
  if (a1)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  [v2 setArguments:isa];
}

void (*sub_100013748(uint64_t **a1))(void *)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_1000137A4(v2);
  return sub_100013548;
}

void (*sub_1000137A4(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  id v3 = [v1 arguments];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a1 = v5;
  return sub_10001382C;
}

void sub_10001382C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  if (a2)
  {
    if (v3)
    {
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      Class isa = 0;
    }
    [(id)a1[1] setArguments:isa];
    swift_bridgeObjectRelease();
  }
  else if (v3)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [(id)a1[1] setArguments:isa];
  }
  else
  {
    Class isa = 0;
    [(id)a1[1] setArguments:0];
  }
}

uint64_t sub_1000138F8()
{
  id v1 = [*v0 _additionalEnvironment];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_100013968(uint64_t a1)
{
  uint64_t v2 = *v1;
  if (a1)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  [v2 _setAdditionalEnvironment:isa];
}

void (*sub_1000139FC(uint64_t **a1))(void *)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_100013A58(v2);
  return sub_100013548;
}

void (*sub_100013A58(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  id v3 = [v1 _additionalEnvironment];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a1 = v5;
  return sub_100013AF4;
}

void sub_100013AF4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  if (a2)
  {
    if (v3)
    {
      swift_bridgeObjectRetain();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      Class isa = 0;
    }
    [(id)a1[1] _setAdditionalEnvironment:isa];
    swift_bridgeObjectRelease();
  }
  else if (v3)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [(id)a1[1] _setAdditionalEnvironment:isa];
  }
  else
  {
    Class isa = 0;
    [(id)a1[1] _setAdditionalEnvironment:0];
  }
}

id sub_100013BE8()
{
  return [*v0 dextCheckInPort];
}

id sub_100013BF8(uint64_t a1)
{
  return [*v1 setDextCheckInPort:a1];
}

id (*sub_100013C0C(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = [v3 dextCheckInPort];
  return sub_100013C60;
}

id sub_100013C60(uint64_t a1)
{
  return [*(id *)a1 setDextCheckInPort:*(unsigned int *)(a1 + 8)];
}

uint64_t sub_100013C78(uint64_t a1, uint64_t a2)
{
  return sub_100013C84(a1, a2, (SEL *)&selRef_bundleIdentifier);
}

uint64_t sub_100013C84(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void sub_100013CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100013CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v7 = *v5;
  if (a2)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v8 = 0;
  }
  [v7 *a5:v8];
}

void (*sub_100013D6C(uint64_t **a1))(void *)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_100013DC8(v2);
  return sub_100013548;
}

void (*sub_100013DC8(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = (uint64_t)v1;
  id v3 = [v1 bundleIdentifier];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  return sub_100013E50;
}

void sub_100013E50(uint64_t a1, char a2)
{
}

void sub_100013E5C(uint64_t a1, char a2, SEL *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (a2)
  {
    if (v5)
    {
      swift_bridgeObjectRetain();
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v6 = 0;
    }
    [*(id *)(a1 + 16) *a3 v6];
    swift_bridgeObjectRelease();
  }
  else if (v5)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [*(id *)(a1 + 16) *a3:v6];
  }
  else
  {
    NSString v6 = 0;
    [*(id *)(a1 + 16) *a3];
  }
}

id sub_100013F2C()
{
  return sub_100013F50();
}

id sub_100013F50()
{
  id v3 = 0;
  if ([v0 execute:&v3]) {
    return v3;
  }
  id v2 = v3;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t sub_100013FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017BF28);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32);

  return v5(v4, v4, a1);
}

uint64_t sub_100014064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000469C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100004700(&qword_10017BF28);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_10000478C(a1);
}

uint64_t sub_1000140E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v6 = sub_1000045E8(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_10000464C(a1, v7);
  return sub_100014064((uint64_t)v10, v7, v8);
}

uint64_t sub_100014178@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 identityForDextWithServerName:v4 tagString:v5 containingAppBundleID:v6];

  uint64_t result = sub_10000483C(0, &qword_10017BF30);
  a1[3] = result;
  a1[4] = &off_10016A390;
  *a1 = v7;
  return result;
}

uint64_t sub_100014250@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_10000469C(a1, (uint64_t)v6);
  sub_100004700(&qword_10017BF38);
  sub_10000483C(0, &qword_10017BF30);
  swift_dynamicCast();
  uint64_t v3 = v7;
  id v4 = [self contextWithIdentity:v7];

  uint64_t result = sub_10000483C(0, &qword_10017BF40);
  a2[3] = result;
  a2[4] = &off_10016A398;
  *a2 = v4;
  return result;
}

uint64_t sub_100014330@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_10000469C(a1, (uint64_t)v6);
  sub_100004700(&qword_10017BF48);
  sub_10000483C(0, &qword_10017BF40);
  swift_dynamicCast();
  uint64_t v3 = v7;
  id v4 = [objc_allocWithZone((Class)RBSLaunchRequest) initWithContext:v7];

  uint64_t result = sub_10000483C(0, &qword_10017BF50);
  a2[3] = result;
  a2[4] = &off_10016A430;
  *a2 = v4;
  return result;
}

uint64_t sub_100014408()
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v0 = 0xD00000000000004ELL;
  *(void *)(v0 + 8) = 0x8000000100145880;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 50;
  return swift_willThrow();
}

uint64_t sub_1000144A8(uint64_t a1)
{
  return sub_100014508(a1, 0xD000000000000031, 0x80000001001458D0);
}

uint64_t sub_1000144D8(uint64_t a1)
{
  return sub_100014508(a1, 0xD000000000000030, 0x8000000100145910);
}

uint64_t sub_100014508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v5 = a2;
  *(void *)(v5 + 8) = a3;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(void *)(v5 + 64) = 0;
  *(unsigned char *)(v5 + 72) = 50;
  return swift_willThrow();
}

uint64_t sub_1000145A0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t sub_1000145E4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t sub_100014628()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t type metadata accessor for NullRunningBoardSupport()
{
  return self;
}

uint64_t sub_100014690(uint64_t a1, unint64_t a2)
{
  sub_100014714(a1, a2);
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100014AB8();
  uint64_t v2 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v2;
}

void *sub_100014714(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  uint64_t v3 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_43;
      }
      uint64_t v4 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (!v4) {
        return v3;
      }
      uint64_t v29 = _swiftEmptyArrayStorage;
      int64_t v7 = v4 & ~(v4 >> 63);
      sub_10000C884(0, v7, 0);
      uint64_t v3 = _swiftEmptyArrayStorage;
      if (v2)
      {
        if (v2 == 1) {
          uint64_t v8 = (int)a1;
        }
        else {
          uint64_t v8 = *(void *)(a1 + 16);
        }
        if (v4 < 0)
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
        }
      }
      else
      {
        if (v4 < 0) {
          goto LABEL_45;
        }
        uint64_t v8 = 0;
      }
      int v25 = v2;
      do
      {
        if (!v7)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v2)
        {
          if (v2 == 1)
          {
            if (v8 < (int)a1 || v8 >= a1 >> 32) {
              goto LABEL_36;
            }
            uint64_t v9 = __DataStorage._bytes.getter();
            if (!v9) {
              goto LABEL_46;
            }
            uint64_t v10 = v9;
            uint64_t v11 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v11;
            if (__OFSUB__(v8, v11)) {
              goto LABEL_39;
            }
          }
          else
          {
            if (v8 < *(void *)(a1 + 16)) {
              goto LABEL_38;
            }
            if (v8 >= *(void *)(a1 + 24)) {
              goto LABEL_40;
            }
            uint64_t v14 = __DataStorage._bytes.getter();
            if (!v14) {
              goto LABEL_47;
            }
            uint64_t v10 = v14;
            uint64_t v15 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v15;
            if (__OFSUB__(v8, v15)) {
              goto LABEL_41;
            }
          }
          char v13 = *(unsigned char *)(v10 + v12);
        }
        else
        {
          if (v8 >= BYTE6(a2)) {
            goto LABEL_37;
          }
          uint64_t v26 = a1;
          int v27 = a2;
          __int16 v28 = WORD2(a2);
          char v13 = *((unsigned char *)&v26 + v8);
        }
        sub_100004700((uint64_t *)&unk_10017D6E0);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_100132F10;
        *(void *)(v16 + 56) = &type metadata for UInt8;
        *(void *)(v16 + 64) = &protocol witness table for UInt8;
        *(unsigned char *)(v16 + 32) = v13;
        unint64_t v2 = String.init(format:_:)();
        uint64_t v18 = v17;
        uint64_t v29 = v3;
        unint64_t v20 = v3[2];
        unint64_t v19 = v3[3];
        if (v20 >= v19 >> 1)
        {
          sub_10000C884(v19 > 1, v20 + 1, 1);
          uint64_t v3 = v29;
        }
        v3[2] = v20 + 1;
        uint64_t v21 = &v3[2 * v20];
        v21[4] = v2;
        v21[5] = v18;
        ++v8;
        --v7;
        --v4;
        LODWORD(v2) = v25;
      }
      while (v4);
      return v3;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_6;
      }
      goto LABEL_44;
    case 3uLL:
      return v3;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_100014AB8()
{
  unint64_t result = qword_10017FA90;
  if (!qword_10017FA90)
  {
    sub_1000126B8((uint64_t *)&unk_10017E5D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FA90);
  }
  return result;
}

uint64_t sub_100014B14(uint64_t a1, unint64_t a2)
{
  uint64_t result = swift_bridgeObjectRetain();
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_35:
    uint64_t v32 = a1;
    uint64_t v33 = a2 & 0xFFFFFFFFFFFFFFLL;
    if ((a2 & 0x100000000000000) == 0)
    {
      uint64_t v22 = HIBYTE(a2) & 0xF;
      uint64_t v23 = sub_1000153D4((unint64_t)v22 >> 1);
      uint64_t v30 = v23;
      unint64_t v31 = v24;
      if (!v22)
      {
        uint64_t v13 = v23;
        goto LABEL_55;
      }
      uint64_t v25 = 0;
      while (1)
      {
        uint64_t v26 = __OFADD__(v25, 2) ? 0x7FFFFFFFFFFFFFFFLL : v25 + 2;
        char v27 = *((unsigned char *)&v32 + v25);
        if ((v27 - 58) < 0xF6u
          && (v27 - 103) <= 0xF9u
          && (v27 - 71) < 0xFAu)
        {
          break;
        }
        char v28 = *((unsigned char *)&v32 + v25 + 1);
        if ((v28 - 58) <= 0xF5u
          && (v28 - 103) <= 0xF9u
          && (v28 - 71) < 0xFAu)
        {
          break;
        }
        Data._Representation.subscript.setter();
        uint64_t v25 = v26;
        if (v26 >= v22)
        {
          uint64_t v13 = v30;
          goto LABEL_55;
        }
      }
      uint64_t v18 = v30;
      unint64_t v19 = v31;
      goto LABEL_53;
    }
    goto LABEL_54;
  }
  a1 = sub_100014E6C();
  unint64_t v21 = v20;
  uint64_t result = swift_bridgeObjectRelease();
  a2 = v21;
  if ((v21 & 0x2000000000000000) != 0) {
    goto LABEL_35;
  }
LABEL_3:
  if ((a1 & 0x1000000000000000) != 0)
  {
    uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    if ((a1 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_54:
    uint64_t v13 = 0;
    goto LABEL_55;
  }
  uint64_t result = _StringObject.sharedUTF8.getter();
  uint64_t v5 = result;
  uint64_t v6 = v29;
  if (v29) {
    goto LABEL_54;
  }
LABEL_5:
  if (v6 >= 0) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v6 + 1;
  }
  if ((unint64_t)v6 < 2)
  {
    unint64_t v8 = 0xC000000000000000;
    goto LABEL_15;
  }
  uint64_t v9 = v7 >> 1;
  if (v6 > 29)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    uint64_t v10 = __DataStorage.init(length:)();
    if ((unint64_t)v6 >= 0xFFFFFFFE)
    {
      type metadata accessor for Data.RangeReference();
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = v9;
      unint64_t v12 = 0x8000000000000000;
    }
    else
    {
      uint64_t v11 = v9 << 32;
      unint64_t v12 = 0x4000000000000000;
    }
    uint64_t v32 = v11;
    uint64_t v33 = v12 | v10;
LABEL_19:
    uint64_t v14 = 0;
    while (1)
    {
      uint64_t v15 = __OFADD__(v14, 2) ? 0x7FFFFFFFFFFFFFFFLL : v14 + 2;
      char v16 = *(unsigned char *)(v5 + v14);
      if ((v16 - 58) < 0xF6u
        && (v16 - 103) <= 0xF9u
        && (v16 - 71) < 0xFAu)
      {
        break;
      }
      char v17 = *(unsigned char *)(v14 + v5 + 1);
      if ((v17 - 58) <= 0xF5u
        && (v17 - 103) <= 0xF9u
        && (v17 - 71) < 0xFAu)
      {
        break;
      }
      Data._Representation.subscript.setter();
      uint64_t v14 = v15;
      if (v15 >= v6)
      {
        uint64_t v13 = v32;
        goto LABEL_55;
      }
    }
    uint64_t v18 = v32;
    unint64_t v19 = v33;
LABEL_53:
    sub_100012A10(v18, v19);
    goto LABEL_54;
  }
  if (v6 >= -1)
  {
    unint64_t v8 = (unint64_t)(v7 >> 1) << 48;
LABEL_15:
    uint64_t v32 = 0;
    uint64_t v33 = v8;
    if (v6 <= 0)
    {
      uint64_t v13 = 0;
LABEL_55:
      swift_bridgeObjectRelease();
      return v13;
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_100014E6C()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_100014EEC(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100014EEC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_100015044(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          uint64_t v11 = sub_100004430(v9, 0),
          unint64_t v12 = sub_100015144((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_100015044(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_100015358(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_100015358(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_100015144(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_100015358(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_100015358(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100015358(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_1000153D4(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for TelemetryReportExtension(uint64_t a1)
{
  return sub_1000192DC(a1, (uint64_t *)&unk_100181100);
}

unint64_t sub_100015494(char a1)
{
  unint64_t result = 0xD00000000000001ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 4:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    case 7:
      unint64_t result = 0xD000000000000018;
      break;
    case 8:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 10:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 11:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 12:
      unint64_t result = 0xD000000000000015;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 14:
      unint64_t result = 0xD000000000000022;
      break;
    case 15:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000155FC(char a1)
{
  unint64_t result = 0xD00000000000001ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 4:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    case 7:
      unint64_t result = 0xD000000000000018;
      break;
    case 8:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 10:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 11:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 12:
      unint64_t result = 0xD000000000000015;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 14:
      unint64_t result = 0xD000000000000022;
      break;
    case 15:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100015764(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100015494(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100015494(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1000157F0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100015494(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100015854()
{
  sub_100015494(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000158A8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100015494(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100015908@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000187D4(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100015938@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100015494(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100015964()
{
  return sub_1000155FC(*v0);
}

unint64_t sub_10001596C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000187D4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100015994()
{
  return 0;
}

void sub_1000159A0(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_1000159AC(uint64_t a1)
{
  unint64_t v2 = sub_10001905C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000159E8(uint64_t a1)
{
  unint64_t v2 = sub_10001905C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100015A24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (*v82)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t result;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void v98[3];
  uint64_t v99;
  uint64_t v100;

  uint64_t v95 = a2;
  char v96 = a3;
  uint64_t v6 = sub_100004700(&qword_10017C008);
  __chkstk_darwin(v6 - 8);
  uint64_t v94 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(uint64_t (**)(uint64_t))(**(void **)(a1 + 24) + 144);
  uint64_t v13 = swift_retain();
  uint64_t v14 = v12(v13);
  uint64_t v16 = v15;
  swift_release();
  *(void *)a4 = v14;
  *(void *)(a4 + 8) = v16;
  unint64_t v17 = *(uint64_t (**)(uint64_t))(**(void **)(a1 + 24) + 184);
  uint64_t v18 = swift_retain();
  uint64_t v19 = v17(v18);
  uint64_t v21 = v20;
  uint64_t v22 = swift_release();
  *(void *)(a4 + 16) = v19;
  *(void *)(a4 + 24) = v21;
  (*(void (**)(void *__return_ptr, uint64_t))(**(void **)(a1 + 24) + 112))(v98, v22);
  uint64_t v23 = v99;
  if (v99)
  {
    uint64_t v24 = v100;
    sub_1000036B0(v98, v99);
    (*(void (**)(uint64_t, uint64_t))(v24 + 64))(v23, v24);
    uint64_t v25 = URL.lastPathComponent.getter();
    uint64_t v23 = v26;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v27 = sub_10000478C((uint64_t)v98);
  }
  else
  {
    uint64_t v27 = sub_1000130EC((uint64_t)v98, &qword_10017BC78);
    uint64_t v25 = 0;
  }
  *(void *)(a4 + 32) = v25;
  *(void *)(a4 + 40) = v23;
  (*(void (**)(void *__return_ptr, uint64_t))(**(void **)(a1 + 24) + 112))(v98, v27);
  uint64_t v28 = v99;
  if (v99)
  {
    uint64_t v29 = v100;
    sub_1000036B0(v98, v99);
    (*(void (**)(uint64_t, uint64_t))(v29 + 64))(v28, v29);
    uint64_t v30 = URL.path.getter();
    uint64_t v28 = v31;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v32 = sub_10000478C((uint64_t)v98);
  }
  else
  {
    uint64_t v32 = sub_1000130EC((uint64_t)v98, &qword_10017BC78);
    uint64_t v30 = 0;
  }
  *(void *)(a4 + 48) = v30;
  *(void *)(a4 + 56) = v28;
  (*(void (**)(void *__return_ptr, uint64_t))(**(void **)(a1 + 24) + 112))(v98, v32);
  uint64_t v33 = v99;
  uint64_t v92 = v9;
  uint64_t v93 = v8;
  if (v99)
  {
    uint64_t v34 = v100;
    sub_1000036B0(v98, v99);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 56))(v33, v34);
    uint64_t v33 = v36;
    sub_10000478C((uint64_t)v98);
  }
  else
  {
    sub_1000130EC((uint64_t)v98, &qword_10017BC78);
    uint64_t v35 = 0;
  }
  uint64_t v37 = v96;
  *(void *)(a4 + 64) = v35;
  *(void *)(a4 + 72) = v33;
  uint64_t v38 = *(uint64_t (**)(uint64_t))(**(void **)(a1 + 24) + 216);
  uint64_t v39 = swift_retain();
  char v40 = v38(v39);
  swift_release();
  *(unsigned char *)(a4 + 80) = v40 & 1;
  sub_10001BA68(a1 + 32, (uint64_t)v98, &qword_10017C010);
  uint64_t v41 = v99;
  if (v99)
  {
    uint64_t v42 = v100;
    sub_1000036B0(v98, v99);
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 32))(v41, v42);
    unint64_t v45 = v44;
    uint64_t v46 = sub_1000F9B9C();
    uint64_t v41 = v47;
    sub_100012A10(v43, v45);
    sub_10000478C((uint64_t)v98);
  }
  else
  {
    sub_1000130EC((uint64_t)v98, &qword_10017C010);
    uint64_t v46 = 0;
  }
  *(void *)(a4 + 88) = v46;
  *(void *)(a4 + 96) = v41;
  sub_10001BA68(a1 + 32, (uint64_t)v98, &qword_10017C010);
  uint64_t v48 = v99;
  if (v99)
  {
    uint64_t v49 = v100;
    sub_1000036B0(v98, v99);
    uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 24))(v48, v49);
    unint64_t v52 = v51;
    uint64_t v53 = sub_1000F9110(v50, v51);
    uint64_t v48 = v54;
    sub_100018888(v50, v52);
    sub_10000478C((uint64_t)v98);
  }
  else
  {
    sub_1000130EC((uint64_t)v98, &qword_10017C010);
    uint64_t v53 = 0;
  }
  uint64_t v55 = (uint64_t)v94;
  *(void *)(a4 + 104) = v53;
  *(void *)(a4 + 112) = v48;
  sub_10001BA68(a1 + 32, (uint64_t)v98, &qword_10017C010);
  uint64_t v56 = v99;
  if (v99)
  {
    uint64_t v57 = v100;
    sub_1000036B0(v98, v99);
    uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 48))(v56, v57);
    uint64_t v56 = v59;
    sub_10000478C((uint64_t)v98);
  }
  else
  {
    sub_1000130EC((uint64_t)v98, &qword_10017C010);
    uint64_t v58 = 0;
  }
  *(void *)(a4 + 120) = v58;
  *(void *)(a4 + 128) = v56;
  sub_10001BA68(a1 + 32, (uint64_t)v98, &qword_10017C010);
  uint64_t v60 = v99;
  if (v99)
  {
    uint64_t v61 = v100;
    sub_1000036B0(v98, v99);
    uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 56))(v60, v61);
    uint64_t v60 = v63;
    sub_10000478C((uint64_t)v98);
  }
  else
  {
    sub_1000130EC((uint64_t)v98, &qword_10017C010);
    uint64_t v62 = 0;
  }
  *(void *)(a4 + 136) = v62;
  *(void *)(a4 + 144) = v60;
  sub_10001BA68(a1 + 32, (uint64_t)v98, &qword_10017C010);
  uint64_t v64 = v99;
  if (v99)
  {
    uint64_t v65 = v100;
    sub_1000036B0(v98, v99);
    (*(void (**)(uint64_t, uint64_t))(v65 + 64))(v64, v65);
    sub_10000478C((uint64_t)v98);
  }
  else
  {
    sub_1000130EC((uint64_t)v98, &qword_10017C010);
    uint64_t v66 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v55, 1, 1, v66);
  }
  uint64_t v67 = v95;
  int64_t v68 = (int *)type metadata accessor for TelemetryReportExtension(0);
  sub_100018820(v55, a4 + v68[14]);
  switch(*(unsigned char *)(a1 + 72))
  {
    case 1:
      uint64_t v70 = (unint64_t *)(a4 + v68[15]);
      unint64_t v71 = 0xD00000000000001ALL;
      uint64_t v72 = "Apple kext with Apple root";
      goto LABEL_32;
    case 2:
      *(_OWORD *)(a4 + v68[15]) = xmmword_100132F20;
      break;
    case 3:
      uint64_t v70 = (unint64_t *)(a4 + v68[15]);
      unint64_t v71 = 0xD000000000000021;
      uint64_t v72 = "3rd-party kext without Apple root";
      goto LABEL_32;
    case 4:
      uint64_t v70 = (unint64_t *)(a4 + v68[15]);
      unint64_t v71 = 0xD00000000000001ELL;
      uint64_t v72 = "3rd-party kext with Apple root";
      goto LABEL_32;
    case 5:
      uint64_t v70 = (unint64_t *)(a4 + v68[15]);
      unint64_t v71 = 0xD000000000000026;
      uint64_t v72 = "3rd-party kext with devid+ certificate";
LABEL_32:
      *uint64_t v70 = v71;
      v70[1] = (unint64_t)(v72 - 32) | 0x8000000000000000;
      break;
    default:
      uint64_t v69 = (void *)(a4 + v68[15]);
      *uint64_t v69 = 0;
      v69[1] = 0;
      break;
  }
  uint64_t v73 = *(void *)(a1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches);
  if (v73)
  {
    *(unsigned char *)(a4 + v68[16]) = *(void *)(v73 + 16) > 1uLL;
    v98[0] = v73;
    swift_bridgeObjectRetain();
    sub_100004700((uint64_t *)&unk_10017E5D0);
    sub_100014AB8();
    uint64_t v74 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v76 = v75;
    swift_bridgeObjectRelease();
    uint64_t v77 = (uint64_t *)(a4 + v68[17]);
    *uint64_t v77 = v74;
    v77[1] = v76;
  }
  else
  {
    *(unsigned char *)(a4 + v68[16]) = 2;
    uint64_t v78 = (void *)(a4 + v68[17]);
    void *v78 = 0;
    v78[1] = 0;
  }
  unint64_t v79 = (uint64_t *)sub_1000A1368();
  uint64_t v80 = *v79;
  uint64_t v81 = v79[1];
  uint64_t v82 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312);
  swift_bridgeObjectRetain();
  v82(v98, v67, v37, v80, v81);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v99)
  {
    sub_100004700((uint64_t *)&unk_10017FA80);
    uint64_t v83 = swift_dynamicCast();
    if (v83)
    {
      if (*(void *)(v97 + 16) >= 2uLL)
      {
        uint64_t v84 = sub_1000186EC(v97);
        uint64_t v83 = swift_bridgeObjectRelease();
        goto LABEL_43;
      }
      uint64_t v83 = swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v83 = sub_1000130EC((uint64_t)v98, &qword_10017C018);
  }
  uint64_t v84 = 0;
LABEL_43:
  *(void *)(a4 + v68[18]) = v84;
  (*(void (**)(void *__return_ptr, uint64_t))(**(void **)(a1 + 24) + 112))(v98, v83);
  uint64_t v85 = v99;
  if (v99)
  {
    uint64_t v86 = v100;
    sub_1000036B0(v98, v99);
    (*(void (**)(uint64_t, uint64_t))(v86 + 64))(v85, v86);
    uint64_t v87 = URL.path.getter();
    uint64_t v85 = v88;
    swift_release();
    (*(void (**)(char *, uint64_t))(v92 + 8))(v11, v93);
    unint64_t result = sub_10000478C((uint64_t)v98);
  }
  else
  {
    swift_release();
    unint64_t result = sub_1000130EC((uint64_t)v98, &qword_10017BC78);
    uint64_t v87 = 0;
  }
  uint64_t v90 = (uint64_t *)(a4 + v68[19]);
  *uint64_t v90 = v87;
  v90[1] = v85;
  return result;
}

unint64_t sub_100016424()
{
  char v1 = v0;
  uint64_t v2 = sub_100004700(&qword_10017C008);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = sub_100016BFC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v10 = *v1;
  uint64_t v11 = v1[1];
  uint64_t v60 = &type metadata for String;
  *(void *)&long long v59 = v10;
  *((void *)&v59 + 1) = v11;
  sub_10001889C(&v59, v58);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v57 = v9;
  sub_100018144(v58, 0xD00000000000001ALL, 0x8000000100145980, isUniquelyReferenced_nonNull_native);
  unint64_t v13 = v57;
  swift_bridgeObjectRelease();
  uint64_t v14 = v1[3];
  if (v14)
  {
    uint64_t v15 = v1[2];
    uint64_t v60 = &type metadata for String;
    *(void *)&long long v59 = v15;
    *((void *)&v59 + 1) = v14;
    sub_10001889C(&v59, v58);
    swift_bridgeObjectRetain();
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD000000000000019, 0x80000001001459A0, v16);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = v1[5];
  if (v17)
  {
    uint64_t v18 = v1[4];
    uint64_t v60 = &type metadata for String;
    *(void *)&long long v59 = v18;
    *((void *)&v59 + 1) = v17;
    sub_10001889C(&v59, v58);
    swift_bridgeObjectRetain();
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD00000000000001ALL, 0x80000001001459C0, v19);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = v1[7];
  if (v20)
  {
    uint64_t v21 = v1[6];
    uint64_t v60 = &type metadata for String;
    *(void *)&long long v59 = v21;
    *((void *)&v59 + 1) = v20;
    sub_10001889C(&v59, v58);
    swift_bridgeObjectRetain();
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD00000000000001ALL, 0x80000001001459E0, v22);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  uint64_t v23 = v1[9];
  if (v23)
  {
    uint64_t v24 = v1[8];
    uint64_t v60 = &type metadata for String;
    *(void *)&long long v59 = v24;
    *((void *)&v59 + 1) = v23;
    sub_10001889C(&v59, v58);
    swift_bridgeObjectRetain();
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD00000000000001ELL, 0x8000000100145A00, v25);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  int v26 = *((unsigned __int8 *)v1 + 80);
  if (v26 != 2)
  {
    uint64_t v60 = &type metadata for Bool;
    LOBYTE(v59) = v26 & 1;
    sub_10001889C(&v59, v58);
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD00000000000001ALL, 0x8000000100145A20, v27);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  uint64_t v28 = v1[12];
  if (v28)
  {
    uint64_t v29 = v1[11];
    uint64_t v60 = &type metadata for String;
    *(void *)&long long v59 = v29;
    *((void *)&v59 + 1) = v28;
    sub_10001889C(&v59, v58);
    swift_bridgeObjectRetain();
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD000000000000016, 0x8000000100145A40, v30);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  uint64_t v31 = v1[14];
  if (v31)
  {
    uint64_t v32 = v1[13];
    uint64_t v60 = &type metadata for String;
    *(void *)&long long v59 = v32;
    *((void *)&v59 + 1) = v31;
    sub_10001889C(&v59, v58);
    swift_bridgeObjectRetain();
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD000000000000018, 0x8000000100145A60, v33);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  uint64_t v34 = v1[16];
  if (v34)
  {
    uint64_t v35 = v1[15];
    uint64_t v60 = &type metadata for String;
    *(void *)&long long v59 = v35;
    *((void *)&v59 + 1) = v34;
    sub_10001889C(&v59, v58);
    swift_bridgeObjectRetain();
    char v36 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD00000000000001BLL, 0x8000000100145A80, v36);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  uint64_t v37 = v1[18];
  if (v37)
  {
    uint64_t v38 = v1[17];
    uint64_t v60 = &type metadata for String;
    *(void *)&long long v59 = v38;
    *((void *)&v59 + 1) = v37;
    sub_10001889C(&v59, v58);
    swift_bridgeObjectRetain();
    char v39 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD00000000000001ALL, 0x8000000100145AA0, v39);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  char v40 = (int *)type metadata accessor for TelemetryReportExtension(0);
  sub_10001BA68((uint64_t)v1 + v40[14], (uint64_t)v4, &qword_10017C008);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000130EC((uint64_t)v4, &qword_10017C008);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    uint64_t v60 = (void *)v5;
    uint64_t v41 = sub_1000045E8((uint64_t *)&v59);
    (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 16))(v41, v8, v5);
    sub_10001889C(&v59, v58);
    char v42 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD00000000000001DLL, 0x8000000100145AC0, v42);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v43 = (uint64_t *)((char *)v1 + v40[15]);
  uint64_t v44 = v43[1];
  if (v44)
  {
    uint64_t v45 = *v43;
    uint64_t v60 = &type metadata for String;
    *(void *)&long long v59 = v45;
    *((void *)&v59 + 1) = v44;
    sub_10001889C(&v59, v58);
    swift_bridgeObjectRetain();
    char v46 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD00000000000001FLL, 0x8000000100145AE0, v46);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  int v47 = *((unsigned __int8 *)v1 + v40[16]);
  if (v47 != 2)
  {
    uint64_t v60 = &type metadata for Bool;
    LOBYTE(v59) = v47 & 1;
    sub_10001889C(&v59, v58);
    char v48 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD000000000000015, 0x8000000100145B00, v48);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  uint64_t v49 = (uint64_t *)((char *)v1 + v40[17]);
  uint64_t v50 = v49[1];
  if (v50)
  {
    uint64_t v51 = *v49;
    uint64_t v60 = &type metadata for String;
    *(void *)&long long v59 = v51;
    *((void *)&v59 + 1) = v50;
    sub_10001889C(&v59, v58);
    swift_bridgeObjectRetain();
    char v52 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD00000000000001ELL, 0x8000000100145B20, v52);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  uint64_t v53 = *(uint64_t *)((char *)v1 + v40[18]);
  if (v53)
  {
    uint64_t v60 = (void *)sub_100004700((uint64_t *)&unk_10017E5D0);
    *(void *)&long long v59 = v53;
    sub_10001889C(&v59, v58);
    swift_bridgeObjectRetain();
    char v54 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v13;
    sub_100018144(v58, 0xD000000000000022, 0x8000000100145B40, v54);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease();
  }
  return v13;
}

unint64_t sub_100016BFC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017C248);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10001BA68(v6, (uint64_t)&v15, (uint64_t *)&unk_10017DE70);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000048E0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10001889C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100016D38(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004700(&qword_10017C020);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000036B0(a1, a1[3]);
  sub_10001905C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v9 = type metadata accessor for TelemetryReportExtension(0);
    LOBYTE(v12) = 10;
    type metadata accessor for Date();
    sub_10001BA24(&qword_10017C030);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 72));
    v11[7] = 14;
    sub_100004700((uint64_t *)&unk_10017E5D0);
    sub_1000190B0(&qword_10017C038);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100017178@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004700(&qword_10017C008);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100004700(&qword_10017C040);
  uint64_t v8 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  char v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = (int *)type metadata accessor for TelemetryReportExtension(0);
  __chkstk_darwin(v37);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v38 = a1;
  sub_1000036B0(a1, v13);
  sub_10001905C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000478C((uint64_t)v38);
  }
  uint64_t v34 = a2;
  uint64_t v35 = v7;
  LOBYTE(v40) = 0;
  *(void *)uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v12 + 1) = v14;
  LOBYTE(v40) = 1;
  *((void *)v12 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 3) = v15;
  LOBYTE(v40) = 2;
  *((void *)v12 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 5) = v16;
  LOBYTE(v40) = 3;
  *((void *)v12 + 6) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 7) = v17;
  LOBYTE(v40) = 4;
  *((void *)v12 + 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 9) = v18;
  LOBYTE(v40) = 5;
  v12[80] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v40) = 6;
  *((void *)v12 + 11) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 12) = v19;
  LOBYTE(v40) = 7;
  *((void *)v12 + 13) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 14) = v20;
  LOBYTE(v40) = 8;
  *((void *)v12 + 15) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 16) = v21;
  LOBYTE(v40) = 9;
  *((void *)v12 + 17) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 18) = v22;
  type metadata accessor for Date();
  LOBYTE(v40) = 10;
  sub_10001BA24(&qword_10017C048);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100018820((uint64_t)v35, (uint64_t)&v12[v37[14]]);
  LOBYTE(v40) = 11;
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v24 = (uint64_t *)&v12[v37[15]];
  *uint64_t v24 = v23;
  v24[1] = v25;
  LOBYTE(v40) = 12;
  v12[v37[16]] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v40) = 13;
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v27 = (uint64_t *)&v12[v37[17]];
  *char v27 = v26;
  v27[1] = v28;
  sub_100004700((uint64_t *)&unk_10017E5D0);
  char v39 = 14;
  sub_1000190B0((unint64_t *)&qword_10017C050);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(void *)&v12[v37[18]] = v40;
  LOBYTE(v40) = 15;
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v31 = v30;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v36);
  uint64_t v32 = (uint64_t *)&v12[v37[19]];
  *uint64_t v32 = v29;
  v32[1] = v31;
  sub_100019114((uint64_t)v12, v34);
  sub_10000478C((uint64_t)v38);
  return sub_100019178((uint64_t)v12);
}

uint64_t sub_100017A08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100017178(a1, a2);
}

uint64_t sub_100017A20(void *a1)
{
  return sub_100016D38(a1);
}

uint64_t ApprovalSettingsStateEntry.usageText.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_100017A6C()
{
  return sub_1000191D4(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_100017A7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_100017AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v15[3] = &type metadata for DriverInstallEvent;
  v15[4] = &off_10016A648;
  uint64_t v12 = (void *)swift_allocObject();
  v15[0] = v12;
  v12[2] = a1;
  uint64_t v12[3] = a2;
  v12[4] = a3;
  v12[5] = a4;
  v12[6] = 0xD00000000000001ELL;
  v12[7] = 0x8000000100145C30;
  uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t))(a6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v15, a5, a6);
  return sub_10000478C((uint64_t)v15);
}

uint64_t sub_100017B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100017C44(a1, a2, a3, a4, a5, type metadata accessor for DriverApprovalEvent, (uint64_t)&off_10016A660, 0xD00000000000001FLL, 0x8000000100145C50);
}

uint64_t sub_100017BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100017C44(a1, a2, a3, a4, a5, type metadata accessor for DriverLaunchEvent, (uint64_t)&off_10016A678, 0xD00000000000001DLL, 0x8000000100145C70);
}

uint64_t sub_100017C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = a4;
  uint64_t v16 = type metadata accessor for TelemetryReportExtension(0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v24[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100015A24(a1, a2, a3, (uint64_t)v18);
  uint64_t v19 = a6(0);
  v24[3] = v19;
  v24[4] = a7;
  uint64_t v20 = sub_1000045E8(v24);
  sub_100019114((uint64_t)v18, (uint64_t)v20);
  uint64_t v21 = (uint64_t *)((char *)v20 + *(int *)(v19 + 20));
  *uint64_t v21 = a8;
  v21[1] = a9;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a5 + 8))(v24, v23, a5);
  sub_100019178((uint64_t)v18);
  return sub_10000478C((uint64_t)v24);
}

uint64_t sub_100017D7C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a1 + 7;
    for (unint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_100017E44(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017C248);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_10001889C(v24, v35);
      }
      else
      {
        sub_1000047DC((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      void *v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_10001889C(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

_OWORD *sub_100018144(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1000048E0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100018304();
      goto LABEL_7;
    }
    sub_100017E44(v15, a4 & 1);
    unint64_t v21 = sub_1000048E0(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_10000478C((uint64_t)v19);
    return sub_10001889C(a1, v19);
  }
LABEL_13:
  sub_100018298(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_100018298(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10001889C(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_100018304()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017C248);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1000047DC(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_10001889C(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000184EC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1000186EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100004700((uint64_t *)&unk_10017DE60);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1000184EC((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1000048D8();
  if (v6 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

unint64_t sub_1000187D4(Swift::String string)
{
  int64_t object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._int64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10016A480, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0x10) {
    return 16;
  }
  else {
    return v3;
  }
}

uint64_t sub_100018820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017C008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018888(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

_OWORD *sub_10001889C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

BOOL sub_1000188AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100004700(&qword_10017C238);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004700(&qword_10017C008);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  int64_t v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  int64_t v17 = (char *)&v75 - v16;
  __chkstk_darwin(v15);
  int64_t v19 = (char *)&v75 - v18;
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v20 & 1) != 0))
  {
    uint64_t v22 = *(void *)(a1 + 24);
    uint64_t v23 = *(void *)(a2 + 24);
    if (v22)
    {
      if (!v23) {
        return 0;
      }
      if (*(void *)(a1 + 16) != *(void *)(a2 + 16) || v22 != v23)
      {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v24 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v23)
    {
      return 0;
    }
    uint64_t v25 = *(void *)(a1 + 40);
    uint64_t v26 = *(void *)(a2 + 40);
    if (v25)
    {
      if (!v26) {
        return 0;
      }
      if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || v25 != v26)
      {
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v27 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v26)
    {
      return 0;
    }
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a2 + 56);
    if (v28)
    {
      if (!v29) {
        return 0;
      }
      if (*(void *)(a1 + 48) != *(void *)(a2 + 48) || v28 != v29)
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v30 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v29)
    {
      return 0;
    }
    uint64_t v31 = *(void *)(a1 + 72);
    uint64_t v32 = *(void *)(a2 + 72);
    if (v31)
    {
      if (!v32) {
        return 0;
      }
      if (*(void *)(a1 + 64) != *(void *)(a2 + 64) || v31 != v32)
      {
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v33 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v32)
    {
      return 0;
    }
    int v34 = *(unsigned __int8 *)(a1 + 80);
    int v35 = *(unsigned __int8 *)(a2 + 80);
    if (v34 == 2)
    {
      if (v35 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      BOOL v36 = (v34 & 1) == 0;
      if (v35 == 2 || ((v36 ^ v35) & 1) == 0) {
        return result;
      }
    }
    uint64_t v37 = *(void *)(a1 + 96);
    uint64_t v38 = *(void *)(a2 + 96);
    if (v37)
    {
      if (!v38) {
        return 0;
      }
      if (*(void *)(a1 + 88) != *(void *)(a2 + 88) || v37 != v38)
      {
        char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v39 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v38)
    {
      return 0;
    }
    uint64_t v40 = *(void *)(a1 + 112);
    uint64_t v41 = *(void *)(a2 + 112);
    if (v40)
    {
      if (!v41) {
        return 0;
      }
      if (*(void *)(a1 + 104) != *(void *)(a2 + 104) || v40 != v41)
      {
        char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v42 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v41)
    {
      return 0;
    }
    uint64_t v43 = *(void *)(a1 + 128);
    uint64_t v44 = *(void *)(a2 + 128);
    if (v43)
    {
      if (!v44) {
        return 0;
      }
      if (*(void *)(a1 + 120) != *(void *)(a2 + 120) || v43 != v44)
      {
        char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v45 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v44)
    {
      return 0;
    }
    uint64_t v46 = *(void *)(a1 + 144);
    uint64_t v47 = *(void *)(a2 + 144);
    if (v46)
    {
      if (!v47) {
        return 0;
      }
      if (*(void *)(a1 + 136) != *(void *)(a2 + 136) || v46 != v47)
      {
        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v48 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v47)
    {
      return 0;
    }
    uint64_t v78 = (int *)type metadata accessor for TelemetryReportExtension(0);
    sub_10001BA68(a1 + v78[14], (uint64_t)v19, &qword_10017C008);
    sub_10001BA68(a2 + v78[14], (uint64_t)v17, &qword_10017C008);
    uint64_t v49 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_10001BA68((uint64_t)v19, (uint64_t)v10, &qword_10017C008);
    uint64_t v77 = v49;
    sub_10001BA68((uint64_t)v17, v49, &qword_10017C008);
    uint64_t v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v76((uint64_t)v10, 1, v4) == 1)
    {
      sub_1000130EC((uint64_t)v17, &qword_10017C008);
      sub_1000130EC((uint64_t)v19, &qword_10017C008);
      if (v76(v77, 1, v4) == 1)
      {
        sub_1000130EC((uint64_t)v10, &qword_10017C008);
LABEL_72:
        uint64_t v51 = v78[15];
        char v52 = (void *)(a1 + v51);
        uint64_t v53 = *(void *)(a1 + v51 + 8);
        char v54 = (void *)(a2 + v51);
        uint64_t v55 = v54[1];
        if (v53)
        {
          if (!v55) {
            return 0;
          }
          if (*v52 != *v54 || v53 != v55)
          {
            char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v56 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v55)
        {
          return 0;
        }
        uint64_t v57 = v78[16];
        int v58 = *(unsigned __int8 *)(a1 + v57);
        int v59 = *(unsigned __int8 *)(a2 + v57);
        if (v58 == 2)
        {
          if (v59 != 2) {
            return 0;
          }
        }
        else
        {
          BOOL result = 0;
          BOOL v60 = (v58 & 1) == 0;
          if (v59 == 2 || ((v60 ^ v59) & 1) == 0) {
            return result;
          }
        }
        uint64_t v61 = v78[17];
        uint64_t v62 = (void *)(a1 + v61);
        uint64_t v63 = *(void *)(a1 + v61 + 8);
        uint64_t v64 = (void *)(a2 + v61);
        uint64_t v65 = v64[1];
        if (v63)
        {
          if (!v65) {
            return 0;
          }
          if (*v62 != *v64 || v63 != v65)
          {
            char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v66 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v65)
        {
          return 0;
        }
        uint64_t v67 = v78[18];
        int64_t v68 = *(void **)(a1 + v67);
        uint64_t v69 = *(void **)(a2 + v67);
        if (v68)
        {
          if (!v69 || (sub_100017D7C(v68, v69) & 1) == 0) {
            return 0;
          }
        }
        else if (v69)
        {
          return 0;
        }
        uint64_t v70 = v78[19];
        unint64_t v71 = (void *)(a1 + v70);
        uint64_t v72 = *(void *)(a1 + v70 + 8);
        uint64_t v73 = (void *)(a2 + v70);
        uint64_t v74 = v73[1];
        if (v72) {
          return v74 && (*v71 == *v73 && v72 == v74 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
        }
        return !v74;
      }
    }
    else
    {
      sub_10001BA68((uint64_t)v10, (uint64_t)v14, &qword_10017C008);
      if (v76(v77, 1, v4) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v77, v4);
        sub_10001BA24(&qword_10017C240);
        LODWORD(v77) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v50 = *(void (**)(char *, uint64_t))(v5 + 8);
        v50(v7, v4);
        sub_1000130EC((uint64_t)v17, &qword_10017C008);
        sub_1000130EC((uint64_t)v19, &qword_10017C008);
        v50(v14, v4);
        sub_1000130EC((uint64_t)v10, &qword_10017C008);
        if ((v77 & 1) == 0) {
          return 0;
        }
        goto LABEL_72;
      }
      sub_1000130EC((uint64_t)v17, &qword_10017C008);
      sub_1000130EC((uint64_t)v19, &qword_10017C008);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    }
    sub_1000130EC((uint64_t)v10, &qword_10017C238);
    return 0;
  }
  return result;
}

unint64_t sub_10001905C()
{
  unint64_t result = qword_10017C028;
  if (!qword_10017C028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C028);
  }
  return result;
}

uint64_t sub_1000190B0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000126B8((uint64_t *)&unk_10017E5D0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100019114(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TelemetryReportExtension(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100019178(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TelemetryReportExtension(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000191D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100004700(&qword_10017C230);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100132F30;
  *(void *)(inited + 32) = 0xD00000000000001ALL;
  *(void *)(inited + 40) = 0x8000000100145980;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0xD00000000000001ALL;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 88) = 0x80000001001459E0;
  *(void *)(inited + 96) = a3;
  *(void *)(inited + 104) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_100016BFC(inited);
}

uint64_t type metadata accessor for DriverApprovalEvent(uint64_t a1)
{
  return sub_1000192DC(a1, (uint64_t *)&unk_100181110);
}

uint64_t type metadata accessor for DriverLaunchEvent(uint64_t a1)
{
  return sub_1000192DC(a1, (uint64_t *)&unk_100181120);
}

uint64_t sub_1000192DC(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100019314()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

unint64_t sub_100019360()
{
  unint64_t result = qword_10017C058;
  if (!qword_10017C058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C058);
  }
  return result;
}

unint64_t sub_1000193B8()
{
  unint64_t result = qword_10017C060;
  if (!qword_10017C060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C060);
  }
  return result;
}

unint64_t sub_100019410()
{
  unint64_t result = qword_10017C068;
  if (!qword_10017C068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C068);
  }
  return result;
}

void *sub_100019464(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    uint64_t v11 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v11;
    *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
    uint64_t v12 = a2[12];
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = v12;
    uint64_t v13 = a2[14];
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 112) = v13;
    uint64_t v14 = a2[16];
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 128) = v14;
    uint64_t v15 = a2[18];
    uint64_t v16 = a3[14];
    __dst = (void *)(a1 + v16);
    BOOL v36 = (char *)a2 + v16;
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v15;
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v35 = *(void *)(v17 - 8);
    uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v37(v36, 1, v17))
    {
      uint64_t v18 = sub_100004700(&qword_10017C008);
      memcpy(__dst, v36, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v35 + 16))(__dst, v36, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v17);
    }
    uint64_t v20 = a3[15];
    uint64_t v21 = a3[16];
    uint64_t v22 = (void *)((char *)v4 + v20);
    uint64_t v23 = (uint64_t *)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    *((unsigned char *)v4 + v21) = *((unsigned char *)a2 + v21);
    uint64_t v25 = a3[17];
    uint64_t v26 = a3[18];
    char v27 = (void *)((char *)v4 + v25);
    uint64_t v28 = (uint64_t *)((char *)a2 + v25);
    uint64_t v29 = v28[1];
    *char v27 = *v28;
    v27[1] = v29;
    *(void *)((char *)v4 + v26) = *(uint64_t *)((char *)a2 + v26);
    uint64_t v30 = a3[19];
    uint64_t v31 = (void *)((char *)v4 + v30);
    uint64_t v32 = (uint64_t *)((char *)a2 + v30);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10001970C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 56);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10001984C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v12;
  uint64_t v13 = *(void *)(a2 + 144);
  uint64_t v14 = a3[14];
  __dst = (void *)(a1 + v14);
  int v34 = (const void *)(a2 + v14);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v32 = *(void *)(v15 - 8);
  uint64_t v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33(v34, 1, v15))
  {
    uint64_t v16 = sub_100004700(&qword_10017C008);
    memcpy(__dst, v34, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(__dst, v34, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v15);
  }
  uint64_t v17 = a3[15];
  uint64_t v18 = a3[16];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v22 = a3[17];
  uint64_t v23 = a3[18];
  uint64_t v24 = (void *)(a1 + v22);
  uint64_t v25 = (void *)(a2 + v22);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  *(void *)(a1 + v23) = *(void *)(a2 + v23);
  uint64_t v27 = a3[19];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100019A9C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[14];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100004700(&qword_10017C008);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = a3[15];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  uint64_t v18 = a3[17];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[19];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100019DF0(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v8 = a3[14];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100004700(&qword_10017C008);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v15 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  return a1;
}

uint64_t sub_100019F80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[14];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    uint64_t v23 = sub_100004700(&qword_10017C008);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_7:
  uint64_t v24 = a3[15];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[17];
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *uint64_t v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[19];
  uint64_t v35 = (void *)(a1 + v34);
  BOOL v36 = (uint64_t *)(a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *uint64_t v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10001A208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001A21C);
}

uint64_t sub_10001A21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100004700(&qword_10017C008);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 56);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10001A2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001A2E4);
}

uint64_t sub_10001A2E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100004700(&qword_10017C008);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 56);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10001A390()
{
  sub_10001A460();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10001A460()
{
  if (!qword_10017C0C8)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017C0C8);
    }
  }
}

uint64_t getEnumTagSinglePayload for TelemetryReportExtension.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TelemetryReportExtension.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001A614);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

unsigned char *sub_10001A63C(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TelemetryReportExtension.CodingKeys()
{
  return &type metadata for TelemetryReportExtension.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for KernelManagementConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for DriverInstallEvent()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DriverInstallEvent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DriverInstallEvent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for DriverInstallEvent(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for DriverInstallEvent(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DriverInstallEvent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DriverInstallEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DriverInstallEvent()
{
  return &type metadata for DriverInstallEvent;
}

uint64_t sub_10001A8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001A8F0);
}

uint64_t sub_10001A8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001A908);
}

void *sub_10001A910(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
    uint64_t v11 = a2[12];
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = v11;
    uint64_t v12 = a2[14];
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 112) = v12;
    uint64_t v13 = a2[16];
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 128) = v13;
    uint64_t v14 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v14;
    uint64_t v15 = (int *)type metadata accessor for TelemetryReportExtension(0);
    uint64_t v16 = v15[14];
    __dst = (char *)v4 + v16;
    char v39 = (char *)a2 + v16;
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v38(v39, 1, v17))
    {
      uint64_t v19 = sub_100004700(&qword_10017C008);
      memcpy(__dst, v39, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v39, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    uint64_t v21 = v15[15];
    int v22 = (void *)((char *)v4 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *int v22 = *v23;
    v22[1] = v24;
    *((unsigned char *)v4 + v15[16]) = *((unsigned char *)a2 + v15[16]);
    uint64_t v25 = v15[17];
    uint64_t v26 = (void *)((char *)v4 + v25);
    uint64_t v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    *(void *)((char *)v4 + v15[18]) = *(uint64_t *)((char *)a2 + v15[18]);
    uint64_t v29 = v15[19];
    uint64_t v30 = (void *)((char *)v4 + v29);
    uint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = *(int *)(a3 + 20);
    uint64_t v34 = (void *)((char *)v4 + v33);
    uint64_t v35 = (uint64_t *)((char *)a2 + v33);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10001ABEC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for TelemetryReportExtension(0) + 56);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10001AD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v12;
  uint64_t v13 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = (int *)type metadata accessor for TelemetryReportExtension(0);
  uint64_t v15 = v14[14];
  __dst = (void *)(a1 + v15);
  uint64_t v37 = (const void *)(a2 + v15);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v36(v37, 1, v16))
  {
    uint64_t v18 = sub_100004700(&qword_10017C008);
    memcpy(__dst, v37, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v37, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
  }
  uint64_t v19 = v14[15];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  *(unsigned char *)(a1 + v14[16]) = *(unsigned char *)(a2 + v14[16]);
  uint64_t v23 = v14[17];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  *(void *)(a1 + v14[18]) = *(void *)(a2 + v14[18]);
  uint64_t v27 = v14[19];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = *(int *)(a3 + 20);
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  uint64_t v34 = v33[1];
  *uint64_t v32 = *v33;
  v32[1] = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10001AFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for TelemetryReportExtension(0);
  uint64_t v6 = v5[14];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100004700(&qword_10017C008);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = v5[15];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v5[16]) = *(unsigned char *)(a2 + v5[16]);
  uint64_t v18 = v5[17];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v5[18]) = *(void *)(a2 + v5[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v5[19];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = *(int *)(a3 + 20);
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10001B36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v8 = (int *)type metadata accessor for TelemetryReportExtension(0);
  uint64_t v9 = v8[14];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_100004700(&qword_10017C008);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_OWORD *)(a1 + v8[15]) = *(_OWORD *)(a2 + v8[15]);
  *(unsigned char *)(a1 + v8[16]) = *(unsigned char *)(a2 + v8[16]);
  *(_OWORD *)(a1 + v8[17]) = *(_OWORD *)(a2 + v8[17]);
  *(void *)(a1 + v8[18]) = *(void *)(a2 + v8[18]);
  *(_OWORD *)(a1 + v8[19]) = *(_OWORD *)(a2 + v8[19]);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10001B51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = (int *)type metadata accessor for TelemetryReportExtension(0);
  uint64_t v15 = v14[14];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    uint64_t v23 = sub_100004700(&qword_10017C008);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_7:
  uint64_t v24 = v14[15];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v14[16]) = *(unsigned char *)(a2 + v14[16]);
  uint64_t v29 = v14[17];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *uint64_t v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  *(void *)(a1 + v14[18]) = *(void *)(a2 + v14[18]);
  swift_bridgeObjectRelease();
  uint64_t v34 = v14[19];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (uint64_t *)(a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *uint64_t v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = *(int *)(a3 + 20);
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (uint64_t *)(a2 + v39);
  uint64_t v43 = *v41;
  uint64_t v42 = v41[1];
  *uint64_t v40 = v43;
  v40[1] = v42;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10001B7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001B7F0);
}

uint64_t sub_10001B7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TelemetryReportExtension(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10001B8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001B8CC);
}

uint64_t sub_10001B8D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TelemetryReportExtension(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10001B990()
{
  uint64_t result = type metadata accessor for TelemetryReportExtension(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10001BA24(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Date();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001BA68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100004700(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ApplicationRecord(uint64_t a1)
{
  return sub_1000192DC(a1, (uint64_t *)&unk_1001814D0);
}

unint64_t sub_10001BAF0(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 7107189;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_10001BB8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10001BBA0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001BBE8()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10001BC14()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_10001BC58()
{
  return sub_10001BAF0(*v0);
}

uint64_t sub_10001BC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000238EC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001BC88(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10001BC94(uint64_t a1)
{
  unint64_t v2 = sub_10001C46C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001BCD0(uint64_t a1)
{
  unint64_t v2 = sub_10001C46C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001BD0C()
{
  uint64_t v21 = *v0;
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 10;
  v1._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  unint64_t v2 = (int *)type metadata accessor for ApplicationRecord(0);
  type metadata accessor for URL();
  sub_10001C4C0(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 10;
  v4._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x3A4C525520202020;
  v5._int64_t object = (void *)0xE900000000000020;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v6._int64_t object = (void *)0x8000000100145CB0;
  v6._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v6);
  uint64_t v7 = *(uint64_t *)((char *)v0 + v2[6]);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = (void **)(v7 + 40);
    do
    {
      uint64_t v10 = (uint64_t)*(v9 - 1);
      uint64_t v11 = *v9;
      swift_bridgeObjectRetain();
      v12._countAndFlagsBits = v10;
      v12._int64_t object = v11;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 10;
      v13._int64_t object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = 0x2020202020202020;
      v14._int64_t object = (void *)0xE800000000000000;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = sub_100014690(*(uint64_t *)((char *)v0 + v2[7]), *(uint64_t *)((char *)v0 + v2[7] + 8));
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 10;
  v16._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0xD000000000000020;
  v17._int64_t object = (void *)0x8000000100145CD0;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = sub_100014690(*(uint64_t *)((char *)v0 + v2[8]), *(uint64_t *)((char *)v0 + v2[8] + 8));
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0xD000000000000017;
  v19._int64_t object = (void *)0x8000000100145D00;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_10001BFF0()
{
  _StringGuts.grow(_:)(24);
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = v1;
  v2._countAndFlagsBits = 2108704;
  v2._int64_t object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  uint64_t v3 = type metadata accessor for ApplicationRecord(0);
  type metadata accessor for URL();
  sub_10001C4C0(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 10272;
  v5._int64_t object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  Swift::String v6 = (uint64_t *)((char *)v0 + *(int *)(v3 + 28));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  sub_100012DE4(*v6, v8);
  v9._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  sub_100012A10(v7, v8);
  v10._countAndFlagsBits = 2112041;
  v10._int64_t object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x7372657669726420;
  v12._int64_t object = (void *)0xE800000000000000;
  String.append(_:)(v12);
  return v14;
}

uint64_t sub_10001C1B4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004700(&qword_10017C250);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_10001C46C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    Swift::String v9 = (int *)type metadata accessor for ApplicationRecord(0);
    LOBYTE(v11) = 1;
    type metadata accessor for URL();
    sub_10001C4C0(&qword_10017C258, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v11 = *(void *)(v3 + v9[6]);
    char v12 = 2;
    sub_100004700((uint64_t *)&unk_10017E5D0);
    sub_1000190B0(&qword_10017C038);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + v9[7]);
    char v12 = 3;
    sub_10001C508();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + v9[8]);
    char v12 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10001C46C()
{
  unint64_t result = qword_100181130;
  if (!qword_100181130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181130);
  }
  return result;
}

uint64_t sub_10001C4C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001C508()
{
  unint64_t result = qword_10017C260;
  if (!qword_10017C260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C260);
  }
  return result;
}

uint64_t sub_10001C55C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  Swift::String v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100004700(&qword_10017C268);
  uint64_t v17 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v5 = (int *)type metadata accessor for ApplicationRecord(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000036B0(a1, a1[3]);
  sub_10001C46C();
  uint64_t v8 = (uint64_t)v21;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v8) {
    return sub_10000478C((uint64_t)a1);
  }
  Swift::String v9 = v4;
  uint64_t v21 = a1;
  Swift::String v10 = v7;
  uint64_t v12 = v19;
  uint64_t v11 = v20;
  uint64_t v13 = v18;
  LOBYTE(v22) = 0;
  uint64_t *v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v10[1] = v14;
  LOBYTE(v22) = 1;
  sub_10001C4C0(&qword_10017C270, (void (*)(uint64_t))&type metadata accessor for URL);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))((char *)v10 + v5[5], v9, v13);
  sub_100004700((uint64_t *)&unk_10017E5D0);
  char v23 = 2;
  sub_1000190B0((unint64_t *)&qword_10017C050);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(uint64_t *)((char *)v10 + v5[6]) = v22;
  char v23 = 3;
  sub_10001CA64();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)((char *)v10 + v5[7]) = v22;
  char v23 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(void, uint64_t))(v17 + 8))(0, v12);
  *(_OWORD *)((char *)v10 + v5[8]) = v22;
  sub_10001CAB8((uint64_t)v10, v16);
  sub_10000478C((uint64_t)v21);
  return sub_10001CB1C((uint64_t)v10);
}

unint64_t sub_10001CA64()
{
  unint64_t result = qword_10017C278;
  if (!qword_10017C278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C278);
  }
  return result;
}

uint64_t sub_10001CAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ApplicationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001CB1C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ApplicationRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001CB78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001C55C(a1, a2);
}

uint64_t sub_10001CB90(void *a1)
{
  return sub_10001C1B4(a1);
}

uint64_t sub_10001CBAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void))(a2 + 8))();
  if (!v7)
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v14 = 0xD000000000000028;
    *(void *)(v14 + 8) = 0x8000000100145D20;
LABEL_8:
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(void *)(v14 + 64) = 0;
    *(unsigned char *)(v14 + 72) = 10;
    return swift_willThrow();
  }
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    sub_100012E3C();
    swift_allocError();
    Swift::String v15 = "Application record is missing driver extension paths";
    unint64_t v16 = 0xD000000000000034;
    goto LABEL_7;
  }
  uint64_t v11 = v10;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (v13 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100012E3C();
    swift_allocError();
    Swift::String v15 = "Application record is missing install session identifier";
    unint64_t v16 = 0xD000000000000038;
LABEL_7:
    *(void *)uint64_t v14 = v16;
    *(void *)(v14 + 8) = (unint64_t)(v15 - 32) | 0x8000000000000000;
    goto LABEL_8;
  }
  unint64_t v18 = v13;
  uint64_t v29 = v12;
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  if (v20 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v21 = 0xD000000000000037;
    *(void *)(v21 + 8) = 0x8000000100145DD0;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 32) = 0u;
    *(_OWORD *)(v21 + 48) = 0u;
    *(void *)(v21 + 64) = 0;
    *(unsigned char *)(v21 + 72) = 10;
    swift_willThrow();
    return sub_10002404C(v29, v18);
  }
  else
  {
    uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
    uint64_t v27 = v20;
    uint64_t v28 = v19;
    unint64_t v26 = v18;
    long long v22 = (int *)type metadata accessor for ApplicationRecord(0);
    uint64_t result = v25(a1, a2);
    *a3 = v8;
    a3[1] = v9;
    *(uint64_t *)((char *)a3 + v22[6]) = v11;
    char v23 = (uint64_t *)((char *)a3 + v22[7]);
    uint64_t *v23 = v29;
    v23[1] = v26;
    uint64_t v24 = (uint64_t *)((char *)a3 + v22[8]);
    *uint64_t v24 = v28;
    v24[1] = v27;
  }
  return result;
}

uint64_t sub_10001CE80()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001CEB8(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 64) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10001CF00()
{
  return swift_retain();
}

uint64_t sub_10001CF38(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 72) = a1;
  return swift_release();
}

uint64_t (*sub_10001CF80())()
{
  return j__swift_endAccess;
}

uint64_t sub_10001CFD4()
{
  if (*(void *)(v0 + 88))
  {
    uint64_t v1 = *(void *)(v0 + 88);
  }
  else
  {
    uint64_t v1 = sub_10001D6A0();
    *(void *)(v0 + 88) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10001D030()
{
  int v1 = *(unsigned __int8 *)(v0 + 96);
  if (v1 == 2)
  {
    char v2 = sub_10001D06C((void *)v0);
    *(unsigned char *)(v0 + 96) = v2 & 1;
  }
  else
  {
    char v2 = v1 & 1;
  }
  return v2 & 1;
}

BOOL sub_10001D06C(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1 + 2;
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  sub_1000036B0(v6, v8);
  sub_100126EA0(v8, v7);
  uint64_t v9 = v31;
  uint64_t v10 = v32;
  sub_1000036B0(v30, v31);
  unint64_t v11 = sub_1000FE39C();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  v29[3] = &type metadata for SupportsThirdPartyDriversDeviceProperty;
  v29[4] = &off_100172888;
  unint64_t v18 = (void *)swift_allocObject();
  v29[0] = v18;
  v18[2] = v11;
  v18[3] = v13;
  v18[4] = v15;
  v18[5] = v17;
  (*(void (**)(long long *__return_ptr, void *, uint64_t, uint64_t))(v10 + 8))(&v33, v29, v9, v10);
  sub_10000478C((uint64_t)v29);
  sub_10000478C((uint64_t)v30);
  BOOL v19 = *((void *)&v34 + 1) != 0;
  sub_1000130EC((uint64_t)&v33, &qword_10017C018);
  uint64_t v20 = sub_1000EFD88();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v20, v2);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    char v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)char v23 = 136315138;
    v30[0] = v24;
    if (v19) {
      uint64_t v25 = 0x7374726F70707573;
    }
    else {
      uint64_t v25 = 0xD000000000000010;
    }
    if (v19) {
      unint64_t v26 = 0xE800000000000000;
    }
    else {
      unint64_t v26 = 0x8000000100145FF0;
    }
    uint64_t v28 = v2;
    v29[0] = sub_100003F90(v25, v26, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Hardware %s third party drivers", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v28);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v19;
}

uint64_t sub_10001D3B0()
{
  int v1 = *(unsigned __int8 *)(v0 + 97);
  if (v1 == 2)
  {
    char v2 = sub_10001D3EC((void *)v0);
    *(unsigned char *)(v0 + 97) = v2 & 1;
  }
  else
  {
    char v2 = v1 & 1;
  }
  return v2 & 1;
}

BOOL sub_10001D3EC(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1 + 2;
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  sub_1000036B0(v6, v8);
  sub_10007F4B4(v8, v7);
  uint64_t v9 = v30;
  uint64_t v10 = v31;
  sub_1000036B0(v29, v30);
  unint64_t v11 = (uint64_t *)sub_1000FE390();
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_10007ACF8(v12, v13, v9, v10);
  LOBYTE(v10) = v15;
  swift_bridgeObjectRelease();
  BOOL v17 = (v10 & 1) == 0 && v14 == 1;
  sub_10000478C((uint64_t)v29);
  uint64_t v18 = sub_1000EFD88();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v18, v2);
  BOOL v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v27 = v2;
    *(_DWORD *)uint64_t v21 = 136315138;
    v29[0] = v22;
    if (v17) {
      uint64_t v23 = 29545;
    }
    else {
      uint64_t v23 = 0x746F6E207369;
    }
    if (v17) {
      unint64_t v24 = 0xE200000000000000;
    }
    else {
      unint64_t v24 = 0xE600000000000000;
    }
    uint64_t v28 = sub_100003F90(v23, v24, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Third party driver boot arg %s enabled", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v27);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v17;
}

uint64_t sub_10001D6A0()
{
  int v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v36[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = &v36[-v8];
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = &v36[-v11];
  uint64_t result = (*(uint64_t (**)(uint64_t))(*v0 + 168))(v10);
  if (result)
  {
    char v14 = (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
    swift_release();
    if (v14)
    {
      unint64_t v38 = sub_10001DC6C((uint64_t)_swiftEmptyArrayStorage);
      if (sub_10001D030() & 1) != 0 || (sub_10001D3B0())
      {
        uint64_t v15 = sub_1000EFD88();
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v12, v15, v2);
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Retrieving applications from LaunchServices", v18, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v12, v2);
        uint64_t v19 = v1[5];
        uint64_t v20 = v1[6];
        sub_1000036B0(v1 + 2, v19);
        sub_1000400E8(v19, v20);
        uint64_t v21 = v37[4];
        uint64_t v22 = sub_1000036B0(v37, v37[3]);
        __chkstk_darwin(v22);
        *(void *)&v36[-16] = &v38;
        (*(void (**)(uint64_t (*)(void *)))(v21 + 16))(sub_1000255DC);
        sub_10000478C((uint64_t)v37);
      }
      else
      {
        uint64_t v29 = sub_1000EFD88();
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v9, v29, v2);
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v32 = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Third party drivers are disabled", v32, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v9, v2);
      }
      uint64_t v33 = v1[10];
      unint64_t v28 = v38;
      long long v34 = *(void (**)(uint64_t))(*(void *)v33 + 136);
      uint64_t v35 = swift_bridgeObjectRetain();
      v34(v35);
    }
    else
    {
      uint64_t v23 = sub_1000EFD88();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v6, v23, v2);
      unint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Using cached application list", v26, 2u);
        swift_slowDealloc();
      }

      uint64_t v27 = (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v6, v2);
      return (*(uint64_t (**)(uint64_t))(*(void *)v1[10] + 128))(v27);
    }
    return v28;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10001DB3C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017C5A8);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10001BA68(v6, (uint64_t)&v13, &qword_10017C5B0);
    uint64_t v7 = v13;
    unint64_t result = sub_100022688(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_10001889C(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001DC6C(uint64_t a1)
{
  uint64_t v2 = sub_100004700(&qword_10017C5C0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017C5C8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10001BA68(v12, (uint64_t)v5, &qword_10017C5C0);
    uint64_t v14 = *v5;
    unint64_t v15 = v5[1];
    unint64_t result = sub_10000CF34(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for ApplicationRecord(0);
    unint64_t result = sub_1000240E8(v9, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    uint64_t v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10001DE54(void *a1, uint64_t a2)
{
  uint64_t v80 = a2;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v76 = *(void *)(v3 - 8);
  uint64_t v77 = v3;
  __chkstk_darwin(v3);
  uint64_t v75 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100004700(&qword_10017BEF0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v78 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v79 = (uint64_t *)((char *)&v69 - v9);
  __chkstk_darwin(v8);
  unint64_t v11 = (uint64_t *)((char *)&v69 - v10);
  uint64_t v83 = type metadata accessor for ApplicationRecord(0);
  uint64_t v81 = *(void (***)(uint64_t *, uint64_t, uint64_t, uint64_t))(v83 - 8);
  uint64_t v12 = __chkstk_darwin(v83);
  uint64_t v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  char v17 = (char *)&v69 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v69 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  BOOL v23 = (char *)&v69 - v22;
  __chkstk_darwin(v21);
  os_log_type_t v25 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))((char *)&v69 - v24);
  uint64_t v27 = a1[3];
  uint64_t v26 = a1[4];
  sub_1000036B0(a1, v27);
  uint64_t v28 = v82;
  sub_10001CBAC(v27, v26, v11);
  if (v28)
  {
    swift_errorRelease();
    v81[7](v11, 1, 1, v83);
    return sub_1000130EC((uint64_t)v11, &qword_10017BEF0);
  }
  uint64_t v73 = v23;
  uint64_t v74 = v20;
  unint64_t v71 = v17;
  uint64_t v72 = v14;
  uint64_t v82 = 0;
  uint64_t v30 = v81;
  os_log_type_t v31 = v81[7];
  uint64_t v32 = v83;
  v31(v11, 0, 1, v83);
  sub_1000240E8((uint64_t)v11, (uint64_t)v25);
  swift_bridgeObjectRetain();
  BOOL v33 = sub_1000EF0B4();
  swift_bridgeObjectRelease();
  if (v33) {
    goto LABEL_11;
  }
  long long v34 = (uint64_t *)((char *)v25 + *(int *)(v32 + 32));
  uint64_t v35 = *(void *)v80;
  if (!*(void *)(*(void *)v80 + 16))
  {
    uint64_t v43 = (uint64_t)v79;
    v31(v79, 1, 1, v32);
LABEL_10:
    sub_1000130EC(v43, &qword_10017BEF0);
    uint64_t v47 = *v34;
    unint64_t v48 = v34[1];
    uint64_t v49 = v78;
    sub_10001CAB8((uint64_t)v25, v78);
    v31((uint64_t *)v49, 0, 1, v32);
    sub_100012DE4(v47, v48);
    sub_10001E554(v49, v47, v48);
    goto LABEL_11;
  }
  uint64_t v37 = *v34;
  unint64_t v36 = v34[1];
  sub_100012DE4(*v34, v36);
  unint64_t v38 = sub_10000CF34(v37, v36);
  uint64_t v70 = v34;
  uint64_t v39 = v31;
  if (v40)
  {
    uint64_t v41 = *(void *)(v35 + 56) + (void)v30[9] * v38;
    uint64_t v42 = v30;
    uint64_t v43 = (uint64_t)v79;
    sub_10001CAB8(v41, (uint64_t)v79);
    uint64_t v44 = 0;
    uint64_t v45 = (uint64_t)v74;
  }
  else
  {
    uint64_t v44 = 1;
    uint64_t v45 = (uint64_t)v74;
    uint64_t v42 = v30;
    uint64_t v43 = (uint64_t)v79;
  }
  v39((uint64_t *)v43, v44, 1, v32);
  sub_100012A10(v37, v36);
  int v46 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v42[6])(v43, 1, v32);
  os_log_type_t v31 = v39;
  long long v34 = v70;
  if (v46 == 1) {
    goto LABEL_10;
  }
  uint64_t v51 = (uint64_t)v73;
  sub_1000240E8(v43, (uint64_t)v73);
  uint64_t v52 = sub_1000EFD88();
  char v54 = v75;
  uint64_t v53 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v52, v77);
  sub_10001CAB8((uint64_t)v25, v45);
  uint64_t v55 = (uint64_t)v71;
  sub_10001CAB8((uint64_t)v25, (uint64_t)v71);
  uint64_t v56 = (uint64_t)v72;
  sub_10001CAB8(v51, (uint64_t)v72);
  uint64_t v57 = v45;
  int v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.error.getter();
  int v60 = v59;
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v61 = swift_slowAlloc();
    uint64_t v81 = v25;
    uint64_t v62 = v61;
    uint64_t v80 = swift_slowAlloc();
    uint64_t v85 = v80;
    *(_DWORD *)uint64_t v62 = 136315650;
    uint64_t v63 = sub_100014690(*(void *)(v57 + *(int *)(v83 + 32)), *(void *)(v57 + *(int *)(v83 + 32) + 8));
    LODWORD(v83) = v60;
    uint64_t v84 = sub_100003F90(v63, v64, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CB1C(v57);
    *(_WORD *)(v62 + 12) = 2080;
    uint64_t v65 = sub_10001BFF0();
    uint64_t v84 = sub_100003F90(v65, v66, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CB1C(v55);
    *(_WORD *)(v62 + 22) = 2080;
    uint64_t v67 = sub_10001BFF0();
    uint64_t v84 = sub_100003F90(v67, v68, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CB1C(v56);
    _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v83, "Found two applications with the same unique identifier %s:\n%s\n%s", (uint8_t *)v62, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v76 + 8))(v54, v77);
    sub_10001CB1C((uint64_t)v73);
    uint64_t v50 = (uint64_t)v81;
    return sub_10001CB1C(v50);
  }

  sub_10001CB1C(v56);
  sub_10001CB1C(v55);
  sub_10001CB1C(v57);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v77);
  sub_10001CB1C(v51);
LABEL_11:
  uint64_t v50 = (uint64_t)v25;
  return sub_10001CB1C(v50);
}

uint64_t sub_10001E554(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100004700(&qword_10017BEF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ApplicationRecord(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_1000130EC(a1, &qword_10017BEF0);
    sub_100022D38(a2, a3, (uint64_t)v10);
    sub_100012A10(a2, a3);
    return sub_1000130EC((uint64_t)v10, &qword_10017BEF0);
  }
  else
  {
    sub_1000240E8(a1, (uint64_t)v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_10002347C((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    return sub_100012A10(a2, a3);
  }
}

uint64_t sub_10001E714(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = swift_allocObject();
  sub_10001E76C(a1, a2, a3);
  return v6;
}

uint64_t sub_10001E76C(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)(v3 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 88) = 0;
  *(_WORD *)(v3 + 96) = 514;
  *(void *)(v3 + 56) = a1;
  sub_10000469C((uint64_t)a3, v3 + 16);
  type metadata accessor for ApplicationCache(0);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached) = 0;
  uint64_t v7 = v6 + OBJC_IVAR____TtC10driverkitd16ApplicationCache_applicationCachePath;
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a2, v8);
  sub_10000372C(a3, v6 + 16);
  *(void *)(v3 + 80) = v6;
  return v3;
}

uint64_t sub_10001E848(uint64_t a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached) = 0;
  uint64_t v5 = v4 + OBJC_IVAR____TtC10driverkitd16ApplicationCache_applicationCachePath;
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a1, v6);
  sub_10000372C(a2, v4 + 16);
  return v4;
}

uint64_t sub_10001E8EC()
{
  int v1 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 176);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 168))(v3);
  if (result)
  {
    uint64_t v5 = type metadata accessor for ActivationStateManager();
    sub_1000E94E0(v0, (uint64_t)&off_10016A7D8, v5, (uint64_t)&off_10016EF30);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

_UNKNOWN **sub_10001E9A4()
{
  uint64_t v1 = sub_10001D6A0();
  uint64_t v2 = *(void *)(v0 + 88);
  if (v2
    && (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        char v3 = sub_100020BD0(v1, v2),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v3 & 1) != 0))
  {
    uint64_t v4 = 0;
  }
  else
  {
    *(void *)(v0 + 88) = v1;
    uint64_t v4 = &off_10016A7A8;
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10001EA3C()
{
  uint64_t v1 = type metadata accessor for ApplicationRecord(0);
  uint64_t v36 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  char v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100004700(&qword_10017C280);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v32 - v9;
  unint64_t v39 = 0xD000000000000017;
  unint64_t v40 = 0x8000000100145E10;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 216))(v8);
  int64_t v12 = 0;
  uint64_t v13 = *(void *)(result + 64);
  uint64_t v34 = result + 64;
  uint64_t v37 = result;
  uint64_t v14 = 1 << *(unsigned char *)(result + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v35 = (unint64_t)(v14 + 63) >> 6;
  int64_t v33 = v35 - 1;
  if ((v15 & v13) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  unint64_t v20 = v19 | (v12 << 6);
  while (2)
  {
    uint64_t v21 = *(void *)(v37 + 56);
    uint64_t v22 = (uint64_t *)(*(void *)(v37 + 48) + 16 * v20);
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    uint64_t *v7 = *v22;
    v7[1] = v24;
    uint64_t v25 = v21 + *(void *)(v36 + 72) * v20;
    uint64_t v26 = sub_100004700(&qword_10017C288);
    sub_10001CAB8(v25, (uint64_t)v7 + *(int *)(v26 + 48));
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v7, 0, 1, v26);
    sub_100012DE4(v23, v24);
    while (1)
    {
      sub_100024080((uint64_t)v7, (uint64_t)v10);
      uint64_t v31 = sub_100004700(&qword_10017C288);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v10, 1, v31) == 1)
      {
        swift_release();
        return v39;
      }
      sub_100012A10(*(void *)v10, *((void *)v10 + 1));
      sub_1000240E8((uint64_t)&v10[*(int *)(v31 + 48)], (uint64_t)v3);
      v38._countAndFlagsBits = sub_10001BD0C();
      v38._int64_t object = v17;
      v18._countAndFlagsBits = 10;
      v18._int64_t object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      uint64_t result = sub_10001CB1C((uint64_t)v3);
      if (v16) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v27 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v27 < v35)
      {
        unint64_t v28 = *(void *)(v34 + 8 * v27);
        if (v28) {
          goto LABEL_11;
        }
        int64_t v29 = v12 + 2;
        ++v12;
        if (v27 + 1 < v35)
        {
          unint64_t v28 = *(void *)(v34 + 8 * v29);
          if (v28) {
            goto LABEL_14;
          }
          int64_t v12 = v27 + 1;
          if (v27 + 2 < v35)
          {
            unint64_t v28 = *(void *)(v34 + 8 * (v27 + 2));
            if (v28)
            {
              v27 += 2;
              goto LABEL_11;
            }
            int64_t v29 = v27 + 3;
            int64_t v12 = v27 + 2;
            if (v27 + 3 < v35) {
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v30 = sub_100004700(&qword_10017C288);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v7, 1, 1, v30);
      unint64_t v16 = 0;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v29);
    if (v28)
    {
LABEL_14:
      int64_t v27 = v29;
LABEL_11:
      unint64_t v16 = (v28 - 1) & v28;
      unint64_t v20 = __clz(__rbit64(v28)) + (v27 << 6);
      int64_t v12 = v27;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v35)
    {
      int64_t v12 = v33;
      goto LABEL_25;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_11;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10001EE64()
{
  sub_10000478C(v0 + 16);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 98, 7);
}

id sub_10001EEC4()
{
  return *(id *)(v0 + 56);
}

uint64_t sub_10001EECC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t sub_10001EEF0()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

void (*sub_10001EF14(void *a1))(void *a1)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 160))();
  return sub_10000C31C;
}

uint64_t sub_10001EF8C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t sub_10001EFB8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t sub_10001EFE4(char a1)
{
  if (a1) {
    return 1635017060;
  }
  else {
    return 0x6E6F6973726576;
  }
}

BOOL sub_10001F014(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10001F02C()
{
  return sub_10001EFE4(*v0);
}

uint64_t sub_10001F034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10002424C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001F05C(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10001F068(uint64_t a1)
{
  unint64_t v2 = sub_10002414C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F0A4(uint64_t a1)
{
  unint64_t v2 = sub_10002414C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F0E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = a4;
  uint64_t v6 = sub_100004700(&qword_10017C290);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_10002414C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    v11[1] = v11[0];
    char v12 = 1;
    sub_100004700(&qword_10017C298);
    sub_1000241A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10001F278@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100024328(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10001F2A8(void *a1)
{
  return sub_10001F0E0(a1, *v1, v1[1], v1[2]);
}

char *sub_10001F2C8()
{
  uint64_t v1 = OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached;
  if (*(void *)(v0 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached))
  {
    uint64_t v2 = *(char **)(v0 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached);
  }
  else
  {
    uint64_t v2 = sub_10001FE14();
    *(void *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

char *sub_10001F32C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v93 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v94 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v90 = (char *)&v77 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v77 - v13;
  uint64_t v15 = OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached;
  uint64_t v16 = *(void *)((char *)v1 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached);
  if (v16
    && (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        char v17 = sub_100020BD0(a1, v16),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v17 & 1) != 0))
  {
    return (char *)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v89 = v4;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    uint64_t v95 = 0xD000000000000025;
    unint64_t v96 = 0x8000000100145E30;
    uint64_t v97 = a1;
    sub_10002454C();
    swift_bridgeObjectRetain();
    uint64_t v19 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    uint64_t v77 = v15;
    uint64_t v87 = v19;
    unint64_t v88 = v20;
    uint64_t v91 = v10;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v21 = sub_1000F000C();
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v81 = v21;
    uint64_t v82 = v7 + 16;
    uint64_t v80 = v22;
    ((void (*)(char *))v22)(v14);
    uint64_t v23 = Logger.logObject.getter();
    uint64_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, (os_log_type_t)v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v24, "Writing new application cache contents", v25, 2u);
      swift_slowDealloc();
    }

    uint64_t v86 = v7;
    uint64_t v26 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v79 = v7 + 8;
    uint64_t v78 = v26;
    v26(v14, v6);
    uint64_t v83 = (char *)v2 + OBJC_IVAR____TtC10driverkitd16ApplicationCache_applicationCachePath;
    URL.appendingPathExtension(_:)();
    uint64_t v27 = v2[5];
    uint64_t v28 = v2[6];
    uint64_t v84 = v2 + 2;
    uint64_t v85 = v2;
    sub_1000036B0(v2 + 2, v27);
    sub_1001297F4(v27, v28);
    uint64_t v29 = v98;
    uint64_t v30 = v99;
    sub_1000036B0(&v95, v98);
    uint64_t v31 = URL.path.getter();
    uint64_t v92 = v6;
    uint64_t v33 = v32;
    uint64_t v35 = v87;
    unint64_t v34 = v88;
    sub_100012DE4(v87, v88);
    unint64_t v36 = sub_10001DB3C((uint64_t)_swiftEmptyArrayStorage);
    LOBYTE(v31) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v30 + 40))(v31, v33, v35, v34, v36, v29, v30);
    swift_bridgeObjectRelease();
    sub_100012A10(v35, v34);
    swift_bridgeObjectRelease();
    sub_10000478C((uint64_t)&v95);
    if (v31)
    {
      uint64_t v37 = v90;
      uint64_t v38 = v92;
      v80(v90, v81, v92);
      unint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Replacing old application cache contents", v41, 2u);
        swift_slowDealloc();
      }

      v78(v37, v38);
      uint64_t v42 = v84;
      uint64_t v43 = v85;
      uint64_t v44 = v85[5];
      uint64_t v45 = v85[6];
      sub_1000036B0(v84, v44);
      sub_1001297F4(v44, v45);
      uint64_t v46 = v98;
      uint64_t v47 = v99;
      sub_1000036B0(&v95, v98);
      unint64_t v48 = v94;
      (*(void (**)(char *, char *, void, void, void, void, uint64_t, uint64_t))(v47 + 88))(v83, v94, 0, 0, 0, 0, v46, v47);
      sub_10000478C((uint64_t)&v95);
      uint64_t v73 = v43[5];
      uint64_t v74 = v43[6];
      sub_1000036B0(v42, v73);
      sub_1001297F4(v73, v74);
      uint64_t v75 = v98;
      uint64_t v76 = v99;
      sub_1000036B0(&v95, v98);
      (*(void (**)(char *, uint64_t, uint64_t))(v76 + 104))(v48, v75, v76);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v48, v89);
      sub_100012A10(v87, v88);
      sub_10000478C((uint64_t)&v95);
      *(void *)((char *)v43 + v77) = a1;
      return (char *)swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v49 = v92;
      swift_bridgeObjectRelease();
      int v50 = errno.getter();
      uint64_t result = strerror(v50);
      uint64_t v51 = v91;
      if (result)
      {
        uint64_t v52 = String.init(cString:)();
        char v54 = v53;
        uint64_t v95 = 0;
        unint64_t v96 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        swift_bridgeObjectRelease();
        uint64_t v95 = 0x6946657461657263;
        unint64_t v96 = 0xEB0000000020656CLL;
        sub_10001C4C0(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v55 = v94;
        uint64_t v56 = v89;
        v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v58._countAndFlagsBits = 0x3A64656C69616620;
        v58._int64_t object = (void *)0xEF206F6E72726520;
        String.append(_:)(v58);
        v59._countAndFlagsBits = v52;
        v59._int64_t object = v54;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        uint64_t v60 = v95;
        unint64_t v61 = v96;
        sub_100012E3C();
        uint64_t v62 = swift_allocError();
        *(void *)uint64_t v63 = v60;
        *(void *)(v63 + 8) = v61;
        *(_OWORD *)(v63 + 16) = 0u;
        *(_OWORD *)(v63 + 32) = 0u;
        *(_OWORD *)(v63 + 48) = 0u;
        *(void *)(v63 + 64) = 0;
        *(unsigned char *)(v63 + 72) = 19;
        swift_willThrow();
        sub_100012A10(v87, v88);
        (*(void (**)(char *, uint64_t))(v93 + 8))(v55, v56);
        uint64_t v64 = v49;
        uint64_t v65 = v86;
        uint64_t v66 = sub_1000F000C();
        (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v51, v66, v64);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v92 = v64;
          uint64_t v69 = (uint8_t *)swift_slowAlloc();
          uint64_t v70 = swift_slowAlloc();
          uint64_t v91 = v51;
          uint64_t v95 = v70;
          *(_DWORD *)uint64_t v69 = 136315138;
          uint64_t v100 = v62;
          swift_errorRetain();
          sub_100004700(&qword_10017EB50);
          uint64_t v71 = String.init<A>(describing:)();
          uint64_t v100 = sub_100003F90(v71, v72, &v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "Failed to write application cache: %s", v69, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          return (char *)(*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v91, v92);
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

          return (char *)(*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v51, v64);
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

char *(*sub_10001FD28(char **a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached;
  if (*(void *)&v1[OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached])
  {
    uint64_t v4 = *(char **)&v1[OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached];
  }
  else
  {
    uint64_t v4 = sub_10001FE14();
    *(void *)&v1[v3] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *a1 = v4;
  swift_bridgeObjectRetain();
  return sub_10001FDBC;
}

char *sub_10001FDBC(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_10001F32C(*a1);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_10001F32C(v2);

  return (char *)swift_bridgeObjectRelease();
}

char *sub_10001FE14()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v56 = (char *)&v56 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::String v58 = (char *)&v56 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v56 - v11;
  uint64_t v13 = sub_1000F000C();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v60 = v3 + 16;
  uint64_t v61 = v13;
  Swift::String v59 = v14;
  ((void (*)(char *))v14)(v12);
  swift_retain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  Swift::String v57 = v6;
  uint64_t v62 = v3;
  if (v17)
  {
    Swift::String v18 = (uint8_t *)swift_slowAlloc();
    v64[0] = swift_slowAlloc();
    *(_DWORD *)Swift::String v18 = 136315138;
    uint64_t v19 = URL.path.getter();
    uint64_t v63 = sub_100003F90(v19, v20, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Loading application cache from %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v21 = *(void (**)(char *, uint64_t))(v62 + 8);
  }
  else
  {

    swift_release_n();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v3 + 8);
  }
  v21(v12, v2);
  uint64_t v22 = v2;
  uint64_t v23 = *(void *)(v0 + 40);
  uint64_t v24 = *(void *)(v0 + 48);
  sub_1000036B0((void *)(v1 + 16), *(void *)(v1 + 40));
  sub_1001297F4(v23, v24);
  uint64_t v25 = v64[4];
  sub_1000036B0(v64, v64[3]);
  uint64_t v26 = URL.path.getter();
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v25 + 16))(v26);
  unint64_t v29 = v28;
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)v64);
  uint64_t v30 = v59;
  if (v29 >> 60 != 15)
  {
    os_log_type_t v40 = v58;
    v59(v58, v61, v22);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Loading application cache, decoding data", v43, 2u);
      os_log_type_t v40 = v58;
      swift_slowDealloc();
    }

    Swift::String v58 = (char *)v21;
    v62 += 8;
    v21(v40, v22);
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_1000254DC();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    unint64_t v53 = v64[2];
    if (v64[0] == 0xD000000000000025 && v64[1] == 0x8000000100145E30
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      sub_10002404C(v27, v29);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100012E3C();
      uint64_t v54 = swift_allocError();
      *(void *)uint64_t v55 = 0xD000000000000023;
      *(void *)(v55 + 8) = 0x8000000100146010;
      *(_OWORD *)(v55 + 16) = 0u;
      *(_OWORD *)(v55 + 32) = 0u;
      *(_OWORD *)(v55 + 48) = 0u;
      *(void *)(v55 + 64) = 0;
      *(unsigned char *)(v55 + 72) = 9;
      swift_willThrow();
      uint64_t v44 = v57;
      v30(v57, v61, v22);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        uint64_t v63 = v54;
        v64[0] = v48;
        *(_DWORD *)uint64_t v47 = 136315138;
        swift_errorRetain();
        sub_100004700(&qword_10017EB50);
        uint64_t v49 = String.init<A>(describing:)();
        uint64_t v61 = v22;
        uint64_t v63 = sub_100003F90(v49, v50, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "invalid application cache, failed to read plist: %s", v47, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v51 = v57;
        uint64_t v52 = v61;
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();

        uint64_t v51 = v44;
        uint64_t v52 = v22;
      }
      ((void (*)(char *, uint64_t))v58)(v51, v52);
      unint64_t v53 = sub_10001DC6C((uint64_t)_swiftEmptyArrayStorage);
      swift_errorRelease();
      sub_10002404C(v27, v29);
    }
    return (char *)v53;
  }
  int v31 = errno.getter();
  uint64_t result = strerror(v31);
  if (result)
  {
    uint64_t v33 = String.init(cString:)();
    unint64_t v35 = v34;
    unint64_t v36 = v56;
    v30(v56, v61, v22);
    swift_bridgeObjectRetain();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      Swift::String v58 = (char *)v21;
      unint64_t v39 = (uint8_t *)swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v39 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v63 = sub_100003F90(v33, v35, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "contentsOfFile failed to read application cache: %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v58)(v36, v22);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v21(v36, v22);
    }
    return (char *)sub_10001DC6C((uint64_t)_swiftEmptyArrayStorage);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000206E4()
{
  sub_10000478C(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC10driverkitd16ApplicationCache_applicationCachePath;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_10002079C(uint64_t a1, uint64_t a2)
{
  return sub_100020908(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000207B4(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_10002082C(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000208AC@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000208F0(uint64_t a1, uint64_t a2)
{
  return sub_100020908(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100020908(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10002094C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000209A0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100020A14()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100020AA0@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100020AE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100020B14(uint64_t a1)
{
  uint64_t v2 = sub_10001C4C0(&qword_10017C608, (void (*)(uint64_t))type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_10001C4C0(&qword_10017C610, (void (*)(uint64_t))type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100020BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ApplicationRecord(0);
  uint64_t v230 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v213 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)v213 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  v227 = (char *)v213 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v231 = (uint64_t)v213 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v235 = (uint64_t)v213 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v234 = (uint64_t)v213 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v225 = (uint64_t)v213 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)v213 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)v213 - v25;
  __chkstk_darwin(v24);
  unint64_t v28 = (char *)v213 - v27;
  uint64_t v29 = sub_100004700(&qword_10017C280);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  __chkstk_darwin(v30);
  v228 = (void *)((char *)v213 - v32);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  v221 = v23;
  v222 = v31;
  v233 = v28;
  uint64_t v229 = v4;
  int64_t v224 = 0;
  uint64_t v33 = *(void *)(a1 + 64);
  uint64_t v217 = a1 + 64;
  uint64_t v34 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v35 = -1;
  if (v34 < 64) {
    uint64_t v35 = ~(-1 << v34);
  }
  unint64_t v36 = v35 & v33;
  int64_t v218 = (unint64_t)(v34 + 63) >> 6;
  int64_t v215 = v218 - 1;
  v232 = v26;
  uint64_t v219 = a2;
  uint64_t v220 = a1;
  while (2)
  {
    if (v36)
    {
      uint64_t v226 = (v36 - 1) & v36;
      unint64_t v38 = __clz(__rbit64(v36)) | (v224 << 6);
      unint64_t v39 = v233;
LABEL_11:
      uint64_t v40 = *(void *)(a1 + 56);
      uint64_t v41 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v38);
      uint64_t v42 = *v41;
      unint64_t v43 = v41[1];
      uint64_t v44 = (uint64_t)v222;
      uint64_t *v222 = *v41;
      *(void *)(v44 + 8) = v43;
      uint64_t v45 = v40 + *(void *)(v230 + 72) * v38;
      uint64_t v46 = sub_100004700(&qword_10017C288);
      sub_10001CAB8(v45, v44 + *(int *)(v46 + 48));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v44, 0, 1, v46);
      sub_100012DE4(v42, v43);
      uint64_t v47 = v228;
      goto LABEL_33;
    }
    int64_t v48 = v224 + 1;
    unint64_t v39 = v233;
    if (__OFADD__(v224, 1))
    {
      __break(1u);
LABEL_286:
      __break(1u);
LABEL_287:
      __break(1u);
LABEL_288:
      __break(1u);
LABEL_289:
      __break(1u);
LABEL_290:
      __break(1u);
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
      goto LABEL_297;
    }
    uint64_t v47 = v228;
    if (v48 >= v218) {
      goto LABEL_32;
    }
    unint64_t v49 = *(void *)(v217 + 8 * v48);
    if (v49) {
      goto LABEL_15;
    }
    int64_t v50 = v224 + 2;
    ++v224;
    if (v48 + 1 >= v218) {
      goto LABEL_32;
    }
    unint64_t v49 = *(void *)(v217 + 8 * v50);
    if (v49)
    {
LABEL_18:
      int64_t v48 = v50;
LABEL_15:
      uint64_t v226 = (v49 - 1) & v49;
      unint64_t v38 = __clz(__rbit64(v49)) + (v48 << 6);
      int64_t v224 = v48;
      goto LABEL_11;
    }
    int64_t v224 = v48 + 1;
    if (v48 + 2 >= v218) {
      goto LABEL_32;
    }
    unint64_t v49 = *(void *)(v217 + 8 * (v48 + 2));
    if (v49)
    {
      v48 += 2;
      goto LABEL_15;
    }
    int64_t v224 = v48 + 2;
    if (v48 + 3 >= v218) {
      goto LABEL_32;
    }
    unint64_t v49 = *(void *)(v217 + 8 * (v48 + 3));
    if (v49)
    {
      v48 += 3;
      goto LABEL_15;
    }
    int64_t v50 = v48 + 4;
    int64_t v224 = v48 + 3;
    if (v48 + 4 >= v218) {
      goto LABEL_32;
    }
    unint64_t v49 = *(void *)(v217 + 8 * v50);
    if (v49) {
      goto LABEL_18;
    }
    while (1)
    {
      int64_t v48 = v50 + 1;
      if (__OFADD__(v50, 1))
      {
        __break(1u);
LABEL_333:
        __DataStorage._length.getter();
        __break(1u);
        goto LABEL_334;
      }
      if (v48 >= v218) {
        break;
      }
      unint64_t v49 = *(void *)(v217 + 8 * v48);
      ++v50;
      if (v49) {
        goto LABEL_15;
      }
    }
    int64_t v224 = v215;
LABEL_32:
    uint64_t v51 = sub_100004700(&qword_10017C288);
    uint64_t v44 = (uint64_t)v222;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v222, 1, 1, v51);
    uint64_t v226 = 0;
LABEL_33:
    sub_100024080(v44, (uint64_t)v47);
    uint64_t v52 = sub_100004700(&qword_10017C288);
    int v53 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v47, 1, v52);
    uint64_t v37 = v53 == 1;
    if (v53 == 1) {
      return v37;
    }
    unsigned int v223 = 0;
    uint64_t v54 = (uint64_t)v47 + *(int *)(v52 + 48);
    uint64_t v55 = *v47;
    unint64_t v56 = v47[1];
    sub_1000240E8(v54, (uint64_t)v39);
    unint64_t v57 = sub_10000CF34(v55, v56);
    char v59 = v58;
    sub_100012A10(v55, v56);
    if ((v59 & 1) == 0) {
      goto LABEL_282;
    }
    uint64_t v60 = v232;
    sub_10001CAB8(*(void *)(a2 + 56) + *(void *)(v230 + 72) * v57, (uint64_t)v232);
    if (*v60 != *v39 || v60[1] != v39[1])
    {
      char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v61 = (uint64_t)v221;
      sub_10001CAB8((uint64_t)v60, (uint64_t)v221);
      uint64_t v62 = v225;
      sub_10001CAB8((uint64_t)v39, v225);
      uint64_t v63 = v229;
      if (v64) {
        goto LABEL_39;
      }
      sub_10001CB1C(v62);
      sub_10001CB1C(v61);
      sub_10001CAB8((uint64_t)v60, v234);
      sub_10001CAB8((uint64_t)v39, v235);
      uint64_t v66 = v7;
      uint64_t v67 = (uint64_t)v10;
      uint64_t v68 = (uint64_t)v227;
      goto LABEL_279;
    }
    uint64_t v61 = (uint64_t)v221;
    sub_10001CAB8((uint64_t)v60, (uint64_t)v221);
    uint64_t v62 = v225;
    sub_10001CAB8((uint64_t)v39, v225);
    uint64_t v63 = v229;
LABEL_39:
    char v65 = static URL.== infix(_:_:)();
    sub_10001CB1C(v62);
    sub_10001CB1C(v61);
    sub_10001CAB8((uint64_t)v60, v234);
    sub_10001CAB8((uint64_t)v39, v235);
    uint64_t v66 = v7;
    uint64_t v67 = (uint64_t)v10;
    uint64_t v68 = (uint64_t)v227;
    if ((v65 & 1) == 0) {
      goto LABEL_279;
    }
    uint64_t v69 = *(int *)(v63 + 24);
    uint64_t v70 = *(void **)(v234 + v69);
    uint64_t v71 = *(void **)(v235 + v69);
    uint64_t v72 = v70[2];
    if (v72 != v71[2]) {
      goto LABEL_279;
    }
    if (!v72 || v70 == v71) {
      goto LABEL_51;
    }
    if ((v70[4] != v71[4] || v70[5] != v71[5]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
LABEL_279:
      sub_10001CB1C(v234);
      sub_10001CB1C(v235);
      uint64_t v75 = (uint64_t)v232;
      sub_10001CAB8((uint64_t)v232, v231);
      sub_10001CAB8((uint64_t)v39, v68);
LABEL_280:
      sub_10001CB1C(v231);
      sub_10001CB1C(v68);
      sub_10001CAB8(v75, v67);
      sub_10001CAB8((uint64_t)v233, (uint64_t)v66);
LABEL_281:
      sub_10001CB1C(v67);
      sub_10001CB1C((uint64_t)v66);
      sub_10001CB1C(v75);
      unint64_t v39 = v233;
LABEL_282:
      sub_10001CB1C((uint64_t)v39);
      return 0;
    }
    if (v72 != 1)
    {
      if (v70[6] == v71[6] && v70[7] == v71[7] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v73 = v72 - 2;
        if (!v73) {
          goto LABEL_51;
        }
        uint64_t v108 = v70 + 9;
        unint64_t v109 = v71 + 9;
        while (1)
        {
          BOOL v110 = *(v108 - 1) == *(v109 - 1) && *v108 == *v109;
          if (!v110 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          v108 += 2;
          v109 += 2;
          if (!--v73) {
            goto LABEL_51;
          }
        }
      }
      goto LABEL_279;
    }
LABEL_51:
    sub_10001CB1C(v234);
    sub_10001CB1C(v235);
    uint64_t v74 = v231;
    uint64_t v75 = (uint64_t)v232;
    sub_10001CAB8((uint64_t)v232, v231);
    sub_10001CAB8((uint64_t)v39, v68);
    uint64_t v76 = *(int *)(v63 + 28);
    uint64_t v77 = *(void *)(v74 + v76);
    unint64_t v78 = *(void *)(v74 + v76 + 8);
    uint64_t v79 = (uint64_t *)(v68 + v76);
    uint64_t v81 = *v79;
    unint64_t v80 = v79[1];
    uint64_t v82 = 0;
    switch(v78 >> 62)
    {
      case 1uLL:
        LODWORD(v82) = HIDWORD(v77) - v77;
        if (__OFSUB__(HIDWORD(v77), v77)) {
          goto LABEL_286;
        }
        uint64_t v82 = (int)v82;
        break;
      case 2uLL:
        uint64_t v84 = *(void *)(v77 + 16);
        uint64_t v83 = *(void *)(v77 + 24);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v82 = v83 - v84;
        if (!v85) {
          break;
        }
        goto LABEL_287;
      case 3uLL:
        break;
      default:
        uint64_t v82 = BYTE6(v78);
        break;
    }
    unint64_t v86 = v80 >> 62;
    switch(v80 >> 62)
    {
      case 1uLL:
        LODWORD(v87) = HIDWORD(v81) - v81;
        if (__OFSUB__(HIDWORD(v81), v81)) {
          goto LABEL_288;
        }
        uint64_t v87 = (int)v87;
LABEL_61:
        if (v82 != v87) {
          goto LABEL_280;
        }
        if (v82 < 1)
        {
LABEL_72:
          sub_10001CB1C(v231);
          sub_10001CB1C(v68);
          sub_10001CAB8(v75, v67);
          sub_10001CAB8((uint64_t)v233, (uint64_t)v66);
          goto LABEL_167;
        }
        break;
      case 2uLL:
        uint64_t v89 = *(void *)(v81 + 16);
        uint64_t v88 = *(void *)(v81 + 24);
        BOOL v85 = __OFSUB__(v88, v89);
        uint64_t v87 = v88 - v89;
        if (!v85) {
          goto LABEL_61;
        }
        goto LABEL_289;
      case 3uLL:
        if (!v82) {
          goto LABEL_72;
        }
        goto LABEL_280;
      default:
        uint64_t v87 = BYTE6(v80);
        goto LABEL_61;
    }
    switch(v78 >> 62)
    {
      case 1uLL:
        if ((int)v77 > v77 >> 32) {
          goto LABEL_294;
        }
        swift_retain();
        uint64_t v95 = __DataStorage._bytes.getter();
        if (v95)
        {
          uint64_t v96 = v95;
          uint64_t v97 = __DataStorage._offset.getter();
          if (!__OFSUB__((int)v77, v97))
          {
            v216 = (char *)(v96 + (int)v77 - v97);
            goto LABEL_112;
          }
LABEL_297:
          __break(1u);
LABEL_298:
          __break(1u);
LABEL_299:
          __break(1u);
LABEL_300:
          __break(1u);
LABEL_301:
          __break(1u);
LABEL_302:
          __break(1u);
LABEL_303:
          __break(1u);
LABEL_304:
          __break(1u);
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
LABEL_311:
          __break(1u);
LABEL_312:
          __break(1u);
LABEL_313:
          __break(1u);
LABEL_314:
          __break(1u);
LABEL_315:
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
LABEL_319:
          __break(1u);
LABEL_320:
          __break(1u);
LABEL_321:
          __break(1u);
LABEL_322:
          __break(1u);
LABEL_323:
          __break(1u);
LABEL_324:
          __break(1u);
LABEL_325:
          __break(1u);
LABEL_326:
          __break(1u);
LABEL_327:
          __break(1u);
LABEL_328:
          __break(1u);
LABEL_329:
          __break(1u);
LABEL_330:
          __break(1u);
LABEL_331:
          __break(1u);
        }
        v216 = 0;
LABEL_112:
        uint64_t v75 = (uint64_t)v232;
        __DataStorage._length.getter();
        if (!v86)
        {
          __s1[0] = v81;
          LOWORD(__s1[1]) = v80;
          BYTE2(__s1[1]) = BYTE2(v80);
          BYTE3(__s1[1]) = BYTE3(v80);
          BYTE4(__s1[1]) = BYTE4(v80);
          BYTE5(__s1[1]) = BYTE5(v80);
          uint64_t v68 = (uint64_t)v227;
          if (v216)
          {
            int v107 = memcmp(v216, __s1, BYTE6(v80));
            goto LABEL_165;
          }
LABEL_342:
          __break(1u);
LABEL_343:
          __break(1u);
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __DataStorage._length.getter();
          __break(1u);
LABEL_348:
          __DataStorage._length.getter();
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
          goto LABEL_355;
        }
        uint64_t v68 = (uint64_t)v227;
        if (v86 != 1)
        {
          uint64_t v135 = *(void *)(v81 + 16);
          uint64_t v136 = *(void *)(v81 + 24);
          swift_retain();
          swift_retain();
          unint64_t v137 = (char *)__DataStorage._bytes.getter();
          if (v137)
          {
            uint64_t v138 = __DataStorage._offset.getter();
            if (__OFSUB__(v135, v138)) {
              goto LABEL_324;
            }
            v137 += v135 - v138;
          }
          BOOL v85 = __OFSUB__(v136, v135);
          int64_t v139 = v136 - v135;
          if (v85) {
            goto LABEL_309;
          }
          uint64_t v140 = __DataStorage._length.getter();
          if (v140 >= v139) {
            size_t v141 = v139;
          }
          else {
            size_t v141 = v140;
          }
          if (!v216) {
            goto LABEL_343;
          }
          uint64_t v75 = (uint64_t)v232;
          if (v137)
          {
            int v107 = memcmp(v216, v137, v141);
            swift_release();
            swift_release();
            goto LABEL_165;
          }
          goto LABEL_344;
        }
        if (v81 >> 32 < (int)v81) {
          goto LABEL_308;
        }
        swift_retain();
        uint64_t v115 = (char *)__DataStorage._bytes.getter();
        if (v115)
        {
          v214 = v115;
          uint64_t v116 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v81, v116)) {
            goto LABEL_325;
          }
          int64_t v117 = &v214[(int)v81 - v116];
        }
        else
        {
          int64_t v117 = 0;
        }
        uint64_t v142 = __DataStorage._length.getter();
        if (v142 >= (v81 >> 32) - (int)v81) {
          size_t v143 = (v81 >> 32) - (int)v81;
        }
        else {
          size_t v143 = v142;
        }
        if (!v216) {
          goto LABEL_345;
        }
        uint64_t v75 = (uint64_t)v232;
        if (!v117) {
          goto LABEL_346;
        }
        int v107 = memcmp(v216, v117, v143);
        sub_100012A10(v81, v80);
LABEL_165:
        sub_100012A10(v77, v78);
LABEL_166:
        sub_10001CB1C(v231);
        sub_10001CB1C(v68);
        sub_10001CAB8(v75, v67);
        sub_10001CAB8((uint64_t)v233, (uint64_t)v66);
        if (v107) {
          goto LABEL_281;
        }
LABEL_167:
        uint64_t v144 = *(int *)(v229 + 32);
        uint64_t v145 = *(void *)(v67 + v144);
        unint64_t v146 = *(void *)(v67 + v144 + 8);
        uint64_t v147 = (uint64_t *)&v66[v144];
        uint64_t v149 = *v147;
        unint64_t v148 = v147[1];
        uint64_t v150 = 0;
        switch(v146 >> 62)
        {
          case 1uLL:
            LODWORD(v150) = HIDWORD(v145) - v145;
            if (__OFSUB__(HIDWORD(v145), v145)) {
              goto LABEL_290;
            }
            uint64_t v150 = (int)v150;
            break;
          case 2uLL:
            uint64_t v152 = *(void *)(v145 + 16);
            uint64_t v151 = *(void *)(v145 + 24);
            BOOL v85 = __OFSUB__(v151, v152);
            uint64_t v150 = v151 - v152;
            if (!v85) {
              goto LABEL_172;
            }
            goto LABEL_291;
          case 3uLL:
            goto LABEL_172;
          default:
            uint64_t v150 = BYTE6(v146);
            goto LABEL_172;
        }
        break;
      case 2uLL:
        v216 = v66;
        uint64_t v98 = *(void *)(v77 + 16);
        swift_retain();
        swift_retain();
        uint64_t v99 = __DataStorage._bytes.getter();
        if (!v99)
        {
          uint64_t v101 = v78 & 0x3FFFFFFFFFFFFFFFLL;
          v214 = 0;
LABEL_99:
          uint64_t v75 = (uint64_t)v232;
          __DataStorage._length.getter();
          uint64_t v66 = v216;
          if (!v86)
          {
            __s1[0] = v81;
            LOWORD(__s1[1]) = v80;
            BYTE2(__s1[1]) = BYTE2(v80);
            BYTE3(__s1[1]) = BYTE3(v80);
            BYTE4(__s1[1]) = BYTE4(v80);
            BYTE5(__s1[1]) = BYTE5(v80);
            if (v214)
            {
              int v107 = memcmp(v214, __s1, BYTE6(v80));
              goto LABEL_135;
            }
            goto LABEL_339;
          }
          if (v86 != 1)
          {
            uint64_t v128 = *(void *)(v81 + 16);
            uint64_t v129 = *(void *)(v81 + 24);
            swift_retain();
            swift_retain();
            uint64_t v130 = (char *)__DataStorage._bytes.getter();
            if (v130)
            {
              uint64_t v131 = __DataStorage._offset.getter();
              if (__OFSUB__(v128, v131)) {
                goto LABEL_322;
              }
              v130 += v128 - v131;
            }
            BOOL v85 = __OFSUB__(v129, v128);
            int64_t v132 = v129 - v128;
            if (v85) {
              goto LABEL_307;
            }
            uint64_t v133 = __DataStorage._length.getter();
            if (v133 >= v132) {
              size_t v134 = v132;
            }
            else {
              size_t v134 = v133;
            }
            if (v214)
            {
              uint64_t v75 = (uint64_t)v232;
              if (v130)
              {
                int v107 = memcmp(v214, v130, v134);
                swift_release();
                swift_release();
                goto LABEL_135;
              }
LABEL_341:
              __break(1u);
              goto LABEL_342;
            }
LABEL_340:
            __break(1u);
            goto LABEL_341;
          }
          v213[1] = v101;
          if (v81 >> 32 < (int)v81) {
            goto LABEL_304;
          }
          swift_retain();
          uint64_t v111 = (char *)__DataStorage._bytes.getter();
          if (v111)
          {
            uint64_t v112 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v81, v112)) {
              goto LABEL_323;
            }
            v111 += (int)v81 - v112;
          }
          uint64_t v113 = __DataStorage._length.getter();
          if (v113 >= (v81 >> 32) - (int)v81) {
            size_t v114 = (v81 >> 32) - (int)v81;
          }
          else {
            size_t v114 = v113;
          }
          if (v214)
          {
            uint64_t v75 = (uint64_t)v232;
            if (v111)
            {
              int v107 = memcmp(v214, v111, v114);
              sub_100012A10(v81, v80);
LABEL_135:
              swift_release();
              swift_release();
              goto LABEL_166;
            }
            goto LABEL_336;
          }
LABEL_335:
          __break(1u);
LABEL_336:
          __break(1u);
LABEL_337:
          __break(1u);
LABEL_338:
          __break(1u);
LABEL_339:
          __break(1u);
          goto LABEL_340;
        }
        uint64_t v100 = v99;
        uint64_t v101 = v78 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v102 = __DataStorage._offset.getter();
        if (!__OFSUB__(v98, v102))
        {
          v214 = (char *)(v100 + v98 - v102);
          goto LABEL_99;
        }
        goto LABEL_296;
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v86) {
          goto LABEL_97;
        }
        if (v86 == 1)
        {
          uint64_t v90 = (v81 >> 32) - (int)v81;
          if (v81 >> 32 < (int)v81) {
            goto LABEL_301;
          }
          swift_retain();
          uint64_t v103 = __DataStorage._bytes.getter();
          if (v103)
          {
            uint64_t v92 = v103;
            uint64_t v104 = __DataStorage._offset.getter();
            uint64_t v94 = (int)v81 - v104;
            if (__OFSUB__((int)v81, v104)) {
              goto LABEL_303;
            }
            goto LABEL_85;
          }
LABEL_334:
          __DataStorage._length.getter();
          __break(1u);
          goto LABEL_335;
        }
        uint64_t v124 = *(void *)(v81 + 16);
        uint64_t v125 = *(void *)(v81 + 24);
        swift_retain();
        swift_retain();
        uint64_t v120 = (char *)__DataStorage._bytes.getter();
        if (v120)
        {
          uint64_t v126 = __DataStorage._offset.getter();
          if (__OFSUB__(v124, v126)) {
            goto LABEL_321;
          }
          v120 += v124 - v126;
        }
        BOOL v85 = __OFSUB__(v125, v124);
        int64_t v122 = v125 - v124;
        if (v85) {
          goto LABEL_306;
        }
        uint64_t v123 = __DataStorage._length.getter();
        uint64_t v75 = (uint64_t)v232;
        if (!v120) {
          goto LABEL_338;
        }
        goto LABEL_129;
      default:
        __s1[0] = v77;
        LOWORD(__s1[1]) = v78;
        BYTE2(__s1[1]) = BYTE2(v78);
        BYTE3(__s1[1]) = BYTE3(v78);
        BYTE4(__s1[1]) = BYTE4(v78);
        BYTE5(__s1[1]) = BYTE5(v78);
        if (!v86)
        {
LABEL_97:
          uint64_t __s2 = v81;
          __int16 v237 = v80;
          char v238 = BYTE2(v80);
          char v239 = BYTE3(v80);
          char v240 = BYTE4(v80);
          char v241 = BYTE5(v80);
          int v107 = memcmp(__s1, &__s2, BYTE6(v80));
          goto LABEL_166;
        }
        if (v86 != 1)
        {
          uint64_t v118 = *(void *)(v81 + 16);
          uint64_t v119 = *(void *)(v81 + 24);
          swift_retain();
          swift_retain();
          uint64_t v120 = (char *)__DataStorage._bytes.getter();
          if (v120)
          {
            uint64_t v121 = __DataStorage._offset.getter();
            if (__OFSUB__(v118, v121)) {
              goto LABEL_320;
            }
            v120 += v118 - v121;
          }
          BOOL v85 = __OFSUB__(v119, v118);
          int64_t v122 = v119 - v118;
          if (v85) {
            goto LABEL_305;
          }
          uint64_t v123 = __DataStorage._length.getter();
          uint64_t v75 = (uint64_t)v232;
          if (!v120) {
            goto LABEL_337;
          }
LABEL_129:
          if (v123 >= v122) {
            size_t v127 = v122;
          }
          else {
            size_t v127 = v123;
          }
          int v107 = memcmp(__s1, v120, v127);
          goto LABEL_135;
        }
        uint64_t v90 = (v81 >> 32) - (int)v81;
        if (v81 >> 32 < (int)v81) {
          goto LABEL_300;
        }
        swift_retain();
        uint64_t v91 = __DataStorage._bytes.getter();
        if (v91)
        {
          uint64_t v92 = v91;
          uint64_t v93 = __DataStorage._offset.getter();
          uint64_t v94 = (int)v81 - v93;
          if (__OFSUB__((int)v81, v93)) {
            goto LABEL_302;
          }
LABEL_85:
          uint64_t v105 = __DataStorage._length.getter();
          if (v105 >= v90) {
            size_t v106 = v90;
          }
          else {
            size_t v106 = v105;
          }
          int v107 = memcmp(__s1, (const void *)(v92 + v94), v106);
          sub_100012A10(v81, v80);
          uint64_t v75 = (uint64_t)v232;
          goto LABEL_166;
        }
        goto LABEL_333;
    }
LABEL_172:
    unint64_t v153 = v148 >> 62;
    switch(v148 >> 62)
    {
      case 1uLL:
        LODWORD(v154) = HIDWORD(v149) - v149;
        if (__OFSUB__(HIDWORD(v149), v149)) {
          goto LABEL_292;
        }
        uint64_t v154 = (int)v154;
LABEL_177:
        if (v150 != v154) {
          goto LABEL_281;
        }
        if (v150 < 1)
        {
LABEL_8:
          uint64_t v10 = (char *)v67;
          sub_10001CB1C(v67);
          uint64_t v7 = v66;
          sub_10001CB1C((uint64_t)v66);
          sub_10001CB1C(v75);
          sub_10001CB1C((uint64_t)v233);
          a2 = v219;
          a1 = v220;
          unint64_t v36 = v226;
          continue;
        }
        switch(v146 >> 62)
        {
          case 1uLL:
            if ((int)v145 > v145 >> 32) {
              goto LABEL_295;
            }
            swift_retain();
            uint64_t v162 = __DataStorage._bytes.getter();
            if (v162)
            {
              uint64_t v163 = v162;
              uint64_t v164 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v145, v164)) {
                goto LABEL_299;
              }
              v216 = (char *)(v163 + (int)v145 - v164);
            }
            else
            {
              v216 = 0;
            }
            __DataStorage._length.getter();
            uint64_t v75 = (uint64_t)v232;
            if (!v153)
            {
              __s1[0] = v149;
              LOWORD(__s1[1]) = v148;
              BYTE2(__s1[1]) = BYTE2(v148);
              BYTE3(__s1[1]) = BYTE3(v148);
              BYTE4(__s1[1]) = BYTE4(v148);
              BYTE5(__s1[1]) = BYTE5(v148);
              if (v216)
              {
                int v175 = memcmp(v216, __s1, BYTE6(v148));
                goto LABEL_274;
              }
              goto LABEL_354;
            }
            if (v153 != 1)
            {
              uint64_t v201 = *(void *)(v149 + 16);
              uint64_t v202 = *(void *)(v149 + 24);
              swift_retain();
              swift_retain();
              v203 = (char *)__DataStorage._bytes.getter();
              if (v203)
              {
                uint64_t v204 = __DataStorage._offset.getter();
                if (__OFSUB__(v201, v204)) {
                  goto LABEL_330;
                }
                v203 += v201 - v204;
              }
              BOOL v85 = __OFSUB__(v202, v201);
              int64_t v205 = v202 - v201;
              if (v85) {
                goto LABEL_319;
              }
              uint64_t v206 = __DataStorage._length.getter();
              if (v206 >= v205) {
                size_t v207 = v205;
              }
              else {
                size_t v207 = v206;
              }
              if (v216)
              {
                uint64_t v75 = (uint64_t)v232;
                if (v203)
                {
                  int v175 = memcmp(v216, v203, v207);
                  swift_release();
                  swift_release();
                  goto LABEL_274;
                }
                goto LABEL_356;
              }
LABEL_355:
              __break(1u);
LABEL_356:
              __break(1u);
LABEL_357:
              __break(1u);
              goto LABEL_358;
            }
            if (v149 >> 32 < (int)v149) {
              goto LABEL_317;
            }
            swift_retain();
            uint64_t v180 = __DataStorage._bytes.getter();
            if (v180)
            {
              uint64_t v181 = v180;
              uint64_t v182 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v149, v182)) {
                goto LABEL_331;
              }
              v183 = (const void *)(v181 + (int)v149 - v182);
            }
            else
            {
              v183 = 0;
            }
            uint64_t v210 = __DataStorage._length.getter();
            if (v210 >= (v149 >> 32) - (int)v149) {
              size_t v211 = (v149 >> 32) - (int)v149;
            }
            else {
              size_t v211 = v210;
            }
            if (!v216) {
              goto LABEL_359;
            }
            uint64_t v75 = (uint64_t)v232;
            if (!v183) {
              goto LABEL_360;
            }
            int v175 = memcmp(v216, v183, v211);
            sub_100012A10(v149, v148);
LABEL_274:
            sub_100012A10(v145, v146);
LABEL_275:
            a2 = v219;
            a1 = v220;
LABEL_276:
            uint64_t v37 = v223;
            uint64_t v10 = (char *)v67;
            sub_10001CB1C(v67);
            uint64_t v7 = v66;
            sub_10001CB1C((uint64_t)v66);
            sub_10001CB1C(v75);
            sub_10001CB1C((uint64_t)v233);
            unint64_t v36 = v226;
            if (!v175) {
              continue;
            }
            return v37;
          case 2uLL:
            uint64_t v165 = v67;
            uint64_t v166 = v66;
            uint64_t v167 = *(void *)(v145 + 16);
            swift_retain();
            swift_retain();
            uint64_t v168 = __DataStorage._bytes.getter();
            v216 = (char *)(v146 & 0x3FFFFFFFFFFFFFFFLL);
            if (v168)
            {
              uint64_t v169 = v168;
              uint64_t v170 = __DataStorage._offset.getter();
              a1 = v220;
              if (__OFSUB__(v167, v170)) {
                goto LABEL_298;
              }
              v214 = (char *)(v169 + v167 - v170);
              uint64_t v66 = v166;
            }
            else
            {
              v214 = 0;
              uint64_t v66 = v166;
              a1 = v220;
            }
            __DataStorage._length.getter();
            uint64_t v67 = v165;
            uint64_t v75 = (uint64_t)v232;
            if (v153)
            {
              if (v153 == 1)
              {
                if (v149 >> 32 < (int)v149) {
                  goto LABEL_312;
                }
                swift_retain();
                uint64_t v176 = __DataStorage._bytes.getter();
                if (v176)
                {
                  uint64_t v177 = v176;
                  uint64_t v178 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v149, v178)) {
                    goto LABEL_329;
                  }
                  uint64_t v179 = (const void *)(v177 + (int)v149 - v178);
                }
                else
                {
                  uint64_t v179 = 0;
                }
                uint64_t v208 = __DataStorage._length.getter();
                if (v208 >= (v149 >> 32) - (int)v149) {
                  size_t v209 = (v149 >> 32) - (int)v149;
                }
                else {
                  size_t v209 = v208;
                }
                uint64_t v75 = (uint64_t)v232;
                if (!v214) {
                  goto LABEL_357;
                }
                a1 = v220;
                if (!v179)
                {
LABEL_358:
                  __break(1u);
LABEL_359:
                  __break(1u);
LABEL_360:
                  __break(1u);
                  JUMPOUT(0x100022628);
                }
                int v175 = memcmp(v214, v179, v209);
                sub_100012A10(v149, v148);
              }
              else
              {
                uint64_t v194 = *(void *)(v149 + 16);
                uint64_t v195 = *(void *)(v149 + 24);
                swift_retain();
                swift_retain();
                v196 = (char *)__DataStorage._bytes.getter();
                if (v196)
                {
                  uint64_t v197 = __DataStorage._offset.getter();
                  if (__OFSUB__(v194, v197)) {
                    goto LABEL_328;
                  }
                  v196 += v194 - v197;
                }
                BOOL v85 = __OFSUB__(v195, v194);
                int64_t v198 = v195 - v194;
                if (v85) {
                  goto LABEL_318;
                }
                uint64_t v199 = __DataStorage._length.getter();
                if (v199 >= v198) {
                  size_t v200 = v198;
                }
                else {
                  size_t v200 = v199;
                }
                if (!v214) {
                  goto LABEL_352;
                }
                uint64_t v75 = (uint64_t)v232;
                if (!v196) {
                  goto LABEL_353;
                }
                int v175 = memcmp(v214, v196, v200);
                swift_release();
                swift_release();
              }
            }
            else
            {
              __s1[0] = v149;
              LOWORD(__s1[1]) = v148;
              BYTE2(__s1[1]) = BYTE2(v148);
              BYTE3(__s1[1]) = BYTE3(v148);
              BYTE4(__s1[1]) = BYTE4(v148);
              BYTE5(__s1[1]) = BYTE5(v148);
              if (!v214) {
                goto LABEL_351;
              }
              int v175 = memcmp(v214, __s1, BYTE6(v148));
            }
            goto LABEL_265;
          case 3uLL:
            memset(__s1, 0, 14);
            a1 = v220;
            if (v153)
            {
              if (v153 == 1)
              {
                uint64_t v157 = (v149 >> 32) - (int)v149;
                if (v149 >> 32 < (int)v149) {
                  goto LABEL_311;
                }
                swift_retain();
                uint64_t v171 = __DataStorage._bytes.getter();
                if (!v171) {
                  goto LABEL_348;
                }
                uint64_t v159 = v171;
                uint64_t v172 = __DataStorage._offset.getter();
                uint64_t v161 = (int)v149 - v172;
                if (__OFSUB__((int)v149, v172)) {
                  goto LABEL_316;
                }
LABEL_199:
                uint64_t v173 = __DataStorage._length.getter();
                if (v173 >= v157) {
                  size_t v174 = v157;
                }
                else {
                  size_t v174 = v173;
                }
                int v175 = memcmp(__s1, (const void *)(v159 + v161), v174);
                sub_100012A10(v149, v148);
                a2 = v219;
                uint64_t v75 = (uint64_t)v232;
                goto LABEL_276;
              }
              uint64_t v190 = *(void *)(v149 + 16);
              uint64_t v191 = *(void *)(v149 + 24);
              swift_retain();
              swift_retain();
              v186 = (char *)__DataStorage._bytes.getter();
              if (v186)
              {
                uint64_t v192 = __DataStorage._offset.getter();
                if (__OFSUB__(v190, v192)) {
                  goto LABEL_327;
                }
                v186 += v190 - v192;
              }
              BOOL v85 = __OFSUB__(v191, v190);
              int64_t v188 = v191 - v190;
              if (v85) {
                goto LABEL_314;
              }
              uint64_t v189 = __DataStorage._length.getter();
              uint64_t v75 = (uint64_t)v232;
              if (!v186) {
                goto LABEL_350;
              }
LABEL_230:
              if (v189 >= v188) {
                size_t v193 = v188;
              }
              else {
                size_t v193 = v189;
              }
              int v175 = memcmp(__s1, v186, v193);
LABEL_265:
              swift_release();
              swift_release();
            }
            else
            {
              uint64_t __s2 = v149;
              __int16 v237 = v148;
              char v238 = BYTE2(v148);
              char v239 = BYTE3(v148);
              char v240 = BYTE4(v148);
              char v241 = BYTE5(v148);
              int v175 = memcmp(__s1, &__s2, BYTE6(v148));
            }
            a2 = v219;
            goto LABEL_276;
          default:
            __s1[0] = v145;
            LOWORD(__s1[1]) = v146;
            BYTE2(__s1[1]) = BYTE2(v146);
            BYTE3(__s1[1]) = BYTE3(v146);
            BYTE4(__s1[1]) = BYTE4(v146);
            BYTE5(__s1[1]) = BYTE5(v146);
            if (!v153)
            {
              uint64_t __s2 = v149;
              __int16 v237 = v148;
              char v238 = BYTE2(v148);
              char v239 = BYTE3(v148);
              char v240 = BYTE4(v148);
              char v241 = BYTE5(v148);
              int v175 = memcmp(__s1, &__s2, BYTE6(v148));
              goto LABEL_275;
            }
            a1 = v220;
            if (v153 == 1)
            {
              uint64_t v157 = (v149 >> 32) - (int)v149;
              if (v149 >> 32 < (int)v149) {
                goto LABEL_310;
              }
              swift_retain();
              uint64_t v158 = __DataStorage._bytes.getter();
              if (!v158) {
                goto LABEL_347;
              }
              uint64_t v159 = v158;
              uint64_t v160 = __DataStorage._offset.getter();
              uint64_t v161 = (int)v149 - v160;
              if (__OFSUB__((int)v149, v160)) {
                goto LABEL_315;
              }
              goto LABEL_199;
            }
            uint64_t v184 = *(void *)(v149 + 16);
            uint64_t v185 = *(void *)(v149 + 24);
            swift_retain();
            swift_retain();
            v186 = (char *)__DataStorage._bytes.getter();
            if (v186)
            {
              uint64_t v187 = __DataStorage._offset.getter();
              if (__OFSUB__(v184, v187)) {
                goto LABEL_326;
              }
              v186 += v184 - v187;
            }
            BOOL v85 = __OFSUB__(v185, v184);
            int64_t v188 = v185 - v184;
            if (v85) {
              goto LABEL_313;
            }
            uint64_t v189 = __DataStorage._length.getter();
            uint64_t v75 = (uint64_t)v232;
            if (!v186) {
              goto LABEL_349;
            }
            goto LABEL_230;
        }
      case 2uLL:
        uint64_t v156 = *(void *)(v149 + 16);
        uint64_t v155 = *(void *)(v149 + 24);
        BOOL v85 = __OFSUB__(v155, v156);
        uint64_t v154 = v155 - v156;
        if (!v85) {
          goto LABEL_177;
        }
        goto LABEL_293;
      case 3uLL:
        if (!v150) {
          goto LABEL_8;
        }
        goto LABEL_281;
      default:
        uint64_t v154 = BYTE6(v148);
        goto LABEL_177;
    }
  }
}

unint64_t sub_100022688(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_10002271C(a1, v2);
}

unint64_t sub_10002271C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_100022894@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_100012DE4(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x100022AF8);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_100012A10(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_100022B08(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_100012DE4(a1, a2);
      char v5 = sub_100023AD4((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
      sub_100012A10(a1, a2);
      goto LABEL_6;
    case 2uLL:
      uint64_t v10 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      char v5 = sub_100023AD4(v11, v12, v10, a3, a4);
      swift_release();
      swift_release();
LABEL_6:
      sub_100012A10(a3, a4);
      return v5 & 1;
    case 3uLL:
      memset(__s1, 0, 14);
      goto LABEL_8;
    default:
      __s1[0] = a1;
      LOWORD(__s1[1]) = a2;
      BYTE2(__s1[1]) = BYTE2(a2);
      BYTE3(__s1[1]) = BYTE3(a2);
      BYTE4(__s1[1]) = BYTE4(a2);
      BYTE5(__s1[1]) = BYTE5(a2);
LABEL_8:
      sub_100022894((uint64_t)__s1, a3, a4, &v14);
      sub_100012A10(a3, a4);
      if (!v4) {
        char v5 = v14;
      }
      return v5 & 1;
  }
}

uint64_t sub_100022D38@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10000CF34(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10002367C();
      uint64_t v11 = v21;
    }
    sub_100012A10(*(void *)(*(void *)(v11 + 48) + 16 * v8), *(void *)(*(void *)(v11 + 48) + 16 * v8 + 8));
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for ApplicationRecord(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_1000240E8(v12 + *(void *)(v20 + 72) * v8, a3);
    sub_10002325C(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for ApplicationRecord(0);
    char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_100022EC8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for ApplicationRecord(0);
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100004700(&qword_10017C5C8);
  char v9 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v8 + 16))
  {
    uint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v13 = *(void *)(v8 + 64);
    unint64_t v39 = (void *)(v8 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    while (1)
    {
      if (v15)
      {
        unint64_t v21 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v22 = v21 | (v18 << 6);
      }
      else
      {
        int64_t v23 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v38) {
          goto LABEL_34;
        }
        unint64_t v24 = v39[v23];
        ++v18;
        if (!v24)
        {
          int64_t v18 = v23 + 1;
          if (v23 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v24 = v39[v18];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v9)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v39 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v39[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v18 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v24 = v39[v18];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v25;
          }
        }
LABEL_21:
        unint64_t v15 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v18 << 6);
      }
      uint64_t v26 = *(void *)(v40 + 72);
      uint64_t v27 = *(void *)(v8 + 56) + v26 * v22;
      unint64_t v28 = *(void *)(*(void *)(v8 + 48) + 16 * v22 + 8);
      long long v41 = *(_OWORD *)(*(void *)(v8 + 48) + 16 * v22);
      if (v9)
      {
        sub_1000240E8(v27, (uint64_t)v7);
      }
      else
      {
        sub_10001CAB8(v27, (uint64_t)v7);
        sub_100012DE4(v41, v28);
      }
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
        long long v20 = v41;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        long long v20 = v41;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_OWORD *)(*(void *)(v11 + 48) + 16 * v19) = v20;
      uint64_t result = sub_1000240E8((uint64_t)v7, *(void *)(v11 + 56) + v26 * v19);
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

unint64_t sub_10002325C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        char v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        sub_100012DE4(v10, v11);
        Data.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();
        uint64_t result = sub_100012A10(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
        uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          _OWORD *v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(type metadata accessor for ApplicationRecord(0) - 8) + 72);
        int64_t v19 = v18 * v3;
        uint64_t result = v17 + v18 * v3;
        int64_t v20 = v18 * v6;
        unint64_t v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v19 == v20) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v13) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    int64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << result) - 1;
  }
  uint64_t *v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10002347C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10000CF34(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10002367C();
      goto LABEL_7;
    }
    sub_100022EC8(v15, a4 & 1);
    unint64_t v22 = sub_10000CF34(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = v19 + *(void *)(*(void *)(type metadata accessor for ApplicationRecord(0) - 8) + 72) * v12;
    return sub_1000255F8(a1, v20);
  }
LABEL_13:
  sub_1000235E4(v12, a2, a3, a1, v18);

  return sub_100012DE4(a2, a3);
}

uint64_t sub_1000235E4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v8 = (void *)(a5[6] + 16 * a1);
  *unint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for ApplicationRecord(0);
  uint64_t result = sub_1000240E8(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void *sub_10002367C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ApplicationRecord(0);
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004700(&qword_10017C5C8);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  BOOL v27 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    sub_10001CAB8(*(void *)(v5 + 56) + v21, (uint64_t)v4);
    unint64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + v17);
    *unint64_t v22 = v19;
    v22[1] = v20;
    sub_1000240E8((uint64_t)v4, *(void *)(v7 + 56) + v21);
    uint64_t result = (void *)sub_100012DE4(v19, v20);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000238EC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100145F70
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100145F90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000100145FB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100145FD0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100023AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_100022894(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_100023B8C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x100023CC8);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_20;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v15 = 1;
            }
            else
            {
              sub_100012DE4(a3, a4);
              char v15 = sub_100022B08(a1, a2, a3, a4);
            }
          }
          else
          {
            char v15 = 0;
          }
          return v15 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_21;
        case 3uLL:
          char v15 = v8 == 0;
          return v15 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100023CE8(void *a1, void *a2)
{
  uint64_t v4 = (int *)type metadata accessor for ApplicationRecord(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v39 = (uint64_t)&v39 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v16 = (char *)&v39 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  unint64_t v22 = (char *)&v39 - v21;
  __chkstk_darwin(v20);
  unint64_t v24 = (char *)&v39 - v23;
  uint64_t v25 = a1[1];
  uint64_t v26 = a2[1];
  BOOL v27 = *a1 == *a2;
  uint64_t v40 = v28;
  if (v27 && v25 == v26)
  {
    sub_10001CAB8((uint64_t)a1, (uint64_t)&v39 - v23);
    sub_10001CAB8((uint64_t)a2, (uint64_t)v22);
  }
  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_10001CAB8((uint64_t)a1, (uint64_t)v24);
    sub_10001CAB8((uint64_t)a2, (uint64_t)v22);
    if ((v29 & 1) == 0)
    {
      sub_10001CB1C((uint64_t)v22);
      sub_10001CB1C((uint64_t)v24);
      sub_10001CAB8((uint64_t)a1, (uint64_t)v19);
      sub_10001CAB8((uint64_t)a2, (uint64_t)v16);
      goto LABEL_11;
    }
  }
  char v30 = static URL.== infix(_:_:)();
  sub_10001CB1C((uint64_t)v22);
  sub_10001CB1C((uint64_t)v24);
  sub_10001CAB8((uint64_t)a1, (uint64_t)v19);
  sub_10001CAB8((uint64_t)a2, (uint64_t)v16);
  if ((v30 & 1) == 0)
  {
LABEL_11:
    sub_10001CB1C((uint64_t)v19);
    sub_10001CB1C((uint64_t)v16);
    sub_10001CAB8((uint64_t)a1, (uint64_t)v13);
    sub_10001CAB8((uint64_t)a2, (uint64_t)v10);
    goto LABEL_12;
  }
  char v31 = sub_100017D7C(*(void **)&v19[v4[6]], *(void **)&v16[v4[6]]);
  sub_10001CB1C((uint64_t)v19);
  sub_10001CB1C((uint64_t)v16);
  sub_10001CAB8((uint64_t)a1, (uint64_t)v13);
  sub_10001CAB8((uint64_t)a2, (uint64_t)v10);
  if ((v31 & 1) == 0)
  {
LABEL_12:
    sub_10001CB1C((uint64_t)v13);
    sub_10001CB1C((uint64_t)v10);
    uint64_t v37 = (uint64_t)a1;
    uint64_t v34 = v39;
    sub_10001CAB8(v37, v39);
    uint64_t v35 = v40;
    sub_10001CAB8((uint64_t)a2, v40);
    goto LABEL_13;
  }
  char v32 = sub_100023B8C(*(void *)&v13[v4[7]], *(void *)&v13[v4[7] + 8], *(void *)&v10[v4[7]], *(void *)&v10[v4[7] + 8]);
  sub_10001CB1C((uint64_t)v13);
  sub_10001CB1C((uint64_t)v10);
  uint64_t v33 = (uint64_t)a1;
  uint64_t v34 = v39;
  sub_10001CAB8(v33, v39);
  uint64_t v35 = v40;
  sub_10001CAB8((uint64_t)a2, v40);
  if ((v32 & 1) == 0)
  {
LABEL_13:
    char v36 = 0;
    goto LABEL_14;
  }
  char v36 = sub_100023B8C(*(void *)(v34 + v4[8]), *(void *)(v34 + v4[8] + 8), *(void *)(v35 + v4[8]), *(void *)(v35 + v4[8] + 8));
LABEL_14:
  sub_10001CB1C(v34);
  sub_10001CB1C(v35);
  return v36 & 1;
}

uint64_t sub_10002404C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100012A10(a1, a2);
  }
  return a1;
}

uint64_t type metadata accessor for ApplicationCache(uint64_t a1)
{
  return sub_1000192DC(a1, qword_1001814E0);
}

uint64_t sub_100024080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017C280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000240E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ApplicationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10002414C()
{
  unint64_t result = qword_100181148[0];
  if (!qword_100181148[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100181148);
  }
  return result;
}

unint64_t sub_1000241A0()
{
  unint64_t result = qword_10017C2A0;
  if (!qword_10017C2A0)
  {
    sub_1000126B8(&qword_10017C298);
    sub_10001C508();
    sub_10001C4C0(&qword_10017C2A8, (void (*)(uint64_t))type metadata accessor for ApplicationRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C2A0);
  }
  return result;
}

uint64_t sub_10002424C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100024328(void *a1)
{
  uint64_t v3 = sub_100004700(&qword_10017C5D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_1000036B0(a1, a1[3]);
  sub_10002414C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000478C((uint64_t)a1);
  }
  else
  {
    v9[31] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_100004700(&qword_10017C298);
    v9[15] = 1;
    sub_100025530();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_10000478C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_10002454C()
{
  unint64_t result = qword_10017C2B0;
  if (!qword_10017C2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C2B0);
  }
  return result;
}

uint64_t *sub_1000245A0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = *(uint64_t *)((char *)a2 + v13);
    unint64_t v16 = *(uint64_t *)((char *)a2 + v13 + 8);
    swift_bridgeObjectRetain();
    sub_100012DE4(v15, v16);
    *uint64_t v14 = v15;
    v14[1] = v16;
    uint64_t v17 = a3[8];
    uint64_t v18 = (uint64_t *)((char *)v4 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    sub_100012DE4(*v19, v21);
    *uint64_t v18 = v20;
    v18[1] = v21;
  }
  return v4;
}

uint64_t sub_1000246E4(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  sub_100012A10(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  char v6 = (uint64_t *)(a1 + a2[8]);
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];

  return sub_100012A10(v7, v8);
}

void *sub_100024790(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = *(void *)((char *)a2 + v12);
  unint64_t v15 = *(void *)((char *)a2 + v12 + 8);
  swift_bridgeObjectRetain();
  sub_100012DE4(v14, v15);
  uint64_t *v13 = v14;
  v13[1] = v15;
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  sub_100012DE4(*v18, v20);
  *uint64_t v17 = v19;
  v17[1] = v20;
  return a1;
}

void *sub_100024884(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_100012DE4(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_100012A10(v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_100012DE4(*v19, v21);
  uint64_t v22 = *v18;
  unint64_t v23 = v18[1];
  *uint64_t v18 = v20;
  v18[1] = v21;
  sub_100012A10(v22, v23);
  return a1;
}

_OWORD *sub_100024994(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

void *sub_100024A40(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void *)((char *)a1 + v11);
  unint64_t v13 = *(void *)((char *)a1 + v11 + 8);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  sub_100012A10(v12, v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = *(void *)((char *)a1 + v14);
  unint64_t v16 = *(void *)((char *)a1 + v14 + 8);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  sub_100012A10(v15, v16);
  return a1;
}

uint64_t sub_100024B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100024B2C);
}

uint64_t sub_100024B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100024BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100024BF0);
}

uint64_t sub_100024BF0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100024C98()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ApplicationManager()
{
  return self;
}

uint64_t destroy for SerializedApplicationCache()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s10driverkitd26SerializedApplicationCacheVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SerializedApplicationCache(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for RealizedInfo.LoadInfo(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SerializedApplicationCache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExceptionList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExceptionList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SerializedApplicationCache()
{
  return &type metadata for SerializedApplicationCache;
}

uint64_t sub_100024F48()
{
  return type metadata accessor for ApplicationCache(0);
}

uint64_t sub_100024F50()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SerializedApplicationCache.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000250C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SerializedApplicationCache.CodingKeys()
{
  return &type metadata for SerializedApplicationCache.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ApplicationRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ApplicationRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100025254);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationRecord.CodingKeys()
{
  return &type metadata for ApplicationRecord.CodingKeys;
}

unint64_t sub_100025290()
{
  unint64_t result = qword_1001815F0;
  if (!qword_1001815F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001815F0);
  }
  return result;
}

unint64_t sub_1000252E8()
{
  unint64_t result = qword_100181800[0];
  if (!qword_100181800[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100181800);
  }
  return result;
}

unint64_t sub_100025340()
{
  unint64_t result = qword_100181910;
  if (!qword_100181910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181910);
  }
  return result;
}

unint64_t sub_100025398()
{
  unint64_t result = qword_100181918[0];
  if (!qword_100181918[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100181918);
  }
  return result;
}

unint64_t sub_1000253F0()
{
  unint64_t result = qword_1001819A0;
  if (!qword_1001819A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001819A0);
  }
  return result;
}

unint64_t sub_100025448()
{
  unint64_t result = qword_1001819A8[0];
  if (!qword_1001819A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001819A8);
  }
  return result;
}

uint64_t sub_10002549C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1000254DC()
{
  unint64_t result = qword_10017C5B8;
  if (!qword_10017C5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C5B8);
  }
  return result;
}

unint64_t sub_100025530()
{
  unint64_t result = qword_10017C5D8;
  if (!qword_10017C5D8)
  {
    sub_1000126B8(&qword_10017C298);
    sub_10001CA64();
    sub_10001C4C0(&qword_10017C5E0, (void (*)(uint64_t))type metadata accessor for ApplicationRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C5D8);
  }
  return result;
}

uint64_t sub_1000255DC(void *a1)
{
  return sub_10001DE54(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000255F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ApplicationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for FileAttributeKey()
{
  if (!qword_10017C5E8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10017C5E8);
    }
  }
}

uint64_t sub_1000256B4()
{
  return sub_10001C4C0(&qword_10017C5F0, (void (*)(uint64_t))type metadata accessor for FileAttributeKey);
}

uint64_t sub_1000256FC()
{
  return sub_10001C4C0(&qword_10017C5F8, (void (*)(uint64_t))type metadata accessor for FileAttributeKey);
}

uint64_t sub_100025744()
{
  return sub_10001C4C0(&qword_10017C600, (void (*)(uint64_t))type metadata accessor for FileAttributeKey);
}

uint64_t type metadata accessor for ActiveDriverInfo()
{
  uint64_t result = qword_100181DB0;
  if (!qword_100181DB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000257D8()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  strcpy((char *)v8, "Active Driver ");
  HIBYTE(v8[1]) = -18;
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ActiveDriverInfo() + 20));
  uint64_t v2 = *v1;
  int v3 = (void *)v1[1];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._int64_t object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 544497952;
  v5._int64_t object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = URL.path.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return v8[0];
}

uint64_t sub_1000258B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static URL.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  uint64_t v9 = (void *)(a2 + v6);
  if (v7 == *v9 && v8 == v9[1]) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10002593C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100025974(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000259BC())()
{
  return j__swift_endAccess;
}

void *sub_100025A10(uint64_t a1, long long *a2)
{
  Swift::String v4 = (void *)swift_allocObject();
  v4[2] = _swiftEmptyArrayStorage;
  v4[8] = a1;
  v4[9] = 0;
  sub_10000372C(a2, (uint64_t)(v4 + 3));
  return v4;
}

uint64_t sub_100025A70()
{
  uint64_t v1 = type metadata accessor for Logger();
  __chkstk_darwin(v1);
  if (*(void *)(v0 + 72))
  {
    uint64_t v2 = *(void *)(v0 + 72);
LABEL_5:
    swift_bridgeObjectRetain();
    return v2;
  }
  *(void *)(v0 + 72) = sub_100025F7C();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 72);
  if (v2)
  {
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

unint64_t sub_100025D1C(uint64_t a1)
{
  uint64_t v2 = sub_100004700(&qword_10017C7B8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::String v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017C7C0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100029898(v12, (uint64_t)v5);
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = sub_100027F70(*v5, v15, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000CFAC);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t active = type metadata accessor for ActiveDriverInfo();
    unint64_t result = sub_100028F2C(v9, v20 + *(void *)(*(void *)(active - 8) + 72) * v18);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    uint64_t v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_100025F24()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 168))();
  uint64_t v2 = sub_100028D74(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100025F7C()
{
  uint64_t v1 = sub_100004700(&qword_10017C7C8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100004700(&qword_10017C7B8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v37 - v9;
  unint64_t v11 = v0 + 3;
  uint64_t v13 = v0[6];
  uint64_t v12 = v0[7];
  sub_1000036B0(v11, v13);
  sub_10007F4B4(v13, v12);
  uint64_t v14 = v45;
  uint64_t v41 = v46;
  uint64_t v40 = sub_1000036B0(v44, v45);
  uint64_t v15 = (uint64_t *)sub_1000A17A4();
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  sub_100004700((uint64_t *)&unk_10017DE60);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_100132F10;
  swift_bridgeObjectRetain();
  uint64_t v19 = (uint64_t *)sub_1000A15B8();
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *(void *)(v18 + 32) = v21;
  *(void *)(v18 + 40) = v20;
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_100079BE8(v17, v16, (char *)v18);
  v43[3] = &type metadata for KernelRequests.GetDrivers;
  v43[4] = &off_10016C630;
  v43[0] = v22;
  uint64_t v23 = sub_100004700(&qword_10017C7D0);
  uint64_t v24 = (uint64_t)v42;
  sub_1000780C8(v43, v23, v14, v23, v41, (uint64_t)&v47);
  uint64_t v25 = v24;
  sub_10000478C((uint64_t)v43);
  if (v24) {
    return sub_10000478C((uint64_t)v44);
  }
  uint64_t v42 = v8;
  uint64_t v27 = v47;
  sub_10000478C((uint64_t)v44);
  uint64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    uint64_t v38 = 0;
    uint64_t v39 = v10;
    uint64_t v40 = (void *)v5;
    char v29 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    uint64_t v30 = 0;
    char v31 = _swiftEmptyArrayStorage;
    uint64_t v41 = v4;
    uint64_t v32 = (uint64_t)v42;
    do
    {
      v44[0] = *(void *)(v27 + 8 * v30 + 32);
      sub_10002637C(v44, (unint64_t)v3);
      if ((*v29)(v3, 1, v4) == 1)
      {
        sub_1000130EC((uint64_t)v3, &qword_10017C7C8);
      }
      else
      {
        uint64_t v33 = (uint64_t)v39;
        sub_100029900((uint64_t)v3, (uint64_t)v39, &qword_10017C7B8);
        sub_100029900(v33, v32, &qword_10017C7B8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v31 = (void *)sub_100028004(0, v31[2] + 1, 1, (unint64_t)v31);
        }
        unint64_t v35 = v31[2];
        unint64_t v34 = v31[3];
        if (v35 >= v34 >> 1) {
          char v31 = (void *)sub_100028004(v34 > 1, v35 + 1, 1, (unint64_t)v31);
        }
        v31[2] = v35 + 1;
        uint64_t v32 = (uint64_t)v42;
        sub_100029900((uint64_t)v42, (uint64_t)v31+ ((*((unsigned __int8 *)v40 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v40 + 80))+ v40[9] * v35, &qword_10017C7B8);
        uint64_t v4 = v41;
      }
      ++v30;
    }
    while (v28 != v30);
    swift_bridgeObjectRelease();
    uint64_t v25 = v38;
  }
  else
  {
    char v31 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  if (v31[2])
  {
    sub_100004700(&qword_10017C7C0);
    char v36 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    char v36 = &_swiftEmptyDictionarySingleton;
  }
  v44[0] = (uint64_t)v36;
  sub_100028274((uint64_t)v31, 1, (uint64_t)v44);
  if (!v25) {
    return v44[0];
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10002637C@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v11 = (char *)&v77 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v77 - v12;
  uint64_t v14 = *a1;
  uint64_t v15 = (uint64_t *)sub_1000A1504();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16))
  {
    long long v85 = 0u;
    long long v86 = 0u;
    goto LABEL_10;
  }
  uint64_t v17 = *v15;
  uint64_t v18 = v15[1];
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_100027F70(v17, v18, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100004958);
  if ((v20 & 1) == 0)
  {
    long long v85 = 0u;
    long long v86 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1000047DC(*(void *)(v14 + 56) + 32 * v19, (uint64_t)&v85);
  swift_bridgeObjectRelease();
  if (!*((void *)&v86 + 1))
  {
LABEL_10:
    sub_1000130EC((uint64_t)&v85, &qword_10017C018);
    goto LABEL_11;
  }
  uint64_t v21 = v16;
  uint64_t v22 = v14;
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v16 = v21;
LABEL_11:
    uint64_t v29 = sub_1000EFF54();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v13, v29, v4);
    swift_bridgeObjectRetain_n();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v80 = swift_slowAlloc();
      *(void *)&long long v85 = v80;
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v79 = (uint64_t *)((char *)&type metadata for Any + 8);
      uint64_t v33 = Dictionary.description.getter();
      unint64_t v81 = a2;
      uint64_t v82 = v4;
      uint64_t v34 = v33;
      uint64_t v35 = v5;
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      uint64_t v83 = sub_100003F90(v34, v37, (uint64_t *)&v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v38 = *v16;
      unint64_t v39 = v16[1];
      swift_bridgeObjectRetain();
      uint64_t v83 = sub_100003F90(v38, v39, (uint64_t *)&v85);
      a2 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Codeless info %s did not contain data for key %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v82);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    }
    goto LABEL_14;
  }
  uint64_t v80 = v83;
  unint64_t v81 = v84;
  uint64_t v23 = (uint64_t *)sub_1000A15B8();
  uint64_t v24 = v23;
  if (!*(void *)(v14 + 16))
  {
    long long v85 = 0u;
    long long v86 = 0u;
LABEL_24:
    sub_1000130EC((uint64_t)&v85, &qword_10017C018);
LABEL_25:
    uint64_t v48 = sub_1000EFF54();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v48, v4);
    swift_bridgeObjectRetain_n();
    unint64_t v49 = Logger.logObject.getter();
    uint64_t v50 = v4;
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v79 = (uint64_t *)swift_slowAlloc();
      *(void *)&long long v85 = v79;
      *(_DWORD *)uint64_t v52 = 136315394;
      uint64_t v77 = (char *)(v52 + 4);
      swift_bridgeObjectRetain();
      unint64_t v78 = (char *)&type metadata for Any + 8;
      uint64_t v53 = Dictionary.description.getter();
      uint64_t v82 = v50;
      uint64_t v54 = v53;
      unint64_t v56 = v55;
      swift_bridgeObjectRelease();
      uint64_t v83 = sub_100003F90(v54, v56, (uint64_t *)&v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2080;
      uint64_t v57 = *v24;
      unint64_t v58 = v24[1];
      swift_bridgeObjectRetain();
      uint64_t v83 = sub_100003F90(v57, v58, (uint64_t *)&v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v51, "Codeless info %s did not contain path for key %s", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100012A10(v80, v81);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v82);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_100012A10(v80, v81);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v50);
    }
    goto LABEL_14;
  }
  uint64_t v25 = *v23;
  uint64_t v26 = v23[1];
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_100027F70(v25, v26, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100004958);
  if (v28)
  {
    sub_1000047DC(*(void *)(v22 + 56) + 32 * v27, (uint64_t)&v85);
  }
  else
  {
    long long v85 = 0u;
    long long v86 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v86 + 1)) {
    goto LABEL_24;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v42 = sub_1000A11D8();
  uint64_t v43 = *(void *)(v22 + 16);
  uint64_t v79 = v42;
  if (v43)
  {
    uint64_t v44 = *v42;
    uint64_t v45 = v42[1];
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_100027F70(v44, v45, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100004958);
    if (v47)
    {
      sub_1000047DC(*(void *)(v22 + 56) + 32 * v46, (uint64_t)&v85);
    }
    else
    {
      long long v85 = 0u;
      long long v86 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v86 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v59 = v83;
        unint64_t v60 = v84;
        uint64_t v61 = sub_100004700(&qword_10017C7B8);
        uint64_t v62 = (void *)a2;
        unint64_t v63 = a2 + *(int *)(v61 + 48);
        URL.init(fileURLWithPath:isDirectory:)();
        swift_bridgeObjectRelease();
        unint64_t v64 = v81;
        *uint64_t v62 = v80;
        v62[1] = v64;
        char v65 = (uint64_t *)(v63 + *(int *)(type metadata accessor for ActiveDriverInfo() + 20));
        *char v65 = v59;
        v65[1] = v60;
        return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v62, 0, 1, v61);
      }
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
  }
  else
  {
    long long v85 = 0u;
    long long v86 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000130EC((uint64_t)&v85, &qword_10017C018);
LABEL_36:
  uint64_t v66 = sub_1000EFF54();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v66, v4);
  swift_bridgeObjectRetain_n();
  uint64_t v67 = Logger.logObject.getter();
  uint64_t v68 = v4;
  os_log_type_t v69 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v67, v69))
  {
    uint64_t v70 = swift_slowAlloc();
    unint64_t v78 = (char *)swift_slowAlloc();
    *(void *)&long long v85 = v78;
    *(_DWORD *)uint64_t v70 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v77 = (char *)&type metadata for Any + 8;
    uint64_t v71 = Dictionary.description.getter();
    uint64_t v82 = v68;
    uint64_t v72 = v71;
    unint64_t v74 = v73;
    swift_bridgeObjectRelease();
    uint64_t v83 = sub_100003F90(v72, v74, (uint64_t *)&v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v70 + 12) = 2080;
    uint64_t v75 = *v79;
    unint64_t v76 = v79[1];
    swift_bridgeObjectRetain();
    uint64_t v83 = sub_100003F90(v75, v76, (uint64_t *)&v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v67, v69, "Codeless info %s did not contain identifier for key %s", (uint8_t *)v70, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_100012A10(v80, v81);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v82);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100012A10(v80, v81);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v68);
  }
LABEL_14:
  uint64_t v40 = sub_100004700(&qword_10017C7B8);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(a2, 1, 1, v40);
}

uint64_t sub_100026DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100004700(&qword_10017C7E0);
  __chkstk_darwin(v6 - 8);
  unint64_t v58 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  uint64_t v8 = __chkstk_darwin(active);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v50 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v50 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v50 - v17;
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_1000EFF54();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v57 = v19;
  v24(v22, v23, v19);
  sub_100028EC8(a1, (uint64_t)v18);
  uint64_t v59 = a1;
  sub_100028EC8(a1, (uint64_t)v16);
  sub_100028EC8(a2, (uint64_t)v13);
  sub_100028EC8(a2, (uint64_t)v10);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  int v27 = v26;
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v55 = a3;
    uint64_t v29 = v28;
    uint64_t v53 = swift_slowAlloc();
    v62[0] = v53;
    *(_DWORD *)uint64_t v29 = 136315906;
    int v52 = v27;
    uint64_t v50 = v10;
    os_log_t v51 = v25;
    uint64_t v30 = active;
    os_log_type_t v31 = (uint64_t *)&v18[*(int *)(active + 20)];
    uint64_t v54 = a2;
    uint64_t v33 = *v31;
    unint64_t v32 = v31[1];
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_100003F90(v33, v32, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100028F90((uint64_t)v18);
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v34 = URL.path.getter();
    uint64_t v60 = sub_100003F90(v34, v35, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100028F90((uint64_t)v16);
    *(_WORD *)(v29 + 22) = 2080;
    unint64_t v36 = (uint64_t *)&v13[*(int *)(v30 + 20)];
    uint64_t v37 = *v36;
    unint64_t v38 = v36[1];
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_100003F90(v37, v38, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100028F90((uint64_t)v13);
    *(_WORD *)(v29 + 32) = 2080;
    uint64_t v39 = (uint64_t)v50;
    uint64_t v40 = URL.path.getter();
    uint64_t v60 = sub_100003F90(v40, v41, v62);
    a2 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100028F90(v39);
    uint64_t v25 = v51;
    _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v52, "Drivers with identifiers %s (%s), %s (%s) have the same unique identifier", (uint8_t *)v29, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v55;
    swift_slowDealloc();
  }
  else
  {
    sub_100028F90((uint64_t)v18);
    sub_100028F90((uint64_t)v16);
    sub_100028F90((uint64_t)v13);
    sub_100028F90((uint64_t)v10);
  }

  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v57);
  uint64_t v42 = v59;
  v62[0] = URL.path.getter();
  v62[1] = v43;
  uint64_t v60 = URL.path.getter();
  uint64_t v61 = v44;
  uint64_t v45 = type metadata accessor for Locale();
  uint64_t v46 = (uint64_t)v58;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v58, 1, 1, v45);
  sub_100029B24();
  uint64_t v47 = StringProtocol.compare<A>(_:options:range:locale:)();
  sub_1000130EC(v46, &qword_10017C7E0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v47 == -1) {
    uint64_t v48 = v42;
  }
  else {
    uint64_t v48 = a2;
  }
  return sub_100028EC8(v48, a3);
}

_UNKNOWN **sub_100027318()
{
  uint64_t v3 = sub_100025F7C();
  uint64_t v4 = *(void *)(v0 + 72);
  if (v4
    && (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        char v1 = sub_100027A6C(v3, v4),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v1 & 1) != 0))
  {
    uint64_t v2 = 0;
  }
  else
  {
    *(void *)(v0 + 72) = v3;
    uint64_t v2 = &off_10016AA00;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1000273E0()
{
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  uint64_t v43 = *(void *)(active - 8);
  __chkstk_darwin(active);
  uint64_t v2 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100004700(&qword_10017C618);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (uint64_t *)((char *)&v39 - v8);
  unint64_t v49 = 0xD000000000000010;
  unint64_t v50 = 0x8000000100146060;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 168))(v7);
  int64_t v46 = 0;
  uint64_t v11 = *(void *)(result + 64);
  uint64_t v41 = result + 64;
  uint64_t v44 = result;
  uint64_t v12 = 1 << *(unsigned char *)(result + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  int64_t v40 = v42 - 1;
  if ((v13 & v11) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v26 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  unint64_t v27 = v26 | (v46 << 6);
  while (2)
  {
    uint64_t v28 = *(void *)(v44 + 56);
    uint64_t v29 = (uint64_t *)(*(void *)(v44 + 48) + 16 * v27);
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    *uint64_t v6 = *v29;
    v6[1] = v31;
    uint64_t v32 = v28 + *(void *)(v43 + 72) * v27;
    uint64_t v33 = sub_100004700(&qword_10017C620);
    sub_100028EC8(v32, (uint64_t)v6 + *(int *)(v33 + 48));
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v6, 0, 1, v33);
    sub_100012DE4(v30, v31);
    while (1)
    {
      sub_100029900((uint64_t)v6, (uint64_t)v9, &qword_10017C618);
      uint64_t v38 = sub_100004700(&qword_10017C620);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v9, 1, v38) == 1)
      {
        swift_release();
        return v49;
      }
      uint64_t v16 = *v9;
      unint64_t v15 = v9[1];
      sub_100028F2C((uint64_t)v9 + *(int *)(v38 + 48), (uint64_t)v2);
      v48._countAndFlagsBits = 538976288;
      v48._int64_t object = (void *)0xE400000000000000;
      v17._countAndFlagsBits = sub_100014690(v16, v15);
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 8250;
      v18._int64_t object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v47._countAndFlagsBits = 0;
      v47._int64_t object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      strcpy((char *)&v47, "Active Driver ");
      HIBYTE(v47._object) = -18;
      uint64_t v19 = (uint64_t *)&v2[*(int *)(active + 20)];
      uint64_t v21 = *v19;
      uint64_t v20 = (void *)v19[1];
      swift_bridgeObjectRetain();
      v22._countAndFlagsBits = v21;
      v22._int64_t object = v20;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 544497952;
      v23._int64_t object = (void *)0xE400000000000000;
      String.append(_:)(v23);
      v24._countAndFlagsBits = URL.path.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 10;
      v25._int64_t object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      sub_100012A10(v16, v15);
      uint64_t result = sub_100028F90((uint64_t)v2);
      if (v14) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v34 = v46 + 1;
      if (__OFADD__(v46, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v34 < v42)
      {
        unint64_t v35 = *(void *)(v41 + 8 * v34);
        if (v35) {
          goto LABEL_11;
        }
        int64_t v36 = v46 + 2;
        ++v46;
        if (v34 + 1 < v42)
        {
          unint64_t v35 = *(void *)(v41 + 8 * v36);
          if (v35) {
            goto LABEL_14;
          }
          int64_t v46 = v34 + 1;
          if (v34 + 2 < v42)
          {
            unint64_t v35 = *(void *)(v41 + 8 * (v34 + 2));
            if (v35)
            {
              v34 += 2;
              goto LABEL_11;
            }
            int64_t v36 = v34 + 3;
            int64_t v46 = v34 + 2;
            if (v34 + 3 < v42) {
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v37 = sub_100004700(&qword_10017C620);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v6, 1, 1, v37);
      unint64_t v14 = 0;
    }
    unint64_t v35 = *(void *)(v41 + 8 * v36);
    if (v35)
    {
LABEL_14:
      int64_t v34 = v36;
LABEL_11:
      unint64_t v14 = (v35 - 1) & v35;
      unint64_t v27 = __clz(__rbit64(v35)) + (v34 << 6);
      int64_t v46 = v34;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v34 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v34 >= v42)
    {
      int64_t v46 = v40;
      goto LABEL_25;
    }
    unint64_t v35 = *(void *)(v41 + 8 * v34);
    ++v36;
    if (v35) {
      goto LABEL_11;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10002790C()
{
  swift_bridgeObjectRelease();
  sub_10000478C(v0 + 24);

  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 80, 7);
}

id sub_10002795C()
{
  return *(id *)(v0 + 64);
}

uint64_t sub_100027964()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t sub_100027988()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

void (*sub_1000279AC(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 128))();
  return sub_10000C31C;
}

uint64_t sub_100027A24()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t sub_100027A48()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t sub_100027A6C(uint64_t a1, uint64_t a2)
{
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  uint64_t v4 = *(void *)(active - 8);
  uint64_t v5 = __chkstk_darwin(active);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v44 - v8;
  uint64_t v10 = sub_100004700(&qword_10017C618);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (uint64_t *)((char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v16 = (uint64_t *)((char *)&v44 - v15);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v51 = 0;
  uint64_t v48 = a1;
  uint64_t v49 = v4;
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v46 = a1 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v47 = (unint64_t)(v18 + 63) >> 6;
  int64_t v45 = v47 - 1;
  while (1)
  {
    if (v20)
    {
      unint64_t v21 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v22 = v21 | (v51 << 6);
LABEL_10:
      uint64_t v23 = *(void *)(v48 + 56);
      Swift::String v24 = (uint64_t *)(*(void *)(v48 + 48) + 16 * v22);
      uint64_t v25 = *v24;
      unint64_t v26 = v24[1];
      uint64_t *v13 = *v24;
      v13[1] = v26;
      uint64_t v27 = v23 + *(void *)(v4 + 72) * v22;
      uint64_t v28 = sub_100004700(&qword_10017C620);
      sub_100028EC8(v27, (uint64_t)v13 + *(int *)(v28 + 48));
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v13, 0, 1, v28);
      sub_100012DE4(v25, v26);
      goto LABEL_32;
    }
    int64_t v29 = v51 + 1;
    if (__OFADD__(v51, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v29 < v47)
    {
      unint64_t v30 = *(void *)(v46 + 8 * v29);
      if (v30) {
        goto LABEL_14;
      }
      int64_t v31 = v51 + 2;
      ++v51;
      if (v29 + 1 < v47)
      {
        unint64_t v30 = *(void *)(v46 + 8 * v31);
        if (v30) {
          goto LABEL_17;
        }
        int64_t v51 = v29 + 1;
        if (v29 + 2 < v47)
        {
          unint64_t v30 = *(void *)(v46 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2;
            goto LABEL_14;
          }
          int64_t v51 = v29 + 2;
          if (v29 + 3 < v47)
          {
            unint64_t v30 = *(void *)(v46 + 8 * (v29 + 3));
            if (v30)
            {
              v29 += 3;
              goto LABEL_14;
            }
            int64_t v31 = v29 + 4;
            int64_t v51 = v29 + 3;
            if (v29 + 4 < v47) {
              break;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v32 = sub_100004700(&qword_10017C620);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v13, 1, 1, v32);
    unint64_t v20 = 0;
LABEL_32:
    sub_100029900((uint64_t)v13, (uint64_t)v16, &qword_10017C618);
    uint64_t v33 = sub_100004700(&qword_10017C620);
    uint64_t v34 = 1;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v16, 1, v33) == 1) {
      return v34;
    }
    uint64_t v35 = *v16;
    unint64_t v36 = v16[1];
    sub_100028F2C((uint64_t)v16 + *(int *)(v33 + 48), (uint64_t)v9);
    uint64_t v37 = sub_100027F70(v35, v36, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000CFAC);
    char v39 = v38;
    sub_100012A10(v35, v36);
    if ((v39 & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v4 = v49;
    sub_100028EC8(*(void *)(a2 + 56) + *(void *)(v49 + 72) * v37, (uint64_t)v7);
    if ((static URL.== infix(_:_:)() & 1) == 0
      || ((uint64_t v40 = *(int *)(active + 20),
           uint64_t v41 = *(void *)&v7[v40],
           uint64_t v42 = *(void *)&v7[v40 + 8],
           uint64_t v43 = &v9[v40],
           v41 != *(void *)v43)
       || v42 != *((void *)v43 + 1))
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      sub_100028F90((uint64_t)v7);
LABEL_40:
      sub_100028F90((uint64_t)v9);
      return 0;
    }
    sub_100028F90((uint64_t)v7);
    uint64_t result = sub_100028F90((uint64_t)v9);
  }
  unint64_t v30 = *(void *)(v46 + 8 * v31);
  if (v30)
  {
LABEL_17:
    int64_t v29 = v31;
LABEL_14:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v22 = __clz(__rbit64(v30)) + (v29 << 6);
    int64_t v51 = v29;
    goto LABEL_10;
  }
  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v29 >= v47)
    {
      int64_t v51 = v45;
      goto LABEL_31;
    }
    unint64_t v30 = *(void *)(v46 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_14;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_100027F70(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  Swift::Int v7 = Hasher._finalize()();

  return a4(a1, a2, v7);
}

uint64_t sub_100028004(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100004700(&qword_10017C7D8);
  uint64_t v10 = *(void *)(sub_100004700(&qword_10017C7B8) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_100004700(&qword_10017C7B8) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100029964(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_100028274(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v54 = a3;
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  uint64_t v52 = *(void *)(active - 8);
  uint64_t v6 = __chkstk_darwin(active - 8);
  uint64_t v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v46 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v46 - v12;
  uint64_t v14 = sub_100004700(&qword_10017C7B8);
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v18 = (void *)((char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void *)(a1 + 16);
  if (!v19) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v51 = (uint64_t)v18 + *(int *)(v15 + 48);
  uint64_t v20 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v49 = *(void *)(v16 + 72);
  v46[1] = a1;
  swift_bridgeObjectRetain();
  int64_t v47 = v11;
  unint64_t v50 = v18;
  while (1)
  {
    uint64_t v53 = v19;
    uint64_t v26 = (uint64_t)v8;
    sub_100029898(v20, (uint64_t)v18);
    uint64_t v27 = *v18;
    unint64_t v28 = v18[1];
    uint64_t v57 = v27;
    unint64_t v58 = v28;
    uint64_t v29 = (uint64_t)v13;
    sub_100028F2C(v51, (uint64_t)v13);
    unint64_t v30 = *(void **)v54;
    unint64_t v32 = sub_100027F70(v27, v28, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000CFAC);
    uint64_t v33 = v30[2];
    BOOL v34 = (v31 & 1) == 0;
    uint64_t v35 = v33 + v34;
    if (__OFADD__(v33, v34))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_22;
    }
    char v36 = v31;
    if (v30[3] >= v35)
    {
      if ((a2 & 1) == 0) {
        sub_100028770();
      }
    }
    else
    {
      sub_1000289E0(v35, a2 & 1);
      uint64_t v37 = sub_100027F70(v27, v28, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000CFAC);
      if ((v36 & 1) != (v38 & 1)) {
        goto LABEL_21;
      }
      unint64_t v32 = v37;
    }
    char v39 = *(void **)v54;
    if (v36) {
      break;
    }
    v39[(v32 >> 6) + 8] |= 1 << v32;
    unint64_t v21 = (uint64_t *)(v39[6] + 16 * v32);
    *unint64_t v21 = v27;
    v21[1] = v28;
    uint64_t v22 = v39[7] + *(void *)(v52 + 72) * v32;
    uint64_t v13 = (char *)v29;
    sub_100028F2C(v29, v22);
    uint64_t v23 = v39[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_20;
    }
    void v39[2] = v25;
    uint64_t v8 = (char *)v26;
LABEL_5:
    unint64_t v18 = v50;
    v20 += v49;
    a2 = 1;
    uint64_t v19 = v53 - 1;
    if (v53 == 1) {
      return swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v40 = v39[7];
  unint64_t v41 = *(void *)(v52 + 72) * v32;
  uint64_t v8 = (char *)v26;
  sub_100028EC8(v40 + v41, v26);
  uint64_t v42 = (uint64_t)v47;
  uint64_t v13 = (char *)v29;
  sub_100026DE0((uint64_t)v8, v29, (uint64_t)v47);
  if (!v48)
  {
    sub_100028F90((uint64_t)v8);
    sub_100028F90(v29);
    sub_100012A10(v27, v28);
    sub_100029AC0(v42, *(void *)(*(void *)v54 + 56) + v41);
    goto LABEL_5;
  }
  sub_100028F90((uint64_t)v8);
  uint64_t v59 = v48;
  swift_errorRetain();
  sub_100004700(&qword_10017EB50);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_100028F90(v29);
    sub_100012A10(v27, v28);
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
LABEL_22:
  uint64_t v55 = 0;
  unint64_t v56 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v44._int64_t object = (void *)0x80000001001460E0;
  v44._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v44);
  _print_unlocked<A, B>(_:_:)();
  v45._countAndFlagsBits = 39;
  v45._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100028770()
{
  uint64_t v1 = v0;
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  uint64_t v29 = *(void *)(active - 8);
  __chkstk_darwin(active - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004700(&qword_10017C7C0);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v27 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    sub_100028EC8(*(void *)(v5 + 56) + v21, (uint64_t)v4);
    uint64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + v17);
    *uint64_t v22 = v19;
    v22[1] = v20;
    sub_100028F2C((uint64_t)v4, *(void *)(v7 + 56) + v21);
    uint64_t result = (void *)sub_100012DE4(v19, v20);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000289E0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  uint64_t v40 = *(void *)(active - 8);
  __chkstk_darwin(active - 8);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100004700(&qword_10017C7C0);
  char v9 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v8 + 16))
  {
    uint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v13 = *(void *)(v8 + 64);
    char v39 = (void *)(v8 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    while (1)
    {
      if (v15)
      {
        unint64_t v21 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v22 = v21 | (v18 << 6);
      }
      else
      {
        int64_t v23 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v38) {
          goto LABEL_34;
        }
        unint64_t v24 = v39[v23];
        ++v18;
        if (!v24)
        {
          int64_t v18 = v23 + 1;
          if (v23 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v24 = v39[v18];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v9)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v39 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v39[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v18 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v24 = v39[v18];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v25;
          }
        }
LABEL_21:
        unint64_t v15 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v18 << 6);
      }
      uint64_t v26 = *(void *)(v40 + 72);
      uint64_t v27 = *(void *)(v8 + 56) + v26 * v22;
      unint64_t v28 = *(void *)(*(void *)(v8 + 48) + 16 * v22 + 8);
      long long v41 = *(_OWORD *)(*(void *)(v8 + 48) + 16 * v22);
      if (v9)
      {
        sub_100028F2C(v27, (uint64_t)v7);
      }
      else
      {
        sub_100028EC8(v27, (uint64_t)v7);
        sub_100012DE4(v41, v28);
      }
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
        long long v20 = v41;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        long long v20 = v41;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_OWORD *)(*(void *)(v11 + 48) + 16 * v19) = v20;
      uint64_t result = sub_100028F2C((uint64_t)v7, *(void *)(v11 + 56) + v26 * v19);
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

void *sub_100028D74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100004700(&qword_10017BEA0);
  uint64_t v3 = *(void *)(type metadata accessor for ActiveDriverInfo() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_1000295CC(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_1000048D8();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100028EC8(uint64_t a1, uint64_t a2)
{
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(active - 8) + 16))(a2, a1, active);
  return a2;
}

uint64_t sub_100028F2C(uint64_t a1, uint64_t a2)
{
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(active - 8) + 32))(a2, a1, active);
  return a2;
}

uint64_t sub_100028F90(uint64_t a1)
{
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(active - 8) + 8))(a1, active);
  return a1;
}

uint64_t *sub_100028FEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000290C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002913C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000291C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100029260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000292DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100029368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002937C);
}

uint64_t sub_10002937C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100029440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100029454);
}

uint64_t sub_100029454(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100029514()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ActiveDriversStateManager()
{
  return self;
}

uint64_t sub_1000295CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  uint64_t v9 = *(void *)(active - 8);
  uint64_t v10 = __chkstk_darwin(active - 8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  unint64_t v15 = (char *)&v30 - v14;
  uint64_t v35 = a4;
  uint64_t v18 = *(void *)(a4 + 64);
  uint64_t v17 = a4 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = -1 << *(unsigned char *)(v17 - 32);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1 << -(char)v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    int64_t v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v32 = -1 << *(unsigned char *)(v17 - 32);
  unint64_t v33 = a1;
  int64_t v22 = 0;
  uint64_t v23 = 0;
  int64_t v34 = (unint64_t)(63 - v19) >> 6;
  int64_t v31 = v34 - 1;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    sub_100028EC8(*(void *)(v35 + 56) + v29 * v25, (uint64_t)v12);
    sub_100028F2C((uint64_t)v12, (uint64_t)v15);
    uint64_t result = sub_100028F2C((uint64_t)v15, a2);
    if (v23 == a3) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    unint64_t v21 = 0;
    int64_t v22 = v26;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v34) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    unint64_t v21 = 0;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }
  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    unint64_t v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v26 >= v34)
    {
      unint64_t v21 = 0;
      int64_t v22 = v31;
      goto LABEL_36;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100029898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017C7B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100029900(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100004700(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100029964(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_100004700(&qword_10017C7B8) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100029AC0(uint64_t a1, uint64_t a2)
{
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(active - 8) + 40))(a2, a1, active);
  return a2;
}

unint64_t sub_100029B24()
{
  unint64_t result = qword_10017FA10;
  if (!qword_10017FA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FA10);
  }
  return result;
}

BOOL sub_100029B78(char a1, char a2)
{
  return a1 == a2;
}

unint64_t sub_100029B94()
{
  unint64_t result = qword_10017FAA0;
  if (!qword_10017FAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FAA0);
  }
  return result;
}

unint64_t sub_100029BEC()
{
  unint64_t result = qword_10017C7E8;
  if (!qword_10017C7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C7E8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CollectionKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CollectionKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100029D9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CollectionKind()
{
  return &type metadata for CollectionKind;
}

uint64_t getEnumTagSinglePayload for ExceptionList.ExceptionType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for StripMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100029F30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StripMode()
{
  return &type metadata for StripMode;
}

uint64_t sub_100029F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4) & 1) == 0) {
    return 1;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 32))(a1, a2, a3, a4))
  {
    uint64_t v9 = (uint64_t *)sub_1000A21B0();
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40);
    swift_bridgeObjectRetain();
    char v13 = v12(a1, a2, v10, v11, a3, a4);
    swift_bridgeObjectRelease();
    return v13 & 1;
  }
  else
  {
    static os_log_type_t.error.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_100132F10;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_10002A1DC();
    *(void *)(v14 + 32) = a1;
    *(void *)(v14 + 40) = a2;
    sub_10002A230();
    swift_bridgeObjectRetain();
    unint64_t v15 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    return 0;
  }
}

unint64_t sub_10002A1DC()
{
  unint64_t result = qword_10017FA30;
  if (!qword_10017FA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FA30);
  }
  return result;
}

unint64_t sub_10002A230()
{
  unint64_t result = qword_10017D6F0;
  if (!qword_10017D6F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017D6F0);
  }
  return result;
}

uint64_t sub_10002A270()
{
  return 1;
}

uint64_t sub_10002A278()
{
  return 0;
}

uint64_t sub_10002A280()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))() & 1;
}

uint64_t sub_10002A2C8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))() & 1;
}

uint64_t sub_10002A310()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))() & 1;
}

uint64_t sub_10002A358()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))() & 1;
}

uint64_t sub_10002A3A4(uint64_t a1, uint64_t a2)
{
  return sub_10002A3B0(a1, a2, (uint64_t)&off_10016AB88);
}

uint64_t sub_10002A3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  unsigned int v6 = sub_1000045E8(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_10000464C(a1, v7);
  return sub_10002A448((uint64_t)v10, v7, v8);
}

uint64_t sub_10002A448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000469C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100004700(&qword_10017C7F0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_10000478C(a1);
}

uint64_t sub_10002A4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017C7F0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32);

  return v5(v4, v4, a1);
}

uint64_t type metadata accessor for EmbeddedSIPStatus()
{
  return self;
}

void sub_10002A554()
{
  qword_100199280 = (uint64_t)&off_10016ABF0;
}

uint64_t *sub_10002A568()
{
  if (qword_100181FC0 != -1) {
    swift_once();
  }
  return &qword_100199280;
}

void *sub_10002A5B4()
{
  return &unk_10016ABD0;
}

void *sub_10002A5C0()
{
  return &unk_10016ABE0;
}

_UNKNOWN **sub_10002A5CC()
{
  return &off_10016ACA8;
}

unint64_t sub_10002A5D8(char a1)
{
  unint64_t result = 0xD000000000000011;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD00000000000001ALL;
    }
    else {
      return 0xD00000000000001DLL;
    }
  }
  return result;
}

uint64_t sub_10002A638(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10002A7C8(*a1, *a2);
}

uint64_t sub_10002A644(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 7958081;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 7958081;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v5 = 21580;
      break;
    case 2:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v5 = 17740;
      break;
    case 3:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v5 = 20805;
      break;
    case 4:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v5 = 21575;
      break;
    case 5:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v5 = 17735;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE200000000000000;
      if (v5 == 21580) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0xE200000000000000;
      if (v5 != 17740) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0xE200000000000000;
      if (v5 != 20805) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0xE200000000000000;
      uint64_t v2 = 21575;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xE200000000000000;
      if (v5 != 17735) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10002A7C8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x8000000100146300;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD00000000000001ALL;
    }
    else {
      unint64_t v5 = 0xD00000000000001DLL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x8000000100146320;
    }
    else {
      unint64_t v6 = 0x8000000100146340;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD000000000000011;
  unint64_t v6 = 0x8000000100146300;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0xD00000000000001ALL;
    }
    else {
      unint64_t v2 = 0xD00000000000001DLL;
    }
    if (v7 == 1) {
      unint64_t v3 = 0x8000000100146320;
    }
    else {
      unint64_t v3 = 0x8000000100146340;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10002A8C8()
{
  return sub_10002A8D0();
}

Swift::Int sub_10002A8D0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10002A97C()
{
  return Hasher._finalize()();
}

uint64_t sub_10002AA4C()
{
  return sub_10002AA54();
}

uint64_t sub_10002AA54()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10002AAE8()
{
  return sub_10002AAF0();
}

Swift::Int sub_10002AAF0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10002AB98()
{
  return Hasher._finalize()();
}

unint64_t sub_10002AC64@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10002F018(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10002AC94@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10002A5D8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10002ACC0(void *a1@<X8>)
{
  *a1 = &off_10016ACD0;
}

uint64_t sub_10002ACD0(unsigned __int8 *a1, char *a2)
{
  return sub_10002A644(*a1, *a2);
}

Swift::Int sub_10002ACDC()
{
  return sub_10002A97C();
}

uint64_t sub_10002ACE4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10002AD9C()
{
  return sub_10002AB98();
}

unint64_t sub_10002ADA4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10002F078(*a1);
  *a2 = result;
  return result;
}

void sub_10002ADD4(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 7958081;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 21580;
      goto LABEL_3;
    case 2:
      *a1 = 17740;
      a1[1] = 0xE200000000000000;
      break;
    case 3:
      *a1 = 20805;
      a1[1] = 0xE200000000000000;
      break;
    case 4:
      *a1 = 21575;
      a1[1] = 0xE200000000000000;
      break;
    case 5:
      *a1 = 17735;
      a1[1] = 0xE200000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_10002AE6C()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_10002F0C4();
    dispatch thunk of Hashable.hash(into:)();
  }
}

Swift::Int sub_10002AFA8()
{
  return Hasher._finalize()();
}

Swift::Int sub_10002AFEC()
{
  return Hasher._finalize()();
}

uint64_t sub_10002B028(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_10002AFA4(v5, v7) & 1;
}

uint64_t sub_10002B074(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v6 + 144))();
  if (!*(void *)(a3 + 16)
    || (unint64_t v9 = sub_1000048E0(v7, v8), (v10 & 1) == 0)
    || (uint64_t v11 = *(void *)(*(void *)(a3 + 56) + 8 * v9),
        swift_bridgeObjectRetain(),
        uint64_t v12 = swift_bridgeObjectRelease(),
        uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 184))(v12),
        !v13))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v14 = v13;
  if (a2)
  {
    sub_10002F26C(a1 + 32, (uint64_t)v67);
    uint64_t v15 = v69;
    if (v69)
    {
      unint64_t v16 = v70;
      sub_1000036B0(v67, v69);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, unint64_t))(v16 + 32))(v15, v16);
      unint64_t v19 = v18;
      sub_10000478C((uint64_t)v67);
      v67[0] = v66;
      v67[1] = v14;
      char v68 = 3;
      uint64_t v69 = v17;
      unint64_t v70 = v19;
      sub_100012DE4(v17, v19);
      char v20 = sub_10002B628(v67, v11);
      swift_bridgeObjectRelease();
      sub_100012A10(v17, v19);
      swift_bridgeObjectRelease();
      sub_10002404C(v17, v19);
      if (v20) {
        return 1;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000130EC((uint64_t)v67, &qword_10017C010);
    }
    return 0;
  }
  int64_t v22 = 0;
  uint64_t v64 = v11 + 56;
  uint64_t v23 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & *(void *)(v11 + 56);
  int64_t v65 = (unint64_t)(v23 + 63) >> 6;
  while (2)
  {
    if (v25)
    {
      unint64_t v26 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v27 = v26 | (v22 << 6);
      goto LABEL_31;
    }
    int64_t v28 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v28 >= v65) {
      goto LABEL_53;
    }
    unint64_t v29 = *(void *)(v64 + 8 * v28);
    ++v22;
    if (!v29)
    {
      int64_t v22 = v28 + 1;
      if (v28 + 1 >= v65) {
        goto LABEL_53;
      }
      unint64_t v29 = *(void *)(v64 + 8 * v22);
      if (!v29)
      {
        int64_t v22 = v28 + 2;
        if (v28 + 2 >= v65) {
          goto LABEL_53;
        }
        unint64_t v29 = *(void *)(v64 + 8 * v22);
        if (!v29)
        {
          int64_t v30 = v28 + 3;
          if (v30 < v65)
          {
            unint64_t v29 = *(void *)(v64 + 8 * v30);
            if (v29)
            {
              int64_t v22 = v30;
              goto LABEL_30;
            }
            while (1)
            {
              int64_t v22 = v30 + 1;
              if (__OFADD__(v30, 1)) {
                break;
              }
              if (v22 >= v65) {
                goto LABEL_53;
              }
              unint64_t v29 = *(void *)(v64 + 8 * v22);
              ++v30;
              if (v29) {
                goto LABEL_30;
              }
            }
LABEL_55:
            __break(1u);
            JUMPOUT(0x10002B610);
          }
LABEL_53:
          swift_bridgeObjectRelease();
          swift_release();
          return 0;
        }
      }
    }
LABEL_30:
    unint64_t v25 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_31:
    uint64_t v31 = *(void *)(v11 + 48) + 40 * v27;
    uint64_t v33 = *(void *)(v31 + 24);
    unint64_t v32 = *(void *)(v31 + 32);
    switch(*(unsigned char *)(v31 + 16))
    {
      case 1:
        swift_bridgeObjectRetain();
        sub_10002F064(v33, v32);
        swift_bridgeObjectRetain();
        uint64_t v34 = sub_1000F1E20();
        if (v35) {
          goto LABEL_14;
        }
        uint64_t v36 = v34;
        swift_bridgeObjectRetain();
        uint64_t v37 = sub_1000F1E20();
        char v39 = v38;
        swift_bridgeObjectRelease();
        sub_10002404C(v33, v32);
        if ((v39 & 1) == 0 && v36 < v37) {
          goto LABEL_51;
        }
        continue;
      case 2:
        swift_bridgeObjectRetain();
        sub_10002F064(v33, v32);
        swift_bridgeObjectRetain();
        uint64_t v40 = sub_1000F1E20();
        if (v41) {
          goto LABEL_14;
        }
        uint64_t v42 = v40;
        swift_bridgeObjectRetain();
        uint64_t v43 = sub_1000F1E20();
        char v45 = v44;
        swift_bridgeObjectRelease();
        sub_10002404C(v33, v32);
        if ((v45 & 1) == 0 && v43 >= v42) {
          goto LABEL_51;
        }
        continue;
      case 3:
        swift_bridgeObjectRetain();
        sub_10002F064(v33, v32);
        swift_bridgeObjectRetain();
        uint64_t v46 = sub_1000F1E20();
        if (v47) {
          goto LABEL_14;
        }
        uint64_t v48 = v46;
        swift_bridgeObjectRetain();
        uint64_t v49 = sub_1000F1E20();
        char v51 = v50;
        swift_bridgeObjectRelease();
        sub_10002404C(v33, v32);
        if ((v51 & 1) == 0 && v48 == v49) {
          goto LABEL_51;
        }
        continue;
      case 4:
        swift_bridgeObjectRetain();
        sub_10002F064(v33, v32);
        swift_bridgeObjectRetain();
        uint64_t v52 = sub_1000F1E20();
        if (v53) {
          goto LABEL_14;
        }
        uint64_t v54 = v52;
        swift_bridgeObjectRetain();
        uint64_t v55 = sub_1000F1E20();
        char v57 = v56;
        swift_bridgeObjectRelease();
        sub_10002404C(v33, v32);
        if ((v57 & 1) == 0 && v55 < v54) {
          goto LABEL_51;
        }
        continue;
      case 5:
        swift_bridgeObjectRetain();
        sub_10002F064(v33, v32);
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_1000F1E20();
        if (v59)
        {
LABEL_14:
          swift_bridgeObjectRelease();
          sub_10002404C(v33, v32);
          continue;
        }
        uint64_t v60 = v58;
        swift_bridgeObjectRetain();
        uint64_t v61 = sub_1000F1E20();
        char v63 = v62;
        swift_bridgeObjectRelease();
        sub_10002404C(v33, v32);
        if ((v63 & 1) != 0 || v60 < v61) {
          continue;
        }
LABEL_51:
        swift_bridgeObjectRelease();
        swift_release();
        return 1;
      default:
        goto LABEL_51;
    }
  }
}

uint64_t sub_10002B628(uint64_t *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v2 = a2;
  Hasher.init(_seed:)();
  sub_10002AE6C();
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v27 = v2 + 56;
  if (((*(void *)(v2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v25 = v8;
  uint64_t v26 = ~v5;
  while (2)
  {
    uint64_t v9 = *(void *)(v2 + 48) + 40 * v6;
    uint64_t v10 = *(unsigned __int8 *)(v9 + 16);
    uint64_t v12 = *(void *)(v9 + 24);
    unint64_t v11 = *(void *)(v9 + 32);
    BOOL v13 = *(void *)v9 == v7 && *(void *)(v9 + 8) == v8;
    if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_7;
    }
    uint64_t v14 = v7;
    uint64_t v15 = v2;
    unint64_t v16 = 0xE300000000000000;
    uint64_t v17 = 7958081;
    switch(v10)
    {
      case 1:
        unint64_t v16 = 0xE200000000000000;
        uint64_t v17 = 21580;
        break;
      case 2:
        unint64_t v16 = 0xE200000000000000;
        uint64_t v17 = 17740;
        break;
      case 3:
        unint64_t v16 = 0xE200000000000000;
        uint64_t v17 = 20805;
        break;
      case 4:
        unint64_t v16 = 0xE200000000000000;
        uint64_t v17 = 21575;
        break;
      case 5:
        unint64_t v16 = 0xE200000000000000;
        uint64_t v17 = 17735;
        break;
      default:
        break;
    }
    unint64_t v18 = 0xE300000000000000;
    uint64_t v19 = 7958081;
    switch(*((unsigned char *)a1 + 16))
    {
      case 1:
        unint64_t v18 = 0xE200000000000000;
        if (v17 == 21580) {
          goto LABEL_28;
        }
        goto LABEL_31;
      case 2:
        unint64_t v18 = 0xE200000000000000;
        if (v17 != 17740) {
          goto LABEL_31;
        }
        goto LABEL_28;
      case 3:
        unint64_t v18 = 0xE200000000000000;
        if (v17 != 20805) {
          goto LABEL_31;
        }
        goto LABEL_28;
      case 4:
        unint64_t v18 = 0xE200000000000000;
        uint64_t v19 = 21575;
        goto LABEL_27;
      case 5:
        unint64_t v18 = 0xE200000000000000;
        if (v17 != 17735) {
          goto LABEL_31;
        }
        goto LABEL_28;
      default:
LABEL_27:
        if (v17 != v19) {
          goto LABEL_31;
        }
LABEL_28:
        if (v16 == v18)
        {
          swift_bridgeObjectRetain();
          sub_10002F064(v12, v11);
          swift_bridgeObjectRelease_n();
        }
        else
        {
LABEL_31:
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRetain();
          sub_10002F064(v12, v11);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v20 & 1) == 0) {
            goto LABEL_6;
          }
        }
        uint64_t v22 = a1[3];
        unint64_t v21 = a1[4];
        if (v11 >> 60 != 15)
        {
          if (v21 >> 60 == 15)
          {
            sub_100012DE4(v12, v11);
            sub_100012DE4(v12, v11);
            sub_100012A10(v12, v11);
            goto LABEL_5;
          }
          sub_100012DE4(v12, v11);
          sub_100012DE4(v12, v11);
          sub_10002FC5C();
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          sub_100012A10(v12, v11);
          sub_10002404C(v12, v11);
          swift_bridgeObjectRelease();
          sub_10002404C(v12, v11);
          uint64_t v2 = v15;
          uint64_t v7 = v14;
          uint64_t v8 = v25;
          if (v23) {
            return 1;
          }
LABEL_7:
          unint64_t v6 = (v6 + 1) & v26;
          if (((*(void *)(v27 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return 0;
          }
          continue;
        }
        if (v21 >> 60 != 15)
        {
LABEL_5:
          sub_10002F064(v22, v21);
          sub_10002404C(v12, v11);
          sub_10002404C(v22, v21);
LABEL_6:
          swift_bridgeObjectRelease();
          sub_10002404C(v12, v11);
          uint64_t v2 = v15;
          uint64_t v7 = v14;
          uint64_t v8 = v25;
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
        sub_10002404C(v12, v11);
        return 1;
    }
  }
}

void *sub_10002BA04(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000C884(0, v1, 0);
    uint64_t v3 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = static String._fromSubstring(_:)();
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_10000C884(v7 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      uint64_t v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      void v9[5] = v6;
      v3 += 32;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10002BB04(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = v2;
  unsigned int v128 = a2;
  uint64_t v5 = sub_1000A13D4();
  if (!*(void *)(a1 + 16))
  {
    long long v144 = 0u;
    long long v145 = 0u;
    goto LABEL_12;
  }
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000048E0(v7, v6);
  if ((v9 & 1) == 0)
  {
    long long v144 = 0u;
    long long v145 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  sub_1000047DC(*(void *)(a1 + 56) + 32 * v8, (uint64_t)&v144);
  swift_bridgeObjectRelease();
  if (!*((void *)&v145 + 1))
  {
LABEL_12:
    sub_1000130EC((uint64_t)&v144, &qword_10017C018);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    goto LABEL_13;
  }
  int v10 = swift_dynamicCast();
  BOOL v11 = v10 == 0;
  if (v10) {
    uint64_t v12 = v140;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v11) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v141;
  }
LABEL_13:
  uint64_t v14 = sub_1000F1E70(v12, v13);
  if (v15)
  {
    swift_bridgeObjectRelease();
    *(void *)&long long v144 = 0;
    *((void *)&v144 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    if ((_BYTE)v128)
    {
      if (v128 == 1) {
        unint64_t v20 = 0xD00000000000001ALL;
      }
      else {
        unint64_t v20 = 0xD00000000000001DLL;
      }
      if (v128 == 1) {
        unint64_t v21 = 0x8000000100146320;
      }
      else {
        unint64_t v21 = 0x8000000100146340;
      }
    }
    else
    {
      unint64_t v20 = 0xD000000000000011;
      unint64_t v21 = 0x8000000100146300;
    }
    unint64_t v64 = v21;
    String.append(_:)(*(Swift::String *)&v20);
    swift_bridgeObjectRelease();
    unint64_t v65 = 0xD000000000000023;
    uint64_t v66 = " has an invalid or missing version.";
    goto LABEL_83;
  }
  uint64_t v16 = v14;
  uint64_t v17 = 0xD000000000000011;
  if ((_BYTE)v128)
  {
    if (v128 == 1) {
      uint64_t v18 = 0xD00000000000001ALL;
    }
    else {
      uint64_t v18 = 0xD00000000000001DLL;
    }
    if (v128 == 1) {
      uint64_t v19 = 0x8000000100146320;
    }
    else {
      uint64_t v19 = 0x8000000100146340;
    }
  }
  else
  {
    uint64_t v19 = 0x8000000100146300;
    uint64_t v18 = 0xD000000000000011;
  }
  v121[5] = v16;
  if (*(void *)(a1 + 16) && (unint64_t v22 = sub_1000048E0(v18, v19), (v23 & 1) != 0))
  {
    sub_1000047DC(*(void *)(a1 + 56) + 32 * v22, (uint64_t)&v144);
  }
  else
  {
    long long v144 = 0u;
    long long v145 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v145 + 1))
  {
    sub_1000130EC((uint64_t)&v144, &qword_10017C018);
    goto LABEL_72;
  }
  sub_100004700(&qword_10017C8B8);
  if (!swift_dynamicCast())
  {
LABEL_72:
    *(void *)&long long v144 = 0;
    *((void *)&v144 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    if ((_BYTE)v128)
    {
      if (v128 == 1) {
        uint64_t v17 = 0xD00000000000001ALL;
      }
      else {
        uint64_t v17 = 0xD00000000000001DLL;
      }
      if (v128 == 1) {
        char v63 = (void *)0x8000000100146320;
      }
      else {
        char v63 = (void *)0x8000000100146340;
      }
    }
    else
    {
      char v63 = (void *)0x8000000100146300;
    }
    v67._countAndFlagsBits = v17;
    v67._int64_t object = v63;
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    unint64_t v65 = 0xD000000000000017;
    uint64_t v66 = " has an invalid format.";
LABEL_83:
    unint64_t v68 = (unint64_t)(v66 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v65);
    long long v69 = v144;
    sub_100012E3C();
    swift_allocError();
    *(_OWORD *)uint64_t v70 = v69;
    *(_OWORD *)(v70 + 16) = 0u;
    *(_OWORD *)(v70 + 32) = 0u;
    *(_OWORD *)(v70 + 48) = 0u;
    *(void *)(v70 + 64) = 0;
    *(unsigned char *)(v70 + 72) = 44;
    return swift_willThrow();
  }
  unint64_t v24 = v140;
  unint64_t v25 = sub_10002CB78((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v127 = v140 + 64;
  unint64_t v130 = v140;
  if ((_BYTE)v128)
  {
    unint64_t v133 = v25;
    uint64_t v26 = 1 << *(unsigned char *)(v140 + 32);
    uint64_t v27 = -1;
    if (v26 < 64) {
      uint64_t v27 = ~(-1 << v26);
    }
    unint64_t v28 = v27 & *(void *)(v140 + 64);
    int64_t v126 = (unint64_t)(v26 + 63) >> 6;
    swift_bridgeObjectRetain();
    unint64_t v29 = 0;
    uint64_t v123 = 0x8000000100146410;
    *(void *)&long long v124 = 0x80000001001463F0;
    if (!v28) {
      goto LABEL_40;
    }
LABEL_39:
    uint64_t v131 = (v28 - 1) & v28;
    int64_t v132 = v29;
    for (unint64_t i = __clz(__rbit64(v28)) | ((void)v29 << 6); ; unint64_t i = __clz(__rbit64(v33)) + (v32 << 6))
    {
      uint64_t v35 = 16 * i;
      uint64_t v36 = (uint64_t *)(*(void *)(v24 + 48) + v35);
      uint64_t v38 = *v36;
      uint64_t v37 = (void *)v36[1];
      char v39 = (uint64_t *)(*(void *)(v24 + 56) + v35);
      uint64_t v40 = *v39;
      char v41 = (void *)v39[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v140 = 9;
      unint64_t v141 = 0xE100000000000000;
      uint64_t v138 = &v140;
      swift_bridgeObjectRetain_n();
      uint64_t v42 = sub_10002CD68(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002F2D4, (uint64_t)v137, v40, (unint64_t)v41);
      swift_bridgeObjectRelease();
      uint64_t v43 = sub_10002BA04((uint64_t)v42);
      swift_bridgeObjectRelease();
      if (v43[2] != 2) {
        break;
      }
      uint64_t v129 = v3;
      uint64_t v45 = v43[4];
      char v44 = (void *)v43[5];
      uint64_t v46 = v43[7];
      uint64_t v125 = v43[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_1000F9B4C(v38, (unint64_t)v37);
      if (v48 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        unint64_t v140 = 0;
        unint64_t v141 = 0xE000000000000000;
        _StringGuts.grow(_:)(32);
        swift_bridgeObjectRelease();
        unint64_t v140 = 0xD000000000000016;
        unint64_t v141 = v123;
        v49._countAndFlagsBits = v38;
        v49._int64_t object = v37;
        String.append(_:)(v49);
        v50._countAndFlagsBits = 0x20726F662027;
        v50._int64_t object = (void *)0xE600000000000000;
        String.append(_:)(v50);
        v51._countAndFlagsBits = v45;
        v51._int64_t object = v44;
        String.append(_:)(v51);
        swift_bridgeObjectRelease();
        goto LABEL_59;
      }
      uint64_t v56 = v47;
      unint64_t v57 = v48;
      unint64_t v140 = v45;
      unint64_t v141 = (unint64_t)v44;
      unint64_t v58 = sub_10002F2F0();
      sub_1000F28F0((uint64_t)&v140, (uint64_t)&v133, (uint64_t)&type metadata for String, (uint64_t)&type metadata for ExceptionList.ExceptionMatch, (uint64_t)&protocol witness table for String, v58);
      char v59 = sub_10002CC94(v139, v45, (uint64_t)v44);
      if (*v60)
      {
        *(void *)&long long v144 = v125;
        *((void *)&v144 + 1) = v46;
        LOBYTE(v145) = 3;
        *((void *)&v145 + 1) = v56;
        unint64_t v146 = v57;
        sub_100012DE4(v56, v57);
        sub_10002D4BC((uint64_t)&v140, (uint64_t)&v144);
        ((void (*)(void *, void))v59)(v139, 0);
        sub_10002404C(v56, v57);
        swift_bridgeObjectRelease();
        uint64_t v61 = v142;
        unint64_t v62 = v143;
        swift_bridgeObjectRelease();
        sub_10002404C(v61, v62);
      }
      else
      {
        swift_bridgeObjectRelease();
        ((void (*)(void *, void))v59)(v139, 0);
        sub_10002404C(v56, v57);
        swift_bridgeObjectRelease();
      }
      unint64_t v24 = v130;
      uint64_t v3 = v129;
      if (v129)
      {
LABEL_84:
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_134;
      }
LABEL_65:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v29 = v132;
      unint64_t v28 = v131;
      if (v131) {
        goto LABEL_39;
      }
LABEL_40:
      BOOL v31 = __OFADD__(v29, 1);
      int64_t v32 = (int64_t)v29 + 1;
      if (v31)
      {
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
        JUMPOUT(0x10002CB60);
      }
      if (v32 >= v126) {
        goto LABEL_130;
      }
      unint64_t v33 = *(void *)(v127 + 8 * v32);
      if (!v33)
      {
        int64_t v34 = v32 + 1;
        if (v32 + 1 >= v126) {
          goto LABEL_130;
        }
        unint64_t v33 = *(void *)(v127 + 8 * v34);
        if (!v33)
        {
          int64_t v34 = v32 + 2;
          if (v32 + 2 >= v126) {
            goto LABEL_130;
          }
          unint64_t v33 = *(void *)(v127 + 8 * v34);
          if (!v33)
          {
            int64_t v34 = v32 + 3;
            if (v32 + 3 >= v126) {
              goto LABEL_130;
            }
            unint64_t v33 = *(void *)(v127 + 8 * v34);
            if (!v33)
            {
              int64_t v34 = v32 + 4;
              if (v32 + 4 >= v126) {
                goto LABEL_130;
              }
              unint64_t v33 = *(void *)(v127 + 8 * v34);
              if (!v33)
              {
                int64_t v34 = v32 + 5;
                if (v32 + 5 >= v126)
                {
LABEL_130:
                  swift_release();
                  swift_bridgeObjectRelease();
                  return v128;
                }
                unint64_t v33 = *(void *)(v127 + 8 * v34);
                if (!v33)
                {
                  while (1)
                  {
                    int64_t v32 = v34 + 1;
                    if (__OFADD__(v34, 1)) {
                      goto LABEL_137;
                    }
                    if (v32 >= v126) {
                      goto LABEL_130;
                    }
                    unint64_t v33 = *(void *)(v127 + 8 * v32);
                    ++v34;
                    if (v33) {
                      goto LABEL_54;
                    }
                  }
                }
              }
            }
          }
        }
        int64_t v32 = v34;
      }
LABEL_54:
      uint64_t v131 = (v33 - 1) & v33;
      int64_t v132 = (void *)v32;
    }
    swift_bridgeObjectRelease();
    unint64_t v140 = 0;
    unint64_t v141 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v140 = 0xD00000000000001FLL;
    unint64_t v141 = v124;
    v52._countAndFlagsBits = v40;
    v52._int64_t object = v41;
    String.append(_:)(v52);
LABEL_59:
    unint64_t v54 = v140;
    unint64_t v53 = v141;
    sub_100012E3C();
    uint64_t v3 = swift_allocError();
    *(void *)uint64_t v55 = v54;
    *(void *)(v55 + 8) = v53;
    *(_OWORD *)(v55 + 16) = 0u;
    *(_OWORD *)(v55 + 32) = 0u;
    *(_OWORD *)(v55 + 48) = 0u;
    *(void *)(v55 + 64) = 0;
    *(unsigned char *)(v55 + 72) = 44;
    swift_willThrow();
    unint64_t v24 = v130;
    if (v3) {
      goto LABEL_84;
    }
    goto LABEL_65;
  }
  v139[0] = v25;
  uint64_t v72 = 1 << *(unsigned char *)(v140 + 32);
  uint64_t v73 = -1;
  if (v72 < 64) {
    uint64_t v73 = ~(-1 << v72);
  }
  unint64_t v74 = v73 & *(void *)(v140 + 64);
  int64_t v122 = (unint64_t)(v72 + 63) >> 6;
  uint64_t v75 = swift_bridgeObjectRetain();
  int64_t v76 = 0;
  long long v124 = xmmword_100133A20;
  while (1)
  {
    if (v74)
    {
      uint64_t v131 = (v74 - 1) & v74;
      unint64_t v83 = __clz(__rbit64(v74)) | (v76 << 6);
      goto LABEL_107;
    }
    BOOL v31 = __OFADD__(v76++, 1);
    if (v31) {
      goto LABEL_136;
    }
    if (v76 >= v122) {
      goto LABEL_131;
    }
    unint64_t v84 = *(void *)(v127 + 8 * v76);
    if (!v84) {
      break;
    }
LABEL_106:
    uint64_t v131 = (v84 - 1) & v84;
    unint64_t v83 = __clz(__rbit64(v84)) + (v76 << 6);
LABEL_107:
    uint64_t v86 = 16 * v83;
    uint64_t v87 = *(void *)(v24 + 56);
    uint64_t v88 = (uint64_t *)(*(void *)(v24 + 48) + v86);
    uint64_t v89 = v88[1];
    uint64_t v129 = *v88;
    uint64_t v90 = (uint64_t *)(v87 + v86);
    uint64_t v92 = *v90;
    unint64_t v91 = v90[1];
    *(void *)&long long v144 = 32;
    *((void *)&v144 + 1) = 0xE100000000000000;
    __chkstk_darwin(v75);
    v121[2] = &v144;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v123 = v92;
    uint64_t v93 = sub_10002CD68(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002F2D4, (uint64_t)v121, v92, v91);
    int64_t v132 = (void *)v91;
    swift_bridgeObjectRelease();
    int64_t v94 = *((void *)v93 + 2);
    if (v94)
    {
      uint64_t v125 = v89;
      int64_t v126 = v76;
      uint64_t v95 = v3;
      *(void *)&long long v144 = _swiftEmptyArrayStorage;
      sub_10000C884(0, v94, 0);
      uint64_t v96 = (void *)v144;
      uint64_t v97 = v93 + 56;
      do
      {
        swift_bridgeObjectRetain();
        uint64_t v98 = static String._fromSubstring(_:)();
        uint64_t v100 = v99;
        swift_bridgeObjectRelease();
        *(void *)&long long v144 = v96;
        unint64_t v102 = v96[2];
        unint64_t v101 = v96[3];
        if (v102 >= v101 >> 1)
        {
          sub_10000C884(v101 > 1, v102 + 1, 1);
          uint64_t v96 = (void *)v144;
        }
        v96[2] = v102 + 1;
        uint64_t v103 = &v96[2 * v102];
        v103[4] = v98;
        v103[5] = v100;
        v97 += 32;
        --v94;
      }
      while (v94);
      swift_bridgeObjectRelease();
      uint64_t v3 = v95;
      int64_t v76 = v126;
      uint64_t v89 = v125;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v96 = _swiftEmptyArrayStorage;
    }
    uint64_t v104 = v96[2];
    if (v104 != 1)
    {
      if (v104 == 2)
      {
        uint64_t v105 = v96[4];
        size_t v106 = (void *)v96[5];
        uint64_t v107 = v96[6];
        uint64_t v108 = v96[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v109._countAndFlagsBits = v105;
        v109._int64_t object = v106;
        Swift::Int v110 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10016ACF8, v109);
        swift_bridgeObjectRelease();
        unint64_t v24 = v130;
        switch(v110)
        {
          case 0:
            swift_bridgeObjectRelease();
            char v111 = 0;
            goto LABEL_119;
          case 1:
            swift_bridgeObjectRelease();
            char v111 = 1;
            goto LABEL_119;
          case 2:
            swift_bridgeObjectRelease();
            char v111 = 2;
            goto LABEL_119;
          case 3:
            swift_bridgeObjectRelease();
            char v111 = 3;
            goto LABEL_119;
          case 4:
            swift_bridgeObjectRelease();
            char v111 = 4;
            goto LABEL_119;
          case 5:
            swift_bridgeObjectRelease();
            char v111 = 5;
            goto LABEL_119;
          default:
            break;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&long long v144 = 0;
      *((void *)&v144 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      *(void *)&long long v144 = 0xD00000000000001DLL;
      *((void *)&v144 + 1) = 0x80000001001463D0;
      v117._countAndFlagsBits = v123;
      v117._int64_t object = v132;
      String.append(_:)(v117);
      swift_bridgeObjectRelease();
      v118._countAndFlagsBits = 39;
      v118._int64_t object = (void *)0xE100000000000000;
      String.append(_:)(v118);
      long long v119 = v144;
      sub_100012E3C();
      swift_allocError();
      *(_OWORD *)uint64_t v120 = v119;
      *(_OWORD *)(v120 + 16) = 0u;
      *(_OWORD *)(v120 + 32) = 0u;
      *(_OWORD *)(v120 + 48) = 0u;
      *(void *)(v120 + 64) = 0;
      *(unsigned char *)(v120 + 72) = 44;
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_134:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v107 = v96[4];
    uint64_t v108 = v96[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v111 = 3;
    unint64_t v24 = v130;
LABEL_119:
    v134[0] = v107;
    v134[1] = v108;
    char v135 = v111;
    long long v136 = v124;
    uint64_t v112 = v129;
    *(void *)&long long v144 = v129;
    *((void *)&v144 + 1) = v89;
    unint64_t v113 = sub_10002F2F0();
    sub_1000F28F0((uint64_t)&v144, (uint64_t)v139, (uint64_t)&type metadata for String, (uint64_t)&type metadata for ExceptionList.ExceptionMatch, (uint64_t)&protocol witness table for String, v113);
    size_t v114 = sub_10002CC94(&v140, v112, v89);
    if (*v115)
    {
      swift_bridgeObjectRetain();
      sub_10002F064(0, 0xF000000000000000);
      char v116 = sub_10002D4BC((uint64_t)&v144, (uint64_t)v134);
      ((void (*)(unint64_t *, void))v114)(&v140, 0);
      swift_bridgeObjectRelease();
      sub_10002404C(0, 0xF000000000000000);
      swift_bridgeObjectRelease();
      uint64_t v79 = *((void *)&v144 + 1);
      uint64_t v78 = v144;
      uint64_t v80 = v145;
      uint64_t v77 = v116 & 1;
      uint64_t v81 = *((void *)&v145 + 1);
      unint64_t v82 = v146;
    }
    else
    {
      ((void (*)(unint64_t *, void))v114)(&v140, 0);
      swift_bridgeObjectRelease();
      sub_10002404C(0, 0xF000000000000000);
      swift_bridgeObjectRelease();
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      unint64_t v82 = 0;
    }
    sub_10002F344(v77, v78, v79, v80, v81, v82);
    swift_bridgeObjectRelease();
    uint64_t v75 = swift_bridgeObjectRelease();
    unint64_t v74 = v131;
  }
  int64_t v85 = v76 + 1;
  if (v76 + 1 >= v122) {
    goto LABEL_131;
  }
  unint64_t v84 = *(void *)(v127 + 8 * v85);
  if (v84) {
    goto LABEL_105;
  }
  int64_t v85 = v76 + 2;
  if (v76 + 2 >= v122) {
    goto LABEL_131;
  }
  unint64_t v84 = *(void *)(v127 + 8 * v85);
  if (v84) {
    goto LABEL_105;
  }
  int64_t v85 = v76 + 3;
  if (v76 + 3 >= v122) {
    goto LABEL_131;
  }
  unint64_t v84 = *(void *)(v127 + 8 * v85);
  if (v84) {
    goto LABEL_105;
  }
  int64_t v85 = v76 + 4;
  if (v76 + 4 >= v122) {
    goto LABEL_131;
  }
  unint64_t v84 = *(void *)(v127 + 8 * v85);
  if (v84) {
    goto LABEL_105;
  }
  int64_t v85 = v76 + 5;
  if (v76 + 5 >= v122) {
    goto LABEL_131;
  }
  unint64_t v84 = *(void *)(v127 + 8 * v85);
  if (v84)
  {
LABEL_105:
    int64_t v76 = v85;
    goto LABEL_106;
  }
  while (1)
  {
    int64_t v76 = v85 + 1;
    if (__OFADD__(v85, 1)) {
      goto LABEL_138;
    }
    if (v76 >= v122) {
      break;
    }
    unint64_t v84 = *(void *)(v127 + 8 * v76);
    ++v85;
    if (v84) {
      goto LABEL_106;
    }
  }
LABEL_131:
  swift_release();
  swift_bridgeObjectRelease();
  return v128;
}

unint64_t sub_10002CB78(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017C900);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000048E0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void (*sub_10002CC94(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_10002D39C(v6, a2, a3);
  return sub_10002CD14;
}

void sub_10002CD14(void *a1)
{
  int64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

char *sub_10002CD68(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v46[3] = a4;
  if (a1 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v11 = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = _swiftEmptyArrayStorage;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = 15;
  uint64_t v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v16 = HIBYTE(a6) & 0xF) : (uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_10002D188(v30 | (v15 << 16), v43, a2 & 1, v14);
    swift_bridgeObjectRelease();
    int v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_38;
  }
  uint64_t v38 = a1;
  uint64_t v39 = v14;
  unint64_t v44 = 4 * v16;
  int v10 = (char *)_swiftEmptyArrayStorage;
  unint64_t v9 = 15;
  unint64_t v8 = 15;
  unint64_t v17 = 15;
  while (1)
  {
    v46[0] = String.subscript.getter();
    v46[1] = v18;
    uint64_t v19 = a3(v46);
    if (v7)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    uint64_t v6 = v19;
    swift_bridgeObjectRelease();
    if (v6) {
      break;
    }
    unint64_t v9 = String.index(after:)();
LABEL_9:
    if (v44 == v9 >> 14) {
      goto LABEL_29;
    }
  }
  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v9 = String.index(after:)();
    *(void *)(v43 + 16) = v9;
    unint64_t v8 = v9;
    unint64_t v17 = v9;
    goto LABEL_9;
  }
  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v40 = v21;
  uint64_t v41 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v10 = sub_10002D298(0, *((void *)v10 + 2) + 1, 1, v10);
  }
  unint64_t v27 = *((void *)v10 + 2);
  unint64_t v26 = *((void *)v10 + 3);
  uint64_t v6 = v27 + 1;
  if (v27 >= v26 >> 1) {
    int v10 = sub_10002D298((char *)(v26 > 1), v27 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v6;
  unint64_t v28 = &v10[32 * v27];
  *((void *)v28 + 4) = v41;
  *((void *)v28 + 5) = v23;
  *((void *)v28 + 6) = v25;
  *((void *)v28 + 7) = v40;
  *(void *)(v39 + 16) = v10;
  uint64_t v29 = String.index(after:)();
  unint64_t v9 = v29;
  *(void *)(v43 + 16) = v29;
  if (*((void *)v10 + 2) != v38)
  {
    unint64_t v8 = v29;
    unint64_t v17 = v29;
    goto LABEL_9;
  }
  unint64_t v17 = v29;
  unint64_t v8 = v29;
LABEL_29:
  if (v44 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v44 >= v17 >> 14)
  {
    uint64_t v6 = String.subscript.getter();
    unint64_t v8 = v31;
    unint64_t v9 = v32;
    uint64_t v11 = v33;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_34;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  int v10 = sub_10002D298(0, *((void *)v10 + 2) + 1, 1, v10);
LABEL_34:
  unint64_t v35 = *((void *)v10 + 2);
  unint64_t v34 = *((void *)v10 + 3);
  if (v35 >= v34 >> 1) {
    int v10 = sub_10002D298((char *)(v34 > 1), v35 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v35 + 1;
  uint64_t v36 = &v10[32 * v35];
  *((void *)v36 + 4) = v6;
  *((void *)v36 + 5) = v8;
  *((void *)v36 + 6) = v9;
  *((void *)v36 + 7) = v11;
  *(void *)(v39 + 16) = v10;
LABEL_37:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_38:
  swift_release();
  return v10;
}

uint64_t sub_10002D188(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v10 = *(void *)(a2 + 16) >> 14;
  int v11 = (v10 == a1 >> 14) & a3;
  if (v11 == 1) {
    return v11 ^ 1u;
  }
  if (a1 >> 14 < v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = a4;
  uint64_t v5 = String.subscript.getter();
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  unint64_t v9 = *(char **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    unint64_t v9 = sub_10002D298(0, *((void *)v9 + 2) + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }
  unint64_t v17 = *((void *)v9 + 2);
  unint64_t v16 = *((void *)v9 + 3);
  if (v17 >= v16 >> 1)
  {
    unint64_t v9 = sub_10002D298((char *)(v16 > 1), v17 + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }
  *((void *)v9 + 2) = v17 + 1;
  uint64_t v18 = &v9[32 * v17];
  *((void *)v18 + 4) = v5;
  *((void *)v18 + 5) = v6;
  *((void *)v18 + 6) = v7;
  *((void *)v18 + 7) = v8;
  return v11 ^ 1u;
}

char *sub_10002D298(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017C908);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void (*sub_10002D39C(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  unint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_10002E898(v6);
  v6[10] = sub_10002E700(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10002D448;
}

void sub_10002D448(uint64_t a1)
{
  int64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

uint64_t sub_10002D4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_10002AE6C();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_35:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v40 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10002FBD4(a2);
    sub_10002DD40(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v40;
    swift_bridgeObjectRelease();
    long long v29 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v29;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
  uint64_t v36 = v2;
  uint64_t v37 = a1;
  uint64_t v38 = ~v8;
  uint64_t v39 = a2;
  uint64_t v11 = *(void *)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v12 = v6;
  while (1)
  {
    uint64_t v13 = *(void *)(v12 + 48) + 40 * v9;
    uint64_t v14 = *(unsigned __int8 *)(v13 + 16);
    uint64_t v16 = *(void *)(v13 + 24);
    unint64_t v15 = *(void *)(v13 + 32);
    BOOL v17 = *(void *)v13 == v11 && *(void *)(v13 + 8) == v10;
    if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_6;
    }
    unint64_t v18 = 0xE300000000000000;
    uint64_t v19 = 7958081;
    switch(v14)
    {
      case 1:
        unint64_t v18 = 0xE200000000000000;
        uint64_t v19 = 21580;
        break;
      case 2:
        unint64_t v18 = 0xE200000000000000;
        uint64_t v19 = 17740;
        break;
      case 3:
        unint64_t v18 = 0xE200000000000000;
        uint64_t v19 = 20805;
        break;
      case 4:
        unint64_t v18 = 0xE200000000000000;
        uint64_t v19 = 21575;
        break;
      case 5:
        unint64_t v18 = 0xE200000000000000;
        uint64_t v19 = 17735;
        break;
      default:
        break;
    }
    unint64_t v20 = 0xE300000000000000;
    uint64_t v21 = v11;
    uint64_t v22 = 7958081;
    switch(*(unsigned char *)(v39 + 16))
    {
      case 1:
        unint64_t v20 = 0xE200000000000000;
        uint64_t v22 = 21580;
        break;
      case 2:
        unint64_t v20 = 0xE200000000000000;
        uint64_t v22 = 17740;
        break;
      case 3:
        unint64_t v20 = 0xE200000000000000;
        uint64_t v22 = 20805;
        break;
      case 4:
        unint64_t v20 = 0xE200000000000000;
        uint64_t v22 = 21575;
        break;
      case 5:
        unint64_t v20 = 0xE200000000000000;
        uint64_t v22 = 17735;
        break;
      default:
        break;
    }
    uint64_t v23 = v12;
    if (v19 == v22 && v18 == v20)
    {
      swift_bridgeObjectRetain();
      sub_10002F064(v16, v15);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      sub_10002F064(v16, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0) {
        goto LABEL_5;
      }
    }
    uint64_t v26 = *(void *)(v39 + 24);
    unint64_t v25 = *(void *)(v39 + 32);
    if (v15 >> 60 == 15) {
      break;
    }
    if (v25 >> 60 == 15)
    {
      sub_100012DE4(v16, v15);
      sub_100012DE4(v16, v15);
      sub_100012A10(v16, v15);
      goto LABEL_4;
    }
    sub_100012DE4(v16, v15);
    sub_100012DE4(v16, v15);
    sub_10002FC5C();
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    sub_100012A10(v16, v15);
    sub_10002404C(v16, v15);
    swift_bridgeObjectRelease();
    sub_10002404C(v16, v15);
    uint64_t v12 = v23;
    uint64_t v11 = v21;
    if (v27) {
      goto LABEL_38;
    }
LABEL_6:
    unint64_t v9 = (v9 + 1) & v38;
    if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v3 = v36;
      a1 = v37;
      a2 = v39;
      goto LABEL_35;
    }
  }
  if (v25 >> 60 != 15)
  {
LABEL_4:
    sub_10002F064(v26, v25);
    sub_10002404C(v16, v15);
    sub_10002404C(v26, v25);
LABEL_5:
    swift_bridgeObjectRelease();
    sub_10002404C(v16, v15);
    uint64_t v12 = v23;
    uint64_t v11 = v21;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  sub_10002404C(v16, v15);
LABEL_38:
  swift_bridgeObjectRelease();
  sub_10002FC18(v39);
  uint64_t v31 = *(void *)(*v36 + 48) + 40 * v9;
  uint64_t v32 = *(void *)(v31 + 8);
  char v33 = *(unsigned char *)(v31 + 16);
  uint64_t v34 = *(void *)(v31 + 24);
  unint64_t v35 = *(void *)(v31 + 32);
  *(void *)uint64_t v37 = *(void *)v31;
  *(void *)(v37 + 8) = v32;
  *(unsigned char *)(v37 + 16) = v33;
  *(void *)(v37 + 24) = v34;
  *(void *)(v37 + 32) = v35;
  swift_bridgeObjectRetain();
  sub_10002F064(v34, v35);
  return 0;
}

uint64_t sub_10002D954()
{
  int64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100004700(&qword_10017C8F8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_40;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v35 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v34 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  swift_retain();
  int64_t v9 = 0;
  for (i = v2; ; uint64_t v2 = i)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_22;
    }
    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_41;
    }
    if (v14 >= v34) {
      break;
    }
    unint64_t v15 = v35[v14];
    ++v9;
    if (!v15)
    {
      int64_t v9 = v14 + 1;
      if (v14 + 1 >= v34) {
        goto LABEL_34;
      }
      unint64_t v15 = v35[v9];
      if (!v15)
      {
        int64_t v16 = v14 + 2;
        if (v16 >= v34)
        {
LABEL_34:
          swift_release();
          uint64_t v31 = v35;
          int64_t v1 = v0;
          goto LABEL_36;
        }
        unint64_t v15 = v35[v16];
        if (!v15)
        {
          while (1)
          {
            int64_t v9 = v16 + 1;
            if (__OFADD__(v16, 1)) {
              goto LABEL_42;
            }
            if (v9 >= v34) {
              goto LABEL_34;
            }
            unint64_t v15 = v35[v9];
            ++v16;
            if (v15) {
              goto LABEL_21;
            }
          }
        }
        int64_t v9 = v16;
      }
    }
LABEL_21:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_22:
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v13;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    uint64_t v22 = *(void *)(v17 + 24);
    unint64_t v21 = *(void *)(v17 + 32);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v21 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      sub_10002F0C4();
      dispatch thunk of Hashable.hash(into:)();
    }
    Swift::Int v23 = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v25 = v23 & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v27 = 0;
    unint64_t v28 = (unint64_t)(63 - v24) >> 6;
    do
    {
      if (++v26 == v28 && (v27 & 1) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x10002DD28);
      }
      BOOL v29 = v26 == v28;
      if (v26 == v28) {
        unint64_t v26 = 0;
      }
      v27 |= v29;
      uint64_t v30 = *(void *)(v8 + 8 * v26);
    }
    while (v30 == -1);
    unint64_t v10 = __clz(__rbit64(~v30)) + (v26 << 6);
LABEL_7:
    *(void *)(v8 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = *(void *)(v4 + 48) + 40 * v10;
    *(void *)uint64_t v11 = v18;
    *(void *)(v11 + 8) = v19;
    *(unsigned char *)(v11 + 16) = v20;
    *(void *)(v11 + 24) = v22;
    *(void *)(v11 + 32) = v21;
    ++*(void *)(v4 + 16);
  }
  swift_release();
  int64_t v1 = v0;
  uint64_t v31 = v35;
LABEL_36:
  uint64_t v32 = 1 << *(unsigned char *)(v2 + 32);
  if (v32 > 63) {
    bzero(v31, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v31 = -1 << v32;
  }
  *(void *)(v2 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int64_t v1 = v4;
  return result;
}

Swift::Int sub_10002DD40(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v7 = result;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 <= v8 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_10002D954();
    }
    else
    {
      if (v9 > v8)
      {
        uint64_t result = (Swift::Int)sub_10002E188();
        goto LABEL_43;
      }
      sub_10002E350();
    }
    uint64_t v10 = *v3;
    Hasher.init(_seed:)();
    sub_10002AE6C();
    uint64_t result = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
    a2 = result & ~v11;
    uint64_t v33 = v10 + 56;
    uint64_t v34 = v10;
    if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v32 = ~v11;
      uint64_t v12 = *(void *)v7;
      uint64_t v13 = *(void *)(v7 + 8);
      while (1)
      {
        uint64_t v14 = *(void *)(v34 + 48) + 40 * a2;
        uint64_t v15 = *(unsigned __int8 *)(v14 + 16);
        uint64_t v5 = *(void *)(v14 + 24);
        unint64_t v4 = *(void *)(v14 + 32);
        if (*(void *)v14 != v12 || *(void *)(v14 + 8) != v13)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            goto LABEL_13;
          }
        }
        unint64_t v17 = 0xE300000000000000;
        uint64_t v18 = 7958081;
        switch(v15)
        {
          case 1:
            unint64_t v17 = 0xE200000000000000;
            uint64_t v18 = 21580;
            break;
          case 2:
            unint64_t v17 = 0xE200000000000000;
            uint64_t v18 = 17740;
            break;
          case 3:
            unint64_t v17 = 0xE200000000000000;
            uint64_t v18 = 20805;
            break;
          case 4:
            unint64_t v17 = 0xE200000000000000;
            uint64_t v18 = 21575;
            break;
          case 5:
            unint64_t v17 = 0xE200000000000000;
            uint64_t v18 = 17735;
            break;
          default:
            break;
        }
        unint64_t v19 = 0xE300000000000000;
        uint64_t v20 = 7958081;
        switch(*(unsigned char *)(v7 + 16))
        {
          case 1:
            unint64_t v19 = 0xE200000000000000;
            if (v18 != 21580) {
              goto LABEL_37;
            }
            goto LABEL_34;
          case 2:
            unint64_t v19 = 0xE200000000000000;
            if (v18 != 17740) {
              goto LABEL_37;
            }
            goto LABEL_34;
          case 3:
            unint64_t v19 = 0xE200000000000000;
            uint64_t v20 = 20805;
            goto LABEL_33;
          case 4:
            unint64_t v19 = 0xE200000000000000;
            if (v18 != 21575) {
              goto LABEL_37;
            }
            goto LABEL_34;
          case 5:
            unint64_t v19 = 0xE200000000000000;
            if (v18 != 17735) {
              goto LABEL_37;
            }
            goto LABEL_34;
          default:
LABEL_33:
            if (v18 != v20) {
              goto LABEL_37;
            }
LABEL_34:
            if (v17 == v19)
            {
              swift_bridgeObjectRetain();
              sub_10002F064(v5, v4);
              swift_bridgeObjectRelease_n();
            }
            else
            {
LABEL_37:
              char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRetain();
              sub_10002F064(v5, v4);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v21 & 1) == 0) {
                goto LABEL_12;
              }
            }
            uint64_t v23 = *(void *)(v7 + 24);
            unint64_t v22 = *(void *)(v7 + 32);
            if (v4 >> 60 == 15)
            {
              if (v22 >> 60 == 15) {
                goto LABEL_46;
              }
              goto LABEL_11;
            }
            if (v22 >> 60 == 15)
            {
              sub_100012DE4(v5, v4);
              sub_100012DE4(v5, v4);
              sub_100012A10(v5, v4);
LABEL_11:
              sub_10002F064(v23, v22);
              sub_10002404C(v5, v4);
              sub_10002404C(v23, v22);
LABEL_12:
              swift_bridgeObjectRelease();
              uint64_t result = sub_10002404C(v5, v4);
              goto LABEL_13;
            }
            sub_100012DE4(v5, v4);
            sub_100012DE4(v5, v4);
            sub_10002FC5C();
            char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
            sub_100012A10(v5, v4);
            sub_10002404C(v5, v4);
            swift_bridgeObjectRelease();
            uint64_t result = sub_10002404C(v5, v4);
            if (v24) {
              goto LABEL_47;
            }
LABEL_13:
            a2 = (a2 + 1) & v32;
            if (((*(void *)(v33 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              goto LABEL_43;
            }
            break;
        }
      }
    }
  }
LABEL_43:
  uint64_t v25 = *v31;
  *(void *)(*v31 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v26 = *(void *)(v25 + 48) + 40 * a2;
  long long v27 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v7;
  *(_OWORD *)(v26 + 16) = v27;
  *(void *)(v26 + 32) = *(void *)(v7 + 32);
  uint64_t v28 = *(void *)(v25 + 16);
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
    __break(1u);
LABEL_46:
    swift_bridgeObjectRelease();
    sub_10002404C(v5, v4);
LABEL_47:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x10002E158);
  }
  *(void *)(v25 + 16) = v30;
  return result;
}

void *sub_10002E188()
{
  int64_t v1 = v0;
  sub_100004700(&qword_10017C8F8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *int64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v17 + 8);
    char v19 = *(unsigned char *)(v17 + 16);
    uint64_t v20 = *(void *)(v17 + 24);
    unint64_t v21 = *(void *)(v17 + 32);
    uint64_t v22 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v22 = *(void *)v17;
    *(void *)(v22 + 8) = v18;
    *(unsigned char *)(v22 + 16) = v19;
    *(void *)(v22 + 24) = v20;
    *(void *)(v22 + 32) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_10002F064(v20, v21);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10002E350()
{
  int64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100004700(&qword_10017C8F8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_35;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v32 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v33 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  swift_retain_n();
  int64_t j = 0;
  for (i = v2; ; uint64_t v2 = i)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (j << 6);
      goto LABEL_21;
    }
    int64_t v14 = j + 1;
    if (__OFADD__(j, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v33) {
      break;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v14);
    ++j;
    if (!v15)
    {
      int64_t j = v14 + 1;
      if (v14 + 1 >= v33) {
        break;
      }
      unint64_t v15 = *(void *)(v32 + 8 * j);
      if (!v15)
      {
        int64_t v16 = v14 + 2;
        if (v16 >= v33) {
          break;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v16);
        for (int64_t j = v16; !v15; ++v16)
        {
          int64_t j = v16 + 1;
          if (__OFADD__(v16, 1)) {
            goto LABEL_37;
          }
          if (j >= v33) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v32 + 8 * j);
        }
      }
    }
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (j << 6);
LABEL_21:
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v13;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    unint64_t v22 = *(void *)(v17 + 32);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    sub_10002F064(v21, v22);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v22 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      sub_10002F0C4();
      dispatch thunk of Hashable.hash(into:)();
    }
    Swift::Int v23 = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v25 = v23 & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v27 = 0;
    unint64_t v28 = (unint64_t)(63 - v24) >> 6;
    do
    {
      if (++v26 == v28 && (v27 & 1) != 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x10002E6E8);
      }
      BOOL v29 = v26 == v28;
      if (v26 == v28) {
        unint64_t v26 = 0;
      }
      v27 |= v29;
      uint64_t v30 = *(void *)(v8 + 8 * v26);
    }
    while (v30 == -1);
    unint64_t v10 = __clz(__rbit64(~v30)) + (v26 << 6);
LABEL_7:
    *(void *)(v8 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = *(void *)(v4 + 48) + 40 * v10;
    *(void *)uint64_t v11 = v18;
    *(void *)(v11 + 8) = v19;
    *(unsigned char *)(v11 + 16) = v20;
    *(void *)(v11 + 24) = v21;
    *(void *)(v11 + 32) = v22;
    ++*(void *)(v4 + 16);
  }
LABEL_33:
  uint64_t result = swift_release_n();
  int64_t v1 = v0;
LABEL_35:
  *int64_t v1 = v4;
  return result;
}

void (*sub_10002E700(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  unint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_1000048E0(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        void *v10 = v19;
        return sub_10002E848;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10002ECA0();
      goto LABEL_7;
    }
    sub_10002E8D4(v16, a4 & 1);
    unint64_t v20 = sub_1000048E0(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = v20;
      v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10002E848(uint64_t **a1)
{
  int64_t v1 = *a1;
  sub_10002EBC8(*a1, *((unsigned char *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_10002E898(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *int64_t v1 = 0x8000000000000000;
  return sub_10002E8C8;
}

uint64_t sub_10002E8C8(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_10002E8D4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017C900);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1)) {
      goto LABEL_40;
    }
    if (v14 >= v11) {
      break;
    }
    Swift::Int v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v14);
    if (!v24)
    {
      int64_t v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        uint64_t v3 = v35;
        if ((v37 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          int64_t v14 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            break;
          }
          if (v14 >= v11) {
            goto LABEL_31;
          }
          unint64_t v24 = *(void *)(v36 + 8 * v14);
          ++v25;
          if (v24) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    unint64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v32 = v17 == v31;
        if (v17 == v31) {
          unint64_t v17 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *uint64_t v19 = v28;
    v19[1] = v27;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  Swift::Int v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t *sub_10002EBC8(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *result;
  if (*result)
  {
    uint64_t v9 = (void *)*a3;
    if (a2)
    {
      *(void *)(v9[7] + 8 * a4) = v8;
    }
    else
    {
      v9[(a4 >> 6) + 8] |= 1 << a4;
      unint64_t v10 = (void *)(v9[6] + 16 * a4);
      void *v10 = a5;
      v10[1] = a6;
      *(void *)(v9[7] + 8 * a4) = v8;
      uint64_t v11 = v9[2];
      BOOL v12 = __OFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (v12)
      {
        __break(1u);
        return result;
      }
      v9[2] = v13;
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_10002EE40(a4, *a3);
  }

  return (uint64_t *)swift_bridgeObjectRetain();
}

void *sub_10002ECA0()
{
  int64_t v1 = v0;
  sub_100004700(&qword_10017C900);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    uint64_t result = (void *)swift_release();
    *int64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    if (!v23) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_10002EE40(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            void *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10002F018(Swift::String string)
{
  int64_t object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._int64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10016AC40, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_10002F064(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100012DE4(a1, a2);
  }
  return a1;
}

unint64_t sub_10002F078(Swift::String string)
{
  int64_t object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._int64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10016ACF8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unint64_t sub_10002F0C4()
{
  unint64_t result = qword_10017C8B0;
  if (!qword_10017C8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C8B0);
  }
  return result;
}

BOOL sub_10002F118(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v5 & 1) != 0))
  {
    if (sub_10002A644(*(unsigned char *)(a1 + 16), *(unsigned char *)(a2 + 16)))
    {
      uint64_t v8 = *(void *)(a1 + 24);
      unint64_t v7 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a2 + 24);
      unint64_t v9 = *(void *)(a2 + 32);
      if (v7 >> 60 == 15)
      {
        if (v9 >> 60 == 15) {
          return 1;
        }
      }
      else
      {
        if (v9 >> 60 != 15)
        {
          sub_100012DE4(v8, v7);
          sub_100012DE4(v8, v7);
          sub_10002FC5C();
          char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
          sub_100012A10(v8, v7);
          sub_10002404C(v8, v7);
          return (v11 & 1) != 0;
        }
        sub_100012DE4(v8, v7);
        sub_100012DE4(v8, v7);
        sub_100012A10(v8, v7);
      }
      sub_10002F064(v10, v9);
      sub_10002404C(v8, v7);
      sub_10002404C(v10, v9);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10002F26C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017C010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F2D4(void *a1)
{
  return sub_10002FCB0(a1) & 1;
}

unint64_t sub_10002F2F0()
{
  unint64_t result = qword_10017C8C0;
  if (!qword_10017C8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C8C0);
  }
  return result;
}

void sub_10002F344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    sub_10002404C(a5, a6);
  }
}

unint64_t sub_10002F394()
{
  unint64_t result = qword_10017C8C8;
  if (!qword_10017C8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C8C8);
  }
  return result;
}

unint64_t sub_10002F3EC()
{
  unint64_t result = qword_10017C8D0;
  if (!qword_10017C8D0)
  {
    sub_1000126B8(&qword_10017C8D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C8D0);
  }
  return result;
}

unint64_t sub_10002F44C()
{
  unint64_t result = qword_10017C8E0;
  if (!qword_10017C8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C8E0);
  }
  return result;
}

unint64_t sub_10002F4A4()
{
  unint64_t result = qword_10017C8E8;
  if (!qword_10017C8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C8E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Exceptions()
{
  return &type metadata for Exceptions;
}

uint64_t destroy for ExceptionList()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s10driverkitd13ExceptionListVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExceptionList(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ExceptionList(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for ExceptionList()
{
  return &type metadata for ExceptionList;
}

unsigned char *storeEnumTagSinglePayload for ExceptionList.ExceptionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002F6C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExceptionList.ExceptionType()
{
  return &type metadata for ExceptionList.ExceptionType;
}

uint64_t destroy for ExceptionList.ExceptionMatch(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    return sub_100012A10(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for ExceptionList.ExceptionMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = (_OWORD *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *v4;
  }
  else
  {
    uint64_t v6 = *(void *)v4;
    sub_100012DE4(v6, v5);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v5;
  }
  return a1;
}

uint64_t assignWithCopy for ExceptionList.ExceptionMatch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = (uint64_t *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_100012DE4(*v4, v5);
      uint64_t v8 = *(void *)(a1 + 24);
      unint64_t v9 = *(void *)(a1 + 32);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = v5;
      sub_100012A10(v8, v9);
      return a1;
    }
    sub_10002F8A4(a1 + 24);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  sub_100012DE4(*v4, v5);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v5;
  return a1;
}

uint64_t sub_10002F8A4(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for ExtensionManager.Settings.ExtensionFilter(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ExceptionList.ExceptionMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v5 = (void *)(a2 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 32);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = *v5;
      *(void *)(a1 + 32) = v7;
      sub_100012A10(v8, v6);
      return a1;
    }
    sub_10002F8A4(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for ExceptionList.ExceptionMatch(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExceptionList.ExceptionMatch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExceptionList.ExceptionMatch()
{
  return &type metadata for ExceptionList.ExceptionMatch;
}

uint64_t getEnumTagSinglePayload for ExceptionList.ExceptionMatch.VersionSpec(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ExceptionList.ExceptionMatch.VersionSpec(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002FB9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExceptionList.ExceptionMatch.VersionSpec()
{
  return &type metadata for ExceptionList.ExceptionMatch.VersionSpec;
}

uint64_t sub_10002FBD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  sub_10002F064(v2, v3);
  return a1;
}

uint64_t sub_10002FC18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 32);
  swift_bridgeObjectRelease();
  sub_10002404C(v2, v3);
  return a1;
}

unint64_t sub_10002FC5C()
{
  unint64_t result = qword_10017C8F0;
  if (!qword_10017C8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C8F0);
  }
  return result;
}

uint64_t sub_10002FCB0(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_10002FD08()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002FD40()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002FD50(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_100199288, 0);
}

uint64_t *sub_10002FD60()
{
  if (qword_100182450 != -1) {
    swift_once();
  }
  return &qword_100199288;
}

uint64_t sub_10002FDAC(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_100199290, 1);
}

uint64_t *sub_10002FDBC()
{
  if (qword_100182458 != -1) {
    swift_once();
  }
  return &qword_100199290;
}

uint64_t sub_10002FE08(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_100199298, 2);
}

uint64_t sub_10002FE18(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_1001992A0, 3);
}

uint64_t sub_10002FE28(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_1001992A8, 4);
}

uint64_t *sub_10002FE38()
{
  if (qword_100182470 != -1) {
    swift_once();
  }
  return &qword_1001992A8;
}

uint64_t sub_10002FE84(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_1001992B0, 5);
}

uint64_t *sub_10002FE94()
{
  if (qword_100182478 != -1) {
    swift_once();
  }
  return &qword_1001992B0;
}

uint64_t sub_10002FEE0(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_1001992B8, 6);
}

uint64_t sub_10002FEF0(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_1001992C0, 7);
}

uint64_t sub_10002FF00(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_1001992C8, 8);
}

uint64_t *sub_10002FF10()
{
  if (qword_100182490 != -1) {
    swift_once();
  }
  return &qword_1001992C8;
}

uint64_t sub_10002FF5C(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_1001992D0, 9);
}

uint64_t *sub_10002FF6C()
{
  if (qword_100182498 != -1) {
    swift_once();
  }
  return &qword_1001992D0;
}

uint64_t sub_10002FFB8(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_1001992D8, 10);
}

uint64_t *sub_10002FFC8()
{
  if (qword_1001824A0 != -1) {
    swift_once();
  }
  return &qword_1001992D8;
}

uint64_t sub_100030014(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_1001992E0, 11);
}

uint64_t *sub_100030024()
{
  if (qword_1001824A8 != -1) {
    swift_once();
  }
  return &qword_1001992E0;
}

uint64_t sub_100030070(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_1001992E8, 12);
}

uint64_t *sub_100030080()
{
  if (qword_1001824B0 != -1) {
    swift_once();
  }
  return &qword_1001992E8;
}

uint64_t sub_1000300CC(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_1001992F0, 13);
}

uint64_t *sub_1000300DC()
{
  if (qword_1001824B8 != -1) {
    swift_once();
  }
  return &qword_1001992F0;
}

uint64_t sub_100030128(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_1001992F8, 14);
}

uint64_t sub_100030138(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_100199300, 15);
}

uint64_t sub_100030148(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_100199308, 16);
}

uint64_t sub_100030158(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_100199310, 17);
}

uint64_t sub_100030168(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_100199318, 18);
}

uint64_t sub_100030178(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_100199320, 19);
}

uint64_t sub_100030188(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_100199328, 20);
}

uint64_t sub_100030198(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_100199330, 21);
}

uint64_t *sub_1000301A8()
{
  if (qword_1001824F8 != -1) {
    swift_once();
  }
  return &qword_100199330;
}

uint64_t sub_1000301F4(uint64_t a1)
{
  return sub_100030204(a1, (uint64_t)&qword_100199338, 22);
}

uint64_t sub_100030204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_10003F560();
  unint64_t v6 = sub_10003FF7C();
  return sub_1000F0560(a3, (uint64_t)&type metadata for RealizedInfo.Flags, v5, v6, a2);
}

uint64_t sub_10003025C(uint64_t a1)
{
  if (qword_100182450 != -1) {
    swift_once();
  }
  if ((qword_100199288 & ~a1) != 0)
  {
    uint64_t v2 = (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v2 = sub_10000C3BC(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v4 = *((void *)v2 + 2);
    unint64_t v3 = *((void *)v2 + 3);
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v3 > 1), v4 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v4 + 1;
    unint64_t v5 = &v2[16 * v4];
    *((void *)v5 + 4) = 0x64696C6176;
    *((void *)v5 + 5) = 0xE500000000000000;
  }
  if (qword_100182458 != -1) {
    swift_once();
  }
  if ((qword_100199290 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v7 = *((void *)v2 + 2);
    unint64_t v6 = *((void *)v2 + 3);
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v6 > 1), v7 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v7 + 1;
    int v8 = &v2[16 * v7];
    *((void *)v8 + 4) = 0x65746164696C6176;
    *((void *)v8 + 5) = 0xE900000000000064;
  }
  if (qword_100182460 != -1) {
    swift_once();
  }
  if ((qword_100199298 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v10 = *((void *)v2 + 2);
    unint64_t v9 = *((void *)v2 + 3);
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v9 > 1), v10 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v10 + 1;
    char v11 = &v2[16 * v10];
    *((void *)v11 + 4) = 0xD000000000000011;
    *((void *)v11 + 5) = 0x8000000100146550;
  }
  if (qword_100182468 != -1) {
    swift_once();
  }
  if ((qword_1001992A0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v13 = *((void *)v2 + 2);
    unint64_t v12 = *((void *)v2 + 3);
    if (v13 >= v12 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v12 > 1), v13 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v13 + 1;
    uint64_t v14 = &v2[16 * v13];
    *((void *)v14 + 4) = 0xD000000000000015;
    *((void *)v14 + 5) = 0x8000000100146530;
  }
  if (qword_100182470 != -1) {
    swift_once();
  }
  if ((qword_1001992A8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v16 = *((void *)v2 + 2);
    unint64_t v15 = *((void *)v2 + 3);
    if (v16 >= v15 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v15 > 1), v16 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v16 + 1;
    unint64_t v17 = &v2[16 * v16];
    *((void *)v17 + 4) = 0x69746E6568747561;
    *((void *)v17 + 5) = 0xE900000000000063;
  }
  if (qword_100182478 != -1) {
    swift_once();
  }
  if ((qword_1001992B0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v19 = *((void *)v2 + 2);
    unint64_t v18 = *((void *)v2 + 3);
    if (v19 >= v18 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v18 > 1), v19 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v19 + 1;
    uint64_t v20 = &v2[16 * v19];
    strcpy(v20 + 32, "authenticated");
    *((_WORD *)v20 + 23) = -4864;
  }
  if (qword_100182480 != -1) {
    swift_once();
  }
  if ((qword_1001992B8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v22 = *((void *)v2 + 2);
    unint64_t v21 = *((void *)v2 + 3);
    if (v22 >= v21 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v21 > 1), v22 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v22 + 1;
    unint64_t v23 = &v2[16 * v22];
    *((void *)v23 + 4) = 0xD000000000000015;
    *((void *)v23 + 5) = 0x8000000100146510;
  }
  if (qword_100182488 != -1) {
    swift_once();
  }
  if ((qword_1001992C0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v25 = *((void *)v2 + 2);
    unint64_t v24 = *((void *)v2 + 3);
    if (v25 >= v24 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v24 > 1), v25 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v25 + 1;
    unint64_t v26 = &v2[16 * v25];
    *((void *)v26 + 4) = 0xD000000000000019;
    *((void *)v26 + 5) = 0x80000001001464F0;
  }
  if (qword_100182490 != -1) {
    swift_once();
  }
  if ((qword_1001992C8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v28 = *((void *)v2 + 2);
    unint64_t v27 = *((void *)v2 + 3);
    if (v28 >= v27 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v27 > 1), v28 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v28 + 1;
    uint64_t v29 = &v2[16 * v28];
    *((void *)v29 + 4) = 0x6465766F72707061;
    *((void *)v29 + 5) = 0xE800000000000000;
  }
  if (qword_100182498 != -1) {
    swift_once();
  }
  if ((qword_1001992D0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v31 = *((void *)v2 + 2);
    unint64_t v30 = *((void *)v2 + 3);
    if (v31 >= v30 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v30 > 1), v31 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v31 + 1;
    BOOL v32 = &v2[16 * v31];
    *((void *)v32 + 4) = 0x6C61766F72707061;
    *((void *)v32 + 5) = 0xEF64656B63656843;
  }
  if (qword_1001824A0 != -1) {
    swift_once();
  }
  if ((qword_1001992D8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v34 = *((void *)v2 + 2);
    unint64_t v33 = *((void *)v2 + 3);
    if (v34 >= v33 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v33 > 1), v34 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v34 + 1;
    unint64_t v35 = &v2[16 * v34];
    strcpy(v35 + 32, "inExcludeList");
    *((_WORD *)v35 + 23) = -4864;
  }
  if (qword_1001824A8 != -1) {
    swift_once();
  }
  if ((qword_1001992E0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v37 = *((void *)v2 + 2);
    unint64_t v36 = *((void *)v2 + 3);
    if (v37 >= v36 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v36 > 1), v37 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v37 + 1;
    uint64_t v38 = &v2[16 * v37];
    *((void *)v38 + 4) = 0xD000000000000018;
    *((void *)v38 + 5) = 0x80000001001464D0;
  }
  if (qword_1001824B0 != -1) {
    swift_once();
  }
  if ((qword_1001992E8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v40 = *((void *)v2 + 2);
    unint64_t v39 = *((void *)v2 + 3);
    if (v40 >= v39 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v39 > 1), v40 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v40 + 1;
    uint64_t v41 = &v2[16 * v40];
    *((void *)v41 + 4) = 0xD00000000000001ELL;
    *((void *)v41 + 5) = 0x80000001001464B0;
  }
  if (qword_1001824B8 != -1) {
    swift_once();
  }
  if ((qword_1001992F0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v43 = *((void *)v2 + 2);
    unint64_t v42 = *((void *)v2 + 3);
    if (v43 >= v42 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v42 > 1), v43 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v43 + 1;
    unint64_t v44 = &v2[16 * v43];
    *((void *)v44 + 4) = 0x656C707061;
    *((void *)v44 + 5) = 0xE500000000000000;
  }
  if (qword_1001824C0 != -1) {
    swift_once();
  }
  if ((qword_1001992F8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v46 = *((void *)v2 + 2);
    unint64_t v45 = *((void *)v2 + 3);
    if (v46 >= v45 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v45 > 1), v46 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v46 + 1;
    uint64_t v47 = &v2[16 * v46];
    strcpy(v47 + 32, "sipProtected");
    v47[45] = 0;
    *((_WORD *)v47 + 23) = -5120;
  }
  if (qword_1001824C8 != -1) {
    swift_once();
  }
  if ((qword_100199300 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v49 = *((void *)v2 + 2);
    unint64_t v48 = *((void *)v2 + 3);
    if (v49 >= v48 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v48 > 1), v49 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v49 + 1;
    Swift::String v50 = &v2[16 * v49];
    *((void *)v50 + 4) = 0x64616F4C72657375;
    *((void *)v50 + 5) = 0xEF6465776F6C6C41;
  }
  if (qword_1001824D0 != -1) {
    swift_once();
  }
  if ((qword_100199308 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v52 = *((void *)v2 + 2);
    unint64_t v51 = *((void *)v2 + 3);
    if (v52 >= v51 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v51 > 1), v52 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v52 + 1;
    unint64_t v53 = &v2[16 * v52];
    *((void *)v53 + 4) = 0xD000000000000014;
    *((void *)v53 + 5) = 0x8000000100146490;
  }
  if (qword_1001824D8 != -1) {
    swift_once();
  }
  if ((qword_100199310 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v55 = *((void *)v2 + 2);
    unint64_t v54 = *((void *)v2 + 3);
    if (v55 >= v54 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v54 > 1), v55 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v55 + 1;
    uint64_t v56 = &v2[16 * v55];
    *((void *)v56 + 4) = 0xD000000000000014;
    *((void *)v56 + 5) = 0x8000000100146470;
  }
  if (qword_1001824E0 != -1) {
    swift_once();
  }
  if ((qword_100199318 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v58 = *((void *)v2 + 2);
    unint64_t v57 = *((void *)v2 + 3);
    if (v58 >= v57 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v57 > 1), v58 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v58 + 1;
    char v59 = &v2[16 * v58];
    *((void *)v59 + 4) = 0xD000000000000013;
    *((void *)v59 + 5) = 0x8000000100146450;
  }
  if (qword_1001824E8 != -1) {
    swift_once();
  }
  if ((qword_100199320 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v61 = *((void *)v2 + 2);
    unint64_t v60 = *((void *)v2 + 3);
    if (v61 >= v60 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v60 > 1), v61 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v61 + 1;
    unint64_t v62 = &v2[16 * v61];
    strcpy(v62 + 32, "appleAuxiliary");
    v62[47] = -18;
  }
  if (qword_1001824F0 != -1) {
    swift_once();
  }
  if ((qword_100199328 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v64 = *((void *)v2 + 2);
    unint64_t v63 = *((void *)v2 + 3);
    if (v64 >= v63 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v63 > 1), v64 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v64 + 1;
    unint64_t v65 = &v2[16 * v64];
    *((void *)v65 + 4) = 0xD000000000000011;
    *((void *)v65 + 5) = 0x8000000100146430;
  }
  if (qword_1001824F8 != -1) {
    swift_once();
  }
  if ((qword_100199330 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v67 = *((void *)v2 + 2);
    unint64_t v66 = *((void *)v2 + 3);
    if (v67 >= v66 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v66 > 1), v67 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v67 + 1;
    unint64_t v68 = &v2[16 * v67];
    strcpy(v68 + 32, "appleExcluded");
    *((_WORD *)v68 + 23) = -4864;
  }
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100014AB8();
  uint64_t v69 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v69;
}

void *sub_100031344@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100031350()
{
  return sub_10003025C(*v0);
}

void sub_100031358(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_100031360@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100031374@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_100031388@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10003139C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1000313CC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000313F8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_10003141C(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100031430(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_100031444(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100031458@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10003146C(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100031480(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100031494(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000314A8()
{
  return *v0 == 0;
}

uint64_t sub_1000314B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_1000314D0(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_1000314E4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1000314F4(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100031500(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100031514@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10003B6FC(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_100031554@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  if (!a1 || (uint64_t v4 = (uint64_t *)sub_1000A148C(), !*(void *)(a1 + 16)))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    goto LABEL_13;
  }
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_1000048E0(v6, v5);
  if ((v8 & 1) == 0)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  sub_1000047DC(*(void *)(a1 + 56) + 32 * v7, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  if (!*((void *)&v17 + 1))
  {
LABEL_13:
    sub_1000130EC((uint64_t)&v16, &qword_10017C018);
    uint64_t v11 = 0;
    unint64_t v12 = 0xF000000000000000;
    return sub_1000EF5D4(v11, v12, a2);
  }
  int v9 = swift_dynamicCast();
  BOOL v10 = v9 == 0;
  if (v9) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10) {
    unint64_t v12 = 0xF000000000000000;
  }
  else {
    unint64_t v12 = v15;
  }
  return sub_1000EF5D4(v11, v12, a2);
}

uint64_t sub_10003164C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3 || (uint64_t v4 = sub_1000A13D4(), !*(void *)(a3 + 16)))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    goto LABEL_13;
  }
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_1000048E0(v6, v5);
  if ((v8 & 1) == 0)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  sub_1000047DC(*(void *)(a3 + 56) + 32 * v7, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  if (!*((void *)&v17 + 1))
  {
LABEL_13:
    sub_1000130EC((uint64_t)&v16, &qword_10017C018);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    return sub_1000F1E70(v11, v12);
  }
  int v9 = swift_dynamicCast();
  BOOL v10 = v9 == 0;
  if (v9) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v15;
  }
  return sub_1000F1E70(v11, v12);
}

uint64_t sub_10003173C()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t sub_100031770(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_1000317B0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100031804@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_10001BA68(v1 + 80, a1, &qword_10017C910);
}

uint64_t sub_100031858(uint64_t a1)
{
  swift_beginAccess();
  sub_10003EBF4(a1, v1 + 80, &qword_10017C910);
  return swift_endAccess();
}

uint64_t (*sub_1000318B4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100031908()
{
  swift_beginAccess();
  uint64_t v1 = v0[15];
  sub_10003C46C(v1, v0[16], v0[17]);
  return v1;
}

uint64_t sub_10003196C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v7 = v3[15];
  uint64_t v8 = v3[16];
  uint64_t v9 = v3[17];
  v3[15] = a1;
  v3[16] = a2;
  v3[17] = a3;
  sub_10003C46C(a1, a2, a3);
  sub_10003C480(v7, v8, v9);
  return sub_10003C480(a1, a2, a3);
}

uint64_t (*sub_100031A08())()
{
  return j__swift_endAccess;
}

uint64_t sub_100031A5C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100031AA8(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100031AFC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100031B58(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 96) = 0u;
  *(_OWORD *)(v19 + 112) = 0u;
  *(void *)(v19 + 128) = 0;
  *(void *)(v19 + 136) = 1;
  *(void *)(v19 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors) = _swiftEmptyArrayStorage;
  *(void *)(v19 + 24) = a1;
  sub_100029900(a2, v19 + 32, &qword_10017C010);
  *(unsigned char *)(v19 + 72) = a3;
  swift_beginAccess();
  sub_10003EBF4(a4, v19 + 80, &qword_10017C910);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v20 = *(void *)(v19 + 120);
  uint64_t v21 = *(void *)(v19 + 128);
  uint64_t v22 = *(void *)(v19 + 136);
  *(void *)(v19 + 120) = a5;
  *(void *)(v19 + 128) = a6;
  *(void *)(v19 + 136) = a7;
  sub_10003C480(v20, v21, v22);
  sub_100029900(a8, v19 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10017FA60);
  uint64_t v23 = v19 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex;
  *(void *)uint64_t v23 = a9;
  *(unsigned char *)(v23 + 8) = a10 & 1;
  sub_100029900(a11, v19 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_10017C918);
  *(void *)(v19 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches) = a12;
  swift_beginAccess();
  *(void *)(v19 + 16) = a13;
  return v19;
}

BOOL sub_100031D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void v20[3];
  uint64_t v21;

  uint64_t v7 = (uint64_t *)sub_1000A145C();
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  BOOL v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 312);
  swift_bridgeObjectRetain();
  v10(v20, a2, a3, v8, v9);
  swift_bridgeObjectRelease();
  if (!v21) {
    goto LABEL_10;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v11 = sub_1000F1E20();
  if (v12) {
    return 0;
  }
  unint64_t v13 = v11;
  uint64_t v14 = sub_1000A13D4();
  uint64_t v15 = *v14;
  long long v16 = v14[1];
  swift_bridgeObjectRetain();
  v10(v20, a2, a3, v15, v16);
  swift_bridgeObjectRelease();
  if (!v21)
  {
LABEL_10:
    sub_1000130EC((uint64_t)v20, &qword_10017C018);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  long long v17 = sub_1000F1E20();
  if (v18) {
    return 0;
  }
  return v13 <= a1 && v17 >= a1;
}

uint64_t sub_100031EAC(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v139 = v3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  uint64_t v142 = v3;
  uint64_t v137 = v2 + 32;
  int64_t v140 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v146)
  {
    if (v6)
    {
      uint64_t v145 = (v6 - 1) & v6;
      int64_t v146 = i;
      unint64_t v9 = __clz(__rbit64(v6)) | (i << 6);
      goto LABEL_23;
    }
    int64_t v10 = i + 1;
    if (__OFADD__(i, 1)) {
      goto LABEL_86;
    }
    if (v10 >= v140) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v139 + 8 * v10);
    int64_t v12 = i + 1;
    if (!v11)
    {
      int64_t v12 = i + 2;
      if (i + 2 >= v140) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v139 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = i + 3;
        if (i + 3 >= v140) {
          return swift_release();
        }
        unint64_t v11 = *(void *)(v139 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v145 = (v11 - 1) & v11;
    int64_t v146 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
    uint64_t v14 = (uint64_t *)(*(void *)(v142 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = *(void *)(*(void *)(v142 + 56) + 8 * v9);
    uint64_t v18 = v143[3];
    type metadata accessor for DriverExtension(0);
    uint64_t v147 = v18;
    uint64_t v19 = swift_dynamicCastClass();
    swift_bridgeObjectRetain();
    if (!v19)
    {
      swift_bridgeObjectRetain();
      goto LABEL_56;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_100032AB4(&v154, v15, v16);
    uint64_t v22 = (void (*)(long long *, void))v20;
    uint64_t v144 = v15;
    if (*v21)
    {
      uint64_t v23 = v21;
      unint64_t v141 = v20;
      unint64_t v24 = (uint64_t *)sub_1000A19B8();
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      sub_10001BA68(v137, (uint64_t)&v148, &qword_10017C010);
      uint64_t v27 = *((void *)&v149 + 1);
      if (*((void *)&v149 + 1))
      {
        uint64_t v28 = v150;
        sub_1000036B0(&v148, *((uint64_t *)&v149 + 1));
        uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 32);
        swift_bridgeObjectRetain();
        uint64_t v30 = v29(v27, v28);
        unint64_t v32 = v31;
        uint64_t v33 = sub_1000F9B9C();
        uint64_t v35 = v34;
        sub_100012A10(v30, v32);
        *((void *)&v153 + 1) = &type metadata for String;
        *(void *)&long long v152 = v33;
        *((void *)&v152 + 1) = v35;
        uint64_t v15 = v144;
        sub_10000478C((uint64_t)&v148);
        if (*((void *)&v153 + 1))
        {
          sub_10001889C(&v152, &v148);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v151 = (void *)*v23;
          uint64_t *v23 = 0x8000000000000000;
          sub_100018144(&v148, v25, v26, isUniquelyReferenced_nonNull_native);
          uint64_t *v23 = (uint64_t)v151;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_37:
          uint64_t v22 = (void (*)(long long *, void))v141;
          goto LABEL_38;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_1000130EC((uint64_t)&v148, &qword_10017C010);
        long long v152 = 0u;
        long long v153 = 0u;
      }
      sub_1000130EC((uint64_t)&v152, &qword_10017C018);
      swift_bridgeObjectRetain();
      unint64_t v37 = sub_1000048E0(v25, v26);
      char v39 = v38;
      swift_bridgeObjectRelease();
      if (v39)
      {
        char v40 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v151 = (void *)*v23;
        uint64_t *v23 = 0x8000000000000000;
        if ((v40 & 1) == 0) {
          sub_100018304();
        }
        uint64_t v41 = (uint64_t)v151;
        swift_bridgeObjectRelease();
        sub_10001889C((_OWORD *)(*(void *)(v41 + 56) + 32 * v37), &v148);
        sub_10003AD88(v37, v41);
        uint64_t *v23 = v41;
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v148 = 0u;
        long long v149 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000130EC((uint64_t)&v148, &qword_10017C018);
      goto LABEL_37;
    }
LABEL_38:
    v22(&v154, 0);
    swift_bridgeObjectRelease();
    if (a2)
    {
      swift_bridgeObjectRetain();
      unint64_t v43 = sub_100032AB4(&v148, v15, v16);
      if (*v42)
      {
        unint64_t v44 = v42;
        unint64_t v45 = (uint64_t *)sub_1000A19C4();
        uint64_t v46 = *v45;
        uint64_t v47 = v45[1];
        uint64_t v155 = &type metadata for Bool;
        LOBYTE(v154) = 1;
        sub_10001889C(&v154, &v152);
        swift_bridgeObjectRetain();
        char v48 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v151 = (void *)*v44;
        *unint64_t v44 = 0x8000000000000000;
        sub_100018144(&v152, v46, v47, v48);
        *unint64_t v44 = v151;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      ((void (*)(long long *, void))v43)(&v148, 0);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    Swift::String v50 = sub_100032AB4(&v148, v15, v16);
    if (*v49)
    {
      unint64_t v51 = v49;
      unint64_t v52 = (uint64_t *)sub_1000A1504();
      uint64_t v53 = *v52;
      uint64_t v54 = v52[1];
      unint64_t v55 = *(uint64_t (**)(uint64_t))(*v143 + 296);
      uint64_t v56 = swift_bridgeObjectRetain();
      uint64_t v57 = v55(v56);
      uint64_t v15 = v144;
      uint64_t v155 = &type metadata for Data;
      *(void *)&long long v154 = v57;
      *((void *)&v154 + 1) = v58;
      sub_10001889C(&v154, &v152);
      char v59 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v151 = (void *)*v51;
      *unint64_t v51 = 0x8000000000000000;
      sub_100018144(&v152, v53, v54, v59);
      *unint64_t v51 = v151;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    ((void (*)(long long *, void))v50)(&v148, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v61 = sub_100032AB4(&v148, v15, v16);
    if (*v60)
    {
      unint64_t v62 = v60;
      unint64_t v63 = (uint64_t *)sub_1000A19A0();
      uint64_t v64 = *v63;
      uint64_t v65 = v63[1];
      unint64_t v66 = *(uint64_t (**)(uint64_t))(*(void *)v147 + 144);
      uint64_t v67 = swift_bridgeObjectRetain();
      uint64_t v68 = v66(v67);
      uint64_t v155 = &type metadata for String;
      *(void *)&long long v154 = v68;
      *((void *)&v154 + 1) = v69;
      sub_10001889C(&v154, &v152);
      char v70 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v151 = (void *)*v62;
      *unint64_t v62 = 0x8000000000000000;
      sub_100018144(&v152, v64, v65, v70);
      *unint64_t v62 = v151;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    ((void (*)(long long *, void))v61)(&v148, 0);
    swift_bridgeObjectRelease();
    uint64_t v71 = (uint64_t *)sub_1000A19D0();
    uint64_t v72 = v71;
    if (*(void *)(v17 + 16))
    {
      uint64_t v73 = *v71;
      uint64_t v74 = v71[1];
      swift_bridgeObjectRetain();
      unint64_t v75 = sub_1000048E0(v73, v74);
      if (v76)
      {
        sub_1000047DC(*(void *)(v17 + 56) + 32 * v75, (uint64_t)&v148);
      }
      else
      {
        long long v148 = 0u;
        long long v149 = 0u;
      }
      uint64_t v15 = v144;
      swift_bridgeObjectRelease();
      if (*((void *)&v149 + 1))
      {
        sub_1000130EC((uint64_t)&v148, &qword_10017C018);
        goto LABEL_56;
      }
    }
    else
    {
      long long v148 = 0u;
      long long v149 = 0u;
      uint64_t v15 = v144;
    }
    sub_1000130EC((uint64_t)&v148, &qword_10017C018);
    swift_bridgeObjectRetain();
    uint64_t v78 = sub_100032AB4(&v148, v15, v16);
    if (*v77)
    {
      uint64_t v79 = v77;
      uint64_t v81 = *v72;
      uint64_t v80 = v72[1];
      swift_bridgeObjectRetain();
      unint64_t v82 = (uint64_t *)sub_1000A19DC();
      uint64_t v83 = *v82;
      uint64_t v84 = v82[1];
      uint64_t v155 = &type metadata for String;
      *(void *)&long long v154 = v83;
      *((void *)&v154 + 1) = v84;
      sub_10001889C(&v154, &v152);
      swift_bridgeObjectRetain();
      char v85 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v151 = (void *)*v79;
      *uint64_t v79 = 0x8000000000000000;
      sub_100018144(&v152, v81, v80, v85);
      *uint64_t v79 = v151;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    ((void (*)(long long *, void))v78)(&v148, 0);
    swift_bridgeObjectRelease();
LABEL_56:
    uint64_t v86 = (uint64_t *)sub_1000A19A0();
    uint64_t v87 = v86;
    if (*(void *)(v17 + 16))
    {
      uint64_t v88 = *v86;
      uint64_t v89 = v86[1];
      swift_bridgeObjectRetain();
      unint64_t v90 = sub_1000048E0(v88, v89);
      if (v91)
      {
        sub_1000047DC(*(void *)(v17 + 56) + 32 * v90, (uint64_t)&v148);
      }
      else
      {
        long long v148 = 0u;
        long long v149 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v148 = 0u;
      long long v149 = 0u;
    }
    swift_bridgeObjectRelease();
    uint64_t v92 = *((void *)&v149 + 1);
    sub_1000130EC((uint64_t)&v148, &qword_10017C018);
    if (v92)
    {
      int64_t v94 = sub_100032AB4(&v148, v15, v16);
      if (*v93)
      {
        uint64_t v95 = v93;
        uint64_t v96 = (uint64_t *)sub_1000A19AC();
        uint64_t v98 = *v96;
        uint64_t v97 = v96[1];
        uint64_t v99 = *(uint64_t (**)(uint64_t))(*(void *)v147 + 144);
        uint64_t v100 = swift_bridgeObjectRetain();
        uint64_t v101 = v99(v100);
        uint64_t v155 = &type metadata for String;
        *(void *)&long long v154 = v101;
        *((void *)&v154 + 1) = v102;
        sub_10001889C(&v154, &v152);
        char v103 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v151 = (void *)*v95;
        uint64_t v104 = v151;
        *uint64_t v95 = 0x8000000000000000;
        unint64_t v106 = sub_1000048E0(v98, v97);
        uint64_t v107 = v104[2];
        BOOL v108 = (v105 & 1) == 0;
        uint64_t v109 = v107 + v108;
        if (__OFADD__(v107, v108))
        {
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        char v110 = v105;
        if (v104[3] >= v109)
        {
          if ((v103 & 1) == 0) {
            sub_100018304();
          }
        }
        else
        {
          sub_100017E44(v109, v103);
          unint64_t v111 = sub_1000048E0(v98, v97);
          if ((v110 & 1) != (v112 & 1)) {
            goto LABEL_91;
          }
          unint64_t v106 = v111;
        }
        uint64_t v129 = v151;
        if ((v110 & 1) == 0)
        {
          v151[(v106 >> 6) + 8] |= 1 << v106;
          unint64_t v130 = (uint64_t *)(v129[6] + 16 * v106);
          *unint64_t v130 = v98;
          v130[1] = v97;
          sub_10001889C(&v152, (_OWORD *)(v129[7] + 32 * v106));
          uint64_t v131 = v129[2];
          BOOL v132 = __OFADD__(v131, 1);
          uint64_t v133 = v131 + 1;
          if (v132) {
            goto LABEL_88;
          }
LABEL_83:
          v129[2] = v133;
          swift_bridgeObjectRetain();
          goto LABEL_5;
        }
        goto LABEL_4;
      }
    }
    else
    {
      int64_t v94 = sub_100032AB4(&v148, v15, v16);
      if (*v113)
      {
        uint64_t v95 = v113;
        uint64_t v115 = *v87;
        uint64_t v114 = v87[1];
        char v116 = *(uint64_t (**)(uint64_t))(*(void *)v147 + 144);
        uint64_t v117 = swift_bridgeObjectRetain();
        uint64_t v118 = v116(v117);
        uint64_t v155 = &type metadata for String;
        *(void *)&long long v154 = v118;
        *((void *)&v154 + 1) = v119;
        sub_10001889C(&v154, &v152);
        char v120 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v151 = (void *)*v95;
        uint64_t v121 = v151;
        *uint64_t v95 = 0x8000000000000000;
        unint64_t v106 = sub_1000048E0(v115, v114);
        uint64_t v123 = v121[2];
        BOOL v124 = (v122 & 1) == 0;
        uint64_t v125 = v123 + v124;
        if (__OFADD__(v123, v124)) {
          goto LABEL_87;
        }
        char v126 = v122;
        if (v121[3] >= v125)
        {
          if ((v120 & 1) == 0) {
            sub_100018304();
          }
        }
        else
        {
          sub_100017E44(v125, v120);
          unint64_t v127 = sub_1000048E0(v115, v114);
          if ((v126 & 1) != (v128 & 1)) {
            goto LABEL_91;
          }
          unint64_t v106 = v127;
        }
        uint64_t v129 = v151;
        if ((v126 & 1) == 0)
        {
          v151[(v106 >> 6) + 8] |= 1 << v106;
          size_t v134 = (uint64_t *)(v129[6] + 16 * v106);
          *size_t v134 = v115;
          v134[1] = v114;
          sub_10001889C(&v152, (_OWORD *)(v129[7] + 32 * v106));
          uint64_t v135 = v129[2];
          BOOL v132 = __OFADD__(v135, 1);
          uint64_t v133 = v135 + 1;
          if (v132) {
            goto LABEL_89;
          }
          goto LABEL_83;
        }
LABEL_4:
        uint64_t v8 = (_OWORD *)(v129[7] + 32 * v106);
        sub_10000478C((uint64_t)v8);
        sub_10001889C(&v152, v8);
LABEL_5:
        *uint64_t v95 = v129;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    ((void (*)(long long *, void))v94)(&v148, 0);
    swift_bridgeObjectRelease();
    unint64_t v6 = v145;
  }
  uint64_t v13 = i + 4;
  if (i + 4 >= v140) {
    return swift_release();
  }
  unint64_t v11 = *(void *)(v139 + 8 * v13);
  if (v11)
  {
    int64_t v12 = i + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v140) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v139 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_90:
  __break(1u);
LABEL_91:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void (*sub_100032AB4(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_10003A6AC(v6, a2, a3);
  return sub_10002CD14;
}

uint64_t sub_100032B34(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v90 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004700(&qword_10017C918);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v89 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)v4[3];
  uint64_t v17 = v16[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v18 = sub_10003C494(&_swiftEmptyDictionarySingleton, v17, (uint64_t)v4, a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v19 = (uint64_t *)sub_1000A14B0();
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v18 + 16);
  uint64_t v91 = v9;
  uint64_t v92 = v8;
  if (v21)
  {
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    swift_bridgeObjectRetain();
    unint64_t v24 = sub_1000048E0(v22, v23);
    if (v25)
    {
      sub_1000047DC(*(void *)(v18 + 56) + 32 * v24, (uint64_t)&v98);
      swift_bridgeObjectRelease();
      if (*((void *)&v99 + 1))
      {
        sub_1000130EC((uint64_t)&v98, &qword_10017C018);
        goto LABEL_13;
      }
    }
    else
    {
      long long v98 = 0u;
      long long v99 = 0u;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    long long v98 = 0u;
    long long v99 = 0u;
  }
  sub_1000130EC((uint64_t)&v98, &qword_10017C018);
  uint64_t v26 = *v20;
  uint64_t v27 = v20[1];
  uint64_t v28 = *(uint64_t (**)(uint64_t))(*v16 + 224);
  uint64_t v29 = swift_bridgeObjectRetain();
  uint64_t v30 = v28(v29);
  *((void *)&v99 + 1) = &type metadata for Data;
  if (v31 >> 60 == 15) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v30;
  }
  unint64_t v33 = 0xC000000000000000;
  if (v31 >> 60 != 15) {
    unint64_t v33 = v31;
  }
  *(void *)&long long v98 = v32;
  *((void *)&v98 + 1) = v33;
  sub_10001889C(&v98, &v96);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v95[0] = v18;
  sub_100018144(&v96, v26, v27, isUniquelyReferenced_nonNull_native);
  uint64_t v18 = *(void *)&v95[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_13:
  sub_10001BA68((uint64_t)v4 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, (uint64_t)v13, &qword_10017C918);
  uint64_t v35 = v93;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v93) == 1)
  {
    uint64_t v36 = sub_1000130EC((uint64_t)v13, &qword_10017C918);
  }
  else
  {
    unint64_t v37 = v89;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v89, v13, v35);
    char v38 = (uint64_t *)sub_1000A148C();
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_1000EF75C();
    *((void *)&v99 + 1) = &type metadata for Data;
    *(void *)&long long v98 = v41;
    *((void *)&v98 + 1) = v42;
    sub_10001889C(&v98, &v96);
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v95[0] = v18;
    sub_100018144(&v96, v39, v40, v43);
    uint64_t v18 = *(void *)&v95[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v37, v35);
  }
  uint64_t v44 = (*(uint64_t (**)(uint64_t))(*v4 + 168))(v36);
  uint64_t v45 = v44;
  if (qword_1001824D0 != -1) {
    uint64_t v44 = swift_once();
  }
  if ((qword_100199308 & ~v45) == 0)
  {
    uint64_t v46 = (uint64_t *)sub_1000A14A4();
    uint64_t v47 = *v46;
    uint64_t v48 = v46[1];
    *((void *)&v99 + 1) = &type metadata for Bool;
    LOBYTE(v98) = 1;
    sub_10001889C(&v98, &v96);
    swift_bridgeObjectRetain();
    char v49 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v95[0] = v18;
    sub_100018144(&v96, v47, v48, v49);
    uint64_t v18 = *(void *)&v95[0];
    swift_bridgeObjectRelease();
    uint64_t v44 = swift_bridgeObjectRelease();
  }
  if (((*(uint64_t (**)(uint64_t))(*v16 + 216))(v44) & 1) != 0
    || (type metadata accessor for DriverExtension(0), swift_dynamicCastClass()))
  {
    (*(void (**)(long long *__return_ptr))(*v16 + 112))(&v96);
    if (v97)
    {
      sub_10000372C(&v96, (uint64_t)&v98);
      Swift::String v50 = (uint64_t *)sub_1000A175C();
      uint64_t v51 = v50[1];
      uint64_t v93 = *v50;
      uint64_t v52 = *((void *)&v99 + 1);
      uint64_t v53 = v100;
      sub_1000036B0(&v98, *((uint64_t *)&v99 + 1));
      uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v53 + 64);
      swift_bridgeObjectRetain();
      unint64_t v55 = v90;
      v54(v52, v53);
      uint64_t v56 = URL.path.getter();
      uint64_t v58 = v57;
      (*(void (**)(char *, uint64_t))(v91 + 8))(v55, v92);
      uint64_t v97 = &type metadata for String;
      *(void *)&long long v96 = v56;
      *((void *)&v96 + 1) = v58;
      sub_10001889C(&v96, v95);
      char v59 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v94 = v18;
      sub_100018144(v95, v93, v51, v59);
      uint64_t v18 = v94;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000478C((uint64_t)&v98);
    }
    else
    {
      sub_1000130EC((uint64_t)&v96, &qword_10017BC78);
    }
    unint64_t v60 = (uint64_t *)sub_1000A1504();
    uint64_t v61 = *v60;
    uint64_t v62 = v60[1];
    uint64_t v63 = (uint64_t)(v4 + 4);
    uint64_t v64 = *(uint64_t (**)(uint64_t))(*v4 + 296);
    uint64_t v65 = swift_bridgeObjectRetain();
    uint64_t v66 = v64(v65);
    *((void *)&v99 + 1) = &type metadata for Data;
    *(void *)&long long v98 = v66;
    *((void *)&v98 + 1) = v67;
    sub_10001889C(&v98, &v96);
    char v68 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v95[0] = v18;
    sub_100018144(&v96, v61, v62, v68);
    uint64_t v69 = *(void *)&v95[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BA68(v63, (uint64_t)&v98, &qword_10017C010);
    uint64_t v70 = *((void *)&v99 + 1);
    if (*((void *)&v99 + 1))
    {
      uint64_t v71 = v100;
      sub_1000036B0(&v98, *((uint64_t *)&v99 + 1));
      uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 24))(v70, v71);
      unint64_t v74 = v73;
      sub_10000478C((uint64_t)&v98);
      if (!v74)
      {
        uint64_t v83 = (uint64_t *)sub_1000A1510();
        uint64_t v80 = *v83;
        uint64_t v81 = v83[1];
        swift_bridgeObjectRetain();
        unint64_t v82 = sub_1000A1528();
        goto LABEL_32;
      }
      if (v74 != 1)
      {
        swift_bridgeObjectRetain();
        unint64_t v75 = (uint64_t *)sub_1000A1510();
        uint64_t v76 = *v75;
        uint64_t v77 = v75[1];
        *((void *)&v99 + 1) = &type metadata for String;
        *(void *)&long long v98 = v72;
        *((void *)&v98 + 1) = v74;
        sub_10001889C(&v98, &v96);
        swift_bridgeObjectRetain();
        char v78 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v95[0] = v69;
        sub_100018144(&v96, v76, v77, v78);
        uint64_t v18 = *(void *)&v95[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100018888(v72, v74);
        return v18;
      }
    }
    else
    {
      sub_1000130EC((uint64_t)&v98, &qword_10017C010);
    }
    uint64_t v79 = (uint64_t *)sub_1000A1510();
    uint64_t v80 = *v79;
    uint64_t v81 = v79[1];
    swift_bridgeObjectRetain();
    unint64_t v82 = sub_1000A151C();
LABEL_32:
    uint64_t v84 = *(void *)v82;
    uint64_t v85 = *((void *)v82 + 1);
    *((void *)&v99 + 1) = &type metadata for String;
    *(void *)&long long v98 = v84;
    *((void *)&v98 + 1) = v85;
    sub_10001889C(&v98, &v96);
    swift_bridgeObjectRetain();
    char v86 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v95[0] = v69;
    sub_100018144(&v96, v80, v81, v86);
    uint64_t v18 = *(void *)&v95[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v18;
}

uint64_t sub_1000333B4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v0 + 24);
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v6 + 112))(&v17, v3);
  if (v18)
  {
    sub_10000372C(&v17, (uint64_t)&v19);
    uint64_t v7 = v21;
    uint64_t v8 = v22;
    sub_1000036B0(&v19, v21);
    (*(void (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
    uint64_t v9 = URL.path.getter();
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    uint64_t v12 = sub_1000EE07C(v9, v11);
    swift_bridgeObjectRelease();
    sub_10000478C((uint64_t)&v19);
  }
  else
  {
    uint64_t v13 = sub_1000130EC((uint64_t)&v17, &qword_10017BC78);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 144))(v13);
    uint64_t v20 = v14;
    v15._countAndFlagsBits = 0x6E7562206F6E2820;
    v15._int64_t object = (void *)0xEC00000029656C64;
    String.append(_:)(v15);
    uint64_t v12 = sub_1000EE07C(v19, v20);
    swift_bridgeObjectRelease();
  }
  return v12;
}

double sub_1000335A4@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v13 = (uint64_t *)sub_1000A1368();
  uint64_t v14 = *v13;
  Swift::String v15 = (void *)v13[1];
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v14;
  v16._int64_t object = v15;
  LOBYTE(v14) = String.hasPrefix(_:)(v16);
  swift_bridgeObjectRelease();
  if (v14)
  {
    sub_100033740(a1, a2, a3, a4, v6, a5 & 1, &v21);
    if (v22)
    {
      uint64_t v17 = sub_100004700(&qword_10017C920);
      if (swift_dynamicCast())
      {
        uint64_t v23 = v20;
        (*(void (**)(uint64_t *, void))(*v6 + 280))(&v23, a5 & 1);
        uint64_t v19 = v23;
        *(void *)(a6 + 24) = v17;
        *(void *)a6 = v19;
        return result;
      }
    }
    else
    {
      sub_1000130EC((uint64_t)&v21, &qword_10017C018);
    }
    double result = 0.0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  else
  {
    sub_100033740(a1, a2, a3, a4, v6, a5 & 1, (_OWORD *)a6);
  }
  return result;
}

_OWORD *sub_100033740@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, char a6@<W5>, _OWORD *a7@<X8>)
{
  unint64_t v14 = sub_100033A20((uint64_t)&off_10016B048);
  if (!a2) {
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 20297;
  v15._int64_t object = (void *)0xE200000000000000;
  if (String.hasPrefix(_:)(v15)
    || (v16._countAndFlagsBits = 21327, v16._int64_t object = (void *)0xE200000000000000, String.hasPrefix(_:)(v16)))
  {
    char v32 = a6;
    v33._countAndFlagsBits = 95;
    v33._int64_t object = (void *)0xE100000000000000;
    v17._countAndFlagsBits = a1;
    v17._int64_t object = a2;
    String.append(_:)(v17);
    Swift::String v18 = v33;
    if (String.hasSuffix(_:)(v33))
    {
      swift_bridgeObjectRelease();
      if (!*(void *)(v14 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v31 = a7;
      uint64_t v19 = *(void *)(a5[3] + 16);
      v33._countAndFlagsBits = a3;
      v33._int64_t object = a4;
      swift_bridgeObjectRetain();
      String.append(_:)(v18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (*(void *)(v19 + 16) && (unint64_t v20 = sub_1000048E0(v33._countAndFlagsBits, (uint64_t)v33._object), (v21 & 1) != 0))
      {
        sub_1000047DC(*(void *)(v19 + 56) + 32 * v20, (uint64_t)&v33);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*((void *)&v34 + 1))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return sub_10001889C(&v33, v31);
        }
      }
      else
      {
        Swift::String v33 = (Swift::String)0;
        long long v34 = 0u;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_1000130EC((uint64_t)&v33, &qword_10017C018);
      a7 = v31;
      if (!*(void *)(v14 + 16)) {
        goto LABEL_15;
      }
    }
    unint64_t v23 = sub_1000048E0(a1, (uint64_t)a2);
    if (v24)
    {
      char v25 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v23);
      uint64_t v26 = *v25;
      uint64_t v27 = v25[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void))(*a5 + 304))(v26, v27, a3, a4, v32 & 1);
      return (_OWORD *)swift_bridgeObjectRelease();
    }
  }
LABEL_15:
  swift_bridgeObjectRelease();
LABEL_16:
  double result = (_OWORD *)swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(a5[3] + 16);
  if (!*(void *)(v28 + 16))
  {
    *a7 = 0u;
    a7[1] = 0u;
    return result;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v29 = sub_1000048E0(a3, (uint64_t)a4);
  if (v30)
  {
    sub_1000047DC(*(void *)(v28 + 56) + 32 * v29, (uint64_t)a7);
  }
  else
  {
    *a7 = 0u;
    a7[1] = 0u;
  }
  swift_bridgeObjectRelease();
  return (_OWORD *)swift_bridgeObjectRelease();
}

unint64_t sub_100033A20(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017CC30);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000048E0(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100033B44(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017CC10);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_1000048E0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100033C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v4 + 304))(a1, a2, a3, a4, 0);
}

uint64_t sub_100033C90()
{
  swift_release();
  sub_1000130EC((uint64_t)(v0 + 4), &qword_10017C010);
  sub_1000130EC((uint64_t)(v0 + 10), &qword_10017C910);
  sub_10003C480(v0[15], v0[16], v0[17]);
  sub_1000130EC((uint64_t)v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_10017C918);
  sub_1000130EC((uint64_t)v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10017FA60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100033D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection) = a1;
  uint64_t v11 = v10 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a2, v12);
  sub_100029900(a3, v10 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID, &qword_10017C918);
  sub_100029900(a4, v10 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID, &qword_10017C918);
  *(void *)(v10 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions) = a5;
  return v10;
}

uint64_t sub_100033E58()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  sub_1000130EC(v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID, &qword_10017C918);
  sub_1000130EC(v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID, &qword_10017C918);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_100033F48()
{
  type metadata accessor for KernelCollection();
  sub_10003C958(&qword_10017C928, (void (*)(uint64_t))type metadata accessor for KernelCollection);
  uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._countAndFlagsBits = 10272;
  v0._int64_t object = (void *)0xE200000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 41;
  v2._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v4;
}

uint64_t sub_100034024()
{
  return sub_100033F48();
}

uint64_t sub_100034048(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v7 = v6;
  LODWORD(v343) = a6;
  *(void *)&long long v349 = a5;
  v362 = (void *)a4;
  uint64_t v355 = a3;
  int v345 = a2;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v347 = *(void *)(v9 - 8);
  uint64_t v348 = v9;
  __chkstk_darwin(v9);
  v346 = (char *)v332 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  v340 = (char *)v332 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  v358 = *(char **)(v14 - 8);
  uint64_t v359 = v14;
  __chkstk_darwin(v14);
  v354 = (char *)v332 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100004700(&qword_10017C918);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  v344 = (_UNKNOWN **)((char *)v332 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v352 = (uint64_t)v332 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v339 = (uint64_t)v332 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v341 = (uint64_t)v332 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)v332 - v25;
  uint64_t v27 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  v351 = (void *)((char *)v332 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v342 = (uint64_t)v332 - v31;
  __chkstk_darwin(v30);
  v360 = (void *)((char *)v332 - v32);
  uint64_t v33 = a1[3];
  uint64_t v34 = a1[4];
  sub_1000036B0(a1, v33);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 16))(v33, v34);
  unint64_t v37 = v36;
  LOBYTE(v34) = sub_1000F26AC(v35, v36, 0, 1uLL);
  sub_10003C944(v35, v37);
  v361 = v26;
  uint64_t v356 = v12;
  if (v34)
  {
    LODWORD(v353) = static os_log_type_t.default.getter();
    id v338 = (id)*sub_1000EF898();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_100132F10;
    uint64_t v357 = v11;
    uint64_t v39 = a1[3];
    uint64_t v40 = a1[4];
    sub_1000036B0(a1, v39);
    uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 24);
    id v338 = v338;
    uint64_t v7 = v6;
    uint64_t v42 = v41(v39, v40);
    unint64_t v44 = v43;
    *(void *)(v38 + 56) = &type metadata for String;
    *(void *)(v38 + 64) = sub_10002A1DC();
    if (v44) {
      unint64_t v45 = v42;
    }
    else {
      unint64_t v45 = 0xD000000000000016;
    }
    unint64_t v46 = 0x8000000100146750;
    if (v44) {
      unint64_t v46 = v44;
    }
    uint64_t v11 = v357;
    *(void *)(v38 + 32) = v45;
    *(void *)(v38 + 40) = v46;
    id v47 = v338;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
  }
  uint64_t v48 = type metadata accessor for OSExtension(0);
  uint64_t v49 = sub_100114014(a1);
  if (!v49)
  {
    *(void *)&v372[0] = 0;
    *((void *)&v372[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(void *)&v372[0] = 0xD00000000000002ALL;
    *((void *)&v372[0] + 1) = 0x8000000100146570;
    uint64_t v71 = a1[3];
    uint64_t v72 = a1[4];
    sub_1000036B0(a1, v71);
    unint64_t v73 = v354;
    (*(void (**)(uint64_t, uint64_t))(v72 + 64))(v71, v72);
    sub_10003C958(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v74 = v359;
    v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    (*((void (**)(char *, uint64_t))v358 + 1))(v73, v74);
    v76._countAndFlagsBits = 46;
    v76._int64_t object = (void *)0xE100000000000000;
    String.append(_:)(v76);
    unint64_t v78 = *((void *)&v372[0] + 1);
    uint64_t v77 = *(void *)&v372[0];
    sub_100012E3C();
    swift_allocError();
    *(_OWORD *)uint64_t v79 = __PAIR128__(v78, v77);
    *(_OWORD *)(v79 + 16) = 0u;
    *(_OWORD *)(v79 + 32) = 0u;
    *(_OWORD *)(v79 + 48) = 0u;
    *(void *)(v79 + 64) = 0;
    *(unsigned char *)(v79 + 72) = 9;
    swift_willThrow();
    return v77;
  }
  Swift::String v50 = (void *)v49;
  uint64_t v335 = v48;
  uint64_t v51 = v360;
  sub_10001BA68((uint64_t)v362, (uint64_t)v360, (uint64_t *)&unk_10017FA60);
  (*(void (**)(void *))(*v50 + 168))(v51);
  uint64_t v52 = a1[3];
  uint64_t v53 = a1[4];
  sub_1000036B0(a1, v52);
  uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 16))(v52, v53);
  unint64_t v56 = v55;
  char v57 = sub_1000F26AC(v54, v55, 0, 1uLL);
  sub_10003C944(v54, v56);
  uint64_t v58 = 168;
  if (v57) {
    uint64_t v58 = 184;
  }
  uint64_t v59 = 160;
  if (v57) {
    uint64_t v59 = 176;
  }
  uint64_t v60 = (uint64_t)v381;
  uint64_t v61 = *(void *)&v381[v59];
  *(void *)&long long v353 = *(void *)&v381[v58];
  swift_bridgeObjectRetain();
  int v62 = *(_DWORD *)(v60 + 640);
  LODWORD(v372[0]) = *(_DWORD *)sub_1000B9860();
  LODWORD(v373) = v62;
  unint64_t v336 = sub_100013438();
  char v63 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v362 = v50;
  v350 = a1;
  uint64_t v337 = v61;
  if (v63)
  {
    int v334 = 0;
    uint64_t v379 = 0;
    memset(v378, 0, sizeof(v378));
    memset(v376, 0, sizeof(v376));
    uint64_t v377 = 0;
    goto LABEL_15;
  }
  uint64_t v77 = v60;
  uint64_t v80 = sub_100036600(a1);
  if (v7)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return v77;
  }
  uint64_t v81 = v80;
  LODWORD(v338) = v62;
  uint64_t v82 = *(void *)(v60 + 40);
  uint64_t v83 = *(void *)(v60 + 48);
  if (v343)
  {
    sub_1000036B0((void *)(v60 + 16), *(void *)(v60 + 40));
    sub_1000FD260(v82, v83);
    uint64_t v84 = v374;
    uint64_t v85 = v375;
    sub_1000036B0(&v373, v374);
    sub_1000F9E3C((uint64_t)v50, v81, v84, v85);
    sub_100029900((uint64_t)v372, (uint64_t)v378, &qword_10017C010);
    sub_10000478C((uint64_t)&v373);
    uint64_t v133 = v353;
  }
  else
  {
    sub_1000036B0((void *)(v60 + 16), *(void *)(v60 + 40));
    sub_1000FD260(v82, v83);
    uint64_t v125 = *((void *)&v372[1] + 1);
    uint64_t v126 = *(void *)&v372[2];
    sub_1000036B0(v372, *((uint64_t *)&v372[1] + 1));
    uint64_t v133 = v353;
    swift_bridgeObjectRetain();
    sub_1000F9E74((uint64_t)&v373, v50, v81, v337, v133, v125, v126);
    swift_bridgeObjectRelease();
    sub_100029900((uint64_t)&v373, (uint64_t)v378, &qword_10017C010);
    sub_10000478C((uint64_t)v372);
  }
  uint64_t v134 = *(void *)(v60 + 40);
  uint64_t v135 = *(void *)(v60 + 48);
  sub_1000036B0((void *)(v60 + 16), v134);
  sub_1000FD260(v134, v135);
  uint64_t v136 = *((void *)&v372[1] + 1);
  uint64_t v137 = *(void *)&v372[2];
  sub_1000036B0(v372, *((uint64_t *)&v372[1] + 1));
  int v334 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 32))(v50, v337, v133, v136, v137);
  uint64_t v138 = sub_10000478C((uint64_t)v372);
  uint64_t v139 = (*(uint64_t (**)(uint64_t))(*v50 + 144))(v138);
  uint64_t v141 = v140;
  uint64_t v142 = (*(uint64_t (**)(void))(*(void *)v60 + 192))();
  if (!*(void *)(v142 + 16) || (unint64_t v143 = sub_1000048E0(v139, v141), (v144 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memset(v372, 0, 40);
    goto LABEL_153;
  }
  uint64_t v145 = *(void *)(*(void *)(v142 + 56) + 8 * v143);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v146 = *(void *)(v145 + 16);
  if (!v146)
  {
LABEL_148:
    memset(v372, 0, 40);
    swift_bridgeObjectRelease();
    goto LABEL_152;
  }
  uint64_t v357 = v11;
  uint64_t v147 = v145 + 32;
  v332[1] = v145;
  swift_bridgeObjectRetain();
  uint64_t v148 = v356;
  while (1)
  {
    sub_10000469C(v147, (uint64_t)&v373);
    uint64_t v149 = v374;
    uint64_t v150 = v375;
    sub_1000036B0(&v373, v374);
    uint64_t v151 = (*(uint64_t (**)(uint64_t, uint64_t))(v150 + 32))(v149, v150);
    uint64_t v153 = v152;
    sub_10001BA68((uint64_t)v378, (uint64_t)v372, &qword_10017C010);
    uint64_t v154 = *((void *)&v372[1] + 1);
    if (!*((void *)&v372[1] + 1))
    {
      sub_1000130EC((uint64_t)v372, &qword_10017C010);
      if (!v153) {
        goto LABEL_151;
      }
      goto LABEL_45;
    }
    uint64_t v343 = v151;
    uint64_t v333 = v7;
    uint64_t v155 = v148;
    uint64_t v156 = *(void *)&v372[2];
    sub_1000036B0(v372, *((uint64_t *)&v372[1] + 1));
    uint64_t v157 = (*(uint64_t (**)(uint64_t, uint64_t))(v156 + 32))(v154, v156);
    unint64_t v159 = v158;
    uint64_t v160 = sub_1000F9B9C();
    uint64_t v162 = v161;
    sub_100012A10(v157, v159);
    sub_10000478C((uint64_t)v372);
    uint64_t v148 = v155;
    if (!v153)
    {
      uint64_t v7 = v333;
      if (!v162) {
        goto LABEL_151;
      }
LABEL_45:
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    uint64_t v7 = v333;
    if (!v162) {
      goto LABEL_45;
    }
    if (v343 == v160 && v153 == v162) {
      break;
    }
    char v164 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v164) {
      goto LABEL_151;
    }
LABEL_46:
    sub_10000478C((uint64_t)&v373);
    v147 += 40;
    if (!--v146)
    {
      swift_bridgeObjectRelease();
      Swift::String v50 = v362;
      uint64_t v11 = v357;
      goto LABEL_148;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_151:
  swift_bridgeObjectRelease();
  sub_10000372C(&v373, (uint64_t)v372);
  swift_bridgeObjectRelease();
  Swift::String v50 = v362;
  uint64_t v11 = v357;
LABEL_152:
  uint64_t v60 = (uint64_t)v381;
LABEL_153:
  int v62 = (int)v338;
  sub_100029900((uint64_t)v372, (uint64_t)v376, &qword_10017C910);
LABEL_15:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v356 + 56))(v361, 1, 1, v11);
  LODWORD(v343) = sub_1000368D4((uint64_t)v50, v355);
  uint64_t v64 = v50[2];
  uint64_t v65 = sub_1000A123C();
  uint64_t v66 = *(void *)(v64 + 16);
  uint64_t v357 = v11;
  LODWORD(v338) = v62;
  if (!v66)
  {
    memset(v372, 0, 32);
LABEL_28:
    sub_1000130EC((uint64_t)v372, &qword_10017C018);
    char v86 = v350;
    sub_10000469C((uint64_t)v350, (uint64_t)&v373);
    sub_10000478C((uint64_t)&v373);
    goto LABEL_29;
  }
  uint64_t v67 = *v65;
  uint64_t v68 = v65[1];
  swift_bridgeObjectRetain();
  unint64_t v69 = sub_1000048E0(v67, v68);
  if (v70) {
    sub_1000047DC(*(void *)(v64 + 56) + 32 * v69, (uint64_t)v372);
  }
  else {
    memset(v372, 0, 32);
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v372[1] + 1)) {
    goto LABEL_28;
  }
  sub_1000130EC((uint64_t)v372, &qword_10017C018);
  char v86 = v350;
  sub_10000469C((uint64_t)v350, (uint64_t)&v373);
  uint64_t v87 = *(void *)(v60 + 40);
  uint64_t v88 = *(void *)(v60 + 48);
  sub_1000036B0((void *)(v60 + 16), v87);
  sub_1001297F4(v87, v88);
  LOBYTE(v87) = sub_1000F2BC4(&v373, v372);
  sub_10000478C((uint64_t)v372);
  sub_10000478C((uint64_t)&v373);
  if ((v87 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    *(void *)&v372[0] = 0;
    *((void *)&v372[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    *(void *)&v372[0] = 0x6261747563657845;
    *((void *)&v372[0] + 1) = 0xEF20726F6620656CLL;
    v368 = v50;
    sub_10003C958((unint64_t *)&qword_10017BC90, (void (*)(uint64_t))type metadata accessor for OSExtension);
    v89._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    uint64_t v90 = 0x756F6620746F6E20;
    unint64_t v91 = 0xEA0000000000646ELL;
    goto LABEL_36;
  }
LABEL_29:
  unint64_t v92 = *(void *)(v60 + 192);
  uint64_t v93 = *(void *)(v60 + 40);
  uint64_t v94 = *(void *)(v60 + 48);
  sub_1000036B0((void *)(v60 + 16), v93);
  sub_1001297F4(v93, v94);
  uint64_t v95 = sub_1000F2A84(v92, v86, v372);
  uint64_t v97 = v96;
  sub_10000478C((uint64_t)v372);
  if (!v97)
  {
    uint64_t v333 = v7;
    uint64_t v118 = (uint64_t)v361;
    swift_bridgeObjectRelease();
    *(void *)&long long v353 = 0;
    uint64_t v115 = (uint64_t)v362;
    uint64_t v116 = v349;
    goto LABEL_72;
  }
  uint64_t v98 = *(void *)(v60 + 40);
  uint64_t v99 = *(void *)(v60 + 48);
  sub_1000036B0((void *)(v60 + 16), v98);
  sub_1001297F4(v98, v99);
  uint64_t v100 = v370;
  uint64_t v101 = v371;
  sub_1000036B0(&v368, v370);
  (*(void (**)(long long *__return_ptr, uint64_t, void *, uint64_t, uint64_t, uint64_t))(v101 + 112))(&v365, v95, v97, 1, v100, v101);
  if (!v366)
  {
    swift_bridgeObjectRelease();
    sub_1000130EC((uint64_t)&v365, &qword_10017C930);
    sub_10000478C((uint64_t)&v368);
    *(void *)&v372[0] = 0;
    *((void *)&v372[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v119._countAndFlagsBits = 0xD00000000000001ALL;
    v119._int64_t object = (void *)0x8000000100146620;
    String.append(_:)(v119);
    v120._countAndFlagsBits = v95;
    v120._int64_t object = v97;
    String.append(_:)(v120);
    swift_bridgeObjectRelease();
    v121._countAndFlagsBits = 0xD000000000000017;
    v121._int64_t object = (void *)0x8000000100146640;
    String.append(_:)(v121);
    v122._countAndFlagsBits = (*(uint64_t (**)(void))(*v362 + 200))();
    String.append(_:)(v122);
    swift_bridgeObjectRelease();
    uint64_t v90 = 46;
    unint64_t v91 = 0xE100000000000000;
LABEL_36:
    String.append(_:)(*(Swift::String *)&v90);
    unint64_t v123 = *((void *)&v372[0] + 1);
    uint64_t v77 = *(void *)&v372[0];
    sub_100012E3C();
    uint64_t v114 = swift_allocError();
    *(_OWORD *)uint64_t v124 = __PAIR128__(v123, v77);
    *(_OWORD *)(v124 + 16) = 0u;
    *(_OWORD *)(v124 + 32) = 0u;
    *(_OWORD *)(v124 + 48) = 0u;
    *(void *)(v124 + 64) = 0;
    *(unsigned char *)(v124 + 72) = 10;
    swift_willThrow();
    goto LABEL_64;
  }
  swift_bridgeObjectRelease();
  sub_10000372C(&v365, (uint64_t)v372);
  sub_10000478C((uint64_t)&v368);
  uint64_t v102 = v350[3];
  uint64_t v103 = v350[4];
  sub_1000036B0(v350, v102);
  uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t))(v103 + 16))(v102, v103);
  unint64_t v106 = v105;
  char v107 = sub_1000F26AC(v104, v105, 0, 1uLL);
  sub_10003C944(v104, v106);
  uint64_t v108 = *((void *)&v372[1] + 1);
  uint64_t v109 = *(void *)&v372[2];
  char v110 = sub_1000036B0(v372, *((uint64_t *)&v372[1] + 1));
  if ((v107 & 1) == 0)
  {
    uint64_t v127 = *((void *)v381 + 20);
    swift_bridgeObjectRetain();
    uint64_t v128 = sub_1000F1040(v127);
    uint64_t v129 = v108;
    uint64_t v77 = (uint64_t)v110;
    uint64_t v132 = sub_1001005E8(v128, v130, v131, v129, v109);
    uint64_t v114 = v7;
    uint64_t v115 = (uint64_t)v362;
    if (v7)
    {
      swift_bridgeObjectRelease();
      goto LABEL_62;
    }
    uint64_t v165 = v132;
    swift_bridgeObjectRelease();
    if ((v165 & 0x100000000) == 0)
    {
      uint64_t v166 = sub_1000A2078();
      if (*v166 != v165)
      {
        v325 = v166;
        swift_bridgeObjectRelease();
        v368 = 0;
        unint64_t v369 = 0xE000000000000000;
        _StringGuts.grow(_:)(79);
        v326._countAndFlagsBits = 0xD000000000000036;
        v326._int64_t object = (void *)0x80000001001466F0;
        String.append(_:)(v326);
        LODWORD(v365) = v165;
        v327._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v327);
        swift_bridgeObjectRelease();
        v328._int64_t object = (void *)0x8000000100146730;
        v328._countAndFlagsBits = 0xD000000000000015;
        String.append(_:)(v328);
        LODWORD(v365) = *v325;
        v329._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v329);
        swift_bridgeObjectRelease();
        uint64_t v77 = (uint64_t)v368;
        unint64_t v330 = v369;
        sub_100012E3C();
        uint64_t v114 = swift_allocError();
        *(void *)uint64_t v331 = v77;
        *(void *)(v331 + 8) = v330;
        *(_OWORD *)(v331 + 16) = 0u;
        *(_OWORD *)(v331 + 32) = 0u;
        *(_OWORD *)(v331 + 48) = 0u;
        *(void *)(v331 + 64) = 0;
        *(unsigned char *)(v331 + 72) = 16;
        swift_willThrow();
        goto LABEL_63;
      }
    }
    uint64_t v167 = *((void *)&v372[1] + 1);
    uint64_t v168 = *(void *)&v372[2];
    sub_1000036B0(v372, *((uint64_t *)&v372[1] + 1));
    uint64_t v169 = sub_1000F1040(v337);
    uint64_t v117 = v339;
    sub_100100F48(v169, v170, v171, v167, v168, v339);
    uint64_t v60 = (uint64_t)v381;
    uint64_t v116 = v349;
LABEL_71:
    swift_bridgeObjectRelease();
    uint64_t v181 = v117;
    uint64_t v118 = (uint64_t)v361;
    sub_10003EBF4(v181, (uint64_t)v361, &qword_10017C918);
    uint64_t v182 = *((void *)&v372[1] + 1);
    uint64_t v183 = *(void *)&v372[2];
    sub_1000036B0(v372, *((uint64_t *)&v372[1] + 1));
    *(void *)&long long v353 = (*(uint64_t (**)(uint64_t, uint64_t))(v183 + 112))(v182, v183);
    uint64_t v333 = 0;
    sub_10000478C((uint64_t)v372);
LABEL_72:
    LODWORD(v372[0]) = *sub_1000B97A8();
    int v184 = (int)v338;
    LODWORD(v368) = v338;
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) != 0
      || (LODWORD(v372[0]) = *sub_1000B9804(),
          LODWORD(v368) = v184,
          (dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) != 0))
    {
      uint64_t v185 = (*(uint64_t (**)(void))(*(void *)v115 + 144))();
      uint64_t v187 = v186;
      uint64_t v188 = (*(uint64_t (**)(void))(*(void *)v60 + 216))();
      if (*(void *)(v188 + 16) && (unint64_t v189 = sub_1000048E0(v185, v187), (v190 & 1) != 0))
      {
        uint64_t v191 = *(void *)(*(void *)(v188 + 56) + 8 * v189);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v191 = 0;
      }
      uint64_t v192 = v118;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v191 = 0;
      uint64_t v192 = v118;
    }
    uint64_t v193 = v359;
    uint64_t v194 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v358 + 6);
    int v195 = v194(v116, 1, v359);
    *(void *)&long long v349 = v191;
    if (v195 == 1)
    {
      uint64_t v337 = 0;
      int v196 = 1;
    }
    else
    {
      uint64_t v197 = (void *)*((void *)v381 + 16);
      uint64_t v198 = v116;
      uint64_t v199 = v342;
      sub_10001BA68(v198, v342, (uint64_t *)&unk_10017FA60);
      if (v194(v199, 1, v193) == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRelease();
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      uint64_t v200 = URL.path.getter();
      uint64_t v202 = v201;
      (*((void (**)(uint64_t, uint64_t))v358 + 1))(v199, v193);
      uint64_t v337 = sub_100036DAC(v200, v202, v197);
      LOBYTE(v200) = v203;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v196 = v200 & 1;
    }
    LODWORD(v336) = v196;
    sub_10001BA68((uint64_t)v378, (uint64_t)&v368, &qword_10017C010);
    sub_10001BA68((uint64_t)v376, (uint64_t)&v365, &qword_10017C910);
    uint64_t v204 = v351;
    sub_10001BA68(v355, (uint64_t)v351, (uint64_t *)&unk_10017FA60);
    uint64_t v205 = v192;
    uint64_t v206 = v352;
    sub_10001BA68(v205, v352, &qword_10017C918);
    size_t v207 = v381;
    uint64_t v208 = *((void *)v381 + 19);
    uint64_t v355 = *((void *)v381 + 20);
    uint64_t v209 = *((void *)v381 + 22);
    uint64_t v341 = *((void *)v381 + 21);
    uint64_t v342 = v209;
    uint64_t v339 = *((void *)v381 + 23);
    uint64_t v210 = *((void *)v381 + 28);
    long long v211 = *(_OWORD *)(v381 + 472);
    v372[25] = *(_OWORD *)(v381 + 456);
    v372[26] = v211;
    *(void *)&v372[27] = *((void *)v381 + 61);
    long long v212 = *(_OWORD *)(v381 + 408);
    v372[21] = *(_OWORD *)(v381 + 392);
    v372[22] = v212;
    long long v213 = *(_OWORD *)(v381 + 440);
    v372[23] = *(_OWORD *)(v381 + 424);
    v372[24] = v213;
    long long v214 = *(_OWORD *)(v381 + 344);
    v372[17] = *(_OWORD *)(v381 + 328);
    v372[18] = v214;
    long long v215 = *(_OWORD *)(v381 + 376);
    v372[19] = *(_OWORD *)(v381 + 360);
    v372[20] = v215;
    long long v216 = *(_OWORD *)(v381 + 280);
    v372[13] = *(_OWORD *)(v381 + 264);
    v372[14] = v216;
    long long v217 = *(_OWORD *)(v381 + 312);
    v372[15] = *(_OWORD *)(v381 + 296);
    v372[16] = v217;
    long long v218 = *(_OWORD *)(v381 + 72);
    v372[0] = *(_OWORD *)(v381 + 56);
    v372[1] = v218;
    long long v219 = *(_OWORD *)(v381 + 104);
    v372[2] = *(_OWORD *)(v381 + 88);
    v372[3] = v219;
    long long v220 = *(_OWORD *)(v381 + 136);
    v372[4] = *(_OWORD *)(v381 + 120);
    v372[5] = v220;
    long long v221 = *((_OWORD *)v381 + 13);
    *(_OWORD *)((char *)&v372[8] + 8) = *((_OWORD *)v381 + 12);
    long long v222 = *(_OWORD *)(v381 + 248);
    char v223 = v381[644];
    *(void *)&v372[6] = v208;
    *((void *)&v372[6] + 1) = v355;
    *(void *)&v372[7] = v341;
    *((void *)&v372[7] + 1) = v209;
    *(_OWORD *)((char *)&v372[9] + 8) = v221;
    *(void *)&v372[8] = v339;
    *((void *)&v372[10] + 1) = v210;
    v372[11] = *(_OWORD *)(v381 + 232);
    v372[12] = v222;
    long long v224 = *((_OWORD *)v381 + 32);
    *(_OWORD *)((char *)&v372[27] + 8) = *((_OWORD *)v381 + 31);
    *(_OWORD *)((char *)&v372[28] + 8) = v224;
    long long v225 = *((_OWORD *)v381 + 34);
    *(_OWORD *)((char *)&v372[29] + 8) = *((_OWORD *)v381 + 33);
    *(_OWORD *)((char *)&v372[30] + 8) = v225;
    long long v226 = *((_OWORD *)v381 + 36);
    *(_OWORD *)((char *)&v372[31] + 8) = *((_OWORD *)v381 + 35);
    *(_OWORD *)((char *)&v372[32] + 8) = v226;
    long long v227 = *((_OWORD *)v381 + 38);
    *(_OWORD *)((char *)&v372[33] + 8) = *((_OWORD *)v381 + 37);
    *(_OWORD *)((char *)&v372[34] + 8) = v227;
    *(_OWORD *)((char *)&v372[35] + 8) = *((_OWORD *)v381 + 39);
    DWORD2(v372[36]) = v338;
    BYTE12(v372[36]) = v223;
    memcpy(v380, v372, 0x24DuLL);
    sub_10001BA68((uint64_t)&v368, (uint64_t)v364, &qword_10017C010);
    sub_10001BA68((uint64_t)&v365, (uint64_t)v363, &qword_10017C910);
    uint64_t v228 = v206;
    uint64_t v229 = v206;
    uint64_t v230 = (uint64_t)v344;
    sub_10001BA68(v229, (uint64_t)v344, &qword_10017C918);
    swift_retain_n();
    sub_10003C9A0(v372);
    swift_retain();
    sub_10003C9A0(v372);
    id v338 = (id)sub_10003C298(v115, 0, 1, v349, v230, (uint64_t)v380);
    *(void *)&long long v349 = v231;
    uint64_t v233 = v232 & 0xFF01;
    uint64_t v234 = v360;
    sub_10001BA68((uint64_t)v204, (uint64_t)v360, (uint64_t *)&unk_10017FA60);
    sub_10001BA68(v228, v230, &qword_10017C918);
    type metadata accessor for RealizedInfo(0);
    uint64_t v235 = swift_allocObject();
    *(void *)(v235 + 16) = 0;
    *(_OWORD *)(v235 + 96) = 0u;
    *(_OWORD *)(v235 + 112) = 0u;
    *(_OWORD *)(v235 + 80) = 0u;
    *(void *)(v235 + 128) = 0;
    *(void *)(v235 + 136) = 1;
    *(void *)(v235 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors) = _swiftEmptyArrayStorage;
    *(void *)(v235 + 24) = v362;
    sub_100029900((uint64_t)v364, v235 + 32, &qword_10017C010);
    *(unsigned char *)(v235 + 72) = v334;
    swift_beginAccess();
    sub_10003EBF4((uint64_t)v363, v235 + 80, &qword_10017C910);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v236 = *(void *)(v235 + 120);
    uint64_t v237 = *(void *)(v235 + 128);
    uint64_t v238 = *(void *)(v235 + 136);
    *(void *)(v235 + 120) = v338;
    *(void *)(v235 + 128) = v233;
    uint64_t v239 = (uint64_t)v362;
    *(void *)(v235 + 136) = v349;
    sub_10003C480(v236, v237, v238);
    sub_100029900((uint64_t)v234, v235 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10017FA60);
    uint64_t v240 = v235 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex;
    *(void *)uint64_t v240 = v337;
    *(unsigned char *)(v240 + 8) = v336;
    sub_100029900(v230, v235 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_10017C918);
    *(void *)(v235 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches) = v353;
    swift_beginAccess();
    *(void *)(v235 + 16) = 0;
    type metadata accessor for DriverExtension(0);
    uint64_t v241 = swift_dynamicCastClass();
    if (v241) {
      uint64_t v242 = v339;
    }
    else {
      uint64_t v242 = v341;
    }
    if (v241) {
      uint64_t v243 = v342;
    }
    else {
      uint64_t v243 = v355;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v244 = sub_100032B34(v243, v242, 0);
    swift_bridgeObjectRelease();
    v245 = v351;
    sub_10001BA68((uint64_t)v351, (uint64_t)v234, (uint64_t *)&unk_10017FA60);
    v246 = sub_10003CD7C(v239, v244, (uint64_t)v234, v343 & 1, v380);
    sub_10003E600(v372);
    swift_release();
    swift_release();
    sub_1000130EC(v352, &qword_10017C918);
    sub_1000130EC((uint64_t)v245, (uint64_t *)&unk_10017FA60);
    sub_1000130EC((uint64_t)&v365, &qword_10017C910);
    sub_1000130EC((uint64_t)&v368, &qword_10017C010);
    v351 = (uint64_t *)(v235 + 16);
    *(void *)(v235 + 16) = v246;
    v364[0] = v235;
    swift_retain();
    v247 = sub_10002A5CC();
    v248 = (char *)v247[2];
    if (v248)
    {
      *(void *)&long long v353 = v235;
      v344 = v247;
      v249 = (unsigned __int8 *)(v247 + 4);
      v250 = *(uint64_t (**)(void))(*v207 + 168);
      uint64_t v251 = *v207 + 168;
      long long v349 = xmmword_100132F30;
      v360 = v250;
      uint64_t v355 = v251;
      while (1)
      {
        unsigned int v253 = *v249++;
        uint64_t v252 = v253;
        uint64_t v254 = v250();
        if (*(void *)(v254 + 16) && (unint64_t v255 = sub_10003A578(v252), (v256 & 1) != 0))
        {
          uint64_t v257 = *(void *)(v254 + 56) + 24 * v255;
          uint64_t v258 = *(void *)(v257 + 8);
          char v259 = *(unsigned char *)v257;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          size_t v207 = v381;
          v250 = (uint64_t (*)(void))v360;
          char v260 = sub_10002B074(v353, v259, v258);
          swift_bridgeObjectRelease();
          if (v260)
          {
            LODWORD(v352) = static os_log_type_t.info.getter();
            sub_100004700((uint64_t *)&unk_10017D6E0);
            uint64_t v261 = swift_allocObject();
            *(_OWORD *)(v261 + 16) = v349;
            uint64_t v262 = (*(uint64_t (**)(void))(*v362 + 200))();
            uint64_t v264 = v263;
            *(void *)(v261 + 56) = &type metadata for String;
            unint64_t v265 = sub_10002A1DC();
            *(void *)(v261 + 64) = v265;
            *(void *)(v261 + 32) = v262;
            *(void *)(v261 + 40) = v264;
            unint64_t v266 = sub_10002A5D8(v252);
            *(void *)(v261 + 96) = &type metadata for String;
            *(void *)(v261 + 104) = v265;
            *(void *)(v261 + 72) = v266;
            *(void *)(v261 + 80) = v267;
            sub_10002A230();
            v268 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();

            if (v252)
            {
              if (v252 == 1)
              {
                size_t v207 = v381;
                v250 = (uint64_t (*)(void))v360;
                if (qword_1001824A8 != -1) {
                  swift_once();
                }
                uint64_t v269 = qword_1001992E0;
              }
              else
              {
                size_t v207 = v381;
                v250 = (uint64_t (*)(void))v360;
                if (qword_1001824B0 != -1) {
                  swift_once();
                }
                uint64_t v269 = qword_1001992E8;
              }
              uint64_t v270 = *v351;
              if ((v269 & ~*v351) == 0) {
                goto LABEL_93;
              }
            }
            else
            {
              if (qword_1001824A0 != -1) {
                swift_once();
              }
              uint64_t v269 = qword_1001992D8;
              uint64_t v270 = *v351;
              size_t v207 = v381;
              v250 = (uint64_t (*)(void))v360;
              if ((qword_1001992D8 & ~*v351) == 0) {
                goto LABEL_93;
              }
            }
            uint64_t *v351 = v270 | v269;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
LABEL_93:
        if (!--v248)
        {
          swift_release();
          uint64_t v239 = (uint64_t)v362;
          goto LABEL_113;
        }
      }
    }
    swift_release();
LABEL_113:
    swift_bridgeObjectRelease();
    sub_1000A02F8(v364);
    sub_10009AF84(v364);
    sub_10009EFE4((uint64_t)v364);
    sub_10000469C((uint64_t)v350, (uint64_t)&v368);
    uint64_t v271 = v359;
    if (v345)
    {
      sub_10000478C((uint64_t)&v368);
      uint64_t v272 = v356;
    }
    else
    {
      v273 = v207 + 2;
      uint64_t v274 = v207[5];
      uint64_t v275 = v207[6];
      sub_1000036B0(v273, v274);
      sub_10002A4C4(v274, v275);
      uint64_t v276 = v366;
      uint64_t v277 = v367;
      v360 = sub_1000036B0(&v365, v366);
      uint64_t v278 = v239;
      uint64_t v279 = v370;
      uint64_t v280 = v371;
      sub_1000036B0(&v368, v370);
      v281 = *(void (**)(uint64_t, uint64_t))(v280 + 64);
      v282 = v354;
      uint64_t v283 = v280;
      uint64_t v239 = v278;
      v281(v279, v283);
      uint64_t v284 = URL.path.getter();
      uint64_t v286 = v285;
      (*((void (**)(char *, uint64_t))v358 + 1))(v282, v271);
      LOBYTE(v284) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v277 + 48))(v284, v286, v276, v277);
      swift_bridgeObjectRelease();
      sub_10000478C((uint64_t)&v365);
      sub_10000478C((uint64_t)&v368);
      uint64_t v272 = v356;
      if ((v284 & 1) == 0) {
        goto LABEL_121;
      }
    }
    uint64_t v287 = v364[0];
    uint64_t v288 = qword_1001824C0;
    swift_retain();
    if (v288 != -1) {
      swift_once();
    }
    uint64_t v289 = qword_1001992F8;
    v291 = (void (*)(long long *, void))(*(uint64_t (**)(long long *))(*(void *)v287 + 184))(&v365);
    if ((v289 & ~*v290) != 0) {
      *v290 |= v289;
    }
    v291(&v365, 0);
    swift_release();
LABEL_121:
    sub_10009FF88(v364);
    LODWORD(v360) = static os_signpost_type_t.event.getter();
    v381 = (char *)(id)*sub_1000EFCB4();
    v292 = sub_1000A2270();
    v293 = *v292;
    v358 = v292[1];
    uint64_t v359 = (uint64_t)v293;
    LODWORD(v355) = *((unsigned __int8 *)v292 + 16);
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v294 = swift_allocObject();
    *(_OWORD *)(v294 + 16) = xmmword_100133C60;
    uint64_t v295 = (*(uint64_t (**)(void))(*(void *)v239 + 200))();
    uint64_t v297 = v296;
    *(void *)(v294 + 56) = &type metadata for String;
    unint64_t v298 = sub_10002A1DC();
    *(void *)(v294 + 64) = v298;
    *(void *)(v294 + 32) = v295;
    *(void *)(v294 + 40) = v297;
    uint64_t v299 = (uint64_t)v361;
    uint64_t v300 = v357;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v272 + 48))(v361, 1, v357))
    {
      v301 = (uint64_t *)(v294 + 72);
      *(void *)(v294 + 96) = &type metadata for String;
      *(void *)(v294 + 104) = v298;
    }
    else
    {
      v303 = v340;
      (*(void (**)(char *, uint64_t, uint64_t))(v272 + 16))(v340, v299, v300);
      uint64_t v304 = UUID.uuidString.getter();
      unint64_t v302 = v305;
      (*(void (**)(char *, uint64_t))(v272 + 8))(v303, v300);
      v301 = (uint64_t *)(v294 + 72);
      *(void *)(v294 + 96) = &type metadata for String;
      *(void *)(v294 + 104) = v298;
      if (v302)
      {
        uint64_t *v301 = v304;
        goto LABEL_126;
      }
    }
    uint64_t *v301 = 0x296C696E28;
    unint64_t v302 = 0xE500000000000000;
LABEL_126:
    *(void *)(v294 + 80) = v302;
    v306 = *(uint64_t (**)(uint64_t))(*(void *)v364[0] + 168);
    uint64_t v307 = swift_retain();
    uint64_t v308 = v306(v307);
    swift_release();
    if (qword_100182450 != -1) {
      swift_once();
    }
    BOOL v309 = (qword_100199288 & v308) == qword_100199288;
    uint64_t v310 = 28265;
    if ((qword_100199288 & v308) == qword_100199288) {
      uint64_t v310 = 0;
    }
    unint64_t v311 = 0xE200000000000000;
    *(void *)(v294 + 136) = &type metadata for String;
    *(void *)(v294 + 144) = v298;
    if (v309) {
      unint64_t v311 = 0xE000000000000000;
    }
    *(void *)(v294 + 112) = v310;
    *(void *)(v294 + 120) = v311;
    uint64_t v312 = swift_retain();
    uint64_t v313 = v306(v312);
    swift_release();
    if (qword_100182470 != -1) {
      swift_once();
    }
    BOOL v314 = (qword_1001992A8 & v313) == qword_1001992A8;
    uint64_t v315 = 28265;
    if ((qword_1001992A8 & v313) == qword_1001992A8) {
      uint64_t v315 = 0;
    }
    *(void *)(v294 + 176) = &type metadata for String;
    *(void *)(v294 + 184) = v298;
    unint64_t v316 = 0xE200000000000000;
    if (v314) {
      unint64_t v316 = 0xE000000000000000;
    }
    *(void *)(v294 + 152) = v315;
    *(void *)(v294 + 160) = v316;
    uint64_t v317 = swift_retain();
    uint64_t v318 = v306(v317);
    swift_release();
    if (qword_100182490 != -1) {
      swift_once();
    }
    BOOL v319 = (qword_1001992C8 & v318) == qword_1001992C8;
    uint64_t v320 = 28277;
    if ((qword_1001992C8 & v318) == qword_1001992C8) {
      uint64_t v320 = 0;
    }
    unint64_t v321 = 0xE200000000000000;
    *(void *)(v294 + 216) = &type metadata for String;
    *(void *)(v294 + 224) = v298;
    if (v319) {
      unint64_t v321 = 0xE000000000000000;
    }
    *(void *)(v294 + 192) = v320;
    *(void *)(v294 + 200) = v321;
    v322 = v346;
    static OSSignpostID.exclusive.getter();
    v323 = v381;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v347 + 8))(v322, v348);
    sub_1000130EC((uint64_t)v376, &qword_10017C910);
    sub_1000130EC((uint64_t)v378, &qword_10017C010);
    uint64_t v77 = v364[0];
    sub_1000130EC((uint64_t)v361, &qword_10017C918);
    return v77;
  }
  uint64_t v111 = sub_1000F1040(v337);
  uint64_t v112 = v341;
  uint64_t v113 = v108;
  uint64_t v77 = (uint64_t)v110;
  sub_100100904(v111, v113, v109, v341);
  uint64_t v114 = v7;
  uint64_t v115 = (uint64_t)v362;
  uint64_t v116 = v349;
  if (!v7)
  {
    uint64_t v117 = v112;
    uint64_t v60 = (uint64_t)v381;
    goto LABEL_71;
  }
LABEL_62:
  swift_bridgeObjectRelease();
LABEL_63:
  sub_10000478C((uint64_t)v372);
LABEL_64:
  v368 = (void *)v114;
  swift_errorRetain();
  sub_100004700(&qword_10017EB50);
  if (!swift_dynamicCast()) {
    goto LABEL_69;
  }
  uint64_t v77 = *((void *)&v372[0] + 1);
  uint64_t v172 = *(void *)&v372[0];
  if (BYTE8(v372[4]) != 10)
  {
    sub_10003E9C8(*(uint64_t *)&v372[0], *((uint64_t *)&v372[0] + 1), *(uint64_t *)&v372[1], *((uint64_t *)&v372[1] + 1), *(unint64_t *)&v372[2], *((uint64_t *)&v372[2] + 1), *(uint64_t *)&v372[3], *((uint64_t *)&v372[3] + 1), *(uint64_t *)&v372[4], SBYTE8(v372[4]));
LABEL_69:
    swift_errorRelease();
    swift_willThrow();
    swift_release();
    sub_1000130EC((uint64_t)v376, &qword_10017C910);
    sub_1000130EC((uint64_t)v378, &qword_10017C010);
    sub_1000130EC((uint64_t)v361, &qword_10017C918);
    return v77;
  }
  swift_errorRelease();
  if (v343)
  {
    uint64_t v333 = 0;
    uint64_t v118 = (uint64_t)v361;
    static os_log_type_t.info.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v173 = swift_allocObject();
    long long v353 = xmmword_100132F10;
    *(_OWORD *)(v173 + 16) = xmmword_100132F10;
    *(void *)(v173 + 56) = &type metadata for String;
    unint64_t v174 = sub_10002A1DC();
    *(void *)(v173 + 64) = v174;
    *(void *)(v173 + 32) = v172;
    *(void *)(v173 + 40) = v77;
    sub_10002A230();
    int v175 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v116 = v349;
    swift_bridgeObjectRelease();

    static os_log_type_t.info.getter();
    uint64_t v176 = swift_allocObject();
    *(_OWORD *)(v176 + 16) = v353;
    uint64_t v177 = (*(uint64_t (**)(void))(*v362 + 200))();
    *(void *)(v176 + 56) = &type metadata for String;
    *(void *)(v176 + 64) = v174;
    *(void *)(v176 + 32) = v177;
    *(void *)(v176 + 40) = v178;
    uint64_t v179 = (void *)static OS_os_log.default.getter();
    uint64_t v60 = (uint64_t)v381;
    uint64_t v115 = (uint64_t)v362;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    swift_errorRelease();
    *(void *)&long long v353 = 0;
    goto LABEL_72;
  }
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v180 = v172;
  *(void *)(v180 + 8) = v77;
  *(_OWORD *)(v180 + 16) = 0u;
  *(_OWORD *)(v180 + 32) = 0u;
  *(_OWORD *)(v180 + 48) = 0u;
  *(void *)(v180 + 64) = 0;
  *(unsigned char *)(v180 + 72) = 10;
  swift_willThrow();
  swift_release();
  sub_1000130EC((uint64_t)v376, &qword_10017C910);
  sub_1000130EC((uint64_t)v378, &qword_10017C010);
  swift_errorRelease();
  sub_1000130EC((uint64_t)v361, &qword_10017C918);
  return v77;
}

uint64_t sub_100036600(void *a1)
{
  Swift::String v2 = (void *)v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *(_DWORD *)(v1 + 640);
  LODWORD(v28[0]) = *(_DWORD *)sub_1000B9580();
  int v31 = v8;
  sub_100013438();
  if (dispatch thunk of SetAlgebra.isSuperset(of:)()) {
    return 2;
  }
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_1000036B0(a1, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 64))(v10, v11);
  uint64_t v12 = URL.path.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (sub_1000F59D4()) {
    goto LABEL_7;
  }
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_1000036B0(a1, v15);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
  unint64_t v19 = v18;
  LOBYTE(v15) = sub_1000F26AC(0, 1, v17, v18);
  sub_10003C944(v17, v19);
  if ((v15 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v20 = v2 + 2;
  uint64_t v21 = v2[5];
  uint64_t v22 = v2[6];
  sub_1000036B0(v20, v21);
  sub_1001297F4(v21, v22);
  uint64_t v23 = v29;
  uint64_t v24 = v30;
  sub_1000036B0(v28, v29);
  LOBYTE(v21) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 232))(v12, v14, v23, v24);
  sub_10000478C((uint64_t)v28);
  if (v21)
  {
    static os_log_type_t.default.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_100132F10;
    *(void *)(v25 + 56) = &type metadata for String;
    *(void *)(v25 + 64) = sub_10002A1DC();
    *(void *)(v25 + 32) = v12;
    *(void *)(v25 + 40) = v14;
    sub_10002A230();
    uint64_t v26 = (void *)static OS_os_log.default.getter();
    uint64_t v9 = 2;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v9;
}

uint64_t sub_1000368D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v6 - 8);
  int v8 = (char *)&v33[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001BA68(a2, (uint64_t)v8, (uint64_t *)&unk_10017FA60);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1000130EC((uint64_t)v8, (uint64_t *)&unk_10017FA60);
    static os_log_type_t.info.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_100132F10;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)a1 + 200))();
    uint64_t v14 = v13;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_10002A1DC();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v14;
    sub_10002A230();
    uint64_t v15 = (void *)static OS_os_log.default.getter();
LABEL_3:
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    goto LABEL_5;
  }
  uint64_t v16 = URL.path.getter();
  uint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  uint64_t v19 = v3[5];
  uint64_t v20 = v3[6];
  sub_1000036B0(v3 + 2, v19);
  sub_1001297F4(v19, v20);
  uint64_t v21 = v34;
  uint64_t v22 = v35;
  sub_1000036B0(v33, v34);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 152))(v16, v18, v21, v22);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  if (!v26)
  {
    sub_10000478C((uint64_t)v33);
    static os_log_type_t.error.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_100132F10;
    uint64_t v29 = (*(uint64_t (**)(void))(*(void *)a1 + 200))();
    uint64_t v31 = v30;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = sub_10002A1DC();
    *(void *)(v28 + 32) = v29;
    *(void *)(v28 + 40) = v31;
    sub_10002A230();
    uint64_t v15 = (void *)static OS_os_log.default.getter();
    goto LABEL_3;
  }
  uint64_t v27 = sub_10000478C((uint64_t)v33);
  if (((*(uint64_t (**)(uint64_t))(*v3 + 440))(v27) & 1) != 0
    && ((*(uint64_t (**)(void))(*(void *)a1 + 208))() & 1) != 0)
  {
    char v23 = sub_100037774();
    swift_bridgeObjectRelease();
    return v23 & 1;
  }
  swift_bridgeObjectRelease();
LABEL_5:
  char v23 = 0;
  return v23 & 1;
}

uint64_t sub_100036DAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

void sub_100036E94(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_100004700(&qword_10017C918);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v81 - v15;
  uint64_t v17 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  __chkstk_darwin(v18);
  if (a3)
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v35 = 0xD000000000000036;
    *(void *)(v35 + 8) = 0x8000000100146900;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_OWORD *)(v35 + 32) = 0u;
    *(_OWORD *)(v35 + 48) = 0u;
    *(void *)(v35 + 64) = 0;
    *(unsigned char *)(v35 + 72) = 24;
    swift_willThrow();
    return;
  }
  if (*(_DWORD *)a1 != -2147483595) {
    return;
  }
  uint64_t v91 = v20;
  uint64_t v92 = (uint64_t)&v81 - v19;
  uint64_t v21 = String.init(cString:)();
  uint64_t v23 = v22;
  if (!*(void *)(a4 + 16)) {
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  unint64_t v24 = sub_1000048E0(v21, v23);
  if ((v25 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v36 = sub_1000A2114();
    if (v21 == *v36 && v23 == v36[1] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      static os_log_type_t.info.getter();
      sub_100004700((uint64_t *)&unk_10017D6E0);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_100132F10;
      *(void *)(v37 + 56) = &type metadata for String;
      *(void *)(v37 + 64) = sub_10002A1DC();
      *(void *)(v37 + 32) = v21;
      *(void *)(v37 + 40) = v23;
      sub_10002A230();
      uint64_t v38 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
    }
    return;
  }
  Swift::String v89 = (void *)(a6 + 16);
  uint64_t v26 = *(void *)(*(void *)(a4 + 56) + 8 * v24);
  swift_retain();
  swift_bridgeObjectRelease_n();
  uint64_t v99 = 0;
  memset(v98, 0, sizeof(v98));
  uint64_t v97 = 0;
  memset(v96, 0, sizeof(v96));
  int v27 = *(_DWORD *)(a5 + 640);
  LODWORD(v95[0]) = *sub_1000B97A8();
  LODWORD(v84) = v27;
  v94[0] = v27;
  sub_100013438();
  char v28 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v90 = v26;
  if (v28)
  {
    uint64_t v29 = (*(uint64_t (**)(void))(*(void *)v26 + 144))();
    uint64_t v31 = v30;
    uint64_t v32 = (*(uint64_t (**)(void))(*(void *)a5 + 216))();
    if (*(void *)(v32 + 16) && (unint64_t v33 = sub_1000048E0(v29, v31), (v34 & 1) != 0))
    {
      uint64_t v81 = *(void *)(*(void *)(v32 + 56) + 8 * v33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v81 = 0;
    }
    uint64_t v26 = v90;
  }
  else
  {
    uint64_t v81 = 0;
  }
  uint64_t v82 = *(void *)(a1 + 8);
  uint64_t v39 = type metadata accessor for URL();
  uint64_t v40 = v92;
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v92, 1, 1, v39);
  (*(void (**)(uint64_t))(*(void *)v26 + 248))(v41);
  uint64_t v42 = *(void *)(a5 + 152);
  uint64_t v43 = *(void *)(a5 + 160);
  uint64_t v44 = *(void *)(a5 + 168);
  uint64_t v87 = *(void *)(a5 + 176);
  uint64_t v88 = v43;
  uint64_t v85 = *(void *)(a5 + 184);
  uint64_t v86 = v44;
  uint64_t v45 = *(void *)(a5 + 224);
  long long v46 = *(_OWORD *)(a5 + 472);
  v95[25] = *(_OWORD *)(a5 + 456);
  v95[26] = v46;
  *(void *)&v95[27] = *(void *)(a5 + 488);
  long long v47 = *(_OWORD *)(a5 + 408);
  v95[21] = *(_OWORD *)(a5 + 392);
  v95[22] = v47;
  long long v48 = *(_OWORD *)(a5 + 440);
  v95[23] = *(_OWORD *)(a5 + 424);
  v95[24] = v48;
  long long v49 = *(_OWORD *)(a5 + 344);
  v95[17] = *(_OWORD *)(a5 + 328);
  v95[18] = v49;
  long long v50 = *(_OWORD *)(a5 + 376);
  v95[19] = *(_OWORD *)(a5 + 360);
  v95[20] = v50;
  long long v51 = *(_OWORD *)(a5 + 280);
  v95[13] = *(_OWORD *)(a5 + 264);
  v95[14] = v51;
  long long v52 = *(_OWORD *)(a5 + 312);
  v95[15] = *(_OWORD *)(a5 + 296);
  v95[16] = v52;
  long long v53 = *(_OWORD *)(a5 + 72);
  v95[0] = *(_OWORD *)(a5 + 56);
  v95[1] = v53;
  long long v54 = *(_OWORD *)(a5 + 104);
  _OWORD v95[2] = *(_OWORD *)(a5 + 88);
  v95[3] = v54;
  long long v55 = *(_OWORD *)(a5 + 136);
  v95[4] = *(_OWORD *)(a5 + 120);
  v95[5] = v55;
  long long v56 = *(_OWORD *)(a5 + 208);
  *(_OWORD *)((char *)&v95[8] + 8) = *(_OWORD *)(a5 + 192);
  long long v57 = *(_OWORD *)(a5 + 248);
  char v58 = *(unsigned char *)(a5 + 644);
  *(void *)&v95[6] = v42;
  *((void *)&v95[6] + 1) = v43;
  v95[7] = __PAIR128__(v87, v44);
  *(_OWORD *)((char *)&v95[9] + 8) = v56;
  *(void *)&v95[8] = v85;
  *((void *)&v95[10] + 1) = v45;
  v95[11] = *(_OWORD *)(a5 + 232);
  v95[12] = v57;
  long long v59 = *(_OWORD *)(a5 + 512);
  *(_OWORD *)((char *)&v95[27] + 8) = *(_OWORD *)(a5 + 496);
  *(_OWORD *)((char *)&v95[28] + 8) = v59;
  long long v60 = *(_OWORD *)(a5 + 544);
  *(_OWORD *)((char *)&v95[29] + 8) = *(_OWORD *)(a5 + 528);
  *(_OWORD *)((char *)&v95[30] + 8) = v60;
  long long v61 = *(_OWORD *)(a5 + 576);
  *(_OWORD *)((char *)&v95[31] + 8) = *(_OWORD *)(a5 + 560);
  *(_OWORD *)((char *)&v95[32] + 8) = v61;
  long long v62 = *(_OWORD *)(a5 + 608);
  *(_OWORD *)((char *)&v95[33] + 8) = *(_OWORD *)(a5 + 592);
  *(_OWORD *)((char *)&v95[34] + 8) = v62;
  *(_OWORD *)((char *)&v95[35] + 8) = *(_OWORD *)(a5 + 624);
  DWORD2(v95[36]) = v84;
  BYTE12(v95[36]) = v58;
  memcpy(v100, v95, 0x24DuLL);
  sub_10001BA68((uint64_t)v98, (uint64_t)v94, &qword_10017C010);
  sub_10001BA68((uint64_t)v96, (uint64_t)v93, &qword_10017C910);
  uint64_t v63 = (uint64_t)v16;
  uint64_t v83 = v16;
  sub_10001BA68((uint64_t)v16, (uint64_t)v14, &qword_10017C918);
  swift_retain_n();
  sub_10003C9A0(v95);
  swift_retain();
  sub_10003C9A0(v95);
  uint64_t v82 = sub_10003C298(v26, v82, 0, v81, (uint64_t)v14, (uint64_t)v100);
  uint64_t v84 = v64;
  uint64_t v66 = v65 & 0xFF01;
  uint64_t v67 = v91;
  sub_10001BA68(v40, v91, (uint64_t *)&unk_10017FA60);
  sub_10001BA68(v63, (uint64_t)v14, &qword_10017C918);
  type metadata accessor for RealizedInfo(0);
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = 0;
  *(_OWORD *)(v68 + 96) = 0u;
  *(_OWORD *)(v68 + 112) = 0u;
  *(_OWORD *)(v68 + 80) = 0u;
  *(void *)(v68 + 128) = 0;
  *(void *)(v68 + 136) = 1;
  *(void *)(v68 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors) = _swiftEmptyArrayStorage;
  *(void *)(v68 + 24) = v90;
  sub_100029900((uint64_t)v94, v68 + 32, &qword_10017C010);
  *(unsigned char *)(v68 + 72) = 0;
  swift_beginAccess();
  sub_10003EBF4((uint64_t)v93, v68 + 80, &qword_10017C910);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v69 = *(void *)(v68 + 120);
  uint64_t v70 = *(void *)(v68 + 128);
  uint64_t v71 = *(void *)(v68 + 136);
  *(void *)(v68 + 120) = v82;
  *(void *)(v68 + 128) = v66;
  uint64_t v72 = v90;
  *(void *)(v68 + 136) = v84;
  sub_10003C480(v69, v70, v71);
  sub_100029900(v67, v68 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10017FA60);
  uint64_t v73 = v68 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex;
  *(void *)uint64_t v73 = 0;
  *(unsigned char *)(v73 + 8) = 1;
  sub_100029900((uint64_t)v14, v68 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_10017C918);
  *(void *)(v68 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches) = 0;
  swift_beginAccess();
  *(void *)(v68 + 16) = 0;
  type metadata accessor for DriverExtension(0);
  uint64_t v74 = swift_dynamicCastClass();
  if (v74) {
    uint64_t v75 = v85;
  }
  else {
    uint64_t v75 = v86;
  }
  if (v74) {
    uint64_t v76 = v87;
  }
  else {
    uint64_t v76 = v88;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v77 = sub_100032B34(v76, v75, 0);
  swift_bridgeObjectRelease();
  uint64_t v78 = v92;
  sub_10001BA68(v92, v67, (uint64_t *)&unk_10017FA60);
  uint64_t v79 = sub_10003CD7C(v72, v77, v67, 0, v100);
  sub_10003E600(v95);
  swift_release();
  swift_release();
  sub_1000130EC((uint64_t)v83, &qword_10017C918);
  sub_1000130EC(v78, (uint64_t *)&unk_10017FA60);
  sub_1000130EC((uint64_t)v96, &qword_10017C910);
  sub_1000130EC((uint64_t)v98, &qword_10017C010);
  *(void *)(v68 + 16) = v79;
  v93[0] = v68;
  sub_10009AF84(v93);
  sub_10009EFE4((uint64_t)v93);
  uint64_t v80 = v89;
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v80 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v80 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  swift_release();
  swift_release();
}

uint64_t sub_100037774()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    int64_t object = v0.value._object;
    do
    {
      Swift::String_optional v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      int64_t object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  BOOL v7 = v6 == 0;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1000378DC(uint64_t a1)
{
  uint64_t v153 = a1;
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v140 = v1;
  uint64_t v141 = v2;
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v135 = (char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v137 = (char *)&v132 - v5;
  uint64_t v6 = sub_100004700(&qword_10017C918);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v134 = (uint64_t)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v133 = (uint64_t)&v132 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v138 = (uint64_t)&v132 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v146 = (uint64_t *)((char *)&v132 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v145 = (uint64_t *)((char *)&v132 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v144 = (uint64_t)&v132 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v132 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v139 = (uint64_t)&v132 - v23;
  __chkstk_darwin(v22);
  char v25 = (char *)&v132 - v24;
  uint64_t v148 = type metadata accessor for OSSignpostID();
  uint64_t v26 = *(void *)(v148 - 8);
  uint64_t v27 = __chkstk_darwin(v148);
  uint64_t v29 = (char *)&v132 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v132 - v30;
  uint64_t v32 = type metadata accessor for OSSignposter();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v35 = (char *)&v132 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_1000F01A8();
  uint64_t v150 = v33;
  uint64_t v151 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v35, v36, v32);
  uint64_t v37 = sub_1000A2294();
  uint64_t v38 = *v37;
  char v39 = *((unsigned char *)v37 + 16);
  static OSSignpostID.exclusive.getter();
  uint64_t v149 = v35;
  uint64_t v40 = OSSignposter.logHandle.getter();
  LODWORD(v147) = static os_signpost_type_t.begin.getter();
  char v41 = OS_os_log.signpostsEnabled.getter();
  uint64_t v142 = v21;
  unint64_t v143 = v25;
  if ((v41 & 1) == 0) {
    goto LABEL_5;
  }
  if (v39)
  {
    if ((unint64_t)v38 >> 32) {
      goto LABEL_52;
    }
    if (v38 >> 11 == 27) {
      goto LABEL_55;
    }
    if (v38 >> 16 > 0x10) {
      goto LABEL_53;
    }
    uint64_t v38 = &v157;
  }
  else if (!v38)
  {
    __break(1u);
LABEL_5:

    uint64_t v42 = v26;
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    uint64_t v44 = v148;
    v43(v29, v31, v148);
    goto LABEL_11;
  }
  uint64_t v132 = v26;
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  uint64_t v44 = v148;
  v45(v29, v31, v148);
  long long v46 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)long long v46 = 0;
  os_signpost_id_t v47 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, (os_signpost_type_t)v147, v47, v38, "", v46, 2u);
  swift_slowDealloc();

  uint64_t v42 = v132;
  (*(void (**)(char *, uint64_t))(v132 + 8))(v29, v44);
  v45(v29, v31, v44);
LABEL_11:
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v48 = OSSignpostIntervalState.init(id:isOpen:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v44);
  uint64_t v49 = (*(uint64_t (**)(char *, uint64_t))(v150 + 8))(v149, v151);
  long long v51 = v152;
  uint64_t v50 = v153;
  uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v153 + 128))(v49);
  if (v51)
  {
LABEL_41:
    sub_1000387A0();
    swift_release();
    return v44;
  }
  uint64_t v53 = v52;
  type metadata accessor for KernelCollection();
  unsigned __int8 v54 = *(unsigned char *)(v50 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
  uint64_t v56 = v144;
  long long v55 = v145;
  long long v57 = (void (*)(void, void, void))v146;
  sub_100054B94(v144, (uint64_t)v145, (uint64_t)v146, v53, *(void *)(v50 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch), *(void *)(v50 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8), v54);
  uint64_t v148 = 0;
  uint64_t v149 = (char *)v48;
  uint64_t v58 = v56;
  uint64_t v59 = (uint64_t)v143;
  sub_100029900(v58, (uint64_t)v143, &qword_10017C918);
  uint64_t v60 = v139;
  sub_100029900((uint64_t)v55, v139, &qword_10017C918);
  uint64_t v61 = (uint64_t)v142;
  sub_100029900((uint64_t)v57, (uint64_t)v142, &qword_10017C918);
  uint64_t v62 = v138;
  sub_10001BA68(v59, v138, &qword_10017C918);
  uint64_t v64 = v140;
  uint64_t v63 = v141;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v62, 1, v140) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1000130EC(v62, &qword_10017C918);
    unint64_t v65 = sub_1000F11D0(v54);
    uint64_t v44 = v66;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v67 = v65;
    *(void *)(v67 + 8) = v44;
    *(void *)(v67 + 16) = 0xD000000000000023;
    *(void *)(v67 + 24) = 0x8000000100146790;
    *(_OWORD *)(v67 + 32) = 0u;
    *(_OWORD *)(v67 + 48) = 0u;
    *(void *)(v67 + 64) = 0;
    *(unsigned char *)(v67 + 72) = 6;
    swift_willThrow();
    sub_1000130EC(v61, &qword_10017C918);
    sub_1000130EC(v60, &qword_10017C918);
    uint64_t v68 = v59;
LABEL_40:
    sub_1000130EC(v68, &qword_10017C918);
    goto LABEL_41;
  }
  uint64_t v146 = *(void **)(v63 + 32);
  uint64_t v147 = v63 + 32;
  ((void (*)(char *, uint64_t, uint64_t))v146)(v137, v62, v64);
  uint64_t v69 = (uint64_t *)sub_1000A19E8();
  uint64_t v70 = v69;
  if (*(void *)(v53 + 16))
  {
    uint64_t v72 = *v69;
    uint64_t v71 = v69[1];
    swift_bridgeObjectRetain();
    unint64_t v73 = sub_1000048E0(v72, v71);
    if (v74)
    {
      sub_1000047DC(*(void *)(v53 + 56) + 32 * v73, (uint64_t)&v155);
    }
    else
    {
      long long v155 = 0u;
      long long v156 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v155 = 0u;
    long long v156 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v156 + 1))
  {
    sub_1000130EC((uint64_t)&v155, &qword_10017C018);
    uint64_t v76 = (uint64_t)v143;
    goto LABEL_39;
  }
  sub_100004700(&qword_10017C7D0);
  char v75 = swift_dynamicCast();
  uint64_t v76 = (uint64_t)v143;
  if ((v75 & 1) == 0)
  {
LABEL_39:
    unint64_t v103 = sub_1000F11D0(v54);
    uint64_t v105 = v104;
    *(void *)&long long v155 = 0;
    *((void *)&v155 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(void *)&long long v155 = 0xD000000000000014;
    *((void *)&v155 + 1) = 0x80000001001467C0;
    uint64_t v107 = *v70;
    unint64_t v106 = (void *)v70[1];
    swift_bridgeObjectRetain();
    v108._uint64_t countAndFlagsBits = v107;
    v108._int64_t object = v106;
    String.append(_:)(v108);
    swift_bridgeObjectRelease();
    long long v109 = v155;
    sub_100012E3C();
    uint64_t v44 = swift_allocError();
    *(void *)uint64_t v110 = v103;
    *(void *)(v110 + 8) = v105;
    *(_OWORD *)(v110 + 16) = v109;
    *(_OWORD *)(v110 + 32) = 0u;
    *(_OWORD *)(v110 + 48) = 0u;
    *(void *)(v110 + 64) = 0;
    *(unsigned char *)(v110 + 72) = 6;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v141 + 8))(v137, v64);
    sub_1000130EC((uint64_t)v142, &qword_10017C918);
    sub_1000130EC(v60, &qword_10017C918);
    uint64_t v68 = v76;
    goto LABEL_40;
  }
  uint64_t v77 = v154;
  unint64_t v78 = sub_100033B44((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v152 = *(void **)(v77 + 16);
  if (!v152)
  {
    uint64_t v80 = v153;
LABEL_45:
    swift_bridgeObjectRelease();
    uint64_t v112 = v136;
    uint64_t v113 = *(void *)(v136 + 160);
    swift_bridgeObjectRetain();
    uint64_t v114 = sub_1000F1040(v113);
    uint64_t v151 = v115;
    uint64_t v152 = (void *)v114;
    uint64_t v117 = v116;
    int v118 = *(_DWORD *)(v112 + 640);
    LODWORD(v155) = *sub_1000B9804();
    LODWORD(v154) = v118;
    sub_100013438();
    if (dispatch thunk of SetAlgebra.isSuperset(of:)())
    {
      uint64_t v119 = v117;
      uint64_t v120 = swift_allocObject();
      *(void *)(v120 + 16) = _swiftEmptyArrayStorage;
      Swift::String v121 = (void *)(v80 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
      uint64_t v122 = *(void *)(v80 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
      uint64_t v44 = *(void *)(v80 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 32);
      uint64_t v145 = sub_1000036B0(v121, v122);
      unint64_t v123 = (void *)swift_allocObject();
      v123[2] = v78;
      v123[3] = v112;
      v123[4] = v120;
      uint64_t v124 = *(void (**)(void *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char), void *, uint64_t, uint64_t))(v44 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v150 = v119;
      uint64_t v125 = v148;
      v124(v152, v119, v151, sub_10003EF2C, v123, v122, v44);
      uint64_t v148 = v125;
      if (v125)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v141 + 8))(v137, v140);
        sub_1000130EC((uint64_t)v142, &qword_10017C918);
        sub_1000130EC(v139, &qword_10017C918);
        sub_1000130EC((uint64_t)v143, &qword_10017C918);
        goto LABEL_41;
      }
      swift_release();
      swift_beginAccess();
      uint64_t v152 = *(void **)(v120 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      sub_1000130EC((uint64_t)v143, &qword_10017C918);
      swift_bridgeObjectRelease();
      uint64_t v64 = v140;
      uint64_t v60 = v139;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v126 = v148;
      uint64_t v152 = sub_10003EC60(v78, (void (*)(uint64_t, uint64_t, uint64_t))sub_10003EC58);
      uint64_t v148 = v126;
      sub_1000130EC(v76, &qword_10017C918);
    }
    uint64_t v127 = (uint64_t)v142;
    swift_bridgeObjectRelease();
    uint64_t v128 = v135;
    uint64_t v129 = (void (*)(uint64_t, char *, uint64_t))v146;
    ((void (*)(char *, char *, uint64_t))v146)(v135, v137, v64);
    uint64_t v130 = v133;
    sub_100029900(v60, v133, &qword_10017C918);
    uint64_t v131 = v134;
    sub_100029900(v127, v134, &qword_10017C918);
    type metadata accessor for RealizedKernelCollection(0);
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection) = v153;
    v129(v44 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid, v128, v64);
    sub_100029900(v130, v44 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID, &qword_10017C918);
    sub_100029900(v131, v44 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID, &qword_10017C918);
    *(void *)(v44 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions) = v152;
    swift_retain();
    sub_1000387A0();
    swift_release();
    return v44;
  }
  uint64_t v151 = type metadata accessor for OSExtension(0);
  swift_bridgeObjectRetain();
  uint64_t v79 = 0;
  uint64_t v80 = v153;
  uint64_t v150 = v77;
  while (1)
  {
    uint64_t v81 = *(void *)(v77 + 8 * v79 + 32);
    swift_bridgeObjectRetain();
    uint64_t v82 = sub_100114578(v80, v81);
    if (v82) {
      break;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    if (v152 == (void *)++v79)
    {
      swift_bridgeObjectRelease();
      uint64_t v64 = v140;
      uint64_t v60 = v139;
      uint64_t v76 = (uint64_t)v143;
      goto LABEL_45;
    }
  }
  uint64_t v83 = v82;
  uint64_t v84 = (*(uint64_t (**)(void))(*(void *)v82 + 144))();
  uint64_t v86 = v85;
  swift_retain();
  unint64_t v87 = v78;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v155 = v78;
  unint64_t v90 = sub_1000048E0(v84, v86);
  uint64_t v91 = *(void *)(v78 + 16);
  BOOL v92 = (v89 & 1) == 0;
  uint64_t v93 = v91 + v92;
  if (!__OFADD__(v91, v92))
  {
    char v94 = v89;
    if (*(void *)(v87 + 24) < v93)
    {
      sub_10003AA70(v93, isUniquelyReferenced_nonNull_native);
      unint64_t v95 = sub_1000048E0(v84, v86);
      if ((v94 & 1) != (v96 & 1)) {
        goto LABEL_56;
      }
      unint64_t v90 = v95;
      uint64_t v97 = (void *)v155;
      if ((v94 & 1) == 0) {
        goto LABEL_35;
      }
LABEL_33:
      unint64_t v78 = (unint64_t)v97;
      uint64_t v98 = v97[7];
      swift_release();
      *(void *)(v98 + 8 * v90) = v83;
LABEL_37:
      uint64_t v80 = v153;
      uint64_t v77 = v150;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v97 = (void *)v155;
      if (v89) {
        goto LABEL_33;
      }
    }
    else
    {
      sub_10003B118();
      uint64_t v97 = (void *)v155;
      if (v94) {
        goto LABEL_33;
      }
    }
LABEL_35:
    v97[(v90 >> 6) + 8] |= 1 << v90;
    uint64_t v99 = (uint64_t *)(v97[6] + 16 * v90);
    *uint64_t v99 = v84;
    v99[1] = v86;
    *(void *)(v97[7] + 8 * v90) = v83;
    uint64_t v100 = v97[2];
    BOOL v101 = __OFADD__(v100, 1);
    uint64_t v102 = v100 + 1;
    if (v101) {
      goto LABEL_54;
    }
    unint64_t v78 = (unint64_t)v97;
    v97[2] = v102;
    swift_bridgeObjectRetain();
    goto LABEL_37;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000387A0()
{
  uint64_t v0 = type metadata accessor for OSSignpostError();
  uint64_t v29 = *(void *)(v0 - 8);
  uint64_t v30 = v0;
  __chkstk_darwin(v0);
  uint64_t v28 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v31 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - v6;
  uint64_t v8 = type metadata accessor for OSSignposter();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000F01A8();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v13 = sub_1000A2294();
  uint64_t v32 = *v13;
  char v14 = *((unsigned char *)v13 + 16);
  uint64_t v15 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v27 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v26 = v8;
  if ((v14 & 1) == 0)
  {
    if (!v32)
    {
      __break(1u);
LABEL_5:

      (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    goto LABEL_10;
  }
  if ((unint64_t)v32 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v32 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v32 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v32 = &v33;
LABEL_10:
  swift_retain();
  uint64_t v17 = v28;
  checkForErrorAndConsumeState(state:)();
  swift_release();
  uint64_t v19 = v29;
  uint64_t v18 = v30;
  if ((*(unsigned int (**)(char *, uint64_t))(v29 + 88))(v17, v30) == enum case for OSSignpostError.doubleEnd(_:))
  {
    uint64_t v20 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
    uint64_t v20 = "";
  }
  uint64_t v21 = v31;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v31, v7, v2);
  uint64_t v22 = v2;
  uint64_t v23 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v23 = 0;
  os_signpost_id_t v24 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, (os_signpost_type_t)v27, v24, v32, v20, v23, 2u);
  swift_slowDealloc();

  char v25 = *(void (**)(char *, uint64_t))(v3 + 8);
  v25(v7, v22);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
  return ((uint64_t (*)(char *, uint64_t))v25)(v21, v22);
}

uint64_t sub_100038B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100004700(&qword_10017C918);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v56 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v58 = (uint64_t)&v53 - v11;
  uint64_t v12 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v57 = (uint64_t)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v53 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v53 - v18;
  memset(v63, 0, sizeof(v63));
  uint64_t v62 = 0;
  memset(v61, 0, sizeof(v61));
  uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)a4 + 216);
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = v20(v21);
  if (*(void *)(v22 + 16) && (unint64_t v23 = sub_1000048E0(a1, a2), (v24 & 1) != 0))
  {
    uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v25 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)a3 + 256))(v26);
  uint64_t v27 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v17, 1, v27) == 1)
  {
    sub_1000130EC((uint64_t)v17, (uint64_t *)&unk_10017FA60);
    uint64_t v29 = 1;
  }
  else
  {
    sub_100097148((uint64_t)v19);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v27);
    uint64_t v29 = 0;
  }
  unsigned __int8 v54 = v19;
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v19, v29, 1, v27);
  uint64_t v31 = v58;
  (*(void (**)(uint64_t))(*(void *)a3 + 248))(v30);
  memcpy(v64, (const void *)(a4 + 56), 0x24DuLL);
  sub_10001BA68((uint64_t)v63, (uint64_t)v60, &qword_10017C010);
  sub_10001BA68((uint64_t)v61, (uint64_t)v59, &qword_10017C910);
  uint64_t v32 = v56;
  sub_10001BA68(v31, v56, &qword_10017C918);
  swift_retain_n();
  sub_10003C9A0(v64);
  swift_retain();
  sub_10003C9A0(v64);
  uint64_t v33 = sub_10003C298(a3, 0, 1, v25, v32, (uint64_t)v64);
  uint64_t v53 = v34;
  uint64_t v36 = v35 & 0xFF01;
  uint64_t v37 = (uint64_t)v19;
  uint64_t v38 = v57;
  sub_10001BA68(v37, v57, (uint64_t *)&unk_10017FA60);
  sub_10001BA68(v31, v32, &qword_10017C918);
  type metadata accessor for RealizedInfo(0);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = 0;
  *(_OWORD *)(v39 + 96) = 0u;
  *(_OWORD *)(v39 + 112) = 0u;
  uint64_t v55 = a4;
  *(_OWORD *)(v39 + 80) = 0u;
  *(void *)(v39 + 128) = 0;
  *(void *)(v39 + 136) = 1;
  *(void *)(v39 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors) = _swiftEmptyArrayStorage;
  *(void *)(v39 + 24) = a3;
  sub_100029900((uint64_t)v60, v39 + 32, &qword_10017C010);
  *(unsigned char *)(v39 + 72) = 0;
  swift_beginAccess();
  sub_10003EBF4((uint64_t)v59, v39 + 80, &qword_10017C910);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v40 = *(void *)(v39 + 120);
  uint64_t v41 = *(void *)(v39 + 128);
  uint64_t v42 = *(void *)(v39 + 136);
  *(void *)(v39 + 120) = v33;
  *(void *)(v39 + 128) = v36;
  *(void *)(v39 + 136) = v53;
  sub_10003C480(v40, v41, v42);
  sub_100029900(v38, v39 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10017FA60);
  uint64_t v43 = v39 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex;
  *(void *)uint64_t v43 = 0;
  *(unsigned char *)(v43 + 8) = 1;
  sub_100029900(v32, v39 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_10017C918);
  *(void *)(v39 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches) = 0;
  swift_beginAccess();
  *(void *)(v39 + 16) = 0;
  type metadata accessor for DriverExtension(0);
  uint64_t v44 = swift_dynamicCastClass();
  uint64_t v45 = &v64[15];
  long long v46 = &v64[16];
  if (!v44) {
    long long v46 = &v64[14];
  }
  uint64_t v47 = *v46;
  if (!v44) {
    uint64_t v45 = &v64[13];
  }
  uint64_t v48 = *v45;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v49 = sub_100032B34(v48, v47, 0);
  swift_bridgeObjectRelease();
  uint64_t v50 = (uint64_t)v54;
  sub_10001BA68((uint64_t)v54, v38, (uint64_t *)&unk_10017FA60);
  long long v51 = sub_10003CD7C(a3, v49, v38, 0, v64);
  sub_10003E600(v64);
  swift_release();
  swift_release();
  sub_1000130EC(v58, &qword_10017C918);
  sub_1000130EC(v50, (uint64_t *)&unk_10017FA60);
  sub_1000130EC((uint64_t)v61, &qword_10017C910);
  sub_1000130EC((uint64_t)v63, &qword_10017C010);
  *(void *)(v39 + 16) = v51;
  v63[0] = v39;
  sub_10009AF84(v63);
  sub_10009EFE4((uint64_t)v63);
  return v63[0];
}

uint64_t sub_1000391C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_10003928C(void *a1, void *a2)
{
  return sub_10003EF54(a1, a2, 1);
}

BOOL sub_100039294(void **a1, void **a2)
{
  return sub_10003EF54(*a1, *a2, 1);
}

uint64_t sub_1000392B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6 != v19) {
      return 0;
    }
  }
  else if (v6 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  if (!v6) {
    return 1;
  }
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (a1 < 0) {
    uint64_t v7 = a1;
  }
  if (!v5) {
    uint64_t v7 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v9 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v8 = a2;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v9 = v8;
  }
  if (v7 == v9) {
    return 1;
  }
  if (v6 < 0) {
    goto LABEL_41;
  }
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t result = swift_retain();
    unint64_t v12 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0) {
      goto LABEL_18;
    }
LABEL_43:
    uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_20:
    type metadata accessor for RealizedInfo(0);
    BOOL v13 = sub_10003BC94(v10, v5);
    swift_release();
    swift_release();
    if (v13)
    {
      uint64_t v14 = v6 - 1;
      if (v6 == 1) {
        return 1;
      }
      uint64_t v16 = 0;
      uint64_t v17 = v6 - 2;
      while (1)
      {
        if (v14 == v16)
        {
          __break(1u);
          goto LABEL_36;
        }
        if (v2)
        {
          uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          if (v12) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(a1 + 40 + 8 * v16);
          swift_retain();
          if (v12)
          {
LABEL_27:
            uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            goto LABEL_31;
          }
        }
        if ((unint64_t)(v16 + 1) >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v5 = *(void **)(a2 + 40 + 8 * v16);
        swift_retain();
LABEL_31:
        BOOL v15 = sub_10003BC94((void *)v6, v5);
        swift_release();
        swift_release();
        if (v15 && v17 != v16++) {
          continue;
        }
        return v15;
      }
    }
    return 0;
  }
LABEL_42:
  uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
  uint64_t v10 = (void *)result;
  unint64_t v12 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0) {
    goto LABEL_43;
  }
LABEL_18:
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v5 = *(void **)(a2 + 32);
    swift_retain();
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_100039528(uint64_t *a1, uint64_t *a2)
{
  return sub_10003B734(*a1, *a2);
}

void sub_100039534()
{
  uint64_t v11 = *(void *)(v0 + 24);
  type metadata accessor for OSExtension(0);
  sub_10003C958(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
  dispatch thunk of Hashable.hash(into:)();
  sub_10001BA68(v0 + 32, (uint64_t)&v11, &qword_10017C010);
  uint64_t v1 = v13;
  if (v13)
  {
    uint64_t v2 = v14;
    sub_1000036B0(&v11, v13);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
    unint64_t v5 = v4;
    sub_10000478C((uint64_t)&v11);
    uint64_t v11 = v3;
    unint64_t v12 = v5;
    Hasher._combine(_:)(1u);
    sub_10002F0C4();
    dispatch thunk of Hashable.hash(into:)();
    sub_100012A10(v3, v5);
  }
  else
  {
    sub_1000130EC((uint64_t)&v11, &qword_10017C010);
    Hasher._combine(_:)(0);
  }
  sub_10001BA68(v0 + 32, (uint64_t)&v11, &qword_10017C010);
  uint64_t v6 = v13;
  if (v13)
  {
    uint64_t v7 = v14;
    sub_1000036B0(&v11, v13);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
    unint64_t v10 = v9;
    sub_10000478C((uint64_t)&v11);
    uint64_t v11 = v8;
    unint64_t v12 = v10;
    Hasher._combine(_:)(1u);
    sub_10003F4B8();
    dispatch thunk of Hashable.hash(into:)();
    sub_100018888(v8, v10);
  }
  else
  {
    sub_1000130EC((uint64_t)&v11, &qword_10017C010);
    Hasher._combine(_:)(0);
  }
}

BOOL sub_100039738(void **a1, void **a2)
{
  return sub_10003BC94(*a1, *a2);
}

Swift::Int sub_100039744(uint64_t a1, uint64_t a2)
{
  return sub_100039B18(a1, a2, (void (*)(unsigned char *))sub_100039534);
}

void sub_10003975C()
{
}

Swift::Int sub_100039780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100039BA0(a1, a2, a3, (void (*)(unsigned char *))sub_100039534);
}

uint64_t sub_100039798(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100004700(&qword_10017C918);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  unint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)v17 - v11;
  sub_10003C958(&qword_10017BF10, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  v17[0] = v1;
  sub_10001BA68(v1 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID, (uint64_t)v12, &qword_10017C918);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v13(v12, 1, v3) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v3);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v14 = v17[0];
  sub_10001BA68(v17[0] + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID, (uint64_t)v10, &qword_10017C918);
  if (v13(v10, 1, v3) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  v17[1] = *(void *)(v14 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection);
  type metadata accessor for KernelCollection();
  sub_10003C958(&qword_10017C948, (void (*)(uint64_t))type metadata accessor for KernelCollection);
  dispatch thunk of Hashable.hash(into:)();
  unint64_t v15 = *(void *)(v14 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions);
  swift_bridgeObjectRetain();
  sub_10003B418(a1, v15);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_100039B00(uint64_t a1, uint64_t a2)
{
  return sub_100039B18(a1, a2, (void (*)(unsigned char *))sub_100039798);
}

Swift::Int sub_100039B18(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

uint64_t sub_100039B64(uint64_t a1)
{
  return sub_100039798(a1);
}

Swift::Int sub_100039B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100039BA0(a1, a2, a3, (void (*)(unsigned char *))sub_100039798);
}

Swift::Int sub_100039BA0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_100039BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v8 + 16))((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = swift_dynamicCast();
  if (!result)
  {
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  long long v10 = v21;
  if (a2 && (uint64_t v11 = (uint64_t *)sub_1000A1A24(), *(void *)(a2 + 16)))
  {
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_1000048E0(v13, v12);
    if (v15)
    {
      sub_1000047DC(*(void *)(a2 + 56) + 32 * v14, (uint64_t)&v21);
    }
    else
    {
      long long v21 = 0u;
      long long v22 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v22 + 1))
    {
      int v18 = swift_dynamicCast();
      BOOL v19 = v18 == 0;
      if (v18) {
        uint64_t v16 = v20[0];
      }
      else {
        uint64_t v16 = 0;
      }
      if (v19) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v20[1];
      }
      goto LABEL_17;
    }
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  sub_1000130EC((uint64_t)&v21, &qword_10017C018);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
LABEL_17:
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v4 + 312))(v16, v17, v10, *((void *)&v10 + 1));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100039DE8()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_100119974();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100039E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_100039BE8(a1, a2, a3);
}

uint64_t sub_100039E9C()
{
  return sub_100039DE8();
}

uint64_t sub_100039EC0()
{
  uint64_t v1 = sub_100004700(&qword_10017C918);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0[3];
  uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 144))(v2);
  unint64_t v49 = v6;
  v7._uint64_t countAndFlagsBits = 32;
  v7._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  uint64_t v9 = v48;
  unint64_t v8 = v49;
  uint64_t v48 = 118;
  unint64_t v49 = 0xE100000000000000;
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v5 + 184))();
  if (v11)
  {
    unint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0x73726576206F6E3CLL;
    unint64_t v12 = 0xEC0000003E6E6F69;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 32;
  v14._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  uint64_t v51 = v9;
  unint64_t v52 = v8;
  swift_bridgeObjectRetain();
  uint64_t v51 = String.init<A>(_:)();
  unint64_t v52 = v15;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = v51;
  unint64_t v16 = v52;
  uint64_t v48 = 40;
  unint64_t v49 = 0xE100000000000000;
  sub_10001BA68((uint64_t)v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, (uint64_t)v4, &qword_10017C918);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v4, 1, v18) == 1)
  {
    sub_1000130EC((uint64_t)v4, &qword_10017C918);
    uint64_t v20 = (void *)0xE700000000000000;
    uint64_t v21 = 0x64697575206F6ELL;
  }
  else
  {
    uint64_t v21 = UUID.uuidString.getter();
    uint64_t v20 = v22;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v18);
  }
  v23._uint64_t countAndFlagsBits = v21;
  v23._int64_t object = v20;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 8233;
  v24._int64_t object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  uint64_t v51 = v17;
  unint64_t v52 = v16;
  swift_bridgeObjectRetain();
  uint64_t v51 = String.init<A>(_:)();
  unint64_t v52 = v25;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = v51;
  unint64_t v26 = v52;
  uint64_t v48 = 2125417;
  unint64_t v49 = 0xE300000000000000;
  sub_10003F50C();
  v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 32;
  v29._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  uint64_t v51 = v27;
  unint64_t v52 = v26;
  swift_bridgeObjectRetain();
  uint64_t v51 = String.init<A>(_:)();
  unint64_t v52 = v30;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = v51;
  unint64_t v31 = v52;
  uint64_t v51 = 0x2064656E676973;
  unint64_t v52 = 0xE700000000000000;
  sub_10001BA68((uint64_t)(v0 + 4), (uint64_t)&v48, &qword_10017C010);
  if (v50)
  {
    sub_1000036B0(&v48, v50);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    unsigned __int16 v35 = v34;
    sub_10000478C((uint64_t)&v48);
  }
  else
  {
    sub_1000130EC((uint64_t)&v48, &qword_10017C010);
    unsigned __int16 v35 = (void *)0xE600000000000000;
    uint64_t v33 = 0x3E656E6F6E3CLL;
  }
  v36._uint64_t countAndFlagsBits = v33;
  v36._int64_t object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 32;
  v37._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  uint64_t v48 = v51;
  unint64_t v49 = v52;
  uint64_t v51 = v32;
  unint64_t v52 = v31;
  swift_bridgeObjectRetain();
  uint64_t v51 = String.init<A>(_:)();
  unint64_t v52 = v38;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  uint64_t v39 = swift_bridgeObjectRelease();
  uint64_t v41 = v51;
  unint64_t v40 = v52;
  uint64_t v48 = 0x207367616C66;
  unint64_t v49 = 0xE600000000000000;
  uint64_t v51 = (*(uint64_t (**)(uint64_t))(*v0 + 168))(v39);
  unint64_t v42 = sub_10003F560();
  unint64_t v43 = sub_10003F5B4();
  v44._uint64_t countAndFlagsBits = sub_1000F07BC((uint64_t)&type metadata for RealizedInfo.Flags, v42, v43);
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  uint64_t v51 = v41;
  unint64_t v52 = v40;
  swift_bridgeObjectRetain();
  uint64_t v51 = String.init<A>(_:)();
  unint64_t v52 = v45;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v51;
}

uint64_t sub_10003A458()
{
  return sub_100039EC0();
}

char *sub_10003A47C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017CC08);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  Swift::String v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_10003A578(uint64_t a1)
{
  sub_10003FED4();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10003A5E4(a1, v2);
}

unint64_t sub_10003A5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    sub_10002F394();
    do
    {
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

void (*sub_10003A6AC(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  unint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_10002E898(v6);
  v6[10] = sub_10003B2D0(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10002D448;
}

uint64_t sub_10003A758(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017CC38);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    long long v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    Swift::String v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  long long v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10003AA70(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017CC10);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    long long v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    Swift::String v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  long long v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_10003AD88(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          int64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            _OWORD *v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *sub_10003AF60()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017CC38);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10003B118()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017CC10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void (*sub_10003B2D0(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_1000048E0(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        void *v10 = v19;
        return sub_10002E848;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10003AF60();
      goto LABEL_7;
    }
    sub_10003A758(v16, a4 & 1);
    unint64_t v20 = sub_1000048E0(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = v20;
      v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10003B418(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    Swift::UInt v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v17);
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3) {
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10));
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      return;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v18 = v2 & 0xC000000000000001;
    do
    {
      if (v18)
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v5 = *(void *)(v2 + 8 * v4 + 32);
        swift_retain();
      }
      unint64_t v6 = v2;
      uint64_t v19 = *(void *)(v5 + 24);
      type metadata accessor for OSExtension(0);
      sub_10003C958(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
      dispatch thunk of Hashable.hash(into:)();
      sub_10001BA68(v5 + 32, (uint64_t)&v19, &qword_10017C010);
      uint64_t v7 = v21;
      if (v21)
      {
        uint64_t v8 = v22;
        sub_1000036B0(&v19, v21);
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
        unint64_t v11 = v10;
        sub_10000478C((uint64_t)&v19);
        uint64_t v19 = v9;
        unint64_t v20 = v11;
        Hasher._combine(_:)(1u);
        sub_10002F0C4();
        dispatch thunk of Hashable.hash(into:)();
        sub_100012A10(v9, v11);
      }
      else
      {
        sub_1000130EC((uint64_t)&v19, &qword_10017C010);
        Hasher._combine(_:)(0);
      }
      sub_10001BA68(v5 + 32, (uint64_t)&v19, &qword_10017C010);
      uint64_t v12 = v21;
      if (v21)
      {
        uint64_t v13 = v22;
        sub_1000036B0(&v19, v21);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
        unint64_t v16 = v15;
        sub_10000478C((uint64_t)&v19);
        uint64_t v19 = v14;
        unint64_t v20 = v16;
        Hasher._combine(_:)(1u);
        sub_10003F4B8();
        dispatch thunk of Hashable.hash(into:)();
        sub_100018888(v14, v16);
      }
      else
      {
        sub_1000130EC((uint64_t)&v19, &qword_10017C010);
        Hasher._combine(_:)(0);
      }
      swift_release();
      unint64_t v2 = v6;
      ++v4;
    }
    while (v3 != v4);
  }
}

uint64_t sub_10003B6FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_10003B734(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v42 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_100004700(&qword_10017C918);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v41 = &v38[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  unint64_t v11 = &v38[-v10];
  uint64_t v12 = sub_100004700(&qword_10017CBF0);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = &v38[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  Swift::UInt v17 = &v38[-v16];
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v18 = a1 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID;
  uint64_t v19 = a2 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID;
  unint64_t v20 = &v38[*(int *)(v12 + 48) - v16];
  sub_10001BA68(v18, (uint64_t)&v38[-v16], &qword_10017C918);
  sub_10001BA68(v19, (uint64_t)v20, &qword_10017C918);
  uint64_t v21 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48);
  if (v21(v17, 1, v4) == 1)
  {
    if (v21(v20, 1, v4) == 1)
    {
      uint64_t v40 = v5;
      sub_1000130EC((uint64_t)v17, &qword_10017C918);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v22 = (uint64_t)v17;
LABEL_14:
    sub_1000130EC(v22, &qword_10017CBF0);
    goto LABEL_15;
  }
  sub_10001BA68((uint64_t)v17, (uint64_t)v11, &qword_10017C918);
  if (v21(v20, 1, v4) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v11, v4);
    goto LABEL_6;
  }
  unint64_t v23 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32);
  uint64_t v24 = v5;
  char v25 = v42;
  v23(v42, v20, v4);
  sub_10003C958(&qword_10017CBF8, (void (*)(uint64_t))&type metadata accessor for UUID);
  int v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v40 = v24;
  unint64_t v26 = *(void (**)(unsigned char *, uint64_t))(v24 + 8);
  v26(v25, v4);
  v26(v11, v4);
  sub_1000130EC((uint64_t)v17, &qword_10017C918);
  if ((v39 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v28 = v43;
  uint64_t v27 = v44;
  uint64_t v29 = v44 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID;
  uint64_t v30 = (uint64_t)&v15[*(int *)(v12 + 48)];
  sub_10001BA68(v43 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID, (uint64_t)v15, &qword_10017C918);
  sub_10001BA68(v29, v30, &qword_10017C918);
  if (v21(v15, 1, v4) != 1)
  {
    uint64_t v31 = v41;
    sub_10001BA68((uint64_t)v15, (uint64_t)v41, &qword_10017C918);
    if (v21((unsigned char *)v30, 1, v4) != 1)
    {
      uint64_t v34 = v40;
      uint64_t v35 = v42;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v40 + 32))(v42, v30, v4);
      sub_10003C958(&qword_10017CBF8, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
      Swift::String v37 = *(void (**)(unsigned char *, uint64_t))(v34 + 8);
      v37(v35, v4);
      v37(v31, v4);
      sub_1000130EC((uint64_t)v15, &qword_10017C918);
      if ((v36 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
    (*(void (**)(unsigned char *, uint64_t))(v40 + 8))(v31, v4);
    goto LABEL_13;
  }
  if (v21((unsigned char *)v30, 1, v4) != 1)
  {
LABEL_13:
    uint64_t v22 = (uint64_t)v15;
    goto LABEL_14;
  }
  sub_1000130EC((uint64_t)v15, &qword_10017C918);
LABEL_18:
  if (static UUID.== infix(_:_:)())
  {
    type metadata accessor for KernelCollection();
    if (sub_100057748(*(void *)(v28 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection), *(void *)(v27 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection)))
    {
      char v32 = sub_1000392B0(*(void *)(v28 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions), *(void *)(v27 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions));
      return v32 & 1;
    }
  }
LABEL_15:
  char v32 = 0;
  return v32 & 1;
}

BOOL sub_10003BC94(void *a1, void *a2)
{
  type metadata accessor for OSExtension(0);
  if (sub_1001162E0(a1[3], a2[3]))
  {
    sub_10001BA68((uint64_t)(a1 + 4), (uint64_t)&v18, &qword_10017C010);
    uint64_t v4 = v20;
    if (v20)
    {
      uint64_t v5 = v21;
      sub_1000036B0(&v18, v20);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
      unint64_t v8 = v7;
      sub_10000478C((uint64_t)&v18);
    }
    else
    {
      sub_1000130EC((uint64_t)&v18, &qword_10017C010);
      uint64_t v6 = 0;
      unint64_t v8 = 0xF000000000000000;
    }
    sub_10001BA68((uint64_t)(a2 + 4), (uint64_t)&v18, &qword_10017C010);
    uint64_t v9 = v20;
    if (!v20)
    {
      uint64_t v14 = sub_1000130EC((uint64_t)&v18, &qword_10017C010);
      if (v8 >> 60 != 15)
      {
        uint64_t v11 = 0;
        unint64_t v13 = 0xF000000000000000;
        goto LABEL_12;
      }
LABEL_15:
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*a1 + 168))(v14);
      return v17 == (*(uint64_t (**)(void))(*a2 + 168))();
    }
    uint64_t v10 = v21;
    sub_1000036B0(&v18, v20);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
    unint64_t v13 = v12;
    uint64_t v14 = sub_10000478C((uint64_t)&v18);
    if (v8 >> 60 == 15)
    {
      if (v13 >> 60 == 15) {
        goto LABEL_15;
      }
LABEL_13:
      sub_10002404C(v6, v8);
      sub_10002404C(v11, v13);
      return 0;
    }
    uint64_t v18 = v6;
    unint64_t v19 = v8;
    if (v13 >> 60 == 15)
    {
LABEL_12:
      sub_100012DE4(v6, v8);
      sub_100012A10(v6, v8);
      goto LABEL_13;
    }
    sub_100012DE4(v6, v8);
    sub_10002FC5C();
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    sub_10002404C(v11, v13);
    sub_100012A10(v18, v19);
    uint64_t v14 = sub_10002404C(v6, v8);
    if (v16) {
      goto LABEL_15;
    }
  }
  return 0;
}

uint64_t sub_10003BF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100004700(&qword_10017C918);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100004700(&qword_10017CBF0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 != a1)
  {
    sub_1000130EC(a4, &qword_10017C918);
    sub_1000130EC(a2, &qword_10017C918);
    return 3;
  }
  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 48)];
  sub_10001BA68(a4, (uint64_t)v18, &qword_10017C918);
  sub_10001BA68(a2, v19, &qword_10017C918);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v20((uint64_t)v18, 1, v8) != 1)
  {
    sub_10001BA68((uint64_t)v18, (uint64_t)v14, &qword_10017C918);
    if (v20(v19, 1, v8) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v11, v19, v8);
      sub_10003C958(&qword_10017CBF8, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_1000130EC(a4, &qword_10017C918);
      sub_1000130EC(a2, &qword_10017C918);
      unint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
      v23(v11, v8);
      v23(v14, v8);
      sub_1000130EC((uint64_t)v18, &qword_10017C918);
      if (v22) {
        return 0;
      }
      return 2;
    }
    sub_1000130EC(a4, &qword_10017C918);
    sub_1000130EC(a2, &qword_10017C918);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
LABEL_8:
    sub_1000130EC((uint64_t)v18, &qword_10017CBF0);
    return 2;
  }
  sub_1000130EC(a4, &qword_10017C918);
  sub_1000130EC(a2, &qword_10017C918);
  if (v20(v19, 1, v8) != 1) {
    goto LABEL_8;
  }
  sub_1000130EC((uint64_t)v18, &qword_10017C918);
  return 0;
}

uint64_t sub_10003C298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_100004700(&qword_10017C918);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v27 - v15;
  int v17 = *(_DWORD *)(a6 + 584);
  int v18 = *sub_1000B9804();
  v27[2] = v17;
  v27[3] = v18;
  sub_100013438();
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) == 0
    || (uint64_t v19 = swift_bridgeObjectRetain(),
        uint64_t v21 = sub_10003164C(v19, v20, a4),
        char v23 = v22,
        uint64_t v24 = swift_bridgeObjectRelease(),
        (v23 & 1) != 0))
  {
    sub_10003E600((void *)a6);
    swift_release();
  }
  else
  {
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(v24);
    sub_10001BA68(a5, (uint64_t)v16, &qword_10017C918);
    swift_bridgeObjectRetain();
    sub_100031554(a4, (uint64_t)v14);
    swift_bridgeObjectRelease();
    sub_10003BF10(v25, (uint64_t)v16, v21, (uint64_t)v14);
    sub_10003E600((void *)a6);
    swift_release();
  }
  sub_1000130EC(a5, &qword_10017C918);
  return a2;
}

uint64_t sub_10003C46C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10003C480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10003C494(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  void (*v23)(long long *__return_ptr, uint64_t, uint64_t, void, void, void);
  int64_t v24;
  uint64_t *v25;
  char isUniquelyReferenced_nonNull_native;
  char v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  int64_t v43;
  _OWORD v48[2];
  long long v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  long long v54;
  _OWORD v55[2];
  long long v56;
  _OWORD v57[3];
  unint64_t v58;

  unint64_t v42 = a2 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a2 + 64);
  uint64_t v43 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = &v53;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_25;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_45;
    }
    if (v16 >= v43)
    {
LABEL_43:
      swift_release();
      return (uint64_t)a1;
    }
    unint64_t v17 = *(void *)(v42 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v43) {
        goto LABEL_43;
      }
      unint64_t v17 = *(void *)(v42 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v43) {
          goto LABEL_43;
        }
        unint64_t v17 = *(void *)(v42 + 8 * v12);
        if (!v17)
        {
          int64_t v12 = v16 + 3;
          if (v16 + 3 >= v43) {
            goto LABEL_43;
          }
          unint64_t v17 = *(void *)(v42 + 8 * v12);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_25:
    uint64_t v19 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v15);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    sub_1000047DC(*(void *)(a2 + 56) + 32 * v15, (uint64_t)v57);
    *(void *)&uint64_t v56 = v21;
    *((void *)&v56 + 1) = v20;
    unsigned __int8 v54 = v56;
    v55[0] = v57[0];
    v55[1] = v57[1];
    long long v22 = v56;
    uint64_t v51 = v21;
    unint64_t v52 = v20;
    sub_1000047DC((uint64_t)v55, (uint64_t)v11);
    char v23 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, void, void, void))(*(void *)a3 + 304);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(&v49, a4, a5, v22, *((void *)&v22 + 1), a6 & 1);
    if (v50)
    {
      uint64_t v58 = v10;
      uint64_t v24 = v12;
      uint64_t v25 = v11;
      sub_10001889C(&v49, v48);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v28 = sub_1000048E0(v22, *((uint64_t *)&v22 + 1));
      uint64_t v29 = a1[2];
      uint64_t v30 = (v27 & 1) == 0;
      uint64_t v31 = v29 + v30;
      if (__OFADD__(v29, v30))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      char v32 = v27;
      if (a1[3] < v31)
      {
        sub_100017E44(v31, isUniquelyReferenced_nonNull_native);
        uint64_t v33 = sub_1000048E0(v22, *((uint64_t *)&v22 + 1));
        if ((v32 & 1) != (v34 & 1)) {
          goto LABEL_48;
        }
        uint64_t v28 = v33;
        if ((v32 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_4:
        uint64_t v13 = (_OWORD *)(a1[7] + 32 * v28);
        sub_10000478C((uint64_t)v13);
        sub_10001889C(v48, v13);
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v11 = v25;
        int64_t v12 = v24;
        unint64_t v10 = v58;
        goto LABEL_6;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v27) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_100018304();
        if (v32) {
          goto LABEL_4;
        }
      }
LABEL_37:
      a1[(v28 >> 6) + 8] |= 1 << v28;
      *(_OWORD *)(a1[6] + 16 * v28) = v22;
      sub_10001889C(v48, (_OWORD *)(a1[7] + 32 * v28));
      unint64_t v38 = a1[2];
      int v39 = __OFADD__(v38, 1);
      uint64_t v40 = v38 + 1;
      if (v39) {
        goto LABEL_46;
      }
      a1[2] = v40;
      swift_bridgeObjectRetain();
      goto LABEL_5;
    }
    sub_1000130EC((uint64_t)&v49, &qword_10017C018);
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_1000048E0(v22, *((uint64_t *)&v22 + 1));
    Swift::String v37 = v36;
    swift_bridgeObjectRelease();
    if (v37)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100018304();
      }
      swift_bridgeObjectRelease();
      sub_10001889C((_OWORD *)(a1[7] + 32 * v35), v48);
      sub_10003AD88(v35, (uint64_t)a1);
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v48, 0, sizeof(v48));
    }
    swift_bridgeObjectRelease();
    sub_1000130EC((uint64_t)v48, &qword_10017C018);
LABEL_6:
    sub_10000478C((uint64_t)v11);
    sub_1000130EC((uint64_t)&v54, &qword_10017BC60);
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v43) {
    goto LABEL_43;
  }
  unint64_t v17 = *(void *)(v42 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v43) {
      goto LABEL_43;
    }
    unint64_t v17 = *(void *)(v42 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_24;
    }
  }
LABEL_47:
  __break(1u);
LABEL_48:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10003C944(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10003C958(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10003C9A0(void *a1)
{
  unint64_t v2 = a1[17];
  uint64_t v4 = a1[57];
  uint64_t v5 = a1[56];
  uint64_t v6 = a1[68];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003CC44(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003CC64(v5, v4);
  swift_bridgeObjectRetain();
  sub_10003CCF0(v6);
  return a1;
}

unint64_t sub_10003CC44(unint64_t result)
{
  if (result != 5) {
    return sub_10003CC54(result);
  }
  return result;
}

unint64_t sub_10003CC54(unint64_t result)
{
  if (result >= 5) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10003CC64(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10003CCF0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for RealizedInfo(uint64_t a1)
{
  return sub_1000192DC(a1, (uint64_t *)&unk_100182C90);
}

void *sub_10003CD7C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  int v196 = a5;
  int v184 = a4;
  uint64_t v204 = a3;
  uint64_t v197 = a2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v180 = (char *)&v175 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v194 = (char *)&v175 - v11;
  __chkstk_darwin(v10);
  uint64_t v181 = (char *)&v175 - v12;
  uint64_t v13 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v175 = (uint64_t)&v175 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v177 = (char *)&v175 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v178 = (uint64_t)&v175 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v183 = (uint64_t)&v175 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v191 = (char *)&v175 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v179 = (uint64_t)&v175 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  int v195 = (char *)&v175 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v189 = (uint64_t)&v175 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  char v190 = (char *)&v175 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v176 = (uint64_t)&v175 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v188 = (char *)&v175 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v187 = (uint64_t)&v175 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v198 = (uint64_t)&v175 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v182 = (uint64_t)&v175 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v192 = (uint64_t)&v175 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v193 = (uint64_t)&v175 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v202 = (char *)&v175 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v50 = (char *)&v175 - v49;
  uint64_t v51 = __chkstk_darwin(v48);
  uint64_t v53 = (char *)&v175 - v52;
  uint64_t v54 = __chkstk_darwin(v51);
  uint64_t v56 = (char *)&v175 - v55;
  uint64_t v57 = __chkstk_darwin(v54);
  uint64_t v59 = (char *)&v175 - v58;
  __chkstk_darwin(v57);
  uint64_t v61 = (char *)&v175 - v60;
  uint64_t v62 = (char *)(v7 + 56);
  uint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v64 = v63((char *)&v175 - v60, 1, 1, v6);
  unint64_t v65 = *(void (**)(uint64_t))(*(void *)a1 + 160);
  uint64_t v203 = a1;
  v65(v64);
  uint64_t v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v200 = v7 + 48;
  uint64_t v199 = v66;
  unsigned int v67 = v66(v59, 1, v6);
  uint64_t v201 = v7;
  uint64_t v186 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v63;
  if (v67 == 1)
  {
    sub_1000130EC((uint64_t)v59, (uint64_t *)&unk_10017FA60);
  }
  else
  {
    uint64_t v68 = v181;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v181, v59, v6);
    sub_100097148((uint64_t)v56);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v68, v6);
    sub_1000130EC((uint64_t)v61, (uint64_t *)&unk_10017FA60);
    v63(v56, 0, 1, v6);
    sub_100029900((uint64_t)v56, (uint64_t)v61, (uint64_t *)&unk_10017FA60);
  }
  sub_10001BA68((uint64_t)v61, (uint64_t)v53, (uint64_t *)&unk_10017FA60);
  uint64_t v69 = v199;
  unsigned int v70 = v199(v53, 1, v6);
  sub_1000130EC((uint64_t)v53, (uint64_t *)&unk_10017FA60);
  sub_10001BA68(v204, (uint64_t)v50, (uint64_t *)&unk_10017FA60);
  uint64_t v71 = (uint64_t)v202;
  uint64_t v185 = v61;
  if (v70 == 1 && v69(v50, 1, v6) == 1)
  {
    uint64_t v72 = sub_1000130EC((uint64_t)v50, (uint64_t *)&unk_10017FA60);
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v203 + 112))(v217, v72);
    uint64_t v73 = v218;
    sub_1000130EC((uint64_t)v217, &qword_10017BC78);
    char v74 = v196;
    if (!v73)
    {
      int v75 = 0;
      uint64_t v76 = 1;
      uint64_t v77 = v201;
      goto LABEL_17;
    }
  }
  else
  {
    sub_1000130EC((uint64_t)v50, (uint64_t *)&unk_10017FA60);
    char v74 = v196;
  }
  uint64_t v78 = v193;
  sub_10001BA68((uint64_t)v61, v193, (uint64_t *)&unk_10017FA60);
  uint64_t v79 = v192;
  sub_10001BA68(v204, v192, (uint64_t *)&unk_10017FA60);
  if (v69((char *)v78, 1, v6) == 1)
  {
    uint64_t v181 = v62;
    uint64_t v80 = v182;
    sub_10001BA68(v79, v182, (uint64_t *)&unk_10017FA60);
    BOOL v81 = v69((char *)v80, 1, v6) == 1;
    uint64_t v82 = v79;
    uint64_t v83 = v194;
    if (v81)
    {
      uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t))(*(void *)v203 + 112))(v217, v82);
      uint64_t v85 = v218;
      if (!v218)
      {
LABEL_113:
        __break(1u);
        goto LABEL_114;
      }
      uint64_t v86 = v219;
      sub_1000036B0(v217, v218);
      unint64_t v87 = *(void (**)(uint64_t, uint64_t))(v86 + 64);
      uint64_t v88 = v86;
      uint64_t v83 = v194;
      v87(v85, v88);
      sub_1000130EC(v192, (uint64_t *)&unk_10017FA60);
      sub_10000478C((uint64_t)v217);
      sub_1000130EC(v182, (uint64_t *)&unk_10017FA60);
      uint64_t v77 = v201;
      uint64_t v78 = v193;
    }
    else
    {
      sub_1000130EC(v82, (uint64_t *)&unk_10017FA60);
      uint64_t v77 = v201;
      (*(void (**)(char *, uint64_t, uint64_t))(v201 + 32))(v83, v80, v6);
    }
    sub_1000130EC(v78, (uint64_t *)&unk_10017FA60);
  }
  else
  {
    sub_1000130EC(v79, (uint64_t *)&unk_10017FA60);
    uint64_t v77 = v201;
    uint64_t v83 = v194;
    (*(void (**)(char *, uint64_t, uint64_t))(v201 + 32))(v194, v78, v6);
  }
  sub_1000F1928(v74[18], v74[19], v74[20], v74[21], v71);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v83, v6);
  uint64_t v76 = 0;
  int v75 = 1;
LABEL_17:
  char v89 = v186;
  v186(v71, v76, 1, v6);
  uint64_t v90 = v187;
  sub_10001BA68(v71, v187, (uint64_t *)&unk_10017FA60);
  if (v69((char *)v90, 1, v6) == 1)
  {
    sub_1000130EC(v90, (uint64_t *)&unk_10017FA60);
    uint64_t v91 = 1;
    uint64_t v92 = v198;
  }
  else
  {
    uint64_t v93 = v180;
    URL.deletingLastPathComponent()();
    char v94 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
    v94(v90, v6);
    uint64_t v92 = v198;
    sub_100097148(v198);
    v94((uint64_t)v93, v6);
    uint64_t v91 = 0;
  }
  uint64_t v194 = (char *)v6;
  v89(v92, v91, 1, v6);
  if (v74[68])
  {
    uint64_t v95 = v74[72];
    uint64_t v96 = v74[71];
    uint64_t v97 = v74[70];
    uint64_t v98 = v74[69];
    v217[0] = v74[68];
    v217[1] = v98;
    v217[2] = v97;
    uint64_t v218 = v96;
    uint64_t v219 = v95;
    uint64_t v99 = *(uint64_t (**)(uint64_t))(*(void *)v203 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v100 = swift_bridgeObjectRetain();
    uint64_t v101 = v99(v100);
    uint64_t v103 = v102;
    uint64_t v104 = v197;
    swift_bridgeObjectRetain();
    LODWORD(v193) = sub_1000C4518(v101, v103, v104);
    swift_bridgeObjectRelease();
    uint64_t v105 = v104;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v106 = (uint64_t)v191;
  }
  else
  {
    LODWORD(v193) = 3;
    uint64_t v106 = (uint64_t)v191;
    uint64_t v105 = v197;
  }
  uint64_t v107 = (uint64_t)v190;
  v211[1] = 0;
  if (qword_1001824C8 != -1) {
    swift_once();
  }
  v211[0] = qword_100199300;
  Swift::String v108 = (uint64_t *)sub_1000A1498();
  uint64_t v109 = v198;
  if (!*(void *)(v105 + 16))
  {
    long long v209 = 0u;
    long long v210 = 0u;
    uint64_t v114 = (uint64_t)v188;
LABEL_36:
    sub_1000130EC((uint64_t)&v209, &qword_10017C018);
LABEL_37:
    sub_10001BA68(v109, v114, (uint64_t *)&unk_10017FA60);
    goto LABEL_38;
  }
  uint64_t v111 = *v108;
  uint64_t v110 = v108[1];
  swift_bridgeObjectRetain();
  unint64_t v112 = sub_1000048E0(v111, v110);
  if (v113)
  {
    sub_1000047DC(*(void *)(v105 + 56) + 32 * v112, (uint64_t)&v209);
  }
  else
  {
    long long v209 = 0u;
    long long v210 = 0u;
  }
  uint64_t v114 = (uint64_t)v188;
  swift_bridgeObjectRelease();
  if (!*((void *)&v210 + 1)) {
    goto LABEL_36;
  }
  if ((swift_dynamicCast() & 1) == 0 || (v216 & 1) == 0) {
    goto LABEL_37;
  }
  sub_10001BA68(v109, v114, (uint64_t *)&unk_10017FA60);
  if (v75)
  {
    uint64_t v115 = v176;
    sub_10001BA68(v114, v176, (uint64_t *)&unk_10017FA60);
    uint64_t v116 = v194;
    if (v199((char *)v115, 1, (uint64_t)v194) == 1)
    {
      sub_1000130EC(v114, (uint64_t *)&unk_10017FA60);
      uint64_t v114 = v115;
    }
    else
    {
      URL.path.getter();
      (*(void (**)(uint64_t, char *))(v201 + 8))(v115, v116);
      sub_100037774();
      swift_bridgeObjectRelease();
    }
  }
LABEL_38:
  sub_1000130EC(v114, (uint64_t *)&unk_10017FA60);
  sub_10003F560();
  sub_1000F0DEC((uint64_t)v211, (uint64_t)&type metadata for RealizedInfo.Flags, (uint64_t)&v212);
  v208[1] = v212;
  if (qword_1001824E8 != -1) {
    swift_once();
  }
  uint64_t v117 = &unk_100199000;
  v208[0] = qword_100199320;
  sub_10001BA68(v109, v107, (uint64_t *)&unk_10017FA60);
  uint64_t v118 = v189;
  if (!v75)
  {
    sub_1000130EC(v107, (uint64_t *)&unk_10017FA60);
LABEL_45:
    sub_100004700(&qword_10017CC20);
    uint64_t v128 = swift_allocObject();
    *(_OWORD *)(v128 + 16) = xmmword_100132F10;
    uint64_t v129 = sub_1000A3AE4();
    uint64_t v131 = *(void *)v129;
    uint64_t v130 = *((void *)v129 + 1);
    *(void *)(v128 + 32) = v131;
    *(void *)(v128 + 40) = v130;
    uint64_t v132 = v203;
    uint64_t v133 = *(uint64_t (**)(uint64_t))(*(void *)v203 + 272);
    swift_bridgeObjectRetain();
    char v134 = v133(v128);
    uint64_t v135 = swift_bridgeObjectRelease();
    if (v134) {
      (*(void (**)(uint64_t))(*(void *)v132 + 208))(v135);
    }
    goto LABEL_47;
  }
  uint64_t v119 = v109;
  uint64_t v120 = v106;
  int v121 = v75;
  sub_10001BA68(v107, v189, (uint64_t *)&unk_10017FA60);
  uint64_t v122 = v194;
  uint64_t result = (void *)((uint64_t (*)(uint64_t, uint64_t, char *))v199)(v118, 1, v194);
  if (result == 1)
  {
    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  unint64_t v123 = (void *)v196[12];
  swift_bridgeObjectRetain();
  uint64_t v124 = URL.path.getter();
  uint64_t v126 = v125;
  (*(void (**)(uint64_t, char *))(v201 + 8))(v118, v122);
  char v127 = sub_1000391C4(v124, v126, v123);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000130EC(v107, (uint64_t *)&unk_10017FA60);
  int v75 = v121;
  uint64_t v106 = v120;
  uint64_t v109 = v119;
  uint64_t v117 = (void *)&unk_100199000;
  if ((v127 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_47:
  uint64_t v136 = (uint64_t)v202;
  uint64_t v137 = (uint64_t)v195;
  sub_1000F0DEC((uint64_t)v208, (uint64_t)&type metadata for RealizedInfo.Flags, (uint64_t)&v213);
  v207[1] = v213;
  uint64_t v138 = v117[100];
  if (qword_1001824F0 != -1) {
    swift_once();
  }
  if (!v138)
  {
    if (!qword_100199328)
    {
      uint64_t v138 = 0;
      goto LABEL_55;
    }
LABEL_53:
    v138 |= qword_100199328;
    goto LABEL_55;
  }
  if ((qword_100199328 & ~v138) != 0) {
    goto LABEL_53;
  }
LABEL_55:
  v207[0] = v138;
  sub_10001BA68(v136, v137, (uint64_t *)&unk_10017FA60);
  if ((v75 & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v139 = (void *)*sub_10002A568();
  uint64_t v140 = v179;
  sub_10001BA68(v137, v179, (uint64_t *)&unk_10017FA60);
  uint64_t v141 = v194;
  uint64_t result = (void *)((uint64_t (*)(uint64_t, uint64_t, char *))v199)(v140, 1, v194);
  if (result == 1) {
    goto LABEL_112;
  }
  swift_bridgeObjectRetain();
  uint64_t v142 = URL.path.getter();
  uint64_t v144 = v143;
  (*(void (**)(uint64_t, char *))(v201 + 8))(v140, v141);
  sub_1000391C4(v142, v144, v139);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v136 = (uint64_t)v202;
  uint64_t v137 = (uint64_t)v195;
LABEL_58:
  sub_1000130EC(v137, (uint64_t *)&unk_10017FA60);
  sub_1000F0DEC((uint64_t)v207, (uint64_t)&type metadata for RealizedInfo.Flags, (uint64_t)&v214);
  uint64_t v216 = v214;
  uint64_t v206 = qword_100199328;
  uint64_t v145 = (uint64_t *)sub_1000A14BC();
  uint64_t v146 = v197;
  if (*(void *)(v197 + 16))
  {
    uint64_t v147 = *v145;
    uint64_t v148 = v145[1];
    swift_bridgeObjectRetain();
    unint64_t v149 = sub_1000048E0(v147, v148);
    if (v150)
    {
      sub_1000047DC(*(void *)(v146 + 56) + 32 * v149, (uint64_t)&v209);
    }
    else
    {
      long long v209 = 0u;
      long long v210 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v210 + 1))
    {
      swift_dynamicCast();
      goto LABEL_66;
    }
  }
  else
  {
    long long v209 = 0u;
    long long v210 = 0u;
  }
  sub_1000130EC((uint64_t)&v209, &qword_10017C018);
LABEL_66:
  sub_1000F0DEC((uint64_t)&v206, (uint64_t)&type metadata for RealizedInfo.Flags, (uint64_t)&v215);
  uint64_t v206 = v215;
  if (qword_1001824D0 != -1) {
    swift_once();
  }
  uint64_t v205 = qword_100199308;
  uint64_t v151 = (uint64_t *)sub_1000A14A4();
  if (*(void *)(v146 + 16))
  {
    uint64_t v152 = *v151;
    uint64_t v153 = v151[1];
    swift_bridgeObjectRetain();
    unint64_t v154 = sub_1000048E0(v152, v153);
    if (v155)
    {
      sub_1000047DC(*(void *)(v146 + 56) + 32 * v154, (uint64_t)&v209);
    }
    else
    {
      long long v209 = 0u;
      long long v210 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v209 = 0u;
    long long v210 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v210 + 1))
  {
    sub_1000130EC((uint64_t)&v209, &qword_10017C018);
    goto LABEL_79;
  }
  if (!swift_dynamicCast())
  {
LABEL_79:
    uint64_t v157 = v203;
    sub_10001BA68(v109, v106, (uint64_t *)&unk_10017FA60);
    goto LABEL_80;
  }
  char v156 = v216;
  sub_10001BA68(v109, v106, (uint64_t *)&unk_10017FA60);
  uint64_t v157 = v203;
  if ((v156 & 1) == 0)
  {
LABEL_80:
    type metadata accessor for KernelExtension(0);
    if (!swift_dynamicCastClass() || ((*(uint64_t (**)(void))(*(void *)v157 + 208))() & 1) != 0)
    {
      uint64_t v160 = v183;
      sub_10001BA68(v106, v183, (uint64_t *)&unk_10017FA60);
LABEL_83:
      uint64_t v158 = (uint64_t)v185;
LABEL_84:
      char v159 = v193;
LABEL_85:
      sub_1000130EC(v160, (uint64_t *)&unk_10017FA60);
      goto LABEL_86;
    }
    uint64_t v160 = v183;
    sub_10001BA68(v106, v183, (uint64_t *)&unk_10017FA60);
    if (!v75) {
      goto LABEL_83;
    }
    uint64_t v161 = v178;
    sub_10001BA68(v160, v178, (uint64_t *)&unk_10017FA60);
    uint64_t v162 = v194;
    uint64_t result = (void *)((uint64_t (*)(uint64_t, uint64_t, char *))v199)(v161, 1, v194);
    if (result != 1)
    {
      uint64_t v163 = URL.path.getter();
      uint64_t v165 = v164;
      uint64_t v166 = *(void (**)(uint64_t, char *))(v201 + 8);
      v201 += 8;
      v166(v161, v162);
      uint64_t v167 = (uint64_t)v177;
      if (v163 == 0xD000000000000013 && v165 == 0x80000001001469B0)
      {
        swift_bridgeObjectRelease();
        sub_10001BA68(v160, v167, (uint64_t *)&unk_10017FA60);
        uint64_t v158 = (uint64_t)v185;
LABEL_103:
        sub_1000130EC(v167, (uint64_t *)&unk_10017FA60);
        uint64_t v136 = (uint64_t)v202;
        goto LABEL_84;
      }
      char v168 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      sub_10001BA68(v160, v167, (uint64_t *)&unk_10017FA60);
      uint64_t v158 = (uint64_t)v185;
      if (v168) {
        goto LABEL_103;
      }
      uint64_t v169 = v175;
      sub_10001BA68(v167, v175, (uint64_t *)&unk_10017FA60);
      uint64_t v170 = v194;
      uint64_t result = (void *)((uint64_t (*)(uint64_t, uint64_t, char *))v199)(v169, 1, v194);
      if (result != 1)
      {
        uint64_t v171 = URL.path.getter();
        uint64_t v172 = v169;
        uint64_t v174 = v173;
        v166(v172, v170);
        if (v171 == 0xD00000000000001ALL && v174 == 0x80000001001469D0)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
        }
        uint64_t v136 = (uint64_t)v202;
        char v159 = v193;
        sub_1000130EC(v167, (uint64_t *)&unk_10017FA60);
        goto LABEL_85;
      }
LABEL_115:
      __break(1u);
      return result;
    }
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  uint64_t v158 = (uint64_t)v185;
  char v159 = v193;
LABEL_86:
  sub_1000130EC(v106, (uint64_t *)&unk_10017FA60);
  sub_1000F0DEC((uint64_t)&v205, (uint64_t)&type metadata for RealizedInfo.Flags, (uint64_t)&v216);
  uint64_t v215 = v216;
  if (qword_1001824D8 != -1) {
    swift_once();
  }
  uint64_t v214 = qword_100199310;
  if (v159 != 3)
  {
    LOBYTE(v209) = v159;
    LOBYTE(v213) = 0;
    sub_10003FF28();
    dispatch thunk of static Equatable.== infix(_:_:)();
  }
  sub_1000F0DEC((uint64_t)&v214, (uint64_t)&type metadata for RealizedInfo.Flags, (uint64_t)&v209);
  uint64_t v215 = v209;
  if (qword_1001824E0 != -1) {
    swift_once();
  }
  uint64_t v214 = qword_100199318;
  if (v159 != 3)
  {
    LOBYTE(v216) = v159;
    LOBYTE(v213) = 1;
    sub_10003FF28();
    dispatch thunk of static Equatable.== infix(_:_:)();
  }
  sub_1000F0DEC((uint64_t)&v214, (uint64_t)&type metadata for RealizedInfo.Flags, (uint64_t)&v216);
  uint64_t v215 = v216;
  if (qword_100182500 != -1) {
    swift_once();
  }
  uint64_t v214 = qword_100199338;
  sub_1000F0DEC((uint64_t)&v214, (uint64_t)&type metadata for RealizedInfo.Flags, (uint64_t)&v209);
  sub_1000130EC(v204, (uint64_t *)&unk_10017FA60);
  sub_1000130EC(v109, (uint64_t *)&unk_10017FA60);
  sub_1000130EC(v136, (uint64_t *)&unk_10017FA60);
  sub_1000130EC(v158, (uint64_t *)&unk_10017FA60);
  return (void *)v209;
}

void *sub_10003E600(void *a1)
{
  unint64_t v3 = a1[17];
  uint64_t v4 = a1[57];
  uint64_t v5 = a1[56];
  uint64_t v6 = a1[68];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10003E8B0(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10003E8D0(v5, v4);
  swift_bridgeObjectRelease();
  sub_10003E95C(v6);
  return a1;
}

unint64_t sub_10003E8B0(unint64_t result)
{
  if (result != 5) {
    return sub_10003E8C0(result);
  }
  return result;
}

unint64_t sub_10003E8C0(unint64_t result)
{
  if (result >= 5) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10003E8D0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10003E95C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10003E9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  switch(a10)
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
      goto LABEL_2;
    case 3:
    case 6:
    case 14:
    case 18:
    case 26:
    case 42:
      swift_bridgeObjectRelease();
      goto LABEL_2;
    case 13:
      swift_bridgeObjectRelease();
      sub_10002404C(a4, a5);
      swift_bridgeObjectRelease();
      goto LABEL_2;
    case 15:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_2:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10003EBF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100004700(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003EC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100038B9C(a1, a2, a3, v3);
}

void *sub_10003EC60(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = (void *)sub_100010EA4(v2);
    uint64_t v5 = (uint64_t)result;
    int v7 = v6;
    uint64_t v8 = 0;
    uint64_t v9 = v2 + 64;
    uint64_t v21 = v2 + 80;
    uint64_t v22 = v3;
    uint64_t v23 = v2;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v2 + 32))
    {
      unint64_t v11 = (unint64_t)v5 >> 6;
      if ((*(void *)(v9 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(v2 + 36) != v7) {
        goto LABEL_23;
      }
      uint64_t v25 = v8;
      uint64_t v12 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      uint64_t v15 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
      swift_bridgeObjectRetain();
      swift_retain();
      a2(v13, v14, v15);
      swift_release();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      uint64_t v2 = v23;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = (void *)specialized ContiguousArray._endMutation()();
      int64_t v10 = 1 << *(unsigned char *)(v23 + 32);
      if (v5 >= v10) {
        goto LABEL_24;
      }
      uint64_t v16 = *(void *)(v9 + 8 * v11);
      if ((v16 & (1 << v5)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(v23 + 36) != v7) {
        goto LABEL_26;
      }
      unint64_t v17 = v16 & (-2 << (v5 & 0x3F));
      if (v17)
      {
        int64_t v10 = __clz(__rbit64(v17)) | v5 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v18 = v11 + 1;
        unint64_t v19 = (unint64_t)(v10 + 63) >> 6;
        if (v11 + 1 < v19)
        {
          unint64_t v20 = *(void *)(v9 + 8 * v18);
          if (v20)
          {
LABEL_18:
            int64_t v10 = __clz(__rbit64(v20)) + (v18 << 6);
          }
          else
          {
            while (v19 - 2 != v11)
            {
              unint64_t v20 = *(void *)(v21 + 8 * v11++);
              if (v20)
              {
                unint64_t v18 = v11 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v8 = v25 + 1;
      uint64_t v5 = v10;
      if (v25 + 1 == v22) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for RealizedKernelCollection(uint64_t a1)
{
  return sub_1000192DC(a1, (uint64_t *)&unk_100182CA0);
}

uint64_t sub_10003EEAC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003EEE4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003EF2C(uint64_t a1, uint64_t a2, char a3)
{
  sub_100036E94(a1, a2, a3 & 1, v3[2], v3[3], v3[4]);
  return 2;
}

BOOL sub_10003EF54(void *a1, void *a2, char a3)
{
  uint64_t v7 = a1[3];
  int64_t v8 = v7 + 24;
  uint64_t v9 = a2[3];
  sub_10003FDC8(v9 + 24, (uint64_t)v43);
  int64_t v10 = (char *)v41;
  sub_10003FDC8(v7 + 24, (uint64_t)v39);
  sub_10003FE24((uint64_t)v43, (uint64_t)v41);
  if (v40)
  {
    if (v40 != 1)
    {
      sub_10003FE80((uint64_t)v41);
      uint64_t v12 = v39;
      goto LABEL_17;
    }
    sub_10003FDC8((uint64_t)v39, (uint64_t)v38);
    int64_t v8 = v38[0];
    if (v42 == 1)
    {
      int64_t v10 = (char *)v41[0];
      uint64_t v3 = sub_1000F112C(*(unsigned __int8 *)(v38[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind), *(unsigned __int8 *)(v41[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
      swift_release();
      swift_release();
      sub_10003FE80((uint64_t)v39);
      if (v3) {
        return 1;
      }
      if (a3) {
        goto LABEL_6;
      }
LABEL_19:
      unint64_t v11 = &_swiftEmptyArrayStorage;
      goto LABEL_20;
    }
    swift_release();
  }
  if (!v42)
  {
    if (v40 != 1) {
      goto LABEL_18;
    }
    swift_release();
    uint64_t v12 = v41;
LABEL_17:
    sub_10003FE80((uint64_t)v12);
    return 1;
  }
  if (v42 != 1)
  {
    sub_10003FE80((uint64_t)v41);
    uint64_t v13 = v39;
    goto LABEL_31;
  }
  sub_10003FDC8((uint64_t)v41, (uint64_t)v38);
  swift_release();
  if (!v40)
  {
    sub_10003FE80((uint64_t)v39);
    uint64_t v13 = v41;
LABEL_31:
    sub_10003FE80((uint64_t)v13);
    return 0;
  }
LABEL_18:
  sub_1000130EC((uint64_t)v39, &qword_10017CC00);
  if ((a3 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_6:
  sub_100004700(&qword_10017CC08);
  unint64_t v11 = (void *)swift_allocObject();
  *((_OWORD *)v11 + 1) = xmmword_100132F10;
  if (qword_100182490 != -1) {
    swift_once();
  }
  *((void *)v11 + 4) = qword_1001992C8;
LABEL_20:
  if (qword_100182470 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1001992A8;
  if (qword_100182450 != -1) {
    swift_once();
  }
  uint64_t v36 = v9;
  uint64_t v37 = v7;
  uint64_t v16 = qword_100199288;
  unint64_t v17 = qword_1001824D8;
  if (qword_1001824D8 != -1) {
    swift_once();
  }
  int64_t v18 = *((void *)v11 + 2);
  int64_t v19 = v18 + 3;
  if (__OFADD__(v18, 3))
  {
    __break(1u);
LABEL_59:
    int64_t v10 = sub_10003A47C((char *)(v17 > 1), v8, 1, v10);
    unint64_t v17 = *((void *)v10 + 3);
    unint64_t v21 = v17 >> 1;
    goto LABEL_38;
  }
  uint64_t v3 = qword_100199310;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native
    && (unint64_t v17 = *((void *)v11 + 3), v21 = v17 >> 1, (uint64_t)(v17 >> 1) >= v19))
  {
    int64_t v10 = (char *)v11;
  }
  else
  {
    if (v18 <= v19) {
      int64_t v22 = v18 + 3;
    }
    else {
      int64_t v22 = v18;
    }
    int64_t v10 = sub_10003A47C(isUniquelyReferenced_nonNull_native, v22, 1, (char *)v11);
    unint64_t v17 = *((void *)v10 + 3);
    unint64_t v21 = v17 >> 1;
  }
  int64_t v18 = *((void *)v10 + 2);
  int64_t v8 = v18 + 1;
  if (v21 <= v18) {
    goto LABEL_59;
  }
LABEL_38:
  *((void *)v10 + 2) = v8;
  *(void *)&v10[8 * v18 + 32] = v15;
  int64_t v23 = v18 + 2;
  if ((uint64_t)v21 < v18 + 2)
  {
    uint64_t v35 = sub_10003A47C((char *)(v17 > 1), v18 + 2, 1, v10);
    int64_t v23 = v18 + 2;
    int64_t v10 = v35;
  }
  *((void *)v10 + 2) = v23;
  *(void *)&v10[8 * v8 + 32] = v16;
  unint64_t v25 = *((void *)v10 + 2);
  unint64_t v24 = *((void *)v10 + 3);
  if (v25 >= v24 >> 1) {
    int64_t v10 = sub_10003A47C((char *)(v24 > 1), v25 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v25 + 1;
  *(void *)&v10[8 * v25 + 32] = v3;
  uint64_t v26 = swift_bridgeObjectRelease();
  uint64_t v27 = *((void *)v10 + 2);
  if (!v27)
  {
LABEL_50:
    uint64_t v31 = swift_bridgeObjectRelease();
    if ((*((unsigned char *)a1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex + 8) & 1) != 0
      || (*((unsigned char *)a2 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex + 8) & 1) != 0)
    {
      goto LABEL_52;
    }
    uint64_t v33 = *(void *)((char *)a1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex);
    uint64_t v34 = *(void *)((char *)a2 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex);
    if (v33 < v34) {
      return 1;
    }
    if (v34 >= v33)
    {
LABEL_52:
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 192))(v31);
      return (*(uint64_t (**)(void))(*(void *)v36 + 192))() < v32;
    }
    return 0;
  }
  uint64_t v28 = 0;
  uint64_t v29 = *(uint64_t (**)(void))(*a1 + 168);
  while (1)
  {
    uint64_t v30 = *(void *)&v10[8 * v28 + 32];
    if ((v30 & ~((uint64_t (*)(uint64_t))v29)(v26)) == 0
      && (v30 & ~(*(uint64_t (**)(void))(*a2 + 168))()) != 0)
    {
      break;
    }
    uint64_t v26 = (*(uint64_t (**)(void))(*a2 + 168))();
    if ((v30 & ~v26) == 0)
    {
      uint64_t v26 = v29();
      if ((v30 & ~v26) != 0)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    if (v27 == ++v28) {
      goto LABEL_50;
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

unint64_t sub_10003F4B8()
{
  unint64_t result = qword_10017C940;
  if (!qword_10017C940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C940);
  }
  return result;
}

unint64_t sub_10003F50C()
{
  unint64_t result = qword_10017C950;
  if (!qword_10017C950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C950);
  }
  return result;
}

unint64_t sub_10003F560()
{
  unint64_t result = qword_10017C958;
  if (!qword_10017C958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C958);
  }
  return result;
}

unint64_t sub_10003F5B4()
{
  unint64_t result = qword_10017C960;
  if (!qword_10017C960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C960);
  }
  return result;
}

unint64_t sub_10003F60C()
{
  unint64_t result = qword_10017C968;
  if (!qword_10017C968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C968);
  }
  return result;
}

unint64_t sub_10003F664()
{
  unint64_t result = qword_10017C970;
  if (!qword_10017C970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C970);
  }
  return result;
}

unint64_t sub_10003F6BC()
{
  unint64_t result = qword_10017C978;
  if (!qword_10017C978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C978);
  }
  return result;
}

unint64_t sub_10003F714()
{
  unint64_t result = qword_10017C980;
  if (!qword_10017C980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C980);
  }
  return result;
}

unint64_t sub_10003F76C()
{
  unint64_t result = qword_10017C988;
  if (!qword_10017C988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C988);
  }
  return result;
}

uint64_t sub_10003F7C0()
{
  return sub_10003C958(&qword_10017C990, (void (*)(uint64_t))type metadata accessor for RealizedInfo);
}

uint64_t sub_10003F808()
{
  return sub_10003C958(&qword_10017C998, (void (*)(uint64_t))type metadata accessor for RealizedKernelCollection);
}

uint64_t sub_10003F850()
{
  return type metadata accessor for RealizedInfo(0);
}

void sub_10003F858()
{
  sub_10003F9B4(319, &qword_10017C9C8, (void (*)(uint64_t))&type metadata accessor for UUID);
  if (v0 <= 0x3F)
  {
    sub_10003F9B4(319, (unint64_t *)&qword_10017C9D0, (void (*)(uint64_t))&type metadata accessor for URL);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10003F9B4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for RealizedInfo.Flags()
{
  return &type metadata for RealizedInfo.Flags;
}

uint64_t destroy for RealizedInfo.LoadInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s10driverkitd12RealizedInfoC8LoadInfoVwCP_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RealizedInfo.LoadInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RealizedInfo.LoadInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RealizedInfo.LoadInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RealizedInfo.LoadInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RealizedInfo.LoadInfo()
{
  return &type metadata for RealizedInfo.LoadInfo;
}

unsigned char *storeEnumTagSinglePayload for RealizedInfo.LoadInfo.LoadState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003FC88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RealizedInfo.LoadInfo.LoadState()
{
  return &type metadata for RealizedInfo.LoadInfo.LoadState;
}

uint64_t sub_10003FCC0()
{
  return type metadata accessor for RealizedKernelCollection(0);
}

void sub_10003FCC8()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_10003F9B4(319, &qword_10017C9C8, (void (*)(uint64_t))&type metadata accessor for UUID);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_10003FDC8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10003FE24(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10003FE80(uint64_t a1)
{
  return a1;
}

unint64_t sub_10003FED4()
{
  unint64_t result = qword_10017CC18;
  if (!qword_10017CC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CC18);
  }
  return result;
}

unint64_t sub_10003FF28()
{
  unint64_t result = qword_10017CC28;
  if (!qword_10017CC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CC28);
  }
  return result;
}

unint64_t sub_10003FF7C()
{
  unint64_t result = qword_10017CC40;
  if (!qword_10017CC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CC40);
  }
  return result;
}

uint64_t sub_10003FFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  unsigned int v6 = sub_1000045E8(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_10000464C(a1, v7);
  return sub_10004006C((uint64_t)v10, v7, v8);
}

uint64_t sub_10004006C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000469C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100004700(&qword_10017CC48);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_10000478C(a1);
}

uint64_t sub_1000400E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017CC48);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32);

  return v5(v4, v4, a1);
}

uint64_t sub_100040154()
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v0 = 0xD000000000000033;
  *(void *)(v0 + 8) = 0x8000000100146B60;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 50;
  return swift_willThrow();
}

uint64_t sub_1000401F4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t sub_100040238()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

unint64_t sub_10004027C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  id v7 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  unint64_t result = (unint64_t)sub_10004049C(a1, a2, 0);
  if (!v3)
  {
    unint64_t v9 = result;
    unint64_t result = sub_100040578();
    a3[3] = result;
    a3[4] = (unint64_t)&off_10016DBE0;
    *a3 = v9;
  }
  return result;
}

void sub_100040308(void (*a1)(void *))
{
  id v3 = [self enumeratorWithOptions:0];
  id v4 = [v3 nextObject];
  if (v4)
  {
    id v5 = v4;
    unint64_t v6 = sub_100040578();
    while (1)
    {
      v8[3] = v6;
      v8[4] = &off_10016DBE0;
      v8[0] = v5;
      id v7 = v5;
      a1(v8);
      if (v1) {
        break;
      }

      sub_10000478C((uint64_t)v8);
      id v5 = [v3 nextObject];
      if (!v5) {
        goto LABEL_5;
      }
    }

    sub_10000478C((uint64_t)v8);
  }
  else
  {
LABEL_5:
  }
}

uint64_t sub_100040414()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t sub_100040458()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

id sub_10004049C(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

unint64_t sub_100040578()
{
  unint64_t result = qword_10017CC50;
  if (!qword_10017CC50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017CC50);
  }
  return result;
}

uint64_t type metadata accessor for NullLaunchServices()
{
  return self;
}

uint64_t type metadata accessor for RealLaunchServices()
{
  return self;
}

uint64_t sub_100040604()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))() & 1;
}

uint64_t sub_10004064C(uint64_t a1, uint64_t a2)
{
  return sub_100040658(a1, a2, (uint64_t)&off_10016B280);
}

uint64_t sub_100040658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  id v6 = sub_1000045E8(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_10000464C(a1, v7);
  return sub_100040840((uint64_t)v10, v7, v8);
}

uint64_t sub_1000406F0(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_1000036B0(a1, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  StaticString.description.getter();
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_1000036B0(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  StaticString.description.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v6 = j___os_feature_enabled_impl();
  swift_release();
  swift_release();
  return v6;
}

uint64_t sub_1000407EC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))() & 1;
}

uint64_t sub_100040834(uint64_t a1, uint64_t a2)
{
  return sub_100040658(a1, a2, (uint64_t)&off_10016B2A8);
}

uint64_t sub_100040840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000469C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100004700(&qword_10017CDA8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_10000478C(a1);
}

uint64_t sub_1000408BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017CDA8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32);

  return v5(v4, v4, a1);
}

uint64_t type metadata accessor for RealFeatureFlagsClient()
{
  return self;
}

uint64_t type metadata accessor for RestoreOSFeatureFlagsClient()
{
  return self;
}

unint64_t sub_100040970()
{
  return sub_1000409A8((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_1000409A8(uint64_t a1)
{
  uint64_t v2 = sub_100004700(&qword_10017BF00);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017BF08);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100047D50(v12, (uint64_t)v5);
    unint64_t result = sub_10004454C((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = type metadata accessor for DriverBinEntry();
    unint64_t result = sub_100046238(v9, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    _OWORD v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100040BCC()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_100040C1C(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_100040C1C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DriverBinEntry();
  uint64_t v44 = *(void *)(v3 - 8);
  uint64_t v45 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v43 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v42 = (uint64_t)&v34 - v6;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v47 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = &_swiftEmptyArrayStorage;
  if (!v11) {
    return (uint64_t)v12;
  }
  uint64_t v36 = v1;
  uint64_t v48 = &_swiftEmptyArrayStorage;
  uint64_t v46 = v9;
  sub_100044920(0, v11, 0);
  uint64_t result = sub_100010EA4(v46);
  uint64_t v14 = result;
  uint64_t v15 = v46;
  int v17 = v16;
  uint64_t v18 = 0;
  uint64_t v19 = v46 + 64;
  uint64_t v39 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v40 = v8;
  int64_t v37 = v11;
  uint64_t v38 = v8 + 32;
  char v20 = *(unsigned char *)(v46 + 32);
  uint64_t v35 = v46 + 88;
  uint64_t v41 = v7;
  while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << v20)
  {
    unint64_t v23 = (unint64_t)v14 >> 6;
    if ((*(void *)(v19 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0) {
      goto LABEL_27;
    }
    if (*(_DWORD *)(v15 + 36) != v17) {
      goto LABEL_28;
    }
    uint64_t v24 = v42;
    sub_1000461D0(*(void *)(v15 + 56) + *(void *)(v44 + 72) * v14, v42, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v25 = v24;
    uint64_t v26 = v43;
    sub_100046238(v25, v43, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    (*v39)(v47, v26 + *(int *)(v45 + 28), v7);
    sub_1000462F4(v26, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v12 = v48;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100044920(0, v12[2] + 1, 1);
      uint64_t v12 = v48;
    }
    unint64_t v28 = v12[2];
    unint64_t v27 = v12[3];
    if (v28 >= v27 >> 1)
    {
      sub_100044920(v27 > 1, v28 + 1, 1);
      uint64_t v12 = v48;
    }
    v12[2] = v28 + 1;
    uint64_t v7 = v41;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v40 + 32))((unint64_t)v12+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v28, v47, v41);
    uint64_t v48 = v12;
    uint64_t v15 = v46;
    char v20 = *(unsigned char *)(v46 + 32);
    unint64_t v21 = 1 << v20;
    if (v14 >= 1 << v20) {
      goto LABEL_29;
    }
    uint64_t v29 = *(void *)(v19 + 8 * v23);
    if ((v29 & (1 << v14)) == 0) {
      goto LABEL_30;
    }
    if (*(_DWORD *)(v46 + 36) != v17) {
      goto LABEL_31;
    }
    unint64_t v30 = v29 & (-2 << (v14 & 0x3F));
    if (v30)
    {
      unint64_t v21 = __clz(__rbit64(v30)) | v14 & 0xFFFFFFFFFFFFFFC0;
      int64_t v22 = v37;
    }
    else
    {
      unint64_t v31 = v23 + 1;
      unint64_t v32 = (v21 + 63) >> 6;
      int64_t v22 = v37;
      if (v23 + 1 < v32)
      {
        unint64_t v33 = *(void *)(v19 + 8 * v31);
        if (!v33)
        {
          unint64_t v31 = v23 + 2;
          if (v23 + 2 >= v32) {
            goto LABEL_4;
          }
          unint64_t v33 = *(void *)(v19 + 8 * v31);
          if (!v33)
          {
            while (v32 - 3 != v23)
            {
              unint64_t v33 = *(void *)(v35 + 8 * v23++);
              if (v33)
              {
                unint64_t v31 = v23 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        unint64_t v21 = __clz(__rbit64(v33)) + (v31 << 6);
      }
    }
LABEL_4:
    ++v18;
    uint64_t v14 = v21;
    if (v18 == v22) {
      return (uint64_t)v12;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100041034(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DriverBinEntry();
  uint64_t v44 = *(void *)(v3 - 8);
  uint64_t v45 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v43 = (uint64_t)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v42 = (uint64_t)v36 - v6;
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  v36[1] = v1;
  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_10000C884(0, v7, 0);
  uint64_t result = sub_100010EA4(a1);
  uint64_t v11 = result;
  uint64_t v12 = 0;
  uint64_t v13 = a1 + 64;
  uint64_t v37 = a1 + 80;
  int64_t v38 = v7;
  uint64_t v40 = a1 + 64;
  uint64_t v41 = a1;
  uint64_t v39 = v10;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v16 = (unint64_t)v11 >> 6;
    if ((*(void *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v10) {
      goto LABEL_26;
    }
    uint64_t v46 = v12;
    uint64_t v17 = v42;
    sub_1000461D0(*(void *)(a1 + 56) + *(void *)(v44 + 72) * v11, v42, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v18 = v43;
    sub_100046238(v17, v43, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    v47[0] = 0;
    v47[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    strcpy((char *)v47, "Staged bundle ");
    HIBYTE(v47[1]) = -18;
    uint64_t v19 = v45;
    type metadata accessor for URL();
    sub_100047D08(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
    v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 0x70706120726F6620;
    v21._int64_t object = (void *)0xE900000000000020;
    String.append(_:)(v21);
    int64_t v22 = (uint64_t *)(v18 + *(int *)(v19 + 20));
    uint64_t v23 = *v22;
    uint64_t v24 = (void *)v22[1];
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = v23;
    v25._int64_t object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    uint64_t v27 = v47[0];
    uint64_t v26 = v47[1];
    sub_1000462F4(v18, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v8 = v48;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10000C884(0, v8[2] + 1, 1);
      uint64_t v8 = v48;
    }
    unint64_t v29 = v8[2];
    unint64_t v28 = v8[3];
    if (v29 >= v28 >> 1)
    {
      uint64_t result = sub_10000C884(v28 > 1, v29 + 1, 1);
      uint64_t v8 = v48;
    }
    void v8[2] = v29 + 1;
    unint64_t v30 = &v8[2 * v29];
    v30[4] = v27;
    v30[5] = v26;
    a1 = v41;
    int64_t v14 = 1 << *(unsigned char *)(v41 + 32);
    if (v11 >= v14) {
      goto LABEL_27;
    }
    uint64_t v13 = v40;
    uint64_t v31 = *(void *)(v40 + 8 * v16);
    if ((v31 & (1 << v11)) == 0) {
      goto LABEL_28;
    }
    LODWORD(v10) = v39;
    if (*(_DWORD *)(v41 + 36) != v39) {
      goto LABEL_29;
    }
    unint64_t v32 = v31 & (-2 << (v11 & 0x3F));
    if (v32)
    {
      int64_t v14 = __clz(__rbit64(v32)) | v11 & 0xFFFFFFFFFFFFFFC0;
      int64_t v15 = v38;
    }
    else
    {
      unint64_t v33 = v16 + 1;
      unint64_t v34 = (unint64_t)(v14 + 63) >> 6;
      int64_t v15 = v38;
      if (v16 + 1 < v34)
      {
        unint64_t v35 = *(void *)(v40 + 8 * v33);
        if (v35)
        {
LABEL_22:
          int64_t v14 = __clz(__rbit64(v35)) + (v33 << 6);
        }
        else
        {
          while (v34 - 2 != v16)
          {
            unint64_t v35 = *(void *)(v37 + 8 * v16++);
            if (v35)
            {
              unint64_t v33 = v16 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v12 = v46 + 1;
    uint64_t v11 = v14;
    if (v46 + 1 == v15) {
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100041448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = UUID.init()();
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    sub_10004454C(a2);
    char v10 = v9;
    uint64_t result = swift_bridgeObjectRelease();
    if (v10)
    {
      uint64_t v11 = (void (**)(uint64_t, uint64_t))(v5 + 8);
      uint64_t v12 = (uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32);
      do
      {
        UUID.init()();
        (*v11)(a2, v4);
        uint64_t result = (*v12)(a2, v7, v4);
        if (!*(void *)(a1 + 16)) {
          break;
        }
        swift_bridgeObjectRetain();
        sub_10004454C(a2);
        char v14 = v13;
        uint64_t result = swift_bridgeObjectRelease();
      }
      while ((v14 & 1) != 0);
    }
  }
  return result;
}

uint64_t sub_10004159C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    swift_bridgeObjectRetain();
    sub_10004454C(a1);
    char v4 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1000415F0(uint64_t a1)
{
  uint64_t v3 = sub_100004700(&qword_10017CEF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  char v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v19 - v11;
  char v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13((char *)&v19 - v11, a1, v6);
  uint64_t v20 = v1;
  if (*(void *)(*(void *)v1 + 16)
    && (swift_bridgeObjectRetain(), sub_10004454C((uint64_t)v12), char v15 = v14, swift_bridgeObjectRelease(), (v15 & 1) != 0))
  {
    unint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    unint64_t v21 = 0xD00000000000002DLL;
    unint64_t v22 = 0x8000000100146C80;
    sub_100047D08(&qword_10017CEF8, (void (*)(uint64_t))&type metadata accessor for UUID);
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v13(v10, (uint64_t)v12, v6);
    sub_1000461D0(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v16 = type metadata accessor for DriverBinEntry();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v5, 0, 1, v16);
    sub_1000418D8((uint64_t)v5, (uint64_t)v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  return result;
}

uint64_t sub_1000418D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100004700(&qword_10017CEF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DriverBinEntry();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100047C44(a1);
    sub_100044B14(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_100047C44((uint64_t)v8);
  }
  else
  {
    sub_100046238(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100045540((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_100041AE8()
{
  if (*v0) {
    return 0x6E6F6973726576;
  }
  else {
    return 0x73656972746E65;
  }
}

uint64_t sub_100041B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100045DAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100041B44(uint64_t a1)
{
  unint64_t v2 = sub_100044630();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100041B80(uint64_t a1)
{
  unint64_t v2 = sub_100044630();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100041BBC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a4;
  uint64_t v7 = sub_100004700(&qword_10017CF00);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_100044630();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v14 = 0;
  sub_100004700(&qword_10017CF08);
  sub_100044684();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100041D50@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100045EA0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100041D80(void *a1)
{
  return sub_100041BBC(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100041DA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DriverBinEntry();
  uint64_t v42 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004700(&qword_10017BEF8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  char v14 = (char *)&v39 - v13;
  unint64_t v44 = 0;
  unint64_t v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  unint64_t v44 = 0xD000000000000013;
  unint64_t v45 = 0x8000000100146CB0;
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = a2;
  v15._int64_t object = a3;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 8236;
  v16._int64_t object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v43._uint64_t countAndFlagsBits = *(void *)(a1 + 16);
  v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x73656972746E6520;
  v18._int64_t object = (void *)0xEA00000000000A3ALL;
  String.append(_:)(v18);
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v40 = a1 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v41 = (unint64_t)(v20 + 63) >> 6;
  int64_t v39 = v41 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v24 = 0;
  if (!v22) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v28 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  unint64_t v29 = v28 | (v24 << 6);
  while (2)
  {
    uint64_t v30 = *(void *)(a1 + 48);
    uint64_t v31 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v12, v30 + *(void *)(*(void *)(v31 - 8) + 72) * v29, v31);
    uint64_t v32 = *(void *)(a1 + 56) + *(void *)(v42 + 72) * v29;
    uint64_t v33 = sub_100004700((uint64_t *)&unk_10017EBF0);
    sub_1000461D0(v32, (uint64_t)&v12[*(int *)(v33 + 48)], (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v12, 0, 1, v33);
    while (1)
    {
      sub_1000460C0((uint64_t)v12, (uint64_t)v14);
      uint64_t v38 = sub_100004700((uint64_t *)&unk_10017EBF0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v14, 1, v38) == 1)
      {
        swift_release();
        return v44;
      }
      sub_100046238((uint64_t)&v14[*(int *)(v38 + 48)], (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      v43._uint64_t countAndFlagsBits = sub_1000422D8();
      v43._int64_t object = v25;
      v26._uint64_t countAndFlagsBits = 10;
      v26._int64_t object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      sub_1000462F4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      uint64_t v27 = type metadata accessor for UUID();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v14, v27);
      if (v22) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v34 = v24 + 1;
      if (__OFADD__(v24, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v34 < v41)
      {
        unint64_t v35 = *(void *)(v40 + 8 * v34);
        if (v35) {
          goto LABEL_11;
        }
        int64_t v36 = v24 + 2;
        ++v24;
        if (v34 + 1 < v41)
        {
          unint64_t v35 = *(void *)(v40 + 8 * v36);
          if (v35) {
            goto LABEL_14;
          }
          int64_t v24 = v34 + 1;
          if (v34 + 2 < v41)
          {
            unint64_t v35 = *(void *)(v40 + 8 * (v34 + 2));
            if (v35)
            {
              v34 += 2;
              goto LABEL_11;
            }
            int64_t v36 = v34 + 3;
            int64_t v24 = v34 + 2;
            if (v34 + 3 < v41) {
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v37 = sub_100004700((uint64_t *)&unk_10017EBF0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v12, 1, 1, v37);
      unint64_t v22 = 0;
    }
    unint64_t v35 = *(void *)(v40 + 8 * v36);
    if (v35)
    {
LABEL_14:
      int64_t v34 = v36;
LABEL_11:
      unint64_t v22 = (v35 - 1) & v35;
      unint64_t v29 = __clz(__rbit64(v35)) + (v34 << 6);
      int64_t v24 = v34;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v34 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v34 >= v41)
    {
      int64_t v24 = v39;
      goto LABEL_25;
    }
    unint64_t v35 = *(void *)(v40 + 8 * v34);
    ++v36;
    if (v35) {
      goto LABEL_11;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000422D8()
{
  uint64_t v0 = type metadata accessor for TimeZone();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)NSISO8601DateFormatter) init];
  v29[0] = v4;
  static TimeZone.current.getter();
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v4 setTimeZone:isa];

  type metadata accessor for UUID();
  sub_100047D08(&qword_10017CEF8, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v32 = v6;
  v7._uint64_t countAndFlagsBits = 8250;
  v7._int64_t object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  type metadata accessor for DriverBinEntry();
  type metadata accessor for URL();
  sub_100047D08(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 10;
  v9._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v30._uint64_t countAndFlagsBits = 0;
  v30._int64_t object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0xD000000000000011;
  v30._int64_t object = (void *)0x8000000100146CD0;
  uint64_t v10 = sub_10001BD0C();
  uint64_t v12 = sub_100044038(0x7FFFFFFFFFFFFFFFLL, 1, v10, v11);
  uint64_t v13 = sub_100045C7C((uint64_t)v12, 538976288, 0xE400000000000000);
  swift_bridgeObjectRelease();
  v29[1] = v13;
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100014AB8();
  uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v16 = v15;
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = v14;
  v17._int64_t object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 10;
  v18._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0;
  v30._int64_t object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0xD000000000000013;
  v30._int64_t object = (void *)0x8000000100146CF0;
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 10;
  v20._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0x656D695420202020;
  v30._int64_t object = (void *)0xEF203A706D617473;
  Class v21 = Date._bridgeToObjectiveC()().super.isa;
  id v22 = v29[0];
  id v23 = [v29[0] stringFromDate:v21];

  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v26 = v25;

  v27._uint64_t countAndFlagsBits = v24;
  v27._int64_t object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();

  return v31;
}

uint64_t sub_100042700()
{
  return sub_100041DA0(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t sub_10004270C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DriverBinEntry();
  uint64_t v61 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v55 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v56 = (char *)&v47 - v7;
  uint64_t v62 = type metadata accessor for UUID();
  uint64_t v58 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v57 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004700(&qword_10017BEF8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  Swift::String v15 = (char *)&v47 - v14;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v51 = a1;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v17 = a1 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = 1 << *(unsigned char *)(v17 - 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v16;
  uint64_t v50 = v58 + 16;
  uint64_t v53 = (void (**)(char *, char *, uint64_t))(v58 + 32);
  int64_t v54 = 0;
  uint64_t v52 = (void (**)(uint64_t, uint64_t))(v58 + 8);
  uint64_t v48 = v17;
  int64_t v49 = (unint64_t)(v19 + 63) >> 6;
  int64_t v47 = v49 - 1;
  id v22 = (uint64_t *)&unk_10017EBF0;
  uint64_t v60 = (char *)&v47 - v14;
  uint64_t v23 = v62;
  uint64_t v24 = (uint64_t)v56;
  while (1)
  {
    if (v21)
    {
      unint64_t v25 = __clz(__rbit64(v21));
      uint64_t v26 = (v21 - 1) & v21;
      unint64_t v27 = v25 | (v54 << 6);
LABEL_8:
      uint64_t v28 = v51;
      (*(void (**)(char *, unint64_t, uint64_t))(v58 + 16))(v12, *(void *)(v51 + 48) + *(void *)(v58 + 72) * v27, v62);
      uint64_t v29 = *(void *)(v28 + 56) + *(void *)(v61 + 72) * v27;
      uint64_t v30 = sub_100004700(v22);
      sub_1000461D0(v29, (uint64_t)&v12[*(int *)(v30 + 48)], (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v12, 0, 1, v30);
      Swift::String v15 = v60;
      goto LABEL_30;
    }
    int64_t v31 = v54 + 1;
    if (__OFADD__(v54, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v31 < v49)
    {
      unint64_t v32 = *(void *)(v48 + 8 * v31);
      if (v32) {
        goto LABEL_12;
      }
      int64_t v33 = v54 + 2;
      ++v54;
      if (v31 + 1 < v49)
      {
        unint64_t v32 = *(void *)(v48 + 8 * v33);
        if (v32) {
          goto LABEL_15;
        }
        int64_t v54 = v31 + 1;
        if (v31 + 2 < v49)
        {
          unint64_t v32 = *(void *)(v48 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_12;
          }
          int64_t v54 = v31 + 2;
          if (v31 + 3 < v49)
          {
            unint64_t v32 = *(void *)(v48 + 8 * (v31 + 3));
            if (v32)
            {
              v31 += 3;
              goto LABEL_12;
            }
            int64_t v33 = v31 + 4;
            int64_t v54 = v31 + 3;
            if (v31 + 4 < v49) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v34 = sub_100004700(v22);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v12, 1, 1, v34);
    uint64_t v26 = 0;
LABEL_30:
    sub_1000460C0((uint64_t)v12, (uint64_t)v15);
    uint64_t v35 = sub_100004700(v22);
    int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v15, 1, v35);
    BOOL v37 = v36 == 1;
    if (v36 == 1) {
      return v37;
    }
    unint64_t v59 = v26;
    uint64_t v38 = v22;
    int64_t v39 = v12;
    uint64_t v40 = (uint64_t)&v15[*(int *)(v35 + 48)];
    uint64_t v41 = (uint64_t)v57;
    (*v53)(v57, v15, v23);
    sub_100046238(v40, v24, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    unint64_t v42 = sub_10004454C(v41);
    char v44 = v43;
    (*v52)(v41, v23);
    if ((v44 & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v45 = v55;
    sub_1000461D0(*(void *)(a2 + 56) + *(void *)(v61 + 72) * v42, v55, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    if ((static UUID.== infix(_:_:)() & 1) == 0
      || (sub_10001CBA8((void *)(v45 + *(int *)(v4 + 20)), (void *)(v24 + *(int *)(v4 + 20))) & 1) == 0
      || (static URL.== infix(_:_:)() & 1) == 0
      || (static URL.== infix(_:_:)() & 1) == 0)
    {
      sub_1000462F4(v45, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
LABEL_40:
      sub_1000462F4(v24, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      return 0;
    }
    char v46 = static Date.== infix(_:_:)();
    sub_1000462F4(v45, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t result = sub_1000462F4(v24, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v12 = v39;
    id v22 = v38;
    unint64_t v21 = v59;
    Swift::String v15 = v60;
    if ((v46 & 1) == 0) {
      return v37;
    }
  }
  unint64_t v32 = *(void *)(v48 + 8 * v33);
  if (v32)
  {
LABEL_15:
    int64_t v31 = v33;
LABEL_12:
    uint64_t v26 = (v32 - 1) & v32;
    unint64_t v27 = __clz(__rbit64(v32)) + (v31 << 6);
    int64_t v54 = v31;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v31 >= v49)
    {
      int64_t v54 = v47;
      goto LABEL_29;
    }
    unint64_t v32 = *(void *)(v48 + 8 * v31);
    ++v33;
    if (v32) {
      goto LABEL_12;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_100042D78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if ((sub_10004270C(*a1, *a2) & 1) == 0) {
    return 0;
  }
  if (v2 == v4 && v3 == v5) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100042E08()
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  strcpy((char *)v9, "Staged bundle ");
  HIBYTE(v9[1]) = -18;
  uint64_t v1 = type metadata accessor for DriverBinEntry();
  type metadata accessor for URL();
  sub_100047D08(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x70706120726F6620;
  v3._int64_t object = (void *)0xE900000000000020;
  String.append(_:)(v3);
  uint64_t v4 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  uint64_t v5 = *v4;
  uint64_t v6 = (void *)v4[1];
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v5;
  v7._int64_t object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9[0];
}

uint64_t sub_100042F3C()
{
  return sub_100045B8C();
}

uint64_t sub_100042F44(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_100046128();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v2)
  {
    sub_100012A10(a1, a2);
  }
  else
  {
    uint64_t v3 = v11;
    if (v12 == __PAIR128__(0x8000000100145E30, 0xD000000000000025)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100012A10(a1, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return v3;
    }
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v7._uint64_t countAndFlagsBits = 0xD000000000000028;
    v7._int64_t object = (void *)0x8000000100146D10;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0xD000000000000025;
    v8._int64_t object = (void *)0x8000000100145E30;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = 0x20646E756F66202CLL;
    v9._int64_t object = (void *)0xE800000000000000;
    String.append(_:)(v9);
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0xE000000000000000;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(void *)(v10 + 64) = 0;
    *(unsigned char *)(v10 + 72) = 50;
    swift_willThrow();
    sub_100012A10(a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return v3;
}

uint64_t sub_10004318C()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  sub_10004617C();
  uint64_t v0 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  return v0;
}

uint64_t sub_10004323C()
{
  uint64_t result = 0x65626D754E6E6962;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x726F636552707061;
      break;
    case 2:
      uint64_t result = 0x5255646567617473;
      break;
    case 3:
      uint64_t result = 0x7542646567617473;
      break;
    case 4:
      uint64_t result = 0x6D617473656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000432FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000478DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100043324(uint64_t a1)
{
  unint64_t v2 = sub_1000462A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100043360(uint64_t a1)
{
  unint64_t v2 = sub_1000462A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004339C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a6, a1, v12);
  uint64_t v13 = (int *)type metadata accessor for DriverBinEntry();
  sub_100046238(a2, a6 + v13[5], type metadata accessor for ApplicationRecord);
  uint64_t v14 = a6 + v13[6];
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32);
  v16(v14, a3, v15);
  v16(a6 + v13[7], a4, v15);
  uint64_t v17 = a6 + v13[8];
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32);

  return v19(v17, a5, v18);
}

uint64_t sub_100043510(void *a1)
{
  uint64_t v3 = sub_100004700(&qword_10017CF38);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_1000462A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  type metadata accessor for UUID();
  sub_100047D08(&qword_10017CF18, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for DriverBinEntry();
    char v12 = 1;
    type metadata accessor for ApplicationRecord(0);
    sub_100047D08(&qword_10017C2A8, (void (*)(uint64_t))type metadata accessor for ApplicationRecord);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v11 = 2;
    type metadata accessor for URL();
    sub_100047D08(&qword_10017C258, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v10 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v9 = 4;
    type metadata accessor for Date();
    sub_100047D08(&qword_10017C030, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100043840@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v31 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v30 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for URL();
  uint64_t v34 = *(void *)(v38 - 8);
  uint64_t v4 = __chkstk_darwin(v38);
  unint64_t v32 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  int64_t v33 = (char *)&v27 - v6;
  uint64_t v37 = type metadata accessor for ApplicationRecord(0);
  __chkstk_darwin(v37);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int64_t v39 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_100004700(&qword_10017CF40);
  uint64_t v36 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  char v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DriverBinEntry();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_1000462A0();
  uint64_t v40 = v12;
  uint64_t v16 = (uint64_t)v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return sub_10000478C((uint64_t)a1);
  }
  uint64_t v17 = v38;
  unint64_t v42 = a1;
  char v47 = 0;
  sub_100047D08(&qword_10017CF48, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v15, v39, v9);
  char v46 = 1;
  sub_100047D08(&qword_10017C5E0, (void (*)(uint64_t))type metadata accessor for ApplicationRecord);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v18 = v13;
  sub_100046238((uint64_t)v8, (uint64_t)&v15[*(int *)(v13 + 20)], type metadata accessor for ApplicationRecord);
  char v45 = 2;
  sub_100047D08(&qword_10017C270, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v19 = v33;
  int64_t v39 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v27 = v9;
  uint64_t v37 = v18;
  uint64_t v20 = v19;
  unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  v21(&v15[*(int *)(v18 + 24)], v20, v17);
  char v44 = 3;
  id v22 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v23 = v37;
  ((void (*)(char *, char *))v21)(&v15[*(int *)(v37 + 28)], v22);
  char v43 = 4;
  sub_100047D08(&qword_10017C048, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v24 = v30;
  uint64_t v25 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v40, v41);
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v15[*(int *)(v23 + 32)], v24, v25);
  sub_1000461D0((uint64_t)v15, v29, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
  sub_10000478C((uint64_t)v42);
  return sub_1000462F4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
}

uint64_t sub_100044008@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100043840(a1, a2);
}

uint64_t sub_100044020(void *a1)
{
  return sub_100043510(a1);
}

char *sub_100044038(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  if (a1 < 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  unint64_t v7 = a4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = _swiftEmptyArrayStorage;
  uint64_t v13 = swift_allocObject();
  uint64_t v6 = (char *)v13;
  *(void *)(v13 + 16) = 15;
  uint64_t v14 = HIBYTE(v7) & 0xF;
  if (!a1 || ((v7 & 0x2000000000000000) != 0 ? (uint64_t v15 = HIBYTE(v7) & 0xF) : (uint64_t v15 = a3 & 0xFFFFFFFFFFFFLL), !v15))
  {
    if ((v7 & 0x2000000000000000) == 0) {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v31 = 7;
    if (((v7 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0) {
      uint64_t v31 = 11;
    }
    sub_10002D188(v31 | (v14 << 16), v13, a2 & 1, v9);
    swift_bridgeObjectRelease();
    unint64_t v32 = *(char **)(v9 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return v32;
  }
  uint64_t v40 = a1;
  unint64_t v44 = 4 * v15;
  char v45 = (char *)_swiftEmptyArrayStorage;
  unint64_t v16 = 15;
  unint64_t v4 = 15;
  unint64_t v42 = v7;
  uint64_t v43 = v13;
  char v41 = a2;
  do
  {
    uint64_t v17 = String.subscript.getter();
    unint64_t v5 = v18;
    if ((v18 & 0x2000000000000000) != 0) {
      uint64_t v19 = HIBYTE(v18) & 0xF;
    }
    else {
      uint64_t v19 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (!v19)
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      uint64_t v20 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v18 & 0x2000000000000000) == 0 && (v17 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      uint64_t v20 = _decodeScalar(_:startingAt:)();
    }
    uint64_t v8 = v20;
    swift_bridgeObjectRelease();
    if ((v8 - 14) <= 0xFFFFFFFB && (v8 - 8232) >= 2 && v8 != 133)
    {
      unint64_t v16 = String.index(after:)();
      continue;
    }
    if (v4 >> 14 == v16 >> 14 && (a2 & 1) != 0)
    {
      unint64_t v16 = String.index(after:)();
      *((void *)v6 + 2) = v16;
      unint64_t v4 = v16;
      continue;
    }
    if (v16 >> 14 < v4 >> 14) {
      goto LABEL_49;
    }
    uint64_t v21 = v9;
    uint64_t v22 = String.subscript.getter();
    unint64_t v5 = v23;
    uint64_t v25 = v24;
    uint64_t v8 = v26;
    uint64_t v27 = v45;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v27 = sub_10002D298(0, *((void *)v45 + 2) + 1, 1, v45);
    }
    unint64_t v29 = *((void *)v27 + 2);
    unint64_t v28 = *((void *)v27 + 3);
    char v45 = v27;
    if (v29 >= v28 >> 1) {
      char v45 = sub_10002D298((char *)(v28 > 1), v29 + 1, 1, v27);
    }
    *((void *)v45 + 2) = v29 + 1;
    uint64_t v30 = &v45[32 * v29];
    *((void *)v30 + 4) = v22;
    *((void *)v30 + 5) = v5;
    *((void *)v30 + 6) = v25;
    *((void *)v30 + 7) = v8;
    uint64_t v9 = v21;
    *(void *)(v21 + 16) = v45;
    unint64_t v7 = v42;
    unint64_t v4 = String.index(after:)();
    uint64_t v6 = (char *)v43;
    *(void *)(v43 + 16) = v4;
    unint64_t v16 = v4;
    a2 = v41;
    if (*((void *)v45 + 2) == v40) {
      break;
    }
  }
  while (v44 != v16 >> 14);
  if (v44 == v4 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    unint64_t v32 = v45;
    goto LABEL_46;
  }
  if (v44 >= v4 >> 14)
  {
    unint64_t v4 = String.subscript.getter();
    unint64_t v5 = v33;
    unint64_t v7 = v34;
    uint64_t v8 = v35;
    swift_bridgeObjectRelease();
    uint64_t v6 = v45;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_52;
    }
    goto LABEL_43;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t v6 = sub_10002D298(0, *((void *)v6 + 2) + 1, 1, v6);
LABEL_43:
  unint64_t v37 = *((void *)v6 + 2);
  unint64_t v36 = *((void *)v6 + 3);
  unint64_t v32 = v6;
  if (v37 >= v36 >> 1) {
    unint64_t v32 = sub_10002D298((char *)(v36 > 1), v37 + 1, 1, v6);
  }
  *((void *)v32 + 2) = v37 + 1;
  uint64_t v38 = &v32[32 * v37];
  *((void *)v38 + 4) = v4;
  *((void *)v38 + 5) = v5;
  *((void *)v38 + 6) = v7;
  *((void *)v38 + 7) = v8;
  *(void *)(v9 + 16) = v32;
LABEL_46:
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  return v32;
}

uint64_t sub_1000444A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0
    || (sub_10001CBA8((void *)(a1 + *(int *)(a3 + 20)), (void *)(a2 + *(int *)(a3 + 20))) & 1) == 0
    || (static URL.== infix(_:_:)() & 1) == 0
    || (static URL.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }

  return static Date.== infix(_:_:)();
}

unint64_t sub_10004454C(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_100047D08(&qword_10017BF10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100044760(a1, v2);
}

uint64_t type metadata accessor for DriverBinEntry()
{
  uint64_t result = qword_1001831C0;
  if (!qword_1001831C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100044630()
{
  unint64_t result = qword_100182CB0;
  if (!qword_100182CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182CB0);
  }
  return result;
}

unint64_t sub_100044684()
{
  unint64_t result = qword_10017CF10;
  if (!qword_10017CF10)
  {
    sub_1000126B8(&qword_10017CF08);
    sub_100047D08(&qword_10017CF18, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_100047D08(&qword_10017CF20, (void (*)(uint64_t))type metadata accessor for DriverBinEntry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CF10);
  }
  return result;
}

unint64_t sub_100044760(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100047D08(&qword_10017CBF8, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

size_t sub_100044920(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100044940(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_100044940(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100004700(&qword_10017FB40);
  uint64_t v10 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for URL() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

uint64_t sub_100044B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10004454C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100045818();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for DriverBinEntry();
    uint64_t v20 = *(void *)(v13 - 8);
    sub_100046238(v12 + *(void *)(v20 + 72) * v6, a2, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    sub_1000451F8(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for DriverBinEntry();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_100044CE0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DriverBinEntry();
  uint64_t v49 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100004700(&qword_10017BF08);
  int v50 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  char v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  unint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v14 + 63) >> 6;
  char v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v53 = v7;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v48 = v11;
  uint64_t v21 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45) {
      break;
    }
    uint64_t v26 = v46;
    unint64_t v27 = v46[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v27 = v46[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v45) {
              goto LABEL_34;
            }
            unint64_t v27 = v46[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
    uint64_t v21 = v51;
LABEL_22:
    uint64_t v29 = v8;
    uint64_t v30 = *(void *)(v8 + 72);
    unint64_t v31 = *(void *)(v11 + 48) + v30 * v24;
    if (v50)
    {
      (*v52)(v21, v31, v53);
      uint64_t v32 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      sub_100046238(v32 + v33 * v24, v54, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    }
    else
    {
      (*v47)(v21, v31, v53);
      uint64_t v34 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      sub_1000461D0(v34 + v33 * v24, v54, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    }
    sub_100047D08(&qword_10017BF10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v35 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v21 = v51;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      uint64_t v21 = v51;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v52)((char *)(*(void *)(v13 + 48) + v30 * v22), (unint64_t)v21, v53);
    uint64_t result = sub_100046238(v54, *(void *)(v13 + 56) + v33 * v22, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    uint64_t v8 = v29;
  }
  swift_release();
  uint64_t v3 = v44;
  uint64_t v26 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
  if (v42 >= 64) {
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v26 = -1 << v42;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

unint64_t sub_1000451F8(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      unint64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      char v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_100047D08(&qword_10017BF10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for DriverBinEntry() - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    uint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  uint64_t *v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100045540(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10004454C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100045818();
      goto LABEL_7;
    }
    sub_100044CE0(v17, a3 & 1);
    unint64_t v24 = sub_10004454C(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100045728(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = v21 + *(void *)(*(void *)(type metadata accessor for DriverBinEntry() - 8) + 72) * v14;

  return sub_100047CA4(a1, v22);
}

uint64_t sub_100045728(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for DriverBinEntry();
  uint64_t result = sub_100046238(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

char *sub_100045818()
{
  uint64_t v1 = type metadata accessor for DriverBinEntry();
  uint64_t v40 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  unint64_t v39 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  unint64_t v37 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004700(&qword_10017BF08);
  uint64_t v32 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v42 = v6;
  if (!v7)
  {
    uint64_t result = (char *)swift_release();
    uint64_t v30 = v42;
    uint64_t v29 = v32;
LABEL_25:
    uint64_t *v29 = v30;
    return result;
  }
  uint64_t v8 = v6;
  uint64_t result = (char *)(v6 + 64);
  uint64_t v10 = (char *)(v5 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  uint64_t v33 = v5 + 64;
  if (v8 != v5 || result >= &v10[8 * v11])
  {
    uint64_t result = (char *)memmove(result, v10, 8 * v11);
    uint64_t v8 = v42;
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v5 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5;
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v5 + 64);
  uint64_t v36 = v3 + 16;
  int64_t v34 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v35 = v3 + 32;
  uint64_t v17 = v37;
  uint64_t v16 = v38;
  uint64_t v18 = (uint64_t)v39;
  for (uint64_t i = v42;
        ;
        uint64_t result = (char *)sub_100046238(v18, *(void *)(i + 56) + v25, (uint64_t (*)(void))type metadata accessor for DriverBinEntry))
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v12 << 6);
      uint64_t v22 = v41;
      goto LABEL_9;
    }
    int64_t v26 = v12 + 1;
    uint64_t v22 = v41;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v12;
    if (!v27)
    {
      int64_t v12 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v12);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v27 - 1) & v27;
    unint64_t v21 = __clz(__rbit64(v27)) + (v12 << 6);
LABEL_9:
    unint64_t v23 = *(void *)(v3 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v17, *(void *)(v22 + 48) + v23, v16);
    uint64_t v24 = *(void *)(v22 + 56);
    unint64_t v25 = *(void *)(v40 + 72) * v21;
    sub_1000461D0(v24 + v25, v18, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(i + 48) + v23, v17, v16);
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    uint64_t result = (char *)swift_release();
    uint64_t v29 = v32;
    uint64_t v30 = v42;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    int64_t v12 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v12 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v12);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100045B8C()
{
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._uint64_t countAndFlagsBits = 0x73656972746E6520;
  v0._int64_t object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v0);
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_100041034(v1);
  swift_bridgeObjectRelease();
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100014AB8();
  uint64_t v2 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = v2;
  v5._int64_t object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v7;
}

void *sub_100045C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_10000C884(0, v3, 0);
    uint64_t v6 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_10000C884(v8 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      uint64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = a2;
      uint64_t v10[5] = a3;
      v6 += 32;
      --v3;
    }
    while (v3);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100045DAC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73656972746E65 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100045EA0(void *a1)
{
  uint64_t v3 = sub_100004700(&qword_10017CFE0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000036B0(a1, v7);
  sub_100044630();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000478C((uint64_t)a1);
  }
  else
  {
    sub_100004700(&qword_10017CF08);
    v9[7] = 0;
    sub_100047B68();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v10;
    v9[6] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_10000478C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1000460C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017BEF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100046128()
{
  unint64_t result = qword_10017CF28;
  if (!qword_10017CF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CF28);
  }
  return result;
}

unint64_t sub_10004617C()
{
  unint64_t result = qword_10017CF30;
  if (!qword_10017CF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CF30);
  }
  return result;
}

uint64_t sub_1000461D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100046238(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000462A0()
{
  unint64_t result = qword_100182CB8[0];
  if (!qword_100182CB8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100182CB8);
  }
  return result;
}

uint64_t sub_1000462F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for DriverBinInfo()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s10driverkitd13DriverBinInfoVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DriverBinInfo(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for DriverBinInfo(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DriverBinInfo(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DriverBinInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DriverBinInfo()
{
  return &type metadata for DriverBinInfo;
}

char *sub_10004651C(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    unint64_t v9 = &a1[v8];
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    *(void *)unint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *((void *)v9 + 1) = v11;
    int64_t v12 = (int *)type metadata accessor for ApplicationRecord(0);
    uint64_t v13 = v12[5];
    uint64_t v31 = &v10[v13];
    uint64_t v32 = &v9[v13];
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v33(v32, v31, v14);
    *(void *)&v9[v12[6]] = *(void *)&v10[v12[6]];
    uint64_t v15 = v12[7];
    uint64_t v16 = (uint64_t *)&v9[v15];
    uint64_t v17 = (uint64_t *)&v10[v15];
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    swift_bridgeObjectRetain();
    sub_100012DE4(v18, v19);
    uint64_t *v16 = v18;
    v16[1] = v19;
    uint64_t v20 = v12[8];
    unint64_t v21 = (uint64_t *)&v9[v20];
    uint64_t v22 = (uint64_t *)&v10[v20];
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    sub_100012DE4(*v22, v24);
    *unint64_t v21 = v23;
    v21[1] = v24;
    v33(&a1[a3[6]], (char *)a2 + a3[6], v14);
    v33(&a1[a3[7]], (char *)a2 + a3[7], v14);
    uint64_t v25 = a3[8];
    int64_t v26 = &a1[v25];
    unint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
  }
  return a1;
}

uint64_t sub_100046748(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  swift_bridgeObjectRelease();
  char v6 = (int *)type metadata accessor for ApplicationRecord(0);
  uint64_t v7 = v5 + v6[5];
  uint64_t v8 = type metadata accessor for URL();
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease();
  sub_100012A10(*(void *)(v5 + v6[7]), *(void *)(v5 + v6[7] + 8));
  sub_100012A10(*(void *)(v5 + v6[8]), *(void *)(v5 + v6[8] + 8));
  v9(a1 + a2[6], v8);
  v9(a1 + a2[7], v8);
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = type metadata accessor for Date();
  int64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);

  return v12(v10, v11);
}

uint64_t sub_1000468C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  uint64_t v11 = (int *)type metadata accessor for ApplicationRecord(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (char *)v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  v16(v13, v14, v15);
  *(void *)((char *)v8 + v11[6]) = *(void *)(v9 + v11[6]);
  uint64_t v17 = v11[7];
  uint64_t v18 = (void *)((char *)v8 + v17);
  unint64_t v19 = (uint64_t *)(v9 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  swift_bridgeObjectRetain();
  sub_100012DE4(v20, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  uint64_t v22 = v11[8];
  uint64_t v23 = (void *)((char *)v8 + v22);
  unint64_t v24 = (uint64_t *)(v9 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_100012DE4(*v24, v26);
  uint64_t *v23 = v25;
  v23[1] = v26;
  v16((char *)(a1 + a3[6]), a2 + a3[6], v15);
  v16((char *)(a1 + a3[7]), a2 + a3[7], v15);
  uint64_t v27 = a3[8];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
  return a1;
}

uint64_t sub_100046AA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = *(void *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = (int *)type metadata accessor for ApplicationRecord(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24);
  v15(v12, v13, v14);
  *(void *)((char *)v8 + v10[6]) = *(void *)(v9 + v10[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = v10[7];
  uint64_t v17 = (void *)((char *)v8 + v16);
  uint64_t v18 = (uint64_t *)(v9 + v16);
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  sub_100012DE4(*v18, v20);
  uint64_t v21 = *v17;
  unint64_t v22 = v17[1];
  *uint64_t v17 = v19;
  v17[1] = v20;
  sub_100012A10(v21, v22);
  uint64_t v23 = v10[8];
  unint64_t v24 = (void *)((char *)v8 + v23);
  uint64_t v25 = (uint64_t *)(v9 + v23);
  uint64_t v26 = *v25;
  unint64_t v27 = v25[1];
  sub_100012DE4(*v25, v27);
  uint64_t v28 = *v24;
  unint64_t v29 = v24[1];
  *unint64_t v24 = v26;
  v24[1] = v27;
  sub_100012A10(v28, v29);
  v15((char *)(a1 + a3[6]), a2 + a3[6], v14);
  v15((char *)(a1 + a3[7]), a2 + a3[7], v14);
  uint64_t v30 = a3[8];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  uint64_t v33 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
  return a1;
}

uint64_t sub_100046CA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for ApplicationRecord(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  *(void *)(v8 + v10[6]) = *(void *)(v9 + v10[6]);
  *(_OWORD *)(v8 + v10[7]) = *(_OWORD *)(v9 + v10[7]);
  *(_OWORD *)(v8 + v10[8]) = *(_OWORD *)(v9 + v10[8]);
  v15(a1 + a3[6], a2 + a3[6], v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  return a1;
}

uint64_t sub_100046E50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = (int *)type metadata accessor for ApplicationRecord(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (char *)v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  *(void *)((char *)v8 + v11[6]) = *(void *)(v9 + v11[6]);
  swift_bridgeObjectRelease();
  uint64_t v17 = v11[7];
  uint64_t v18 = *(void *)((char *)v8 + v17);
  unint64_t v19 = *(void *)((char *)v8 + v17 + 8);
  *(_OWORD *)((char *)v8 + v17) = *(_OWORD *)(v9 + v17);
  sub_100012A10(v18, v19);
  uint64_t v20 = v11[8];
  uint64_t v21 = *(void *)((char *)v8 + v20);
  unint64_t v22 = *(void *)((char *)v8 + v20 + 8);
  *(_OWORD *)((char *)v8 + v20) = *(_OWORD *)(v9 + v20);
  sub_100012A10(v21, v22);
  v16((char *)(a1 + a3[6]), a2 + a3[6], v15);
  v16((char *)(a1 + a3[7]), a2 + a3[7], v15);
  uint64_t v23 = a3[8];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t sub_100047020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100047034);
}

uint64_t sub_100047034(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for ApplicationRecord(0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = type metadata accessor for URL();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[8];

  return v17(v19, a2, v18);
}

uint64_t sub_1000471CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000471E0);
}

uint64_t sub_1000471E0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for ApplicationRecord(0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[5];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t v16 = type metadata accessor for URL();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[6];
    goto LABEL_7;
  }
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[8];

  return v19(v21, a2, a2, v20);
}

uint64_t sub_100047384()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ApplicationRecord(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for URL();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for Date();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DriverBinEntry.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100047590);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DriverBinEntry.CodingKeys()
{
  return &type metadata for DriverBinEntry.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DriverBinInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100047694);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DriverBinInfo.CodingKeys()
{
  return &type metadata for DriverBinInfo.CodingKeys;
}

unint64_t sub_1000476D0()
{
  unint64_t result = qword_1001832D0[0];
  if (!qword_1001832D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001832D0);
  }
  return result;
}

unint64_t sub_100047728()
{
  unint64_t result = qword_1001834E0[0];
  if (!qword_1001834E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001834E0);
  }
  return result;
}

unint64_t sub_100047780()
{
  unint64_t result = qword_1001835F0;
  if (!qword_1001835F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001835F0);
  }
  return result;
}

unint64_t sub_1000477D8()
{
  unint64_t result = qword_1001835F8[0];
  if (!qword_1001835F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001835F8);
  }
  return result;
}

unint64_t sub_100047830()
{
  unint64_t result = qword_100183680;
  if (!qword_100183680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183680);
  }
  return result;
}

unint64_t sub_100047888()
{
  unint64_t result = qword_100183688[0];
  if (!qword_100183688[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100183688);
  }
  return result;
}

uint64_t sub_1000478DC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65626D754E6E6962 && a2 == 0xE900000000000072
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F636552707061 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5255646567617473 && a2 == 0xE90000000000004CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7542646567617473 && a2 == 0xEC000000656C646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100047B20()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100047B58()
{
  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_100047B68()
{
  unint64_t result = qword_10017CFE8;
  if (!qword_10017CFE8)
  {
    sub_1000126B8(&qword_10017CF08);
    sub_100047D08(&qword_10017CF48, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_100047D08(&qword_10017CFF0, (void (*)(uint64_t))type metadata accessor for DriverBinEntry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CFE8);
  }
  return result;
}

uint64_t sub_100047C44(uint64_t a1)
{
  uint64_t v2 = sub_100004700(&qword_10017CEF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100047CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DriverBinEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100047D08(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100047D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017BF00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100047DB8()
{
  return sub_100047E38();
}

uint64_t sub_100047DC4(uint64_t a1)
{
  return sub_100047E8C(a1, &OBJC_IVAR____TtC10driverkitd16DriverBinManager_applicationManager);
}

uint64_t (*sub_100047DD0())()
{
  return j__swift_endAccess;
}

uint64_t sub_100047E2C()
{
  return sub_100047E38();
}

uint64_t sub_100047E38()
{
  return swift_retain();
}

uint64_t sub_100047E80(uint64_t a1)
{
  return sub_100047E8C(a1, &OBJC_IVAR____TtC10driverkitd16DriverBinManager_activeDriversStateManager);
}

uint64_t sub_100047E8C(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_release();
}

uint64_t (*sub_100047EDC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100047F38()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100047F84(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers);
  swift_beginAccess();
  *int v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100047FD8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100048034(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = swift_allocObject();
  sub_10004808C(a1, a2, a3);
  return v6;
}

uint64_t sub_10004808C(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_applicationManager) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_activeDriversStateManager) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers) = _swiftEmptyArrayStorage;
  uint64_t v7 = OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock;
  *(void *)(v3 + v7) = [objc_allocWithZone((Class)NSRecursiveLock) init];
  uint64_t v8 = v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v8, 1, 1, v9);
  v11(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation, 1, 1, v9);
  uint64_t v12 = (void *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
  v12[1] = 0;
  v12[2] = 0;
  *uint64_t v12 = 0;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_stateManagerQueue) = a1;
  sub_10000372C(a3, v3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory, a2, v9);
  return v3;
}

uint64_t sub_100048204()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 168);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 160))(v3);
  if (result)
  {
    uint64_t v5 = type metadata accessor for ApplicationManager();
    sub_1000E94E0(v0, (uint64_t)&off_10016B4F0, v5, (uint64_t)&off_10016A7D8);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000482BC()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 192);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 184))(v3);
  if (result)
  {
    uint64_t active = type metadata accessor for ActiveDriversStateManager();
    sub_1000E94E0(v0, (uint64_t)&off_10016B4F0, active, (uint64_t)&off_10016AA30);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100048374@<X0>(uint64_t a1@<X8>)
{
  return sub_100048534(&OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation, a1);
}

uint64_t sub_100048398(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700((uint64_t *)&unk_10017FA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048400(uint64_t a1)
{
  return sub_100048740(a1, &OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation);
}

void (*sub_10004840C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = sub_100004700((uint64_t *)&unk_10017FA60);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = type metadata accessor for URL();
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  sub_100048374((uint64_t)v8);
  return sub_1000484FC;
}

void sub_1000484FC(uint64_t a1, char a2)
{
}

uint64_t sub_100048508@<X0>(uint64_t a1@<X8>)
{
  return sub_100048534(&OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation, a1);
}

uint64_t sub_100048534@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v15[-v9];
  uint64_t v11 = v2 + *a1;
  swift_beginAccess();
  sub_10001BA68(v11, (uint64_t)v10, (uint64_t *)&unk_10017FA60);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v13 + 32))(a2, v10, v12);
  }
  sub_1000130EC((uint64_t)v10, (uint64_t *)&unk_10017FA60);
  URL.appendingPathComponent(_:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16))(v8, a2, v12);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  swift_beginAccess();
  sub_100048398((uint64_t)v8, v11);
  return swift_endAccess();
}

uint64_t sub_100048734(uint64_t a1)
{
  return sub_100048740(a1, &OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation);
}

uint64_t sub_100048740(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v7, a1, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  uint64_t v10 = v2 + *a2;
  swift_beginAccess();
  sub_100048398((uint64_t)v7, v10);
  return swift_endAccess();
}

void (*sub_10004886C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = sub_100004700((uint64_t *)&unk_10017FA60);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = type metadata accessor for URL();
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  sub_100048508((uint64_t)v8);
  return sub_10004895C;
}

void sub_10004895C(uint64_t a1, char a2)
{
}

void sub_100048968(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void **)(*(void *)a1 + 88);
  if (a2)
  {
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v10 = v4[6];
    uint64_t v9 = (void *)v4[7];
    (*(void (**)(void, void, uint64_t))(v8 + 16))(v4[10], v4[11], v7);
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v9, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v9, 0, 1, v7);
    uint64_t v11 = v10 + *a3;
    swift_beginAccess();
    sub_100048398((uint64_t)v9, v11);
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v7);
  }
  else
  {
    uint64_t v12 = v4[8];
    uint64_t v13 = v4[9];
    uint64_t v14 = v4[6];
    uint64_t v9 = (void *)v4[7];
    (*(void (**)(void *, void, uint64_t))(v13 + 32))(v9, v4[11], v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    uint64_t v15 = v14 + *a3;
    swift_beginAccess();
    sub_100048398((uint64_t)v9, v15);
    swift_endAccess();
  }
  free(v5);
  free(v6);
  free(v9);

  free(v4);
}

uint64_t sub_100048B18(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DriverBinEntry();
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v45 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v44 = (uint64_t)&v35 - v6;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = _swiftEmptyArrayStorage;
  if (!v12) {
    return (uint64_t)v13;
  }
  uint64_t v37 = v1;
  uint64_t v49 = _swiftEmptyArrayStorage;
  uint64_t v48 = v9;
  sub_100044920(0, v12, 0);
  uint64_t result = sub_100010EA4(v48);
  uint64_t v16 = v8;
  uint64_t v17 = result;
  uint64_t v18 = v48;
  uint64_t v19 = 0;
  uint64_t v20 = v48 + 64;
  uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v41 = v16;
  uint64_t v38 = v15;
  uint64_t v39 = v16 + 32;
  char v21 = *(unsigned char *)(v48 + 32);
  uint64_t v36 = v48 + 88;
  uint64_t v42 = v11;
  uint64_t v43 = v7;
  while ((v17 & 0x8000000000000000) == 0 && v17 < 1 << v21)
  {
    unint64_t v23 = (unint64_t)v17 >> 6;
    if ((*(void *)(v20 + 8 * ((unint64_t)v17 >> 6)) & (1 << v17)) == 0) {
      goto LABEL_27;
    }
    if (*(_DWORD *)(v18 + 36) != v15) {
      goto LABEL_28;
    }
    uint64_t v24 = v44;
    sub_100012F8C(*(void *)(v18 + 56) + *(void *)(v46 + 72) * v17, v44, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v25 = v24;
    uint64_t v26 = v45;
    sub_100054894(v25, v45, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    (*v40)(v11, v26 + *(int *)(v47 + 24), v7);
    sub_1000548FC(v26, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v13 = v49;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100044920(0, v13[2] + 1, 1);
      uint64_t v13 = v49;
    }
    unint64_t v28 = v13[2];
    unint64_t v27 = v13[3];
    if (v28 >= v27 >> 1)
    {
      sub_100044920(v27 > 1, v28 + 1, 1);
      uint64_t v13 = v49;
    }
    v13[2] = v28 + 1;
    uint64_t v11 = v42;
    unint64_t v29 = (unint64_t)v13
        + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))
        + *(void *)(v41 + 72) * v28;
    uint64_t v7 = v43;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v41 + 32))(v29, v42, v43);
    uint64_t v49 = v13;
    uint64_t v18 = v48;
    char v21 = *(unsigned char *)(v48 + 32);
    unint64_t v22 = 1 << v21;
    if (v17 >= 1 << v21) {
      goto LABEL_29;
    }
    uint64_t v30 = *(void *)(v20 + 8 * v23);
    if ((v30 & (1 << v17)) == 0) {
      goto LABEL_30;
    }
    LODWORD(v15) = v38;
    if (*(_DWORD *)(v48 + 36) != v38) {
      goto LABEL_31;
    }
    unint64_t v31 = v30 & (-2 << (v17 & 0x3F));
    if (v31)
    {
      unint64_t v22 = __clz(__rbit64(v31)) | v17 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v32 = v23 + 1;
      unint64_t v33 = (v22 + 63) >> 6;
      if (v23 + 1 < v33)
      {
        unint64_t v34 = *(void *)(v20 + 8 * v32);
        if (!v34)
        {
          unint64_t v32 = v23 + 2;
          if (v23 + 2 >= v33) {
            goto LABEL_4;
          }
          unint64_t v34 = *(void *)(v20 + 8 * v32);
          if (!v34)
          {
            while (v33 - 3 != v23)
            {
              unint64_t v34 = *(void *)(v36 + 8 * v23++);
              if (v34)
              {
                unint64_t v32 = v23 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        unint64_t v22 = __clz(__rbit64(v34)) + (v32 << 6);
      }
    }
LABEL_4:
    ++v19;
    uint64_t v17 = v22;
    if (v19 == v12) {
      return (uint64_t)v13;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

char *sub_100048F48()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v80 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  int64_t v12 = (char *)v67 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v67 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v67 - v16;
  uint64_t v81 = OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock;
  [*(id *)((char *)v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock) lock];
  uint64_t v18 = (void *)((char *)v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
  unint64_t v19 = *(void *)((char *)v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
  if (v19)
  {
    uint64_t v20 = *(void **)((char *)v1 + v81);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    [v20 unlock];
    return (char *)v19;
  }
  uint64_t v72 = v15;
  uint64_t v73 = v4;
  uint64_t v68 = v18;
  uint64_t v79 = v2;
  uint64_t v71 = v12;
  uint64_t v21 = sub_1000EFE40();
  unint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  unint64_t v23 = v17;
  uint64_t v75 = v21;
  uint64_t v76 = v22;
  uint64_t v77 = v6 + 16;
  ((void (*)(char *))v22)(v17);
  swift_retain_n();
  uint64_t v24 = v6;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  unsigned int v70 = v9;
  uint64_t v78 = v24;
  if (v27)
  {
    unint64_t v28 = (uint8_t *)swift_slowAlloc();
    char v74 = (void (*)(char *))swift_slowAlloc();
    v83[0] = (uint64_t)v74;
    *(_DWORD *)unint64_t v28 = 136315138;
    v67[1] = v28 + 4;
    unint64_t v29 = v73;
    (*(void (**)(void))(*v1 + 280))();
    uint64_t v30 = URL.path.getter();
    uint64_t v69 = v5;
    unint64_t v32 = v31;
    uint64_t v33 = v80;
    (*(void (**)(char *, uint64_t))(v80 + 8))(v29, v79);
    uint64_t v82 = sub_100003F90(v30, v32, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Loading dextbin info, reading plist file from %s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v34 = v79;
    swift_slowDealloc();

    uint64_t v35 = v23;
    uint64_t v36 = v69;
    char v74 = *(void (**)(char *))(v78 + 8);
    v74(v35);
  }
  else
  {

    swift_release_n();
    uint64_t v36 = v5;
    char v74 = *(void (**)(char *))(v24 + 8);
    ((void (*)(char *, uint64_t))v74)(v17, v5);
    uint64_t v34 = v79;
    uint64_t v33 = v80;
    unint64_t v29 = v73;
  }
  uint64_t v37 = v1[5];
  uint64_t v38 = v1[6];
  sub_1000036B0(v1 + 2, v37);
  sub_1001297F4(v37, v38);
  uint64_t v39 = v84;
  uint64_t v40 = v85;
  sub_1000036B0(v83, v84);
  (*(void (**)(void))(*v1 + 280))();
  uint64_t v41 = URL.path.getter();
  uint64_t v43 = v42;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v29, v34);
  uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v40 + 16))(v41, v43, 0, v39, v40);
  unint64_t v46 = v45;
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)v83);
  if (v46 >> 60 != 15)
  {
    uint64_t v57 = v72;
    v76(v72, v75, v36);
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Loading dextbin info, decoding plist", v60, 2u);
      uint64_t v57 = v72;
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v74)(v57, v36);
    sub_100012DE4(v44, v46);
    unint64_t v19 = sub_100042F44(v44, v46);
    uint64_t v62 = v61;
    uint64_t v64 = v63;
    sub_10002404C(v44, v46);
    unint64_t v65 = v68;
    uint64_t v66 = *v68;
    *uint64_t v68 = v19;
    v65[1] = v62;
    v65[2] = v64;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10004E0A0(v66);
    goto LABEL_15;
  }
  int v47 = errno.getter();
  uint64_t result = strerror(v47);
  if (result)
  {
    uint64_t v49 = String.init(cString:)();
    unint64_t v51 = v50;
    uint64_t v52 = v71;
    v76(v71, v75, v36);
    swift_bridgeObjectRetain();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      v83[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v82 = sub_100003F90(v49, v51, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "contentsOfFile failed to read plist: %s", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v56 = v71;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v56 = v52;
    }
    ((void (*)(char *, uint64_t))v74)(v56, v36);
    unint64_t v19 = sub_100040970();
LABEL_15:
    [*(id *)((char *)v1 + v81) unlock];
    return (char *)v19;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004993C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a3;
  uint64_t v28 = a2;
  uint64_t v4 = type metadata accessor for ApplicationRecord(0);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v29 = (uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100004700((uint64_t *)&unk_10017EBF0);
  uint64_t v8 = v7 - 8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = (char *)&v27 + *(int *)(v8 + 56) - v12;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17(v13, a1, v15);
  sub_100012F8C(v28, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
  uint64_t v18 = *(int *)(v8 + 56);
  unint64_t v19 = v11;
  uint64_t v20 = (uint64_t)&v11[v18];
  v17(v19, (uint64_t)v13, v15);
  sub_100012F8C((uint64_t)v14, v20, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
  uint64_t v21 = type metadata accessor for DriverBinEntry();
  uint64_t v22 = v29;
  sub_100012F8C(v20 + *(int *)(v21 + 20), v29, type metadata accessor for ApplicationRecord);
  sub_1000548FC(v20, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
  unint64_t v23 = (uint64_t *)(v22 + *(int *)(v5 + 40));
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_100012DE4(*v23, v25);
  sub_1000548FC(v22, type metadata accessor for ApplicationRecord);
  LOBYTE(v22) = sub_100023B8C(v24, v25, *(void *)(v30 + *(int *)(v5 + 40)), *(void *)(v30 + *(int *)(v5 + 40) + 8));
  sub_100012A10(v24, v25);
  sub_1000130EC((uint64_t)v13, (uint64_t *)&unk_10017EBF0);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  return v22 & 1;
}

char *sub_100049BD4()
{
  uint64_t v1 = v0;
  uint64_t v442 = type metadata accessor for ApplicationRecord(0);
  uint64_t v426 = *(void *)(v442 - 8);
  uint64_t v2 = __chkstk_darwin(v442);
  uint64_t v423 = (uint64_t)&v387 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v422 = (uint64_t)&v387 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v421 = (uint64_t)&v387 - v7;
  __chkstk_darwin(v6);
  v443 = (void (*)(void))((char *)&v387 - v8);
  uint64_t v9 = sub_100004700(&qword_10017C280);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  v424 = (uint64_t *)((char *)&v387 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v439 = (uint64_t *)((char *)&v387 - v12);
  uint64_t v419 = type metadata accessor for DriverBinEntry();
  uint64_t v427 = *(void *)(v419 - 8);
  uint64_t v13 = __chkstk_darwin(v419);
  uint64_t v418 = (uint64_t)&v387 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v417 = (uint64_t)&v387 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v438 = (uint64_t)&v387 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v416 = (uint64_t)&v387 - v20;
  __chkstk_darwin(v19);
  unint64_t v444 = (unint64_t)&v387 - v21;
  uint64_t v410 = type metadata accessor for UUID();
  uint64_t v430 = *(void *)(v410 - 8);
  uint64_t v22 = __chkstk_darwin(v410);
  v415 = (char *)&v387 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  v414 = (char *)&v387 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v413 = (char *)&v387 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v412 = (char *)&v387 - v29;
  __chkstk_darwin(v28);
  v428 = (uint64_t *)((char *)&v387 - v30);
  uint64_t v31 = sub_100004700(&qword_10017BEF8);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  v441 = (char *)&v387 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v440 = (void (*)(char *, uint64_t))((char *)&v387 - v34);
  uint64_t v35 = type metadata accessor for Logger();
  *(void *)&long long v429 = *(void *)(v35 - 8);
  uint64_t v36 = __chkstk_darwin(v35);
  v401 = (char *)&v387 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __chkstk_darwin(v36);
  v445 = (void (**)(char *, uint64_t, uint64_t))((char *)&v387 - v39);
  uint64_t v40 = __chkstk_darwin(v38);
  v446 = (char *)&v387 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  v398 = (char *)&v387 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  v399 = (char *)&v387 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  v402 = (char *)&v387 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  v420 = (char *)&v387 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  v425 = (char *)&v387 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  v437 = (char *)&v387 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  v407 = (char *)&v387 - v55;
  __chkstk_darwin(v54);
  v408 = (char *)&v387 - v56;
  uint64_t active = type metadata accessor for ActiveDriverInfo();
  unint64_t v436 = *(void *)(active - 8);
  __chkstk_darwin(active - 8);
  uint64_t v59 = (uint64_t)&v387 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v433 = type metadata accessor for URL();
  uint64_t v432 = *(void *)(v433 - 8);
  uint64_t v60 = __chkstk_darwin(v433);
  v395 = (char *)&v387 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __chkstk_darwin(v60);
  uint64_t v64 = (char *)&v387 - v63;
  uint64_t v65 = __chkstk_darwin(v62);
  v397 = (char *)&v387 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v400 = (char *)&v387 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v448 = (uint64_t *)((char *)&v387 - v70);
  uint64_t v71 = __chkstk_darwin(v69);
  v447 = (char *)&v387 - v72;
  __chkstk_darwin(v71);
  unint64_t v74 = (unint64_t)&v387 - v73;
  v455 = (char *)_swiftEmptyArrayStorage;
  uint64_t v404 = OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock;
  [*(id *)((char *)v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock) lock];
  uint64_t v75 = v0 + 2;
  uint64_t v76 = v0[5];
  uint64_t v77 = v1[6];
  v403 = v75;
  sub_1000036B0(v75, v76);
  sub_1001297F4(v76, v77);
  uint64_t v78 = v462;
  sub_1000036B0(&__s1, v461);
  uint64_t v79 = *(void (**)(void))(v78 + 24);
  unint64_t v449 = (unint64_t)v1 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory;
  v79();
  v411 = v1;
  uint64_t v450 = v35;
  v396 = v64;
  swift_bridgeObjectRelease();
  uint64_t v80 = sub_10000478C((uint64_t)&__s1);
  v446 = 0;
  while (1)
  {
    uint64_t v84 = (*(uint64_t (**)(uint64_t))(*v1 + 360))(v80);
    uint64_t v405 = v85;
    unint64_t v87 = v86;
    unint64_t v452 = sub_100040970();
    unint64_t v453 = v88;
    unint64_t v454 = v89;
    uint64_t v409 = v84;
    uint64_t v90 = sub_10004E5F0();
    uint64_t v91 = (*(uint64_t (**)(uint64_t))(*v1 + 184))(v90);
    uint64_t v92 = v433;
    uint64_t v93 = v444;
    if (!v91)
    {
      __break(1u);
LABEL_275:
      __break(1u);
LABEL_276:
      __DataStorage._length.getter();
      __break(1u);
LABEL_277:
      __break(1u);
LABEL_278:
      __break(1u);
LABEL_279:
      __DataStorage._length.getter();
      __break(1u);
LABEL_280:
      __break(1u);
LABEL_281:
      __break(1u);
LABEL_282:
      __break(1u);
LABEL_283:
      __break(1u);
LABEL_284:
      __break(1u);
LABEL_285:
      __break(1u);
LABEL_286:
      __break(1u);
LABEL_287:
      __break(1u);
LABEL_288:
      __break(1u);
LABEL_289:
      __break(1u);
      goto LABEL_290;
    }
    v406 = v87;
    uint64_t v94 = (*(uint64_t (**)(uint64_t))(*(void *)v91 + 176))(v91);
    swift_release();
    int64_t v95 = *(void *)(v94 + 16);
    if (v95)
    {
      *(void *)&long long __s1 = _swiftEmptyArrayStorage;
      sub_100044920(0, v95, 0);
      uint64_t v96 = *(unsigned __int8 *)(v436 + 80);
      unint64_t v449 = v94;
      uint64_t v97 = v94 + ((v96 + 32) & ~v96);
      uint64_t v98 = *(void *)(v436 + 72);
      uint64_t v99 = (void (**)(unint64_t, uint64_t, uint64_t))(v432 + 16);
      do
      {
        sub_100012F8C(v97, v59, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
        (*v99)(v74, v59, v92);
        sub_1000548FC(v59, (uint64_t (*)(void))type metadata accessor for ActiveDriverInfo);
        uint64_t v100 = (void *)__s1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100044920(0, v100[2] + 1, 1);
          uint64_t v100 = (void *)__s1;
        }
        unint64_t v102 = v100[2];
        unint64_t v101 = v100[3];
        if (v102 >= v101 >> 1)
        {
          sub_100044920(v101 > 1, v102 + 1, 1);
          uint64_t v100 = (void *)__s1;
        }
        v100[2] = v102 + 1;
        unint64_t v103 = (unint64_t)v100
             + ((*(unsigned __int8 *)(v432 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v432 + 80))
             + *(void *)(v432 + 72) * v102;
        uint64_t v92 = v433;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v432 + 32))(v103, v74, v433);
        *(void *)&long long __s1 = v100;
        v97 += v98;
        --v95;
        uint64_t v93 = v444;
      }
      while (v95);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v100 = _swiftEmptyArrayStorage;
    }
    unint64_t v74 = sub_100012700((uint64_t)v100);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v104 = swift_bridgeObjectRetain();
    uint64_t v105 = v446;
    uint64_t v431 = sub_100053F34(v104, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v106 = sub_100040BCC();
    uint64_t v107 = sub_100012700(v106);
    swift_bridgeObjectRelease();
    uint64_t v108 = (uint64_t)v411;
    swift_retain();
    uint64_t v109 = sub_10005460C(v74, v108, v107);
    v394 = v105;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v110 = v428;
    uint64_t p_s1 = (uint64_t)v441;
    uint64_t v112 = (uint64_t)v440;
    uint64_t v113 = v429;
    if (*(void *)(v109 + 16))
    {
      uint64_t v114 = sub_1000EFE40();
      uint64_t v115 = v408;
      uint64_t v116 = v450;
      v393 = *(void (**)(char *, uint64_t, uint64_t))(v113 + 16);
      v393(v408, v114, v450);
      swift_retain();
      uint64_t v117 = Logger.logObject.getter();
      int v118 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v117, (os_log_type_t)v118))
      {
        int v388 = v118;
        os_log_t v390 = v117;
        unint64_t v391 = v114;
        v392 = (char *)(v113 + 16);
        unint64_t v74 = swift_slowAlloc();
        uint64_t v387 = swift_slowAlloc();
        uint64_t v456 = v387;
        v389 = (uint8_t *)v74;
        *(_DWORD *)unint64_t v74 = 136315138;
        int64_t v119 = *(void *)(v109 + 16);
        uint64_t v93 = (uint64_t)_swiftEmptyArrayStorage;
        if (v119)
        {
          v451 = _swiftEmptyArrayStorage;
          uint64_t p_s1 = (uint64_t)&v451;
          sub_10000C884(0, v119, 0);
          uint64_t v59 = sub_10004E46C(v109);
          int v121 = v120;
          int v123 = v122 & 1;
          v446 = (char *)(v109 + 56);
          unint64_t v436 = v432 + 16;
          v435 = (uint64_t (**)())(v432 + 32);
          v434 = (uint64_t (*)())(v432 + 8);
          v445 = (void (**)(char *, uint64_t, uint64_t))v109;
          uint64_t v110 = v448;
          do
          {
            if (v59 < 0 || v59 >= 1 << *(unsigned char *)(v109 + 32)) {
              goto LABEL_251;
            }
            if (((*(void *)&v446[((unint64_t)v59 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v59) & 1) == 0) {
              goto LABEL_252;
            }
            if (*(_DWORD *)(v109 + 36) != v121) {
              goto LABEL_253;
            }
            LODWORD(v449) = v123;
            uint64_t v124 = v432;
            uint64_t v125 = v447;
            uint64_t v126 = v433;
            (*(void (**)(char *, uint64_t, uint64_t))(v432 + 16))(v447, *(void *)(v109 + 48) + *(void *)(v432 + 72) * v59, v433);
            (*(void (**)(uint64_t *, char *, uint64_t))(v124 + 32))(v110, v125, v126);
            *(void *)&long long __s1 = 8224;
            *((void *)&__s1 + 1) = 0xE200000000000000;
            v127._uint64_t countAndFlagsBits = URL.path.getter();
            uint64_t p_s1 = (uint64_t)&__s1;
            String.append(_:)(v127);
            swift_bridgeObjectRelease();
            long long v128 = __s1;
            (*(void (**)(uint64_t *, uint64_t))(v124 + 8))(v110, v126);
            uint64_t v93 = (uint64_t)v451;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              uint64_t p_s1 = (uint64_t)&v451;
              sub_10000C884(0, *(void *)(v93 + 16) + 1, 1);
              uint64_t v93 = (uint64_t)v451;
            }
            unint64_t v74 = *(void *)(v93 + 16);
            unint64_t v129 = *(void *)(v93 + 24);
            if (v74 >= v129 >> 1)
            {
              uint64_t p_s1 = (uint64_t)&v451;
              sub_10000C884(v129 > 1, v74 + 1, 1);
              uint64_t v93 = (uint64_t)v451;
            }
            *(void *)(v93 + 16) = v74 + 1;
            *(_OWORD *)(v93 + 16 * v74 + 32) = v128;
            uint64_t v109 = (uint64_t)v445;
            int64_t v130 = sub_10004E50C(v59, v121, v449 & 1, (uint64_t)v445);
            uint64_t v59 = v130;
            int v121 = v131;
            int v123 = v132 & 1;
            --v119;
          }
          while (v119);
          sub_10005495C(v130, v131, v123);
          uint64_t v137 = v428;
          uint64_t v113 = v429;
        }
        else
        {
          uint64_t v137 = v110;
        }
        *(void *)&long long __s1 = v93;
        uint64_t v138 = v389;
        sub_100004700((uint64_t *)&unk_10017E5D0);
        sub_100014AB8();
        uint64_t v139 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v141 = v140;
        swift_bridgeObjectRelease();
        *(void *)&long long __s1 = sub_100003F90(v139, v141, &v456);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        os_log_t v142 = v390;
        _os_log_impl((void *)&_mh_execute_header, v390, (os_log_type_t)v388, "Found actively used drivers that are missing:\n%s", v138, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v116 = v450;
        unint64_t v449 = *(void *)(v113 + 8);
        ((void (*)(char *, uint64_t))v449)(v408, v450);
        uint64_t v135 = v409;
        uint64_t v93 = v444;
        uint64_t v136 = v407;
        uint64_t v114 = v391;
      }
      else
      {
        uint64_t v137 = v110;

        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v449 = *(void *)(v113 + 8);
        ((void (*)(char *, uint64_t))v449)(v115, v116);
        uint64_t v135 = v409;
        uint64_t v136 = v407;
      }
      v393(v136, v114, v116);
      swift_bridgeObjectRetain_n();
      uint64_t v143 = v406;
      swift_bridgeObjectRetain_n();
      unint64_t v74 = Logger.logObject.getter();
      os_log_type_t v144 = static os_log_type_t.error.getter();
      if (os_log_type_enabled((os_log_t)v74, v144))
      {
        uint64_t v145 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long __s1 = swift_slowAlloc();
        *(_DWORD *)uint64_t v145 = 136315138;
        uint64_t v146 = sub_100041DA0(v135, v405, v143);
        uint64_t v456 = sub_100003F90(v146, v147, (uint64_t *)&__s1);
        uint64_t v93 = v444;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v148 = v428;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v74, v144, "%s", v145, 0xCu);
        swift_arrayDestroy();
        uint64_t v110 = v148;
        uint64_t v149 = v450;
        swift_slowDealloc();
        swift_slowDealloc();

        ((void (*)(char *, uint64_t))v449)(v407, v149);
        uint64_t v134 = v410;
        uint64_t p_s1 = (uint64_t)v441;
        uint64_t v112 = (uint64_t)v440;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        ((void (*)(char *, uint64_t))v449)(v136, v116);
        uint64_t v134 = v410;
        uint64_t p_s1 = (uint64_t)v441;
        uint64_t v112 = (uint64_t)v440;
        uint64_t v110 = v137;
      }
    }
    else
    {
      swift_release();
      uint64_t v134 = v410;
    }
    v447 = 0;
    uint64_t v150 = 1 << *(unsigned char *)(v431 + 32);
    uint64_t v151 = -1;
    if (v150 < 64) {
      uint64_t v151 = ~(-1 << v150);
    }
    uint64_t v59 = v151 & *(void *)(v431 + 64);
    unint64_t v152 = (unint64_t)(v150 + 63) >> 6;
    v448 = (uint64_t *)(v430 + 16);
    unint64_t v436 = v430 + 32;
    uint64_t v153 = (void (**)(char *, uint64_t, uint64_t))(v113 + 16);
    v435 = (uint64_t (**)())(v430 + 8);
    v446 = (char *)(v113 + 8);
    unint64_t v391 = v152 - 1;
    uint64_t v410 = v152;
    v392 = (char *)(v152 - 5);
    v407 = (char *)(v431 + 64);
    v393 = (void (*)(char *, uint64_t, uint64_t))(v431 + 104);
    *(void *)&long long v133 = 136315394;
    long long v429 = v133;
    v408 = (char *)&type metadata for Any + 8;
    v445 = (void (**)(char *, uint64_t, uint64_t))(v113 + 16);
    if (v59) {
      break;
    }
LABEL_44:
    uint64_t v164 = v447 + 1;
    if (!__OFADD__(v447, 1))
    {
      if ((uint64_t)v164 >= v410)
      {
        uint64_t v166 = v447;
      }
      else
      {
        unint64_t v165 = *(void *)&v407[8 * (void)v164];
        if (v165)
        {
LABEL_47:
          unint64_t v154 = v110;
          uint64_t v155 = p_s1;
          uint64_t v157 = (v165 - 1) & v165;
          unint64_t v158 = __clz(__rbit64(v165)) + ((void)v164 << 6);
          v447 = v164;
          goto LABEL_43;
        }
        uint64_t v166 = v447 + 1;
        if ((uint64_t)(v447 + 2) < v410)
        {
          unint64_t v165 = *(void *)&v407[8 * (void)(v447 + 2)];
          if (v165)
          {
            uint64_t v164 = v447 + 2;
            goto LABEL_47;
          }
          uint64_t v166 = v447 + 2;
          if ((uint64_t)(v447 + 3) < v410)
          {
            unint64_t v165 = *(void *)&v407[8 * (void)(v447 + 3)];
            if (v165)
            {
              uint64_t v164 = v447 + 3;
              goto LABEL_47;
            }
            uint64_t v164 = v447 + 4;
            uint64_t v166 = v447 + 3;
            if ((uint64_t)(v447 + 4) < v410)
            {
              unint64_t v165 = *(void *)&v407[8 * (void)v164];
              if (v165) {
                goto LABEL_47;
              }
              while (v392 != v447)
              {
                unint64_t v165 = *((void *)v393 + (void)v447++);
                if (v165)
                {
                  uint64_t v164 = v447 + 4;
                  goto LABEL_47;
                }
              }
              uint64_t v166 = (char *)v391;
            }
          }
        }
      }
      uint64_t v167 = sub_100004700((uint64_t *)&unk_10017EBF0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 56))(p_s1, 1, 1, v167);
      uint64_t v157 = 0;
      v447 = v166;
      goto LABEL_50;
    }
    __break(1u);
LABEL_246:
    __break(1u);
LABEL_247:
    __break(1u);
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
LABEL_250:
    __break(1u);
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
    v386 = sub_10000C3BC(0, *(void *)(p_s1 + 16) + 1, 1, (char *)p_s1);
    uint64_t v1 = v411;
    unint64_t v82 = *((void *)v386 + 2);
    unint64_t v81 = *((void *)v386 + 3);
    if (v82 >= v81 >> 1) {
      v386 = sub_10000C3BC((char *)(v81 > 1), v82 + 1, 1, v386);
    }
    *((void *)v386 + 2) = v82 + 1;
    uint64_t v83 = &v386[16 * v82];
    *((void *)v83 + 4) = v110;
    *((void *)v83 + 5) = v93;
    uint64_t v80 = swift_errorRelease();
    v455 = v386;
  }
  while (1)
  {
    unint64_t v154 = v110;
    uint64_t v155 = p_s1;
    unint64_t v156 = __clz(__rbit64(v59));
    uint64_t v157 = (v59 - 1) & v59;
    unint64_t v158 = v156 | ((void)v447 << 6);
LABEL_43:
    uint64_t v159 = v431;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v430 + 16))(v155, *(void *)(v431 + 48) + *(void *)(v430 + 72) * v158, v134);
    uint64_t v160 = *(void *)(v159 + 56) + *(void *)(v427 + 72) * v158;
    uint64_t v161 = sub_100004700((uint64_t *)&unk_10017EBF0);
    sub_100012F8C(v160, v155 + *(int *)(v161 + 48), (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v162 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v161 - 8) + 56);
    uint64_t v163 = v161;
    uint64_t p_s1 = v155;
    v162(v155, 0, 1, v163);
    uint64_t v110 = v154;
LABEL_50:
    sub_100029900(p_s1, v112, &qword_10017BEF8);
    uint64_t v168 = sub_100004700((uint64_t *)&unk_10017EBF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v168 - 8) + 48))(v112, 1, v168) == 1) {
      break;
    }
    unint64_t v449 = v157;
    uint64_t v169 = v112 + *(int *)(v168 + 48);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))v436)(v110, v112, v134);
    sub_100054894(v169, v93, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    LOBYTE(v169) = static UUID.== infix(_:_:)();
    uint64_t v170 = sub_1000EFE40();
    uint64_t v171 = *v153;
    if (v169)
    {
      uint64_t v172 = v450;
      v171(v437, v170, v450);
      uint64_t v173 = v416;
      sub_100012F8C(v93, v416, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      uint64_t v174 = v438;
      sub_100012F8C(v173, v438, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      sub_1000548FC(v173, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      uint64_t v175 = (void (*)(char *, char *, uint64_t))*v448;
      uint64_t v176 = v412;
      ((void (*)(char *, uint64_t *, uint64_t))*v448)(v412, v110, v134);
      uint64_t v177 = v413;
      v175(v413, v176, v134);
      v434 = *v435;
      ((void (*)(char *, uint64_t))v434)(v176, v134);
      unint64_t v74 = Logger.logObject.getter();
      os_log_type_t v178 = static os_log_type_t.default.getter();
      if (os_log_type_enabled((os_log_t)v74, v178))
      {
        uint64_t v179 = swift_slowAlloc();
        *(void *)&long long __s1 = swift_slowAlloc();
        *(_DWORD *)uint64_t v179 = v429;
        sub_100054B4C(&qword_10017BEB8, (void (*)(uint64_t))type metadata accessor for DriverBinEntry);
        uint64_t v180 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v179 + 4) = sub_100003F90(v180, v181, (uint64_t *)&__s1);
        swift_bridgeObjectRelease();
        sub_1000548FC(v438, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        *(_WORD *)(v179 + 12) = 2080;
        sub_100054B4C(&qword_10017CEF8, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v182 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v179 + 14) = sub_100003F90(v182, v183, (uint64_t *)&__s1);
        swift_bridgeObjectRelease();
        int v184 = v434;
        ((void (*)(char *, uint64_t))v434)(v177, v134);
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v74, v178, "Copying old active bin entry %s with bin number %s", (uint8_t *)v179, 0x16u);
        swift_arrayDestroy();
        uint64_t v185 = v428;
        swift_slowDealloc();
        uint64_t v110 = v185;
        uint64_t v186 = v450;
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))v446)(v437, v186);
      }
      else
      {
        sub_1000548FC(v174, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        int v184 = v434;
        ((void (*)(char *, uint64_t))v434)(v177, v134);

        (*(void (**)(char *, uint64_t))v446)(v437, v172);
      }
      uint64_t v93 = v444;
      sub_1000415F0(v444);
      sub_1000548FC(v93, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      ((void (*)(uint64_t *, uint64_t))v184)(v110, v134);
      uint64_t v112 = (uint64_t)v440;
      uint64_t v153 = v445;
      uint64_t v59 = v449;
      uint64_t p_s1 = (uint64_t)v441;
      if (!v449) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v187 = v110;
      uint64_t v188 = v425;
      uint64_t v189 = v450;
      v171(v425, v170, v450);
      uint64_t v190 = v417;
      sub_100012F8C(v93, v417, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      uint64_t v191 = v418;
      sub_100012F8C(v190, v418, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      sub_1000548FC(v190, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      uint64_t v192 = (void (*)(char *, char *, uint64_t))*v448;
      uint64_t v193 = v414;
      ((void (*)(char *, uint64_t *, uint64_t))*v448)(v414, v187, v134);
      uint64_t v194 = v415;
      v192(v415, v193, v134);
      int v195 = *v435;
      ((void (*)(char *, uint64_t))*v435)(v193, v134);
      unint64_t v74 = Logger.logObject.getter();
      uint64_t v196 = v93;
      os_log_type_t v197 = static os_log_type_t.error.getter();
      if (os_log_type_enabled((os_log_t)v74, v197))
      {
        uint64_t v198 = swift_slowAlloc();
        *(void *)&long long __s1 = swift_slowAlloc();
        *(_DWORD *)uint64_t v198 = v429;
        sub_100054B4C(&qword_10017BEB8, (void (*)(uint64_t))type metadata accessor for DriverBinEntry);
        uint64_t v199 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v198 + 4) = sub_100003F90(v199, v200, (uint64_t *)&__s1);
        swift_bridgeObjectRelease();
        v434 = type metadata accessor for DriverBinEntry;
        sub_1000548FC(v191, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        *(_WORD *)(v198 + 12) = 2080;
        sub_100054B4C(&qword_10017CEF8, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v201 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v198 + 14) = sub_100003F90(v201, v202, (uint64_t *)&__s1);
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v195)(v194, v134);
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v74, v197, "Internal error: Bin entry %s was inserted with incorrect bin number %s", (uint8_t *)v198, 0x16u);
        swift_arrayDestroy();
        uint64_t v153 = v445;
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))v446)(v425, v450);
        uint64_t v93 = v444;
        sub_1000548FC(v444, (uint64_t (*)(void))v434);
        uint64_t v110 = v428;
        ((void (*)(uint64_t *, uint64_t))v195)(v428, v134);
        uint64_t p_s1 = (uint64_t)v441;
        uint64_t v112 = (uint64_t)v440;
      }
      else
      {

        ((void (*)(char *, uint64_t))v195)(v194, v134);
        unint64_t v74 = (unint64_t)type metadata accessor for DriverBinEntry;
        sub_1000548FC(v191, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        (*(void (**)(char *, uint64_t))v446)(v188, v189);
        sub_1000548FC(v196, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        uint64_t v110 = v428;
        ((void (*)(uint64_t *, uint64_t))v195)(v428, v134);
        uint64_t v93 = v196;
        uint64_t p_s1 = (uint64_t)v441;
        uint64_t v112 = (uint64_t)v440;
        uint64_t v153 = v445;
      }
      uint64_t v59 = v449;
      if (!v449) {
        goto LABEL_44;
      }
    }
  }
  uint64_t v59 = (uint64_t)v153;
  uint64_t v203 = swift_release();
  uint64_t v204 = (*(uint64_t (**)(uint64_t))(*v411 + 160))(v203);
  if (!v204) {
    goto LABEL_275;
  }
  uint64_t p_s1 = v204;
  unint64_t v74 = (*(uint64_t (**)(uint64_t))(*(void *)v204 + 216))(v204);
  swift_release();
  uint64_t v205 = 0;
  uint64_t v206 = *(void *)(v74 + 64);
  uint64_t v438 = v74 + 64;
  uint64_t v207 = 1 << *(unsigned char *)(v74 + 32);
  uint64_t v208 = -1;
  if (v207 < 64) {
    uint64_t v208 = ~(-1 << v207);
  }
  unint64_t v209 = v208 & v206;
  unint64_t v210 = (unint64_t)(v207 + 63) >> 6;
  v434 = (uint64_t (*)())(v210 - 1);
  v441 = (char *)v210;
  v435 = (uint64_t (**)())(v210 - 5);
  unint64_t v444 = v74;
  unint64_t v436 = v74 + 104;
  v440 = (void (*)(char *, uint64_t))((char *)&type metadata for Any + 8);
  uint64_t v211 = (uint64_t)v443;
  uint64_t v110 = v424;
  uint64_t v212 = v439;
  while (1)
  {
    if (v209)
    {
      v448 = (uint64_t *)((v209 - 1) & v209);
      unint64_t v213 = __clz(__rbit64(v209)) | (v205 << 6);
LABEL_80:
      uint64_t v214 = *(void *)(v444 + 56);
      uint64_t v215 = (uint64_t *)(*(void *)(v444 + 48) + 16 * v213);
      uint64_t v216 = *v215;
      unint64_t v217 = v215[1];
      uint64_t *v110 = *v215;
      v110[1] = v217;
      uint64_t v218 = v214 + *(void *)(v426 + 72) * v213;
      uint64_t v219 = sub_100004700(&qword_10017C288);
      sub_100012F8C(v218, (uint64_t)v110 + *(int *)(v219 + 48), type metadata accessor for ApplicationRecord);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v219 - 8) + 56))(v110, 0, 1, v219);
      sub_100012DE4(v216, v217);
      goto LABEL_87;
    }
    uint64_t v220 = v205 + 1;
    if (__OFADD__(v205, 1)) {
      goto LABEL_246;
    }
    if (v220 >= (uint64_t)v441)
    {
      long long v222 = (uint64_t (*)())v205;
    }
    else
    {
      unint64_t v221 = *(void *)(v438 + 8 * v220);
      if (v221) {
        goto LABEL_84;
      }
      long long v222 = (uint64_t (*)())(v205 + 1);
      if (v205 + 2 < (uint64_t)v441)
      {
        unint64_t v221 = *(void *)(v438 + 8 * (v205 + 2));
        if (v221)
        {
          uint64_t v220 = v205 + 2;
LABEL_84:
          v448 = (uint64_t *)((v221 - 1) & v221);
          unint64_t v213 = __clz(__rbit64(v221)) + (v220 << 6);
          uint64_t v205 = v220;
          goto LABEL_80;
        }
        long long v222 = (uint64_t (*)())(v205 + 2);
        if (v205 + 3 < (uint64_t)v441)
        {
          unint64_t v221 = *(void *)(v438 + 8 * (v205 + 3));
          if (v221)
          {
            uint64_t v220 = v205 + 3;
            goto LABEL_84;
          }
          uint64_t v220 = v205 + 4;
          long long v222 = (uint64_t (*)())(v205 + 3);
          if (v205 + 4 < (uint64_t)v441)
          {
            unint64_t v221 = *(void *)(v438 + 8 * v220);
            if (v221) {
              goto LABEL_84;
            }
            while (v435 != (uint64_t (**)())v205)
            {
              unint64_t v221 = *(void *)(v436 + 8 * v205++);
              if (v221)
              {
                uint64_t v220 = v205 + 4;
                goto LABEL_84;
              }
            }
            long long v222 = v434;
          }
        }
      }
    }
    uint64_t v223 = sub_100004700(&qword_10017C288);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v223 - 8) + 56))(v110, 1, 1, v223);
    v448 = 0;
    uint64_t v205 = (uint64_t)v222;
LABEL_87:
    sub_100029900((uint64_t)v110, (uint64_t)v212, &qword_10017C280);
    uint64_t v224 = sub_100004700(&qword_10017C288);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v224 - 8) + 48))(v212, 1, v224) == 1) {
      break;
    }
    v447 = (char *)v205;
    uint64_t v225 = *v212;
    uint64_t v93 = v212[1];
    sub_100054894((uint64_t)v212 + *(int *)(v224 + 48), v211, type metadata accessor for ApplicationRecord);
    long long v226 = (uint64_t *)(v211 + *(int *)(v442 + 32));
    uint64_t v227 = *v226;
    unint64_t v228 = v226[1];
    unint64_t v74 = v228 >> 62;
    uint64_t p_s1 = 0;
    switch(v228 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v227), v227)) {
          goto LABEL_247;
        }
        uint64_t p_s1 = HIDWORD(v227) - (int)v227;
LABEL_93:
        sub_100012DE4(v227, v228);
        break;
      case 2uLL:
        uint64_t v230 = *(void *)(v227 + 16);
        uint64_t v229 = *(void *)(v227 + 24);
        uint64_t p_s1 = v229 - v230;
        if (!__OFSUB__(v229, v230)) {
          goto LABEL_93;
        }
        goto LABEL_248;
      case 3uLL:
        break;
      default:
        uint64_t p_s1 = BYTE6(v228);
        break;
    }
    unint64_t v231 = (unint64_t)v93 >> 62;
    unint64_t v449 = v93;
    switch((unint64_t)v93 >> 62)
    {
      case 1uLL:
        LODWORD(v232) = HIDWORD(v225) - v225;
        if (__OFSUB__(HIDWORD(v225), v225)) {
          goto LABEL_250;
        }
        uint64_t v232 = (int)v232;
LABEL_103:
        if (p_s1 == v232)
        {
          if (p_s1 >= 1)
          {
            switch((int)v74)
            {
              case 1:
                uint64_t v93 = (int)v227;
                if ((int)v227 > v227 >> 32) {
                  goto LABEL_254;
                }
                uint64_t p_s1 = v228 & 0x3FFFFFFFFFFFFFFFLL;
                unint64_t v74 = __DataStorage._bytes.getter();
                if (!v74) {
                  goto LABEL_125;
                }
                uint64_t v256 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v227, v256)) {
                  goto LABEL_256;
                }
                v74 += (int)v227 - v256;
LABEL_125:
                __DataStorage._length.getter();
                if (!v231)
                {
                  *(void *)&long long __s1 = v225;
                  DWORD2(__s1) = v449;
                  WORD6(__s1) = WORD2(v449);
                  if (!v74) {
                    goto LABEL_287;
                  }
                  size_t v268 = BYTE6(v449);
                  uint64_t v270 = (uint64_t *)&__s1;
                  uint64_t v269 = (long long *)v74;
                  goto LABEL_195;
                }
                if (v231 == 1)
                {
                  uint64_t v257 = (char *)((v225 >> 32) - (int)v225);
                  if (v225 >> 32 < (int)v225) {
                    goto LABEL_265;
                  }
                  uint64_t p_s1 = v449 & 0x3FFFFFFFFFFFFFFFLL;
                  swift_retain();
                  uint64_t v93 = __DataStorage._bytes.getter();
                  if (v93)
                  {
                    uint64_t v258 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v225, v258)) {
                      goto LABEL_272;
                    }
                    v93 += (int)v225 - v258;
                  }
                  uint64_t v259 = __DataStorage._length.getter();
                  if (v259 >= (uint64_t)v257) {
                    size_t v260 = (v225 >> 32) - (int)v225;
                  }
                  else {
                    size_t v260 = v259;
                  }
                  if (!v74) {
                    goto LABEL_277;
                  }
                  uint64_t v211 = (uint64_t)v443;
                  if (!v93) {
                    goto LABEL_278;
                  }
                  unint64_t v74 = memcmp((const void *)v74, (const void *)v93, v260);
                  sub_100012A10(v225, v449);
                }
                else
                {
                  uint64_t p_s1 = v449 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v257 = *(char **)(v225 + 16);
                  uint64_t v286 = *(void *)(v225 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v93 = __DataStorage._bytes.getter();
                  if (v93)
                  {
                    uint64_t v287 = __DataStorage._offset.getter();
                    if (__OFSUB__(v257, v287)) {
                      goto LABEL_271;
                    }
                    v93 += (uint64_t)&v257[-v287];
                  }
                  BOOL v235 = __OFSUB__(v286, v257);
                  int64_t v288 = v286 - (void)v257;
                  if (v235) {
                    goto LABEL_266;
                  }
                  uint64_t v289 = __DataStorage._length.getter();
                  if (v289 >= v288) {
                    size_t v290 = v288;
                  }
                  else {
                    size_t v290 = v289;
                  }
                  if (!v74) {
                    goto LABEL_288;
                  }
                  uint64_t v211 = (uint64_t)v443;
                  if (!v93) {
                    goto LABEL_289;
                  }
                  unint64_t v74 = memcmp((const void *)v74, (const void *)v93, v290);
                  swift_release();
                  swift_release();
                }
                sub_100012A10(v227, v228);
                if (!v74) {
                  goto LABEL_117;
                }
                goto LABEL_114;
              case 2:
                unint64_t v74 = v228 & 0x3FFFFFFFFFFFFFFFLL;
                uint64_t v261 = *(void *)(v227 + 16);
                swift_retain();
                swift_retain();
                uint64_t v262 = __DataStorage._bytes.getter();
                if (v262)
                {
                  uint64_t v93 = v262;
                  uint64_t p_s1 = v228 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v263 = __DataStorage._offset.getter();
                  if (__OFSUB__(v261, v263)) {
                    goto LABEL_255;
                  }
                  v437 = (char *)(v93 + v261 - v263);
                }
                else
                {
                  v437 = 0;
                }
                uint64_t v93 = v449;
                uint64_t p_s1 = v228 & 0x3FFFFFFFFFFFFFFFLL;
                __DataStorage._length.getter();
                if (!v231)
                {
                  *(void *)&long long __s1 = v225;
                  WORD4(__s1) = v93;
                  BYTE10(__s1) = BYTE2(v93);
                  BYTE11(__s1) = BYTE3(v93);
                  BYTE12(__s1) = BYTE4(v93);
                  BYTE13(__s1) = BYTE5(v93);
                  if (!v437) {
                    goto LABEL_284;
                  }
                  int v274 = memcmp(v437, &__s1, BYTE6(v93));
                  goto LABEL_180;
                }
                if (v231 == 1)
                {
                  uint64_t v93 = (int)v225;
                  if (v225 >> 32 < (int)v225) {
                    goto LABEL_259;
                  }
                  uint64_t p_s1 = v449 & 0x3FFFFFFFFFFFFFFFLL;
                  swift_retain();
                  uint64_t v257 = (char *)__DataStorage._bytes.getter();
                  if (v257)
                  {
                    uint64_t v271 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v225, v271)) {
                      goto LABEL_270;
                    }
                    v257 += (int)v225 - v271;
                  }
                  uint64_t v93 = v449;
                  uint64_t v272 = __DataStorage._length.getter();
                  if (v272 >= (v225 >> 32) - (int)v225) {
                    size_t v273 = (v225 >> 32) - (int)v225;
                  }
                  else {
                    size_t v273 = v272;
                  }
                  if (!v437) {
                    goto LABEL_280;
                  }
                  if (!v257) {
                    goto LABEL_281;
                  }
                  int v274 = memcmp(v437, v257, v273);
                  sub_100012A10(v225, v93);
LABEL_180:
                  swift_release();
                  swift_release();
                  sub_100012A10(v227, v228);
                  uint64_t v211 = (uint64_t)v443;
                  if (v274) {
                    goto LABEL_114;
                  }
                  goto LABEL_117;
                }
                uint64_t p_s1 = v93 & 0x3FFFFFFFFFFFFFFFLL;
                uint64_t v282 = *(void *)(v225 + 16);
                uint64_t v281 = *(void *)(v225 + 24);
                swift_retain();
                swift_retain();
                uint64_t v257 = (char *)__DataStorage._bytes.getter();
                if (v257)
                {
                  uint64_t v283 = __DataStorage._offset.getter();
                  if (__OFSUB__(v282, v283)) {
                    goto LABEL_269;
                  }
                  v257 += v282 - v283;
                }
                BOOL v235 = __OFSUB__(v281, v282);
                uint64_t v93 = v281 - v282;
                if (v235) {
                  goto LABEL_264;
                }
                uint64_t v284 = __DataStorage._length.getter();
                if (v284 >= v93) {
                  size_t v285 = v93;
                }
                else {
                  size_t v285 = v284;
                }
                if (!v437) {
                  goto LABEL_285;
                }
                if (!v257) {
                  goto LABEL_286;
                }
                uint64_t v93 = memcmp(v437, v257, v285);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                sub_100012A10(v227, v228);
                uint64_t v211 = (uint64_t)v443;
                if (v93) {
                  goto LABEL_114;
                }
                goto LABEL_117;
              case 3:
                *(void *)((char *)&__s1 + 6) = 0;
                *(void *)&long long __s1 = 0;
                if (!v231) {
                  goto LABEL_149;
                }
                if (v231 == 1)
                {
                  uint64_t v93 = (v225 >> 32) - (int)v225;
                  if (v225 >> 32 < (int)v225) {
                    goto LABEL_258;
                  }
                  uint64_t p_s1 = v449 & 0x3FFFFFFFFFFFFFFFLL;
                  sub_100012DE4(v225, v449);
                  uint64_t v264 = __DataStorage._bytes.getter();
                  if (!v264) {
                    goto LABEL_279;
                  }
                  unint64_t v74 = v264;
                  uint64_t v265 = __DataStorage._offset.getter();
                  uint64_t v238 = (int)v225 - v265;
                  if (__OFSUB__((int)v225, v265)) {
                    goto LABEL_263;
                  }
                  goto LABEL_145;
                }
                uint64_t p_s1 = v93 & 0x3FFFFFFFFFFFFFFFLL;
                uint64_t v278 = *(void *)(v225 + 16);
                uint64_t v257 = *(char **)(v225 + 24);
                swift_retain();
                swift_retain();
                unint64_t v74 = __DataStorage._bytes.getter();
                if (v74)
                {
                  uint64_t v279 = __DataStorage._offset.getter();
                  if (__OFSUB__(v278, v279)) {
                    goto LABEL_268;
                  }
                  v74 += v278 - v279;
                }
                BOOL v235 = __OFSUB__(v257, v278);
                uint64_t v93 = (uint64_t)&v257[-v278];
                if (v235) {
                  goto LABEL_261;
                }
                uint64_t v277 = __DataStorage._length.getter();
                if (!v74) {
                  goto LABEL_283;
                }
                goto LABEL_174;
              default:
                *(void *)&long long __s1 = v227;
                WORD4(__s1) = v228;
                BYTE10(__s1) = BYTE2(v228);
                BYTE11(__s1) = BYTE3(v228);
                BYTE12(__s1) = BYTE4(v228);
                BYTE13(__s1) = BYTE5(v228);
                if (v231)
                {
                  if (v231 == 1)
                  {
                    uint64_t v93 = (v225 >> 32) - (int)v225;
                    if (v225 >> 32 < (int)v225) {
                      goto LABEL_257;
                    }
                    uint64_t p_s1 = v449 & 0x3FFFFFFFFFFFFFFFLL;
                    sub_100012DE4(v225, v449);
                    uint64_t v236 = __DataStorage._bytes.getter();
                    if (!v236) {
                      goto LABEL_276;
                    }
                    unint64_t v74 = v236;
                    uint64_t v237 = __DataStorage._offset.getter();
                    uint64_t v238 = (int)v225 - v237;
                    if (__OFSUB__((int)v225, v237)) {
                      goto LABEL_262;
                    }
LABEL_145:
                    uint64_t v266 = __DataStorage._length.getter();
                    if (v266 >= v93) {
                      size_t v267 = v93;
                    }
                    else {
                      size_t v267 = v266;
                    }
                    unint64_t v74 = memcmp(&__s1, (const void *)(v74 + v238), v267);
                    sub_100012A10(v225, v449);
                  }
                  else
                  {
                    uint64_t p_s1 = v93 & 0x3FFFFFFFFFFFFFFFLL;
                    uint64_t v275 = *(void *)(v225 + 16);
                    uint64_t v257 = *(char **)(v225 + 24);
                    swift_retain();
                    swift_retain();
                    unint64_t v74 = __DataStorage._bytes.getter();
                    if (v74)
                    {
                      uint64_t v276 = __DataStorage._offset.getter();
                      if (__OFSUB__(v275, v276))
                      {
                        __break(1u);
LABEL_268:
                        __break(1u);
LABEL_269:
                        __break(1u);
LABEL_270:
                        __break(1u);
LABEL_271:
                        __break(1u);
LABEL_272:
                        __break(1u);
LABEL_273:
                        uint64_t p_s1 = (uint64_t)sub_10000C3BC(0, *(void *)(p_s1 + 16) + 1, 1, (char *)p_s1);
LABEL_223:
                        unint64_t v296 = *(void *)(p_s1 + 16);
                        unint64_t v295 = *(void *)(p_s1 + 24);
                        if (v296 >= v295 >> 1) {
                          uint64_t p_s1 = (uint64_t)sub_10000C3BC((char *)(v295 > 1), v296 + 1, 1, (char *)p_s1);
                        }
                        *(void *)(p_s1 + 16) = v296 + 1;
                        uint64_t v297 = p_s1 + 16 * v296;
                        *(void *)(v297 + 32) = 0xD000000000000012;
                        *(void *)(v297 + 40) = 0x8000000100146D90;
                        v455 = (char *)p_s1;
                        goto LABEL_226;
                      }
                      v74 += v275 - v276;
                    }
                    BOOL v235 = __OFSUB__(v257, v275);
                    uint64_t v93 = (uint64_t)&v257[-v275];
                    if (v235) {
                      goto LABEL_260;
                    }
                    uint64_t v277 = __DataStorage._length.getter();
                    if (!v74) {
                      goto LABEL_282;
                    }
LABEL_174:
                    if (v277 >= v93) {
                      size_t v280 = v93;
                    }
                    else {
                      size_t v280 = v277;
                    }
                    unint64_t v74 = memcmp(&__s1, (const void *)v74, v280);
                    swift_release();
                    swift_release();
                  }
                }
                else
                {
LABEL_149:
                  uint64_t v456 = v225;
                  LOWORD(v457) = v93;
                  BYTE2(v457) = BYTE2(v93);
                  BYTE3(v457) = BYTE3(v93);
                  BYTE4(v457) = BYTE4(v93);
                  size_t v268 = BYTE6(v93);
                  BYTE5(v457) = BYTE5(v93);
                  uint64_t v269 = &__s1;
                  uint64_t v270 = &v456;
LABEL_195:
                  unint64_t v74 = memcmp(v269, v270, v268);
                }
                sub_100012A10(v227, v228);
                uint64_t v211 = (uint64_t)v443;
                if (!v74) {
                  goto LABEL_117;
                }
                goto LABEL_114;
            }
          }
LABEL_116:
          sub_100012A10(v227, v228);
          uint64_t v211 = (uint64_t)v443;
LABEL_117:
          uint64_t p_s1 = (uint64_t)v411;
          sub_100050390(v211, v409, (uint64_t *)&v452, &v455);
          sub_100012A10(v225, v449);
          sub_1000548FC(v211, type metadata accessor for ApplicationRecord);
          uint64_t v212 = v439;
        }
        else
        {
LABEL_113:
          sub_100012A10(v227, v228);
          uint64_t v211 = (uint64_t)v443;
LABEL_114:
          uint64_t v239 = sub_1000EFE40();
          uint64_t v240 = *(void (**)(char *, uint64_t, uint64_t))v59;
          uint64_t v241 = v420;
          v240(v420, v239, v450);
          uint64_t v242 = v421;
          sub_100012F8C(v211, v421, type metadata accessor for ApplicationRecord);
          uint64_t v243 = v422;
          sub_100012F8C(v242, v422, type metadata accessor for ApplicationRecord);
          uint64_t v244 = v423;
          sub_100054894(v242, v423, type metadata accessor for ApplicationRecord);
          uint64_t v245 = v225;
          uint64_t v246 = v225;
          unint64_t v247 = v449;
          sub_100012DE4(v245, v449);
          sub_100012DE4(v246, v247);
          uint64_t p_s1 = (uint64_t)v241;
          unint64_t v74 = Logger.logObject.getter();
          os_log_type_t v248 = static os_log_type_t.error.getter();
          uint64_t v93 = v248;
          if (os_log_type_enabled((os_log_t)v74, v248))
          {
            uint64_t v249 = v243;
            uint64_t v250 = swift_slowAlloc();
            *(void *)&long long __s1 = swift_slowAlloc();
            *(_DWORD *)uint64_t v250 = v429;
            sub_100054B4C(&qword_10017D000, (void (*)(uint64_t))type metadata accessor for ApplicationRecord);
            uint64_t v251 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v250 + 4) = sub_100003F90(v251, v252, (uint64_t *)&__s1);
            swift_bridgeObjectRelease();
            uint64_t p_s1 = (uint64_t)type metadata accessor for ApplicationRecord;
            sub_1000548FC(v244, type metadata accessor for ApplicationRecord);
            sub_1000548FC(v249, type metadata accessor for ApplicationRecord);
            *(_WORD *)(v250 + 12) = 2080;
            sub_100012DE4(v246, v247);
            uint64_t v253 = Data.description.getter();
            unint64_t v255 = v254;
            sub_100012A10(v246, v247);
            *(void *)(v250 + 14) = sub_100003F90(v253, v255, (uint64_t *)&__s1);
            swift_bridgeObjectRelease();
            sub_100012A10(v246, v247);
            sub_100012A10(v246, v247);
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v74, (os_log_type_t)v93, "Application %s has unexpected unique identifier, expected %s", (uint8_t *)v250, 0x16u);
            swift_arrayDestroy();
            uint64_t v211 = (uint64_t)v443;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            sub_100012A10(v246, v247);
            sub_100012A10(v246, v247);
            unint64_t v74 = (unint64_t)type metadata accessor for ApplicationRecord;
            sub_1000548FC(v244, type metadata accessor for ApplicationRecord);
            sub_1000548FC(v243, type metadata accessor for ApplicationRecord);
          }
          sub_100012A10(v246, v247);
          (*(void (**)(char *, uint64_t))v446)(v241, v450);
          sub_1000548FC(v211, type metadata accessor for ApplicationRecord);
          uint64_t v110 = v424;
          uint64_t v212 = v439;
          uint64_t v59 = (uint64_t)v445;
        }
        uint64_t v205 = (uint64_t)v447;
        unint64_t v209 = (unint64_t)v448;
        break;
      case 2uLL:
        uint64_t v234 = *(void *)(v225 + 16);
        uint64_t v233 = *(void *)(v225 + 24);
        BOOL v235 = __OFSUB__(v233, v234);
        uint64_t v232 = v233 - v234;
        if (!v235) {
          goto LABEL_103;
        }
        goto LABEL_249;
      case 3uLL:
        if (!p_s1) {
          goto LABEL_116;
        }
        goto LABEL_113;
      default:
        uint64_t v232 = BYTE6(v93);
        goto LABEL_103;
    }
  }
  swift_release();
  unint64_t v291 = v452;
  unint64_t v292 = v453;
  unint64_t v293 = v454;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10004E5F0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&long long __s1 = v291;
  *((void *)&__s1 + 1) = v292;
  unint64_t v460 = v293;
  uint64_t v456 = v409;
  uint64_t v457 = v405;
  v458 = v406;
  sub_100054840();
  LOBYTE(v292) = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t p_s1 = (uint64_t)v455;
  if (v292)
  {
    uint64_t v257 = (char *)v59;
  }
  else
  {
    swift_bridgeObjectRetain();
    BOOL v294 = sub_1000EF0B4();
    swift_bridgeObjectRelease();
    uint64_t v257 = (char *)v59;
    if (v294)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_273;
      }
      goto LABEL_223;
    }
  }
LABEL_226:
  swift_bridgeObjectRetain();
  BOOL v298 = sub_1000EF0B4();
  swift_bridgeObjectRelease();
  if (v298)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    [*(id *)((char *)v411 + v404) unlock];
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v300 = sub_1000EFE40();
  v301 = *(char **)v257;
  (*(void (**)(char *, uint64_t, uint64_t))v257)(v402, v300, v450);
  unint64_t v302 = Logger.logObject.getter();
  os_log_type_t v303 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v302, v303))
  {
    uint64_t v304 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v304 = 0;
    _os_log_impl((void *)&_mh_execute_header, v302, v303, "Saving dextbin info, encoding", v304, 2u);
    swift_slowDealloc();
  }

  unint64_t v305 = *(char **)v446;
  uint64_t v306 = v450;
  (*(void (**)(char *, uint64_t))v446)(v402, v450);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v307 = (uint64_t)v394;
  uint64_t v308 = (uint64_t *)sub_10004318C();
  uint64_t v310 = v307;
  if (v307)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    goto LABEL_240;
  }
  v448 = v308;
  unint64_t v449 = v309;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v311 = v399;
  uint64_t v442 = v300;
  v447 = v301;
  ((void (*)(char *, uint64_t, uint64_t))v301)(v399, v300, v306);
  uint64_t v312 = Logger.logObject.getter();
  uint64_t v313 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v312, (os_log_type_t)v313))
  {
    BOOL v314 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v314 = 0;
    _os_log_impl((void *)&_mh_execute_header, v312, (os_log_type_t)v313, "Writing new dextbin info contents", v314, 2u);
    unint64_t v311 = v399;
    swift_slowDealloc();
  }

  uint64_t v315 = v450;
  v441 = v305;
  ((void (*)(char *, uint64_t))v305)(v311, v450);
  unint64_t v316 = v411;
  uint64_t v317 = v411[5];
  uint64_t v318 = v411[6];
  sub_1000036B0(v403, v317);
  sub_1001297F4(v317, v318);
  uint64_t v319 = v461;
  uint64_t v320 = v462;
  unint64_t v321 = sub_1000036B0(&__s1, v461);
  v322 = *(void (**)(void))(*v316 + 304);
  v323 = v400;
  unint64_t v444 = *v316 + 304;
  v443 = v322;
  ((void (*)(void *))v322)(v321);
  uint64_t v324 = URL.path.getter();
  uint64_t v326 = v325;
  Swift::String v327 = *(void (**)(char *, uint64_t))(v432 + 8);
  v432 += 8;
  v440 = v327;
  v327(v323, v433);
  Swift::String v328 = v448;
  unint64_t v329 = v449;
  sub_100012DE4((uint64_t)v448, v449);
  unint64_t v330 = sub_10001DB3C((uint64_t)_swiftEmptyArrayStorage);
  LOBYTE(v324) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, unint64_t, unint64_t, uint64_t, uint64_t))(v320 + 40))(v324, v326, v328, v329, v330, v319, v320);
  swift_bridgeObjectRelease();
  sub_100012A10((uint64_t)v328, v329);
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)&__s1);
  if (v324)
  {
    uint64_t v331 = v398;
    ((void (*)(char *, uint64_t, uint64_t))v447)(v398, v442, v315);
    v332 = Logger.logObject.getter();
    os_log_type_t v333 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v332, v333))
    {
      int v334 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v334 = 0;
      _os_log_impl((void *)&_mh_execute_header, v332, v333, "Replacing old dextbin info contents", v334, 2u);
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v441)(v331, v450);
    uint64_t v335 = v411;
    uint64_t v336 = v411[5];
    uint64_t v337 = v411[6];
    sub_1000036B0(v403, v336);
    sub_1001297F4(v336, v337);
    uint64_t v338 = v461;
    uint64_t v339 = v462;
    v340 = sub_1000036B0(&__s1, v461);
    uint64_t v341 = v397;
    uint64_t v342 = (*(uint64_t (**)(void *))(*v335 + 280))(v340);
    uint64_t v343 = v396;
    ((void (*)(uint64_t))v443)(v342);
    (*(void (**)(char *, char *, void, void, void, void, uint64_t, uint64_t, uint64_t))(v339 + 88))(v341, v343, 0, 0, 0, 0, v338, v339, v387);
    uint64_t v373 = v433;
    uint64_t v374 = v440;
    v440(v343, v433);
    v374(v341, v373);
    sub_10000478C((uint64_t)&__s1);
    uint64_t v375 = v411[5];
    uint64_t v376 = v411[6];
    sub_1000036B0(v403, v375);
    sub_1001297F4(v375, v376);
    uint64_t v377 = v461;
    uint64_t v378 = v462;
    sub_1000036B0(&__s1, v461);
    uint64_t v379 = v395;
    v443();
    (*(void (**)(char *, uint64_t, uint64_t))(v378 + 104))(v379, v377, v378);
    v374(v379, v373);
    sub_100012A10((uint64_t)v448, v449);
    uint64_t v380 = v404;
    sub_10000478C((uint64_t)&__s1);
    unint64_t v381 = v453;
    unint64_t v382 = v454;
    v383 = v411;
    v384 = (void *)((char *)v411 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
    uint64_t v385 = *(void *)((char *)v411 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
    unint64_t *v384 = v452;
    v384[1] = v381;
    v384[2] = v382;
    sub_10004E0A0(v385);
    uint64_t v299 = v455;
    [*(id *)((char *)v383 + v380) unlock];
    return v299;
  }
  int v344 = errno.getter();
  int v345 = strerror(v344);
  uint64_t v300 = v442;
  if (!v345)
  {
LABEL_290:
    __break(1u);
    JUMPOUT(0x10004DCC8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v346 = String.init(cString:)();
  uint64_t v348 = v347;
  *(void *)&long long __s1 = 0;
  *((void *)&__s1 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  uint64_t v349 = swift_bridgeObjectRelease();
  *(void *)&long long __s1 = 0x6946657461657263;
  *((void *)&__s1 + 1) = 0xEB0000000020656CLL;
  v350 = v400;
  ((void (*)(uint64_t))v443)(v349);
  uint64_t v351 = URL.path.getter();
  long long v353 = v352;
  v440(v350, v433);
  v354._uint64_t countAndFlagsBits = v351;
  v354._int64_t object = v353;
  String.append(_:)(v354);
  swift_bridgeObjectRelease();
  v355._uint64_t countAndFlagsBits = 0x3A64656C69616620;
  v355._int64_t object = (void *)0xEF206F6E72726520;
  String.append(_:)(v355);
  v356._uint64_t countAndFlagsBits = v346;
  v356._int64_t object = v348;
  String.append(_:)(v356);
  swift_bridgeObjectRelease();
  long long v357 = __s1;
  sub_100012E3C();
  uint64_t v310 = swift_allocError();
  *(_OWORD *)uint64_t v358 = v357;
  *(_OWORD *)(v358 + 16) = 0u;
  *(_OWORD *)(v358 + 32) = 0u;
  *(_OWORD *)(v358 + 48) = 0u;
  *(void *)(v358 + 64) = 0;
  *(unsigned char *)(v358 + 72) = 19;
  swift_willThrow();
  sub_100012A10((uint64_t)v448, v449);
  unint64_t v305 = v441;
  v301 = v447;
LABEL_240:
  unint64_t v359 = sub_100040970();
  v360 = (void *)((char *)v411 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
  uint64_t v361 = *(void *)((char *)v411 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
  unint64_t *v360 = v359;
  v360[1] = v362;
  v360[2] = v363;
  sub_10004E0A0(v361);
  v364 = v401;
  uint64_t v365 = v450;
  ((void (*)(char *, uint64_t, uint64_t))v301)(v401, v300, v450);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v366 = Logger.logObject.getter();
  os_log_type_t v367 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v366, v367))
  {
    v368 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long __s1 = swift_slowAlloc();
    *(_DWORD *)v368 = 136315138;
    uint64_t v456 = v310;
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    uint64_t v369 = String.init<A>(describing:)();
    uint64_t v456 = sub_100003F90(v369, v370, (uint64_t *)&__s1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v366, v367, "Can't save dextbin info: %s", v368, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v371 = v401;
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    uint64_t v371 = v364;
  }
  ((void (*)(char *, uint64_t))v305)(v371, v365);
  swift_errorRelease();
  [*(id *)((char *)v411 + v404) unlock];
  swift_bridgeObjectRelease();
  return (char *)&off_10016B4C0;
}

unint64_t sub_10004DCF8()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 360))();
  uint64_t v4 = sub_100041DA0(v1, v2, v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = v4;
  v7._int64_t object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

BOOL sub_10004DDAC()
{
  URL.path.getter();
  v0._uint64_t countAndFlagsBits = URL.path.getter();
  Swift::Bool v1 = String.hasPrefix(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10004DE1C()
{
  sub_10000478C(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  sub_1000130EC(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation, (uint64_t *)&unk_10017FA60);
  sub_1000130EC(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation, (uint64_t *)&unk_10017FA60);
  sub_10004E0A0(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo));
  return v0;
}

uint64_t sub_10004DF20()
{
  sub_10004DE1C();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

id sub_10004DF78()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_stateManagerQueue);
}

uint64_t sub_10004DF88()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t sub_10004DFAC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

void (*sub_10004DFD0(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 224))();
  return sub_10000C31C;
}

uint64_t sub_10004E048()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t sub_10004E074()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t sub_10004E0A0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10004E0E0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100004700(&qword_10017BEA8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_100054B4C(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10004E46C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_10004E50C(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10004E5F0()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v133 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v153 = (char *)v131 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  os_log_t v142 = (char *)v131 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v140 = (char *)v131 - v8;
  __chkstk_darwin(v7);
  os_log_type_t v144 = (char *)v131 - v9;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v162 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v141 = (char *)v131 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v139 = (char *)v131 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v145 = (char *)v131 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v137 = (char *)v131 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v152 = (char *)v131 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v148 = (char *)v131 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  unint64_t v28 = (char *)v131 - v27;
  __chkstk_darwin(v26);
  uint64_t v175 = (char *)v131 - v29;
  uint64_t v30 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  uint64_t v161 = (char *)v131 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v160 = (char *)v131 - v33;
  uint64_t v34 = v0 + 2;
  uint64_t v35 = v0[5];
  uint64_t v36 = v0[6];
  unint64_t v158 = v34;
  sub_1000036B0(v34, v35);
  sub_1001297F4(v35, v36);
  uint64_t v37 = v179;
  uint64_t v38 = v180;
  sub_1000036B0(&v178, v179);
  uint64_t v39 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(v38 + 24))((uint64_t)v1 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory, 0, 1, v37, v38);
  uint64_t v40 = v160;
  sub_10000478C((uint64_t)&v178);
  uint64_t v41 = swift_bridgeObjectRetain();
  uint64_t v42 = sub_100048B18(v41);
  uint64_t v167 = 0;
  swift_bridgeObjectRelease();
  uint64_t v43 = sub_100012700(v42);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v46 = *(void *)(v39 + 16);
  unint64_t v165 = v1;
  uint64_t v171 = v2;
  uint64_t v169 = v13;
  uint64_t v159 = (void (**)(char *, uint64_t))v39;
  uint64_t v173 = v43;
  *(void *)&long long v157 = v46;
  if (v46)
  {
    unint64_t v47 = 0;
    unint64_t v151 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
    *(void *)&long long v156 = v39 + v151;
    uint64_t v176 = v162 + 16;
    uint64_t v154 = v162 + 48;
    uint64_t v164 = (void (***)(char *, uint64_t, uint64_t))(v162 + 32);
    uint64_t v48 = (void (**)(char *, uint64_t))(v162 + 8);
    uint64_t v150 = (void (**)(char *, uint64_t, uint64_t))(v133 + 16);
    uint64_t v149 = (void (**)(char *, uint64_t))(v133 + 8);
    uint64_t v172 = (unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 56);
    uint64_t v170 = _swiftEmptyArrayStorage;
    uint64_t v155 = (char *)(v162 + 56);
    v131[1] = (v162 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    *(void *)&long long v45 = 136315138;
    long long v136 = v45;
    uint64_t v135 = (char *)&type metadata for Any + 8;
    *(void *)&long long v45 = 136315394;
    long long v132 = v45;
    uint64_t v49 = v175;
    while (1)
    {
      if (v47 >= *(void *)(v39 + 16))
      {
        __break(1u);
        return result;
      }
      uint64_t v50 = v162;
      uint64_t v51 = *(void *)(v162 + 72);
      unint64_t v166 = v47;
      uint64_t v174 = v51;
      uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v162 + 16);
      v52(v40, (char *)(v156 + v51 * v47), v10);
      uint64_t v168 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56);
      v168(v40, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v40, 1, v10) == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v96 = v168;
        uint64_t v13 = v169;
        goto LABEL_36;
      }
      uint64_t v163 = *v164;
      ((void (*)(char *, char *, uint64_t))v163)(v49, v40, v10);
      if (URL.hasDirectoryPath.getter())
      {
        uint64_t v53 = v173;
        if (!*(void *)(v173 + 16)
          || (sub_100054B4C(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL),
              uint64_t v54 = dispatch thunk of Hashable._rawHashValue(seed:)(),
              uint64_t v55 = -1 << *(unsigned char *)(v53 + 32),
              unint64_t v56 = v54 & ~v55,
              ((*(unint64_t *)((char *)v172 + ((v56 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v56) & 1) == 0))
        {
LABEL_15:
          uint64_t v60 = sub_1000EFE40();
          uint64_t v61 = v144;
          uint64_t v62 = v171;
          (*v150)(v144, v60, v171);
          uint64_t v63 = v148;
          v52(v148, v175, v10);
          uint64_t v64 = Logger.logObject.getter();
          os_log_type_t v65 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v64, v65))
          {
            uint64_t v66 = swift_slowAlloc();
            unint64_t v147 = (void (*)(void))swift_slowAlloc();
            uint64_t v178 = (uint64_t)v147;
            *(_DWORD *)uint64_t v66 = v136;
            sub_100054B4C(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
            uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v66 + 4) = sub_100003F90(v67, v68, &v178);
            swift_bridgeObjectRelease();
            uint64_t v69 = *v48;
            (*v48)(v148, v10);
            _os_log_impl((void *)&_mh_execute_header, v64, v65, "Will remove untracked directory %s", (uint8_t *)v66, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            uint64_t v69 = *v48;
            (*v48)(v63, v10);
          }

          (*v149)(v61, v62);
          uint64_t v40 = v160;
          v52(v152, v175, v10);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v170 = (void *)sub_10000C4CC(0, v170[2] + 1, 1, (unint64_t)v170);
          }
          uint64_t v13 = v169;
          unint64_t v90 = v170[2];
          unint64_t v89 = v170[3];
          if (v90 >= v89 >> 1) {
            uint64_t v170 = (void *)sub_10000C4CC(v89 > 1, v90 + 1, 1, (unint64_t)v170);
          }
          uint64_t v91 = v170;
          v170[2] = v90 + 1;
          uint64_t v49 = v175;
          ((void (*)(char *, char *, uint64_t))v163)((char *)v91 + v151 + v90 * v174, v152, v10);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v69)(v49, v10);
          unint64_t v1 = v165;
          goto LABEL_6;
        }
        uint64_t v57 = ~v55;
        while (1)
        {
          v52(v28, (char *)(*(void *)(v53 + 48) + v56 * v174), v10);
          sub_100054B4C(&qword_10017BE98, (void (*)(uint64_t))&type metadata accessor for URL);
          char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v59 = *v48;
          (*v48)(v28, v10);
          if (v58) {
            break;
          }
          unint64_t v56 = (v56 + 1) & v57;
          uint64_t v53 = v173;
          if (((*(unint64_t *)((char *)v172 + ((v56 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v56) & 1) == 0) {
            goto LABEL_15;
          }
        }
        unint64_t v1 = v165;
        uint64_t v49 = v175;
      }
      else
      {
        uint64_t v70 = (void (**)(void))(*v1 + 280);
        unint64_t v147 = *v70;
        uint64_t v146 = v70;
        v147();
        char v71 = static URL.== infix(_:_:)();
        uint64_t v59 = *v48;
        (*v48)(v28, v10);
        if ((v71 & 1) == 0)
        {
          uint64_t v72 = sub_1000EFE40();
          uint64_t v73 = v140;
          uint64_t v74 = v171;
          (*v150)(v140, v72, v171);
          uint64_t v75 = v137;
          v52(v137, v49, v10);
          swift_retain_n();
          uint64_t v76 = Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.default.getter();
          os_log_t v143 = v76;
          int v138 = v77;
          if (os_log_type_enabled(v76, v77))
          {
            uint64_t v78 = v75;
            uint64_t v79 = swift_slowAlloc();
            uint64_t v134 = swift_slowAlloc();
            uint64_t v178 = v134;
            *(_DWORD *)uint64_t v79 = v132;
            sub_100054B4C(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
            uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v79 + 4) = sub_100003F90(v80, v81, &v178);
            swift_bridgeObjectRelease();
            unint64_t v82 = v78;
            uint64_t v49 = v175;
            uint64_t v83 = ((uint64_t (*)(char *, uint64_t))v59)(v82, v10);
            *(_WORD *)(v79 + 12) = 2080;
            ((void (*)(uint64_t))v147)(v83);
            uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v86 = v85;
            v59(v28, v10);
            *(void *)(v79 + 14) = sub_100003F90(v84, v86, &v178);
            swift_release_n();
            uint64_t v87 = v171;
            swift_bridgeObjectRelease();
            os_log_t v88 = v143;
            _os_log_impl((void *)&_mh_execute_header, v143, (os_log_type_t)v138, "Will remove untracked file %s, since it is not the expected Info.plist at %s", (uint8_t *)v79, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*v149)(v140, v87);
            unint64_t v1 = v165;
          }
          else
          {
            v59(v75, v10);

            uint64_t v92 = v165;
            swift_release_n();
            (*v149)(v73, v74);
            unint64_t v1 = v92;
          }
          v52(v145, v49, v10);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v170 = (void *)sub_10000C4CC(0, v170[2] + 1, 1, (unint64_t)v170);
          }
          uint64_t v13 = v169;
          unint64_t v94 = v170[2];
          unint64_t v93 = v170[3];
          if (v94 >= v93 >> 1) {
            uint64_t v170 = (void *)sub_10000C4CC(v93 > 1, v94 + 1, 1, (unint64_t)v170);
          }
          int64_t v95 = v170;
          v170[2] = v94 + 1;
          ((void (*)(char *, char *, uint64_t))v163)((char *)v95 + v151 + v94 * v174, v145, v10);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v59)(v49, v10);
          goto LABEL_5;
        }
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v59)(v49, v10);
      uint64_t v13 = v169;
LABEL_5:
      uint64_t v40 = v160;
LABEL_6:
      uint64_t v39 = (uint64_t)v159;
      unint64_t v47 = v166 + 1;
      if (v166 + 1 == (void)v157)
      {
        uint64_t v96 = v168;
        v168(v40, 1, 1, v10);
        goto LABEL_35;
      }
    }
  }
  uint64_t v96 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56);
  uint64_t v170 = _swiftEmptyArrayStorage;
  v96(v40, 1, 1, v10);
LABEL_35:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_36:
  uint64_t v98 = v139;
  uint64_t v99 = v161;
  uint64_t v100 = v170[2];
  if (v100)
  {
    uint64_t v175 = *(char **)(v162 + 16);
    unint64_t v101 = (char *)v170
         + ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
    unint64_t v166 = *(void *)(v162 + 72);
    uint64_t v172 = (unsigned int (**)(char *, uint64_t, uint64_t))(v162 + 48);
    uint64_t v173 = v162 + 56;
    uint64_t v164 = (void (***)(char *, uint64_t, uint64_t))(v162 + 32);
    uint64_t v163 = (void (**)(char *, uint64_t, uint64_t))(v133 + 16);
    uint64_t v176 = v162 + 16;
    uint64_t v160 = (char *)(v162 + 8);
    uint64_t v159 = (void (**)(char *, uint64_t))(v133 + 8);
    *(void *)&long long v97 = 136315138;
    long long v156 = v97;
    uint64_t v155 = (char *)&type metadata for Any + 8;
    *(void *)&long long v97 = 136315394;
    long long v157 = v97;
    uint64_t v168 = v96;
    ((void (*)(char *, char *, uint64_t))v175)(v161, v101, v10);
    while (1)
    {
      v96(v99, 0, 1, v10);
      if ((*v172)(v99, 1, v10) == 1) {
        return swift_bridgeObjectRelease();
      }
      ((void (*)(char *, char *, uint64_t))*v164)(v98, v99, v10);
      uint64_t v103 = v165[5];
      uint64_t v104 = v165[6];
      sub_1000036B0(v158, v103);
      sub_1001297F4(v103, v104);
      uint64_t v105 = v179;
      uint64_t v106 = v180;
      sub_1000036B0(&v178, v179);
      uint64_t v107 = v167;
      (*(void (**)(char *, uint64_t, uint64_t))(v106 + 104))(v98, v105, v106);
      uint64_t v108 = v107;
      uint64_t v174 = v100;
      if (v107)
      {
        sub_10000478C((uint64_t)&v178);
        uint64_t v109 = sub_1000EFE40();
        uint64_t v110 = v153;
        uint64_t v111 = v13;
        uint64_t v112 = v171;
        (*v163)(v153, v109, v171);
        ((void (*)(char *, char *, uint64_t))v175)(v111, v98, v10);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v113 = Logger.logObject.getter();
        os_log_type_t v114 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v113, v114))
        {

          swift_errorRelease();
          swift_errorRelease();
          unint64_t v102 = *(void (**)(char *, uint64_t))v160;
          (*(void (**)(char *, uint64_t))v160)(v111, v10);
          swift_errorRelease();
          (*v159)(v110, v112);
          v102(v98, v10);
          uint64_t v167 = 0;
LABEL_39:
          uint64_t v99 = v161;
          uint64_t v96 = v168;
          uint64_t v13 = v111;
          goto LABEL_40;
        }
        uint64_t v115 = swift_slowAlloc();
        uint64_t v178 = swift_slowAlloc();
        *(_DWORD *)uint64_t v115 = v157;
        sub_100054B4C(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v116 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v115 + 4) = sub_100003F90(v116, v117, &v178);
        swift_bridgeObjectRelease();
        uint64_t v167 = *(void (**)(void, void))v160;
        v167(v169, v10);
        *(_WORD *)(v115 + 12) = 2080;
        uint64_t v177 = v108;
        swift_errorRetain();
        sub_100004700(&qword_10017EB50);
        uint64_t v118 = String.init<A>(describing:)();
        *(void *)(v115 + 14) = sub_100003F90(v118, v119, &v178);
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v113, v114, "Difficulty removing %s: %s", (uint8_t *)v115, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v13 = v169;
        swift_slowDealloc();

        swift_errorRelease();
        (*v159)(v153, v171);
        v167(v98, v10);
        uint64_t v167 = 0;
      }
      else
      {
        uint64_t v111 = v13;
        uint64_t v167 = 0;
        sub_10000478C((uint64_t)&v178);
        uint64_t v120 = sub_1000EFE40();
        int v121 = v142;
        uint64_t v122 = v171;
        (*v163)(v142, v120, v171);
        int v123 = v141;
        ((void (*)(char *, char *, uint64_t))v175)(v141, v98, v10);
        uint64_t v124 = Logger.logObject.getter();
        os_log_type_t v125 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v124, v125))
        {

          int64_t v130 = *(void (**)(char *, uint64_t))v160;
          (*(void (**)(char *, uint64_t))v160)(v123, v10);
          (*v159)(v121, v122);
          v130(v98, v10);
          goto LABEL_39;
        }
        uint64_t v126 = swift_slowAlloc();
        uint64_t v178 = swift_slowAlloc();
        *(_DWORD *)uint64_t v126 = v156;
        uint64_t v127 = URL.path.getter();
        *(void *)(v126 + 4) = sub_100003F90(v127, v128, &v178);
        swift_bridgeObjectRelease();
        unint64_t v129 = *(void (**)(char *, uint64_t))v160;
        (*(void (**)(char *, uint64_t))v160)(v123, v10);
        _os_log_impl((void *)&_mh_execute_header, v124, v125, "Removed untracked path %s", (uint8_t *)v126, 0xCu);
        swift_arrayDestroy();
        uint64_t v13 = v169;
        swift_slowDealloc();
        swift_slowDealloc();

        (*v159)(v121, v171);
        uint64_t v98 = v139;
        v129(v139, v10);
      }
      uint64_t v99 = v161;
      uint64_t v96 = v168;
LABEL_40:
      v101 += v166;
      uint64_t v100 = v174 - 1;
      if (v174 == 1) {
        break;
      }
      ((void (*)(char *, char *, uint64_t))v175)(v99, v101, v10);
    }
  }
  v96(v99, 1, 1, v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004FB80(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v67 = a5;
  uint64_t v70 = a4;
  v50[0] = a2;
  uint64_t v51 = a1;
  uint64_t v66 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  os_log_type_t v65 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100004700((uint64_t *)&unk_10017EBF0);
  uint64_t v8 = __chkstk_darwin(v64);
  uint64_t v10 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v74 = (uint64_t)v50 - v11;
  uint64_t v12 = type metadata accessor for DriverBinEntry();
  uint64_t v62 = *(void *)(v12 - 8);
  uint64_t v63 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t result = __chkstk_darwin(v15);
  uint64_t v73 = (char *)v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = 0;
  int64_t v19 = 0;
  unint64_t v68 = a3;
  uint64_t v22 = a3[8];
  uint64_t v21 = a3 + 8;
  uint64_t v20 = v22;
  uint64_t v23 = 1 << *((unsigned char *)v21 - 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v20;
  uint64_t v53 = v21;
  int64_t v54 = (unint64_t)(v23 + 63) >> 6;
  char v58 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v59 = v17 + 16;
  unint64_t v56 = v10;
  uint64_t v57 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v60 = v17;
  uint64_t v61 = v14;
  uint64_t v55 = (void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v26 = v74;
  while (v25)
  {
    uint64_t v71 = (v25 - 1) & v25;
    int64_t v72 = v19;
    unint64_t v29 = __clz(__rbit64(v25)) | (v19 << 6);
LABEL_21:
    uint64_t v34 = v68;
    uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
    uint64_t v36 = v73;
    v35(v73, v68[6] + *(void *)(v60 + 72) * v29, v15);
    uint64_t v37 = v34[7];
    uint64_t v38 = *(void *)(v62 + 72);
    unint64_t v69 = v29;
    sub_100012F8C(v37 + v38 * v29, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v39 = v64;
    uint64_t v40 = v26 + *(int *)(v64 + 48);
    v35((char *)v26, (unint64_t)v36, v15);
    sub_100012F8C((uint64_t)v14, v40, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v41 = (uint64_t)&v56[*(int *)(v39 + 48)];
    uint64_t v42 = v56;
    ((void (*)(char *))v35)(v56);
    sub_100012F8C(v40, v41, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v43 = v65;
    uint64_t v44 = v66;
    (*v58)(v65, v41 + *(int *)(v63 + 28), v66);
    sub_1000548FC(v41, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v45 = URL.lastPathComponent.getter();
    uint64_t v47 = v46;
    (*v57)(v43, v44);
    if (v45 == v70 && v47 == v67)
    {
      swift_bridgeObjectRelease();
      sub_1000130EC(v74, (uint64_t *)&unk_10017EBF0);
      uint64_t v48 = *v55;
      (*v55)(v42, v15);
      uint64_t v14 = v61;
      sub_1000548FC((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v48)(v73, v15);
      unint64_t v25 = v71;
      int64_t v19 = v72;
      goto LABEL_24;
    }
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    sub_1000130EC(v74, (uint64_t *)&unk_10017EBF0);
    unint64_t v28 = *v55;
    (*v55)(v42, v15);
    uint64_t v14 = v61;
    sub_1000548FC((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v73, v15);
    unint64_t v25 = v71;
    int64_t v19 = v72;
    if (v27)
    {
LABEL_24:
      *(unint64_t *)((char *)v51 + ((v69 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v69;
      if (__OFADD__(v52++, 1))
      {
        __break(1u);
        return sub_10000DCF0(v51, v50[0], v52, v68);
      }
    }
  }
  int64_t v30 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v30 >= v54) {
    return sub_10000DCF0(v51, v50[0], v52, v68);
  }
  unint64_t v31 = v53[v30];
  int64_t v32 = v19 + 1;
  if (v31) {
    goto LABEL_20;
  }
  int64_t v32 = v19 + 2;
  if (v19 + 2 >= v54) {
    return sub_10000DCF0(v51, v50[0], v52, v68);
  }
  unint64_t v31 = v53[v32];
  if (v31) {
    goto LABEL_20;
  }
  int64_t v32 = v19 + 3;
  if (v19 + 3 >= v54) {
    return sub_10000DCF0(v51, v50[0], v52, v68);
  }
  unint64_t v31 = v53[v32];
  if (v31)
  {
LABEL_20:
    uint64_t v71 = (v31 - 1) & v31;
    int64_t v72 = v32;
    unint64_t v29 = __clz(__rbit64(v31)) + (v32 << 6);
    goto LABEL_21;
  }
  uint64_t v33 = v19 + 4;
  if (v19 + 4 >= v54) {
    return sub_10000DCF0(v51, v50[0], v52, v68);
  }
  unint64_t v31 = v53[v33];
  if (v31)
  {
    int64_t v32 = v19 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v32 >= v54) {
      return sub_10000DCF0(v51, v50[0], v52, v68);
    }
    unint64_t v31 = v53[v32];
    ++v33;
    if (v31) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000501C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_10004FB80((unint64_t *)((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, (void *)a1, a2, a3);
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_10004FB80((unint64_t *)v13, v9, (void *)a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

uint64_t sub_100050390(uint64_t a1, uint64_t a2, uint64_t *a3, char **a4)
{
  uint64_t v347 = a4;
  v389 = a3;
  uint64_t v6 = type metadata accessor for Date();
  __chkstk_darwin(v6 - 8);
  uint64_t v346 = (char *)&v337 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ApplicationRecord(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v377 = (char *)&v337 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v345 = (uint64_t)&v337 - v12;
  __chkstk_darwin(v11);
  uint64_t v360 = (uint64_t)&v337 - v13;
  uint64_t v401 = type metadata accessor for Logger();
  v414 = *(void (***)(char *, uint64_t))(v401 - 8);
  uint64_t v14 = __chkstk_darwin(v401);
  uint64_t v358 = (char *)&v337 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  v372 = (char *)&v337 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  os_log_t v390 = (char *)&v337 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v342 = (char *)&v337 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  os_log_type_t v367 = (char *)&v337 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v380 = (char *)&v337 - v25;
  __chkstk_darwin(v24);
  Swift::String v354 = (char *)&v337 - v26;
  uint64_t v384 = sub_100004700((uint64_t *)&unk_10017EBF0);
  uint64_t v27 = *(void *)(v384 - 8);
  __chkstk_darwin(v384);
  uint64_t v370 = (uint64_t)&v337 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100004700(&qword_10017BEF8);
  __chkstk_darwin(v29 - 8);
  int v388 = (char *)&v337 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v369 = sub_100004700(&qword_10017BF00);
  __chkstk_darwin(v369);
  v368 = (char *)&v337 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v373 = type metadata accessor for DriverBinEntry();
  uint64_t v32 = __chkstk_darwin(v373);
  uint64_t v341 = (uint64_t)&v337 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v348 = (uint64_t)&v337 - v35;
  __chkstk_darwin(v34);
  uint64_t v376 = (uint64_t)&v337 - v36;
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = __chkstk_darwin(v37);
  int v344 = (char *)&v337 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v398 = (uint64_t)&v337 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v352 = (char *)&v337 - v44;
  __chkstk_darwin(v43);
  uint64_t v375 = (char *)&v337 - v45;
  uint64_t v46 = type metadata accessor for URL();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = __chkstk_darwin(v46);
  Swift::String v355 = (char *)&v337 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v379 = (char *)&v337 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v343 = (char *)&v337 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  long long v357 = (char *)&v337 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  unint64_t v359 = (char *)&v337 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  v407 = (char *)&v337 - v59;
  __chkstk_darwin(v58);
  uint64_t v385 = (char *)&v337 - v60;
  uint64_t v418 = a1;
  swift_bridgeObjectRetain();
  uint64_t v61 = sub_10000CDBC((uint64_t)sub_100054B1C, (uint64_t)v417, a2);
  uint64_t v415 = 0;
  swift_bridgeObjectRelease();
  uint64_t v387 = v8;
  uint64_t v62 = *(int *)(v8 + 24);
  uint64_t v397 = a1;
  uint64_t v63 = *(void *)(*(void *)(a1 + v62) + 16);
  if (v63)
  {
    v392 = v394 + 2;
    uint64_t v378 = (char *)v394 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory;
    uint64_t v64 = (void *)(v47 + 8);
    uint64_t v374 = (void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
    v383 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
    unint64_t v382 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
    uint64_t v366 = (void (**)(char *, uint64_t, uint64_t))(v38 + 32);
    unint64_t v391 = (void (**)(uint64_t, uint64_t))(v38 + 8);
    v413 = (void (**)(char *, uint64_t, uint64_t))(v414 + 2);
    ++v414;
    v393 = &v422;
    v386 = (void (**)(char *, char *, uint64_t))(v47 + 16);
    uint64_t v340 = swift_bridgeObjectRetain();
    os_log_type_t v65 = (uint64_t *)(v340 + 40);
    uint64_t v365 = (void *)0x8000000100146E80;
    *(void *)&long long v66 = 136315138;
    long long v363 = v66;
    unint64_t v362 = (char *)&type metadata for Any + 8;
    *(void *)&long long v66 = 136315650;
    long long v361 = v66;
    uint64_t v339 = (void *)0x8000000100146EE0;
    uint64_t v338 = (void *)0x8000000100146F00;
    uint64_t v349 = (void *)0x8000000100146EB0;
    *(void *)&long long v66 = 136315906;
    long long v351 = v66;
    *(void *)&long long v66 = 136315394;
    long long v364 = v66;
    uint64_t v350 = 0x8000000100146F50;
    Swift::String v356 = (void *)0x8000000100146F20;
    uint64_t v67 = v401;
    uint64_t v68 = (uint64_t)v388;
    uint64_t v411 = v37;
    uint64_t v412 = v46;
    uint64_t v381 = v61;
    uint64_t v404 = v64;
    uint64_t v69 = v46;
    while (1)
    {
      uint64_t v400 = v63;
      uint64_t v72 = *(v65 - 1);
      uint64_t v71 = *v65;
      v399 = v65;
      swift_bridgeObjectRetain();
      uint64_t v73 = v385;
      uint64_t v406 = v71;
      URL.init(fileURLWithPath:)();
      uint64_t v74 = URL.lastPathComponent.getter();
      uint64_t v76 = v75;
      os_log_type_t v77 = (void (*)(void, void))*v64;
      ((void (*)(char *, uint64_t))*v64)(v73, v69);
      swift_bridgeObjectRetain();
      uint64_t v78 = swift_retain();
      uint64_t v403 = v74;
      uint64_t v79 = v74;
      uint64_t v80 = v415;
      uint64_t v81 = sub_1000501C8(v78, v79, (uint64_t)v76);
      uint64_t v415 = v80;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v82 = sub_100010EA4(v81);
      if (v84) {
        goto LABEL_72;
      }
      int v85 = v83;
      uint64_t v86 = v384;
      if (*(_DWORD *)(v81 + 36) != v83)
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
      }
      uint64_t v395 = v72;
      uint64_t v87 = 1;
      if (v82 != 1 << *(unsigned char *)(v81 + 32))
      {
        uint64_t v88 = v370;
        uint64_t v89 = v370 + *(int *)(v384 + 48);
        sub_100010DA0(v370, v89, v82, v85, 0, v81);
        (*v374)(v68, v88, v411);
        sub_100012F8C(v89, v68 + *(int *)(v86 + 48), (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        sub_1000130EC(v88, (uint64_t *)&unk_10017EBF0);
        uint64_t v87 = 0;
      }
      (*v383)(v68, v87, 1, v86);
      swift_release();
      int v90 = (*v382)(v68, 1, v86);
      uint64_t v405 = v76;
      if (v90 == 1) {
        break;
      }
      uint64_t v99 = v68 + *(int *)(v86 + 48);
      uint64_t v100 = v369;
      unint64_t v101 = v368;
      uint64_t v102 = (uint64_t)&v368[*(int *)(v369 + 48)];
      uint64_t v103 = v68;
      uint64_t v104 = *v366;
      (*v366)(v368, v103, v411);
      sub_100054894(v99, v102, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      uint64_t v105 = (uint64_t)&v101[*(int *)(v100 + 48)];
      uint64_t v106 = (uint64_t)v375;
      uint64_t v107 = v101;
      uint64_t v108 = v411;
      v104(v375, (uint64_t)v107, v411);
      uint64_t v109 = v376;
      sub_100054894(v105, v376, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      if ((static UUID.== infix(_:_:)() & 1) == 0)
      {
        v402 = v77;
        v425[0] = 0;
        v425[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(48);
        swift_bridgeObjectRelease();
        strcpy((char *)v425, "Bin entry ");
        BYTE3(v425[1]) = 0;
        HIDWORD(v425[1]) = -369098752;
        sub_100054B4C(&qword_10017BEB8, (void (*)(uint64_t))type metadata accessor for DriverBinEntry);
        v122._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v123 = v108;
        uint64_t v124 = v109;
        String.append(_:)(v122);
        swift_bridgeObjectRelease();
        v125._uint64_t countAndFlagsBits = 0xD000000000000022;
        v125._int64_t object = v356;
        String.append(_:)(v125);
        sub_100054B4C(&qword_10017CEF8, (void (*)(uint64_t))&type metadata accessor for UUID);
        v126._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v126);
        swift_bridgeObjectRelease();
        uint64_t v127 = v425[0];
        uint64_t v128 = v425[1];
        sub_100012E3C();
        uint64_t v97 = swift_allocError();
        *(void *)uint64_t v129 = v127;
        *(void *)(v129 + 8) = v128;
        *(_OWORD *)(v129 + 16) = 0u;
        *(_OWORD *)(v129 + 32) = 0u;
        *(_OWORD *)(v129 + 48) = 0u;
        *(void *)(v129 + 64) = 0;
        *(unsigned char *)(v129 + 72) = 50;
        swift_willThrow();
        sub_1000548FC(v124, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        (*v391)(v106, v123);
        goto LABEL_17;
      }
      if (sub_10004159C(v106, *v389))
      {
        swift_bridgeObjectRelease();
        uint64_t v110 = sub_1000EFE40();
        uint64_t v111 = v354;
        (*v413)(v354, v110, v67);
        uint64_t v112 = v352;
        (*v374)((uint64_t)v352, v106, v108);
        unint64_t v113 = v406;
        swift_bridgeObjectRetain();
        uint64_t v114 = v108;
        uint64_t v115 = Logger.logObject.getter();
        os_log_type_t v116 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v115, v116))
        {
          uint64_t v117 = v109;
          uint64_t v118 = swift_slowAlloc();
          v425[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v118 = v364;
          swift_bridgeObjectRetain();
          *(void *)(v118 + 4) = sub_100003F90(v395, v113, v425);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v118 + 12) = 2080;
          sub_100054B4C(&qword_10017CEF8, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v119 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v118 + 14) = sub_100003F90(v119, v120, v425);
          swift_bridgeObjectRelease();
          int v121 = *v391;
          (*v391)((uint64_t)v112, v411);
          _os_log_impl((void *)&_mh_execute_header, v115, v116, "Skipping bundle at %s, already inserted into new bin with UUID %s", (uint8_t *)v118, 0x16u);
          swift_arrayDestroy();
          uint64_t v67 = v401;
          swift_slowDealloc();
          swift_slowDealloc();

          (*v414)(v354, v67);
          sub_1000548FC(v117, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
          v121(v106, v411);
        }
        else
        {

          uint64_t v286 = *v391;
          (*v391)((uint64_t)v112, v114);
          swift_bridgeObjectRelease_n();
          (*v414)(v111, v67);
          sub_1000548FC(v109, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
          v286(v106, v114);
        }
        uint64_t v68 = (uint64_t)v388;
        uint64_t v69 = v412;
      }
      else
      {
        LOBYTE(v421) = 0;
        uint64_t v218 = v394[5];
        uint64_t v219 = v394[6];
        sub_1000036B0(v392, v218);
        sub_1001297F4(v218, v219);
        uint64_t v220 = v427;
        sub_1000036B0(v425, v426);
        uint64_t v221 = URL.path.getter();
        LOBYTE(v218) = (*(uint64_t (**)(uint64_t))(v220 + 136))(v221);
        swift_bridgeObjectRelease();
        uint64_t v68 = (uint64_t)v388;
        v402 = v77;
        if ((v218 & 1) == 0)
        {
          sub_10000478C((uint64_t)v425);
          uint64_t v223 = v411;
          uint64_t v224 = v375;
LABEL_54:
          v425[0] = 0;
          v425[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(42);
          swift_bridgeObjectRelease();
          v425[0] = 0xD000000000000012;
          v425[1] = v350;
          v287._uint64_t countAndFlagsBits = URL.path.getter();
          String.append(_:)(v287);
          swift_bridgeObjectRelease();
          v288._uint64_t countAndFlagsBits = 0x20726F6620;
          v288._int64_t object = (void *)0xE500000000000000;
          String.append(_:)(v288);
          uint64_t v289 = v376;
          size_t v290 = (uint64_t *)(v376 + *(int *)(v373 + 20));
          uint64_t v291 = *v290;
          unint64_t v292 = (void *)v290[1];
          swift_bridgeObjectRetain();
          v293._uint64_t countAndFlagsBits = v291;
          v293._int64_t object = v292;
          String.append(_:)(v293);
          swift_bridgeObjectRelease();
          v294._uint64_t countAndFlagsBits = 0x6F6E2073656F6420;
          v294._int64_t object = (void *)0xEF74736978652074;
          String.append(_:)(v294);
          uint64_t v295 = v425[0];
          uint64_t v296 = v425[1];
          sub_100012E3C();
          uint64_t v97 = swift_allocError();
          *(void *)uint64_t v297 = v295;
          *(void *)(v297 + 8) = v296;
          *(_OWORD *)(v297 + 16) = 0u;
          *(_OWORD *)(v297 + 32) = 0u;
          *(_OWORD *)(v297 + 48) = 0u;
          *(void *)(v297 + 64) = 0;
          *(unsigned char *)(v297 + 72) = 19;
          swift_willThrow();
          sub_1000548FC(v289, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
          (*v391)((uint64_t)v224, v223);
          uint64_t v415 = 0;
          uint64_t v67 = v401;
          goto LABEL_18;
        }
        char v222 = v421;
        sub_10000478C((uint64_t)v425);
        uint64_t v223 = v411;
        uint64_t v224 = v375;
        if ((v222 & 1) == 0) {
          goto LABEL_54;
        }
        uint64_t v225 = v394[5];
        uint64_t v226 = v394[6];
        sub_1000036B0(v392, v225);
        sub_1001297F4(v225, v226);
        uint64_t v227 = v427;
        sub_1000036B0(v425, v426);
        uint64_t v228 = URL.path.getter();
        LOBYTE(v225) = (*(uint64_t (**)(uint64_t))(v227 + 136))(v228);
        swift_bridgeObjectRelease();
        if ((v225 & 1) == 0)
        {
          sub_10000478C((uint64_t)v425);
          uint64_t v67 = v401;
          uint64_t v230 = v411;
LABEL_61:
          v425[0] = 0;
          v425[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          swift_bridgeObjectRelease();
          strcpy((char *)v425, "Staged bundle ");
          HIBYTE(v425[1]) = -18;
          v310._uint64_t countAndFlagsBits = URL.path.getter();
          String.append(_:)(v310);
          swift_bridgeObjectRelease();
          v311._uint64_t countAndFlagsBits = 0x20726F6620;
          v311._int64_t object = (void *)0xE500000000000000;
          String.append(_:)(v311);
          uint64_t v312 = v376;
          uint64_t v313 = (uint64_t *)(v376 + *(int *)(v373 + 20));
          uint64_t v314 = *v313;
          uint64_t v315 = (void *)v313[1];
          swift_bridgeObjectRetain();
          v316._uint64_t countAndFlagsBits = v314;
          v316._int64_t object = v315;
          String.append(_:)(v316);
          swift_bridgeObjectRelease();
          v317._uint64_t countAndFlagsBits = 0x6F6E2073656F6420;
          v317._int64_t object = (void *)0xEF74736978652074;
          String.append(_:)(v317);
          uint64_t v318 = v425[0];
          uint64_t v319 = v425[1];
          sub_100012E3C();
          uint64_t v97 = swift_allocError();
          *(void *)uint64_t v320 = v318;
          *(void *)(v320 + 8) = v319;
          *(_OWORD *)(v320 + 16) = 0u;
          *(_OWORD *)(v320 + 32) = 0u;
          *(_OWORD *)(v320 + 48) = 0u;
          *(void *)(v320 + 64) = 0;
          *(unsigned char *)(v320 + 72) = 19;
          swift_willThrow();
          sub_1000548FC(v312, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
          (*v391)((uint64_t)v375, v230);
          uint64_t v415 = 0;
LABEL_18:
          uint64_t v130 = sub_1000EFE40();
          uint64_t v131 = *v413;
          long long v132 = v380;
          uint64_t v408 = v130;
          uint64_t v409 = v131;
          ((void (*)(char *))v131)(v380);
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v133 = Logger.logObject.getter();
          os_log_type_t v134 = static os_log_type_t.error.getter();
          BOOL v135 = os_log_type_enabled(v133, v134);
          uint64_t v396 = v97;
          if (v135)
          {
            long long v136 = (uint8_t *)swift_slowAlloc();
            v425[0] = swift_slowAlloc();
            *(_DWORD *)long long v136 = v363;
            uint64_t v421 = v97;
            swift_errorRetain();
            sub_100004700(&qword_10017EB50);
            uint64_t v137 = String.init<A>(describing:)();
            uint64_t v421 = sub_100003F90(v137, v138, v425);
            uint64_t v139 = v132;
            unint64_t v140 = v394;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v133, v134, "Failed to reuse existing bin entry: %s. Creating new bin entry", v136, 0xCu);
            swift_arrayDestroy();
            uint64_t v67 = v401;
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v410 = *v414;
            v410(v139, v67);
            unint64_t v141 = v379;
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();

            uint64_t v410 = *v414;
            v410(v132, v67);
            unint64_t v141 = v379;
            unint64_t v140 = v394;
          }
          sub_100041448(*v389, v398);
          UUID.uuidString.getter();
          os_log_t v142 = v407;
          URL.appendingPathComponent(_:isDirectory:)();
          swift_bridgeObjectRelease();
          uint64_t v143 = v140[5];
          uint64_t v144 = v140[6];
          sub_1000036B0(v392, v143);
          sub_1001297F4(v143, v144);
          uint64_t v145 = v426;
          uint64_t v146 = v427;
          sub_1000036B0(v425, v426);
          unint64_t v147 = sub_10001DB3C((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v148 = v415;
          (*(void (**)(char *, uint64_t, unint64_t, uint64_t, uint64_t))(v146 + 48))(v142, 1, v147, v145, v146);
          uint64_t v415 = v148;
          if (v148)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10000478C((uint64_t)v425);
            int v149 = errno.getter();
            if (!strerror(v149)) {
              goto LABEL_73;
            }
            uint64_t v150 = String.init(cString:)();
            unint64_t v152 = v151;
            uint64_t v153 = v372;
            v409(v372, v408, v67);
            uint64_t v154 = v412;
            (*v386)(v141, v407, v412);
            swift_errorRetain();
            swift_errorRetain();
            swift_bridgeObjectRetain();
            uint64_t v155 = Logger.logObject.getter();
            os_log_type_t v156 = static os_log_type_t.error.getter();
            int v157 = v156;
            if (os_log_type_enabled(v155, v156))
            {
              uint64_t v158 = swift_slowAlloc();
              v425[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v158 = v361;
              uint64_t v395 = v150;
              LODWORD(v406) = v157;
              uint64_t v159 = URL.path.getter();
              uint64_t v421 = sub_100003F90(v159, v160, v425);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              uint64_t v161 = (void (*)(char *, uint64_t))v402;
              v402(v141, v412);
              *(_WORD *)(v158 + 12) = 2080;
              uint64_t v421 = v415;
              swift_errorRetain();
              sub_100004700(&qword_10017EB50);
              uint64_t v162 = String.init<A>(describing:)();
              uint64_t v421 = sub_100003F90(v162, v163, v425);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              *(_WORD *)(v158 + 22) = 2080;
              swift_bridgeObjectRetain();
              uint64_t v421 = sub_100003F90(v395, v152, v425);
              uint64_t v164 = v161;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v155, (os_log_type_t)v406, "Could not create directory %s: %s (errno %s)", (uint8_t *)v158, 0x20u);
              swift_arrayDestroy();
              uint64_t v154 = v412;
              swift_slowDealloc();
              uint64_t v67 = v401;
              swift_slowDealloc();
            }
            else
            {
              uint64_t v164 = (void (*)(char *, uint64_t))v402;
              v402(v141, v154);
              swift_errorRelease();
              swift_errorRelease();

              swift_bridgeObjectRelease_n();
            }
            v410(v153, v67);
            uint64_t v184 = (uint64_t)v377;
            uint64_t v185 = v411;
            swift_willThrow();
            v164(v407, v154);
            (*v391)(v398, v185);
            uint64_t v186 = v390;
            unint64_t v187 = (unint64_t)v405;
            goto LABEL_58;
          }
          swift_bridgeObjectRelease();
          sub_10000478C((uint64_t)v425);
          unint64_t v165 = v367;
          v409(v367, v408, v67);
          uint64_t v166 = v360;
          sub_100012F8C(v397, v360, type metadata accessor for ApplicationRecord);
          uint64_t v167 = *v386;
          uint64_t v168 = v359;
          uint64_t v169 = v412;
          (*v386)(v359, v142, v412);
          unint64_t v170 = v406;
          swift_bridgeObjectRetain_n();
          uint64_t v171 = Logger.logObject.getter();
          uint64_t v172 = v67;
          os_log_type_t v173 = static os_log_type_t.default.getter();
          BOOL v174 = os_log_type_enabled(v171, v173);
          uint64_t v371 = v167;
          if (v174)
          {
            uint64_t v175 = v168;
            uint64_t v176 = swift_slowAlloc();
            v425[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v176 = v361;
            uint64_t v177 = sub_100014690(*(void *)(v166 + *(int *)(v387 + 32)), *(void *)(v166 + *(int *)(v387 + 32) + 8));
            uint64_t v421 = sub_100003F90(v177, v178, v425);
            uint64_t v179 = v170;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000548FC(v166, type metadata accessor for ApplicationRecord);
            *(_WORD *)(v176 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v421 = sub_100003F90(v395, v170, v425);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v176 + 22) = 2080;
            uint64_t v180 = URL.path.getter();
            uint64_t v421 = sub_100003F90(v180, v181, v425);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v402(v175, v412);
            _os_log_impl((void *)&_mh_execute_header, v171, v173, "Attempting to copy out driver extension:\n  installIdentifier: %s\n               from: %s\n                 to: %s", (uint8_t *)v176, 0x20u);
            swift_arrayDestroy();
            uint64_t v182 = v394;
            swift_slowDealloc();
            swift_slowDealloc();

            v410(v367, v401);
            unint64_t v183 = v392;
          }
          else
          {
            sub_1000548FC(v166, type metadata accessor for ApplicationRecord);
            swift_bridgeObjectRelease_n();
            v402(v168, v169);

            v410(v165, v172);
            unint64_t v183 = v392;
            uint64_t v179 = v170;
            uint64_t v182 = v394;
          }
          uint64_t v188 = v182[5];
          uint64_t v189 = v182[6];
          sub_1000036B0(v183, v188);
          sub_1001297F4(v188, v189);
          uint64_t v190 = v426;
          uint64_t v191 = v427;
          sub_1000036B0(v425, v426);
          uint64_t v192 = v407;
          uint64_t v193 = URL.path.getter();
          uint64_t v195 = v194;
          uint64_t v196 = sub_10012772C();
          uint64_t v197 = v190;
          uint64_t v198 = v415;
          sub_100127738(v395, v179, v193, v195, v196, v197, v191);
          uint64_t v415 = v198;
          if (v198)
          {
            swift_bridgeObjectRelease();
            sub_10000478C((uint64_t)v425);
            int v199 = errno.getter();
            if (!strerror(v199)) {
              goto LABEL_74;
            }
            uint64_t v200 = String.init(cString:)();
            unint64_t v202 = v201;
            uint64_t v203 = v358;
            uint64_t v204 = v401;
            v409(v358, v408, v401);
            uint64_t v205 = v355;
            uint64_t v206 = v412;
            v371(v355, v407, v412);
            swift_errorRetain();
            unint64_t v207 = v406;
            swift_bridgeObjectRetain();
            swift_errorRetain();
            swift_bridgeObjectRetain();
            uint64_t v208 = Logger.logObject.getter();
            os_log_type_t v209 = static os_log_type_t.error.getter();
            LODWORD(v371) = v209;
            if (os_log_type_enabled(v208, v209))
            {
              uint64_t v210 = swift_slowAlloc();
              uint64_t v353 = swift_slowAlloc();
              v425[0] = v353;
              *(_DWORD *)uint64_t v210 = v351;
              swift_bridgeObjectRetain();
              uint64_t v421 = sub_100003F90(v395, v207, v425);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v210 + 12) = 2080;
              uint64_t v406 = v200;
              uint64_t v211 = URL.path.getter();
              uint64_t v421 = sub_100003F90(v211, v212, v425);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              unint64_t v213 = v205;
              uint64_t v214 = (void (*)(char *, uint64_t))v402;
              v402(v213, v206);
              *(_WORD *)(v210 + 22) = 2080;
              uint64_t v421 = v415;
              swift_errorRetain();
              sub_100004700(&qword_10017EB50);
              uint64_t v215 = String.init<A>(describing:)();
              uint64_t v421 = sub_100003F90(v215, v216, v425);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              *(_WORD *)(v210 + 32) = 2080;
              unint64_t v217 = v214;
              swift_bridgeObjectRetain();
              uint64_t v421 = sub_100003F90(v406, v202, v425);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v208, (os_log_type_t)v371, "Could not copyfile:\nfrom: %s\nto: %s\nerror: %s\nerrno: %s", (uint8_t *)v210, 0x2Au);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v67 = v401;
              v410(v358, v401);
              uint64_t v184 = (uint64_t)v377;
            }
            else
            {
              swift_bridgeObjectRelease_n();
              unint64_t v217 = (void (*)(char *, uint64_t))v402;
              v402(v205, v206);
              swift_errorRelease();
              swift_errorRelease();

              swift_bridgeObjectRelease_n();
              v410(v203, v204);
              uint64_t v184 = (uint64_t)v377;
              uint64_t v67 = v204;
            }
            swift_willThrow();
            v217(v407, v206);
            (*v391)(v398, v411);
LABEL_57:
            unint64_t v187 = (unint64_t)v405;
            uint64_t v186 = v390;
LABEL_58:
            v409(v186, v408, v67);
            sub_100012F8C(v397, v184, type metadata accessor for ApplicationRecord);
            swift_bridgeObjectRetain();
            swift_errorRetain();
            unint64_t v305 = Logger.logObject.getter();
            os_log_type_t v306 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v305, v306))
            {
              uint64_t v307 = swift_slowAlloc();
              v425[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v307 = v364;
              swift_bridgeObjectRetain();
              uint64_t v421 = sub_100003F90(v403, v187, v425);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v307 + 12) = 2080;
              sub_100054B4C(&qword_10017D000, (void (*)(uint64_t))type metadata accessor for ApplicationRecord);
              uint64_t v308 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v421 = sub_100003F90(v308, v309, v425);
              uint64_t v186 = v390;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_1000548FC(v184, type metadata accessor for ApplicationRecord);
              _os_log_impl((void *)&_mh_execute_header, v305, v306, "Failed to stage driver %s from app %s", (uint8_t *)v307, 0x16u);
              swift_arrayDestroy();
              uint64_t v67 = v401;
              swift_slowDealloc();
              swift_slowDealloc();
              swift_errorRelease();

              swift_errorRelease();
              swift_errorRelease();
            }
            else
            {
              swift_errorRelease();
              swift_errorRelease();
              swift_bridgeObjectRelease_n();
              sub_1000548FC(v184, type metadata accessor for ApplicationRecord);
              swift_errorRelease();
            }
            v410(v186, v67);
            uint64_t v415 = 0;
            uint64_t v68 = (uint64_t)v388;
            uint64_t v70 = v400;
            uint64_t v64 = v404;
            uint64_t v69 = v412;
            goto LABEL_5;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10000478C((uint64_t)v425);
          URL.appendingPathComponent(_:isDirectory:)();
          char v416 = 0;
          uint64_t v232 = v182[5];
          uint64_t v233 = v182[6];
          sub_1000036B0(v183, v232);
          sub_1001297F4(v232, v233);
          uint64_t v234 = v427;
          sub_1000036B0(v425, v426);
          uint64_t v235 = URL.path.getter();
          LOBYTE(v232) = (*(uint64_t (**)(uint64_t))(v234 + 136))(v235);
          swift_bridgeObjectRelease();
          uint64_t v236 = v192;
          if ((v232 & 1) == 0)
          {
            sub_10000478C((uint64_t)v425);
            uint64_t v67 = v401;
            uint64_t v238 = (void (*)(char *, uint64_t))v402;
            uint64_t v239 = v412;
LABEL_56:
            v425[0] = 0;
            v425[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(55);
            v298._uint64_t countAndFlagsBits = 0x2064657461657243;
            v298._int64_t object = (void *)0xE800000000000000;
            String.append(_:)(v298);
            uint64_t v299 = v357;
            v300._uint64_t countAndFlagsBits = URL.path.getter();
            String.append(_:)(v300);
            swift_bridgeObjectRelease();
            v301._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
            v301._int64_t object = v349;
            String.append(_:)(v301);
            uint64_t v302 = v425[0];
            uint64_t v303 = v425[1];
            sub_100012E3C();
            swift_allocError();
            *(void *)uint64_t v304 = v302;
            *(void *)(v304 + 8) = v303;
            *(_OWORD *)(v304 + 16) = 0u;
            *(_OWORD *)(v304 + 32) = 0u;
            *(_OWORD *)(v304 + 48) = 0u;
            *(void *)(v304 + 64) = 0;
            *(unsigned char *)(v304 + 72) = 19;
            swift_willThrow();
            v238(v299, v239);
            v238(v192, v239);
            (*v391)(v398, v411);
            uint64_t v184 = (uint64_t)v377;
            goto LABEL_57;
          }
          char v237 = v416;
          sub_10000478C((uint64_t)v425);
          uint64_t v67 = v401;
          uint64_t v238 = (void (*)(char *, uint64_t))v402;
          uint64_t v239 = v412;
          if ((v237 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v240 = (uint64_t)v344;
          (*v374)((uint64_t)v344, v398, v411);
          uint64_t v241 = v345;
          sub_100012F8C(v397, v345, type metadata accessor for ApplicationRecord);
          uint64_t v242 = (uint64_t)v385;
          uint64_t v243 = v236;
          uint64_t v244 = v371;
          v371(v385, v243, v239);
          uint64_t v245 = (uint64_t)v343;
          v244(v343, v357, v239);
          uint64_t v246 = (uint64_t)v346;
          static Date.now.getter();
          uint64_t v247 = v348;
          sub_10004339C(v240, v241, v242, v245, v246, v348);
          sub_1000415F0(v247);
          v425[0] = 0;
          v425[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(84);
          v248._uint64_t countAndFlagsBits = 0xD000000000000013;
          v248._int64_t object = v339;
          String.append(_:)(v248);
          sub_100054B4C(&qword_10017D000, (void (*)(uint64_t))type metadata accessor for ApplicationRecord);
          v249._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v249);
          swift_bridgeObjectRelease();
          v250._uint64_t countAndFlagsBits = 0x7264206874697720;
          v250._int64_t object = (void *)0xED00002072657669;
          String.append(_:)(v250);
          v251._uint64_t countAndFlagsBits = v403;
          v251._int64_t object = v405;
          String.append(_:)(v251);
          swift_bridgeObjectRelease();
          v252._uint64_t countAndFlagsBits = 544175136;
          v252._int64_t object = (void *)0xE400000000000000;
          String.append(_:)(v252);
          uint64_t v253 = v373;
          sub_100054B4C(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
          v254._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v254);
          swift_bridgeObjectRelease();
          v255._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
          v255._int64_t object = v338;
          String.append(_:)(v255);
          uint64_t v256 = v247 + *(int *)(v253 + 28);
          v257._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v257);
          swift_bridgeObjectRelease();
          v258._uint64_t countAndFlagsBits = 0x5520676E69737520;
          v258._int64_t object = (void *)0xEC00000020444955;
          String.append(_:)(v258);
          sub_100054B4C(&qword_10017CEF8, (void (*)(uint64_t))&type metadata accessor for UUID);
          v259._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v259);
          swift_bridgeObjectRelease();
          uint64_t v260 = v425[0];
          uint64_t v261 = v425[1];
          uint64_t v262 = v347;
          uint64_t v263 = *v347;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v263 = sub_10000C3BC(0, *((void *)v263 + 2) + 1, 1, v263);
          }
          uint64_t v264 = v392;
          unint64_t v266 = *((void *)v263 + 2);
          unint64_t v265 = *((void *)v263 + 3);
          size_t v267 = v238;
          if (v266 >= v265 >> 1) {
            uint64_t v263 = sub_10000C3BC((char *)(v265 > 1), v266 + 1, 1, v263);
          }
          *((void *)v263 + 2) = v266 + 1;
          size_t v268 = &v263[16 * v266];
          *((void *)v268 + 4) = v260;
          *((void *)v268 + 5) = v261;
          *uint64_t v262 = v263;
          uint64_t v269 = v394;
          uint64_t v270 = v394[5];
          uint64_t v271 = v394[6];
          sub_1000036B0(v264, v270);
          sub_1000B07CC(v270, v271);
          uint64_t v272 = v423;
          uint64_t v273 = v424;
          sub_1000036B0(&v421, v423);
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v273 + 24))(&v419, v256, v272, v273);
          if (v420)
          {
            sub_10000372C(&v419, (uint64_t)v425);
            sub_10000478C((uint64_t)&v421);
            uint64_t v274 = v426;
            uint64_t v275 = v427;
            sub_1000036B0(v425, v426);
            uint64_t v276 = (*(uint64_t (**)(uint64_t, uint64_t))(v275 + 24))(v274, v275);
            if (v277)
            {
              uint64_t v278 = v276;
              uint64_t v279 = v277;
              uint64_t v280 = v269[5];
              uint64_t v281 = v269[6];
              sub_1000036B0(v264, v280);
              sub_100003F24(v280, v281);
              uint64_t v282 = v423;
              uint64_t v283 = v424;
              sub_1000036B0(&v421, v423);
              uint64_t v284 = URL.path.getter();
              sub_100017AB8(v278, v279, v284, v285, v282, v283);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_errorRelease();
              sub_1000548FC(v348, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
              uint64_t v69 = v412;
              uint64_t v64 = v404;
              v267(v357, v412);
              v267(v407, v69);
              (*v391)(v398, v411);
              sub_10000478C((uint64_t)&v421);
              sub_10000478C((uint64_t)v425);
              uint64_t v67 = v401;
LABEL_68:
              uint64_t v68 = (uint64_t)v388;
              uint64_t v70 = v400;
              goto LABEL_5;
            }
            unint64_t v321 = v425;
          }
          else
          {
            sub_1000130EC((uint64_t)&v419, &qword_10017BC78);
            unint64_t v321 = &v421;
          }
          sub_10000478C((uint64_t)v321);
          v322 = v342;
          uint64_t v67 = v401;
          v409(v342, v408, v401);
          uint64_t v323 = v348;
          uint64_t v324 = v341;
          sub_100012F8C(v348, v341, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
          uint64_t v325 = Logger.logObject.getter();
          os_log_type_t v326 = static os_log_type_t.error.getter();
          BOOL v327 = os_log_type_enabled(v325, v326);
          Swift::String v328 = v267;
          uint64_t v69 = v412;
          if (v327)
          {
            uint64_t v329 = v324;
            unint64_t v330 = (uint8_t *)swift_slowAlloc();
            v425[0] = swift_slowAlloc();
            *(_DWORD *)unint64_t v330 = v363;
            uint64_t v331 = URL.path.getter();
            uint64_t v421 = sub_100003F90(v331, v332, v425);
            uint64_t v67 = v401;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v333 = v412;
            sub_1000548FC(v329, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
            _os_log_impl((void *)&_mh_execute_header, v325, v326, "Could not report driver install: could not resolve driver bundle at\n %s", v330, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
            uint64_t v69 = v333;
            v410(v322, v67);
            sub_1000548FC(v348, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
            int v334 = v357;
            uint64_t v335 = v333;
          }
          else
          {

            sub_1000548FC(v324, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
            swift_errorRelease();
            v410(v322, v67);
            sub_1000548FC(v323, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
            int v334 = v357;
            uint64_t v335 = v69;
          }
          uint64_t v64 = v404;
          v328(v334, v335);
          v328(v407, v69);
          (*v391)(v398, v411);
          goto LABEL_68;
        }
        char v229 = v421;
        sub_10000478C((uint64_t)v425);
        uint64_t v67 = v401;
        uint64_t v230 = v411;
        uint64_t v69 = v412;
        if ((v229 & 1) == 0) {
          goto LABEL_61;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v231 = v376;
        sub_1000415F0(v376);
        sub_1000548FC(v231, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        (*v391)((uint64_t)v375, v230);
      }
      uint64_t v70 = v400;
      uint64_t v64 = v404;
LABEL_5:
      os_log_type_t v65 = v399 + 2;
      uint64_t v63 = v70 - 1;
      if (!v63)
      {
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    v402 = v77;
    sub_1000130EC(v68, &qword_10017BEF8);
    v425[0] = 0;
    v425[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v91._uint64_t countAndFlagsBits = 0xD000000000000026;
    v91._int64_t object = v365;
    String.append(_:)(v91);
    sub_100054B4C(&qword_10017D000, (void (*)(uint64_t))type metadata accessor for ApplicationRecord);
    v92._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v92);
    swift_bridgeObjectRelease();
    v93._uint64_t countAndFlagsBits = 0x7264206874697720;
    v93._int64_t object = (void *)0xED00002072657669;
    String.append(_:)(v93);
    v94._uint64_t countAndFlagsBits = v403;
    v94._int64_t object = v76;
    String.append(_:)(v94);
    uint64_t v95 = v425[0];
    uint64_t v96 = v425[1];
    sub_100012E3C();
    uint64_t v97 = swift_allocError();
    *(void *)uint64_t v98 = v95;
    *(void *)(v98 + 8) = v96;
    *(_OWORD *)(v98 + 16) = 0u;
    *(_OWORD *)(v98 + 32) = 0u;
    *(_OWORD *)(v98 + 48) = 0u;
    *(void *)(v98 + 64) = 0;
    *(unsigned char *)(v98 + 72) = 50;
    swift_willThrow();
LABEL_17:
    uint64_t v415 = 0;
    goto LABEL_18;
  }
  return swift_release();
}

uint64_t sub_10005376C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v57 = a2;
  uint64_t v58 = a1;
  uint64_t v65 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v65 - 8);
  uint64_t v7 = __chkstk_darwin(v65 - 8);
  uint64_t v67 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v84 = (char *)&v56 - v9;
  uint64_t v72 = sub_100004700((uint64_t *)&unk_10017EBF0);
  uint64_t v10 = __chkstk_darwin(v72);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v56 - v13;
  uint64_t v15 = type metadata accessor for DriverBinEntry();
  uint64_t v70 = *(void *)(v15 - 8);
  uint64_t v71 = v15;
  __chkstk_darwin(v15);
  uint64_t v79 = (uint64_t)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for UUID();
  uint64_t result = __chkstk_darwin(v78);
  os_log_type_t v77 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = 0;
  int64_t v20 = 0;
  uint64_t v73 = (void *)a3;
  uint64_t v21 = *(void *)(a3 + 64);
  uint64_t v61 = a3 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(a3 + 32);
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  else {
    uint64_t v23 = -1;
  }
  unint64_t v24 = v23 & v21;
  int64_t v62 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v68 = v18 + 16;
  long long v66 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v83 = a4;
  uint64_t v81 = a4 + 56;
  uint64_t v59 = v6;
  uint64_t v82 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v69 = v18;
  uint64_t v63 = (void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v64 = v14;
  uint64_t v80 = v12;
  while (1)
  {
    if (v24)
    {
      uint64_t v75 = (v24 - 1) & v24;
      int64_t v76 = v20;
      unint64_t v27 = __clz(__rbit64(v24)) | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v28 >= v62) {
      return sub_10000DCF0(v58, v57, v60, v73);
    }
    unint64_t v29 = *(void *)(v61 + 8 * v28);
    int64_t v30 = v20 + 1;
    if (!v29)
    {
      int64_t v30 = v20 + 2;
      if (v20 + 2 >= v62) {
        return sub_10000DCF0(v58, v57, v60, v73);
      }
      unint64_t v29 = *(void *)(v61 + 8 * v30);
      if (!v29)
      {
        int64_t v30 = v20 + 3;
        if (v20 + 3 >= v62) {
          return sub_10000DCF0(v58, v57, v60, v73);
        }
        unint64_t v29 = *(void *)(v61 + 8 * v30);
        if (!v29) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v75 = (v29 - 1) & v29;
    int64_t v76 = v30;
    unint64_t v27 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_22:
    uint64_t v32 = v73;
    uint64_t v33 = *(void (**)(void))(v69 + 16);
    uint64_t v34 = v77;
    uint64_t v35 = v78;
    ((void (*)(char *, unint64_t, uint64_t))v33)(v77, v73[6] + *(void *)(v69 + 72) * v27, v78);
    uint64_t v36 = v32[7];
    uint64_t v37 = *(void *)(v70 + 72);
    unint64_t v74 = v27;
    uint64_t v38 = v79;
    sub_100012F8C(v36 + v37 * v27, v79, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v39 = v72;
    uint64_t v40 = (uint64_t)&v14[*(int *)(v72 + 48)];
    ((void (*)(char *, char *, uint64_t))v33)(v14, v34, v35);
    sub_100012F8C(v38, v40, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v41 = (uint64_t)&v80[*(int *)(v39 + 48)];
    v33();
    sub_100012F8C(v40, v41, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v42 = v65;
    uint64_t v43 = *v66;
    (*v66)(v84, v41 + *(int *)(v71 + 28), v65);
    sub_1000548FC(v41, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v44 = v67;
    if (*(void *)(v83 + 16)
      && (uint64_t v45 = v83,
          sub_100054B4C(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL),
          uint64_t v46 = dispatch thunk of Hashable._rawHashValue(seed:)(),
          uint64_t v47 = -1 << *(unsigned char *)(v45 + 32),
          unint64_t v48 = v46 & ~v47,
          ((*(void *)(v81 + ((v48 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v48) & 1) != 0))
    {
      uint64_t v49 = ~v47;
      uint64_t v50 = *(void *)(v59 + 72);
      while (1)
      {
        v43(v44, *(void *)(v83 + 48) + v50 * v48, v42);
        sub_100054B4C(&qword_10017BE98, (void (*)(uint64_t))&type metadata accessor for URL);
        char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v52 = *v82;
        (*v82)(v44, v42);
        if (v51) {
          break;
        }
        unint64_t v48 = (v48 + 1) & v49;
        if (((*(void *)(v81 + ((v48 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v48) & 1) == 0) {
          goto LABEL_5;
        }
      }
      v52(v84, v42);
      uint64_t v14 = v64;
      sub_1000130EC((uint64_t)v64, (uint64_t *)&unk_10017EBF0);
      uint64_t v53 = *v63;
      uint64_t v54 = v78;
      (*v63)(v80, v78);
      sub_1000548FC(v79, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v53)(v77, v54);
      *(unint64_t *)((char *)v58 + ((v74 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v74;
      BOOL v55 = __OFADD__(v60++, 1);
      unint64_t v24 = v75;
      int64_t v20 = v76;
      if (v55)
      {
        __break(1u);
        return sub_10000DCF0(v58, v57, v60, v73);
      }
    }
    else
    {
LABEL_5:
      (*v82)(v84, v42);
      uint64_t v14 = v64;
      sub_1000130EC((uint64_t)v64, (uint64_t *)&unk_10017EBF0);
      uint64_t v25 = *v63;
      uint64_t v26 = v78;
      (*v63)(v80, v78);
      sub_1000548FC(v79, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v77, v26);
      unint64_t v24 = v75;
      int64_t v20 = v76;
    }
  }
  uint64_t v31 = v20 + 4;
  if (v20 + 4 >= v62) {
    return sub_10000DCF0(v58, v57, v60, v73);
  }
  unint64_t v29 = *(void *)(v61 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v20 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v62) {
      return sub_10000DCF0(v58, v57, v60, v73);
    }
    unint64_t v29 = *(void *)(v61 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100053F34(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_10005376C((unint64_t *)((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_10005376C((unint64_t *)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t sub_1000540F0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = a2;
  uint64_t v45 = a1;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v61 = (char *)&v44 - v13;
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v44 - v16;
  int64_t v18 = 0;
  uint64_t v53 = v15;
  uint64_t v54 = a3;
  uint64_t v19 = *(void *)(a3 + 56);
  uint64_t v48 = 0;
  uint64_t v49 = a3 + 56;
  uint64_t v20 = 1 << *(unsigned char *)(a3 + 32);
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v22 = v21 & v19;
  int64_t v50 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v59 = a5;
  uint64_t v60 = v15 + 16;
  uint64_t v52 = (void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v58 = a5 + 56;
  uint64_t v46 = v17;
  uint64_t v47 = a4;
  while (1)
  {
    if (v22)
    {
      uint64_t v56 = (v22 - 1) & v22;
      int64_t v57 = v18;
      unint64_t v24 = __clz(__rbit64(v22)) | (v18 << 6);
      goto LABEL_23;
    }
    int64_t v25 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v25 >= v50) {
      goto LABEL_35;
    }
    unint64_t v26 = *(void *)(v49 + 8 * v25);
    int64_t v27 = v18 + 1;
    if (!v26)
    {
      int64_t v27 = v18 + 2;
      if (v18 + 2 >= v50) {
        goto LABEL_35;
      }
      unint64_t v26 = *(void *)(v49 + 8 * v27);
      if (!v26)
      {
        int64_t v27 = v18 + 3;
        if (v18 + 3 >= v50) {
          goto LABEL_35;
        }
        unint64_t v26 = *(void *)(v49 + 8 * v27);
        if (!v26) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v56 = (v26 - 1) & v26;
    int64_t v57 = v27;
    unint64_t v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_23:
    unint64_t v55 = v24;
    uint64_t v29 = *(void *)(v53 + 72);
    int64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v53 + 16);
    v30(v17, *(void *)(v54 + 48) + v29 * v24, v8);
    char v31 = (*(uint64_t (**)(char *))(*(void *)a4 + 392))(v17);
    uint64_t v32 = v61;
    v30(v61, (unint64_t)v17, v8);
    if ((v31 & 1) == 0)
    {
      uint64_t v23 = *v52;
      (*v52)(v32, v8);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v17, v8);
      goto LABEL_6;
    }
    uint64_t v33 = v59;
    uint64_t v34 = *(void *)(v59 + 16);
    uint64_t v35 = v52;
    uint64_t v51 = (unint64_t)v52 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    if (v34
      && (sub_100054B4C(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL),
          uint64_t v36 = dispatch thunk of Hashable._rawHashValue(seed:)(),
          uint64_t v37 = -1 << *(unsigned char *)(v33 + 32),
          unint64_t v38 = v36 & ~v37,
          ((*(void *)(v58 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38) & 1) != 0))
    {
      uint64_t v39 = ~v37;
      while (1)
      {
        v30(v11, *(void *)(v59 + 48) + v38 * v29, v8);
        sub_100054B4C(&qword_10017BE98, (void (*)(uint64_t))&type metadata accessor for URL);
        char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v41 = *v35;
        (*v35)(v11, v8);
        if (v40) {
          break;
        }
        unint64_t v38 = (v38 + 1) & v39;
        if (((*(void *)(v58 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38) & 1) == 0)
        {
          v41(v61, v8);
          goto LABEL_30;
        }
      }
      v41(v61, v8);
      uint64_t v17 = v46;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v41)(v46, v8);
      a4 = v47;
LABEL_6:
      unint64_t v22 = v56;
      int64_t v18 = v57;
    }
    else
    {
      uint64_t v41 = *v35;
      (*v35)(v61, v8);
LABEL_30:
      uint64_t v17 = v46;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v41)(v46, v8);
      *(unint64_t *)((char *)v45 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v55;
      a4 = v47;
      BOOL v42 = __OFADD__(v48++, 1);
      unint64_t v22 = v56;
      int64_t v18 = v57;
      if (v42) {
        goto LABEL_37;
      }
    }
  }
  uint64_t v28 = v18 + 4;
  if (v18 + 4 >= v50)
  {
LABEL_35:
    uint64_t v43 = v54;
    swift_retain();
    return sub_10004E0E0(v45, v44, v48, v43);
  }
  unint64_t v26 = *(void *)(v49 + 8 * v28);
  if (v26)
  {
    int64_t v27 = v18 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v27 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v27 >= v50) {
      goto LABEL_35;
    }
    unint64_t v26 = *(void *)(v49 + 8 * v27);
    ++v28;
    if (v26) {
      goto LABEL_22;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_10005460C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  swift_retain_n();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1000540F0((unint64_t *)((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1000540F0((unint64_t *)v13, v9, a1, a2, a3);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  return v12;
}

unint64_t sub_100054840()
{
  unint64_t result = qword_10017CFF8;
  if (!qword_10017CFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CFF8);
  }
  return result;
}

uint64_t sub_100054894(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000548FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10005495C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100054968()
{
  return type metadata accessor for DriverBinManager();
}

uint64_t type metadata accessor for DriverBinManager()
{
  uint64_t result = qword_100183730;
  if (!qword_100183730) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000549BC()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_100054AC4();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100054AC4()
{
  if (!qword_10017C9D0)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017C9D0);
    }
  }
}

uint64_t sub_100054B1C(uint64_t a1, uint64_t a2)
{
  return sub_10004993C(a1, a2, *(void *)(v2 + 16)) & 1;
}

uint64_t sub_100054B4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100054B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v127 = a2;
  int v136 = a7;
  uint64_t v124 = a3;
  uint64_t v126 = a1;
  uint64_t v8 = sub_100004700(&qword_10017C918);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v121 = (uint64_t)v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v123 = (uint64_t)v110 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v110 - v13;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v120 = (char *)v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  Swift::String v122 = (char *)v110 - v20;
  __chkstk_darwin(v19);
  uint64_t v131 = (char *)v110 - v21;
  uint64_t v22 = sub_100004700(&qword_10017D1D8);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v125 = (uint64_t)v110 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  int64_t v27 = (char *)v110 - v26;
  uint64_t v28 = (char *)v110 + *(int *)(v25 + 48) - v26;
  uint64_t v128 = v25;
  uint64_t v29 = (char *)v110 + *(int *)(v25 + 64) - v26;
  int64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v30((char *)v110 - v26, 1, 1, v15);
  uint64_t v130 = v28;
  v30(v28, 1, 1, v15);
  uint64_t v129 = v29;
  v30(v29, 1, 1, v15);
  char v31 = (uint64_t *)sub_1000A1A0C();
  uint64_t v32 = v31;
  if (!*(void *)(a4 + 16))
  {
    long long v134 = 0u;
    long long v135 = 0u;
LABEL_10:
    sub_1000130EC((uint64_t)&v134, &qword_10017C018);
    goto LABEL_11;
  }
  uint64_t v119 = v16;
  uint64_t v33 = *v31;
  uint64_t v34 = v31[1];
  swift_bridgeObjectRetain();
  unint64_t v35 = sub_1000048E0(v33, v34);
  if (v36)
  {
    sub_1000047DC(*(void *)(a4 + 56) + 32 * v35, (uint64_t)&v134);
  }
  else
  {
    long long v134 = 0u;
    long long v135 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v135 + 1)) {
    goto LABEL_10;
  }
  if (swift_dynamicCast())
  {
    uint64_t v117 = a4;
    uint64_t v118 = v27;
    uint64_t v38 = v132;
    unint64_t v37 = v133;
    sub_100012DE4(v132, v133);
    sub_1000EF120(v38, v37, (uint64_t)v14);
    uint64_t v39 = v119;
    uint64_t v40 = v119 + 48;
    os_log_type_t v116 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48);
    if (v116(v14, 1, v15) == 1)
    {
      sub_100012A10(v38, v37);
      sub_1000130EC((uint64_t)v14, &qword_10017C918);
      int64_t v27 = v118;
      goto LABEL_11;
    }
    uint64_t v113 = v40;
    unint64_t v115 = v37;
    int64_t v50 = v131;
    uint64_t v112 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v112(v131, v14, v15);
    int64_t v27 = v118;
    sub_1000130EC((uint64_t)v118, &qword_10017C918);
    uint64_t v111 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
    v111(v27, v50, v15);
    v30(v27, 0, 1, v15);
    char v51 = v136;
    if (sub_100029B78(v136, 1) || sub_100029B78(v51, 2))
    {
      v110[1] = v39 + 32;
      uint64_t v52 = (uint64_t *)sub_1000A19F4();
      uint64_t v53 = v52;
      uint64_t v54 = v117;
      uint64_t v55 = *(void *)(v117 + 16);
      uint64_t v114 = v38;
      if (v55)
      {
        uint64_t v56 = *v52;
        uint64_t v57 = v52[1];
        swift_bridgeObjectRetain();
        unint64_t v58 = sub_1000048E0(v56, v57);
        if (v59)
        {
          sub_1000047DC(*(void *)(v54 + 56) + 32 * v58, (uint64_t)&v134);
        }
        else
        {
          long long v134 = 0u;
          long long v135 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v135 + 1))
        {
          if ((swift_dynamicCast() & 1) == 0)
          {
LABEL_29:
            unint64_t v71 = sub_1000F11D0(v136);
            uint64_t v73 = v72;
            *(void *)&long long v134 = 0;
            *((void *)&v134 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(22);
            swift_bridgeObjectRelease();
            *(void *)&long long v134 = 0xD000000000000014;
            *((void *)&v134 + 1) = 0x80000001001467C0;
            uint64_t v74 = *v53;
            uint64_t v75 = (void *)v53[1];
            swift_bridgeObjectRetain();
            v76._uint64_t countAndFlagsBits = v74;
            v76._int64_t object = v75;
            String.append(_:)(v76);
            swift_bridgeObjectRelease();
            long long v77 = v134;
            sub_100012E3C();
            swift_allocError();
            *(void *)uint64_t v78 = v71;
            *(void *)(v78 + 8) = v73;
            *(_OWORD *)(v78 + 16) = v77;
            *(_OWORD *)(v78 + 32) = 0u;
            *(_OWORD *)(v78 + 48) = 0u;
            *(void *)(v78 + 64) = 0;
            *(unsigned char *)(v78 + 72) = 6;
            swift_willThrow();
            sub_100012A10(v114, v115);
            (*(void (**)(char *, uint64_t))(v119 + 8))(v131, v15);
            return sub_1000130EC((uint64_t)v27, &qword_10017D1D8);
          }
          uint64_t v66 = v132;
          unint64_t v67 = v133;
          sub_100012DE4(v132, v133);
          uint64_t v68 = v123;
          sub_1000EF120(v66, v67, v123);
          if (v116((char *)v68, 1, v15) == 1)
          {
            sub_100012A10(v66, v67);
            uint64_t v69 = &qword_10017C918;
            uint64_t v70 = (long long *)v68;
LABEL_28:
            sub_1000130EC((uint64_t)v70, v69);
            goto LABEL_29;
          }
          uint64_t v79 = v122;
          v112(v122, (char *)v68, v15);
          uint64_t v80 = (uint64_t)v130;
          sub_1000130EC((uint64_t)v130, &qword_10017C918);
          v111((char *)v80, v79, v15);
          v30((char *)v80, 0, 1, v15);
          if (sub_100029B78(v136, 2))
          {
            uint64_t v81 = (uint64_t *)sub_1000A1A00();
            uint64_t v82 = v117;
            if (*(void *)(v117 + 16))
            {
              uint64_t v83 = v81;
              uint64_t v123 = v66;
              uint64_t v84 = *v81;
              uint64_t v85 = v81[1];
              swift_bridgeObjectRetain();
              unint64_t v86 = sub_1000048E0(v84, v85);
              if (v87)
              {
                sub_1000047DC(*(void *)(v82 + 56) + 32 * v86, (uint64_t)&v134);
              }
              else
              {
                long long v134 = 0u;
                long long v135 = 0u;
              }
              unint64_t v89 = v115;
              swift_bridgeObjectRelease();
              uint64_t v66 = v123;
              if (*((void *)&v135 + 1))
              {
                if (swift_dynamicCast())
                {
                  uint64_t v91 = v132;
                  unint64_t v90 = v133;
                  sub_100012DE4(v132, v133);
                  uint64_t v117 = v91;
                  uint64_t v92 = v91;
                  unint64_t v93 = v90;
                  uint64_t v94 = v121;
                  sub_1000EF120(v92, v93, v121);
                  if (v116((char *)v94, 1, v15) == 1)
                  {
                    sub_1000130EC(v94, &qword_10017C918);
                    unint64_t v95 = sub_1000F11D0(v136);
                    unint64_t v96 = v67;
                    uint64_t v98 = v97;
                    *(void *)&long long v134 = 0;
                    *((void *)&v134 + 1) = 0xE000000000000000;
                    _StringGuts.grow(_:)(22);
                    swift_bridgeObjectRelease();
                    *(void *)&long long v134 = 0xD000000000000014;
                    *((void *)&v134 + 1) = 0x80000001001467C0;
                    uint64_t v99 = *v83;
                    uint64_t v100 = (void *)v83[1];
                    swift_bridgeObjectRetain();
                    v101._uint64_t countAndFlagsBits = v99;
                    v101._int64_t object = v100;
                    String.append(_:)(v101);
                    swift_bridgeObjectRelease();
                    long long v102 = v134;
                    sub_100012E3C();
                    swift_allocError();
                    *(void *)uint64_t v103 = v95;
                    *(void *)(v103 + 8) = v98;
                    *(_OWORD *)(v103 + 16) = v102;
                    *(_OWORD *)(v103 + 32) = 0u;
                    *(_OWORD *)(v103 + 48) = 0u;
                    *(void *)(v103 + 64) = 0;
                    *(unsigned char *)(v103 + 72) = 6;
                    swift_willThrow();
                    sub_100012A10(v117, v93);
                    sub_100012A10(v123, v96);
                    sub_100012A10(v114, v115);
                    uint64_t v104 = *(void (**)(char *, uint64_t))(v119 + 8);
                    v104(v122, v15);
                    v104(v131, v15);
                    return sub_1000130EC((uint64_t)v27, &qword_10017D1D8);
                  }
                  sub_100012A10(v117, v93);
                  sub_100012A10(v123, v67);
                  sub_100012A10(v114, v89);
                  uint64_t v106 = *(void (**)(char *, uint64_t))(v119 + 8);
                  v106(v122, v15);
                  v106(v131, v15);
                  uint64_t v107 = v120;
                  uint64_t v108 = (void (*)(uint64_t, char *, uint64_t))v112;
                  v112(v120, (char *)v94, v15);
                  uint64_t v109 = (uint64_t)v129;
                  sub_1000130EC((uint64_t)v129, &qword_10017C918);
                  v108(v109, v107, v15);
                  v30((char *)v109, 0, 1, v15);
                  goto LABEL_20;
                }
                sub_100012A10(v66, v67);
                sub_100012A10(v114, v89);
LABEL_43:
                uint64_t v60 = v124;
                uint64_t v105 = *(void (**)(char *, uint64_t))(v119 + 8);
                v105(v122, v15);
                v105(v131, v15);
                goto LABEL_21;
              }
            }
            else
            {
              long long v134 = 0u;
              long long v135 = 0u;
              unint64_t v89 = v115;
            }
            sub_100012A10(v66, v67);
            sub_100012A10(v114, v89);
            sub_1000130EC((uint64_t)&v134, &qword_10017C018);
            goto LABEL_43;
          }
          sub_100012A10(v66, v67);
          sub_100012A10(v114, v115);
          uint64_t v88 = *(void (**)(char *, uint64_t))(v119 + 8);
          v88(v79, v15);
          v88(v131, v15);
LABEL_20:
          uint64_t v60 = v124;
LABEL_21:
          uint64_t v62 = v126;
          uint64_t v61 = v127;
          uint64_t v63 = v125;
          uint64_t v64 = v125 + *(int *)(v128 + 48);
          uint64_t v65 = v125 + *(int *)(v128 + 64);
          sub_100057A70((uint64_t)v27, v125);
          sub_100057A70((uint64_t)v130, v64);
          sub_100057A70((uint64_t)v129, v65);
          sub_100057AD8(v63, v62);
          sub_100057AD8(v64, v61);
          sub_100057AD8(v65, v60);
          return sub_1000130EC((uint64_t)v27, &qword_10017D1D8);
        }
      }
      else
      {
        long long v134 = 0u;
        long long v135 = 0u;
      }
      uint64_t v69 = &qword_10017C018;
      uint64_t v70 = &v134;
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v131, v15);
    sub_100012A10(v38, v115);
    goto LABEL_20;
  }
LABEL_11:
  unint64_t v41 = sub_1000F11D0(v136);
  uint64_t v43 = v42;
  *(void *)&long long v134 = 0;
  *((void *)&v134 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  *(void *)&long long v134 = 0xD00000000000001CLL;
  *((void *)&v134 + 1) = 0x8000000100146F70;
  uint64_t v44 = *v32;
  uint64_t v45 = (void *)v32[1];
  swift_bridgeObjectRetain();
  v46._uint64_t countAndFlagsBits = v44;
  v46._int64_t object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  long long v47 = v134;
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v48 = v41;
  *(void *)(v48 + 8) = v43;
  *(_OWORD *)(v48 + 16) = v47;
  *(_OWORD *)(v48 + 32) = 0u;
  *(_OWORD *)(v48 + 48) = 0u;
  *(void *)(v48 + 64) = 0;
  *(unsigned char *)(v48 + 72) = 6;
  swift_willThrow();
  return sub_1000130EC((uint64_t)v27, &qword_10017D1D8);
}

uint64_t sub_1000557EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 128))();
  if (!v4)
  {
    sub_100054B94(a1, a2, a3, result, v9, v10, *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
    return swift_bridgeObjectRelease();
  }
  return result;
}

_OWORD *sub_100055888()
{
  uint64_t v1 = v0;
  uint64_t v54 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v53 = static os_signpost_type_t.begin.getter();
  id v5 = (id)*sub_1000EFCB4();
  uint64_t v52 = *sub_1000A22AC();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100132F10;
  unint64_t v7 = sub_1000F11D0(*(unsigned char *)(v1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_10002A1DC();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v54);
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1000F1040(v10);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v54 = v1;
  uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
  uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 32);
  uint64_t v18 = sub_1000036B0((void *)(v1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data), v16);
  uint64_t v19 = sub_1000A1B5C();
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v22 = v19[2];
  uint64_t v23 = v19[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = v20;
  uint64_t v25 = v15;
  uint64_t v26 = v18;
  uint64_t v27 = v55;
  uint64_t v28 = sub_1000FFA30(v24, v21, v22, v23, v11, v13, v25, v16, v17);
  if (v27)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    uint64_t v41 = v54;
    goto LABEL_19;
  }
  uint64_t v30 = v28;
  unint64_t v31 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v31 >> 60 == 15)
  {
    *(void *)&v58[0] = 0;
    *((void *)&v58[0] + 1) = 0xE000000000000000;
    uint64_t v26 = v58;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v32 = 0xD000000000000020;
    *(void *)(v32 + 8) = 0x8000000100146FB0;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(void *)(v32 + 64) = 0;
    *(unsigned char *)(v32 + 72) = 24;
    swift_willThrow();
    goto LABEL_18;
  }
  sub_100004700((uint64_t *)&unk_10017FA80);
  sub_1000F0410();
  uint64_t v26 = *(_OWORD **)&v58[0];
  if (!*(void *)&v58[0])
  {
    sub_100012E3C();
    swift_allocError();
    *(_OWORD *)uint64_t v39 = 0u;
    *(_OWORD *)(v39 + 16) = 0u;
    *(_OWORD *)(v39 + 32) = 0u;
    *(_OWORD *)(v39 + 48) = 0u;
    *(void *)(v39 + 64) = 0;
    *(unsigned char *)(v39 + 72) = 73;
    swift_willThrow();
    sub_10002404C(v30, v31);
    goto LABEL_18;
  }
  uint64_t v33 = (uint64_t *)sub_1000A1A18();
  if (!*((void *)v26 + 2))
  {
    long long v56 = 0u;
    long long v57 = 0u;
LABEL_16:
    sub_10002404C(v30, v31);
    sub_1000130EC((uint64_t)&v56, &qword_10017C018);
    uint64_t v41 = v54;
    goto LABEL_19;
  }
  uint64_t v34 = v33;
  uint64_t v35 = *v33;
  uint64_t v36 = v33[1];
  swift_bridgeObjectRetain();
  unint64_t v37 = sub_1000048E0(v35, v36);
  if (v38)
  {
    sub_1000047DC(*((void *)v26 + 7) + 32 * v37, (uint64_t)&v56);
  }
  else
  {
    long long v56 = 0u;
    long long v57 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v57 + 1)) {
    goto LABEL_16;
  }
  sub_10001889C(&v56, v58);
  sub_1000047DC((uint64_t)v58, (uint64_t)&v56);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    *(void *)&long long v56 = 0xD000000000000017;
    *((void *)&v56 + 1) = 0x8000000100146FE0;
    uint64_t v46 = *v34;
    uint64_t v45 = (void *)v34[1];
    swift_bridgeObjectRetain();
    v47._uint64_t countAndFlagsBits = v46;
    v47._int64_t object = v45;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._int64_t object = (void *)0x8000000100147000;
    v48._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v48);
    uint64_t v26 = (_OWORD *)*((void *)&v56 + 1);
    uint64_t v49 = v56;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v50 = v49;
    *(void *)(v50 + 8) = v26;
    *(_OWORD *)(v50 + 16) = 0u;
    *(_OWORD *)(v50 + 32) = 0u;
    *(_OWORD *)(v50 + 48) = 0u;
    *(void *)(v50 + 64) = 0;
    *(unsigned char *)(v50 + 72) = 24;
    swift_willThrow();
    sub_10002404C(v30, v31);
    sub_10000478C((uint64_t)v58);
    goto LABEL_18;
  }
  uint64_t v40 = v59;
  uint64_t v41 = v54;
  if (*(void *)(v54 + 16) >= v59)
  {
    sub_10000478C((uint64_t)v58);
    sub_10002404C(v30, v31);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    *(void *)&long long v56 = 0xD000000000000013;
    *((void *)&v56 + 1) = 0x8000000100147020;
    uint64_t v59 = v40;
    v42._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    uint64_t v26 = (_OWORD *)*((void *)&v56 + 1);
    uint64_t v43 = v56;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v44 = v43;
    *(void *)(v44 + 8) = v26;
    *(_OWORD *)(v44 + 16) = 0u;
    *(_OWORD *)(v44 + 32) = 0u;
    *(_OWORD *)(v44 + 48) = 0u;
    *(void *)(v44 + 64) = 0;
    *(unsigned char *)(v44 + 72) = 25;
    swift_willThrow();
    sub_10002404C(v30, v31);
    sub_10000478C((uint64_t)v58);
  }
LABEL_19:
  sub_100055EF0(v41);
  return v26;
}

uint64_t sub_100055EF0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12[3] = static os_signpost_type_t.end.getter();
  id v6 = (id)*sub_1000EFCB4();
  sub_1000A22AC();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100132F10;
  unint64_t v8 = sub_1000F11D0(*(unsigned char *)(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10002A1DC();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1000560A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v33 = a4;
  uint64_t v10 = sub_100004700(&qword_10017C918);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)(v4 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  uint64_t v14 = *(void *)(v4 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
  unint64_t v15 = v13[4];
  sub_1000036B0(v13, v14);
  uint64_t v16 = (uint64_t *)sub_1000A2114();
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  swift_bridgeObjectRetain();
  sub_1000FFA64(v17, v18, a1, a2, a3, v14, v15, (uint64_t)&v26);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v6)
  {
    uint64_t v20 = v33;
    if (v27)
    {
      sub_10000372C(&v26, (uint64_t)v29);
      uint64_t v32 = v28;
      uint64_t v21 = v30;
      uint64_t v22 = v31;
      sub_1000036B0(v29, v30);
      sub_100100F48(a1, a2, a3, v21, v22, (uint64_t)v12);
      uint64_t v23 = type metadata accessor for UUID();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v12, 1, v23) == 1)
      {
        sub_1000130EC((uint64_t)v12, &qword_10017C918);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v20, 1, 1, v23);
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v20, v12, v23);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v20, 0, 1, v23);
      }
      return sub_1000130EC((uint64_t)v29, &qword_10017D1E8);
    }
    else
    {
      sub_1000130EC((uint64_t)&v26, &qword_10017D1E0);
      uint64_t v25 = type metadata accessor for UUID();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v20, 1, 1, v25);
    }
  }
  return result;
}

uint64_t sub_100056344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = (void *)(v3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
  unint64_t v11 = v9[4];
  uint64_t v12 = sub_1000036B0(v9, v10);
  uint64_t v13 = (uint64_t *)sub_1000A2114();
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  swift_bridgeObjectRetain();
  uint64_t v16 = v10;
  uint64_t v17 = (uint64_t)v12;
  sub_1000FFA64(v14, v15, a1, a2, a3, v16, v11, (uint64_t)&v25);
  swift_bridgeObjectRelease();
  if (!v5)
  {
    if (v26)
    {
      sub_10000372C(&v25, (uint64_t)v28);
      uint64_t v31 = v27;
      uint64_t v19 = v29;
      uint64_t v20 = v30;
      sub_1000036B0(v28, v29);
      unint64_t v21 = sub_1001011F0(a1, a2, a3, v19, v20);
      if ((v22 & 1) == 0)
      {
        uint64_t v17 = sub_1000FF1EC(v21);
        sub_1000130EC((uint64_t)v28, &qword_10017D1E8);
        return v17;
      }
      uint64_t v23 = &qword_10017D1E8;
      uint64_t v24 = (long long *)v28;
    }
    else
    {
      uint64_t v23 = &qword_10017D1E0;
      uint64_t v24 = &v25;
    }
    sub_1000130EC((uint64_t)v24, v23);
    return 0;
  }
  return v17;
}

uint64_t sub_1000564C0(uint64_t a1, unint64_t a2)
{
  uint64_t isUniquelyReferenced_nonNull_native = v3;
  uint64_t v6 = *(unint64_t *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1000F1040(v6);
  uint64_t v9 = v8;
  unint64_t v11 = v10;
  if (a2 >> 62) {
    goto LABEL_123;
  }
  uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  uint64_t v117 = v7;
  uint64_t v119 = isUniquelyReferenced_nonNull_native;
  unint64_t v115 = v11;
  if (v12)
  {
    uint64_t v113 = v2;
    v125[0] = _swiftEmptyArrayStorage;
    sub_10000C884(0, v12 & ~(v12 >> 63), 0);
    if (v12 < 0)
    {
      __break(1u);
LABEL_125:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x1000570F4);
    }
    uint64_t v122 = v12;
    uint64_t v111 = v9;
    uint64_t v13 = 0;
    uint64_t v14 = (void *)v125[0];
    unint64_t v15 = a2 & 0xC000000000000001;
    unint64_t v16 = a2;
    do
    {
      if (v15)
      {
        uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v17 = *(void *)(a2 + 8 * v13 + 32);
        swift_retain();
      }
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v17 + 144))();
      uint64_t v20 = v19;
      swift_release();
      v125[0] = v14;
      unint64_t v22 = v14[2];
      unint64_t v21 = v14[3];
      if (v22 >= v21 >> 1)
      {
        sub_10000C884(v21 > 1, v22 + 1, 1);
        uint64_t v14 = (void *)v125[0];
      }
      ++v13;
      v14[2] = v22 + 1;
      uint64_t v23 = &v14[2 * v22];
      v23[4] = v18;
      v23[5] = v20;
      a2 = v16;
    }
    while (v122 != v13);
    uint64_t v9 = v111;
    uint64_t v2 = v113;
  }
  else
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  uint64_t v24 = (unint64_t *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  uint64_t v25 = *(unint64_t *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
  uint64_t v26 = *(unint64_t *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 32);
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1000036B0(v24, v25);
  unint64_t v11 = (unint64_t)&off_10016B528;
  uint64_t v27 = sub_1000597A4((uint64_t)&off_10016B528);
  swift_arrayDestroy();
  uint64_t v28 = v26;
  uint64_t v2 = (unint64_t *)isUniquelyReferenced_nonNull_native;
  uint64_t v29 = sub_100101A94((uint64_t)v14, v117, v9, v115, v27, v25, v28);
  if (v119)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v25;
  }
  uint64_t v7 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v127 = sub_100057104((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v30 = sub_100057104((uint64_t)_swiftEmptyArrayStorage);
  int64_t v31 = 0;
  uint64_t v126 = (unint64_t *)v30;
  uint64_t v108 = v7;
  uint64_t v109 = v7 + 64;
  uint64_t v32 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & *(void *)(v7 + 64);
  int64_t v110 = (unint64_t)(v32 + 63) >> 6;
LABEL_20:
  while (v34)
  {
    unint64_t v35 = __clz(__rbit64(v34));
    v34 &= v34 - 1;
    unint64_t v36 = v35 | (v31 << 6);
LABEL_33:
    uint64_t v40 = *(void *)(*(void *)(v7 + 56) + 8 * v36);
    uint64_t v9 = *(void *)(v40 + 16);
    if (v9)
    {
      unint64_t v112 = v34;
      int64_t v114 = v31;
      uint64_t v41 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v36);
      uint64_t v116 = *v41;
      uint64_t v118 = v41[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v2 = (unint64_t *)(v40 + 48);
      while (1)
      {
        uint64_t v7 = *(v2 - 2);
        a2 = *(v2 - 1);
        unint64_t v43 = *v2;
        v2 += 3;
        unint64_t v42 = v43;
        switch(v43 >> 62)
        {
          case 1uLL:
            uint64_t v62 = *(void *)((v42 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            uint64_t v121 = *(void *)((v42 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v124 = v2;
            uint64_t v2 = v126;
            unint64_t v63 = v126[2];
            swift_bridgeObjectRetain();
            if (v63)
            {
              swift_bridgeObjectRetain();
              sub_100059928(v42);
              sub_1000048E0(v7, a2);
              uint64_t isUniquelyReferenced_nonNull_native = v64;
              swift_bridgeObjectRelease();
              if (isUniquelyReferenced_nonNull_native) {
                goto LABEL_84;
              }
            }
            else
            {
              sub_100059928(v42);
            }
            swift_bridgeObjectRetain();
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v125[0] = v2;
            unint64_t v11 = sub_1000048E0(v7, a2);
            unint64_t v83 = v2[2];
            BOOL v84 = (v82 & 1) == 0;
            uint64_t v85 = v83 + v84;
            if (__OFADD__(v83, v84)) {
              goto LABEL_116;
            }
            char v86 = v82;
            if ((uint64_t)v2[3] >= v85)
            {
              if (isUniquelyReferenced_nonNull_native)
              {
                uint64_t v2 = (unint64_t *)v125[0];
                if (v82) {
                  goto LABEL_82;
                }
              }
              else
              {
                sub_10005909C();
                uint64_t v2 = (unint64_t *)v125[0];
                if (v86) {
                  goto LABEL_82;
                }
              }
            }
            else
            {
              sub_100058364(v85, isUniquelyReferenced_nonNull_native);
              unint64_t v87 = sub_1000048E0(v7, a2);
              if ((v86 & 1) != (v88 & 1)) {
                goto LABEL_125;
              }
              unint64_t v11 = v87;
              uint64_t v2 = (unint64_t *)v125[0];
              if (v86)
              {
LABEL_82:
                uint64_t isUniquelyReferenced_nonNull_native = v2[7];
                swift_bridgeObjectRelease();
                *(void *)(isUniquelyReferenced_nonNull_native + 8 * v11) = _swiftEmptyArrayStorage;
                goto LABEL_83;
              }
            }
            v2[(v11 >> 6) + 8] |= 1 << v11;
            unint64_t v89 = (uint64_t *)(v2[6] + 16 * v11);
            *unint64_t v89 = v7;
            v89[1] = a2;
            *(void *)(v2[7] + 8 * v11) = _swiftEmptyArrayStorage;
            unint64_t v90 = v2[2];
            BOOL v37 = __OFADD__(v90, 1);
            unint64_t v91 = v90 + 1;
            if (v37) {
              goto LABEL_119;
            }
            v2[2] = v91;
            swift_bridgeObjectRetain();
LABEL_83:
            uint64_t v126 = v2;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_84:
            swift_bridgeObjectRetain();
            unint64_t v93 = sub_100057220(v125, v7, a2);
            unint64_t v11 = *v92;
            if (*v92)
            {
              uint64_t v94 = v92;
              swift_bridgeObjectRetain();
              char v95 = swift_isUniquelyReferenced_nonNull_native();
              *uint64_t v94 = v11;
              if ((v95 & 1) == 0)
              {
                unint64_t v11 = (unint64_t)sub_10000C3BC(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
                *uint64_t v94 = v11;
              }
              unint64_t v97 = *(void *)(v11 + 16);
              unint64_t v96 = *(void *)(v11 + 24);
              uint64_t isUniquelyReferenced_nonNull_native = v97 + 1;
              if (v97 >= v96 >> 1)
              {
                unint64_t v11 = (unint64_t)sub_10000C3BC((char *)(v96 > 1), v97 + 1, 1, (char *)v11);
                *uint64_t v94 = v11;
              }
              uint64_t v2 = v124;
              *(void *)(v11 + 16) = isUniquelyReferenced_nonNull_native;
              unint64_t v98 = v11 + 16 * v97;
              *(void *)(v98 + 32) = v121;
              *(void *)(v98 + 40) = v62;
              ((void (*)(void *, void))v93)(v125, 0);
            }
            else
            {
              ((void (*)(void *, void))v93)(v125, 0);
              uint64_t v2 = v124;
            }
            swift_bridgeObjectRelease_n();
            sub_10005994C(v42);
            goto LABEL_37;
          case 2uLL:
            uint64_t v123 = v2;
            uint64_t v44 = (uint64_t *)((v42 & 0x3FFFFFFFFFFFFFFFLL) + 16);
            uint64_t v45 = (uint64_t *)((v42 & 0x3FFFFFFFFFFFFFFFLL) + 24);
            goto LABEL_41;
          case 3uLL:
            if (v42 != 0xC000000000000010) {
              goto LABEL_37;
            }
            uint64_t v49 = v2;
            uint64_t v2 = (unint64_t *)v127;
            uint64_t v50 = *(void *)(v127 + 16);
            swift_bridgeObjectRetain();
            if (v50)
            {
              swift_bridgeObjectRetain();
              sub_1000048E0(v7, a2);
              uint64_t isUniquelyReferenced_nonNull_native = v51;
              swift_bridgeObjectRelease();
              if (isUniquelyReferenced_nonNull_native) {
                goto LABEL_96;
              }
            }
            swift_bridgeObjectRetain();
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v125[0] = v2;
            unint64_t v53 = sub_1000048E0(v7, a2);
            unint64_t v54 = v2[2];
            BOOL v55 = (v52 & 1) == 0;
            uint64_t v56 = v54 + v55;
            if (__OFADD__(v54, v55)) {
              goto LABEL_118;
            }
            unint64_t v11 = v52;
            if ((uint64_t)v2[3] >= v56)
            {
              if (isUniquelyReferenced_nonNull_native)
              {
                uint64_t v2 = (unint64_t *)v125[0];
                if (v52) {
                  goto LABEL_94;
                }
              }
              else
              {
                sub_10005909C();
                uint64_t v2 = (unint64_t *)v125[0];
                if (v11) {
                  goto LABEL_94;
                }
              }
            }
            else
            {
              sub_100058364(v56, isUniquelyReferenced_nonNull_native);
              unint64_t v57 = sub_1000048E0(v7, a2);
              if ((v11 & 1) != (v58 & 1)) {
                goto LABEL_125;
              }
              unint64_t v53 = v57;
              uint64_t v2 = (unint64_t *)v125[0];
              if (v11)
              {
LABEL_94:
                uint64_t isUniquelyReferenced_nonNull_native = v2[7];
                swift_bridgeObjectRelease();
                *(void *)(isUniquelyReferenced_nonNull_native + 8 * v53) = _swiftEmptyArrayStorage;
                goto LABEL_95;
              }
            }
            v2[(v53 >> 6) + 8] |= 1 << v53;
            uint64_t v59 = (uint64_t *)(v2[6] + 16 * v53);
            *uint64_t v59 = v7;
            v59[1] = a2;
            *(void *)(v2[7] + 8 * v53) = _swiftEmptyArrayStorage;
            unint64_t v60 = v2[2];
            BOOL v37 = __OFADD__(v60, 1);
            unint64_t v61 = v60 + 1;
            if (v37) {
              goto LABEL_120;
            }
            v2[2] = v61;
            swift_bridgeObjectRetain();
LABEL_95:
            unint64_t v127 = (unint64_t)v2;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_96:
            swift_bridgeObjectRetain();
            uint64_t v100 = sub_100057220(v125, v7, a2);
            Swift::String v101 = *v99;
            if (*v99)
            {
              long long v102 = v99;
              swift_bridgeObjectRetain();
              char v103 = swift_isUniquelyReferenced_nonNull_native();
              char *v102 = v101;
              if ((v103 & 1) == 0)
              {
                Swift::String v101 = sub_10000C3BC(0, *((void *)v101 + 2) + 1, 1, v101);
                char *v102 = v101;
              }
              unint64_t v11 = *((void *)v101 + 2);
              unint64_t v104 = *((void *)v101 + 3);
              uint64_t isUniquelyReferenced_nonNull_native = v11 + 1;
              if (v11 >= v104 >> 1)
              {
                Swift::String v101 = sub_10000C3BC((char *)(v104 > 1), v11 + 1, 1, v101);
                char *v102 = v101;
              }
              uint64_t v2 = v49;
              *((void *)v101 + 2) = isUniquelyReferenced_nonNull_native;
              uint64_t v105 = &v101[16 * v11];
              *((void *)v105 + 4) = v116;
              *((void *)v105 + 5) = v118;
              ((void (*)(void *, void))v100)(v125, 0);
              swift_bridgeObjectRelease_n();
            }
            else
            {
              ((void (*)(void *, void))v100)(v125, 0);
              swift_bridgeObjectRelease_n();
              uint64_t v2 = v49;
            }
            goto LABEL_37;
          default:
            uint64_t v123 = v2;
            uint64_t v44 = (uint64_t *)(v42 + 16);
            uint64_t v45 = (uint64_t *)(v42 + 24);
LABEL_41:
            uint64_t v46 = *v45;
            uint64_t v120 = *v44;
            swift_bridgeObjectRetain();
            uint64_t v2 = (unint64_t *)v127;
            uint64_t v47 = *(void *)(v127 + 16);
            swift_bridgeObjectRetain();
            if (!v47)
            {
              sub_100059928(v42);
LABEL_57:
              swift_bridgeObjectRetain();
              uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v125[0] = v2;
              unint64_t v11 = sub_1000048E0(v7, a2);
              unint64_t v66 = v2[2];
              BOOL v67 = (v65 & 1) == 0;
              uint64_t v68 = v66 + v67;
              if (__OFADD__(v66, v67))
              {
                __break(1u);
LABEL_116:
                __break(1u);
LABEL_117:
                __break(1u);
LABEL_118:
                __break(1u);
LABEL_119:
                __break(1u);
LABEL_120:
                __break(1u);
LABEL_121:
                __break(1u);
LABEL_122:
                __break(1u);
LABEL_123:
                swift_bridgeObjectRetain();
                uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                goto LABEL_3;
              }
              char v69 = v65;
              if ((uint64_t)v2[3] >= v68)
              {
                if (isUniquelyReferenced_nonNull_native)
                {
                  uint64_t v2 = (unint64_t *)v125[0];
                  if ((v65 & 1) == 0) {
                    goto LABEL_61;
                  }
                }
                else
                {
                  sub_10005909C();
                  uint64_t v2 = (unint64_t *)v125[0];
                  if ((v69 & 1) == 0) {
                    goto LABEL_61;
                  }
                }
              }
              else
              {
                sub_100058364(v68, isUniquelyReferenced_nonNull_native);
                unint64_t v70 = sub_1000048E0(v7, a2);
                if ((v69 & 1) != (v71 & 1)) {
                  goto LABEL_125;
                }
                unint64_t v11 = v70;
                uint64_t v2 = (unint64_t *)v125[0];
                if ((v69 & 1) == 0)
                {
LABEL_61:
                  v2[(v11 >> 6) + 8] |= 1 << v11;
                  uint64_t v72 = (uint64_t *)(v2[6] + 16 * v11);
                  *uint64_t v72 = v7;
                  v72[1] = a2;
                  *(void *)(v2[7] + 8 * v11) = _swiftEmptyArrayStorage;
                  unint64_t v73 = v2[2];
                  BOOL v37 = __OFADD__(v73, 1);
                  unint64_t v74 = v73 + 1;
                  if (v37) {
                    goto LABEL_117;
                  }
                  v2[2] = v74;
                  swift_bridgeObjectRetain();
                  goto LABEL_66;
                }
              }
              uint64_t isUniquelyReferenced_nonNull_native = v2[7];
              swift_bridgeObjectRelease();
              *(void *)(isUniquelyReferenced_nonNull_native + 8 * v11) = _swiftEmptyArrayStorage;
LABEL_66:
              unint64_t v127 = (unint64_t)v2;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_67;
            }
            swift_bridgeObjectRetain();
            sub_100059928(v42);
            sub_1000048E0(v7, a2);
            uint64_t isUniquelyReferenced_nonNull_native = v48;
            swift_bridgeObjectRelease();
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              goto LABEL_57;
            }
LABEL_67:
            swift_bridgeObjectRetain();
            Swift::String v76 = sub_100057220(v125, v7, a2);
            unint64_t v11 = *v75;
            if (*v75)
            {
              long long v77 = v75;
              swift_bridgeObjectRetain();
              char v78 = swift_isUniquelyReferenced_nonNull_native();
              *long long v77 = v11;
              if ((v78 & 1) == 0)
              {
                unint64_t v11 = (unint64_t)sub_10000C3BC(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
                *long long v77 = v11;
              }
              unint64_t v80 = *(void *)(v11 + 16);
              unint64_t v79 = *(void *)(v11 + 24);
              uint64_t isUniquelyReferenced_nonNull_native = v80 + 1;
              if (v80 >= v79 >> 1)
              {
                unint64_t v11 = (unint64_t)sub_10000C3BC((char *)(v79 > 1), v80 + 1, 1, (char *)v11);
                *long long v77 = v11;
              }
              uint64_t v2 = v123;
              *(void *)(v11 + 16) = isUniquelyReferenced_nonNull_native;
              unint64_t v81 = v11 + 16 * v80;
              *(void *)(v81 + 32) = v120;
              *(void *)(v81 + 40) = v46;
              ((void (*)(void *, void))v76)(v125, 0);
            }
            else
            {
              ((void (*)(void *, void))v76)(v125, 0);
              uint64_t v2 = v123;
            }
            swift_bridgeObjectRelease_n();
            sub_10005994C(v42);
            swift_bridgeObjectRelease();
LABEL_37:
            if (!--v9)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v7 = v108;
              unint64_t v34 = v112;
              int64_t v31 = v114;
              goto LABEL_20;
            }
            break;
        }
      }
    }
  }
  BOOL v37 = __OFADD__(v31++, 1);
  if (v37) {
    goto LABEL_121;
  }
  if (v31 >= v110) {
    goto LABEL_113;
  }
  unint64_t v38 = *(void *)(v109 + 8 * v31);
  if (v38)
  {
LABEL_32:
    unint64_t v34 = (v38 - 1) & v38;
    unint64_t v36 = __clz(__rbit64(v38)) + (v31 << 6);
    goto LABEL_33;
  }
  int64_t v39 = v31 + 1;
  if (v31 + 1 >= v110) {
    goto LABEL_113;
  }
  unint64_t v38 = *(void *)(v109 + 8 * v39);
  if (v38) {
    goto LABEL_31;
  }
  int64_t v39 = v31 + 2;
  if (v31 + 2 >= v110) {
    goto LABEL_113;
  }
  unint64_t v38 = *(void *)(v109 + 8 * v39);
  if (v38) {
    goto LABEL_31;
  }
  int64_t v39 = v31 + 3;
  if (v31 + 3 >= v110) {
    goto LABEL_113;
  }
  unint64_t v38 = *(void *)(v109 + 8 * v39);
  if (v38)
  {
LABEL_31:
    int64_t v31 = v39;
    goto LABEL_32;
  }
  while (1)
  {
    int64_t v31 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      goto LABEL_122;
    }
    if (v31 >= v110) {
      break;
    }
    unint64_t v38 = *(void *)(v109 + 8 * v31);
    ++v39;
    if (v38) {
      goto LABEL_32;
    }
  }
LABEL_113:
  swift_release();
  uint64_t v25 = sub_100057CAC(a1, (uint64_t *)&v127, (uint64_t *)&v126);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v25;
}

unint64_t sub_100057104(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017D310);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000048E0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void (*sub_100057220(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_100058AA4(v6, a2, a3);
  return sub_10002CD14;
}

void (*sub_1000572A0(void *a1, uint64_t a2, uint64_t a3, unint64_t a4))(void *a1)
{
  uint64_t v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[4] = a3;
  void v8[5] = a4;
  swift_bridgeObjectRetain();
  sub_100059928(a4);
  v8[6] = sub_100058B50(v8, a2, a3, a4);
  return sub_100057330;
}

void sub_100057330(void *a1)
{
  uint64_t v1 = (void *)*a1;
  unint64_t v2 = *(void *)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_bridgeObjectRelease();
  sub_10005994C(v2);

  free(v1);
}

uint64_t sub_100057398(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  unint64_t result = (uint64_t)sub_10000C3BC((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    unint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100057484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, long long *a6)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  uint64_t v13 = v12 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13, a2, v14);
  unint64_t v15 = (void *)(v12 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
  void *v15 = a3;
  v15[1] = a4;
  *(unsigned char *)(v12 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind) = a5;
  sub_10000372C(a6, v12 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  return v12;
}

uint64_t sub_100057564()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  sub_10000478C(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_100057628()
{
  sub_100059970();
  uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._uint64_t countAndFlagsBits = 544497952;
  v0._int64_t object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = URL.path.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000576B8()
{
  sub_100059970();
  uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._uint64_t countAndFlagsBits = 544497952;
  v0._int64_t object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = URL.path.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

BOOL sub_100057748(uint64_t a1, uint64_t a2)
{
  if ((static URL.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  char v4 = *(unsigned char *)(a2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
  char v5 = *(unsigned char *)(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);

  return sub_100029B78(v5, v4);
}

Swift::Int sub_1000577B4()
{
  return Hasher._finalize()();
}

uint64_t sub_100057880()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_10005793C()
{
  return Hasher._finalize()();
}

BOOL sub_100057A04(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if ((static URL.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  char v4 = *(unsigned char *)(v3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
  char v5 = *(unsigned char *)(v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);

  return sub_100029B78(v5, v4);
}

uint64_t sub_100057A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017C918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100057AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017C918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100057B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100059BC8();
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100057BC8(a1, a2, a3, v6);
}

unint64_t sub_100057BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v6 = a4 & ~v5;
  if ((*(void *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_100059C2C();
    do
    {
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        break;
      }
      unint64_t v6 = (v6 + 1) & v7;
    }
    while (((*(void *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

uint64_t sub_100057CAC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_100004700(&qword_10017D2F0);
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = (void *)v4;
  int64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v56 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & v7;
  int64_t v57 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v58 = v4 + 64;
  unint64_t v54 = (void *)v4;
  uint64_t v55 = a1;
  if ((v9 & v7) == 0) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v11 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v6 << 6))
  {
    uint64_t v16 = 8 * i;
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8 * i);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    unint64_t v74 = &_swiftEmptyDictionarySingleton;
    uint64_t v68 = *(void *)(v18 + 16);
    if (v68) {
      break;
    }
    swift_retain();
    uint64_t v49 = &_swiftEmptyDictionarySingleton;
LABEL_63:
    *(void *)(v58 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(void *)(v5[6] + v16) = v17;
    *(void *)(v5[7] + v16) = v49;
    uint64_t v50 = v5[2];
    BOOL v51 = __OFADD__(v50, 1);
    uint64_t v52 = v50 + 1;
    if (v51)
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    _OWORD v5[2] = v52;
    if (v10) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v13 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_70;
    }
    if (v13 >= v57) {
      return (uint64_t)v5;
    }
    unint64_t v14 = *(void *)(v56 + 8 * v13);
    ++v6;
    if (!v14)
    {
      int64_t v6 = v13 + 1;
      if (v13 + 1 >= v57) {
        return (uint64_t)v5;
      }
      unint64_t v14 = *(void *)(v56 + 8 * v6);
      if (!v14)
      {
        int64_t v6 = v13 + 2;
        if (v13 + 2 >= v57) {
          return (uint64_t)v5;
        }
        unint64_t v14 = *(void *)(v56 + 8 * v6);
        if (!v14)
        {
          int64_t v15 = v13 + 3;
          if (v15 >= v57) {
            return (uint64_t)v5;
          }
          unint64_t v14 = *(void *)(v56 + 8 * v15);
          if (!v14)
          {
            while (1)
            {
              int64_t v6 = v15 + 1;
              if (__OFADD__(v15, 1)) {
                goto LABEL_71;
              }
              if (v6 >= v57) {
                return (uint64_t)v5;
              }
              unint64_t v14 = *(void *)(v56 + 8 * v6);
              ++v15;
              if (v14) {
                goto LABEL_19;
              }
            }
          }
          int64_t v6 = v15;
        }
      }
    }
LABEL_19:
    unint64_t v10 = (v14 - 1) & v14;
  }
  uint64_t v60 = 8 * i;
  unint64_t v61 = i;
  unint64_t v62 = v10;
  int64_t v63 = v6;
  uint64_t v67 = v18 + 32;
  swift_bridgeObjectRetain_n();
  uint64_t v59 = v17;
  swift_retain();
  uint64_t v19 = 0;
  while (2)
  {
    uint64_t v20 = (uint64_t *)(v67 + 24 * v19);
    uint64_t v21 = v20[1];
    unint64_t v10 = v20[2];
    uint64_t v22 = *v20;
    swift_bridgeObjectRetain();
    sub_100059928(v10);
    uint64_t v23 = *a2;
    if (*(void *)(*a2 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v24 = sub_1000048E0(v22, v21);
      if (v25)
      {
        uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_100059928(v10);
        uint64_t v27 = v74;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v73[0] = v27;
        sub_10005960C(v26, v22, v21, v10, isUniquelyReferenced_nonNull_native);
        unint64_t v74 = (void *)v73[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10005994C(v10);
        goto LABEL_59;
      }
      swift_bridgeObjectRelease();
    }
    unint64_t v71 = v10;
    uint64_t v69 = v19;
    uint64_t v29 = *a3;
    uint64_t v30 = *a3 + 64;
    uint64_t v31 = 1 << *(unsigned char *)(*a3 + 32);
    if (v31 < 64) {
      uint64_t v32 = ~(-1 << v31);
    }
    else {
      uint64_t v32 = -1;
    }
    unint64_t v33 = v32 & *(void *)(*a3 + 64);
    int64_t v72 = (unint64_t)(v31 + 63) >> 6;
    swift_bridgeObjectRetain();
    char v70 = 0;
    int64_t v34 = 0;
    if (v33)
    {
LABEL_30:
      unint64_t v35 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      unint64_t v36 = v35 | (v34 << 6);
      goto LABEL_31;
    }
    while (1)
    {
      int64_t v39 = v34 + 1;
      if (__OFADD__(v34, 1))
      {
        __break(1u);
LABEL_67:
        __break(1u);
        return (uint64_t)v5;
      }
      if (v39 >= v72) {
        break;
      }
      unint64_t v40 = *(void *)(v30 + 8 * v39);
      ++v34;
      if (v40) {
        goto LABEL_46;
      }
      int64_t v34 = v39 + 1;
      if (v39 + 1 >= v72) {
        break;
      }
      unint64_t v40 = *(void *)(v30 + 8 * v34);
      if (v40) {
        goto LABEL_46;
      }
      int64_t v34 = v39 + 2;
      if (v39 + 2 >= v72) {
        break;
      }
      unint64_t v40 = *(void *)(v30 + 8 * v34);
      if (v40) {
        goto LABEL_46;
      }
      int64_t v41 = v39 + 3;
      if (v41 >= v72) {
        break;
      }
      unint64_t v40 = *(void *)(v30 + 8 * v41);
      if (!v40)
      {
        while (1)
        {
          int64_t v34 = v41 + 1;
          if (__OFADD__(v41, 1)) {
            goto LABEL_67;
          }
          if (v34 >= v72) {
            goto LABEL_57;
          }
          unint64_t v40 = *(void *)(v30 + 8 * v34);
          ++v41;
          if (v40) {
            goto LABEL_46;
          }
        }
      }
      int64_t v34 = v41;
LABEL_46:
      unint64_t v33 = (v40 - 1) & v40;
      unint64_t v36 = __clz(__rbit64(v40)) + (v34 << 6);
LABEL_31:
      uint64_t v5 = *(void **)(*(void *)(v29 + 48) + 16 * v36);
      uint64_t v37 = *(void *)(*(void *)(v29 + 56) + 8 * v36);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v38 = sub_100037774();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v38)
      {
        unint64_t v42 = v74;
        if (!v74[2]) {
          goto LABEL_51;
        }
        swift_bridgeObjectRetain();
        unint64_t v43 = v71;
        sub_100059928(v71);
        sub_100057B40(v22, v21, v71);
        if ((v44 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          sub_10005994C(v71);
LABEL_51:
          swift_bridgeObjectRetain();
          unint64_t v43 = v71;
          sub_100059928(v71);
          char v45 = swift_isUniquelyReferenced_nonNull_native();
          v73[0] = v42;
          sub_10005960C((uint64_t)_swiftEmptyArrayStorage, v22, v21, v71, v45);
          unint64_t v74 = (void *)v73[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10005994C(v71);
          goto LABEL_52;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_10005994C(v71);
        swift_bridgeObjectRelease();
LABEL_52:
        swift_bridgeObjectRetain();
        sub_100059928(v43);
        uint64_t v46 = sub_1000572A0(v73, v22, v21, v43);
        if (*v47 > 1uLL) {
          sub_100057398(v37);
        }
        else {
          swift_bridgeObjectRelease();
        }
        ((void (*)(void *, void))v46)(v73, 0);
        swift_bridgeObjectRelease();
        sub_10005994C(v71);
        char v70 = 1;
        if (v33) {
          goto LABEL_30;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        if (v33) {
          goto LABEL_30;
        }
      }
    }
LABEL_57:
    swift_release();
    uint64_t v19 = v69;
    unint64_t v10 = v71;
    if ((v70 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_100059928(v71);
      uint64_t v48 = sub_1000589B8(v22, v21, v71);
      swift_bridgeObjectRelease();
      sub_10005994C(v71);
      sub_100059BB8(v48);
    }
LABEL_59:
    if (!v65)
    {
      ++v19;
      swift_bridgeObjectRelease();
      sub_10005994C(v10);
      if (v19 == v68)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v49 = v74;
        uint64_t v5 = v54;
        a1 = v55;
        unint64_t v10 = v62;
        int64_t v6 = v63;
        uint64_t v16 = v60;
        unint64_t i = v61;
        uint64_t v17 = v59;
        goto LABEL_63;
      }
      continue;
    }
    break;
  }
LABEL_72:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10005994C(v10);
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_100058364(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017D310);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10005867C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017D300);
  char v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = v37;
    unint64_t v23 = v37[v21];
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = v37[v13];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = v37[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = v37[v13];
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = *(void *)(v5 + 56);
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 24 * v20);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    unint64_t v33 = v30[2];
    uint64_t v34 = *(void *)(v29 + 8 * v20);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_100059928(v33);
      swift_bridgeObjectRetain();
    }
    sub_100059BC8();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 24 * v17);
    *uint64_t v18 = v31;
    v18[1] = v32;
    v18[2] = v33;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v34;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = v37;
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000589B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100057B40(a1, a2, a3);
  LOBYTE(a3) = v9;
  swift_bridgeObjectRelease();
  if ((a3 & 1) == 0) {
    return 1;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v4;
  uint64_t v15 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100059254();
    uint64_t v11 = v15;
  }
  unint64_t v12 = *(void *)(*(void *)(v11 + 48) + 24 * v8 + 16);
  swift_bridgeObjectRelease();
  sub_10005994C(v12);
  uint64_t v13 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  sub_100059428(v8, v11);
  *uint64_t v4 = v11;
  swift_bridgeObjectRelease();
  return v13;
}

void (*sub_100058AA4(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_100058F78(v6);
  v6[10] = sub_100058C88(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10002D448;
}

void (*sub_100058B50(void *a1, uint64_t a2, uint64_t a3, unint64_t a4))(uint64_t a1)
{
  unint64_t v8 = malloc(0x60uLL);
  *a1 = v8;
  v8[8] = a3;
  v8[9] = a4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  sub_100059928(a4);
  v8[10] = sub_10002E898(v8);
  v8[11] = sub_100058DD0(v8 + 4, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  return sub_100058C0C;
}

void sub_100058C0C(uint64_t a1)
{
  Swift::String v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 80);
  unint64_t v3 = *(void *)(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 88))();
  swift_bridgeObjectRelease();
  sub_10005994C(v3);
  v2(v1, 0);

  free(v1);
}

void (*sub_100058C88(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  unint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_1000048E0(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        void *v10 = v19;
        return sub_10002E848;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10005909C();
      goto LABEL_7;
    }
    sub_100058364(v16, a4 & 1);
    unint64_t v20 = sub_1000048E0(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = v20;
      v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void (*sub_100058DD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5))(uint64_t **a1)
{
  uint64_t v6 = v5;
  char v12 = malloc(0x38uLL);
  *a1 = v12;
  uint64_t v12[3] = a4;
  _DWORD v12[4] = v5;
  v12[1] = a2;
  v12[2] = a3;
  uint64_t v13 = *v5;
  unint64_t v15 = sub_100057B40(a2, a3, a4);
  *((unsigned char *)v12 + 48) = v14 & 1;
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    char v19 = v14;
    uint64_t v20 = *(void *)(v13 + 24);
    if (v20 >= v18 && (a5 & 1) != 0)
    {
LABEL_7:
      v12[5] = v15;
      if (v19)
      {
LABEL_8:
        uint64_t v21 = *(void *)(*(void *)(*v6 + 56) + 8 * v15);
LABEL_12:
        *char v12 = v21;
        return sub_100058F24;
      }
LABEL_11:
      uint64_t v21 = 1;
      goto LABEL_12;
    }
    if (v20 >= v18 && (a5 & 1) == 0)
    {
      sub_100059254();
      goto LABEL_7;
    }
    sub_10005867C(v18, a5 & 1);
    unint64_t v22 = sub_100057B40(a2, a3, a4);
    if ((v19 & 1) == (v23 & 1))
    {
      unint64_t v15 = v22;
      v12[5] = v22;
      if (v19) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100058F24(uint64_t **a1)
{
  Swift::String v1 = *a1;
  sub_100058FA8(*a1, *((unsigned char *)*a1 + 48), (uint64_t *)(*a1)[4], (*a1)[5], (*a1)[1], (*a1)[2], (*a1)[3]);
  sub_100059BB8(*v1);

  free(v1);
}

uint64_t (*sub_100058F78(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *Swift::String v1 = 0x8000000000000000;
  return sub_100059D28;
}

uint64_t *sub_100058FA8(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v9 = *result;
  if (*result == 1)
  {
    if (a2)
    {
      swift_arrayDestroy();
      sub_100059428(a4, *a3);
    }
  }
  else
  {
    unint64_t v10 = (void *)*a3;
    if (a2)
    {
      *(void *)(v10[7] + 8 * a4) = v9;
    }
    else
    {
      v10[(a4 >> 6) + 8] |= 1 << a4;
      char v12 = (void *)(v10[6] + 24 * a4);
      *char v12 = a5;
      v12[1] = a6;
      v12[2] = a7;
      *(void *)(v10[7] + 8 * a4) = v9;
      uint64_t v13 = v10[2];
      BOOL v14 = __OFADD__(v13, 1);
      uint64_t v15 = v13 + 1;
      if (v14)
      {
        __break(1u);
        return result;
      }
      v10[2] = v15;
      swift_bridgeObjectRetain();
      sub_100059928(a7);
    }
  }

  return (uint64_t *)sub_100059C1C(v9);
}

void *sub_10005909C()
{
  Swift::String v1 = v0;
  sub_100004700(&qword_10017D310);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *Swift::String v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100059254()
{
  Swift::String v1 = v0;
  sub_100004700(&qword_10017D300);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *Swift::String v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 24 * v15);
    uint64_t v18 = v17[1];
    unint64_t v19 = v17[2];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = *v17;
    v22[1] = v18;
    v22[2] = v19;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    sub_100059928(v19);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_100059428(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      sub_100059BC8();
      do
      {
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 >= v8 && v3 >= (uint64_t)v9)
          {
LABEL_16:
            uint64_t v12 = *(void *)(a2 + 48);
            unint64_t v13 = v12 + 24 * v3;
            unint64_t v14 = (long long *)(v12 + 24 * v6);
            if (v3 != v6 || v13 >= (unint64_t)v14 + 24)
            {
              long long v15 = *v14;
              *(void *)(v13 + 16) = *((void *)v14 + 2);
              *(_OWORD *)unint64_t v13 = v15;
            }
            uint64_t v16 = *(void *)(a2 + 56);
            BOOL v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
            {
              *BOOL v17 = *v18;
              int64_t v3 = v6;
            }
          }
        }
        else if (v9 >= v8 || v3 >= (uint64_t)v9)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *unint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10005960C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100057B40(a2, a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100059254();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10005867C(v17, a5 & 1);
  unint64_t v23 = sub_100057B40(a2, a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  int64_t v25 = (uint64_t *)(v20[6] + 24 * v14);
  *int64_t v25 = a2;
  v25[1] = a3;
  void v25[2] = a4;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v26 = v20[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v28;
  swift_bridgeObjectRetain();

  return sub_100059928(a4);
}

uint64_t sub_1000597A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100004700(&qword_10017D318);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v17 = v1;
    while (1)
    {
      unint64_t v6 = *(void *)(a1 + 32 + 8 * v4);
      sub_100059928(v6);
      sub_100059C80();
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v9 = result & ~v8;
      unint64_t v10 = v9 >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
      uint64_t v12 = 1 << v9;
      if (((1 << v9) & v11) != 0)
      {
        uint64_t v13 = ~v8;
        sub_100059CD4();
        do
        {
          uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
          if (result)
          {
            sub_10005994C(v6);
            uint64_t v1 = v17;
            goto LABEL_4;
          }
          unint64_t v9 = (v9 + 1) & v13;
          unint64_t v10 = v9 >> 6;
          uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
          uint64_t v12 = 1 << v9;
        }
        while ((v11 & (1 << v9)) != 0);
        uint64_t v1 = v17;
      }
      *(void *)(v5 + 8 * v10) = v12 | v11;
      *(void *)(*(void *)(v3 + 48) + 8 * v9) = v6;
      uint64_t v14 = *(void *)(v3 + 16);
      BOOL v15 = __OFADD__(v14, 1);
      uint64_t v16 = v14 + 1;
      if (v15) {
        break;
      }
      *(void *)(v3 + 16) = v16;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return result;
}

unint64_t sub_100059928(unint64_t result)
{
  unint64_t v1 = result >> 62;
  if (!(result >> 62) || v1 == 2 || v1 == 1) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_10005994C(unint64_t result)
{
  unint64_t v1 = result >> 62;
  if (!(result >> 62) || v1 == 2 || v1 == 1) {
    return swift_release();
  }
  return result;
}

unint64_t sub_100059970()
{
  unint64_t result = qword_10017D1F0;
  if (!qword_10017D1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D1F0);
  }
  return result;
}

unint64_t sub_1000599C4()
{
  unint64_t result = qword_10017D1F8;
  if (!qword_10017D1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D1F8);
  }
  return result;
}

uint64_t sub_100059A18()
{
  return sub_100059A60(&qword_10017D200, (void (*)(uint64_t))type metadata accessor for KernelCollection);
}

uint64_t sub_100059A60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for KernelCollection()
{
  uint64_t result = qword_1001838C0;
  if (!qword_1001838C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100059AF4()
{
  return type metadata accessor for KernelCollection();
}

uint64_t sub_100059AFC()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100059BB8(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100059BC8()
{
  unint64_t result = qword_10017D2F8;
  if (!qword_10017D2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D2F8);
  }
  return result;
}

uint64_t sub_100059C1C(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_100059C2C()
{
  unint64_t result = qword_10017D308;
  if (!qword_10017D308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D308);
  }
  return result;
}

unint64_t sub_100059C80()
{
  unint64_t result = qword_10017D320;
  if (!qword_10017D320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D320);
  }
  return result;
}

unint64_t sub_100059CD4()
{
  unint64_t result = qword_10017D328;
  if (!qword_10017D328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D328);
  }
  return result;
}

void *sub_100059D2C()
{
  unint64_t v1 = (void **)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x60));
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_100059D98(void *a1)
{
  id v3 = (void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x60));
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*sub_100059E08())()
{
  return j_j__swift_endAccess;
}

void *sub_100059E80()
{
  unint64_t v1 = (void **)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68));
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_100059EEC(void *a1)
{
  id v3 = (void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x68));
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*sub_100059F5C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100059FD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = swift_isaMask & *v1;
  uint64_t v4 = (char *)v1 + *(void *)(v3 + 0x70);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_10005A088(uint64_t a1)
{
  uint64_t v3 = swift_isaMask & *v1;
  uint64_t v4 = (char *)v1 + *(void *)(v3 + 0x70);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*sub_10005A144())()
{
  return j__swift_endAccess;
}

id sub_10005A1BC(uint64_t a1)
{
  id v3 = sub_10005BBA0(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))(a1);
  return v3;
}

void sub_10005A220()
{
}

id sub_10005A264()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode();
  return [super dealloc];
}

uint64_t sub_10005A2D8(void *a1)
{
  uint64_t v2 = swift_isaMask & *a1;

  id v3 = (char *)a1 + *(void *)((swift_isaMask & *a1) + 0x70);
  uint64_t v4 = *(uint64_t (**)(char *))(*(void *)(*(void *)(v2 + 80) - 8) + 8);

  return v4(v3);
}

void sub_10005A3BC(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode();
  id v4 = sub_10005BBA0(a1);
  uint64_t v5 = v4;
  unint64_t v6 = *(void **)(v2 + 24);
  if (v6)
  {
    uint64_t v7 = *(void (**)(void *))((swift_isaMask & *v6) + 0x80);
    uint64_t v8 = v6;
    unint64_t v9 = v5;
    v7(v5);
    unint64_t v10 = *(void (**)(void *))((swift_isaMask & *v9) + 0x98);
    uint64_t v11 = v8;
    v10(v6);
  }
  else
  {
    uint64_t v12 = *(void **)(v2 + 16);
    *(void *)(v2 + 16) = v4;
    id v13 = v4;

    uint64_t v11 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = v5;
  }

  uint64_t v14 = *(void **)(v2 + 24);
  *(void *)(v2 + 24) = v5;
  v5;

  int v15 = *(_DWORD *)(v2 + 32);
  BOOL v16 = __CFADD__(v15, 1);
  int v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v2 + 32) = v17;
  }
}

void sub_10005A51C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    id v3 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x78);
    id v4 = v1;
    uint64_t v5 = v3();
    unint64_t v6 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v5;

    uint64_t v7 = *(void **)(v0 + 24);
    if (v7)
    {
      type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode();
      uint64_t v8 = v4;
      id v9 = v7;
      char v10 = static NSObject.== infix(_:_:)();

      if (v10)
      {
        uint64_t v11 = v3();
        uint64_t v12 = *(void **)(v2 + 24);
        *(void *)(v2 + 24) = v11;
      }
    }
    id v13 = (void *)v3();
    if (v13)
    {
      uint64_t v14 = v13;
      (*(void (**)(void))((swift_isaMask & *v13) + 0x98))(0);
    }
    int v15 = *(_DWORD *)(v2 + 32);
    BOOL v16 = v15 != 0;
    int v17 = v15 - 1;
    if (v16) {
      *(_DWORD *)(v2 + 32) = v17;
    }
    else {
      __break(1u);
    }
  }
}

void sub_10005A69C(void *a1)
{
  uint64_t v2 = v1;
  id v4 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x90))();
  uint64_t v5 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x78))();
  unint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = *(void (**)(void *))((swift_isaMask & *v5) + 0x98);
    uint64_t v8 = v4;
    id v9 = v6;
    v7(v4);
  }
  if (v4)
  {
    char v10 = *(void (**)(void *))((swift_isaMask & *v4) + 0x80);
    id v11 = v6;
    uint64_t v12 = v4;
    v10(v6);
  }
  id v13 = *(void **)(v2 + 16);
  if (v13)
  {
    type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode();
    uint64_t v14 = a1;
    id v15 = v13;
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
      int v17 = *(void **)(v2 + 16);
      *(void *)(v2 + 16) = v4;
      char v18 = v4;
    }
  }
  uint64_t v19 = *(void **)(v2 + 24);
  if (v19)
  {
    type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode();
    uint64_t v20 = a1;
    id v21 = v19;
    char v22 = static NSObject.== infix(_:_:)();

    if (v22)
    {
      unint64_t v23 = *(void **)(v2 + 24);
      *(void *)(v2 + 24) = v6;
      unint64_t v6 = v23;
    }
  }
  else
  {
  }
  int v24 = *(_DWORD *)(v2 + 32);
  BOOL v25 = v24 != 0;
  int v26 = v24 - 1;
  if (v25) {
    *(_DWORD *)(v2 + 32) = v26;
  }
  else {
    __break(1u);
  }
}

void *sub_10005A8D0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t sub_10005A8F8(uint64_t a1)
{
  uint64_t v38 = *(void *)(*v1 + 80);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v33 - v4;
  uint64_t v34 = v1;
  unint64_t v6 = (void *)v1[2];
  if (v6)
  {
    uint64_t v37 = *(void *)(v2 + 88);
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 16);
    uint64_t v36 = v37 + 16;
    uint64_t v7 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v8 = v6;
    id v9 = (char *)_swiftEmptyArrayStorage;
    char v10 = &swift_isaMask;
    do
    {
      id v11 = v10;
      uint64_t v12 = *(void (**)(void))((*v10 & *v6) + 0xA8);
      id v13 = v6;
      v12();

      uint64_t v14 = v38;
      uint64_t v15 = v35(v38, v37);
      uint64_t v17 = v16;
      (*v7)(v5, v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v9 = sub_10000C3BC(0, *((void *)v9 + 2) + 1, 1, v9);
      }
      unint64_t v19 = *((void *)v9 + 2);
      unint64_t v18 = *((void *)v9 + 3);
      if (v19 >= v18 >> 1) {
        id v9 = sub_10000C3BC((char *)(v18 > 1), v19 + 1, 1, v9);
      }
      *((void *)v9 + 2) = v19 + 1;
      uint64_t v20 = &v9[16 * v19];
      *((void *)v20 + 4) = v15;
      *((void *)v20 + 5) = v17;
      char v10 = v11;
      id v21 = *(uint64_t (**)(void))((*v11 & *v13) + 0x78);
      char v22 = v13;
      unint64_t v6 = (void *)v21();
    }
    while (v6);
  }
  else
  {
    id v9 = (char *)_swiftEmptyArrayStorage;
  }
  LODWORD(v39) = *((_DWORD *)v34 + 8);
  v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v39 = 0x203A657A69535BLL;
  unint64_t v40 = 0xE700000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v24._uint64_t countAndFlagsBits = 0x203E2D2D20;
  v24._int64_t object = (void *)0xE500000000000000;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  uint64_t v26 = v39;
  unint64_t v25 = v40;
  uint64_t v39 = (uint64_t)v9;
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100014AB8();
  uint64_t v27 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  uint64_t v39 = v26;
  unint64_t v40 = v25;
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = v27;
  v30._int64_t object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = 93;
  v31._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t sub_10005AC5C()
{
  return *(unsigned int *)(v0 + 32);
}

uint64_t sub_10005AC64()
{
  return _swift_deallocClassInstance(v0, 36, 7);
}

uint64_t sub_10005ACA4()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10005ACD0(int a1)
{
  uint64_t v2 = swift_allocObject();
  sub_10005AD10(a1);
  return v2;
}

uint64_t sub_10005AD10(int a1)
{
  *(_DWORD *)(v1 + 16) = a1;
  type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  *(void *)(v1 + 24) = Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
  *(void *)(v1 + 32) = v2;
  return v1;
}

uint64_t sub_10005ADF0()
{
  swift_beginAccess();
  type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode();
  swift_bridgeObjectRetain();
  uint64_t v0 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10005AE9C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (*v1)[10];
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)v36 - v6;
  uint64_t v9 = *(void *)(v8 + 88);
  char v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
  uint64_t v42 = v5;
  uint64_t v39 = v10;
  uint64_t v40 = v9 + 16;
  uint64_t v11 = v10(v3, v9);
  uint64_t v13 = v12;
  swift_beginAccess();
  uint64_t v44 = v11;
  uint64_t v45 = v13;
  uint64_t v14 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v43 = v14;
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v46;
  uint64_t v41 = v13;
  if (v46)
  {
    uint64_t v16 = *v1[4];
    uint64_t v37 = (void (*)(void))v7;
    uint64_t v38 = v1;
    uint64_t v17 = v4;
    unint64_t v18 = *(void (**)(void *))(v16 + 208);
    swift_retain();
    v18(v15);
    uint64_t v4 = v17;
    uint64_t v7 = (char *)v37;
    uint64_t v2 = v38;
    swift_release();
    uint64_t v46 = (void *)v11;
    uint64_t v47 = v13;
    swift_beginAccess();
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    swift_endAccess();

    (*(void (**)(void))((swift_isaMask & *v15) + 0xA8))();
    (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v3, v9);

    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v3);
  }
  uint64_t v19 = *((unsigned int *)v2 + 4);
  swift_bridgeObjectRetain();
  uint64_t v20 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  if (v20 == v19)
  {
    id v21 = *(uint64_t (**)(uint64_t))(*v2[4] + 200);
    uint64_t v38 = (void **)v11;
    uint64_t v22 = swift_retain();
    uint64_t v23 = v21(v22);
    uint64_t v11 = (uint64_t)v38;
    Swift::String v24 = (void *)v23;
    swift_release();
    if (v24)
    {
      unint64_t v25 = *(void (**)(void))((swift_isaMask & *v24) + 0xA8);
      v36[1] = (swift_isaMask & *v24) + 168;
      uint64_t v37 = v25;
      v36[0] = v24;
      v25();
      uint64_t v26 = v39(v3, v9);
      uint64_t v28 = v27;
      uint64_t v29 = *(void (**)(char *, uint64_t))(v4 + 8);
      v29(v7, v3);
      uint64_t v46 = (void *)v26;
      uint64_t v47 = v28;
      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.removeValue(forKey:)();
      swift_endAccess();
      swift_bridgeObjectRelease();

      Swift::String v30 = (void *)v36[0];
      v37();
      (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v3, v9);

      v29(v7, v3);
      uint64_t v11 = (uint64_t)v38;
    }
  }
  Swift::String v31 = *(uint64_t (**)(uint64_t))(*v2[4] + 192);
  swift_retain();
  uint64_t v32 = (void *)v31(v42);
  swift_release();
  uint64_t v46 = (void *)v11;
  uint64_t v47 = v41;
  id v48 = v32;
  swift_beginAccess();
  type metadata accessor for Dictionary();
  uint64_t v33 = v32;
  Dictionary.subscript.setter();
  uint64_t v34 = swift_endAccess();
  (*(void (**)(uint64_t))((swift_isaMask & *v33) + 0xA8))(v34);
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v3, v9);

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_10005B468(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = &v14[-v6];
  uint64_t v15 = v5;
  uint64_t v16 = v8;
  swift_beginAccess();
  uint64_t v9 = *(void *)(v2 + 88);
  type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode();
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  uint64_t result = swift_endAccess();
  uint64_t v11 = v17;
  if (v17)
  {
    uint64_t v12 = *(void (**)(void *))(*(void *)v1[4] + 208);
    swift_retain();
    v12(v11);
    uint64_t v13 = swift_release();
    (*(void (**)(uint64_t))((swift_isaMask & *v11) + 0xA8))(v13);
    (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v3, v9);

    return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

uint64_t sub_10005B654@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 80);
  type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = swift_bridgeObjectRelease();
  if (!v7) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 1, 1, v4);
  }
  (*(void (**)(uint64_t))((swift_isaMask & *v7) + 0xA8))(v5);

  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 0, 1, v4);
}

uint64_t sub_10005B7D4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v15 - v5;
  uint64_t v7 = *((unsigned int *)v1 + 4);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v2 + 88);
  type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode();
  swift_bridgeObjectRetain();
  uint64_t v9 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v10 = 0;
  if (v9 != v7) {
    return v10;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v1[4] + 216);
  uint64_t v12 = swift_retain();
  uint64_t v13 = (void *)v11(v12);
  uint64_t result = swift_release();
  if (v13)
  {
    (*(void (**)(uint64_t))((swift_isaMask & *v13) + 0xA8))(result);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v3, v8);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005B9E4()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + 32) + 224);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t sub_10005BA50()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocClassInstance(v0, 40, 7);
}

id sub_10005BA90(uint64_t a1)
{
  uint64_t v2 = swift_isaMask & *(void *)v1;
  *(void *)&v1[*(void *)(v2 + 0x60)] = 0;
  *(void *)&v1[*(void *)((swift_isaMask & *(void *)v1) + 0x68)] = 0;
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)(v2 + 80) - 8) + 16))(&v1[*(void *)((swift_isaMask & *(void *)v1) + 0x70)], a1, *(void *)(v2 + 80));
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode();
  return [super init];
}

id sub_10005BBA0(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode());
  return sub_10005BA90(a1);
}

void sub_10005BBDC()
{
}

uint64_t type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode()
{
  return sub_100004FAC();
}

uint64_t type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList()
{
  return sub_100004FAC();
}

uint64_t sub_10005BC40()
{
  return sub_10005BC9C();
}

uint64_t type metadata accessor for KMLimitedSizeCache()
{
  return sub_100004FAC();
}

uint64_t sub_10005BC80()
{
  return sub_10005BC9C();
}

uint64_t sub_10005BC9C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10005BCE0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_10005BD80()
{
  unint64_t v1 = (uint64_t *)v0;
  sub_10005BF9C(v0, (uint64_t)v29);
  uint64_t v2 = v29[2];
  uint64_t v25 = v29[1];
  uint64_t v27 = v29[0];
  uint64_t v3 = v29[3];
  unint64_t v4 = v29[4];
  uint64_t v5 = v29[5];
  uint64_t v6 = v29[6];
  uint64_t v8 = v29[7];
  uint64_t v7 = v29[8];
  char v9 = v30;
  sub_10005BF9C((uint64_t)v1, (uint64_t)&v31);
  uint64_t v10 = v41;
  if (v41 < 0)
  {
    v41 &= ~0x8000000000000000;
    sub_10005BFC4((uint64_t)&v31, (uint64_t)v42);
    sub_10005C020(v27, v25, v2, v3, v4, v5, v6, v8, v7, v9);
    unint64_t v21 = sub_1000CB9EC();
    sub_10005C260(v1);
  }
  else
  {
    unint64_t v11 = v35;
    uint64_t v12 = v36;
    uint64_t v13 = v37;
    uint64_t v14 = v38;
    uint64_t v15 = v39;
    char v16 = v40;
    v42[0] = v31;
    v42[1] = v32;
    uint64_t v23 = v32;
    uint64_t v24 = v31;
    uint64_t v26 = v34;
    uint64_t v28 = v33;
    v42[2] = v33;
    v42[3] = v34;
    v42[4] = v35;
    v42[5] = v36;
    v42[6] = v37;
    v42[7] = v38;
    v42[8] = v39;
    char v43 = v40;
    sub_10005C020(v31, v32, v33, v34, v35, v36, v37, v38, v39, v40);
    swift_retain();
    _StringGuts.grow(_:)(17);
    unint64_t v17 = sub_1000CB9EC();
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 0x736E657478652820;
    v18._int64_t object = (void *)0xEC000000206E6F69;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v10 + 200))();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 41;
    v20._int64_t object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    swift_release();
    sub_10003E9C8(v24, v23, v28, v26, v11, v12, v13, v14, v15, v16);
    return v17;
  }
  return v21;
}

uint64_t sub_10005BF9C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 64);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  return a2;
}

uint64_t sub_10005BFC4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10005C020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  switch(a10)
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
      goto LABEL_2;
    case 3:
    case 6:
    case 14:
    case 18:
    case 26:
    case 42:
      swift_bridgeObjectRetain();
      goto LABEL_2;
    case 13:
      swift_bridgeObjectRetain();
      sub_10002F064(a4, a5);
      swift_bridgeObjectRetain();
      goto LABEL_2;
    case 15:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_2:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_10005C260(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10005C2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11 < 0)
  {
    return sub_10003E9C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  else
  {
    sub_10003E9C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    return swift_release();
  }
}

unint64_t sub_10005C340()
{
  sub_10005BF9C(v0, (uint64_t)v2);
  return sub_10005BD80();
}

void *sub_10005C378()
{
  return &_swiftEmptyArrayStorage;
}

unint64_t sub_10005C384()
{
  return sub_10005C390((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_10005C390(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    long long v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017D418);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  long long v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v20 = v2 + 64;
  swift_retain();
  uint64_t v5 = a1 + 56;
  while (1)
  {
    uint64_t v21 = v4;
    uint64_t v6 = *(void *)(v5 - 24);
    uint64_t v7 = *(void *)(v5 - 16);
    uint64_t v9 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)v5;
    unint64_t v10 = *(void *)(v5 + 16);
    uint64_t v11 = *(void *)(v5 + 32);
    uint64_t v23 = *(void *)(v5 + 24);
    uint64_t v24 = *(void *)(v5 + 8);
    uint64_t v12 = *(void *)(v5 + 48);
    uint64_t v22 = *(void *)(v5 + 40);
    char v13 = *(unsigned char *)(v5 + 56);
    swift_retain();
    sub_10005C020(v7, v9, v8, v24, v10, v23, v11, v22, v12, v13);
    unint64_t result = sub_10005FBF8(v6);
    if (v15) {
      break;
    }
    *(void *)(v20 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v6;
    uint64_t v16 = v3[7] + 80 * result;
    *(void *)uint64_t v16 = v7;
    *(void *)(v16 + 8) = v9;
    *(void *)(v16 + 16) = v8;
    *(void *)(v16 + 24) = v24;
    *(void *)(v16 + 32) = v10;
    *(void *)(v16 + 40) = v23;
    *(void *)(v16 + 48) = v11;
    *(void *)(v16 + 56) = v22;
    *(void *)(v16 + 64) = v12;
    *(unsigned char *)(v16 + 72) = v13;
    uint64_t v17 = v3[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v5 += 88;
    v3[2] = v19;
    uint64_t v4 = v21 - 1;
    if (v21 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10005C548(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017D3E8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *(v4 - 1);
    uint64_t v5 = *v4;
    swift_retain();
    swift_retain();
    unint64_t result = sub_10005FBF8(v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10005C654(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017D400);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000048E0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10005C770(uint64_t a1)
{
  uint64_t v2 = sub_100004700(&qword_10017D428);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017D3F8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10001BA68(v12, (uint64_t)v5, &qword_10017D428);
    unint64_t result = sub_10005FCA4((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for URL();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    _OWORD v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10005C964(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017D3F0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *((unsigned __int8 *)v4 - 8);
    uint64_t v6 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10005FD3C(v5);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    *(void *)(v2[7] + 8 * result) = v6;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_10005CA68()
{
  return &_swiftEmptySetSingleton;
}

unint64_t sub_10005CA74()
{
  return sub_10005C548((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_10005CA80()
{
  return sub_10005C654((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_10005CA8C()
{
  return sub_10005C770((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_10005CA98()
{
  return sub_10005C964((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_10005CAA4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t sub_10005CAB8(char a1)
{
  unint64_t v3 = *v1;
  unint64_t v12 = v3;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (!v4) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_16;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      if (sub_100029B78(*(unsigned char *)(*(void *)(v6 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection)+ OBJC_IVAR____TtC10driverkitd16KernelCollection_kind), a1))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    uint64_t v7 = (void *)(v3 + 32);
    do
    {
      char v8 = *(unsigned char *)(*(void *)(*v7 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection)
                    + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
      swift_retain();
      if (sub_100029B78(v8, a1))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_release();
      }
      ++v7;
      --v4;
    }
    while (v4);
  }
LABEL_16:
  uint64_t result = sub_100068558((uint64_t)&v12);
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0
    && ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    if (_swiftEmptyArrayStorage[2]) {
      goto LABEL_19;
    }
LABEL_24:
    swift_release();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_release();
  if (!v11) {
    goto LABEL_24;
  }
LABEL_19:
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
  {
LABEL_27:
    uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_22;
  }
  if (_swiftEmptyArrayStorage[2])
  {
    uint64_t v10 = _swiftEmptyArrayStorage[4];
    swift_retain();
LABEL_22:
    swift_release();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10005CD0C(uint64_t (*a1)(uint64_t *), void *a2, unint64_t a3)
{
  unint64_t v5 = a3;
  uint64_t v18 = _swiftEmptyArrayStorage;
  if (a3 >> 62)
  {
LABEL_18:
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      unint64_t v9 = 0;
      uint64_t v15 = v5 & 0xFFFFFFFFFFFFFF8;
      unint64_t v16 = v5 & 0xC000000000000001;
      unint64_t v14 = v5;
      while (1)
      {
        if (v16)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return v3;
          }
        }
        else
        {
          if (v9 >= *(void *)(v15 + 16))
          {
            __break(1u);
            goto LABEL_18;
          }
          uint64_t v10 = *(void *)(v5 + 8 * v9 + 32);
          swift_retain();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1)) {
            goto LABEL_14;
          }
        }
        uint64_t v17 = v10;
        unint64_t v3 = a2;
        char v12 = a1(&v17);
        if (v4) {
          goto LABEL_15;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v5 = v14;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          unint64_t v3 = &v18;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        ++v9;
        if (v11 == v8)
        {
          unint64_t v3 = v18;
          goto LABEL_20;
        }
      }
    }
  }
  unint64_t v3 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_10005CEC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100010EA4(a1);
  if (v6) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    *(unsigned char *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  else
  {
    uint64_t v7 = sub_100065AEC((uint64_t)v20, result, v5, 0, a1);
    uint64_t v8 = v20[0];
    uint64_t v9 = v20[1];
    uint64_t v10 = v21;
    uint64_t v11 = v22;
    uint64_t v18 = v20[0];
    uint64_t v19 = v21;
    unint64_t v12 = v23;
    uint64_t v13 = v24;
    uint64_t v14 = v25;
    uint64_t v15 = v26;
    uint64_t v16 = v27;
    char v17 = v28;
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v9;
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 32) = v11;
    *(void *)(a2 + 40) = v12;
    *(void *)(a2 + 48) = v13;
    *(void *)(a2 + 56) = v14;
    *(void *)(a2 + 64) = v15;
    *(void *)(a2 + 72) = v16;
    *(unsigned char *)(a2 + 80) = v17;
    swift_retain();
    sub_10005C020(v18, v9, v19, v11, v12, v13, v14, v15, v16, v17);
    swift_release();
    return sub_10003E9C8(v18, v9, v19, v11, v12, v13, v14, v15, v16, v17);
  }
  return result;
}

uint64_t sub_10005D028(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v69 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v65 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v67 = (char *)&v64 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v66 = (char *)&v64 - v10;
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v64 - v11;
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(v1 + 24);
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10005D8F8(v15, v14);
  swift_release();
  uint64_t v70 = a1;
  if (v16)
  {
    static os_log_type_t.info.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_100132F10;
    uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v13 + 200))();
    uint64_t v20 = v19;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = sub_10002A1DC();
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    a1 = v70;
    sub_10002A230();
    uint64_t v21 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_10005D9D4(v16);
    swift_release();
  }
  swift_retain();
  uint64_t v22 = swift_retain();
  sub_100060480(v22, v13);
  uint64_t v23 = swift_release();
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 144))(v23);
  uint64_t v26 = v25;
  *(void *)&long long v71 = v24;
  *((void *)&v71 + 1) = v25;
  uint64_t v68 = type metadata accessor for RealizedInfo(0);
  sub_1000F279C((uint64_t)&v71, v2 + 32, (uint64_t)&type metadata for String);
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_10005DFA0(v73, v24, v26);
  if (*v28)
  {
    uint64_t v76 = a1;
    uint64_t v29 = sub_100004700(&qword_10017BEC8);
    uint64_t v30 = sub_100068584(&qword_10017D330, (void (*)(uint64_t))type metadata accessor for RealizedInfo);
    sub_1000EF0D4(0, (uint64_t)&v76, v29, v30);
  }
  ((void (*)(void *, void))v27)(v73, 0);
  uint64_t v31 = swift_bridgeObjectRelease_n();
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v13 + 112))(&v71, v31);
  if (v72)
  {
    sub_10000372C(&v71, (uint64_t)v73);
    uint64_t v32 = v74;
    uint64_t v33 = v75;
    sub_1000036B0(v73, v74);
    (*(void (**)(uint64_t, uint64_t))(v33 + 64))(v32, v33);
    uint64_t v35 = v2 + 40;
    uint64_t v34 = *(void *)(v2 + 40);
    if (!*(void *)(v34 + 16) || (unint64_t v36 = sub_10005FCA4((uint64_t)v12), (v37 & 1) == 0))
    {
      uint64_t v44 = v69;
      uint64_t v39 = *(void (**)(char *, uint64_t))(v69 + 8);
      v39(v12, v4);
LABEL_31:
      uint64_t v57 = v74;
      uint64_t v58 = v75;
      sub_1000036B0(v73, v74);
      uint64_t v59 = (uint64_t)v66;
      (*(void (**)(uint64_t, uint64_t))(v58 + 64))(v57, v58);
      sub_100068584(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
      sub_1000F279C(v59, v35, v4);
      uint64_t v60 = v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v67, v59, v4);
      unint64_t v62 = sub_10005E020(&v71);
      if (*v61)
      {
        int64_t v63 = v61;
        swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        ((void (*)(long long *, void))v62)(&v71, 0);
      }
      else
      {
        ((void (*)(long long *, void))v62)(&v71, 0);
      }
      v39(v60, v4);
      v39((char *)v59, v4);
      return sub_10000478C((uint64_t)v73);
    }
    unint64_t v38 = *(void *)(*(void *)(v34 + 56) + 8 * v36);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v69 + 8);
    swift_bridgeObjectRetain();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v39)(v12, v4);
    if (v38 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v41) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v41 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v41)
      {
LABEL_10:
        if (v41 < 1)
        {
          __break(1u);
          return result;
        }
        for (uint64_t i = 0; i != v41; ++i)
        {
          if ((v38 & 0xC000000000000001) != 0)
          {
            uint64_t v43 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v43 = *(void *)(v38 + 8 * i + 32);
            swift_retain();
          }
          sub_10005D9D4(v43);
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v44 = v69;
    goto LABEL_31;
  }
  uint64_t v45 = sub_1000130EC((uint64_t)&v71, &qword_10017BC78);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 120))(v45);
  if (result)
  {
    uint64_t v46 = result;
    uint64_t v47 = result + OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
    sub_100068584(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
    sub_1000F279C(v47, v2 + 40, v4);
    uint64_t v48 = v69;
    uint64_t v49 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v65, v47, v4);
    BOOL v51 = sub_10005E020(v73);
    if (*v50)
    {
      uint64_t v52 = v50;
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v52 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      ((void (*)(void *, void))v51)(v73, 0);
    }
    else
    {
      ((void (*)(void *, void))v51)(v73, 0);
    }
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v4);
    LOBYTE(v71) = *(unsigned char *)(v46 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
    uint64_t v53 = v71;
    sub_1000599C4();
    sub_1000F279C((uint64_t)&v71, v2 + 48, (uint64_t)&type metadata for CollectionKind);
    uint64_t v55 = sub_10005E188(v73, v53);
    if (*v54)
    {
      uint64_t v56 = v54;
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v56 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v56 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      ((void (*)(void *, void))v55)(v73, 0);
    }
    else
    {
      ((void (*)(void *, void))v55)(v73, 0);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10005D8F8(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v5 = sub_10005FBF8(a1);
      if (v6)
      {
        uint64_t v4 = *(void *)(*(void *)(a2 + 56) + 8 * v5);
        swift_retain();
        return v4;
      }
    }
    return 0;
  }
  swift_retain();
  uint64_t v3 = __CocoaDictionary.lookup(_:)();
  swift_release();
  if (!v3) {
    return 0;
  }
  type metadata accessor for RealizedInfo(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v8;
  swift_unknownObjectRelease();
  return v4;
}

uint64_t sub_10005D9D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v46 = (char *)v41 - v12;
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(v1 + 24);
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10005D8F8(v15, v14);
  swift_release();
  swift_release();
  if (!v16) {
    return v16 != 0;
  }
  uint64_t v43 = v11;
  uint64_t v44 = (void (*)(void *, void))v7;
  uint64_t v45 = v8;
  unint64_t v17 = swift_retain();
  sub_10006031C(v17);
  swift_release();
  uint64_t v18 = swift_release();
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 144))(v18);
  uint64_t v21 = (void (*)(void *))v20;
  uint64_t v23 = (void (*)(void *, void))sub_10005DFA0(v47, v19, v20);
  if (!*v22)
  {
    v23(v47, 0);
    goto LABEL_7;
  }
  uint64_t v24 = v22;
  v41[1] = v2;
  uint64_t v42 = v16;
  swift_retain();
  uint64_t v25 = 0;
  uint64_t v16 = sub_100065E80(v24, a1);
  uint64_t v26 = (void (*)(void *))a1;
  swift_release();
  if ((unint64_t)*v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v27 >= v16) {
      goto LABEL_5;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v27 = *(void *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v27 < v16) {
    goto LABEL_24;
  }
LABEL_5:
  sub_1000669D0(v16, v27, (void (*)(void))type metadata accessor for RealizedInfo);
  v23(v47, 0);
  uint64_t v16 = v42;
LABEL_7:
  uint64_t v28 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v13 + 152))(v28);
  uint64_t v23 = v44;
  uint64_t v29 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, void (*)(void *, void)))(v45 + 48))(v6, 1, v44) == 1)
  {
    for (uint64_t i = sub_1000130EC((uint64_t)v6, (uint64_t *)&unk_10017FA60); ; uint64_t i = v36(v46, v23))
    {
      uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 120))(i);
      if (!v37) {
        return v16 != 0;
      }
      uint64_t v21 = (void (*)(void *))v37;
      uint64_t v26 = sub_10005E188(v47, *(unsigned __int8 *)(v37 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
      if (!*v38) {
        break;
      }
      uint64_t v39 = v38;
      swift_retain();
      uint64_t v25 = sub_100065E80(v39, a1);
      swift_release();
      if ((unint64_t)*v39 >> 62)
      {
LABEL_25:
        swift_bridgeObjectRetain();
        uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v40 >= v25)
        {
LABEL_19:
          sub_1000669D0(v25, v40, (void (*)(void))type metadata accessor for RealizedInfo);
          ((void (*)(void *, void))v26)(v47, 0);
LABEL_21:
          swift_release();
          return v16 != 0;
        }
      }
      else
      {
        uint64_t v40 = *(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v40 >= v25) {
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_27:
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v35 < (uint64_t)v23) {
        goto LABEL_28;
      }
LABEL_12:
      a1 = (uint64_t)v26;
      sub_1000669D0((uint64_t)v23, v35, (void (*)(void))type metadata accessor for RealizedInfo);
      ((void (*)(void *, void))v21)(v47, 0);
      uint64_t v23 = v44;
LABEL_14:
      unint64_t v36 = *(uint64_t (**)(char *, void))(v45 + 8);
      v36(v43, v23);
    }
    ((void (*)(void *, void))v26)(v47, 0);
    goto LABEL_21;
  }
  uint64_t v31 = v46;
  (*(void (**)(char *, char *, void (*)(void *, void)))(v29 + 32))(v46, v6, v23);
  (*(void (**)(char *, char *, void (*)(void *, void)))(v29 + 16))(v43, v31, v23);
  uint64_t v21 = sub_10005E020(v47);
  if (!*v32)
  {
    ((void (*)(void *, void))v21)(v47, 0);
    goto LABEL_14;
  }
  uint64_t v33 = v32;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))sub_100065E80(v33, a1);
  uint64_t v26 = (void (*)(void *))a1;
  uint64_t result = swift_release();
  if ((unint64_t)*v33 >> 62) {
    goto LABEL_27;
  }
  uint64_t v35 = *(void *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v35 >= (uint64_t)v23) {
    goto LABEL_12;
  }
LABEL_28:
  __break(1u);
  return result;
}

void (*sub_10005DFA0(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  char v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_100062864(v6, a2, a3);
  return sub_10002CD14;
}

void (*sub_10005E020(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for URL();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  char v6 = malloc(*(void *)(v4 + 64));
  v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = sub_1000626AC(v2, (uint64_t)v6);
  return sub_10005E110;
}

void sub_10005E110(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48);
  uint64_t v3 = *(void *)(*a1 + 32);
  uint64_t v4 = *(void *)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);

  free(v1);
}

void (*sub_10005E188(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1000625BC(v4, a2);
  return sub_10005E1E8;
}

void sub_10005E1E8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

uint64_t sub_10005E234(uint64_t a1, uint64_t a2)
{
  return sub_10005F4D8(a1, a2, (uint64_t)sub_10005F464, (void (*)(void *__return_ptr, void *, uint64_t, void))sub_10005F1D4, &qword_10017D338, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10005E27C(uint64_t a1)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void v30[12];
  unsigned char v31[104];

  uint64_t v2 = type metadata accessor for LookupSpec();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v4, a1, v5);
  swift_storeEnumTagMultiPayload();
  sub_10005EFC4((uint64_t)v4, 0, 0, (uint64_t)v30);
  uint64_t v7 = v30[0];
  uint64_t v6 = v30[1];
  uint64_t v8 = v30[2];
  uint64_t v9 = v30[3];
  uint64_t v10 = v30[4];
  uint64_t v11 = v30[5];
  uint64_t v12 = v30[6];
  uint64_t v13 = v30[7];
  uint64_t v19 = v30[9];
  uint64_t v20 = v30[8];
  uint64_t v18 = v30[10];
  sub_100029900((uint64_t)v30, (uint64_t)v31, &qword_10017D348);
  if (v31[88] == 1)
  {
    v21[0] = v7;
    v21[1] = v6;
    void v21[2] = v8;
    uint64_t v22 = v9;
    uint64_t v23 = v10;
    uint64_t v24 = v11;
    uint64_t v25 = v12;
    uint64_t v26 = v13;
    uint64_t v27 = v20;
    uint64_t v28 = v19;
    uint64_t v29 = v18;
    sub_1000667D4();
    swift_willThrowTypedImpl();
    sub_100066944((uint64_t)v30, (uint64_t (*)(void))&_swift_release);
    sub_100066778((uint64_t)v4);
    return 0;
  }
  sub_100066778((uint64_t)v4);
  uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v7 + 24) + 112);
  uint64_t v15 = swift_retain();
  v14(v21, v15);
  swift_release();
  if (!v22)
  {
    sub_100066944((uint64_t)v30, (uint64_t (*)(void))&_swift_release);
    sub_1000130EC((uint64_t)v21, &qword_10017BC78);
    return 0;
  }
  sub_1000130EC((uint64_t)v21, &qword_10017BC78);
  return v7;
}

void **sub_10005E4B0(uint64_t a1, uint64_t (*a2)(uint64_t), void **a3)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v29[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for LookupSpec();
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)&v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100066C90(a1, (uint64_t)v13);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v8 + 32))(v10, v13, v7);
      uint64_t v18 = v3[5];
      if (*(void *)(v18 + 16) && (unint64_t v19 = sub_10005FCA4((uint64_t)v10), (v20 & 1) != 0))
      {
        unint64_t v17 = *(void **)(*(void *)(v18 + 56) + 8 * v19);
        swift_bridgeObjectRetain();
      }
      else
      {
        unint64_t v17 = 0;
      }
      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
      if (a2) {
        goto LABEL_23;
      }
      return (void **)v17;
    case 2u:
      uint64_t v21 = v3[6];
      if (*(void *)(v21 + 16) && (unint64_t v22 = sub_10005FD3C(*(unsigned __int8 *)v13), (v23 & 1) != 0))
      {
        unint64_t v17 = *(void **)(*(void *)(v21 + 56) + 8 * v22);
        swift_bridgeObjectRetain();
        if (a2) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t v17 = 0;
        if (a2) {
          goto LABEL_23;
        }
      }
      return (void **)v17;
    case 3u:
      uint64_t v24 = (unint64_t *)*v13;
      uint64_t v25 = swift_bridgeObjectRetain();
      unint64_t v26 = sub_10005EAB0(v25, v24);
      goto LABEL_14;
    case 4u:
      uint64_t v27 = swift_bridgeObjectRetain();
      unint64_t v26 = sub_10005E764(v27);
LABEL_14:
      unint64_t v17 = sub_10006012C(v26);
      goto LABEL_15;
    default:
      uint64_t v14 = v3[4];
      if (!*(void *)(v14 + 16) || (unint64_t v15 = sub_1000048E0(*v13, v13[1]), (v16 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        unint64_t v17 = 0;
        if (!a2) {
          return (void **)v17;
        }
        goto LABEL_23;
      }
      unint64_t v17 = *(void **)(*(void *)(v14 + 56) + 8 * v15);
      swift_bridgeObjectRetain();
LABEL_15:
      swift_bridgeObjectRelease();
      if (a2)
      {
LABEL_23:
        if (v17) {
          return sub_100065CC8((unint64_t)v17, a2, a3);
        }
      }
      return (void **)v17;
  }
}

uint64_t sub_10005E764(uint64_t a1)
{
  void (*v11)(void *__return_ptr, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  void v26[5];
  uint64_t v27;
  uint64_t v28;
  void *v29;

  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v1 = &_swiftEmptyDictionarySingleton;
    uint64_t v29 = &_swiftEmptyDictionarySingleton;
    __CocoaDictionary.makeIterator()();
    uint64_t v2 = __CocoaDictionary.Iterator.next()();
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v5 = v3;
      type metadata accessor for OSExtension(0);
      do
      {
        v26[0] = v4;
        swift_dynamicCast();
        v26[0] = v5;
        type metadata accessor for RealizedInfo(0);
        swift_dynamicCast();
        uint64_t v10 = v27;
        uint64_t v9 = v28;
        uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v27 + 112);
        swift_retain();
        uint64_t v12 = swift_retain();
        v11(v26, v12);
        uint64_t v13 = v26[3];
        sub_1000130EC((uint64_t)v26, &qword_10017BC78);
        swift_release();
        swift_release();
        if (v13)
        {
          uint64_t v14 = v29;
          unint64_t v15 = v29[2];
          if (v29[3] <= v15)
          {
            char v16 = v15 + 1;
            swift_retain();
            swift_retain();
            sub_1000611EC(v16, 1);
            uint64_t v14 = v29;
          }
          else
          {
            swift_retain();
            swift_retain();
          }
          v26[0] = v10;
          sub_100068584(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
          uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v18 = v14 + 8;
          unint64_t v19 = -1 << *((unsigned char *)v14 + 32);
          char v20 = result & ~v19;
          uint64_t v21 = v20 >> 6;
          if (((-1 << v20) & ~v14[(v20 >> 6) + 8]) != 0)
          {
            unint64_t v6 = __clz(__rbit64((-1 << v20) & ~v14[(v20 >> 6) + 8])) | v20 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            unint64_t v22 = 0;
            char v23 = (unint64_t)(63 - v19) >> 6;
            do
            {
              if (++v21 == v23 && (v22 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              uint64_t v24 = v21 == v23;
              if (v21 == v23) {
                uint64_t v21 = 0;
              }
              v22 |= v24;
              uint64_t v25 = v18[v21];
            }
            while (v25 == -1);
            unint64_t v6 = __clz(__rbit64(~v25)) + (v21 << 6);
          }
          *(void *)((char *)v18 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
          uint64_t v7 = 8 * v6;
          *(void *)(v14[6] + v7) = v10;
          *(void *)(v14[7] + v7) = v9;
          ++v14[2];
        }
        swift_release();
        swift_release();
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
        uint64_t v5 = v8;
      }
      while (v4);
      uint64_t v1 = v29;
    }
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    sub_1000048D8();
  }
  else
  {
    uint64_t v1 = (void *)sub_100063078(a1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_10006335C);
    swift_bridgeObjectRelease();
  }
  return (uint64_t)v1;
}

uint64_t sub_10005EAB0(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = (unint64_t *)&_swiftEmptyDictionarySingleton;
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      type metadata accessor for OSExtension(0);
      unint64_t v17 = v2;
      do
      {
        swift_dynamicCast();
        type metadata accessor for RealizedInfo(0);
        swift_dynamicCast();
        if (*v18 == v2)
        {
          unint64_t v6 = *((void *)&_swiftEmptyDictionarySingleton + 2);
          if (*((void *)&_swiftEmptyDictionarySingleton + 3) <= v6)
          {
            uint64_t v7 = v6 + 1;
            swift_retain();
            swift_retain();
            sub_1000611EC(v7, 1);
          }
          else
          {
            swift_retain();
            swift_retain();
          }
          sub_100068584(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
          uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v9 = (char *)&_swiftEmptyDictionarySingleton + 64;
          uint64_t v10 = -1 << *((unsigned char *)&_swiftEmptyDictionarySingleton + 32);
          unint64_t v11 = result & ~v10;
          unint64_t v12 = v11 >> 6;
          if (((-1 << v11) & ~*((void *)&_swiftEmptyDictionarySingleton + (v11 >> 6) + 8)) != 0)
          {
            unint64_t v4 = __clz(__rbit64((-1 << v11) & ~*((void *)&_swiftEmptyDictionarySingleton + (v11 >> 6) + 8))) | v11 & 0x7FFFFFFFFFFFFFC0;
            uint64_t v2 = v17;
          }
          else
          {
            char v13 = 0;
            unint64_t v14 = (unint64_t)(63 - v10) >> 6;
            uint64_t v2 = v17;
            do
            {
              if (++v12 == v14 && (v13 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v15 = v12 == v14;
              if (v12 == v14) {
                unint64_t v12 = 0;
              }
              v13 |= v15;
              uint64_t v16 = *(void *)&v9[8 * v12];
            }
            while (v16 == -1);
            unint64_t v4 = __clz(__rbit64(~v16)) + (v12 << 6);
          }
          *(void *)&v9[(v4 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v4;
          uint64_t v5 = 8 * v4;
          *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 6) + v5) = v18;
          *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 7) + v5) = v19;
          ++*((void *)&_swiftEmptyDictionarySingleton + 2);
        }
        swift_release();
        swift_release();
      }
      while (__CocoaDictionary.Iterator.next()());
      uint64_t v3 = (unint64_t *)&_swiftEmptyDictionarySingleton;
    }
    sub_1000048D8();
  }
  else
  {
    uint64_t v3 = sub_100062F0C(a1, a2);
    swift_bridgeObjectRelease();
  }
  return (uint64_t)v3;
}

void sub_10005EDC4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v30 = v7;
  swift_bridgeObjectRetain();
  sub_10006852C((uint64_t)&v30);
  uint64_t v8 = sub_100066564(v7, a1, (uint64_t)a2);
  swift_bridgeObjectRelease();
  sub_100068558((uint64_t)&v30);
  if (!*(void *)(v8 + 16))
  {
    swift_release();
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = a1;
    v17._int64_t object = a2;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = 0x6F6620746F6E2027;
    v18._int64_t object = (void *)0xEB00000000646E75;
    String.append(_:)(v18);
    unint64_t v12 = (void *)0xD00000000000001BLL;
    *(void *)&long long v15 = 0x80000001001471B0;
    long long v16 = 0uLL;
    unint64_t v10 = 0x8000000000000000;
    uint64_t v11 = 10;
LABEL_8:
    long long v13 = 0uLL;
    long long v14 = 0uLL;
    goto LABEL_9;
  }
  uint64_t v9 = swift_retain();
  sub_10005CEC8(v9, (uint64_t)&v23);
  swift_release();
  unint64_t v10 = v23;
  if (!v23)
  {
    swift_release();
    __break(1u);
    goto LABEL_11;
  }
  sub_10003E9C8((uint64_t)v24, v25, *((uint64_t *)&v25 + 1), v26, *((unint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29);
  if (*(void *)(v8 + 16) != 1)
  {
    unint64_t v12 = sub_100060228(v8);
    swift_release();
    uint64_t v11 = 0;
    long long v15 = 0uLL;
    long long v16 = 0uLL;
    goto LABEL_8;
  }
  sub_10005CEC8(v8, (uint64_t)&v23);
  swift_release();
  if (v23)
  {
    uint64_t v11 = v29;
    long long v21 = v27;
    long long v22 = v28;
    long long v19 = v25;
    long long v20 = v26;
    unint64_t v12 = v24;
    swift_release();
    long long v13 = v21;
    long long v14 = v22;
    long long v15 = v19;
    long long v16 = v20;
LABEL_9:
    *(void *)a3 = v12;
    *(_OWORD *)(a3 + 8) = v15;
    *(_OWORD *)(a3 + 24) = v16;
    *(_OWORD *)(a3 + 40) = v13;
    *(_OWORD *)(a3 + 56) = v14;
    *(void *)(a3 + 72) = v11;
    *(void *)(a3 + 80) = v10;
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_10005EFC4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for LookupSpec();
  __chkstk_darwin(v8);
  unint64_t v10 = (uint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v11 = (unint64_t)sub_10005E4B0(a1, a2, a3);
  if (!v11) {
    goto LABEL_10;
  }
  unint64_t v12 = v11;
  uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
  if (!(v11 >> 62))
  {
    uint64_t result = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
  {
LABEL_9:
    swift_bridgeObjectRelease();
LABEL_10:
    sub_100066C90(a1, (uint64_t)v10);
    if (swift_getEnumCaseMultiPayload())
    {
      uint64_t result = sub_100066778((uint64_t)v10);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      unint64_t v16 = 0x8000000100147170;
      char v26 = 1;
      unint64_t v25 = 0x8000000000000000;
      uint64_t v15 = 0xD000000000000032;
      uint64_t v24 = 10;
    }
    else
    {
      uint64_t v27 = *v10;
      uint64_t v30 = (void *)v10[1];
      sub_10005EDC4(v27, v30, (uint64_t)v31);
      uint64_t v15 = v31[0];
      uint64_t v18 = v31[3];
      uint64_t v28 = v31[2];
      unint64_t v29 = v31[1];
      uint64_t v19 = v31[4];
      uint64_t v20 = v31[5];
      uint64_t v21 = v31[6];
      uint64_t v22 = v31[7];
      uint64_t v23 = v31[8];
      uint64_t v24 = v31[9];
      unint64_t v25 = v31[10];
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v17 = v28;
      unint64_t v16 = v29;
      char v26 = 1;
    }
    goto LABEL_13;
  }
LABEL_4:
  if ((v12 & 0xC000000000000001) != 0)
  {
    uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)(v13 + 16))
  {
    uint64_t v15 = *(void *)(v12 + 32);
    swift_retain();
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    char v26 = 0;
LABEL_13:
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v16;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v18;
    *(void *)(a4 + 32) = v19;
    *(void *)(a4 + 40) = v20;
    *(void *)(a4 + 48) = v21;
    *(void *)(a4 + 56) = v22;
    *(void *)(a4 + 64) = v23;
    *(void *)(a4 + 72) = v24;
    *(void *)(a4 + 80) = v25;
    *(unsigned char *)(a4 + 88) = v26;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005F1D4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for LookupSpec();
  __chkstk_darwin(v8);
  unint64_t v10 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = (uint64_t)sub_10005E4B0(a1, a2, a3);
  uint64_t v12 = result;
  if (result)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    unint64_t v23 = result;
  }
  else
  {
    sub_100066C90(a1, (uint64_t)v10);
    if (swift_getEnumCaseMultiPayload())
    {
      uint64_t result = sub_100066778((uint64_t)v10);
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v13 = 0x8000000100147170;
      unint64_t v22 = 0x8000000000000000;
      unint64_t v23 = 0xD000000000000032;
      uint64_t v21 = 10;
    }
    else
    {
      uint64_t v24 = *v10;
      unint64_t v29 = (void *)v10[1];
      sub_10005EDC4(v24, v29, (uint64_t)v30);
      unint64_t v23 = v30[0];
      uint64_t v27 = v30[2];
      unint64_t v28 = v30[1];
      uint64_t v16 = v30[4];
      uint64_t v26 = v30[3];
      uint64_t v17 = v30[5];
      uint64_t v18 = v30[6];
      uint64_t v19 = v30[7];
      uint64_t v20 = v30[8];
      uint64_t v21 = v30[9];
      unint64_t v22 = v30[10];
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v14 = v27;
      unint64_t v13 = v28;
      uint64_t v15 = v26;
    }
  }
  *(void *)a4 = v23;
  *(void *)(a4 + 8) = v13;
  *(void *)(a4 + 16) = v14;
  *(void *)(a4 + 24) = v15;
  *(void *)(a4 + 32) = v16;
  *(void *)(a4 + 40) = v17;
  *(void *)(a4 + 48) = v18;
  *(void *)(a4 + 56) = v19;
  *(void *)(a4 + 64) = v20;
  *(void *)(a4 + 72) = v21;
  *(void *)(a4 + 80) = v22;
  *(unsigned char *)(a4 + 88) = v12 == 0;
  return result;
}

uint64_t sub_10005F384(uint64_t a1, uint64_t (*a2)(uint64_t), void **a3)
{
  sub_10005EFC4(a1, a2, a3, (uint64_t)&v5);
  uint64_t v3 = v5;
  sub_100029900((uint64_t)&v5, (uint64_t)v6, &qword_10017D348);
  if (v6[88] == 1)
  {
    sub_1000667D4();
    swift_willThrowTypedImpl();
    sub_100066944((uint64_t)&v5, (uint64_t (*)(void))&_swift_release);
    return 0;
  }
  return v3;
}

BOOL sub_10005F468(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 24) + 112))(v3);
  BOOL v1 = v3[3] != 0;
  sub_1000130EC((uint64_t)v3, &qword_10017BC78);
  return v1;
}

uint64_t sub_10005F4D8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, void *, uint64_t, void), uint64_t *a5, uint64_t (*a6)(void))
{
  uint64_t v26 = a6;
  uint64_t v27 = a5;
  uint64_t v10 = type metadata accessor for LookupSpec();
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v12 = a1;
  v12[1] = a2;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  a4(v39, v12, a3, 0);
  uint64_t v13 = v39[0];
  uint64_t v14 = v39[1];
  uint64_t v15 = v39[2];
  uint64_t v16 = v39[3];
  uint64_t v17 = v39[4];
  uint64_t v18 = v39[5];
  uint64_t v19 = v39[6];
  uint64_t v20 = v39[7];
  uint64_t v24 = v39[9];
  uint64_t v25 = v39[8];
  uint64_t v23 = v39[10];
  sub_100066778((uint64_t)v12);
  sub_100029900((uint64_t)v39, (uint64_t)v40, v27);
  if (v40[88] == 1)
  {
    uint64_t v28 = v13;
    uint64_t v29 = v14;
    uint64_t v30 = v15;
    uint64_t v31 = v16;
    uint64_t v32 = v17;
    uint64_t v33 = v18;
    uint64_t v34 = v19;
    uint64_t v35 = v20;
    uint64_t v36 = v25;
    uint64_t v37 = v24;
    uint64_t v38 = v23;
    sub_1000667D4();
    swift_willThrowTypedImpl();
    sub_100066944((uint64_t)v39, v26);
    return 0;
  }
  return v13;
}

uint64_t sub_10005F648(uint64_t a1)
{
  uint64_t v3 = v1[4];
  uint64_t v25 = a1;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_100065328((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1000673D0, (uint64_t)v24, v3);
  uint64_t v5 = sub_100063078(v4, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100063AD8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v1[4] = v5;
  uint64_t v6 = v1[5];
  uint64_t v22 = v1;
  uint64_t v23 = a1;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100064F94((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1000673D0, (uint64_t)v21, v6);
  uint64_t v8 = sub_100063078(v7, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100063708);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v1[5] = v8;
  uint64_t v9 = v1[6];
  uint64_t v19 = v1;
  uint64_t v20 = a1;
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_100064D70((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1000673D0, (uint64_t)v18, v9);
  uint64_t v11 = sub_100063078(v10, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100063554);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v1[6] = v11;
  uint64_t v16 = v1;
  uint64_t v17 = a1;
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = sub_100067074(v12, (uint64_t (*)(uint64_t *, uint64_t))sub_100067448, (uint64_t)&v15);
  uint64_t result = swift_bridgeObjectRelease();
  v1[3] = v13;
  return result;
}

uint64_t sub_10005F800()
{
  return swift_bridgeObjectRetain();
}

uint64_t ApprovalDB.entries.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *BOOL v1 = a1;
  return result;
}

uint64_t (*sub_10005F834())()
{
  return nullsub_1;
}

uint64_t sub_10005F854()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10005F85C(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_10005F888())()
{
  return nullsub_1;
}

uint64_t sub_10005F8A8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10005F8B0(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_10005F8DC())()
{
  return nullsub_1;
}

uint64_t sub_10005F8FC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10005F904(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*sub_10005F930())()
{
  return nullsub_1;
}

uint64_t sub_10005F950()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10005F958(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*sub_10005F984())()
{
  return nullsub_1;
}

uint64_t sub_10005F9A4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10005F9AC(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*sub_10005F9D8())()
{
  return nullsub_1;
}

uint64_t sub_10005F9F8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10005FA00(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*sub_10005FA2C())()
{
  return nullsub_1;
}

uint64_t sub_10005FA54()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = swift_retain();
  uint64_t v3 = sub_10005D8F8(v2, v1);
  swift_release();
  return v3;
}

uint64_t sub_10005FA94(uint64_t a1, uint64_t a2)
{
  return sub_10005F4D8(a1, a2, (uint64_t)sub_10005F464, (void (*)(void *__return_ptr, void *, uint64_t, void))sub_10005EFC4, &qword_10017D348, (uint64_t (*)(void))&_swift_release);
}

double sub_10005FAF8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100004A40((void (*)(uint64_t))sub_10005FB74, 0, a1);
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(void *)(a2 + 48) = v7;
  return result;
}

uint64_t sub_10005FB74@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  a2[6] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_10005FBF8(uint64_t a1)
{
  type metadata accessor for OSExtension(0);
  sub_100068584(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10005FDA8(a1, v2);
}

unint64_t sub_10005FCA4(uint64_t a1)
{
  type metadata accessor for URL();
  sub_100068584(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_10005FEA4(a1, v2);
}

unint64_t sub_10005FD3C(uint64_t a1)
{
  sub_1000599C4();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100060064(a1, v2);
}

unint64_t sub_10005FDA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    type metadata accessor for OSExtension(0);
    sub_100068584(&qword_10017D420, (void (*)(uint64_t))type metadata accessor for OSExtension);
    do
    {
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10005FEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100068584(&qword_10017BE98, (void (*)(uint64_t))&type metadata accessor for URL);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_100060064(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    sub_100029B94();
    do
    {
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

void *sub_10006012C(unint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaDictionary.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = &_swiftEmptyArrayStorage;
  }
  else
  {
    sub_100004700(&qword_10017FB70);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = j__malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1000655E8((uint64_t)&v8, v3 + 4, v2, a1);
  double result = (void *)sub_1000048D8();
  if (v6 == v2) {
    return v3;
  }
  __break(1u);
  return result;
}

void *sub_100060228(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100004700(&qword_10017D410);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 80);
  uint64_t v5 = sub_1000658AC((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_1000048D8();
  if (v5 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_10006031C(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    a1 = sub_10005FBF8(a1);
    char v12 = v11;
    swift_bridgeObjectRelease();
    if (v12)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = *v2;
      uint64_t v16 = *v2;
      *uint64_t v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_100062410();
        uint64_t v8 = v16;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0) {
    uint64_t v5 = *v2;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v6 = __CocoaDictionary.lookup(_:)();
  swift_release();
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRelease();
  uint64_t v7 = __CocoaDictionary.count.getter();
  uint64_t v8 = sub_100060534(v5, v7);
  swift_retain();
  a1 = sub_10005FBF8(a1);
  char v10 = v9;
  swift_release();
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:
  swift_release();
  uint64_t v14 = *(void *)(*(void *)(v8 + 56) + 8 * a1);
  sub_100061A00(a1, v8);
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_100060480(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaDictionary.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v3 = sub_100060534(v7, result + 1);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_100061C00(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v10;

  return swift_bridgeObjectRelease();
}

uint64_t sub_100060534(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100004700(&qword_10017D3E8);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for OSExtension(0);
      do
      {
        swift_dynamicCast();
        type metadata accessor for RealizedInfo(0);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_1000611EC(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        sub_100068584(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_1000607A8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017D3F0);
  char v33 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v32 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v20 >= v31) {
      break;
    }
    uint64_t v21 = (void *)(v5 + 64);
    unint64_t v22 = *(void *)(v32 + 8 * v20);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v20 + 1;
      if (v20 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v32 + 8 * v13);
      if (!v22)
      {
        int64_t v23 = v20 + 2;
        if (v23 >= v31)
        {
LABEL_33:
          swift_release();
          if ((v33 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v22 = *(void *)(v32 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            int64_t v13 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v31) {
              goto LABEL_33;
            }
            unint64_t v22 = *(void *)(v32 + 8 * v13);
            ++v23;
            if (v22) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v23;
      }
    }
LABEL_30:
    unint64_t v10 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_31:
    char v28 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
    uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    if ((v33 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_1000599C4();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v26 = v16 == v25;
        if (v16 == v25) {
          unint64_t v16 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v16);
      }
      while (v27 == -1);
      unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(unsigned char *)(*(void *)(v7 + 48) + v17) = v28;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v21 = (void *)(v5 + 64);
  if ((v33 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v21 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100060AB0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100004700(&qword_10017D3F8);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_100068584(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100060ED4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017D400);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000611EC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017D3E8);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v33) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v34 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v33) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v34 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v33)
        {
LABEL_33:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v34 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v33) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v34 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = 8 * v20;
    uint64_t v30 = *(void *)(*(void *)(v5 + 48) + v29);
    uint64_t v31 = *(void *)(*(void *)(v5 + 56) + v29);
    if ((v35 & 1) == 0)
    {
      swift_retain();
      swift_retain();
    }
    type metadata accessor for OSExtension(0);
    sub_100068584(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 8 * v17;
    *(void *)(*(void *)(v7 + 48) + v18) = v30;
    *(void *)(*(void *)(v7 + 56) + v18) = v31;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v22, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_10006153C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      sub_1000599C4();
      do
      {
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 >= v8 && v3 >= (uint64_t)v9)
          {
LABEL_16:
            uint64_t v12 = *(void *)(a2 + 48);
            int64_t v13 = (unsigned char *)(v12 + v3);
            uint64_t v14 = (unsigned char *)(v12 + v6);
            if (v3 != v6 || v13 >= v14 + 1) {
              unsigned char *v13 = *v14;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            unint64_t v16 = (void *)(v15 + 8 * v3);
            unint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              void *v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v9 >= v8 || v3 >= (uint64_t)v9)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100061708(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      int64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_100068584(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            int64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              void *v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    char v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    char v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *char v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100061A00(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      type metadata accessor for OSExtension(0);
      sub_100068584(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
      do
      {
        unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 >= v8 && v3 >= (uint64_t)v9)
          {
LABEL_16:
            uint64_t v12 = *(void *)(a2 + 48);
            int64_t v13 = (void *)(v12 + 8 * v3);
            uint64_t v14 = (void *)(v12 + 8 * v6);
            if (v3 != v6 || v13 >= v14 + 1) {
              void *v13 = *v14;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            int64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              void *v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v9 >= v8 || v3 >= (uint64_t)v9)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100061C00(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10005FBF8(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100062410();
LABEL_7:
    int64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1000611EC(v13, a3 & 1);
  unint64_t v19 = sub_10005FBF8(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_17:
    type metadata accessor for OSExtension(0);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  int64_t v16 = (void *)*v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  v16[(v10 >> 6) + 8] |= 1 << v10;
  uint64_t v21 = 8 * v10;
  *(void *)(v16[6] + v21) = a2;
  *(void *)(v16[7] + v21) = a1;
  uint64_t v22 = v16[2];
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v16[2] = v24;

  return swift_retain();
}

uint64_t sub_100061D64(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void *sub_100061E1C()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017D3F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100061FC0()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004700(&qword_10017D3F8);
  BOOL v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100062258()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017D400);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100062410()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017D3E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    swift_retain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void (*sub_1000625BC(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_100058F78(v4);
  v4[9] = sub_100062910((uint64_t)(v4 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_10006264C;
}

void sub_10006264C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

void (*sub_1000626AC(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for URL();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = sub_10002E898(v4);
  v4[12] = sub_100062B0C(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1000627CC;
}

void sub_1000627CC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 88);
  uint64_t v4 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 96))();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);

  free(v1);
}

void (*sub_100062864(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_100058F78(v6);
  v6[10] = sub_100062C8C(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10002D448;
}

unint64_t (*sub_100062910(uint64_t a1, uint64_t a2, char a3))(unint64_t result, char a2)
{
  uint64_t v4 = v3;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 24) = a2;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10005FD3C(a2);
  *(unsigned char *)(a1 + 25) = v9 & 1;
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = *(void *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(void *)(a1 + 16) = v10;
      if (v14)
      {
LABEL_8:
        uint64_t v16 = *(void *)(*(void *)(*v4 + 56) + 8 * v10);
LABEL_12:
        *(void *)a1 = v16;
        return sub_100062A34;
      }
LABEL_11:
      uint64_t v16 = 0;
      goto LABEL_12;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100061E1C();
      goto LABEL_7;
    }
    sub_1000607A8(v13, a3 & 1);
    unint64_t v17 = sub_10005FD3C(a2);
    if ((v14 & 1) == (v18 & 1))
    {
      unint64_t v10 = v17;
      *(void *)(a1 + 16) = v17;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (unint64_t (*)(unint64_t, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100062A34(unint64_t result, char a2)
{
  uint64_t v2 = *(void *)result;
  LOBYTE(v3) = *(unsigned char *)(result + 25);
  if (a2)
  {
    if (!v2) {
      goto LABEL_10;
    }
    unint64_t v4 = *(void *)(result + 16);
    uint64_t v5 = **(void ***)(result + 8);
    if (*(unsigned char *)(result + 25))
    {
LABEL_9:
      *(void *)(v5[7] + 8 * v4) = v2;
      return result;
    }
    char v6 = *(unsigned char *)(result + 24);
    v5[(v4 >> 6) + 8] |= 1 << v4;
    *(unsigned char *)(v5[6] + v4) = v6;
    uint64_t v3 = v5[7];
    *(void *)(v3 + 8 * v4) = v2;
    uint64_t v7 = v5[2];
    BOOL v8 = __OFADD__(v7, 1);
    uint64_t v2 = v7 + 1;
    if (!v8) {
      goto LABEL_14;
    }
    __break(1u);
  }
  if (!v2)
  {
LABEL_10:
    if (v3) {
      return sub_10006153C(*(void *)(result + 16), **(void **)(result + 8));
    }
    return result;
  }
  unint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = **(void ***)(result + 8);
  if (v3) {
    goto LABEL_9;
  }
  char v9 = *(unsigned char *)(result + 24);
  v5[(v4 >> 6) + 8] |= 1 << v4;
  *(unsigned char *)(v5[6] + v4) = v9;
  *(void *)(v5[7] + 8 * v4) = v2;
  uint64_t v10 = v5[2];
  BOOL v8 = __OFADD__(v10, 1);
  uint64_t v2 = v10 + 1;
  if (!v8)
  {
LABEL_14:
    _OWORD v5[2] = v2;
    return result;
  }
  __break(1u);
  return result;
}

void (*sub_100062B0C(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  unint64_t v4 = v3;
  BOOL v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  void v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_10005FCA4(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *BOOL v8 = v17;
        return sub_100062C3C;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100061FC0();
      goto LABEL_7;
    }
    sub_100060AB0(v14, a3 & 1);
    unint64_t v18 = sub_10005FCA4(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for URL();
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100062C3C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_100062DD4(*a1, *((unsigned char *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();

  free(v1);
}

void (*sub_100062C8C(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  char v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_1000048E0(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        void *v10 = v19;
        return sub_10002E848;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_100062258();
      goto LABEL_7;
    }
    sub_100060ED4(v16, a4 & 1);
    unint64_t v20 = sub_1000048E0(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = v20;
      v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100062DD4(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for URL();
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  if (v14)
  {
    BOOL v15 = (void *)*a3;
    if (a2)
    {
      *(void *)(v15[7] + 8 * a4) = v14;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 16))(v13, a5);
      sub_100061D64(a4, (uint64_t)v13, v14, v15);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_100061708(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

unint64_t *sub_100062F0C(uint64_t isStackAllocationSafe, unint64_t *a2)
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    BOOL v8 = sub_1000631E4((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, (uint64_t)a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = sub_1000631E4((unint64_t *)v9, v6, v4, (uint64_t)a2);
    swift_slowDealloc();
  }
  return a2;
}

uint64_t sub_100063078(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v4 = v2;
  uint64_t v5 = isStackAllocationSafe;
  char v6 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a2((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v9;
    }
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v4 = a2((char *)v10, v7, v5);
    swift_slowDealloc();
  }
  return v4;
}

unint64_t *sub_1000631E4(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      return (unint64_t *)sub_100063CAC(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        return (unint64_t *)sub_100063CAC(result, a2, v5, a3);
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          return (unint64_t *)sub_100063CAC(result, a2, v5, a3);
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    if (**(void **)(*(void *)(a3 + 48) + 8 * v13) == a4)
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_100063CAC(result, a2, v5, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v11) {
    return (unint64_t *)sub_100063CAC(result, a2, v5, a3);
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      return (unint64_t *)sub_100063CAC(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10006335C(uint64_t result, uint64_t a2, uint64_t a3)
{
  void (*v12)(void *__return_ptr, uint64_t);
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v20;
  void v21[5];
  uint64_t v22;

  unint64_t v20 = (unint64_t *)result;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    unint64_t v15 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v9) {
      return sub_100063CAC(v20, a2, v22, a3);
    }
    int64_t v16 = *(void *)(v5 + 8 * v15);
    ++v4;
    if (!v16)
    {
      int64_t v4 = v15 + 1;
      if (v15 + 1 >= v9) {
        return sub_100063CAC(v20, a2, v22, a3);
      }
      int64_t v16 = *(void *)(v5 + 8 * v4);
      if (!v16)
      {
        int64_t v4 = v15 + 2;
        if (v15 + 2 >= v9) {
          return sub_100063CAC(v20, a2, v22, a3);
        }
        int64_t v16 = *(void *)(v5 + 8 * v4);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v4 << 6);
LABEL_5:
    unint64_t v12 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(*(void *)(a3 + 48) + 8 * v11) + 112);
    swift_retain();
    unint64_t v13 = swift_retain();
    v12(v21, v13);
    int64_t v14 = v21[3];
    sub_1000130EC((uint64_t)v21, &qword_10017BC78);
    swift_release();
    uint64_t result = swift_release();
    if (v14)
    {
      *(unint64_t *)((char *)v20 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v22++, 1))
      {
        __break(1u);
        return sub_100063CAC(v20, a2, v22, a3);
      }
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= v9) {
    return sub_100063CAC(v20, a2, v22, a3);
  }
  int64_t v16 = *(void *)(v5 + 8 * v17);
  if (v16)
  {
    int64_t v4 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v4 >= v9) {
      return sub_100063CAC(v20, a2, v22, a3);
    }
    int64_t v16 = *(void *)(v5 + 8 * v4);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100063554(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = (unint64_t *)result;
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v10) {
      return sub_100064348(v19, a2, v4, a3);
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v10) {
        return sub_100064348(v19, a2, v4, a3);
      }
      unint64_t v15 = *(void *)(v6 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v10) {
          return sub_100064348(v19, a2, v4, a3);
        }
        unint64_t v15 = *(void *)(v6 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v5 << 6);
LABEL_5:
    type metadata accessor for RealizedInfo(0);
    swift_bridgeObjectRetain();
    BOOL v13 = sub_1000EF0B4();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v13)
    {
      *(unint64_t *)((char *)v19 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return sub_100064348(v19, a2, v4, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v10) {
    return sub_100064348(v19, a2, v4, a3);
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v10) {
      return sub_100064348(v19, a2, v4, a3);
    }
    unint64_t v15 = *(void *)(v6 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100063708(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a2;
  uint64_t v34 = a1;
  uint64_t v45 = sub_100004700(&qword_10017BC88);
  uint64_t v4 = __chkstk_darwin(v45);
  uint64_t v44 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v32 - v6;
  uint64_t v40 = type metadata accessor for URL();
  uint64_t result = __chkstk_darwin(v40);
  int64_t v41 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v47 = (void *)a3;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v35 = 0;
  uint64_t v36 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v39 = v8 + 2;
  uint64_t v43 = v8;
  int64_t v37 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v38 = v8 + 1;
  unint64_t v15 = v8;
  uint64_t v16 = v40;
  uint64_t v17 = v41;
  uint64_t v18 = v44;
  while (1)
  {
    if (v14)
    {
      uint64_t v48 = (v14 - 1) & v14;
      int64_t v49 = v10;
      unint64_t v19 = __clz(__rbit64(v14)) | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v27 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v27 >= v37) {
      return sub_1000645EC(v34, v33, v35, v47);
    }
    unint64_t v28 = *(void *)(v36 + 8 * v27);
    int64_t v29 = v10 + 1;
    if (!v28)
    {
      int64_t v29 = v10 + 2;
      if (v10 + 2 >= v37) {
        return sub_1000645EC(v34, v33, v35, v47);
      }
      unint64_t v28 = *(void *)(v36 + 8 * v29);
      if (!v28)
      {
        int64_t v29 = v10 + 3;
        if (v10 + 3 >= v37) {
          return sub_1000645EC(v34, v33, v35, v47);
        }
        unint64_t v28 = *(void *)(v36 + 8 * v29);
        if (!v28) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v48 = (v28 - 1) & v28;
    int64_t v49 = v29;
    unint64_t v19 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_5:
    unint64_t v20 = v47;
    char v21 = (void (*)(char *, unint64_t, uint64_t))v15[2];
    v21(v17, v47[6] + v15[9] * v19, v16);
    uint64_t v22 = v20[7];
    unint64_t v46 = v19;
    uint64_t v23 = *(void *)(v22 + 8 * v19);
    uint64_t v24 = (uint64_t)v42;
    v21(v42, (unint64_t)v17, v16);
    uint64_t v25 = *(int *)(v45 + 48);
    *(void *)(v24 + v25) = v23;
    v21(v18, v24, v16);
    *(void *)&v18[v25] = v23;
    type metadata accessor for RealizedInfo(0);
    swift_bridgeObjectRetain_n();
    LOBYTE(v21) = sub_1000EF0B4();
    sub_1000130EC(v24, &qword_10017BC88);
    uint64_t v26 = (void (*)(char *, uint64_t))v15[1];
    v26(v18, v16);
    swift_bridgeObjectRelease();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v26)(v17, v16);
    int64_t v10 = v49;
    unint64_t v14 = v48;
    if ((v21 & 1) == 0)
    {
      *(unint64_t *)((char *)v34 + ((v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v46;
      if (__OFADD__(v35++, 1))
      {
        __break(1u);
        return sub_1000645EC(v34, v33, v35, v47);
      }
    }
  }
  uint64_t v30 = v10 + 4;
  if (v10 + 4 >= v37) {
    return sub_1000645EC(v34, v33, v35, v47);
  }
  unint64_t v28 = *(void *)(v36 + 8 * v30);
  if (v28)
  {
    int64_t v29 = v10 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v29 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v29 >= v37) {
      return sub_1000645EC(v34, v33, v35, v47);
    }
    unint64_t v28 = *(void *)(v36 + 8 * v29);
    ++v30;
    if (v28) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100063AD8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = (unint64_t *)result;
  uint64_t v19 = 0;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v9) {
      return sub_1000649C4(v18, a2, v19, a3);
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return sub_1000649C4(v18, a2, v19, a3);
      }
      unint64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return sub_1000649C4(v18, a2, v19, a3);
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    type metadata accessor for RealizedInfo(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    BOOL v12 = sub_1000EF0B4();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v12)
    {
      *(unint64_t *)((char *)v18 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v19++, 1))
      {
        __break(1u);
        return sub_1000649C4(v18, a2, v19, a3);
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return sub_1000649C4(v18, a2, v19, a3);
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return sub_1000649C4(v18, a2, v19, a3);
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100063CAC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100004700(&qword_10017D3E8);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  uint64_t v33 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v34 = v10;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v31) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      uint64_t v16 = v10 + 1;
      if (!v15)
      {
        uint64_t v16 = v10 + 2;
        if (v10 + 2 >= v31) {
          return v8;
        }
        unint64_t v15 = a1[v16];
        if (!v15)
        {
          uint64_t v16 = v10 + 3;
          if (v10 + 3 >= v31) {
            return v8;
          }
          unint64_t v15 = a1[v16];
          if (!v15)
          {
            uint64_t v17 = v10 + 4;
            if (v10 + 4 >= v31) {
              return v8;
            }
            unint64_t v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                uint64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v31) {
                  return v8;
                }
                unint64_t v15 = a1[v16];
                ++v17;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      uint64_t v34 = v16;
      unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    uint64_t v18 = 8 * v13;
    uint64_t v19 = *(void *)(*(void *)(v4 + 48) + v18);
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + v18);
    type metadata accessor for OSExtension(0);
    sub_100068584(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
    swift_retain();
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v21 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = 8 * v24;
    *(void *)(*(void *)(v8 + 48) + v29) = v19;
    *(void *)(*(void *)(v8 + 56) + v29) = v20;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t v4 = v33;
    uint64_t v10 = v34;
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100063FA8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100004700(&qword_10017D418);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = result;
  if (a2 < 1) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = *a1;
  }
  uint64_t v9 = 0;
  uint64_t v10 = result + 64;
  uint64_t v38 = v4;
  uint64_t v39 = result;
  while (1)
  {
    uint64_t v44 = v5;
    if (v8)
    {
      uint64_t v40 = (v8 - 1) & v8;
      uint64_t v41 = v9;
      unint64_t v11 = __clz(__rbit64(v8)) | (v9 << 6);
    }
    else
    {
      uint64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_40;
      }
      if (v12 >= a2) {
        return v7;
      }
      unint64_t v13 = a1[v12];
      uint64_t v14 = v9 + 1;
      if (!v13)
      {
        uint64_t v14 = v9 + 2;
        if (v9 + 2 >= a2) {
          return v7;
        }
        unint64_t v13 = a1[v14];
        if (!v13)
        {
          uint64_t v14 = v9 + 3;
          if (v9 + 3 >= a2) {
            return v7;
          }
          unint64_t v13 = a1[v14];
          if (!v13)
          {
            uint64_t v15 = v9 + 4;
            if (v9 + 4 >= a2) {
              return v7;
            }
            unint64_t v13 = a1[v15];
            if (!v13)
            {
              while (1)
              {
                uint64_t v14 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_41;
                }
                if (v14 >= a2) {
                  return v7;
                }
                unint64_t v13 = a1[v14];
                ++v15;
                if (v13) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v14 = v9 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v40 = (v13 - 1) & v13;
      uint64_t v41 = v14;
      unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    }
    uint64_t v16 = *(void *)(*(void *)(v4 + 48) + 8 * v11);
    uint64_t v17 = *(void *)(v4 + 56) + 80 * v11;
    uint64_t v18 = *(void *)v17;
    uint64_t v43 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v19 = *(void *)(v17 + 24);
    unint64_t v21 = *(void *)(v17 + 32);
    uint64_t v22 = *(void *)(v17 + 40);
    uint64_t v24 = *(void *)(v17 + 48);
    uint64_t v23 = *(void *)(v17 + 56);
    uint64_t v25 = *(void *)(v17 + 64);
    char v26 = *(unsigned char *)(v17 + 72);
    uint64_t v42 = v16;
    swift_retain();
    sub_10005C020(v18, v43, v20, v19, v21, v22, v24, v23, v25, v26);
    type metadata accessor for OSExtension(0);
    sub_100068584(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v7 = v39;
    uint64_t v27 = -1 << *(unsigned char *)(v39 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v10 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v10 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v10 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v10 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    *(void *)(*(void *)(v39 + 48) + 8 * v30) = v42;
    uint64_t v35 = *(void *)(v39 + 56) + 80 * v30;
    *(void *)uint64_t v35 = v18;
    *(void *)(v35 + 8) = v43;
    *(void *)(v35 + 16) = v20;
    *(void *)(v35 + 24) = v19;
    *(void *)(v35 + 32) = v21;
    *(void *)(v35 + 40) = v22;
    *(void *)(v35 + 48) = v24;
    *(void *)(v35 + 56) = v23;
    *(void *)(v35 + 64) = v25;
    *(unsigned char *)(v35 + 72) = v26;
    ++*(void *)(v39 + 16);
    uint64_t v5 = v44 - 1;
    if (__OFSUB__(v44, 1)) {
      break;
    }
    uint64_t v4 = v38;
    unint64_t v8 = v40;
    uint64_t v9 = v41;
    if (v44 == 1) {
      return v7;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100064348(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100004700(&qword_10017D3F0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  unint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v34 = v11;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      uint64_t v17 = v11 + 1;
      if (!v16)
      {
        uint64_t v17 = v11 + 2;
        if (v11 + 2 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v17];
        if (!v16)
        {
          uint64_t v17 = v11 + 3;
          if (v11 + 3 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v17];
          if (!v16)
          {
            uint64_t v18 = v11 + 4;
            if (v11 + 4 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v18];
            if (!v16)
            {
              while (1)
              {
                uint64_t v17 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v17];
                ++v18;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v17 = v11 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      uint64_t v34 = v17;
      unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }
    uint64_t v19 = *(void *)(v4 + 56);
    uint64_t v20 = v4;
    char v21 = *(unsigned char *)(*(void *)(v4 + 48) + v14);
    uint64_t v22 = *(void *)(v19 + 8 * v14);
    sub_1000599C4();
    swift_bridgeObjectRetain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    *(unsigned char *)(*(void *)(v9 + 48) + v26) = v21;
    *(void *)(*(void *)(v9 + 56) + 8 * v26) = v22;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t v4 = v20;
    uint64_t v11 = v34;
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000645EC(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = type metadata accessor for URL();
  uint64_t v42 = *(void *)(v47 - 8);
  uint64_t v8 = __chkstk_darwin(v47);
  unint64_t v46 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v41 = (char *)&v36 - v10;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_100004700(&qword_10017D3F8);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = result;
  int64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v39 = a4;
  uint64_t v40 = v42 + 16;
  uint64_t v45 = v42 + 32;
  uint64_t v15 = result + 64;
  uint64_t v16 = v47;
  while (1)
  {
    if (v13)
    {
      uint64_t v43 = (v13 - 1) & v13;
      uint64_t v44 = v14;
      unint64_t v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v38) {
        return v12;
      }
      unint64_t v19 = v37[v18];
      uint64_t v20 = v14 + 1;
      if (!v19)
      {
        uint64_t v20 = v14 + 2;
        if (v14 + 2 >= v38) {
          return v12;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          uint64_t v20 = v14 + 3;
          if (v14 + 3 >= v38) {
            return v12;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v14 + 4;
            if (v14 + 4 >= v38) {
              return v12;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v20 >= v38) {
                  return v12;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v43 = (v19 - 1) & v19;
      uint64_t v44 = v20;
      unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    uint64_t v22 = v41;
    uint64_t v23 = v42;
    uint64_t v24 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, a4[6] + v24 * v17, v16);
    uint64_t v25 = *(void *)(a4[7] + 8 * v17);
    unint64_t v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v46, v22, v16);
    sub_100068584(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
    swift_bridgeObjectRetain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v12 + 48) + v30 * v24, v46, v47);
    *(void *)(*(void *)(v12 + 56) + 8 * v30) = v25;
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v39;
    unint64_t v13 = v43;
    uint64_t v14 = v44;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000649C4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100004700(&qword_10017D400);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  unint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    unint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *unint64_t v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

char *sub_100064C60(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700((uint64_t *)&unk_10017FB60);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100064D5C(uint64_t a1)
{
  return sub_100064C60(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100064D70(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  sub_100004700(&qword_10017D3F0);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  unint64_t v6 = (void *)result;
  int64_t v7 = 0;
  uint64_t v26 = a3;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v9 = a3 + 64;
  uint64_t v8 = v10;
  uint64_t v11 = 1 << *(unsigned char *)(v9 - 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v8;
  uint64_t v23 = v9;
  int64_t v24 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = result + 64;
  if ((v12 & v8) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v7 << 6))
  {
    char v20 = *(unsigned char *)(*(void *)(v26 + 48) + i);
    uint64_t v28 = *(void *)(*(void *)(v26 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    a1(&v27, &v28);
    uint64_t result = swift_bridgeObjectRelease();
    if (v3)
    {
      swift_release();
      return (uint64_t)v6;
    }
    *(void *)(v14 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(unsigned char *)(v6[6] + i) = v20;
    *(void *)(v6[7] + 8 * i) = v27;
    uint64_t v21 = v6[2];
    BOOL v17 = __OFADD__(v21, 1);
    uint64_t v22 = v21 + 1;
    if (v17)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v6[2] = v22;
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v17 = __OFADD__(v7++, 1);
    if (v17) {
      goto LABEL_27;
    }
    if (v7 >= v24) {
      return (uint64_t)v6;
    }
    unint64_t v18 = *(void *)(v23 + 8 * v7);
    if (!v18) {
      break;
    }
LABEL_15:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v7 + 1;
  if (v7 + 1 >= v24) {
    return (uint64_t)v6;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v7 + 2;
  if (v7 + 2 >= v24) {
    return (uint64_t)v6;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v7 + 3;
  if (v7 + 3 >= v24) {
    return (uint64_t)v6;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18)
  {
LABEL_14:
    int64_t v7 = v19;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v24) {
      return (uint64_t)v6;
    }
    unint64_t v18 = *(void *)(v23 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100064F94(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  void (*v39)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v38 = (char *)&v33 - v9;
  sub_100004700(&qword_10017D3F8);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = v4;
  int64_t v12 = 0;
  uint64_t v41 = a3;
  uint64_t v13 = a3;
  uint64_t v14 = result;
  uint64_t v15 = *(void *)(v13 + 64);
  uint64_t v33 = v13 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v42 = result;
  uint64_t v43 = v5;
  uint64_t v36 = v5 + 32;
  uint64_t v37 = v5 + 16;
  int64_t v34 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v35 = result + 64;
  if ((v17 & v15) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  uint64_t v44 = v12;
  for (unint64_t i = v19 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v22 << 6))
  {
    uint64_t v25 = v41;
    uint64_t v26 = v43;
    unint64_t v27 = *(void *)(v43 + 72) * i;
    uint64_t v28 = v38;
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v38, *(void *)(v41 + 48) + v27, v11);
    uint64_t v47 = *(void *)(*(void *)(v25 + 56) + 8 * i);
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v29(v8, v28, v11);
    swift_bridgeObjectRetain();
    uint64_t v30 = v45;
    v39(&v46, &v47);
    if (v30)
    {
      uint64_t v14 = v42;
      swift_release();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v11);
      swift_bridgeObjectRelease();
      return v14;
    }
    uint64_t v45 = 0;
    swift_bridgeObjectRelease();
    *(void *)(v35 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v14 = v42;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v29)(*(void *)(v42 + 48) + v27, v8, v11);
    *(void *)(*(void *)(v14 + 56) + 8 * i) = v46;
    uint64_t v31 = *(void *)(v14 + 16);
    BOOL v21 = __OFADD__(v31, 1);
    uint64_t v32 = v31 + 1;
    if (v21)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    *(void *)(v14 + 16) = v32;
    int64_t v12 = v44;
    if (v18) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v21 = __OFADD__(v12, 1);
    int64_t v22 = v12 + 1;
    if (v21) {
      goto LABEL_28;
    }
    if (v22 >= v34) {
      return v14;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    if (!v23) {
      break;
    }
LABEL_15:
    unint64_t v18 = (v23 - 1) & v23;
    uint64_t v44 = v22;
  }
  int64_t v24 = v22 + 1;
  if (v22 + 1 >= v34) {
    return v14;
  }
  unint64_t v23 = *(void *)(v33 + 8 * v24);
  if (v23) {
    goto LABEL_14;
  }
  int64_t v24 = v22 + 2;
  if (v22 + 2 >= v34) {
    return v14;
  }
  unint64_t v23 = *(void *)(v33 + 8 * v24);
  if (v23) {
    goto LABEL_14;
  }
  int64_t v24 = v22 + 3;
  if (v22 + 3 >= v34) {
    return v14;
  }
  unint64_t v23 = *(void *)(v33 + 8 * v24);
  if (v23)
  {
LABEL_14:
    int64_t v22 = v24;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v22 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v22 >= v34) {
      return v42;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    ++v24;
    if (v23) {
      goto LABEL_15;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100065328(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  sub_100004700(&qword_10017D400);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = (void *)result;
  int64_t v7 = 0;
  uint64_t v29 = a3;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v9 = a3 + 64;
  uint64_t v8 = v10;
  uint64_t v11 = 1 << *(unsigned char *)(v9 - 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v8;
  uint64_t v25 = v9;
  int64_t v26 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v27 = result + 64;
  if ((v12 & v8) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v14 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    unint64_t v19 = (uint64_t *)(*(void *)(v29 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v31 = *(void *)(*(void *)(v29 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(&v30, &v31);
    uint64_t result = swift_bridgeObjectRelease();
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v6;
    }
    *(void *)(v27 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    int64_t v22 = (void *)(v6[6] + 16 * i);
    *int64_t v22 = v20;
    v22[1] = v21;
    *(void *)(v6[7] + 8 * i) = v30;
    uint64_t v23 = v6[2];
    BOOL v16 = __OFADD__(v23, 1);
    uint64_t v24 = v23 + 1;
    if (v16)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v6[2] = v24;
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v16 = __OFADD__(v7++, 1);
    if (v16) {
      goto LABEL_27;
    }
    if (v7 >= v26) {
      return (uint64_t)v6;
    }
    unint64_t v17 = *(void *)(v25 + 8 * v7);
    if (!v17) {
      break;
    }
LABEL_15:
    unint64_t v13 = (v17 - 1) & v17;
  }
  int64_t v18 = v7 + 1;
  if (v7 + 1 >= v26) {
    return (uint64_t)v6;
  }
  unint64_t v17 = *(void *)(v25 + 8 * v18);
  if (v17) {
    goto LABEL_14;
  }
  int64_t v18 = v7 + 2;
  if (v7 + 2 >= v26) {
    return (uint64_t)v6;
  }
  unint64_t v17 = *(void *)(v25 + 8 * v18);
  if (v17) {
    goto LABEL_14;
  }
  int64_t v18 = v7 + 3;
  if (v7 + 3 >= v26) {
    return (uint64_t)v6;
  }
  unint64_t v17 = *(void *)(v25 + 8 * v18);
  if (v17)
  {
LABEL_14:
    int64_t v7 = v18;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v7 >= v26) {
      return (uint64_t)v6;
    }
    unint64_t v17 = *(void *)(v25 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10006556C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_1000655E8(uint64_t result, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v6 = a2;
  int64_t v7 = (void *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaDictionary.makeIterator()();
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v4 = result | 0x8000000000000000;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    int64_t v11 = 0;
    a3 = 0;
LABEL_45:
    void *v7 = v4;
    v7[1] = v8;
    _OWORD v7[2] = v9;
    v7[3] = v11;
    v7[4] = v10;
    return a3;
  }
  uint64_t v19 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v8 = a4 + 64;
  uint64_t v20 = ~v19;
  uint64_t v21 = -v19;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v10 = v22 & *(void *)(a4 + 64);
  uint64_t v9 = v20;
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_45;
  }
  if (a3 < 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v23 = v9;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v24 = (unint64_t)(v9 + 64) >> 6;
  while ((v4 & 0x8000000000000000) != 0)
  {
    if (!__CocoaDictionary.Iterator.next()())
    {
      a3 = v12;
LABEL_44:
      uint64_t v9 = v23;
      goto LABEL_45;
    }
    swift_unknownObjectRelease();
    type metadata accessor for RealizedInfo(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = v25;
    uint64_t result = swift_unknownObjectRelease();
    if (!v25) {
      goto LABEL_43;
    }
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3) {
      goto LABEL_44;
    }
  }
  if (v10)
  {
    unint64_t v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v14 = v13 | (v11 << 6);
    goto LABEL_7;
  }
  int64_t v16 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v16 >= v24) {
    goto LABEL_39;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v16);
  if (v17) {
    goto LABEL_23;
  }
  v11 += 2;
  if (v16 + 1 >= v24)
  {
    unint64_t v10 = 0;
    int64_t v11 = v16;
    goto LABEL_43;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v11);
  if (v17)
  {
LABEL_16:
    int64_t v16 = v11;
LABEL_23:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
LABEL_7:
    uint64_t v15 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    uint64_t result = swift_retain();
    if (!v15) {
      goto LABEL_43;
    }
    goto LABEL_8;
  }
  int64_t v18 = v16 + 2;
  if (v16 + 2 >= v24) {
    goto LABEL_39;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
LABEL_22:
    int64_t v16 = v18;
    goto LABEL_23;
  }
  int64_t v11 = v16 + 3;
  if (v16 + 3 >= v24)
  {
    unint64_t v10 = 0;
    int64_t v11 = v16 + 2;
    goto LABEL_43;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v11);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v16 + 4;
  if (v16 + 4 >= v24)
  {
LABEL_39:
    unint64_t v10 = 0;
LABEL_43:
    a3 = v12;
    goto LABEL_44;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17) {
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v16 >= v24)
    {
      unint64_t v10 = 0;
      int64_t v11 = v24 - 1;
      goto LABEL_43;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1000658AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    void *v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v31 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(a4 + 56) + 80 * v16;
    uint64_t v21 = *(void *)v20;
    uint64_t v22 = *(void *)(v20 + 8);
    uint64_t v23 = *(void *)(v20 + 16);
    uint64_t v24 = *(void *)(v20 + 24);
    unint64_t v25 = *(void *)(v20 + 32);
    uint64_t v26 = *(void *)(v20 + 40);
    uint64_t v27 = *(void *)(v20 + 48);
    uint64_t v28 = *(void *)(v20 + 56);
    uint64_t v29 = *(void *)(v20 + 64);
    char v30 = *(unsigned char *)(v20 + 72);
    *(void *)uint64_t v11 = v21;
    *(void *)(v11 + 8) = v22;
    *(void *)(v11 + 16) = v23;
    *(void *)(v11 + 24) = v24;
    *(void *)(v11 + 32) = v25;
    *(void *)(v11 + 40) = v26;
    *(void *)(v11 + 48) = v27;
    *(void *)(v11 + 56) = v28;
    *(void *)(v11 + 64) = v29;
    *(unsigned char *)(v11 + 72) = v30;
    if (v13 == v10)
    {
      sub_10005C020(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
      goto LABEL_38;
    }
    v11 += 80;
    uint64_t result = sub_10005C020(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v31;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100065AEC(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v16 = *(void *)(*(void *)(a5 + 48) + 8 * a2);
    uint64_t v5 = *(void *)(a5 + 56) + 80 * a2;
    uint64_t v6 = *(void *)v5;
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t v8 = *(void *)(v5 + 16);
    uint64_t v9 = *(void *)(v5 + 24);
    unint64_t v10 = *(void *)(v5 + 32);
    uint64_t v11 = *(void *)(v5 + 40);
    uint64_t v12 = *(void *)(v5 + 48);
    uint64_t v13 = *(void *)(v5 + 56);
    uint64_t v14 = *(void *)(v5 + 64);
    char v15 = *(unsigned char *)(v5 + 72);
    *(void *)uint64_t result = *(void *)v5;
    *(void *)(result + 8) = v7;
    *(void *)(result + 16) = v8;
    *(void *)(result + 24) = v9;
    *(void *)(result + 32) = v10;
    *(void *)(result + 40) = v11;
    *(void *)(result + 48) = v12;
    *(void *)(result + 56) = v13;
    *(void *)(result + 64) = v14;
    *(unsigned char *)(result + 72) = v15;
    swift_retain();
    sub_10005C020(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
    return v16;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100065BF0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  LOBYTE(a4) = sub_100068160(a2, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a4 & 1;
}

void **sub_100065CC8(unint64_t a1, uint64_t (*a2)(uint64_t), void **a3)
{
  unint64_t v7 = a1;
  int64_t v17 = (void **)&_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_18:
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      unint64_t v9 = 0;
      uint64_t v15 = v7 & 0xFFFFFFFFFFFFFF8;
      unint64_t v16 = v7 & 0xC000000000000001;
      unint64_t v14 = v7;
      while (1)
      {
        if (v16)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return v3;
          }
        }
        else
        {
          if (v9 >= *(void *)(v15 + 16))
          {
            __break(1u);
            goto LABEL_18;
          }
          uint64_t v10 = *(void *)(v7 + 8 * v9 + 32);
          swift_retain();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1)) {
            goto LABEL_14;
          }
        }
        uint64_t v3 = a3;
        char v12 = a2(v10);
        if (v4) {
          goto LABEL_15;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v7 = v14;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t v3 = (void **)&v17;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        ++v9;
        if (v11 == v8)
        {
          uint64_t v3 = v17;
          goto LABEL_20;
        }
      }
    }
  }
  uint64_t v3 = (void **)&_swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100065E80(uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = sub_100066828(v5, a2);
  char v8 = v7;
  uint64_t v9 = v2;
  swift_bridgeObjectRelease();
  if (v2) {
    return v6;
  }
  if ((v8 & 1) == 0)
  {
    unint64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_54;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10 != v23) {
        goto LABEL_6;
      }
    }
    else if (v10 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      type metadata accessor for OSExtension(0);
      uint64_t v11 = *(void *)(a2 + 24);
      unint64_t v10 = v6 + 5;
      uint64_t v25 = v9;
      while (1)
      {
        unint64_t v12 = v10 - 4;
        uint64_t v13 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v12 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_45;
          }
          uint64_t v14 = *(void *)(v13 + 8 * v10);
          swift_retain();
        }
        a2 = sub_1001162E0(*(void *)(v14 + 24), v11);
        swift_release();
        if ((a2 & 1) == 0) {
          break;
        }
LABEL_32:
        unint64_t v20 = v10 - 3;
        if (__OFADD__(v12, 1)) {
          goto LABEL_46;
        }
        a2 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v21 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v10;
        if (v20 == v21) {
          return v6;
        }
      }
      if (v12 == v6)
      {
LABEL_31:
        if (__OFADD__(v6++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_32;
      }
      a2 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        a2 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v12 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v12 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          uint64_t v16 = *(void *)(a2 + 8 * v10);
          swift_retain();
          goto LABEL_20;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v6 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        uint64_t v15 = *(void *)(a2 + 8 * v6 + 32);
        swift_retain();
        if ((a2 & 0xC000000000000001) == 0) {
          goto LABEL_17;
        }
      }
      uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      a2 = *a1;
LABEL_20:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = a2;
      if (!isUniquelyReferenced_nonNull_bridgeObject || a2 < 0 || (a2 & 0x4000000000000000) != 0)
      {
        a2 = sub_10006556C(a2);
        *a1 = a2;
      }
      *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v16;
      swift_release();
      specialized Array._endMutation()();
      a2 = *a1;
      int v18 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = a2;
      if (!v18 || a2 < 0 || (a2 & 0x4000000000000000) != 0)
      {
        a2 = sub_10006556C(a2);
        *a1 = a2;
      }
      uint64_t v9 = v25;
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      if (v12 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * v10) = v15;
      swift_release();
      a2 = (uint64_t)a1;
      specialized Array._endMutation()();
      goto LABEL_31;
    }
    return v6;
  }
  if (!((unint64_t)*a1 >> 62)) {
    return *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_1000661D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100066250(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = (unint64_t *)result;
  uint64_t v33 = 0;
  int64_t v5 = 0;
  uint64_t v8 = a3[8];
  unint64_t v6 = a3 + 8;
  uint64_t v7 = v8;
  uint64_t v9 = 1 << *((unsigned char *)v6 - 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v7;
  int64_t v34 = v6;
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  while (v11)
  {
    uint64_t v40 = (v11 - 1) & v11;
    int64_t v41 = v5;
    unint64_t v13 = __clz(__rbit64(v11)) | (v5 << 6);
LABEL_22:
    unint64_t v39 = v13;
    uint64_t v18 = a3[7] + 80 * v13;
    uint64_t v20 = *(void *)v18;
    uint64_t v19 = *(void *)(v18 + 8);
    uint64_t v22 = *(void *)(v18 + 16);
    uint64_t v21 = *(void *)(v18 + 24);
    uint64_t v23 = *(void *)(v18 + 40);
    unint64_t v44 = *(void *)(v18 + 32);
    uint64_t v24 = *(void *)(v18 + 56);
    uint64_t v43 = *(void *)(v18 + 48);
    uint64_t v25 = *(void *)(v18 + 64);
    char v26 = *(unsigned char *)(v18 + 72);
    uint64_t v42 = *(uint64_t (**)(uint64_t))(**(void **)(a3[6] + 8 * v13) + 144);
    swift_retain();
    uint64_t v45 = v24;
    uint64_t v27 = sub_10005C020(v20, v19, v22, v21, v44, v23, v43, v24, v25, v26);
    if (v42(v27) == a4 && v28 == a5)
    {
      swift_bridgeObjectRelease();
      sub_10003E9C8(v20, v19, v22, v21, v44, v23, v43, v24, v25, v26);
      uint64_t result = swift_release();
      unint64_t v11 = v40;
      int64_t v5 = v41;
LABEL_5:
      *(unint64_t *)((char *)v32 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
      if (__OFADD__(v33++, 1)) {
        goto LABEL_31;
      }
    }
    else
    {
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      sub_10003E9C8(v20, v19, v22, v21, v44, v23, v43, v45, v25, v26);
      uint64_t result = swift_release();
      unint64_t v11 = v40;
      int64_t v5 = v41;
      if (v30) {
        goto LABEL_5;
      }
    }
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v14 >= v35) {
    return sub_100063FA8(v32, a2, v33, (uint64_t)a3);
  }
  unint64_t v15 = v34[v14];
  int64_t v16 = v5 + 1;
  if (v15) {
    goto LABEL_21;
  }
  int64_t v16 = v5 + 2;
  if (v5 + 2 >= v35) {
    return sub_100063FA8(v32, a2, v33, (uint64_t)a3);
  }
  unint64_t v15 = v34[v16];
  if (v15) {
    goto LABEL_21;
  }
  int64_t v16 = v5 + 3;
  if (v5 + 3 >= v35) {
    return sub_100063FA8(v32, a2, v33, (uint64_t)a3);
  }
  unint64_t v15 = v34[v16];
  if (v15)
  {
LABEL_21:
    uint64_t v40 = (v15 - 1) & v15;
    int64_t v41 = v16;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    goto LABEL_22;
  }
  uint64_t v17 = v5 + 4;
  if (v5 + 4 >= v35) {
    return sub_100063FA8(v32, a2, v33, (uint64_t)a3);
  }
  unint64_t v15 = v34[v17];
  if (v15)
  {
    int64_t v16 = v5 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v35) {
      return sub_100063FA8(v32, a2, v33, (uint64_t)a3);
    }
    unint64_t v15 = v34[v16];
    ++v17;
    if (v15) {
      goto LABEL_21;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100066564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_100066250((uint64_t)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, (void *)a1, a2, a3);
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    unint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_100066250((uint64_t)v13, v9, (void *)a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

uint64_t type metadata accessor for LookupSpec()
{
  uint64_t result = qword_100183B50;
  if (!qword_100183B50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100066778(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LookupSpec();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000667D4()
{
  unint64_t result = qword_10017D340;
  if (!qword_10017D340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D340);
  }
  return result;
}

uint64_t sub_100066828(unint64_t a1, uint64_t a2)
{
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
    return 0;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    return 0;
  }
LABEL_3:
  type metadata accessor for OSExtension(0);
  uint64_t v5 = 0;
  a2 = *(void *)(a2 + 24);
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 8 * v5 + 32);
      swift_retain();
    }
    char v7 = sub_1001162E0(*(void *)(v6 + 24), a2);
    swift_release();
    if (v7) {
      return v5;
    }
    uint64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v5;
    if (v8 == v4) {
      return 0;
    }
  }
}

uint64_t sub_100066944(uint64_t a1, uint64_t (*a2)(void))
{
  return a1;
}

uint64_t sub_1000669A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t (*a13)(void))
{
  if (a12) {
    return sub_10005C2B4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  }
  else {
    return a13();
  }
}

uint64_t sub_1000669D0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    if (!((unint64_t)*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v3) {
    goto LABEL_28;
  }
LABEL_4:
  uint64_t v8 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v7 = v5 - v3;
  if (__OFSUB__(0, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if ((unint64_t)*v4 >> 62) {
    goto LABEL_31;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 - v8;
  if (__OFADD__(v9, v7)) {
    goto LABEL_33;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v13 = *v4 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v14 = v13 + 32;
  uint64_t v15 = (char *)(v13 + 32 + 8 * v5);
  v6(0);
  uint64_t result = swift_arrayDestroy();
  if (v7)
  {
    if ((unint64_t)*v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v18 = v24 - v3;
      if (!__OFSUB__(v24, v3)) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v18 = v17 - v3;
      if (!__OFSUB__(v17, v3))
      {
LABEL_17:
        uint64_t v19 = (char *)(v14 + 8 * v3);
        if (v5 != v3 || v15 >= &v19[8 * v18]) {
          uint64_t result = (uint64_t)memmove(v15, v19, 8 * v18);
        }
        if (!((unint64_t)*v4 >> 62))
        {
          uint64_t v20 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v21 = v20 + v7;
          if (!__OFADD__(v20, v7))
          {
LABEL_22:
            *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v21;
            goto LABEL_23;
          }
LABEL_40:
          __break(1u);
          return result;
        }
LABEL_38:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v21 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_22;
        }
        goto LABEL_40;
      }
    }
    __break(1u);
    goto LABEL_38;
  }
LABEL_23:

  return specialized Array._endMutation()();
}

uint64_t sub_100066C90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LookupSpec();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066CF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t))
{
  uint64_t v19 = (unint64_t *)result;
  uint64_t v20 = 0;
  int64_t v6 = 0;
  uint64_t v21 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v22 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v22) {
      return sub_100063CAC(v19, a2, v20, a3);
    }
    unint64_t v15 = *(void *)(v21 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v22) {
        return sub_100063CAC(v19, a2, v20, a3);
      }
      unint64_t v15 = *(void *)(v21 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v22) {
          return sub_100063CAC(v19, a2, v20, a3);
        }
        unint64_t v15 = *(void *)(v21 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    uint64_t v12 = *(void *)(*(void *)(a3 + 56) + 8 * v11);
    uint64_t v23 = *(void *)(*(void *)(a3 + 48) + 8 * v11);
    swift_retain();
    swift_retain();
    char v13 = a4(&v23, v12);
    swift_release();
    uint64_t result = swift_release();
    if (v13)
    {
      *(unint64_t *)((char *)v19 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
        return sub_100063CAC(v19, a2, v20, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v22) {
    return sub_100063CAC(v19, a2, v20, a3);
  }
  unint64_t v15 = *(void *)(v21 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v22) {
      return sub_100063CAC(v19, a2, v20, a3);
    }
    unint64_t v15 = *(void *)(v21 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100066EFC(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t *, uint64_t), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = sub_100066CF4((uint64_t)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    unint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = sub_100066CF4((uint64_t)v11, v8, v6, a2);
    swift_slowDealloc();
  }
  return a3;
}

uint64_t sub_100067074(uint64_t a1, uint64_t (*a2)(uint64_t *, uint64_t), uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    int64_t v35 = &_swiftEmptyDictionarySingleton;
    uint64_t v6 = __CocoaDictionary.makeIterator()() & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v7 = __CocoaDictionary.Iterator.next()();
    if (v7)
    {
      uint64_t v9 = v7;
      uint64_t v10 = v8;
      type metadata accessor for OSExtension(0);
      do
      {
        uint64_t v32 = v9;
        swift_dynamicCast();
        uint64_t v32 = v10;
        type metadata accessor for RealizedInfo(0);
        swift_dynamicCast();
        uint64_t v12 = v33;
        uint64_t v13 = v34;
        uint64_t v32 = v33;
        swift_retain();
        swift_retain();
        char v14 = v4(&v32, v13);
        swift_release();
        swift_release();
        if (v14)
        {
          uint64_t v15 = v6;
          int64_t v16 = v4;
          uint64_t v17 = v3;
          uint64_t v18 = v35;
          unint64_t v19 = v35[2];
          if (v35[3] <= v19)
          {
            uint64_t v20 = v19 + 1;
            swift_retain();
            swift_retain();
            sub_1000611EC(v20, 1);
            uint64_t v18 = v35;
          }
          else
          {
            swift_retain();
            swift_retain();
          }
          uint64_t v32 = v12;
          sub_100068584(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
          uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
          int64_t v22 = v18 + 8;
          uint64_t v23 = -1 << *((unsigned char *)v18 + 32);
          unint64_t v24 = result & ~v23;
          unint64_t v25 = v24 >> 6;
          if (((-1 << v24) & ~v18[(v24 >> 6) + 8]) != 0)
          {
            unint64_t v26 = __clz(__rbit64((-1 << v24) & ~v18[(v24 >> 6) + 8])) | v24 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v27 = 0;
            unint64_t v28 = (unint64_t)(63 - v23) >> 6;
            do
            {
              if (++v25 == v28 && (v27 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v29 = v25 == v28;
              if (v25 == v28) {
                unint64_t v25 = 0;
              }
              v27 |= v29;
              uint64_t v30 = v22[v25];
            }
            while (v30 == -1);
            unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          }
          *(void *)((char *)v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
          uint64_t v31 = 8 * v26;
          *(void *)(v18[6] + v31) = v12;
          *(void *)(v18[7] + v31) = v13;
          ++v18[2];
          swift_release();
          swift_release();
          uint64_t v3 = v17;
          uint64_t v4 = v16;
          uint64_t v6 = v15;
        }
        else
        {
          swift_release();
          swift_release();
        }
        uint64_t v9 = __CocoaDictionary.Iterator.next()();
        uint64_t v10 = v11;
      }
      while (v9);
      uint64_t v5 = v35;
    }
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    sub_1000048D8();
  }
  else
  {
    uint64_t v5 = (void *)sub_100066EFC(a1, a2, a3);
    swift_bridgeObjectRelease();
  }
  return (uint64_t)v5;
}

void *sub_1000673D0@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1000673E8(a1, a2);
}

void *sub_1000673E8@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *a1;
  long long v7 = *(_OWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = sub_10005CD0C(sub_10006844C, &v6, v4);
  *a2 = result;
  return result;
}

uint64_t sub_100067448(uint64_t a1, uint64_t a2)
{
  return sub_100065BF0(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t *sub_100067450(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100067570(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for URL();
    unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  else if (!result)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100067610(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1000676EC(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100066778((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_1000677E0(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100067898(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100066778((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100067960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_100067988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1000679B4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000679C4()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_100067A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11 < 0)
  {
    return sub_10005C020(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  else
  {
    sub_10005C020(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    return swift_retain();
  }
}

uint64_t destroy for LookupError(uint64_t *a1)
{
  return sub_10005C2B4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
}

uint64_t *initializeWithCopy for LookupError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  sub_100067A70(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  return a1;
}

uint64_t assignWithCopy for LookupError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v23 = a2[9];
  uint64_t v24 = a2[10];
  sub_100067A70(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v23, v24);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  unint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = v24;
  sub_10005C2B4(v12, v13, v14, v15, v16, v17, v18, v19, v20, SBYTE8(v20), v21);
  return a1;
}

__n128 initializeWithTake for LookupError(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for LookupError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 80);
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v3;
  sub_10005C2B4(v4, v6, v5, v7, v8, v9, v10, v11, v12, SBYTE8(v12), v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 72) >> 7;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for LookupError(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = (unint64_t)-a2 << 7;
      *(void *)(a1 + 80) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_100067E10(uint64_t a1)
{
  return *(void *)(a1 + 80) >> 63;
}

uint64_t sub_100067E1C(uint64_t result)
{
  *(void *)(result + 80) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_100067E2C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *(void *)(result + 72) &= 0x7FuLL;
  *(void *)(result + 80) = v2;
  return result;
}

ValueMetadata *type metadata accessor for LookupError()
{
  return &type metadata for LookupError;
}

uint64_t destroy for LookupTable()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LookupTable(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LookupTable(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for OSExtensionCodable(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LookupTable(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupTable(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LookupTable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LookupTable()
{
  return &type metadata for LookupTable;
}

uint64_t sub_100068160(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v28[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v28[-1] - v12;
  sub_10001BA68(a1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t)&v28[-1] - v12, (uint64_t *)&unk_10017FA60);
  long long v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v14(v13, 1, v4) != 1)
  {
    uint64_t v17 = URL.path.getter();
    uint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_6:
    uint64_t v22 = a2[3];
    uint64_t v23 = a2[4];
    sub_1000036B0(a2, v22);
    sub_1001297F4(v22, v23);
    uint64_t v24 = v29;
    uint64_t v25 = v30;
    sub_1000036B0(v28, v29);
    char v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v25 + 136))(v17, v19, 0, v24, v25);
    swift_bridgeObjectRelease();
    sub_10000478C((uint64_t)v28);
    return v16 & 1;
  }
  uint64_t v15 = sub_1000130EC((uint64_t)v13, (uint64_t *)&unk_10017FA60);
  (*(void (**)(uint64_t))(**(void **)(a1 + 24) + 256))(v15);
  if (v14(v11, 1, v4) != 1)
  {
    sub_100097148((uint64_t)v7);
    long long v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v11, v4);
    uint64_t v17 = URL.path.getter();
    uint64_t v19 = v21;
    v20(v7, v4);
    goto LABEL_6;
  }
  sub_1000130EC((uint64_t)v11, (uint64_t *)&unk_10017FA60);
  char v16 = 1;
  return v16 & 1;
}

uint64_t sub_10006844C(uint64_t *a1)
{
  uint64_t v2 = *(void **)(v1 + 24);
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LOBYTE(v3) = sub_100068160(v3, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_10006852C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100068558(uint64_t a1)
{
  return a1;
}

uint64_t sub_100068584(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000685D0()
{
  unint64_t result = sub_1000685F8((uint64_t)&off_10016B980);
  qword_100183B68 = result;
  return result;
}

unint64_t sub_1000685F8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017D628);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000048E0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

driverkitd::ApprovalState_optional __swiftcall ApprovalState.init(fromString:)(Swift::String fromString)
{
  int64_t object = fromString._object;
  uint64_t countAndFlagsBits = fromString._countAndFlagsBits;
  if (qword_100183B60 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_100183B68;
  if (*(void *)(qword_100183B68 + 16) && (unint64_t v4 = sub_1000048E0(countAndFlagsBits, (uint64_t)object), (v5 & 1) != 0)) {
    v6.value = *(unsigned char *)(*(void *)(v3 + 56) + v4);
  }
  else {
    v6.value = driverkitd_ApprovalState_unknownDefault;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t ApprovalState.stringValue.getter(uint64_t a1)
{
  char v1 = a1;
  if (qword_100183B60 != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1);
  v8[16] = v1;
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_1000729E4(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10006FC0C, (uint64_t)v8);
  swift_bridgeObjectRelease();
  unint64_t v4 = sub_100068894(v3);
  uint64_t v6 = v5;
  uint64_t result = swift_release();
  if (v6) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

unsigned char *sub_100068894(uint64_t a1)
{
  uint64_t result = (unsigned char *)sub_100010EA4(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (unsigned char *)(1 << *(unsigned char *)(a1 + 32))) {
    return 0;
  }
  else {
    return sub_100072780(&v5, (uint64_t)result, v3, 0, a1);
  }
}

Swift::Bool __swiftcall ApprovalState.canTransitionTo(_:)(driverkitd::ApprovalState a1)
{
  if (v1 == 1) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  return v2 == a1;
}

driverkitd::ApprovalState_optional __swiftcall ApprovalState.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 3) {
    LOBYTE(rawValue) = 3;
  }
  return (driverkitd::ApprovalState_optional)rawValue;
}

uint64_t ApprovalState.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t *sub_100068954@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_10006896C(void *a1@<X8>)
{
  *a1 = *v1;
}

_UNKNOWN **static ApprovalState.allCases.getter()
{
  return &off_10016B9E8;
}

void sub_100068984(void *a1@<X8>)
{
  *a1 = &off_10016BA10;
}

uint64_t ApprovalState.description.getter(uint64_t a1)
{
  char v1 = a1;
  if (qword_100183B60 != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1);
  v8[16] = v1;
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_1000729E4(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100076CB8, (uint64_t)v8);
  swift_bridgeObjectRelease();
  char v4 = sub_100068894(v3);
  uint64_t v6 = v5;
  uint64_t result = swift_release();
  if (v6) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_100068A84(uint64_t a1)
{
  char v2 = *v1;
  if (qword_100183B60 != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1);
  v9[16] = v2;
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000729E4(v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100076CB8, (uint64_t)v9);
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_100068894(v4);
  uint64_t v7 = v6;
  uint64_t result = swift_release();
  if (v7) {
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t ApprovalState.debugDescription.getter(unsigned __int8 a1)
{
  uint64_t v14 = a1;
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v16 = v2;
  v3._uint64_t countAndFlagsBits = 10272;
  v3._int64_t object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  if (qword_100183B60 != -1) {
    uint64_t v4 = swift_once();
  }
  __chkstk_darwin(v4);
  v13[16] = a1;
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_1000729E4(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100076CB8, (uint64_t)v13);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_100068894(v6);
  char v9 = v8;
  uint64_t result = swift_release();
  if (v9)
  {
    v11._uint64_t countAndFlagsBits = (uint64_t)v7;
    v11._int64_t object = v9;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 41;
    v12._int64_t object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100068CC0()
{
  return ApprovalState.debugDescription.getter(*v0);
}

uint64_t sub_100068CC8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100068D28()
{
  return RawRepresentable<>.encode(to:)();
}

id sub_100068D78(uint64_t a1, void *a2, char a3)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100004700(&qword_10017C230);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100132F10;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v7;
  sub_100072B5C();
  unint64_t v8 = sub_100068EE8(a1, a2, a3 & 1);
  uint64_t v10 = v9;
  sub_100072B64();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v8;
  *(void *)(inited + 56) = v10;
  sub_100016BFC(inited);
  id v11 = objc_allocWithZone((Class)NSError);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v14 = [v11 initWithDomain:v12 code:5 userInfo:isa];

  return v14;
}

unint64_t sub_100068EE8(uint64_t a1, void *a2, char a3)
{
  if (a3)
  {
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    unint64_t v7 = 0xD000000000000010;
  }
  else
  {
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    unint64_t v7 = 0xD000000000000012;
  }
  v5._uint64_t countAndFlagsBits = a1;
  v5._int64_t object = a2;
  String.append(_:)(v5);
  return v7;
}

unint64_t sub_100068FA0()
{
  return sub_100068EE8(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_100068FAC()
{
  if (*v0) {
    return 0x7261506472696874;
  }
  else {
    return 0x7261507473726966;
  }
}

uint64_t sub_100068FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100072C68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006900C(uint64_t a1)
{
  unint64_t v2 = sub_100072B6C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100069048(uint64_t a1)
{
  unint64_t v2 = sub_100072B6C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100069084()
{
  return 0;
}

uint64_t sub_100069090@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void sub_1000690C0(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000690CC(uint64_t a1)
{
  unint64_t v2 = sub_100072C14();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100069108(uint64_t a1)
{
  unint64_t v2 = sub_100072C14();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10006914C()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100069168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_100072D74(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_100069198(uint64_t a1)
{
  unint64_t v2 = sub_100072BC0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000691D4(uint64_t a1)
{
  unint64_t v2 = sub_100072BC0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ApprovalDBEntrySource.encode(to:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v22 = a2;
  unint64_t v23 = a3;
  uint64_t v4 = sub_100004700(&qword_10017D430);
  uint64_t v20 = *(void *)(v4 - 8);
  uint64_t v21 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100004700(&qword_10017D438);
  uint64_t v7 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100004700(&qword_10017D440);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_100072B6C();
  unint64_t v14 = v23;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v14 >> 60 == 15)
  {
    LOBYTE(v24) = 0;
    sub_100072C14();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    LOBYTE(v24) = 1;
    uint64_t v16 = v22;
    sub_100012DE4(v22, v14);
    sub_100072BC0();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v24 = v16;
    unint64_t v25 = v14;
    sub_10001C508();
    uint64_t v17 = v21;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v17);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return sub_10002404C(v16, v14);
  }
}

void *ApprovalDBEntrySource.init(from:)(void *a1)
{
  return sub_100072DFC(a1);
}

void *sub_100069548@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100072DFC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100069574(void *a1)
{
  return ApprovalDBEntrySource.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8));
}

void ApprovalDBEntrySource.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    sub_100012DE4(a2, a3);
    Data.hash(into:)();
    sub_10002404C(a2, a3);
  }
}

Swift::Int ApprovalDBEntrySource.hashValue.getter(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    sub_100012DE4(a1, a2);
    Data.hash(into:)();
    sub_10002404C(a1, a2);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1000696B4()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    sub_100012DE4(v1, v2);
    Data.hash(into:)();
    sub_10002404C(v1, v2);
  }
  return Hasher._finalize()();
}

void sub_100069744()
{
  unint64_t v1 = v0[1];
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = *v0;
    Hasher._combine(_:)(1uLL);
    sub_100012DE4(v2, v1);
    Data.hash(into:)();
    sub_10002404C(v2, v1);
  }
}

Swift::Int sub_1000697DC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    sub_100012DE4(v1, v2);
    Data.hash(into:)();
    sub_10002404C(v1, v2);
  }
  return Hasher._finalize()();
}

uint64_t sub_10006986C(uint64_t a1, uint64_t a2)
{
  return _s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t ApprovalDBEntrySource.description.getter(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    return 0x6D6574737973;
  }
  sub_100012DE4(a1, a2);
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = sub_100014690(a1, a2);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  sub_10002404C(a1, a2);
  return 0xD000000000000024;
}

uint64_t sub_100069944()
{
  return ApprovalDBEntrySource.description.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t ApprovalDBEntry.init(driverIdentifier:source:approvalState:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5;
  return result;
}

unint64_t sub_10006995C()
{
  uint64_t v1 = 0x656372756F73;
  if (*v0 != 1) {
    uint64_t v1 = 0x6C61766F72707061;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1000699C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100073820(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000699EC(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1000699F8(uint64_t a1)
{
  unint64_t v2 = sub_10007354C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100069A34(uint64_t a1)
{
  unint64_t v2 = sub_10007354C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ApprovalDBEntry.description.getter()
{
  long long v21 = *v0;
  long long v22 = v21;
  sub_100073520((uint64_t)&v22);
  v1._uint64_t countAndFlagsBits = 544106784;
  v1._int64_t object = (void *)0xE400000000000000;
  String.append(_:)(v1);
  uint64_t v2 = *((void *)v0 + 2);
  unint64_t v3 = *((void *)v0 + 3);
  if (v3 >> 60 == 15)
  {
    unint64_t v4 = 0xE600000000000000;
    unint64_t v5 = 0x6D6574737973;
  }
  else
  {
    sub_10002F064(v2, v3);
    sub_100012DE4(v2, v3);
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    unint64_t v19 = 0xD000000000000024;
    unint64_t v20 = 0x8000000100147210;
    v6._uint64_t countAndFlagsBits = sub_100014690(v2, v3);
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    sub_10002404C(v2, v3);
    unint64_t v5 = 0xD000000000000024;
    unint64_t v4 = 0x8000000100147210;
  }
  unint64_t v7 = v4;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  sub_10002404C(v2, v3);
  v8._uint64_t countAndFlagsBits = 8250;
  v8._int64_t object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  char v10 = *((unsigned char *)v0 + 32);
  if (qword_100183B60 != -1) {
    uint64_t v9 = swift_once();
  }
  __chkstk_darwin(v9);
  unsigned char v18[16] = v10;
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = sub_1000729E4(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100076CB8, (uint64_t)v18);
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_100068894(v12);
  uint64_t v15 = v14;
  uint64_t result = swift_release();
  if (v15)
  {
    v17._uint64_t countAndFlagsBits = (uint64_t)v13;
    v17._int64_t object = v15;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    return v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ApprovalDBEntry.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004700(&qword_10017D448);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_10007354C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    sub_1000735A0((_OWORD *)(v3 + 16), &v13);
    sub_1000735A0(&v13, &v12);
    char v11 = 1;
    sub_1000735B0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = *(unsigned char *)(v3 + 32);
    char v11 = 2;
    sub_100073604();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double ApprovalDBEntry.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100073990(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100069E84(void *a1)
{
  return ApprovalDBEntry.encode(to:)(a1);
}

BOOL static ApprovalDBEntry.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v5 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 24);
    sub_1000735A0((_OWORD *)(a2 + 16), &v19);
    if (v7 >> 60 == 15)
    {
      sub_1000735A0(&v19, &v20);
      if (*((void *)&v20 + 1) >> 60 == 15) {
        return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
      }
    }
    else
    {
      sub_1000735A0(&v19, &v20);
      unint64_t v9 = *((void *)&v20 + 1);
      if (*((void *)&v20 + 1) >> 60 != 15)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 0;
        switch(v7 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v8), v8))
            {
              __break(1u);
LABEL_31:
              __break(1u);
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
              JUMPOUT(0x10006A0BCLL);
            }
            uint64_t v11 = HIDWORD(v8) - (int)v8;
LABEL_15:
            sub_100012DE4(v8, v7);
LABEL_16:
            switch(v9 >> 62)
            {
              case 1uLL:
                LODWORD(v14) = HIDWORD(v10) - v10;
                if (__OFSUB__(HIDWORD(v10), v10)) {
                  goto LABEL_32;
                }
                uint64_t v14 = (int)v14;
LABEL_21:
                if (v11 != v14)
                {
LABEL_26:
                  sub_10002404C(v8, v7);
                  return 0;
                }
                if (v11 < 1)
                {
LABEL_29:
                  sub_10002404C(v8, v7);
                  return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
                }
                sub_100012DE4(v10, v9);
                char v18 = sub_100022B08(v8, v7, v10, v9);
                sub_10002404C(v8, v7);
                if (v18) {
                  return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
                }
                break;
              case 2uLL:
                uint64_t v16 = *(void *)(v10 + 16);
                uint64_t v15 = *(void *)(v10 + 24);
                BOOL v17 = __OFSUB__(v15, v16);
                uint64_t v14 = v15 - v16;
                if (!v17) {
                  goto LABEL_21;
                }
                goto LABEL_33;
              case 3uLL:
                if (v11) {
                  goto LABEL_26;
                }
                goto LABEL_29;
              default:
                uint64_t v14 = BYTE6(v9);
                goto LABEL_21;
            }
            break;
          case 2uLL:
            uint64_t v13 = *(void *)(v8 + 16);
            uint64_t v12 = *(void *)(v8 + 24);
            uint64_t v11 = v12 - v13;
            if (!__OFSUB__(v12, v13)) {
              goto LABEL_15;
            }
            goto LABEL_31;
          case 3uLL:
            goto LABEL_16;
          default:
            uint64_t v11 = BYTE6(v7);
            goto LABEL_16;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_10006A0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 32);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return _s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(v2, v3, v5, v6) & (v4 == v7);
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if (v9) {
    return _s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(v2, v3, v5, v6) & (v4 == v7);
  }
  return result;
}

uint64_t sub_10006A16C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017D580);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_100076718();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_100004700(&qword_10017D588);
  sub_100076968(&qword_10017D590, &qword_10017D588, (void (*)(void))sub_10007676C);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_10006A2F4()
{
}

uint64_t sub_10006A31C()
{
  return 0x73656972746E65;
}

uint64_t sub_10006A338(uint64_t a1)
{
  unint64_t v2 = sub_100076718();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006A374(uint64_t a1)
{
  unint64_t v2 = sub_100076718();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10006A3B0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100073E54(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10006A3DC(void *a1)
{
  return sub_10006A16C(a1, *v1);
}

uint64_t (*ApprovalDB.entries.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return sub_10006A448;
}

uint64_t sub_10006A448(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (void *)a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *unint64_t v3 = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v3 = v2;
  }
  return result;
}

void *sub_10006A4BC()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10006A4CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 16);
  if (!v5) {
    return 3;
  }
  unint64_t v88 = HIDWORD(a3);
  BOOL v10 = __OFSUB__(HIDWORD(a3), a3);
  BOOL v91 = v10;
  size_t __n = BYTE6(a4);
  unint64_t v99 = a4 >> 62;
  uint64_t v89 = (int)a3;
  size_t v90 = HIDWORD(a3) - (int)a3;
  uint64_t v86 = (a3 >> 32) - (int)a3;
  uint64_t v87 = a3 >> 32;
  swift_bridgeObjectRetain();
  uint64_t v11 = (unsigned __int8 *)(a5 + 64);
  unint64_t v12 = a4 >> 60;
  unint64_t v95 = a4;
  unint64_t v96 = a4 >> 60;
  while (1)
  {
    uint64_t v14 = *((void *)v11 - 2);
    unint64_t v13 = *((void *)v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = *((void *)v11 - 4) == a1 && *((void *)v11 - 3) == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if (v13 >> 60 == 15)
      {
        if (v12 > 0xE)
        {
          swift_bridgeObjectRetain();
          sub_10002F064(v14, v13);
          goto LABEL_133;
        }
        goto LABEL_7;
      }
      if (v12 <= 0xE) {
        break;
      }
    }
LABEL_7:
    v11 += 40;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
  }
  uint64_t v17 = 0;
  switch(v13 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v14), v14))
      {
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
      }
      uint64_t v17 = HIDWORD(v14) - (int)v14;
LABEL_20:
      sub_100012DE4(v14, v13);
      break;
    case 2uLL:
      uint64_t v19 = *(void *)(v14 + 16);
      uint64_t v18 = *(void *)(v14 + 24);
      uint64_t v17 = v18 - v19;
      if (!__OFSUB__(v18, v19)) {
        goto LABEL_20;
      }
      goto LABEL_136;
    case 3uLL:
      break;
    default:
      uint64_t v17 = BYTE6(v13);
      break;
  }
  size_t v20 = __n;
  switch((int)v99)
  {
    case 1:
      size_t v20 = v90;
      if (v91) {
        goto LABEL_137;
      }
      goto LABEL_25;
    case 2:
      uint64_t v22 = *(void *)(a3 + 16);
      uint64_t v21 = *(void *)(a3 + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      size_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_25;
      }
      goto LABEL_138;
    case 3:
      if (!v17) {
        goto LABEL_132;
      }
      goto LABEL_128;
    default:
LABEL_25:
      if (v17 != v20) {
        goto LABEL_128;
      }
      if (v17 >= 1)
      {
        switch(v13 >> 62)
        {
          case 1uLL:
            unsigned int v93 = v15;
            if ((int)v14 > v14 >> 32) {
              goto LABEL_139;
            }
            sub_10002F064(v14, v13);
            swift_bridgeObjectRetain();
            sub_10002F064(v14, v13);
            sub_10002F064(a3, v95);
            uint64_t v28 = __DataStorage._bytes.getter();
            if (v28)
            {
              uint64_t v29 = v28;
              uint64_t v30 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v14, v30)) {
                goto LABEL_141;
              }
              char v82 = (void *)(v29 + (int)v14 - v30);
            }
            else
            {
              char v82 = 0;
            }
            uint64_t v15 = v15;
            __DataStorage._length.getter();
            if (!v99)
            {
              uint64_t v52 = a3;
              LODWORD(__s1[0]) = a3;
              unint64_t v53 = v95;
              BYTE4(__s1[0]) = v88;
              *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&a3 + 5);
              HIBYTE(__s1[0]) = HIBYTE(a3);
              LODWORD(__s1[1]) = v95;
              WORD2(__s1[1]) = WORD2(v95);
              if (!v82) {
                goto LABEL_167;
              }
              int v83 = memcmp(v82, __s1, __n);
LABEL_100:
              sub_10002404C(v14, v13);
              sub_10002404C(v52, v53);
              sub_10002404C(v14, v13);
              if (!v83) {
                goto LABEL_133;
              }
              goto LABEL_127;
            }
            if (v99 == 1)
            {
              if (v87 < v89) {
                goto LABEL_150;
              }
              swift_retain();
              uint64_t v48 = (char *)__DataStorage._bytes.getter();
              if (v48)
              {
                uint64_t v49 = __DataStorage._offset.getter();
                if (__OFSUB__(v89, v49)) {
                  goto LABEL_157;
                }
                v48 += v89 - v49;
              }
              uint64_t v50 = __DataStorage._length.getter();
              size_t v51 = v86;
              if (v50 < v86) {
                size_t v51 = v50;
              }
              if (!v82) {
                goto LABEL_162;
              }
              if (!v48) {
                goto LABEL_163;
              }
              int v83 = memcmp(v82, v48, v51);
              uint64_t v52 = a3;
              unint64_t v53 = v95;
              sub_10002404C(a3, v95);
              goto LABEL_100;
            }
            uint64_t v66 = *(void *)(a3 + 16);
            unint64_t v81 = *(char **)(a3 + 24);
            swift_retain();
            swift_retain();
            uint64_t v67 = (char *)__DataStorage._bytes.getter();
            if (v67)
            {
              uint64_t v68 = __DataStorage._offset.getter();
              if (__OFSUB__(v66, v68)) {
                goto LABEL_156;
              }
              v67 += v66 - v68;
            }
            BOOL v23 = __OFSUB__(v81, v66);
            uint64_t v69 = &v81[-v66];
            if (v23) {
              goto LABEL_151;
            }
            uint64_t v70 = __DataStorage._length.getter();
            if (v70 >= (uint64_t)v69) {
              size_t v71 = (size_t)v69;
            }
            else {
              size_t v71 = v70;
            }
            if (!v82) {
              goto LABEL_168;
            }
            uint64_t v15 = v93;
            if (!v67) {
              goto LABEL_169;
            }
            int v41 = memcmp(v82, v67, v71);
            swift_release();
            uint64_t v65 = a3;
            swift_release();
            sub_10002404C(v14, v13);
LABEL_112:
            sub_10002404C(v65, v95);
LABEL_113:
            sub_10002404C(v14, v13);
            if (!v41) {
              goto LABEL_133;
            }
LABEL_127:
            swift_bridgeObjectRelease();
LABEL_128:
            sub_10002404C(v14, v13);
            unint64_t v12 = v96;
            break;
          case 2uLL:
            unsigned int v94 = v15;
            uint64_t v31 = *(void *)(v14 + 16);
            swift_bridgeObjectRetain();
            sub_10002F064(v14, v13);
            sub_10002F064(a3, v95);
            swift_retain();
            swift_retain();
            uint64_t v32 = __DataStorage._bytes.getter();
            if (v32)
            {
              uint64_t v33 = v32;
              uint64_t v34 = __DataStorage._offset.getter();
              if (__OFSUB__(v31, v34)) {
                goto LABEL_140;
              }
              long long v77 = (void *)(v33 + v31 - v34);
            }
            else
            {
              long long v77 = 0;
            }
            uint64_t v15 = v94;
            __DataStorage._length.getter();
            if (!v99)
            {
              uint64_t v46 = a3;
              LODWORD(__s1[0]) = a3;
              unint64_t v47 = v95;
              BYTE4(__s1[0]) = v88;
              *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&a3 + 5);
              HIBYTE(__s1[0]) = HIBYTE(a3);
              LODWORD(__s1[1]) = v95;
              WORD2(__s1[1]) = WORD2(v95);
              if (!v77) {
                goto LABEL_164;
              }
              int v78 = memcmp(v77, __s1, __n);
LABEL_86:
              swift_release();
              swift_release();
              sub_10002404C(v46, v47);
              sub_10002404C(v14, v13);
              if (!v78) {
                goto LABEL_133;
              }
              goto LABEL_127;
            }
            if (v99 == 1)
            {
              if (v87 < v89) {
                goto LABEL_146;
              }
              swift_retain();
              uint64_t v42 = (char *)__DataStorage._bytes.getter();
              if (v42)
              {
                uint64_t v43 = __DataStorage._offset.getter();
                if (__OFSUB__(v89, v43)) {
                  goto LABEL_155;
                }
                v42 += v89 - v43;
              }
              uint64_t v44 = __DataStorage._length.getter();
              size_t v45 = v86;
              if (v44 < v86) {
                size_t v45 = v44;
              }
              if (!v77) {
                goto LABEL_160;
              }
              if (!v42) {
                goto LABEL_161;
              }
              int v78 = memcmp(v77, v42, v45);
              uint64_t v46 = a3;
              unint64_t v47 = v95;
              sub_10002404C(a3, v95);
              goto LABEL_86;
            }
            uint64_t v59 = *(void *)(a3 + 16);
            uint64_t v76 = *(void *)(a3 + 24);
            swift_retain();
            swift_retain();
            uint64_t v60 = (char *)__DataStorage._bytes.getter();
            if (v60)
            {
              uint64_t v61 = __DataStorage._offset.getter();
              if (__OFSUB__(v59, v61)) {
                goto LABEL_154;
              }
              v60 += v59 - v61;
            }
            BOOL v23 = __OFSUB__(v76, v59);
            int64_t v62 = v76 - v59;
            if (v23) {
              goto LABEL_149;
            }
            uint64_t v63 = __DataStorage._length.getter();
            if (v63 >= v62) {
              size_t v64 = v62;
            }
            else {
              size_t v64 = v63;
            }
            if (!v77) {
              goto LABEL_165;
            }
            uint64_t v15 = v94;
            if (!v60) {
              goto LABEL_166;
            }
            int v41 = memcmp(v77, v60, v64);
            swift_release();
            swift_release();
            swift_release();
            uint64_t v65 = a3;
            swift_release();
            goto LABEL_112;
          case 3uLL:
            memset(__s1, 0, 14);
            if (!v99) {
              goto LABEL_53;
            }
            unsigned int v92 = v15;
            if (v99 == 1)
            {
              if (v87 < v89) {
                goto LABEL_143;
              }
              swift_bridgeObjectRetain();
              sub_10002F064(v14, v13);
              sub_10002F064(a3, v95);
              uint64_t v35 = __DataStorage._bytes.getter();
              if (!v35) {
                goto LABEL_159;
              }
              uint64_t v25 = v35;
              uint64_t v36 = __DataStorage._offset.getter();
              uint64_t v27 = v89 - v36;
              if (__OFSUB__(v89, v36)) {
                goto LABEL_145;
              }
LABEL_49:
              uint64_t v37 = __DataStorage._length.getter();
              if (v37 >= v86) {
                size_t v38 = v86;
              }
              else {
                size_t v38 = v37;
              }
              int v39 = memcmp(__s1, (const void *)(v25 + v27), v38);
              uint64_t v40 = a3;
            }
            else
            {
              unint64_t v80 = *(char **)(a3 + 24);
              uint64_t v85 = *(char **)(a3 + 16);
              swift_bridgeObjectRetain();
              sub_10002F064(v14, v13);
              sub_10002F064(a3, v95);
              swift_retain();
              swift_retain();
              unint64_t v54 = (char *)__DataStorage._bytes.getter();
              if (v54)
              {
                uint64_t v57 = __DataStorage._offset.getter();
                uint64_t v58 = v85;
                if (__OFSUB__(v85, v57)) {
                  goto LABEL_153;
                }
                unint64_t v54 = &v85[(void)v54 - v57];
              }
              else
              {
                uint64_t v58 = v85;
              }
              uint64_t v72 = (char *)(v80 - v58);
              if (__OFSUB__(v80, v58)) {
                goto LABEL_148;
              }
              uint64_t v73 = __DataStorage._length.getter();
              if (!v54) {
                goto LABEL_171;
              }
LABEL_122:
              if (v73 >= (uint64_t)v72) {
                size_t v74 = (size_t)v72;
              }
              else {
                size_t v74 = v73;
              }
              int v39 = memcmp(__s1, v54, v74);
              swift_release();
              swift_release();
              uint64_t v40 = a3;
            }
            sub_10002404C(v40, v95);
            sub_10002404C(v14, v13);
            uint64_t v15 = v92;
            if (!v39) {
              goto LABEL_133;
            }
            goto LABEL_127;
          default:
            __s1[0] = v14;
            LOWORD(__s1[1]) = v13;
            BYTE2(__s1[1]) = BYTE2(v13);
            BYTE3(__s1[1]) = BYTE3(v13);
            BYTE4(__s1[1]) = BYTE4(v13);
            BYTE5(__s1[1]) = BYTE5(v13);
            if (!v99)
            {
LABEL_53:
              int __s2 = a3;
              char v101 = v88;
              __int16 v102 = *(_WORD *)((char *)&a3 + 5);
              char v103 = HIBYTE(a3);
              int v104 = v95;
              __int16 v105 = WORD2(v95);
              swift_bridgeObjectRetain();
              sub_10002F064(v14, v13);
              int v41 = memcmp(__s1, &__s2, __n);
              goto LABEL_113;
            }
            unsigned int v92 = v15;
            if (v99 == 1)
            {
              if (v87 < v89) {
                goto LABEL_142;
              }
              swift_bridgeObjectRetain();
              sub_10002F064(v14, v13);
              sub_10002F064(a3, v95);
              uint64_t v24 = __DataStorage._bytes.getter();
              if (!v24)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_159:
                __DataStorage._length.getter();
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
LABEL_170:
                __break(1u);
LABEL_171:
                __break(1u);
                JUMPOUT(0x10006B04CLL);
              }
              uint64_t v25 = v24;
              uint64_t v26 = __DataStorage._offset.getter();
              uint64_t v27 = v89 - v26;
              if (__OFSUB__(v89, v26)) {
                goto LABEL_144;
              }
              goto LABEL_49;
            }
            unint64_t v79 = *(char **)(a3 + 24);
            BOOL v84 = *(char **)(a3 + 16);
            swift_bridgeObjectRetain();
            sub_10002F064(v14, v13);
            sub_10002F064(a3, v95);
            swift_retain();
            swift_retain();
            unint64_t v54 = (char *)__DataStorage._bytes.getter();
            if (v54)
            {
              uint64_t v55 = __DataStorage._offset.getter();
              uint64_t v56 = v84;
              if (__OFSUB__(v84, v55)) {
                goto LABEL_152;
              }
              unint64_t v54 = &v84[(void)v54 - v55];
            }
            else
            {
              uint64_t v56 = v84;
            }
            uint64_t v72 = (char *)(v79 - v56);
            if (__OFSUB__(v79, v56)) {
              goto LABEL_147;
            }
            uint64_t v73 = __DataStorage._length.getter();
            if (!v54) {
              goto LABEL_170;
            }
            goto LABEL_122;
        }
        goto LABEL_7;
      }
LABEL_132:
      swift_bridgeObjectRetain();
      sub_10002F064(v14, v13);
      sub_10002404C(v14, v13);
LABEL_133:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002404C(v14, v13);
      return v15;
  }
}

uint64_t sub_10006B07C(void *a1)
{
  uint64_t v2 = (uint64_t)a1;
  unint64_t v3 = *v1;
  uint64_t v4 = *((void *)*v1 + 2);
  if (!v4) {
    goto LABEL_128;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  int v7 = a1 + 2;
  swift_bridgeObjectRetain();
  uint64_t v8 = 32;
  unint64_t v96 = v3;
  uint64_t v100 = v5;
  uint64_t v101 = v6;
  __int16 v102 = v7;
  while (1)
  {
    long long v10 = *(_OWORD *)&v3[v8];
    long long v9 = *(_OWORD *)&v3[v8 + 16];
    char v113 = v3[v8 + 32];
    long long v111 = v10;
    long long v112 = v9;
    BOOL v11 = (void)v10 == v5 && *((void *)&v10 + 1) == v6;
    if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      unint64_t v13 = *((void *)&v112 + 1);
      uint64_t v12 = v112;
      sub_1000735A0(v7, &v110);
      if (v13 >> 60 == 15)
      {
        sub_1000735A0(&v110, &v115);
        if (*((void *)&v115 + 1) >> 60 == 15)
        {
          sub_100073C70((uint64_t)&v111);
          goto LABEL_135;
        }
        goto LABEL_4;
      }
      sub_1000735A0(&v110, &v114);
      unint64_t v14 = *((void *)&v114 + 1);
      if (*((void *)&v114 + 1) >> 60 != 15) {
        break;
      }
    }
LABEL_4:
    v8 += 40;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      uint64_t v2 = (uint64_t)a1;
      uint64_t v1 = v94;
LABEL_128:
      swift_bridgeObjectRetain();
      sub_100073C70(v2);
      unint64_t v79 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v79 = sub_10006FEC4(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v81 = *((void *)v79 + 2);
      unint64_t v80 = *((void *)v79 + 3);
      if (v81 >= v80 >> 1) {
        unint64_t v79 = sub_10006FEC4((char *)(v80 > 1), v81 + 1, 1, v79);
      }
      *((void *)v79 + 2) = v81 + 1;
      char v82 = &v79[40 * v81];
      long long v83 = *(_OWORD *)v2;
      long long v84 = *(_OWORD *)(v2 + 16);
      v82[64] = *(unsigned char *)(v2 + 32);
      *((_OWORD *)v82 + 2) = v83;
      *((_OWORD *)v82 + 3) = v84;
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v1 = v79;
      return result;
    }
  }
  uint64_t v15 = v114;
  uint64_t v16 = 0;
  switch(v13 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v12), v12))
      {
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
      }
      uint64_t v16 = HIDWORD(v12) - (int)v12;
LABEL_17:
      unint64_t v97 = *((void *)&v114 + 1);
      uint64_t v19 = v3;
      uint64_t v20 = v114;
      sub_100012DE4(v12, v13);
      uint64_t v15 = v20;
      unint64_t v3 = v19;
      unint64_t v14 = v97;
      break;
    case 2uLL:
      uint64_t v18 = *(void *)(v12 + 16);
      uint64_t v17 = *(void *)(v12 + 24);
      uint64_t v16 = v17 - v18;
      if (!__OFSUB__(v17, v18)) {
        goto LABEL_17;
      }
      goto LABEL_137;
    case 3uLL:
      break;
    default:
      uint64_t v16 = BYTE6(v13);
      break;
  }
  unint64_t v21 = v14 >> 62;
  switch(v14 >> 62)
  {
    case 1uLL:
      LODWORD(v22) = HIDWORD(v15) - v15;
      if (__OFSUB__(HIDWORD(v15), v15)) {
        goto LABEL_138;
      }
      uint64_t v22 = (int)v22;
LABEL_23:
      if (v16 != v22)
      {
LABEL_34:
        sub_10002404C(v12, v13);
        uint64_t v5 = v100;
        uint64_t v6 = v101;
        int v7 = v102;
        goto LABEL_4;
      }
      if (v16 >= 1)
      {
        int v7 = v102;
        switch(v13 >> 62)
        {
          case 1uLL:
            uint64_t v98 = v15;
            if ((int)v12 > v12 >> 32) {
              goto LABEL_140;
            }
            sub_10002F064(v12, v13);
            sub_100073C70((uint64_t)&v111);
            sub_100073D4C((uint64_t)&v110);
            uint64_t v32 = __DataStorage._bytes.getter();
            if (v32)
            {
              uint64_t v33 = v32;
              uint64_t v34 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v12, v34)) {
                goto LABEL_142;
              }
              unsigned int v93 = (void *)(v33 + (int)v12 - v34);
            }
            else
            {
              unsigned int v93 = 0;
            }
            unint64_t v3 = v96;
            __DataStorage._length.getter();
            uint64_t v6 = v101;
            if (!v21)
            {
              *(void *)&long long __s1 = v98;
              WORD4(__s1) = v14;
              BYTE10(__s1) = BYTE2(v14);
              BYTE11(__s1) = BYTE3(v14);
              BYTE12(__s1) = BYTE4(v14);
              BYTE13(__s1) = BYTE5(v14);
              int v7 = v102;
              if (!v93) {
                goto LABEL_168;
              }
              int v52 = memcmp(v93, &__s1, BYTE6(v14));
              goto LABEL_103;
            }
            if (v21 == 1)
            {
              if (v98 >> 32 < (int)v98) {
                goto LABEL_151;
              }
              swift_retain();
              uint64_t v48 = (char *)__DataStorage._bytes.getter();
              if (v48)
              {
                uint64_t v49 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v98, v49)) {
                  goto LABEL_158;
                }
                v48 += (int)v98 - v49;
              }
              unint64_t v3 = v96;
              uint64_t v50 = __DataStorage._length.getter();
              if (v50 >= (v98 >> 32) - (int)v98) {
                size_t v51 = (v98 >> 32) - (int)v98;
              }
              else {
                size_t v51 = v50;
              }
              if (!v93) {
                goto LABEL_161;
              }
              uint64_t v6 = v101;
              int v7 = v102;
              if (!v48) {
                goto LABEL_162;
              }
              int v52 = memcmp(v93, v48, v51);
              sub_100073D7C((uint64_t)&v110);
LABEL_103:
              sub_10002404C(v12, v13);
LABEL_125:
              sub_100073D7C((uint64_t)&v110);
              sub_10002404C(v12, v13);
              if (!v52) {
                goto LABEL_135;
              }
              goto LABEL_126;
            }
            uint64_t v70 = *(void *)(v98 + 16);
            uint64_t v71 = *(void *)(v98 + 24);
            swift_retain();
            swift_retain();
            uint64_t v72 = (char *)__DataStorage._bytes.getter();
            if (v72)
            {
              uint64_t v73 = __DataStorage._offset.getter();
              if (__OFSUB__(v70, v73)) {
                goto LABEL_157;
              }
              v72 += v70 - v73;
            }
            BOOL v25 = __OFSUB__(v71, v70);
            int64_t v74 = v71 - v70;
            if (v25) {
              goto LABEL_152;
            }
            uint64_t v75 = __DataStorage._length.getter();
            if (v75 >= v74) {
              size_t v76 = v74;
            }
            else {
              size_t v76 = v75;
            }
            uint64_t v6 = v101;
            if (!v93) {
              goto LABEL_169;
            }
            if (!v72) {
              goto LABEL_170;
            }
            int v44 = memcmp(v93, v72, v76);
            swift_release();
            swift_release();
            sub_10002404C(v12, v13);
LABEL_114:
            sub_100073D7C((uint64_t)&v110);
            sub_10002404C(v12, v13);
LABEL_115:
            int v7 = v102;
            if (!v44) {
              goto LABEL_135;
            }
LABEL_126:
            sub_100073D08((uint64_t)&v111);
            uint64_t v5 = v100;
            break;
          case 2uLL:
            uint64_t v99 = v15;
            uint64_t v35 = *(void *)(v12 + 16);
            sub_100073C70((uint64_t)&v111);
            sub_100073D4C((uint64_t)&v110);
            swift_retain();
            swift_retain();
            uint64_t v36 = __DataStorage._bytes.getter();
            if (v36)
            {
              uint64_t v37 = v36;
              uint64_t v38 = __DataStorage._offset.getter();
              if (__OFSUB__(v35, v38)) {
                goto LABEL_141;
              }
              unsigned int v92 = (void *)(v37 + v35 - v38);
            }
            else
            {
              unsigned int v92 = 0;
            }
            unint64_t v3 = v96;
            __DataStorage._length.getter();
            uint64_t v6 = v101;
            if (!v21)
            {
              *(void *)&long long __s1 = v99;
              WORD4(__s1) = v14;
              BYTE10(__s1) = BYTE2(v14);
              BYTE11(__s1) = BYTE3(v14);
              BYTE12(__s1) = BYTE4(v14);
              BYTE13(__s1) = BYTE5(v14);
              int v7 = v102;
              if (!v92) {
                goto LABEL_165;
              }
              int v52 = memcmp(v92, &__s1, BYTE6(v14));
LABEL_124:
              swift_release();
              swift_release();
              goto LABEL_125;
            }
            if (v21 == 1)
            {
              if (v99 >> 32 < (int)v99) {
                goto LABEL_147;
              }
              swift_retain();
              uint64_t v46 = (char *)__DataStorage._bytes.getter();
              if (v46)
              {
                uint64_t v47 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v99, v47)) {
                  goto LABEL_156;
                }
                v46 += (int)v99 - v47;
                unint64_t v3 = v96;
              }
              else
              {
                unint64_t v3 = v96;
              }
              uint64_t v77 = __DataStorage._length.getter();
              if (v77 >= (v99 >> 32) - (int)v99) {
                size_t v78 = (v99 >> 32) - (int)v99;
              }
              else {
                size_t v78 = v77;
              }
              if (!v92) {
                goto LABEL_171;
              }
              uint64_t v6 = v101;
              int v7 = v102;
              if (!v46) {
                goto LABEL_172;
              }
              int v52 = memcmp(v92, v46, v78);
              sub_100073D7C((uint64_t)&v110);
              goto LABEL_124;
            }
            uint64_t v63 = *(void *)(v99 + 16);
            uint64_t v64 = *(void *)(v99 + 24);
            swift_retain();
            swift_retain();
            uint64_t v65 = (char *)__DataStorage._bytes.getter();
            if (v65)
            {
              uint64_t v66 = __DataStorage._offset.getter();
              if (__OFSUB__(v63, v66)) {
                goto LABEL_155;
              }
              v65 += v63 - v66;
            }
            BOOL v25 = __OFSUB__(v64, v63);
            int64_t v67 = v64 - v63;
            if (v25) {
              goto LABEL_150;
            }
            uint64_t v68 = __DataStorage._length.getter();
            if (v68 >= v67) {
              size_t v69 = v67;
            }
            else {
              size_t v69 = v68;
            }
            uint64_t v6 = v101;
            if (!v92) {
              goto LABEL_166;
            }
            if (!v65) {
              goto LABEL_167;
            }
            int v44 = memcmp(v92, v65, v69);
            swift_release();
            swift_release();
LABEL_100:
            swift_release();
            swift_release();
            goto LABEL_114;
          case 3uLL:
            *(void *)((char *)&__s1 + 6) = 0;
            *(void *)&long long __s1 = 0;
            if (!v21) {
              goto LABEL_51;
            }
            if (v21 == 1)
            {
              uint64_t v39 = (int)v15;
              uint64_t v27 = (v15 >> 32) - (int)v15;
              if (v15 >> 32 < (int)v15) {
                goto LABEL_144;
              }
              sub_100073C70((uint64_t)&v111);
              sub_100073D4C((uint64_t)&v110);
              uint64_t v40 = __DataStorage._bytes.getter();
              if (!v40) {
                goto LABEL_160;
              }
              uint64_t v29 = v40;
              uint64_t v41 = __DataStorage._offset.getter();
              uint64_t v31 = v39 - v41;
              if (__OFSUB__(v39, v41)) {
                goto LABEL_146;
              }
LABEL_47:
              uint64_t v42 = __DataStorage._length.getter();
              if (v42 >= v27) {
                size_t v43 = v27;
              }
              else {
                size_t v43 = v42;
              }
              int v44 = memcmp(&__s1, (const void *)(v29 + v31), v43);
              sub_100073D7C((uint64_t)&v110);
              sub_10002404C(v12, v13);
              unint64_t v3 = v96;
              uint64_t v6 = v101;
              goto LABEL_115;
            }
            uint64_t v59 = *(void *)(v15 + 16);
            uint64_t v60 = *(void *)(v15 + 24);
            sub_100073C70((uint64_t)&v111);
            sub_100073D4C((uint64_t)&v110);
            swift_retain();
            swift_retain();
            uint64_t v55 = (char *)__DataStorage._bytes.getter();
            if (v55)
            {
              uint64_t v61 = __DataStorage._offset.getter();
              if (__OFSUB__(v59, v61)) {
                goto LABEL_154;
              }
              v55 += v59 - v61;
            }
            BOOL v25 = __OFSUB__(v60, v59);
            int64_t v57 = v60 - v59;
            if (v25) {
              goto LABEL_149;
            }
            uint64_t v58 = __DataStorage._length.getter();
            uint64_t v6 = v101;
            if (!v55) {
              goto LABEL_164;
            }
LABEL_84:
            if (v58 >= v57) {
              size_t v62 = v57;
            }
            else {
              size_t v62 = v58;
            }
            int v44 = memcmp(&__s1, v55, v62);
            goto LABEL_100;
          default:
            *(void *)&long long __s1 = v12;
            WORD4(__s1) = v13;
            BYTE10(__s1) = BYTE2(v13);
            BYTE11(__s1) = BYTE3(v13);
            BYTE12(__s1) = BYTE4(v13);
            BYTE13(__s1) = BYTE5(v13);
            if (!v21)
            {
LABEL_51:
              uint64_t __s2 = v15;
              __int16 v104 = v14;
              char v105 = BYTE2(v14);
              char v106 = BYTE3(v14);
              char v107 = BYTE4(v14);
              char v108 = BYTE5(v14);
              sub_100073C70((uint64_t)&v111);
              int v45 = memcmp(&__s1, &__s2, BYTE6(v14));
              sub_10002404C(v12, v13);
              uint64_t v6 = v101;
              if (!v45) {
                goto LABEL_135;
              }
              goto LABEL_126;
            }
            if (v21 == 1)
            {
              uint64_t v26 = (int)v15;
              uint64_t v27 = (v15 >> 32) - (int)v15;
              if (v15 >> 32 < (int)v15) {
                goto LABEL_143;
              }
              sub_100073C70((uint64_t)&v111);
              sub_100073D4C((uint64_t)&v110);
              uint64_t v28 = __DataStorage._bytes.getter();
              if (!v28)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_160:
                __DataStorage._length.getter();
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
LABEL_170:
                __break(1u);
LABEL_171:
                __break(1u);
LABEL_172:
                __break(1u);
                JUMPOUT(0x10006BC64);
              }
              uint64_t v29 = v28;
              uint64_t v30 = __DataStorage._offset.getter();
              uint64_t v31 = v26 - v30;
              if (__OFSUB__(v26, v30)) {
                goto LABEL_145;
              }
              goto LABEL_47;
            }
            uint64_t v53 = *(void *)(v15 + 16);
            uint64_t v54 = *(void *)(v15 + 24);
            sub_100073C70((uint64_t)&v111);
            sub_100073D4C((uint64_t)&v110);
            swift_retain();
            swift_retain();
            uint64_t v55 = (char *)__DataStorage._bytes.getter();
            if (v55)
            {
              uint64_t v56 = __DataStorage._offset.getter();
              if (__OFSUB__(v53, v56)) {
                goto LABEL_153;
              }
              v55 += v53 - v56;
            }
            BOOL v25 = __OFSUB__(v54, v53);
            int64_t v57 = v54 - v53;
            if (v25) {
              goto LABEL_148;
            }
            uint64_t v58 = __DataStorage._length.getter();
            uint64_t v6 = v101;
            if (!v55) {
              goto LABEL_163;
            }
            goto LABEL_84;
        }
        goto LABEL_4;
      }
LABEL_134:
      sub_100073C70((uint64_t)&v111);
      sub_10002404C(v12, v13);
LABEL_135:
      swift_bridgeObjectRelease();
      *(void *)&long long __s1 = 0;
      *((void *)&__s1 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(64);
      v86._uint64_t countAndFlagsBits = 0xD000000000000027;
      v86._int64_t object = (void *)0x8000000100147240;
      String.append(_:)(v86);
      v87._uint64_t countAndFlagsBits = ApprovalDBEntry.description.getter();
      String.append(_:)(v87);
      swift_bridgeObjectRelease();
      v88._int64_t object = (void *)0x8000000100147270;
      v88._uint64_t countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v88);
      v89._uint64_t countAndFlagsBits = ApprovalDBEntry.description.getter();
      String.append(_:)(v89);
      swift_bridgeObjectRelease();
      long long v90 = __s1;
      sub_100073CB4();
      swift_allocError();
      *(_OWORD *)uint64_t v91 = v90;
      *(unsigned char *)(v91 + 16) = 0;
      swift_willThrow();
      return sub_100073D08((uint64_t)&v111);
    case 2uLL:
      uint64_t v24 = *(void *)(v15 + 16);
      uint64_t v23 = *(void *)(v15 + 24);
      BOOL v25 = __OFSUB__(v23, v24);
      uint64_t v22 = v23 - v24;
      if (!v25) {
        goto LABEL_23;
      }
      goto LABEL_139;
    case 3uLL:
      if (v16) {
        goto LABEL_34;
      }
      goto LABEL_134;
    default:
      uint64_t v22 = BYTE6(v14);
      goto LABEL_23;
  }
}

uint64_t sub_10006BC94(uint64_t a1)
{
  uint64_t v116 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_130:
    *(void *)&long long __s1 = 0;
    *((void *)&__s1 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v78._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v78._int64_t object = (void *)0x8000000100147290;
    String.append(_:)(v78);
    uint64_t v80 = *(void *)v116;
    unint64_t v79 = *(void **)(v116 + 8);
    swift_bridgeObjectRetain();
    v81._uint64_t countAndFlagsBits = v80;
    v81._int64_t object = v79;
    String.append(_:)(v81);
    swift_bridgeObjectRelease();
    v82._uint64_t countAndFlagsBits = 0x656372756F73202CLL;
    v82._int64_t object = (void *)0xEA00000000002020;
    String.append(_:)(v82);
    uint64_t v83 = *(void *)(v116 + 16);
    unint64_t v84 = *(void *)(v116 + 24);
    if (v84 >> 60 == 15)
    {
      unint64_t v85 = 0xE600000000000000;
      uint64_t v86 = 0x6D6574737973;
    }
    else
    {
      unint64_t __s2 = 0;
      unint64_t v125 = 0xE000000000000000;
      sub_10002F064(v83, v84);
      sub_100012DE4(v83, v84);
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      unint64_t __s2 = 0xD000000000000024;
      unint64_t v125 = 0x8000000100147210;
      v87._uint64_t countAndFlagsBits = sub_100014690(v83, v84);
      String.append(_:)(v87);
      swift_bridgeObjectRelease();
      sub_10002404C(v83, v84);
      uint64_t v86 = __s2;
      unint64_t v85 = v125;
    }
    unint64_t v88 = v85;
    String.append(_:)(*(Swift::String *)&v86);
    swift_bridgeObjectRelease();
    sub_10002404C(v83, v84);
    v89._int64_t object = (void *)0x80000001001472C0;
    v89._uint64_t countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v89);
    unint64_t v91 = *((void *)&__s1 + 1);
    unint64_t v90 = __s1;
    sub_100073CB4();
    swift_allocError();
    *(_OWORD *)uint64_t v92 = __PAIR128__(v91, v90);
    *(unsigned char *)(v92 + 16) = 1;
    swift_willThrow();
    return v91 & 1;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)v116;
  uint64_t v122 = *(void *)(v116 + 8);
  uint64_t v123 = v7;
  uint64_t v121 = (_OWORD *)(v116 + 16);
  uint64_t v118 = (char *)v3;
  uint64_t v117 = v4;
  while (1)
  {
    if (v6 >= *(void *)(v3 + 16))
    {
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
      goto LABEL_170;
    }
    long long v9 = *(_OWORD *)(v3 + v5 + 32);
    long long v8 = *(_OWORD *)(v3 + v5 + 48);
    unsigned __int8 v130 = *(unsigned char *)(v3 + v5 + 64);
    long long v128 = v9;
    long long v129 = v8;
    uint64_t v10 = *((void *)&v9 + 1);
    uint64_t v11 = v9;
    BOOL v12 = (void)v9 == v123 && *((void *)&v9 + 1) == v122;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_4;
    }
    int v120 = v130;
    unint64_t v14 = *((void *)&v129 + 1);
    uint64_t v13 = v129;
    sub_1000735A0(v121, &v127);
    if (v14 >> 60 != 15) {
      break;
    }
    sub_1000735A0(&v127, &v132);
    if (*((void *)&v132 + 1) >> 60 == 15)
    {
      sub_100073C70((uint64_t)&v128);
      uint64_t v47 = v13;
      goto LABEL_137;
    }
LABEL_4:
    ++v6;
    v5 += 40;
    if (v4 == v6) {
      goto LABEL_130;
    }
  }
  sub_1000735A0(&v127, &v131);
  unint64_t v2 = *((void *)&v131 + 1);
  if (*((void *)&v131 + 1) >> 60 == 15) {
    goto LABEL_4;
  }
  uint64_t v15 = v131;
  uint64_t v16 = 0;
  switch(v14 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v13), v13)) {
        goto LABEL_153;
      }
      uint64_t v16 = HIDWORD(v13) - (int)v13;
LABEL_18:
      uint64_t v119 = *((void *)&v131 + 1);
      uint64_t v19 = v11;
      uint64_t v20 = v10;
      uint64_t v21 = v131;
      sub_100012DE4(v13, v14);
      uint64_t v15 = v21;
      uint64_t v10 = v20;
      uint64_t v11 = v19;
      unint64_t v2 = v119;
      break;
    case 2uLL:
      uint64_t v18 = *(void *)(v13 + 16);
      uint64_t v17 = *(void *)(v13 + 24);
      uint64_t v16 = v17 - v18;
      if (!__OFSUB__(v17, v18)) {
        goto LABEL_18;
      }
      goto LABEL_154;
    case 3uLL:
      break;
    default:
      uint64_t v16 = BYTE6(v14);
      break;
  }
  uint64_t v119 = v13;
  unint64_t v22 = v2 >> 62;
  switch(v2 >> 62)
  {
    case 1uLL:
      LODWORD(v23) = HIDWORD(v15) - v15;
      if (__OFSUB__(HIDWORD(v15), v15)) {
        goto LABEL_155;
      }
      uint64_t v23 = (int)v23;
LABEL_24:
      if (v16 != v23)
      {
LABEL_36:
        sub_10002404C(v119, v14);
LABEL_129:
        uint64_t v3 = (uint64_t)v118;
        uint64_t v4 = v117;
        goto LABEL_4;
      }
      if (v16 >= 1)
      {
        switch(v14 >> 62)
        {
          case 1uLL:
            uint64_t v115 = v15;
            uint64_t v113 = (int)v119;
            if ((int)v119 > v119 >> 32) {
              goto LABEL_157;
            }
            sub_100073C70((uint64_t)&v128);
            sub_10002F064(v119, v14);
            sub_100073D4C((uint64_t)&v127);
            uint64_t v32 = (char *)__DataStorage._bytes.getter();
            if (!v32) {
              goto LABEL_41;
            }
            uint64_t v33 = __DataStorage._offset.getter();
            if (__OFSUB__(v113, v33)) {
              goto LABEL_159;
            }
            v32 += v113 - v33;
LABEL_41:
            __DataStorage._length.getter();
            if (!v22)
            {
              *(void *)&long long __s1 = v115;
              WORD4(__s1) = v2;
              BYTE10(__s1) = BYTE2(v2);
              BYTE11(__s1) = BYTE3(v2);
              BYTE12(__s1) = BYTE4(v2);
              BYTE13(__s1) = BYTE5(v2);
              if (!v32) {
                goto LABEL_185;
              }
              size_t v44 = BYTE6(v2);
              uint64_t p_s1 = &__s1;
              int v45 = (long long *)v32;
              goto LABEL_97;
            }
            uint64_t v113 = (uint64_t)v32;
            if (v22 == 1)
            {
              if (v115 >> 32 < (int)v115) {
                goto LABEL_168;
              }
              swift_retain();
              uint64_t v34 = __DataStorage._bytes.getter();
              if (v34)
              {
                unint64_t v2 = v34;
                uint64_t v35 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v115, v35)) {
                  goto LABEL_177;
                }
                uint64_t v36 = (const void *)(v2 + (int)v115 - v35);
              }
              else
              {
                uint64_t v36 = 0;
              }
              uint64_t v76 = __DataStorage._length.getter();
              if (v76 >= (v115 >> 32) - (int)v115) {
                size_t v77 = (v115 >> 32) - (int)v115;
              }
              else {
                size_t v77 = v76;
              }
              if (!v113) {
                goto LABEL_190;
              }
              if (!v36) {
                goto LABEL_191;
              }
              int v46 = memcmp((const void *)v113, v36, v77);
              sub_100073D7C((uint64_t)&v127);
              goto LABEL_125;
            }
            uint64_t v69 = *(void *)(v115 + 16);
            unint64_t v2 = *(void *)(v115 + 24);
            swift_retain();
            swift_retain();
            uint64_t v53 = (char *)__DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v70 = __DataStorage._offset.getter();
              if (__OFSUB__(v69, v70)) {
                goto LABEL_176;
              }
              v53 += v69 - v70;
            }
            BOOL v26 = __OFSUB__(v2, v69);
            uint64_t v71 = v2 - v69;
            if (v26) {
              goto LABEL_169;
            }
            uint64_t v72 = __DataStorage._length.getter();
            if (v72 >= v71) {
              size_t v73 = v71;
            }
            else {
              size_t v73 = v72;
            }
            uint64_t v61 = (long long *)v113;
            if (!v113) {
              goto LABEL_186;
            }
            if (!v53) {
              goto LABEL_187;
            }
            size_t v60 = v73;
            goto LABEL_108;
          case 2uLL:
            uint64_t v115 = v15;
            long long v112 = *(char **)(v119 + 16);
            sub_100073C70((uint64_t)&v128);
            sub_10002F064(v119, v14);
            sub_100073D4C((uint64_t)&v127);
            swift_retain();
            swift_retain();
            uint64_t v37 = __DataStorage._bytes.getter();
            uint64_t v113 = v14 & 0x3FFFFFFFFFFFFFFFLL;
            if (v37)
            {
              uint64_t v111 = v37;
              uint64_t v38 = __DataStorage._offset.getter();
              if (__OFSUB__(v112, v38)) {
                goto LABEL_158;
              }
              long long v112 = &v112[v111 - v38];
            }
            else
            {
              long long v112 = 0;
            }
            __DataStorage._length.getter();
            if (!v22)
            {
              *(void *)&long long __s1 = v115;
              WORD4(__s1) = v2;
              BYTE10(__s1) = BYTE2(v2);
              BYTE11(__s1) = BYTE3(v2);
              BYTE12(__s1) = BYTE4(v2);
              BYTE13(__s1) = BYTE5(v2);
              if (!v112) {
                goto LABEL_182;
              }
              int v62 = memcmp(v112, &__s1, BYTE6(v2));
              swift_release();
              uint64_t v47 = v119;
LABEL_94:
              swift_release();
              sub_100073D7C((uint64_t)&v127);
              goto LABEL_109;
            }
            if (v22 != 1)
            {
              uint64_t v63 = *(void *)(v115 + 16);
              unint64_t v2 = *(void *)(v115 + 24);
              swift_retain();
              swift_retain();
              uint64_t v64 = (char *)__DataStorage._bytes.getter();
              if (v64)
              {
                uint64_t v65 = __DataStorage._offset.getter();
                if (__OFSUB__(v63, v65)) {
                  goto LABEL_174;
                }
                v64 += v63 - v65;
              }
              BOOL v26 = __OFSUB__(v2, v63);
              int64_t v66 = v2 - v63;
              if (v26) {
                goto LABEL_167;
              }
              uint64_t v67 = __DataStorage._length.getter();
              if (v67 >= v66) {
                size_t v68 = v66;
              }
              else {
                size_t v68 = v67;
              }
              if (!v112) {
                goto LABEL_183;
              }
              if (!v64) {
                goto LABEL_184;
              }
              int v62 = memcmp(v112, v64, v68);
              swift_release();
              uint64_t v47 = v119;
              swift_release();
              swift_release();
              goto LABEL_94;
            }
            if (v115 >> 32 < (int)v115) {
              goto LABEL_162;
            }
            swift_retain();
            uint64_t v48 = __DataStorage._bytes.getter();
            if (v48)
            {
              unint64_t v2 = v48;
              uint64_t v49 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v115, v49)) {
                goto LABEL_175;
              }
              uint64_t v50 = (const void *)(v2 + (int)v115 - v49);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v74 = __DataStorage._length.getter();
            if (v74 >= (v115 >> 32) - (int)v115) {
              size_t v75 = (v115 >> 32) - (int)v115;
            }
            else {
              size_t v75 = v74;
            }
            if (!v112) {
              goto LABEL_188;
            }
            if (!v50) {
              goto LABEL_189;
            }
            int v46 = memcmp(v112, v50, v75);
            sub_100073D7C((uint64_t)&v127);
            swift_release();
            uint64_t v47 = v119;
            swift_release();
            sub_100073D7C((uint64_t)&v127);
            goto LABEL_126;
          case 3uLL:
            *(void *)((char *)&__s1 + 6) = 0;
            *(void *)&long long __s1 = 0;
            if (!v22) {
              goto LABEL_59;
            }
            if (v22 == 1)
            {
              uint64_t v39 = (int)v15;
              uint64_t v115 = (v15 >> 32) - (int)v15;
              if (v15 >> 32 < (int)v15) {
                goto LABEL_161;
              }
              sub_100073C70((uint64_t)&v128);
              sub_10002F064(v119, v14);
              sub_100073D4C((uint64_t)&v127);
              uint64_t v40 = __DataStorage._bytes.getter();
              if (!v40) {
                goto LABEL_179;
              }
              uint64_t v29 = v40;
              uint64_t v41 = __DataStorage._offset.getter();
              BOOL v26 = __OFSUB__(v39, v41);
              uint64_t v31 = v39 - v41;
              if (v26) {
                goto LABEL_166;
              }
              goto LABEL_55;
            }
            uint64_t v57 = *(void *)(v15 + 16);
            unint64_t v2 = *(void *)(v15 + 24);
            uint64_t v58 = v15;
            sub_100073C70((uint64_t)&v128);
            sub_10002F064(v119, v14);
            sub_100073D4C((uint64_t)&v127);
            uint64_t v115 = v58;
            swift_retain();
            swift_retain();
            uint64_t v53 = (char *)__DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v59 = __DataStorage._offset.getter();
              if (__OFSUB__(v57, v59)) {
                goto LABEL_173;
              }
              v53 += v57 - v59;
            }
            BOOL v26 = __OFSUB__(v2, v57);
            int64_t v55 = v2 - v57;
            if (v26) {
              goto LABEL_164;
            }
            uint64_t v56 = __DataStorage._length.getter();
            if (!v53) {
              goto LABEL_181;
            }
            goto LABEL_78;
          default:
            *(void *)&long long __s1 = v119;
            WORD4(__s1) = v14;
            BYTE10(__s1) = BYTE2(v14);
            BYTE11(__s1) = BYTE3(v14);
            BYTE12(__s1) = BYTE4(v14);
            BYTE13(__s1) = BYTE5(v14);
            if (!v22)
            {
LABEL_59:
              unint64_t __s2 = v15;
              LOWORD(v125) = v2;
              BYTE2(v125) = BYTE2(v2);
              BYTE3(v125) = BYTE3(v2);
              BYTE4(v125) = BYTE4(v2);
              BYTE5(v125) = BYTE5(v2);
              sub_100073C70((uint64_t)&v128);
              int v46 = memcmp(&__s1, &__s2, BYTE6(v2));
              uint64_t v47 = v119;
LABEL_127:
              sub_10002404C(v47, v14);
              if (!v46) {
                goto LABEL_137;
              }
              goto LABEL_128;
            }
            if (v22 == 1)
            {
              uint64_t v27 = (int)v15;
              uint64_t v115 = (v15 >> 32) - (int)v15;
              if (v15 >> 32 < (int)v15) {
                goto LABEL_160;
              }
              sub_100073C70((uint64_t)&v128);
              sub_10002F064(v119, v14);
              sub_100073D4C((uint64_t)&v127);
              uint64_t v28 = __DataStorage._bytes.getter();
              if (!v28)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_179:
                __DataStorage._length.getter();
                __break(1u);
LABEL_180:
                __break(1u);
LABEL_181:
                __break(1u);
LABEL_182:
                __break(1u);
LABEL_183:
                __break(1u);
LABEL_184:
                __break(1u);
LABEL_185:
                __break(1u);
LABEL_186:
                __break(1u);
LABEL_187:
                __break(1u);
LABEL_188:
                __break(1u);
LABEL_189:
                __break(1u);
LABEL_190:
                __break(1u);
LABEL_191:
                __break(1u);
LABEL_192:
                __break(1u);
                JUMPOUT(0x10006CC70);
              }
              uint64_t v29 = v28;
              uint64_t v30 = __DataStorage._offset.getter();
              BOOL v26 = __OFSUB__(v27, v30);
              uint64_t v31 = v27 - v30;
              if (v26) {
                goto LABEL_165;
              }
LABEL_55:
              uint64_t v42 = __DataStorage._length.getter();
              uint64_t p_s1 = (long long *)(v29 + v31);
              if (v42 >= v115) {
                size_t v44 = v115;
              }
              else {
                size_t v44 = v42;
              }
              int v45 = &__s1;
LABEL_97:
              int v46 = memcmp(v45, p_s1, v44);
LABEL_125:
              sub_100073D7C((uint64_t)&v127);
              uint64_t v47 = v119;
LABEL_126:
              sub_10002404C(v47, v14);
              goto LABEL_127;
            }
            uint64_t v51 = *(void *)(v15 + 16);
            unint64_t v2 = *(void *)(v15 + 24);
            uint64_t v52 = v15;
            sub_100073C70((uint64_t)&v128);
            sub_10002F064(v119, v14);
            sub_100073D4C((uint64_t)&v127);
            uint64_t v115 = v52;
            swift_retain();
            swift_retain();
            uint64_t v53 = (char *)__DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v54 = __DataStorage._offset.getter();
              if (__OFSUB__(v51, v54)) {
                goto LABEL_172;
              }
              v53 += v51 - v54;
            }
            BOOL v26 = __OFSUB__(v2, v51);
            int64_t v55 = v2 - v51;
            if (v26) {
              goto LABEL_163;
            }
            uint64_t v56 = __DataStorage._length.getter();
            if (!v53) {
              goto LABEL_180;
            }
LABEL_78:
            if (v56 >= v55) {
              size_t v60 = v55;
            }
            else {
              size_t v60 = v56;
            }
            uint64_t v61 = &__s1;
LABEL_108:
            int v62 = memcmp(v61, v53, v60);
            swift_release();
            swift_release();
            sub_100073D7C((uint64_t)&v127);
            uint64_t v47 = v119;
LABEL_109:
            sub_10002404C(v47, v14);
            sub_10002404C(v47, v14);
            if (!v62) {
              goto LABEL_137;
            }
LABEL_128:
            sub_100073D08((uint64_t)&v128);
            break;
        }
        goto LABEL_129;
      }
LABEL_136:
      sub_100073C70((uint64_t)&v128);
      uint64_t v47 = v119;
      sub_10002404C(v119, v14);
LABEL_137:
      LODWORD(v2) = *(unsigned __int8 *)(v116 + 32);
      LOBYTE(v91) = v120 != v2;
      if (v120 == v2)
      {
        sub_100073D08((uint64_t)&v128);
        return v91 & 1;
      }
      if (!v120)
      {
        uint64_t v94 = v47;
        if (v2 == 1) {
          goto LABEL_148;
        }
LABEL_141:
        *(void *)&long long __s1 = 0;
        *((void *)&__s1 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(47);
        swift_bridgeObjectRelease();
        *(void *)&long long __s1 = 0xD00000000000001DLL;
        *((void *)&__s1 + 1) = 0x80000001001472E0;
        sub_100073C70((uint64_t)&v128);
        v95._uint64_t countAndFlagsBits = ApprovalDBEntry.description.getter();
        String.append(_:)(v95);
        swift_bridgeObjectRelease();
        sub_100073D08((uint64_t)&v128);
        v96._uint64_t countAndFlagsBits = 0x2077656E206F7420;
        v96._int64_t object = (void *)0xEE00206574617473;
        String.append(_:)(v96);
        if (qword_100183B60 == -1)
        {
LABEL_142:
          __chkstk_darwin(v97);
          v110[16] = v2;
          uint64_t v98 = swift_bridgeObjectRetain();
          uint64_t v99 = sub_1000729E4(v98, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100076CB8, (uint64_t)v110);
          swift_bridgeObjectRelease();
          uint64_t v100 = sub_100068894(v99);
          __int16 v102 = v101;
          swift_release();
          if (!v102) {
            goto LABEL_192;
          }
          v103._uint64_t countAndFlagsBits = (uint64_t)v100;
          v103._int64_t object = v102;
          String.append(_:)(v103);
          swift_bridgeObjectRelease();
          unint64_t v91 = *((void *)&__s1 + 1);
          unint64_t v104 = __s1;
          sub_100073CB4();
          swift_allocError();
          *(_OWORD *)uint64_t v105 = __PAIR128__(v91, v104);
          *(unsigned char *)(v105 + 16) = 0;
          swift_willThrow();
          sub_100073D08((uint64_t)&v128);
          return v91 & 1;
        }
LABEL_170:
        uint64_t v97 = swift_once();
        goto LABEL_142;
      }
      uint64_t v94 = v47;
      if (v120 != 1)
      {
        if (v2 == 1) {
          goto LABEL_148;
        }
        goto LABEL_141;
      }
      if (v2 != 2) {
        goto LABEL_141;
      }
LABEL_148:
      swift_bridgeObjectRetain();
      sub_10002F064(v94, v14);
      char v106 = v118;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v106 = sub_10006FFD8((uint64_t)v118);
      }
      if (v6 >= *((void *)v106 + 2))
      {
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
      }
      char v107 = &v106[v5];
      uint64_t v108 = *(void *)&v106[v5 + 48];
      unint64_t v109 = *(void *)&v106[v5 + 56];
      *((void *)v107 + 4) = v11;
      *((void *)v107 + 5) = v10;
      *((void *)v107 + 6) = v47;
      *((void *)v107 + 7) = v14;
      v107[64] = v2;
      swift_bridgeObjectRelease();
      sub_10002404C(v108, v109);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002404C(v47, v14);
      *long long v114 = v106;
      return v91 & 1;
    case 2uLL:
      uint64_t v25 = *(void *)(v15 + 16);
      uint64_t v24 = *(void *)(v15 + 24);
      BOOL v26 = __OFSUB__(v24, v25);
      uint64_t v23 = v24 - v25;
      if (!v26) {
        goto LABEL_24;
      }
      goto LABEL_156;
    case 3uLL:
      if (v16) {
        goto LABEL_36;
      }
      goto LABEL_136;
    default:
      uint64_t v23 = BYTE6(v2);
      goto LABEL_24;
  }
}

unint64_t sub_10006CCA0(uint64_t a1)
{
  unint64_t result = 0xD00000000000001DLL;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 32;
    do
    {
      long long v5 = *(_OWORD *)(a1 + v4 + 16);
      v9[0] = *(_OWORD *)(a1 + v4);
      v9[1] = v5;
      char v10 = *(unsigned char *)(a1 + v4 + 32);
      sub_100073C70((uint64_t)v9);
      v8._uint64_t countAndFlagsBits = ApprovalDBEntry.description.getter();
      v8._int64_t object = v6;
      v7._uint64_t countAndFlagsBits = 10;
      v7._int64_t object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      sub_100073D08((uint64_t)v9);
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return 0xD00000000000001DLL;
  }
  return result;
}

uint64_t sub_10006CD78()
{
  if (*v0) {
    return 0x6E6F6973726576;
  }
  else {
    return 12406;
  }
}

uint64_t sub_10006CDA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100074004(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006CDD0(uint64_t a1)
{
  unint64_t v2 = sub_100073DAC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006CE0C(uint64_t a1)
{
  unint64_t v2 = sub_100073DAC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ApprovalDB.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100004700(&qword_10017D468);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000036B0(a1, a1[3]);
  sub_100073DAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = a2;
  v10[15] = 0;
  sub_100073E00();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ApprovalDB.init(from:)(void *a1)
{
  return sub_1000740E0(a1);
}

uint64_t sub_10006CFE0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000740E0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10006D00C(void *a1)
{
  return ApprovalDB.encode(to:)(a1, *v1);
}

uint64_t sub_10006D02C(uint64_t *a1, uint64_t *a2)
{
  return _s10driverkitd10ApprovalDBV2eeoiySbAC_ACtFZ_0(*a1, a1[1], *a2);
}

uint64_t sub_10006D040(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1000742C4();
  uint64_t v3 = Set.init(minimumCapacity:)();
  uint64_t v12 = v3;
  if (v2)
  {
    uint64_t v4 = 32;
    do
    {
      long long v5 = *(_OWORD *)(a1 + v4 + 48);
      v13[2] = *(_OWORD *)(a1 + v4 + 32);
      v13[3] = v5;
      char v14 = *(unsigned char *)(a1 + v4 + 64);
      long long v6 = *(_OWORD *)(a1 + v4 + 16);
      v13[0] = *(_OWORD *)(a1 + v4);
      v13[1] = v6;
      sub_100074318((uint64_t)v13);
      sub_10006FFEC((uint64_t)v11, (uint64_t)v13);
      uint64_t v7 = v11[6];
      unint64_t v8 = v11[7];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002404C(v7, v8);
      v4 += 72;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    return v12;
  }
  else
  {
    uint64_t v9 = v3;
    swift_bridgeObjectRelease();
  }
  return v9;
}

Swift::Int sub_10006D138()
{
  return Hasher._finalize()();
}

Swift::Int sub_10006D17C()
{
  return Hasher._finalize()();
}

uint64_t sub_10006D1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73656972746E65 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10006D254(uint64_t a1)
{
  unint64_t v2 = sub_10007437C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D290(uint64_t a1)
{
  unint64_t v2 = sub_10007437C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ApprovalSettingsState.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017D478);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_10007437C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_100004700(&qword_10017D480);
  sub_100076968(&qword_10017D488, &qword_10017D480, (void (*)(void))sub_1000743D0);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *ApprovalSettingsState.init(from:)(void *a1)
{
  return sub_100074424(a1);
}

void *sub_10006D46C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100074424(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10006D498(void *a1)
{
  return ApprovalSettingsState.encode(to:)(a1, *v1);
}

uint64_t sub_10006D4B8(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v2 = 0;
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v147 = a2 + 56;
  uint64_t v122 = a1 + 56;
  uint64_t v123 = a1;
  int64_t v121 = v7;
  if (!v6) {
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v124 = (v6 - 1) & v6;
  int64_t v125 = v2;
  unint64_t v8 = __clz(__rbit64(v6)) | (v2 << 6);
LABEL_24:
  uint64_t v13 = *(void *)(a1 + 48) + 72 * v8;
  long long v155 = *(_OWORD *)v13;
  long long v15 = *(_OWORD *)(v13 + 32);
  long long v14 = *(_OWORD *)(v13 + 48);
  long long v16 = *(_OWORD *)(v13 + 16);
  unsigned __int8 v159 = *(unsigned char *)(v13 + 64);
  long long v158 = v14;
  long long v156 = v16;
  long long v157 = v15;
  Hasher.init(_seed:)();
  sub_100074318((uint64_t)&v155);
  ApprovalSettingsStateEntry.hash(into:)();
  Swift::Int v17 = Hasher._finalize()();
  uint64_t v18 = a2;
  uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v20 = v17 & ~v19;
  if ((*(void *)(v147 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20))
  {
    uint64_t v145 = ~v19;
    long long v21 = v155;
    do
    {
      uint64_t v22 = *(void *)(v18 + 48) + 72 * v20;
      uint64_t v23 = *(void *)(v22 + 16);
      uint64_t v24 = *(void *)(v22 + 24);
      uint64_t v25 = *(void *)(v22 + 32);
      uint64_t v26 = *(void *)(v22 + 40);
      uint64_t v28 = *(void *)(v22 + 48);
      unint64_t v27 = *(void *)(v22 + 56);
      int v146 = *(unsigned __int8 *)(v22 + 64);
      if (*(void *)v22 != (void)v21 || *(void *)(v22 + 8) != *((void *)&v21 + 1))
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v18 = a2;
        if ((v30 & 1) == 0) {
          goto LABEL_27;
        }
      }
      if (v24)
      {
        if (!*((void *)&v156 + 1)) {
          goto LABEL_27;
        }
        if (v23 != (void)v156 || v24 != *((void *)&v156 + 1))
        {
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v18 = a2;
          if ((v32 & 1) == 0) {
            goto LABEL_27;
          }
        }
      }
      else if (*((void *)&v156 + 1))
      {
        goto LABEL_27;
      }
      if (v26)
      {
        if (!*((void *)&v157 + 1)) {
          goto LABEL_27;
        }
        if (v25 != (void)v157 || v26 != *((void *)&v157 + 1))
        {
          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v18 = a2;
          if ((v34 & 1) == 0) {
            goto LABEL_27;
          }
        }
      }
      else if (*((void *)&v157 + 1))
      {
        goto LABEL_27;
      }
      sub_1000735A0(&v158, &v160);
      if (v27 >> 60 == 15)
      {
        sub_1000735A0(&v160, &v162);
        uint64_t v18 = a2;
        if (*((void *)&v162 + 1) >> 60 != 15) {
          goto LABEL_27;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10002F064(v28, v27);
      }
      else
      {
        sub_1000735A0(&v160, &v161);
        unint64_t v36 = *((void *)&v161 + 1);
        uint64_t v18 = a2;
        if (*((void *)&v161 + 1) >> 60 == 15) {
          goto LABEL_27;
        }
        uint64_t v37 = v161;
        unint64_t v38 = v27 >> 62;
        uint64_t v39 = 0;
        switch(v27 >> 62)
        {
          case 1uLL:
            unint64_t v126 = v27 >> 62;
            long long v132 = (void *)*((void *)&v161 + 1);
            if (__OFSUB__(HIDWORD(v28), v28)) {
              goto LABEL_180;
            }
            uint64_t v40 = v161;
            uint64_t v39 = HIDWORD(v28) - (int)v28;
            break;
          case 2uLL:
            unint64_t v126 = v27 >> 62;
            long long v132 = (void *)*((void *)&v161 + 1);
            uint64_t v42 = *(void *)(v28 + 16);
            uint64_t v41 = *(void *)(v28 + 24);
            uint64_t v39 = v41 - v42;
            if (__OFSUB__(v41, v42)) {
              goto LABEL_181;
            }
            uint64_t v40 = v161;
            break;
          case 3uLL:
            goto LABEL_62;
          default:
            uint64_t v39 = BYTE6(v27);
            goto LABEL_62;
        }
        sub_100012DE4(v28, v27);
        uint64_t v37 = v40;
        LODWORD(v38) = v126;
        unint64_t v36 = (unint64_t)v132;
LABEL_62:
        unint64_t v43 = v36 >> 62;
        switch(v36 >> 62)
        {
          case 1uLL:
            LODWORD(v44) = HIDWORD(v37) - v37;
            if (__OFSUB__(HIDWORD(v37), v37)) {
              goto LABEL_182;
            }
            uint64_t v44 = (int)v44;
LABEL_67:
            if (v39 != v44) {
              goto LABEL_173;
            }
            if (v39 < 1)
            {
LABEL_78:
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_10002F064(v28, v27);
              sub_10002404C(v28, v27);
            }
            else
            {
              switch((int)v38)
              {
                case 1:
                  unint64_t v115 = v36 >> 62;
                  uint64_t v128 = v37;
                  long long v134 = (void *)v36;
                  if ((int)v28 > v28 >> 32) {
                    goto LABEL_184;
                  }
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10002F064(v28, v27);
                  sub_10002F064(v28, v27);
                  sub_100073D4C((uint64_t)&v160);
                  uint64_t v51 = __DataStorage._bytes.getter();
                  if (v51)
                  {
                    uint64_t v52 = v51;
                    uint64_t v53 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v28, v53)) {
                      goto LABEL_187;
                    }
                    uint64_t v54 = (const void *)(v52 + (int)v28 - v53);
                  }
                  else
                  {
                    uint64_t v54 = 0;
                  }
                  __DataStorage._length.getter();
                  if (!v115)
                  {
                    *(void *)long long __s1 = v128;
                    *(_DWORD *)&__s1[8] = v134;
                    *(_WORD *)&__s1[12] = WORD2(v134);
                    if (!v54) {
                      goto LABEL_207;
                    }
                    int v64 = memcmp(v54, __s1, BYTE6(v134));
LABEL_169:
                    sub_10002404C(v28, v27);
                    goto LABEL_170;
                  }
                  long long v112 = (void *)v54;
                  uint64_t v71 = v128;
                  if (v115 == 1)
                  {
                    uint64_t v72 = (int)v128;
                    uint64_t v131 = (v128 >> 32) - (int)v128;
                    if (v71 >> 32 < (int)v71) {
                      goto LABEL_196;
                    }
                    swift_retain();
                    uint64_t v73 = __DataStorage._bytes.getter();
                    if (v73)
                    {
                      uint64_t v137 = (char *)v73;
                      uint64_t v74 = __DataStorage._offset.getter();
                      if (__OFSUB__(v72, v74)) {
                        goto LABEL_203;
                      }
                      size_t v75 = &v137[v72 - v74];
                    }
                    else
                    {
                      size_t v75 = 0;
                    }
                    uint64_t v107 = __DataStorage._length.getter();
                    size_t v108 = v131;
                    if (v107 < v131) {
                      size_t v108 = v107;
                    }
                    if (!v112) {
                      goto LABEL_216;
                    }
                    if (!v75) {
                      goto LABEL_217;
                    }
                    int v64 = memcmp(v112, v75, v108);
                    sub_100073D7C((uint64_t)&v160);
                    goto LABEL_169;
                  }
                  unint64_t v141 = *(char **)(v128 + 16);
                  uint64_t v120 = *(void *)(v128 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v90 = __DataStorage._bytes.getter();
                  if (v90)
                  {
                    uint64_t v91 = v90;
                    uint64_t v92 = __DataStorage._offset.getter();
                    unsigned int v93 = v141;
                    if (__OFSUB__(v141, v92)) {
                      goto LABEL_201;
                    }
                    uint64_t v94 = &v141[v91 - v92];
                  }
                  else
                  {
                    uint64_t v94 = 0;
                    unsigned int v93 = v141;
                  }
                  uint64_t v143 = v94;
                  int64_t v104 = v120 - (void)v93;
                  if (__OFSUB__(v120, v93)) {
                    goto LABEL_197;
                  }
                  uint64_t v105 = __DataStorage._length.getter();
                  if (v105 >= v104) {
                    size_t v106 = v104;
                  }
                  else {
                    size_t v106 = v105;
                  }
                  if (!v112) {
                    goto LABEL_214;
                  }
                  if (!v143) {
                    goto LABEL_215;
                  }
                  int v84 = memcmp(v112, v143, v106);
                  swift_release();
                  swift_release();
                  sub_10002404C(v28, v27);
                  goto LABEL_147;
                case 2:
                  unint64_t v116 = v36 >> 62;
                  uint64_t v129 = v37;
                  long long v135 = (void *)v36;
                  int64_t v55 = *(char **)(v28 + 16);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10002F064(v28, v27);
                  sub_100073D4C((uint64_t)&v160);
                  swift_retain();
                  swift_retain();
                  uint64_t v56 = __DataStorage._bytes.getter();
                  if (v56)
                  {
                    long long v110 = v55;
                    uint64_t v57 = v56;
                    uint64_t v58 = __DataStorage._offset.getter();
                    if (__OFSUB__(v110, v58)) {
                      goto LABEL_186;
                    }
                    uint64_t v59 = &v110[v57 - v58];
                  }
                  else
                  {
                    uint64_t v59 = 0;
                  }
                  __DataStorage._length.getter();
                  if (!v116)
                  {
                    *(void *)long long __s1 = v129;
                    *(_DWORD *)&__s1[8] = v135;
                    *(_WORD *)&__s1[12] = WORD2(v135);
                    if (!v59) {
                      goto LABEL_206;
                    }
                    int v84 = memcmp(v59, __s1, BYTE6(v135));
                    swift_release();
                    goto LABEL_146;
                  }
                  uint64_t v111 = v59;
                  uint64_t v66 = v129;
                  if (v116 == 1)
                  {
                    uint64_t v67 = (int)v129;
                    uint64_t v130 = (v129 >> 32) - (int)v129;
                    if (v66 >> 32 < (int)v66) {
                      goto LABEL_190;
                    }
                    swift_retain();
                    uint64_t v68 = __DataStorage._bytes.getter();
                    if (v68)
                    {
                      int v136 = (char *)v68;
                      uint64_t v69 = __DataStorage._offset.getter();
                      if (__OFSUB__(v67, v69)) {
                        goto LABEL_202;
                      }
                      uint64_t v70 = &v136[v67 - v69];
                    }
                    else
                    {
                      uint64_t v70 = 0;
                    }
                    uint64_t v102 = __DataStorage._length.getter();
                    size_t v103 = v130;
                    if (v102 < v130) {
                      size_t v103 = v102;
                    }
                    if (!v111) {
                      goto LABEL_212;
                    }
                    if (!v70) {
                      goto LABEL_213;
                    }
                    int v64 = memcmp(v111, v70, v103);
                    sub_100073D7C((uint64_t)&v160);
                    swift_release();
                    swift_release();
                    goto LABEL_170;
                  }
                  unint64_t v140 = *(char **)(v129 + 16);
                  uint64_t v119 = *(void *)(v129 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v85 = __DataStorage._bytes.getter();
                  if (v85)
                  {
                    uint64_t v86 = v85;
                    uint64_t v87 = __DataStorage._offset.getter();
                    unint64_t v88 = v140;
                    if (__OFSUB__(v140, v87)) {
                      goto LABEL_200;
                    }
                    Swift::String v89 = &v140[v86 - v87];
                  }
                  else
                  {
                    Swift::String v89 = 0;
                    unint64_t v88 = v140;
                  }
                  os_log_t v142 = v89;
                  int64_t v99 = v119 - (void)v88;
                  if (__OFSUB__(v119, v88)) {
                    goto LABEL_195;
                  }
                  uint64_t v100 = __DataStorage._length.getter();
                  if (v100 >= v99) {
                    size_t v101 = v99;
                  }
                  else {
                    size_t v101 = v100;
                  }
                  if (!v111) {
                    goto LABEL_210;
                  }
                  if (!v142) {
                    goto LABEL_211;
                  }
                  int v84 = memcmp(v111, v142, v101);
                  swift_release();
                  swift_release();
                  goto LABEL_145;
                case 3:
                  *(void *)&__s1[6] = 0;
                  *(void *)long long __s1 = 0;
                  if (!v43) {
                    goto LABEL_95;
                  }
                  if (v43 == 1)
                  {
                    uint64_t v60 = (int)v37;
                    if (v37 >> 32 < (int)v37) {
                      goto LABEL_189;
                    }
                    unint64_t v133 = (void *)((v37 >> 32) - (int)v37);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    sub_10002F064(v28, v27);
                    sub_100073D4C((uint64_t)&v160);
                    uint64_t v127 = __DataStorage._bytes.getter();
                    if (!v127) {
                      goto LABEL_205;
                    }
                    uint64_t v61 = __DataStorage._offset.getter();
                    BOOL v47 = __OFSUB__(v60, v61);
                    uint64_t v50 = v60 - v61;
                    if (v47) {
                      goto LABEL_194;
                    }
                    goto LABEL_91;
                  }
                  uint64_t v139 = *(char **)(v37 + 16);
                  uint64_t v118 = *(void *)(v37 + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10002F064(v28, v27);
                  sub_100073D4C((uint64_t)&v160);
                  swift_retain();
                  swift_retain();
                  uint64_t v80 = __DataStorage._bytes.getter();
                  if (v80)
                  {
                    uint64_t v81 = v80;
                    uint64_t v82 = __DataStorage._offset.getter();
                    uint64_t v83 = v139;
                    if (__OFSUB__(v139, v82)) {
                      goto LABEL_199;
                    }
                    long long v114 = &v139[v81 - v82];
                  }
                  else
                  {
                    long long v114 = 0;
                    uint64_t v83 = v139;
                  }
                  int64_t v95 = v118 - (void)v83;
                  if (__OFSUB__(v118, v83)) {
                    goto LABEL_192;
                  }
                  uint64_t v96 = __DataStorage._length.getter();
                  uint64_t v97 = v114;
                  if (!v114) {
                    goto LABEL_209;
                  }
                  goto LABEL_133;
                default:
                  *(void *)long long __s1 = v28;
                  *(_WORD *)&__s1[8] = v27;
                  __s1[10] = BYTE2(v27);
                  __s1[11] = BYTE3(v27);
                  __s1[12] = BYTE4(v27);
                  __s1[13] = BYTE5(v27);
                  if (!v43)
                  {
LABEL_95:
                    uint64_t __s2 = v37;
                    __int16 v149 = v36;
                    char v150 = BYTE2(v36);
                    char v151 = BYTE3(v36);
                    char v152 = BYTE4(v36);
                    size_t v65 = BYTE6(v36);
                    char v153 = BYTE5(v36);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    sub_10002F064(v28, v27);
                    int v64 = memcmp(__s1, &__s2, v65);
LABEL_171:
                    sub_10002404C(v28, v27);
                    if (v64)
                    {
LABEL_172:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
LABEL_173:
                      sub_10002404C(v28, v27);
                      uint64_t v18 = a2;
                      goto LABEL_27;
                    }
                    goto LABEL_52;
                  }
                  if (v43 == 1)
                  {
                    uint64_t v48 = (int)v37;
                    if (v37 >> 32 < (int)v37) {
                      goto LABEL_188;
                    }
                    unint64_t v133 = (void *)((v37 >> 32) - (int)v37);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    sub_10002F064(v28, v27);
                    sub_100073D4C((uint64_t)&v160);
                    uint64_t v127 = __DataStorage._bytes.getter();
                    if (!v127)
                    {
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_205:
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_206:
                      __break(1u);
LABEL_207:
                      __break(1u);
LABEL_208:
                      __break(1u);
LABEL_209:
                      __break(1u);
LABEL_210:
                      __break(1u);
LABEL_211:
                      __break(1u);
LABEL_212:
                      __break(1u);
LABEL_213:
                      __break(1u);
LABEL_214:
                      __break(1u);
LABEL_215:
                      __break(1u);
LABEL_216:
                      __break(1u);
LABEL_217:
                      __break(1u);
                      JUMPOUT(0x10006E348);
                    }
                    uint64_t v49 = __DataStorage._offset.getter();
                    BOOL v47 = __OFSUB__(v48, v49);
                    uint64_t v50 = v48 - v49;
                    if (v47) {
                      goto LABEL_193;
                    }
LABEL_91:
                    uint64_t v62 = __DataStorage._length.getter();
                    if (v62 >= (uint64_t)v133) {
                      size_t v63 = (size_t)v133;
                    }
                    else {
                      size_t v63 = v62;
                    }
                    int v64 = memcmp(__s1, (const void *)(v127 + v50), v63);
LABEL_170:
                    sub_100073D7C((uint64_t)&v160);
                    goto LABEL_171;
                  }
                  unint64_t v138 = *(char **)(v37 + 16);
                  uint64_t v117 = *(void *)(v37 + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10002F064(v28, v27);
                  sub_100073D4C((uint64_t)&v160);
                  swift_retain();
                  swift_retain();
                  uint64_t v76 = __DataStorage._bytes.getter();
                  if (v76)
                  {
                    uint64_t v77 = v76;
                    uint64_t v78 = __DataStorage._offset.getter();
                    unint64_t v79 = v138;
                    if (__OFSUB__(v138, v78)) {
                      goto LABEL_198;
                    }
                    uint64_t v113 = &v138[v77 - v78];
                  }
                  else
                  {
                    uint64_t v113 = 0;
                    unint64_t v79 = v138;
                  }
                  int64_t v95 = v117 - (void)v79;
                  if (__OFSUB__(v117, v79)) {
                    goto LABEL_191;
                  }
                  uint64_t v96 = __DataStorage._length.getter();
                  uint64_t v97 = v113;
                  if (!v113) {
                    goto LABEL_208;
                  }
LABEL_133:
                  if (v96 >= v95) {
                    size_t v98 = v95;
                  }
                  else {
                    size_t v98 = v96;
                  }
                  int v84 = memcmp(__s1, v97, v98);
LABEL_145:
                  swift_release();
LABEL_146:
                  swift_release();
LABEL_147:
                  sub_100073D7C((uint64_t)&v160);
                  sub_10002404C(v28, v27);
                  if (v84) {
                    goto LABEL_172;
                  }
                  break;
              }
            }
            break;
          case 2uLL:
            uint64_t v46 = *(void *)(v37 + 16);
            uint64_t v45 = *(void *)(v37 + 24);
            BOOL v47 = __OFSUB__(v45, v46);
            uint64_t v44 = v45 - v46;
            if (!v47) {
              goto LABEL_67;
            }
            goto LABEL_183;
          case 3uLL:
            if (!v39) {
              goto LABEL_78;
            }
            goto LABEL_173;
          default:
            uint64_t v44 = BYTE6(v36);
            goto LABEL_67;
        }
      }
LABEL_52:
      int v35 = v159;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002404C(v28, v27);
      uint64_t v18 = a2;
      if (v146 == v35)
      {
        sub_100076904((uint64_t)&v155);
        uint64_t v3 = v122;
        a1 = v123;
        int64_t v7 = v121;
        unint64_t v6 = v124;
        int64_t v2 = v125;
        if (v124) {
          goto LABEL_7;
        }
LABEL_8:
        int64_t v9 = v2 + 1;
        if (__OFADD__(v2, 1))
        {
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
        }
        if (v9 >= v7) {
          return 1;
        }
        unint64_t v10 = *(void *)(v3 + 8 * v9);
        int64_t v11 = v2 + 1;
        if (!v10)
        {
          int64_t v11 = v9 + 1;
          if (v9 + 1 >= v7) {
            return 1;
          }
          unint64_t v10 = *(void *)(v3 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v9 + 2;
            if (v9 + 2 >= v7) {
              return 1;
            }
            unint64_t v10 = *(void *)(v3 + 8 * v11);
            if (!v10)
            {
              int64_t v11 = v9 + 3;
              if (v9 + 3 >= v7) {
                return 1;
              }
              unint64_t v10 = *(void *)(v3 + 8 * v11);
              if (!v10)
              {
                int64_t v12 = v9 + 4;
                if (v12 >= v7) {
                  return 1;
                }
                unint64_t v10 = *(void *)(v3 + 8 * v12);
                if (!v10)
                {
                  while (1)
                  {
                    int64_t v11 = v12 + 1;
                    if (__OFADD__(v12, 1)) {
                      goto LABEL_185;
                    }
                    if (v11 >= v7) {
                      return 1;
                    }
                    unint64_t v10 = *(void *)(v3 + 8 * v11);
                    ++v12;
                    if (v10) {
                      goto LABEL_23;
                    }
                  }
                }
                int64_t v11 = v12;
              }
            }
          }
        }
LABEL_23:
        uint64_t v124 = (v10 - 1) & v10;
        int64_t v125 = v11;
        unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
        goto LABEL_24;
      }
LABEL_27:
      unint64_t v20 = (v20 + 1) & v145;
    }
    while (((*(void *)(v147 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0);
  }
  sub_100076904((uint64_t)&v155);
  return 0;
}

uint64_t sub_10006E378(uint64_t *a1, uint64_t *a2)
{
  return sub_10006D4B8(*a1, *a2);
}

unint64_t ApprovalSettingsState.debugDescription.getter(uint64_t a1)
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v46._uint64_t countAndFlagsBits = 0xD000000000000017;
  v46._int64_t object = (void *)0x8000000100147320;
  size_t v63 = *(void **)(a1 + 16);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x73656972746E6520;
  v3._int64_t object = (void *)0xEA00000000000A3ALL;
  String.append(_:)(v3);
  unint64_t v4 = 0xD000000000000017;
  unint64_t v61 = 0xD000000000000017;
  unint64_t v62 = 0x8000000100147320;
  uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = ~v5;
  uint64_t v7 = -v5;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(a1 + 56);
  uint64_t v55 = a1;
  uint64_t v56 = a1 + 56;
  uint64_t v57 = v6;
  uint64_t v58 = 0;
  uint64_t v59 = v9;
  uint64_t v60 = 0;
  swift_bridgeObjectRetain();
  sub_10006E79C((uint64_t)&v46);
  uint64_t v10 = v47;
  if (v47)
  {
    uint64_t countAndFlagsBits = v46._countAndFlagsBits;
    int64_t object = v46._object;
    uint64_t v14 = v48;
    uint64_t v13 = v49;
    uint64_t v15 = v50;
    uint64_t v16 = v51;
    uint64_t v17 = v52;
    unint64_t v18 = v53;
    char v19 = v54;
    do
    {
      size_t v63 = object;
      uint64_t v64 = v10;
      uint64_t v65 = v14;
      uint64_t v66 = v13;
      uint64_t v44 = v15;
      uint64_t v45 = v13;
      uint64_t v67 = v15;
      uint64_t v68 = v16;
      uint64_t v42 = v17;
      uint64_t v43 = v16;
      uint64_t v69 = v17;
      unint64_t v70 = v18;
      unint64_t v41 = v18;
      char v71 = v19;
      v46._uint64_t countAndFlagsBits = 0x207865646E492020;
      v46._int64_t object = (void *)0xE800000000000000;
      v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._uint64_t countAndFlagsBits = 2618;
      v25._int64_t object = (void *)0xE200000000000000;
      String.append(_:)(v25);
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      uint64_t v26 = ApprovalSettingsStateEntry.debugDescription.getter();
      uint64_t v28 = sub_10006EC98(0x7FFFFFFFFFFFFFFFLL, 1, v26, v27);
      int64_t v29 = *((void *)v28 + 2);
      if (v29)
      {
        uint64_t v38 = v14;
        uint64_t v39 = object;
        uint64_t v40 = countAndFlagsBits;
        sub_10000C884(0, v29, 0);
        char v30 = v28 + 56;
        do
        {
          v46._uint64_t countAndFlagsBits = 538976288;
          v46._int64_t object = (void *)0xE400000000000000;
          swift_bridgeObjectRetain();
          v31._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
          String.append(_:)(v31);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v32 = v46._countAndFlagsBits;
          uint64_t v33 = v46._object;
          unint64_t v35 = _swiftEmptyArrayStorage[2];
          unint64_t v34 = _swiftEmptyArrayStorage[3];
          if (v35 >= v34 >> 1) {
            sub_10000C884(v34 > 1, v35 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v35 + 1;
          unint64_t v36 = &_swiftEmptyArrayStorage[2 * v35];
          v36[4] = v32;
          v36[5] = v33;
          v30 += 32;
          --v29;
        }
        while (v29);
        swift_bridgeObjectRelease();
        uint64_t v14 = v38;
        uint64_t countAndFlagsBits = v40;
        int64_t object = v39;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v46._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      sub_100004700((uint64_t *)&unk_10017E5D0);
      sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
      uint64_t v20 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v22 = v21;
      swift_bridgeObjectRelease();
      v46._uint64_t countAndFlagsBits = v20;
      v46._int64_t object = v22;
      swift_bridgeObjectRetain();
      v23._uint64_t countAndFlagsBits = 10;
      v23._int64_t object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      sub_1000745D4(countAndFlagsBits, (uint64_t)object, v10, v14, v45, v44, v43, v42, v41);
      sub_10006E79C((uint64_t)&v46);
      uint64_t countAndFlagsBits = v46._countAndFlagsBits;
      int64_t object = v46._object;
      uint64_t v10 = v47;
      uint64_t v14 = v48;
      uint64_t v13 = v49;
      uint64_t v15 = v50;
      uint64_t v16 = v51;
      uint64_t v17 = v52;
      unint64_t v18 = v53;
      char v19 = v54;
    }
    while (v47);
    unint64_t v4 = v61;
  }
  sub_1000048D8();
  return v4;
}

void sub_10006E79C(uint64_t a1@<X8>)
{
  int64_t v3 = v1[3];
  unint64_t v2 = v1[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
    goto LABEL_3;
  }
  int64_t v17 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
LABEL_27:
    __break(1u);
    return;
  }
  int64_t v18 = (unint64_t)(v1[2] + 64) >> 6;
  if (v17 >= v18) {
    goto LABEL_25;
  }
  uint64_t v19 = v1[1];
  unint64_t v20 = *(void *)(v19 + 8 * v17);
  if (!v20)
  {
    int64_t v21 = v3 + 2;
    int64_t v4 = v3 + 1;
    if (v3 + 2 < v18)
    {
      unint64_t v20 = *(void *)(v19 + 8 * v21);
      if (v20)
      {
LABEL_13:
        int64_t v17 = v21;
        goto LABEL_10;
      }
      int64_t v4 = v3 + 2;
      if (v3 + 3 < v18)
      {
        unint64_t v20 = *(void *)(v19 + 8 * (v3 + 3));
        if (v20)
        {
          int64_t v17 = v3 + 3;
          goto LABEL_10;
        }
        int64_t v21 = v3 + 4;
        int64_t v4 = v3 + 3;
        if (v3 + 4 < v18)
        {
          unint64_t v20 = *(void *)(v19 + 8 * v21);
          if (v20) {
            goto LABEL_13;
          }
          int64_t v17 = v3 + 5;
          int64_t v4 = v3 + 4;
          if (v3 + 5 < v18)
          {
            unint64_t v20 = *(void *)(v19 + 8 * v17);
            if (v20) {
              goto LABEL_10;
            }
            int64_t v4 = v18 - 1;
            int64_t v22 = v3 + 6;
            while (v18 != v22)
            {
              unint64_t v20 = *(void *)(v19 + 8 * v22++);
              if (v20)
              {
                int64_t v17 = v22 - 1;
                goto LABEL_10;
              }
            }
          }
        }
      }
    }
LABEL_25:
    v1[3] = v4;
    v1[4] = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 57) = 0u;
    return;
  }
LABEL_10:
  uint64_t v5 = (v20 - 1) & v20;
  unint64_t v6 = __clz(__rbit64(v20)) + (v17 << 6);
  int64_t v4 = v17;
LABEL_3:
  uint64_t v7 = *(void *)(*v1 + 48) + 72 * v6;
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v10 = *(void *)(v7 + 16);
  long long v11 = *(_OWORD *)(v7 + 24);
  uint64_t v12 = *(void *)(v7 + 40);
  uint64_t v13 = *(void *)(v7 + 48);
  unint64_t v14 = *(void *)(v7 + 56);
  char v15 = *(unsigned char *)(v7 + 64);
  v1[3] = v4;
  v1[4] = v5;
  uint64_t v16 = v1[5];
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  v1[5] = v16 + 1;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  *(_OWORD *)(a1 + 32) = v11;
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v14;
  *(unsigned char *)(a1 + 72) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  sub_10002F064(v13, v14);
}

uint64_t ApprovalSettingsStateEntry.debugDescription.getter()
{
  v32[0] = 0;
  v32[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(83);
  uint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0xD000000000000013;
  v1._int64_t object = (void *)0x8000000100147340;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)v0;
  int64_t v3 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._int64_t object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x79616C707369440ALL;
  v5._int64_t object = (void *)0xEF203A656D614E20;
  String.append(_:)(v5);
  sub_100074640(v0 + 16, (uint64_t)v32);
  sub_100074640((uint64_t)v32, (uint64_t)v31);
  sub_100073520((uint64_t)v32);
  sub_100004700(&qword_10017D498);
  v6._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x542065676173550ALL;
  v7._int64_t object = (void *)0xED0000203A747865;
  String.append(_:)(v7);
  sub_100074640(v0 + 32, (uint64_t)v31);
  sub_100074640((uint64_t)v31, (uint64_t)&v27);
  sub_100073520((uint64_t)v31);
  v8._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x3A656372756F530ALL;
  v9._int64_t object = (void *)0xE900000000000020;
  String.append(_:)(v9);
  uint64_t v10 = *(void *)(v0 + 48);
  unint64_t v11 = *(void *)(v0 + 56);
  if (v11 >> 60 == 15)
  {
    unint64_t v12 = 0xE600000000000000;
    uint64_t v13 = 0x6D6574737973;
  }
  else
  {
    unint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    sub_10002F064(v10, v11);
    sub_100012DE4(v10, v11);
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    unint64_t v27 = 0xD000000000000024;
    unint64_t v28 = 0x8000000100147210;
    v14._uint64_t countAndFlagsBits = sub_100014690(v10, v11);
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    sub_10002404C(v10, v11);
    uint64_t v13 = v27;
    unint64_t v12 = v28;
  }
  unint64_t v15 = v12;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  sub_10002404C(v10, v11);
  v16._int64_t object = (void *)0x8000000100147360;
  v16._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v16);
  char v18 = *(unsigned char *)(v0 + 64);
  if (qword_100183B60 != -1) {
    uint64_t v17 = swift_once();
  }
  __chkstk_darwin(v17);
  v26[16] = v18;
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000729E4(v19, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100076CB8, (uint64_t)v26);
  swift_bridgeObjectRelease();
  int64_t v21 = sub_100068894(v20);
  Swift::String v23 = v22;
  uint64_t result = swift_release();
  if (v23)
  {
    v25._uint64_t countAndFlagsBits = (uint64_t)v21;
    v25._int64_t object = v23;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    return v29;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_10006EC98(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  if (a1 < 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  unint64_t v7 = a4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = _swiftEmptyArrayStorage;
  uint64_t v13 = swift_allocObject();
  Swift::String v6 = (char *)v13;
  *(void *)(v13 + 16) = 15;
  uint64_t v14 = HIBYTE(v7) & 0xF;
  if (!a1 || ((v7 & 0x2000000000000000) != 0 ? (uint64_t v15 = HIBYTE(v7) & 0xF) : (uint64_t v15 = a3 & 0xFFFFFFFFFFFFLL), !v15))
  {
    if ((v7 & 0x2000000000000000) == 0) {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v31 = 7;
    if (((v7 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0) {
      uint64_t v31 = 11;
    }
    sub_10002D188(v31 | (v14 << 16), v13, a2 & 1, v9);
    swift_bridgeObjectRelease();
    uint64_t v32 = *(char **)(v9 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return v32;
  }
  uint64_t v40 = a1;
  unint64_t v44 = 4 * v15;
  uint64_t v45 = (char *)_swiftEmptyArrayStorage;
  unint64_t v16 = 15;
  unint64_t v4 = 15;
  unint64_t v42 = v7;
  uint64_t v43 = v13;
  char v41 = a2;
  do
  {
    uint64_t v17 = String.subscript.getter();
    unint64_t v5 = v18;
    if ((v18 & 0x2000000000000000) != 0) {
      uint64_t v19 = HIBYTE(v18) & 0xF;
    }
    else {
      uint64_t v19 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (!v19)
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      uint64_t v20 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v18 & 0x2000000000000000) == 0 && (v17 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      uint64_t v20 = _decodeScalar(_:startingAt:)();
    }
    uint64_t v8 = v20;
    swift_bridgeObjectRelease();
    if ((v8 - 14) <= 0xFFFFFFFB && (v8 - 8232) >= 2 && v8 != 133)
    {
      unint64_t v16 = String.index(after:)();
      continue;
    }
    if (v4 >> 14 == v16 >> 14 && (a2 & 1) != 0)
    {
      unint64_t v16 = String.index(after:)();
      *((void *)v6 + 2) = v16;
      unint64_t v4 = v16;
      continue;
    }
    if (v16 >> 14 < v4 >> 14) {
      goto LABEL_49;
    }
    uint64_t v21 = v9;
    uint64_t v22 = String.subscript.getter();
    unint64_t v5 = v23;
    uint64_t v25 = v24;
    uint64_t v8 = v26;
    unint64_t v27 = v45;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v27 = sub_10002D298(0, *((void *)v45 + 2) + 1, 1, v45);
    }
    unint64_t v29 = *((void *)v27 + 2);
    unint64_t v28 = *((void *)v27 + 3);
    uint64_t v45 = v27;
    if (v29 >= v28 >> 1) {
      uint64_t v45 = sub_10002D298((char *)(v28 > 1), v29 + 1, 1, v27);
    }
    *((void *)v45 + 2) = v29 + 1;
    unint64_t v30 = &v45[32 * v29];
    *((void *)v30 + 4) = v22;
    *((void *)v30 + 5) = v5;
    *((void *)v30 + 6) = v25;
    *((void *)v30 + 7) = v8;
    uint64_t v9 = v21;
    *(void *)(v21 + 16) = v45;
    unint64_t v7 = v42;
    unint64_t v4 = String.index(after:)();
    Swift::String v6 = (char *)v43;
    *(void *)(v43 + 16) = v4;
    unint64_t v16 = v4;
    a2 = v41;
    if (*((void *)v45 + 2) == v40) {
      break;
    }
  }
  while (v44 != v16 >> 14);
  if (v44 == v4 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = v45;
    goto LABEL_46;
  }
  if (v44 >= v4 >> 14)
  {
    unint64_t v4 = String.subscript.getter();
    unint64_t v5 = v33;
    unint64_t v7 = v34;
    uint64_t v8 = v35;
    swift_bridgeObjectRelease();
    Swift::String v6 = v45;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_52;
    }
    goto LABEL_43;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  Swift::String v6 = sub_10002D298(0, *((void *)v6 + 2) + 1, 1, v6);
LABEL_43:
  unint64_t v37 = *((void *)v6 + 2);
  unint64_t v36 = *((void *)v6 + 3);
  uint64_t v32 = v6;
  if (v37 >= v36 >> 1) {
    uint64_t v32 = sub_10002D298((char *)(v36 > 1), v37 + 1, 1, v6);
  }
  *((void *)v32 + 2) = v37 + 1;
  uint64_t v38 = &v32[32 * v37];
  *((void *)v38 + 4) = v4;
  *((void *)v38 + 5) = v5;
  *((void *)v38 + 6) = v7;
  *((void *)v38 + 7) = v8;
  *(void *)(v9 + 16) = v32;
LABEL_46:
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  return v32;
}

unint64_t sub_10006F100()
{
  return ApprovalSettingsState.debugDescription.getter(*v0);
}

uint64_t ApprovalSettingsStateEntry.driverIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ApprovalSettingsStateEntry.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ApprovalSettingsStateEntry.source.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_10002F064(v1, *(void *)(v0 + 56));
  return v1;
}

uint64_t ApprovalSettingsStateEntry.approvalState.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

unint64_t sub_10006F1A4()
{
  unint64_t result = 0xD000000000000010;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x4E79616C70736964;
      break;
    case 2:
      unint64_t result = 0x7865546567617375;
      break;
    case 3:
      unint64_t result = 0x656372756F73;
      break;
    case 4:
      unint64_t result = 0x6C61766F72707061;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10006F268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000746FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006F290(uint64_t a1)
{
  unint64_t v2 = sub_1000746A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006F2CC(uint64_t a1)
{
  unint64_t v2 = sub_1000746A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006F308@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(unsigned char *)(a9 + 64) = a10;
  return result;
}

uint64_t ApprovalSettingsStateEntry.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004700(&qword_10017D4A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_1000746A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000735A0((_OWORD *)(v3 + 48), &v13);
    sub_1000735A0(&v13, &v12);
    char v11 = 3;
    sub_1000735B0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = *(unsigned char *)(v3 + 64);
    char v11 = 4;
    sub_100073604();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 ApprovalSettingsStateEntry.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100074958(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(unsigned char *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10006F590(void *a1)
{
  return ApprovalSettingsStateEntry.encode(to:)(a1);
}

BOOL sub_10006F5D8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  char v8 = *(unsigned char *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  char v10 = *(unsigned char *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return _s10driverkitd26ApprovalSettingsStateEntryV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v9);
}

void ApprovalSettingsStateEntry.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 24))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 40))
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (*(void *)(v0 + 40)) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
LABEL_6:
  unint64_t v1 = *(void *)(v0 + 56);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 48);
    Hasher._combine(_:)(1uLL);
    sub_100012DE4(v2, v1);
    Data.hash(into:)();
    sub_10002404C(v2, v1);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 64));
}

Swift::Int ApprovalSettingsStateEntry.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_10006F7A4()
{
  return Hasher._finalize()();
}

uint64_t sub_10006F7E0()
{
  return ApprovalSettingsStateEntry.debugDescription.getter();
}

uint64_t ApprovalStateUpdateRequest.__allocating_init(entry:callback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v7;
  *(unsigned char *)(v6 + 48) = *(unsigned char *)(a1 + 32);
  *(void *)(v6 + 56) = a2;
  *(void *)(v6 + 64) = a3;
  static Date.now.getter();
  return v6;
}

uint64_t ApprovalStateUpdateRequest.init(entry:callback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 32) = v11;
  *(unsigned char *)(v3 + 48) = *(unsigned char *)(a1 + 32);
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 64) = a3;
  static Date.now.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v3 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp, v10, v7);
  return v3;
}

uint64_t ApprovalStateUpdateRequest.deinit()
{
  uint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  swift_bridgeObjectRelease();
  sub_10002404C(v1, v2);
  swift_release();
  uint64_t v3 = v0 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp;
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t ApprovalStateUpdateRequest.__deallocating_deinit()
{
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  swift_bridgeObjectRelease();
  sub_10002404C(v1, v2);
  swift_release();
  uint64_t v3 = (char *)v0 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp;
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = *(unsigned int *)(*v0 + 48);
  uint64_t v6 = *(unsigned __int16 *)(*v0 + 52);

  return _swift_deallocClassInstance(v0, v5, v6);
}

unint64_t ApprovalStateUpdateRequest.description.getter()
{
  *(void *)&v6[0] = 0;
  *((void *)&v6[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  type metadata accessor for Date();
  sub_100074DB8();
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 8250;
  v2._int64_t object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  long long v3 = *(_OWORD *)(v0 + 32);
  v6[0] = *(_OWORD *)(v0 + 16);
  v6[1] = v3;
  char v7 = *(unsigned char *)(v0 + 48);
  sub_100073C70((uint64_t)v6);
  v4._uint64_t countAndFlagsBits = ApprovalDBEntry.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  sub_100073D08((uint64_t)v6);
  return 0xD000000000000014;
}

unint64_t sub_10006FBD8()
{
  return ApprovalStateUpdateRequest.description.getter();
}

uint64_t sub_10006FC00(uint64_t *a1, uint64_t *a2)
{
  return _s10driverkitd26ApprovalStateUpdateRequestC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

BOOL sub_10006FC0C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return *(unsigned __int8 *)(v3 + 16) == a3;
}

uint64_t sub_10006FC1C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100004700(&qword_10017D628);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v31) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v31) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v31) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v31) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v31) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    char v20 = *(unsigned char *)(*(void *)(v4 + 56) + v13);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    unint64_t v29 = (void *)(*(void *)(v8 + 48) + 16 * v24);
    void *v29 = v19;
    v29[1] = v18;
    *(unsigned char *)(*(void *)(v8 + 56) + v24) = v20;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

char *sub_10006FEC4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017D5F8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10006FFD8(uint64_t a1)
{
  return sub_10006FEC4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10006FFEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  ApprovalSettingsStateEntry.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = v6;
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v7 & ~v9;
  if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_153;
  }
  __int16 v149 = v2;
  uint64_t v150 = a1;
  uint64_t v151 = ~v9;
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v154 = *(void *)a2;
  do
  {
    uint64_t v12 = *(void *)(v8 + 48) + 72 * v10;
    uint64_t v14 = *(void *)(v12 + 16);
    uint64_t v13 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v12 + 32);
    uint64_t v16 = *(void *)(v12 + 40);
    unint64_t v17 = *(void *)(v12 + 56);
    uint64_t v153 = *(void *)(v12 + 48);
    int v152 = *(unsigned __int8 *)(v12 + 64);
    BOOL v18 = *(void *)v12 == v154 && *(void *)(v12 + 8) == v11;
    if (v18 || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t v8 = v6, (v19 & 1) != 0))
    {
      uint64_t v20 = *(void *)(a2 + 24);
      if (v13)
      {
        if (!v20) {
          goto LABEL_4;
        }
        if (v14 != *(void *)(a2 + 16) || v13 != v20)
        {
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v8 = v6;
          if ((v22 & 1) == 0) {
            goto LABEL_4;
          }
        }
      }
      else if (v20)
      {
        goto LABEL_4;
      }
      uint64_t v23 = *(void *)(a2 + 40);
      if (v16)
      {
        if (!v23) {
          goto LABEL_4;
        }
        if (v15 != *(void *)(a2 + 32) || v16 != v23)
        {
          char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v8 = v6;
          if ((v25 & 1) == 0) {
            goto LABEL_4;
          }
        }
      }
      else if (v23)
      {
        goto LABEL_4;
      }
      sub_1000735A0((_OWORD *)(a2 + 48), &v163);
      if (v17 >> 60 == 15)
      {
        sub_1000735A0(&v163, &v162);
        uint64_t v8 = v6;
        if (*((void *)&v162 + 1) >> 60 == 15)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v26 = v153;
          sub_10002F064(v153, v17);
LABEL_29:
          int v27 = *(unsigned __int8 *)(a2 + 64);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10002404C(v26, v17);
          uint64_t v8 = v6;
          if (v152 == v27)
          {
            swift_bridgeObjectRelease();
            sub_100076904(a2);
            uint64_t v106 = *(void *)(*v149 + 48) + 72 * v10;
            uint64_t v107 = *(void *)(v106 + 8);
            uint64_t v108 = *(void *)(v106 + 16);
            uint64_t v109 = *(void *)(v106 + 40);
            uint64_t v110 = *(void *)(v106 + 48);
            unint64_t v111 = *(void *)(v106 + 56);
            char v112 = *(unsigned char *)(v106 + 64);
            *(void *)uint64_t v150 = *(void *)v106;
            *(void *)(v150 + 8) = v107;
            *(void *)(v150 + 16) = v108;
            *(_OWORD *)(v150 + 24) = *(_OWORD *)(v106 + 24);
            *(void *)(v150 + 40) = v109;
            *(void *)(v150 + 48) = v110;
            *(void *)(v150 + 56) = v111;
            *(unsigned char *)(v150 + 64) = v112;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_10002F064(v110, v111);
            return 0;
          }
        }
      }
      else
      {
        sub_1000735A0(&v163, &v164);
        unint64_t v28 = *((void *)&v164 + 1);
        uint64_t v8 = v6;
        if (*((void *)&v164 + 1) >> 60 != 15)
        {
          uint64_t v29 = v164;
          unint64_t v30 = v17 >> 62;
          uint64_t v31 = 0;
          unint64_t v32 = v17;
          uint64_t v33 = v153;
          switch(v17 >> 62)
          {
            case 1uLL:
              unint64_t v129 = v17 >> 62;
              long long v135 = (void *)*((void *)&v164 + 1);
              if (__OFSUB__(HIDWORD(v153), v153))
              {
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
LABEL_170:
                __break(1u);
LABEL_171:
                __break(1u);
LABEL_172:
                __break(1u);
LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
LABEL_175:
                __break(1u);
LABEL_176:
                __break(1u);
              }
              uint64_t v34 = v164;
              uint64_t v31 = HIDWORD(v153) - (int)v153;
LABEL_38:
              sub_100012DE4(v153, v17);
              uint64_t v33 = v153;
              unint64_t v32 = v17;
              uint64_t v29 = v34;
              LODWORD(v30) = v129;
              unint64_t v28 = (unint64_t)v135;
              break;
            case 2uLL:
              unint64_t v129 = v17 >> 62;
              long long v135 = (void *)*((void *)&v164 + 1);
              uint64_t v36 = *(void *)(v153 + 16);
              uint64_t v35 = *(void *)(v153 + 24);
              uint64_t v31 = v35 - v36;
              if (__OFSUB__(v35, v36)) {
                goto LABEL_155;
              }
              uint64_t v34 = v164;
              goto LABEL_38;
            case 3uLL:
              break;
            default:
              uint64_t v31 = BYTE6(v17);
              break;
          }
          unint64_t v37 = v28 >> 62;
          switch(v28 >> 62)
          {
            case 1uLL:
              LODWORD(v38) = HIDWORD(v29) - v29;
              if (__OFSUB__(HIDWORD(v29), v29)) {
                goto LABEL_156;
              }
              uint64_t v38 = (int)v38;
LABEL_44:
              if (v31 != v38) {
                goto LABEL_150;
              }
              if (v31 < 1)
              {
LABEL_55:
                uint64_t v26 = v33;
                unint64_t v17 = v32;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                sub_10002F064(v26, v17);
                sub_10002404C(v26, v17);
                goto LABEL_29;
              }
              switch((int)v30)
              {
                case 1:
                  unint64_t v123 = v28 >> 62;
                  uint64_t v131 = v29;
                  uint64_t v137 = (void *)v28;
                  uint64_t v118 = (void *)(int)v33;
                  if ((int)v33 > v33 >> 32) {
                    goto LABEL_158;
                  }
                  uint64_t v45 = v33;
                  unint64_t v46 = v32;
                  unint64_t v120 = v32;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10002F064(v45, v46);
                  sub_10002F064(v45, v120);
                  sub_100073D4C((uint64_t)&v163);
                  uint64_t v47 = __DataStorage._bytes.getter();
                  if (v47)
                  {
                    uint64_t v114 = v47;
                    uint64_t v48 = __DataStorage._offset.getter();
                    if (__OFSUB__(v118, v48)) {
                      goto LABEL_160;
                    }
                    uint64_t v119 = (char *)v118 + v114 - v48;
                  }
                  else
                  {
                    uint64_t v119 = 0;
                  }
                  __DataStorage._length.getter();
                  if (!v123)
                  {
                    __s1[0] = v131;
                    LODWORD(__s1[1]) = v137;
                    WORD2(__s1[1]) = WORD2(v137);
                    if (!v119) {
                      goto LABEL_180;
                    }
                    int v58 = memcmp(v119, __s1, BYTE6(v137));
LABEL_146:
                    uint64_t v26 = v153;
                    sub_10002404C(v153, v17);
                    goto LABEL_147;
                  }
                  uint64_t v65 = v131;
                  if (v123 == 1)
                  {
                    uint64_t v66 = (int)v131;
                    uint64_t v134 = (v131 >> 32) - (int)v131;
                    if (v65 >> 32 < (int)v65) {
                      goto LABEL_169;
                    }
                    swift_retain();
                    uint64_t v67 = __DataStorage._bytes.getter();
                    if (v67)
                    {
                      unint64_t v140 = (char *)v67;
                      uint64_t v68 = __DataStorage._offset.getter();
                      if (__OFSUB__(v66, v68)) {
                        goto LABEL_176;
                      }
                      uint64_t v69 = &v140[v66 - v68];
                    }
                    else
                    {
                      uint64_t v69 = 0;
                    }
                    uint64_t v101 = __DataStorage._length.getter();
                    size_t v102 = v134;
                    if (v101 < v134) {
                      size_t v102 = v101;
                    }
                    if (!v119) {
                      goto LABEL_189;
                    }
                    if (!v69) {
                      goto LABEL_190;
                    }
                    int v58 = memcmp(v119, v69, v102);
                    sub_100073D7C((uint64_t)&v163);
                    goto LABEL_146;
                  }
                  uint64_t v145 = *(char **)(v131 + 16);
                  uint64_t v128 = *(void *)(v131 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v85 = __DataStorage._bytes.getter();
                  if (v85)
                  {
                    uint64_t v86 = v85;
                    uint64_t v87 = __DataStorage._offset.getter();
                    unint64_t v88 = v145;
                    if (__OFSUB__(v145, v87)) {
                      goto LABEL_175;
                    }
                    uint64_t v117 = &v145[v86 - v87];
                  }
                  else
                  {
                    uint64_t v117 = 0;
                    unint64_t v88 = v145;
                  }
                  int64_t v98 = v128 - (void)v88;
                  if (__OFSUB__(v128, v88)) {
                    goto LABEL_170;
                  }
                  uint64_t v99 = __DataStorage._length.getter();
                  if (v99 >= v98) {
                    size_t v100 = v98;
                  }
                  else {
                    size_t v100 = v99;
                  }
                  if (!v119) {
                    goto LABEL_187;
                  }
                  if (!v117) {
                    goto LABEL_188;
                  }
                  int v143 = memcmp(v119, v117, v100);
                  swift_release();
                  swift_release();
                  uint64_t v26 = v153;
                  sub_10002404C(v153, v17);
LABEL_137:
                  sub_100073D7C((uint64_t)&v163);
LABEL_138:
                  sub_10002404C(v26, v17);
                  if (!v143) {
                    goto LABEL_29;
                  }
LABEL_149:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v32 = v17;
                  uint64_t v33 = v26;
LABEL_150:
                  sub_10002404C(v33, v32);
                  uint64_t v8 = v6;
                  break;
                case 2:
                  unint64_t v124 = v28 >> 62;
                  uint64_t v132 = v29;
                  unint64_t v138 = (void *)v28;
                  unint64_t v115 = *(char **)(v33 + 16);
                  uint64_t v49 = v33;
                  unint64_t v50 = v32;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10002F064(v49, v50);
                  sub_100073D4C((uint64_t)&v163);
                  swift_retain();
                  swift_retain();
                  uint64_t v51 = __DataStorage._bytes.getter();
                  if (v51)
                  {
                    uint64_t v52 = v51;
                    uint64_t v53 = __DataStorage._offset.getter();
                    if (__OFSUB__(v115, v53)) {
                      goto LABEL_159;
                    }
                    unint64_t v116 = &v115[v52 - v53];
                  }
                  else
                  {
                    unint64_t v116 = 0;
                  }
                  __DataStorage._length.getter();
                  if (!v124)
                  {
                    __s1[0] = v132;
                    LODWORD(__s1[1]) = v138;
                    WORD2(__s1[1]) = WORD2(v138);
                    if (!v116) {
                      goto LABEL_179;
                    }
                    int v143 = memcmp(v116, __s1, BYTE6(v138));
                    swift_release();
                    uint64_t v26 = v153;
LABEL_122:
                    swift_release();
                    goto LABEL_137;
                  }
                  uint64_t v60 = v132;
                  if (v124 != 1)
                  {
                    uint64_t v144 = *(char **)(v132 + 16);
                    uint64_t v127 = *(void *)(v132 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v80 = __DataStorage._bytes.getter();
                    if (v80)
                    {
                      uint64_t v81 = v80;
                      uint64_t v82 = __DataStorage._offset.getter();
                      uint64_t v83 = v144;
                      if (__OFSUB__(v144, v82)) {
                        goto LABEL_173;
                      }
                      int v84 = &v144[v81 - v82];
                    }
                    else
                    {
                      int v84 = 0;
                      uint64_t v83 = v144;
                    }
                    uint64_t v148 = v84;
                    int64_t v93 = v127 - (void)v83;
                    if (__OFSUB__(v127, v83)) {
                      goto LABEL_168;
                    }
                    uint64_t v94 = __DataStorage._length.getter();
                    if (v94 >= v93) {
                      size_t v95 = v93;
                    }
                    else {
                      size_t v95 = v94;
                    }
                    if (!v116) {
                      goto LABEL_183;
                    }
                    if (!v148) {
                      goto LABEL_184;
                    }
                    int v143 = memcmp(v116, v148, v95);
                    swift_release();
                    uint64_t v26 = v153;
                    swift_release();
                    swift_release();
                    goto LABEL_122;
                  }
                  uint64_t v61 = (int)v132;
                  uint64_t v133 = (v132 >> 32) - (int)v132;
                  if (v60 >> 32 < (int)v60) {
                    goto LABEL_163;
                  }
                  swift_retain();
                  uint64_t v62 = __DataStorage._bytes.getter();
                  if (v62)
                  {
                    uint64_t v139 = (char *)v62;
                    uint64_t v63 = __DataStorage._offset.getter();
                    if (__OFSUB__(v61, v63)) {
                      goto LABEL_174;
                    }
                    uint64_t v64 = &v139[v61 - v63];
                  }
                  else
                  {
                    uint64_t v64 = 0;
                  }
                  uint64_t v96 = __DataStorage._length.getter();
                  size_t v97 = v133;
                  if (v96 < v133) {
                    size_t v97 = v96;
                  }
                  if (!v116) {
                    goto LABEL_185;
                  }
                  if (!v64) {
                    goto LABEL_186;
                  }
                  int v58 = memcmp(v116, v64, v97);
                  sub_100073D7C((uint64_t)&v163);
                  swift_release();
                  uint64_t v26 = v153;
                  swift_release();
LABEL_147:
                  sub_100073D7C((uint64_t)&v163);
LABEL_148:
                  sub_10002404C(v26, v17);
                  if (v58) {
                    goto LABEL_149;
                  }
                  goto LABEL_29;
                case 3:
                  memset(__s1, 0, 14);
                  if (!v37) {
                    goto LABEL_72;
                  }
                  if (v37 == 1)
                  {
                    uint64_t v54 = (int)v29;
                    if (v29 >> 32 < (int)v29) {
                      goto LABEL_162;
                    }
                    int v136 = (void *)((v29 >> 32) - (int)v29);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    sub_10002F064(v153, v17);
                    sub_100073D4C((uint64_t)&v163);
                    uint64_t v130 = __DataStorage._bytes.getter();
                    if (!v130) {
                      goto LABEL_178;
                    }
                    uint64_t v55 = __DataStorage._offset.getter();
                    BOOL v41 = __OFSUB__(v54, v55);
                    uint64_t v44 = v54 - v55;
                    if (v41) {
                      goto LABEL_167;
                    }
                    goto LABEL_68;
                  }
                  os_log_t v142 = *(char **)(v29 + 16);
                  unint64_t v122 = v32;
                  uint64_t v126 = *(void *)(v29 + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10002F064(v153, v122);
                  sub_100073D4C((uint64_t)&v163);
                  swift_retain();
                  swift_retain();
                  uint64_t v75 = __DataStorage._bytes.getter();
                  if (v75)
                  {
                    uint64_t v76 = v75;
                    uint64_t v77 = __DataStorage._offset.getter();
                    uint64_t v78 = v142;
                    if (__OFSUB__(v142, v77)) {
                      goto LABEL_172;
                    }
                    unint64_t v79 = &v142[v76 - v77];
                  }
                  else
                  {
                    unint64_t v79 = 0;
                    uint64_t v78 = v142;
                  }
                  uint64_t v147 = v79;
                  int64_t v89 = v126 - (void)v78;
                  if (__OFSUB__(v126, v78)) {
                    goto LABEL_165;
                  }
                  uint64_t v90 = __DataStorage._length.getter();
                  uint64_t v91 = v147;
                  if (!v147) {
                    goto LABEL_182;
                  }
                  goto LABEL_110;
                default:
                  __s1[0] = v33;
                  LOWORD(__s1[1]) = v32;
                  BYTE2(__s1[1]) = BYTE2(v32);
                  BYTE3(__s1[1]) = BYTE3(v32);
                  BYTE4(__s1[1]) = BYTE4(v32);
                  BYTE5(__s1[1]) = BYTE5(v32);
                  if (!v37)
                  {
LABEL_72:
                    uint64_t __s2 = v29;
                    __int16 v156 = v28;
                    char v157 = BYTE2(v28);
                    char v158 = BYTE3(v28);
                    char v159 = BYTE4(v28);
                    size_t v59 = BYTE6(v28);
                    char v160 = BYTE5(v28);
                    uint64_t v26 = v33;
                    unint64_t v17 = v32;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    sub_10002F064(v26, v17);
                    int v58 = memcmp(__s1, &__s2, v59);
                    goto LABEL_148;
                  }
                  if (v37 == 1)
                  {
                    uint64_t v42 = (int)v29;
                    if (v29 >> 32 < (int)v29) {
                      goto LABEL_161;
                    }
                    int v136 = (void *)((v29 >> 32) - (int)v29);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    sub_10002F064(v153, v17);
                    sub_100073D4C((uint64_t)&v163);
                    uint64_t v130 = __DataStorage._bytes.getter();
                    if (!v130)
                    {
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_178:
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_179:
                      __break(1u);
LABEL_180:
                      __break(1u);
LABEL_181:
                      __break(1u);
LABEL_182:
                      __break(1u);
LABEL_183:
                      __break(1u);
LABEL_184:
                      __break(1u);
LABEL_185:
                      __break(1u);
LABEL_186:
                      __break(1u);
LABEL_187:
                      __break(1u);
LABEL_188:
                      __break(1u);
LABEL_189:
                      __break(1u);
LABEL_190:
                      __break(1u);
                      JUMPOUT(0x100070E84);
                    }
                    uint64_t v43 = __DataStorage._offset.getter();
                    BOOL v41 = __OFSUB__(v42, v43);
                    uint64_t v44 = v42 - v43;
                    if (v41) {
                      goto LABEL_166;
                    }
LABEL_68:
                    uint64_t v56 = __DataStorage._length.getter();
                    if (v56 >= (uint64_t)v136) {
                      size_t v57 = (size_t)v136;
                    }
                    else {
                      size_t v57 = v56;
                    }
                    int v58 = memcmp(__s1, (const void *)(v130 + v44), v57);
                    sub_100073D7C((uint64_t)&v163);
                    uint64_t v26 = v153;
                    goto LABEL_148;
                  }
                  unint64_t v141 = *(char **)(v29 + 16);
                  unint64_t v121 = v32;
                  uint64_t v125 = *(void *)(v29 + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10002F064(v153, v121);
                  sub_100073D4C((uint64_t)&v163);
                  swift_retain();
                  swift_retain();
                  uint64_t v70 = __DataStorage._bytes.getter();
                  if (v70)
                  {
                    uint64_t v71 = v70;
                    uint64_t v72 = __DataStorage._offset.getter();
                    uint64_t v73 = v141;
                    if (__OFSUB__(v141, v72)) {
                      goto LABEL_171;
                    }
                    uint64_t v74 = &v141[v71 - v72];
                  }
                  else
                  {
                    uint64_t v74 = 0;
                    uint64_t v73 = v141;
                  }
                  int v146 = v74;
                  int64_t v89 = v125 - (void)v73;
                  if (__OFSUB__(v125, v73)) {
                    goto LABEL_164;
                  }
                  uint64_t v90 = __DataStorage._length.getter();
                  uint64_t v91 = v146;
                  if (!v146) {
                    goto LABEL_181;
                  }
LABEL_110:
                  if (v90 >= v89) {
                    size_t v92 = v89;
                  }
                  else {
                    size_t v92 = v90;
                  }
                  int v143 = memcmp(__s1, v91, v92);
                  swift_release();
                  swift_release();
                  sub_100073D7C((uint64_t)&v163);
                  uint64_t v26 = v153;
                  goto LABEL_138;
              }
              break;
            case 2uLL:
              uint64_t v40 = *(void *)(v29 + 16);
              uint64_t v39 = *(void *)(v29 + 24);
              BOOL v41 = __OFSUB__(v39, v40);
              uint64_t v38 = v39 - v40;
              if (!v41) {
                goto LABEL_44;
              }
              goto LABEL_157;
            case 3uLL:
              if (!v31) {
                goto LABEL_55;
              }
              goto LABEL_150;
            default:
              uint64_t v38 = BYTE6(v28);
              goto LABEL_44;
          }
        }
      }
    }
LABEL_4:
    unint64_t v10 = (v10 + 1) & v151;
  }
  while (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  swift_bridgeObjectRelease();
  uint64_t v3 = v149;
  a1 = v150;
LABEL_153:
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __s1[0] = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_100074318(a2);
  sub_1000712F0(a2, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = __s1[0];
  swift_bridgeObjectRelease();
  long long v104 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v104;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  long long v105 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v105;
  return 1;
}

uint64_t sub_100070EB4()
{
  Swift::String v1 = v0;
  uint64_t v2 = *v0;
  sub_100004700(&qword_10017D5E8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v39 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v37 = v1;
    int64_t v38 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    uint64_t v40 = v2;
    uint64_t v41 = v4;
    while (1)
    {
      if (v7)
      {
        uint64_t v42 = (v7 - 1) & v7;
        int64_t v44 = v10;
        unint64_t v13 = __clz(__rbit64(v7)) | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return result;
        }
        if (v14 >= v38) {
          goto LABEL_42;
        }
        unint64_t v15 = v39[v14];
        int64_t v16 = v10 + 1;
        if (!v15)
        {
          int64_t v16 = v10 + 2;
          if (v10 + 2 >= v38) {
            goto LABEL_42;
          }
          unint64_t v15 = v39[v16];
          if (!v15)
          {
            int64_t v16 = v10 + 3;
            if (v10 + 3 >= v38) {
              goto LABEL_42;
            }
            unint64_t v15 = v39[v16];
            if (!v15)
            {
              uint64_t v17 = v10 + 4;
              if (v10 + 4 >= v38)
              {
LABEL_42:
                swift_release();
                Swift::String v1 = v37;
                uint64_t v36 = 1 << *(unsigned char *)(v2 + 32);
                if (v36 > 63) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v39[v17];
              if (!v15)
              {
                while (1)
                {
                  int64_t v16 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_48;
                  }
                  if (v16 >= v38) {
                    goto LABEL_42;
                  }
                  unint64_t v15 = v39[v16];
                  ++v17;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v16 = v10 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v42 = (v15 - 1) & v15;
        int64_t v44 = v16;
        unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      uint64_t v18 = *(void *)(v2 + 48) + 72 * v13;
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      uint64_t v21 = *(void *)(v18 + 16);
      uint64_t v22 = *(void *)(v18 + 24);
      uint64_t v24 = *(void *)(v18 + 32);
      uint64_t v23 = *(void *)(v18 + 40);
      unint64_t v25 = *(void *)(v18 + 56);
      uint64_t v45 = *(void *)(v18 + 48);
      Swift::UInt v26 = *(unsigned __int8 *)(v18 + 64);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      uint64_t v43 = v19;
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v22)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      Swift::UInt v27 = v26;
      if (v23)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        uint64_t v28 = v24;
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v28 = v24;
      }
      if (v25 >> 60 == 15)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1uLL);
        sub_100012DE4(v45, v25);
        Data.hash(into:)();
        sub_10002404C(v45, v25);
      }
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v4 = v41;
      uint64_t v29 = -1 << *(unsigned char *)(v41 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v8 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v30) & ~*(void *)(v8 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v8 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v11 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v41 + 48) + 72 * v11;
      int64_t v10 = v44;
      *(void *)uint64_t v12 = v43;
      *(void *)(v12 + 8) = v20;
      *(void *)(v12 + 16) = v21;
      *(void *)(v12 + 24) = v22;
      *(void *)(v12 + 32) = v28;
      *(void *)(v12 + 40) = v23;
      *(void *)(v12 + 48) = v45;
      *(void *)(v12 + 56) = v25;
      *(unsigned char *)(v12 + 64) = v27;
      ++*(void *)(v41 + 16);
      uint64_t v2 = v40;
      unint64_t v7 = v42;
    }
  }
  uint64_t result = swift_release();
  *Swift::String v1 = v4;
  return result;
}

Swift::Int sub_1000712F0(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_100070EB4();
    }
    else
    {
      if (v7 > v6)
      {
        uint64_t result = (Swift::Int)sub_10007213C();
        goto LABEL_161;
      }
      sub_100072354();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    ApprovalSettingsStateEntry.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
    a2 = result & ~v9;
    uint64_t v143 = v8 + 56;
    uint64_t v144 = v8;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v141 = ~v9;
      uint64_t v10 = *(void *)v5;
      uint64_t v11 = *(void *)(v5 + 8);
      while (1)
      {
        uint64_t v12 = *(void *)(v144 + 48) + 72 * a2;
        uint64_t result = *(void *)v12;
        uint64_t v14 = *(void *)(v12 + 16);
        uint64_t v13 = *(void *)(v12 + 24);
        uint64_t v15 = *(void *)(v12 + 32);
        uint64_t v16 = *(void *)(v12 + 40);
        unint64_t v17 = *(void *)(v12 + 56);
        uint64_t v145 = *(void *)(v12 + 48);
        int v142 = *(unsigned __int8 *)(v12 + 64);
        if (*(void *)v12 != v10 || *(void *)(v12 + 8) != v11)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            goto LABEL_11;
          }
        }
        uint64_t v19 = *(void *)(v5 + 24);
        if (v13)
        {
          if (!v19) {
            goto LABEL_11;
          }
          if (v14 != *(void *)(v5 + 16) || v13 != v19)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              goto LABEL_11;
            }
          }
        }
        else if (v19)
        {
          goto LABEL_11;
        }
        uint64_t v21 = *(void *)(v5 + 40);
        if (v16)
        {
          if (!v21) {
            goto LABEL_11;
          }
          if (v15 != *(void *)(v5 + 32) || v16 != v21)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              goto LABEL_11;
            }
          }
        }
        else if (v21)
        {
          goto LABEL_11;
        }
        sub_1000735A0((_OWORD *)(v5 + 48), &v154);
        if (v17 >> 60 == 15)
        {
          uint64_t result = (Swift::Int)sub_1000735A0(&v154, &v153);
          if (*((void *)&v153 + 1) >> 60 != 15) {
            goto LABEL_11;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v23 = v145;
          sub_10002F064(v145, v17);
          goto LABEL_36;
        }
        uint64_t result = (Swift::Int)sub_1000735A0(&v154, &v155);
        unint64_t v25 = *((void *)&v155 + 1);
        if (*((void *)&v155 + 1) >> 60 == 15) {
          goto LABEL_11;
        }
        uint64_t v26 = v155;
        unint64_t v27 = v17 >> 62;
        uint64_t v28 = 0;
        unint64_t v29 = v17;
        uint64_t v30 = v145;
        switch(v17 >> 62)
        {
          case 1uLL:
            unint64_t v122 = v17 >> 62;
            uint64_t v128 = (void *)*((void *)&v155 + 1);
            if (__OFSUB__(HIDWORD(v145), v145)) {
              goto LABEL_165;
            }
            uint64_t v31 = v155;
            uint64_t v28 = HIDWORD(v145) - (int)v145;
            break;
          case 2uLL:
            unint64_t v122 = v17 >> 62;
            uint64_t v128 = (void *)*((void *)&v155 + 1);
            uint64_t v33 = *(void *)(v145 + 16);
            uint64_t v32 = *(void *)(v145 + 24);
            uint64_t v28 = v32 - v33;
            if (__OFSUB__(v32, v33)) {
              goto LABEL_164;
            }
            uint64_t v31 = v155;
            break;
          case 3uLL:
            goto LABEL_46;
          default:
            uint64_t v28 = BYTE6(v17);
            goto LABEL_46;
        }
        sub_100012DE4(v145, v17);
        unint64_t v29 = v17;
        uint64_t v30 = v145;
        uint64_t v26 = v31;
        LODWORD(v27) = v122;
        unint64_t v25 = (unint64_t)v128;
LABEL_46:
        unint64_t v34 = v25 >> 62;
        switch(v25 >> 62)
        {
          case 1uLL:
            LODWORD(v35) = HIDWORD(v26) - v26;
            if (__OFSUB__(HIDWORD(v26), v26)) {
              goto LABEL_166;
            }
            uint64_t v35 = (int)v35;
LABEL_55:
            if (v28 != v35) {
              goto LABEL_160;
            }
            if (v28 < 1)
            {
LABEL_65:
              uint64_t v23 = v30;
              unint64_t v17 = v29;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_10002F064(v23, v17);
              sub_10002404C(v23, v17);
            }
            else
            {
              switch((int)v27)
              {
                case 1:
                  unint64_t v116 = v25 >> 62;
                  uint64_t v124 = v26;
                  uint64_t v130 = (void *)v25;
                  uint64_t v109 = (void *)(int)v30;
                  if ((int)v30 > v30 >> 32) {
                    goto LABEL_168;
                  }
                  uint64_t v42 = v30;
                  unint64_t v43 = v29;
                  unint64_t v113 = v29;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10002F064(v42, v43);
                  sub_10002F064(v42, v113);
                  sub_100073D4C((uint64_t)&v154);
                  uint64_t v44 = __DataStorage._bytes.getter();
                  if (v44)
                  {
                    uint64_t v105 = v44;
                    uint64_t v45 = __DataStorage._offset.getter();
                    if (__OFSUB__(v109, v45)) {
                      goto LABEL_170;
                    }
                    uint64_t v110 = (char *)v109 + v105 - v45;
                  }
                  else
                  {
                    uint64_t v110 = 0;
                  }
                  __DataStorage._length.getter();
                  if (!v116)
                  {
                    __s1[0] = v124;
                    LODWORD(__s1[1]) = v130;
                    WORD2(__s1[1]) = WORD2(v130);
                    if (!v110) {
                      goto LABEL_190;
                    }
                    int v55 = memcmp(v110, __s1, BYTE6(v130));
                    goto LABEL_156;
                  }
                  uint64_t v62 = v124;
                  if (v116 == 1)
                  {
                    uint64_t v63 = (int)v124;
                    uint64_t v127 = (v124 >> 32) - (int)v124;
                    if (v62 >> 32 < (int)v62) {
                      goto LABEL_179;
                    }
                    swift_retain();
                    uint64_t v64 = __DataStorage._bytes.getter();
                    if (v64)
                    {
                      uint64_t v133 = (char *)v64;
                      uint64_t v65 = __DataStorage._offset.getter();
                      if (__OFSUB__(v63, v65)) {
                        goto LABEL_186;
                      }
                      uint64_t v66 = &v133[v63 - v65];
                    }
                    else
                    {
                      uint64_t v66 = 0;
                    }
                    uint64_t v96 = __DataStorage._length.getter();
                    size_t v97 = v127;
                    if (v96 < v127) {
                      size_t v97 = v96;
                    }
                    if (!v110) {
                      goto LABEL_199;
                    }
                    if (!v66) {
                      goto LABEL_200;
                    }
                    int v55 = memcmp(v110, v66, v97);
                    sub_100073D7C((uint64_t)&v154);
LABEL_156:
                    uint64_t v23 = v145;
                    sub_10002404C(v145, v17);
LABEL_157:
                    sub_100073D7C((uint64_t)&v154);
                    goto LABEL_158;
                  }
                  unint64_t v138 = *(char **)(v124 + 16);
                  uint64_t v121 = *(void *)(v124 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v80 = __DataStorage._bytes.getter();
                  if (v80)
                  {
                    uint64_t v81 = v80;
                    uint64_t v82 = __DataStorage._offset.getter();
                    uint64_t v83 = v138;
                    if (__OFSUB__(v138, v82)) {
                      goto LABEL_184;
                    }
                    uint64_t v108 = &v138[v81 - v82];
                  }
                  else
                  {
                    uint64_t v108 = 0;
                    uint64_t v83 = v138;
                  }
                  int64_t v93 = v121 - (void)v83;
                  if (__OFSUB__(v121, v83)) {
                    goto LABEL_180;
                  }
                  uint64_t v94 = __DataStorage._length.getter();
                  if (v94 >= v93) {
                    size_t v95 = v93;
                  }
                  else {
                    size_t v95 = v94;
                  }
                  if (!v110) {
                    goto LABEL_197;
                  }
                  if (!v108) {
                    goto LABEL_198;
                  }
                  int v136 = memcmp(v110, v108, v95);
                  swift_release();
                  swift_release();
                  uint64_t v23 = v145;
                  sub_10002404C(v145, v17);
LABEL_147:
                  sub_100073D7C((uint64_t)&v154);
                  break;
                case 2:
                  unint64_t v117 = v25 >> 62;
                  uint64_t v125 = v26;
                  uint64_t v131 = (void *)v25;
                  uint64_t v106 = *(char **)(v30 + 16);
                  uint64_t v46 = v30;
                  unint64_t v47 = v29;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10002F064(v46, v47);
                  sub_100073D4C((uint64_t)&v154);
                  swift_retain();
                  swift_retain();
                  uint64_t v48 = __DataStorage._bytes.getter();
                  if (v48)
                  {
                    uint64_t v49 = v48;
                    uint64_t v50 = __DataStorage._offset.getter();
                    if (__OFSUB__(v106, v50)) {
                      goto LABEL_169;
                    }
                    uint64_t v107 = &v106[v49 - v50];
                  }
                  else
                  {
                    uint64_t v107 = 0;
                  }
                  __DataStorage._length.getter();
                  if (v117)
                  {
                    uint64_t v57 = v125;
                    if (v117 == 1)
                    {
                      uint64_t v58 = (int)v125;
                      uint64_t v126 = (v125 >> 32) - (int)v125;
                      if (v57 >> 32 < (int)v57) {
                        goto LABEL_174;
                      }
                      swift_retain();
                      uint64_t v59 = __DataStorage._bytes.getter();
                      if (v59)
                      {
                        uint64_t v132 = (char *)v59;
                        uint64_t v60 = __DataStorage._offset.getter();
                        if (__OFSUB__(v58, v60)) {
                          goto LABEL_185;
                        }
                        uint64_t v61 = &v132[v58 - v60];
                      }
                      else
                      {
                        uint64_t v61 = 0;
                      }
                      uint64_t v91 = __DataStorage._length.getter();
                      size_t v92 = v126;
                      if (v91 < v126) {
                        size_t v92 = v91;
                      }
                      if (!v107) {
                        goto LABEL_195;
                      }
                      if (!v61) {
                        goto LABEL_196;
                      }
                      int v55 = memcmp(v107, v61, v92);
                      sub_100073D7C((uint64_t)&v154);
                      swift_release();
                      uint64_t v23 = v145;
                      swift_release();
                      goto LABEL_157;
                    }
                    uint64_t v137 = *(char **)(v125 + 16);
                    uint64_t v120 = *(void *)(v125 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v75 = __DataStorage._bytes.getter();
                    if (v75)
                    {
                      uint64_t v76 = v75;
                      uint64_t v77 = __DataStorage._offset.getter();
                      uint64_t v78 = v137;
                      if (__OFSUB__(v137, v77)) {
                        goto LABEL_183;
                      }
                      unint64_t v79 = &v137[v76 - v77];
                    }
                    else
                    {
                      unint64_t v79 = 0;
                      uint64_t v78 = v137;
                    }
                    uint64_t v139 = v79;
                    int64_t v88 = v120 - (void)v78;
                    if (__OFSUB__(v120, v78)) {
                      goto LABEL_178;
                    }
                    uint64_t v89 = __DataStorage._length.getter();
                    if (v89 >= v88) {
                      size_t v90 = v88;
                    }
                    else {
                      size_t v90 = v89;
                    }
                    if (!v107) {
                      goto LABEL_193;
                    }
                    if (!v139) {
                      goto LABEL_194;
                    }
                    int v136 = memcmp(v107, v139, v90);
                    swift_release();
                    uint64_t v23 = v145;
                    swift_release();
                    swift_release();
                  }
                  else
                  {
                    __s1[0] = v125;
                    LODWORD(__s1[1]) = v131;
                    WORD2(__s1[1]) = WORD2(v131);
                    if (!v107) {
                      goto LABEL_189;
                    }
                    int v136 = memcmp(v107, __s1, BYTE6(v131));
                    swift_release();
                    uint64_t v23 = v145;
                  }
                  swift_release();
                  goto LABEL_147;
                case 3:
                  memset(__s1, 0, 14);
                  if (!v34) {
                    goto LABEL_82;
                  }
                  if (v34 == 1)
                  {
                    uint64_t v51 = (int)v26;
                    if (v26 >> 32 < (int)v26) {
                      goto LABEL_171;
                    }
                    unint64_t v129 = (void *)((v26 >> 32) - (int)v26);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    sub_10002F064(v145, v17);
                    sub_100073D4C((uint64_t)&v154);
                    uint64_t v123 = __DataStorage._bytes.getter();
                    if (!v123) {
                      goto LABEL_188;
                    }
                    uint64_t v52 = __DataStorage._offset.getter();
                    BOOL v38 = __OFSUB__(v51, v52);
                    uint64_t v41 = v51 - v52;
                    if (v38) {
                      goto LABEL_176;
                    }
                    goto LABEL_78;
                  }
                  long long v135 = *(char **)(v26 + 16);
                  unint64_t v115 = v29;
                  uint64_t v119 = *(void *)(v26 + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10002F064(v145, v115);
                  sub_100073D4C((uint64_t)&v154);
                  swift_retain();
                  swift_retain();
                  uint64_t v71 = __DataStorage._bytes.getter();
                  if (v71)
                  {
                    uint64_t v72 = v71;
                    uint64_t v73 = __DataStorage._offset.getter();
                    uint64_t v74 = v135;
                    if (__OFSUB__(v135, v73)) {
                      goto LABEL_182;
                    }
                    char v112 = &v135[v72 - v73];
                  }
                  else
                  {
                    char v112 = 0;
                    uint64_t v74 = v135;
                  }
                  int64_t v84 = v119 - (void)v74;
                  if (__OFSUB__(v119, v74)) {
                    goto LABEL_175;
                  }
                  uint64_t v85 = __DataStorage._length.getter();
                  uint64_t v86 = v112;
                  if (!v112) {
                    goto LABEL_192;
                  }
                  goto LABEL_120;
                default:
                  __s1[0] = v30;
                  LOWORD(__s1[1]) = v29;
                  BYTE2(__s1[1]) = BYTE2(v29);
                  BYTE3(__s1[1]) = BYTE3(v29);
                  BYTE4(__s1[1]) = BYTE4(v29);
                  BYTE5(__s1[1]) = BYTE5(v29);
                  if (!v34)
                  {
LABEL_82:
                    uint64_t __s2 = v26;
                    __int16 v147 = v25;
                    char v148 = BYTE2(v25);
                    char v149 = BYTE3(v25);
                    char v150 = BYTE4(v25);
                    size_t v56 = BYTE6(v25);
                    char v151 = BYTE5(v25);
                    uint64_t v23 = v30;
                    unint64_t v17 = v29;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    sub_10002F064(v23, v17);
                    int v55 = memcmp(__s1, &__s2, v56);
                    goto LABEL_158;
                  }
                  if (v34 == 1)
                  {
                    uint64_t v39 = (int)v26;
                    if (v26 >> 32 < (int)v26) {
                      goto LABEL_172;
                    }
                    unint64_t v129 = (void *)((v26 >> 32) - (int)v26);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    sub_10002F064(v145, v17);
                    sub_100073D4C((uint64_t)&v154);
                    uint64_t v123 = __DataStorage._bytes.getter();
                    if (!v123)
                    {
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_188:
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_189:
                      __break(1u);
LABEL_190:
                      __break(1u);
LABEL_191:
                      __break(1u);
LABEL_192:
                      __break(1u);
LABEL_193:
                      __break(1u);
LABEL_194:
                      __break(1u);
LABEL_195:
                      __break(1u);
LABEL_196:
                      __break(1u);
LABEL_197:
                      __break(1u);
LABEL_198:
                      __break(1u);
LABEL_199:
                      __break(1u);
LABEL_200:
                      __break(1u);
LABEL_201:
                      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                      JUMPOUT(0x10007210CLL);
                    }
                    uint64_t v40 = __DataStorage._offset.getter();
                    BOOL v38 = __OFSUB__(v39, v40);
                    uint64_t v41 = v39 - v40;
                    if (v38) {
                      goto LABEL_177;
                    }
LABEL_78:
                    uint64_t v53 = __DataStorage._length.getter();
                    if (v53 >= (uint64_t)v129) {
                      size_t v54 = (size_t)v129;
                    }
                    else {
                      size_t v54 = v53;
                    }
                    int v55 = memcmp(__s1, (const void *)(v123 + v41), v54);
                    sub_100073D7C((uint64_t)&v154);
                    uint64_t v23 = v145;
LABEL_158:
                    sub_10002404C(v23, v17);
                    if (v55)
                    {
LABEL_159:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v30 = v23;
                      unint64_t v29 = v17;
LABEL_160:
                      uint64_t result = sub_10002404C(v30, v29);
                      goto LABEL_11;
                    }
                    goto LABEL_36;
                  }
                  uint64_t v134 = *(char **)(v26 + 16);
                  unint64_t v114 = v29;
                  uint64_t v118 = *(void *)(v26 + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10002F064(v145, v114);
                  sub_100073D4C((uint64_t)&v154);
                  swift_retain();
                  swift_retain();
                  uint64_t v67 = __DataStorage._bytes.getter();
                  if (v67)
                  {
                    uint64_t v68 = v67;
                    uint64_t v69 = __DataStorage._offset.getter();
                    uint64_t v70 = v134;
                    if (__OFSUB__(v134, v69)) {
                      goto LABEL_181;
                    }
                    unint64_t v111 = &v134[v68 - v69];
                  }
                  else
                  {
                    unint64_t v111 = 0;
                    uint64_t v70 = v134;
                  }
                  int64_t v84 = v118 - (void)v70;
                  if (__OFSUB__(v118, v70)) {
                    goto LABEL_173;
                  }
                  uint64_t v85 = __DataStorage._length.getter();
                  uint64_t v86 = v111;
                  if (!v111) {
                    goto LABEL_191;
                  }
LABEL_120:
                  if (v85 >= v84) {
                    size_t v87 = v84;
                  }
                  else {
                    size_t v87 = v85;
                  }
                  int v136 = memcmp(__s1, v86, v87);
                  swift_release();
                  swift_release();
                  sub_100073D7C((uint64_t)&v154);
                  uint64_t v23 = v145;
                  break;
              }
              sub_10002404C(v23, v17);
              if (v136) {
                goto LABEL_159;
              }
            }
LABEL_36:
            int v24 = *(unsigned __int8 *)(v5 + 64);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = sub_10002404C(v23, v17);
            if (v142 == v24) {
              goto LABEL_201;
            }
LABEL_11:
            a2 = (a2 + 1) & v141;
            if (((*(void *)(v143 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              goto LABEL_161;
            }
            break;
          case 2uLL:
            uint64_t v37 = *(void *)(v26 + 16);
            uint64_t v36 = *(void *)(v26 + 24);
            BOOL v38 = __OFSUB__(v36, v37);
            uint64_t v35 = v36 - v37;
            if (!v38) {
              goto LABEL_55;
            }
            goto LABEL_167;
          case 3uLL:
            if (!v28) {
              goto LABEL_65;
            }
            goto LABEL_160;
          default:
            uint64_t v35 = BYTE6(v25);
            goto LABEL_55;
        }
      }
    }
  }
LABEL_161:
  uint64_t v98 = *v140;
  *(void *)(*v140 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v99 = *(void *)(v98 + 48) + 72 * a2;
  *(_OWORD *)uint64_t v99 = *(_OWORD *)v5;
  long long v100 = *(_OWORD *)(v5 + 16);
  long long v101 = *(_OWORD *)(v5 + 32);
  long long v102 = *(_OWORD *)(v5 + 48);
  *(unsigned char *)(v99 + 64) = *(unsigned char *)(v5 + 64);
  *(_OWORD *)(v99 + 32) = v101;
  *(_OWORD *)(v99 + 48) = v102;
  *(_OWORD *)(v99 + 16) = v100;
  uint64_t v103 = *(void *)(v98 + 16);
  BOOL v38 = __OFADD__(v103, 1);
  uint64_t v104 = v103 + 1;
  if (v38)
  {
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
  }
  *(void *)(v98 + 16) = v104;
  return result;
}

void *sub_10007213C()
{
  sub_100004700(&qword_10017D5E8);
  uint64_t v28 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _SetStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v28 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 56);
  uint64_t v5 = v1 + 56;
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 56 + 8 * v6) {
    uint64_t result = memmove(result, (const void *)(v1 + 56), 8 * v6);
  }
  int64_t v8 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v12) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v5 + 8 * v25);
    ++v8;
    if (!v26)
    {
      int64_t v8 = v25 + 1;
      if (v25 + 1 >= v12) {
        goto LABEL_28;
      }
      unint64_t v26 = *(void *)(v5 + 8 * v8);
      if (!v26)
      {
        int64_t v8 = v25 + 2;
        if (v25 + 2 >= v12) {
          goto LABEL_28;
        }
        unint64_t v26 = *(void *)(v5 + 8 * v8);
        if (!v26) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v11 = (v26 - 1) & v26;
    unint64_t v14 = __clz(__rbit64(v26)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = 72 * v14;
    uint64_t v16 = *(void *)(v1 + 48) + v15;
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
    uint64_t v19 = *(void *)(v16 + 40);
    uint64_t v20 = *(void *)(v16 + 48);
    unint64_t v21 = *(void *)(v16 + 56);
    char v22 = *(unsigned char *)(v16 + 64);
    uint64_t v23 = *(void *)(v3 + 48) + v15;
    long long v24 = *(_OWORD *)(v16 + 24);
    *(void *)uint64_t v23 = *(void *)v16;
    *(void *)(v23 + 8) = v17;
    *(void *)(v23 + 16) = v18;
    *(_OWORD *)(v23 + 24) = v24;
    *(void *)(v23 + 40) = v19;
    *(void *)(v23 + 48) = v20;
    *(void *)(v23 + 56) = v21;
    *(unsigned char *)(v23 + 64) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_10002F064(v20, v21);
  }
  int64_t v27 = v25 + 3;
  if (v27 >= v12) {
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v5 + 8 * v27);
  if (v26)
  {
    int64_t v8 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v8 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v5 + 8 * v8);
    ++v27;
    if (v26) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100072354()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100004700(&qword_10017D5E8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_44:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v37 = v1;
  uint64_t v38 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v39 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  uint64_t v40 = v2;
  uint64_t v41 = v4;
  while (1)
  {
    if (v7)
    {
      uint64_t v42 = (v7 - 1) & v7;
      int64_t v44 = v10;
      unint64_t v13 = __clz(__rbit64(v7)) | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v14 >= v39) {
      goto LABEL_42;
    }
    unint64_t v15 = *(void *)(v38 + 8 * v14);
    int64_t v16 = v10 + 1;
    if (!v15)
    {
      int64_t v16 = v10 + 2;
      if (v10 + 2 >= v39) {
        goto LABEL_42;
      }
      unint64_t v15 = *(void *)(v38 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v10 + 3;
        if (v10 + 3 >= v39) {
          goto LABEL_42;
        }
        unint64_t v15 = *(void *)(v38 + 8 * v16);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v42 = (v15 - 1) & v15;
    int64_t v44 = v16;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v2 + 48) + 72 * v13;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    uint64_t v23 = *(void *)(v18 + 40);
    uint64_t v45 = *(void *)(v18 + 32);
    uint64_t v25 = *(void *)(v18 + 48);
    unint64_t v24 = *(void *)(v18 + 56);
    Swift::UInt v26 = *(unsigned __int8 *)(v18 + 64);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_10002F064(v25, v24);
    uint64_t v43 = v19;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v22)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      uint64_t v27 = v21;
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v27 = v21;
      Hasher._combine(_:)(0);
    }
    Swift::UInt v28 = v26;
    if (v23)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      uint64_t v29 = v45;
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v29 = v45;
    }
    if (v24 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      sub_100012DE4(v25, v24);
      Data.hash(into:)();
      sub_10002404C(v25, v24);
    }
    Hasher._combine(_:)(v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v4 = v41;
    uint64_t v30 = -1 << *(unsigned char *)(v41 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v8 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v31) & ~*(void *)(v8 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v8 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v11 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v41 + 48) + 72 * v11;
    int64_t v10 = v44;
    *(void *)uint64_t v12 = v43;
    *(void *)(v12 + 8) = v20;
    *(void *)(v12 + 16) = v27;
    *(void *)(v12 + 24) = v22;
    *(void *)(v12 + 32) = v29;
    *(void *)(v12 + 40) = v23;
    *(void *)(v12 + 48) = v25;
    *(void *)(v12 + 56) = v24;
    *(unsigned char *)(v12 + 64) = v28;
    ++*(void *)(v41 + 16);
    uint64_t v2 = v40;
    unint64_t v7 = v42;
  }
  uint64_t v17 = v10 + 4;
  if (v10 + 4 >= v39)
  {
LABEL_42:
    uint64_t result = swift_release_n();
    uint64_t v1 = v37;
    goto LABEL_44;
  }
  unint64_t v15 = *(void *)(v38 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v39) {
      goto LABEL_42;
    }
    unint64_t v15 = *(void *)(v38 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_46:
  __break(1u);
  return result;
}

unsigned char *sub_100072780(unsigned char *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    *uint64_t result = *(unsigned char *)(*(void *)(a5 + 56) + a2);
    swift_bridgeObjectRetain();
    return (unsigned char *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100072804(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v22 = (unint64_t *)result;
  int64_t v6 = 0;
  uint64_t v24 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v10) {
      return sub_10006FC1C(v22, a2, v23, a3);
    }
    unint64_t v18 = *(void *)(v24 + 8 * v17);
    ++v6;
    if (!v18)
    {
      int64_t v6 = v17 + 1;
      if (v17 + 1 >= v10) {
        return sub_10006FC1C(v22, a2, v23, a3);
      }
      unint64_t v18 = *(void *)(v24 + 8 * v6);
      if (!v18)
      {
        int64_t v6 = v17 + 2;
        if (v17 + 2 >= v10) {
          return sub_10006FC1C(v22, a2, v23, a3);
        }
        unint64_t v18 = *(void *)(v24 + 8 * v6);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v12 = __clz(__rbit64(v18)) + (v6 << 6);
LABEL_5:
    unint64_t v13 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(unsigned __int8 *)(*(void *)(a3 + 56) + v12);
    swift_bridgeObjectRetain();
    LOBYTE(v16) = a4(v14, v15, v16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v16)
    {
      *(unint64_t *)((char *)v22 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v23++, 1))
      {
        __break(1u);
        return sub_10006FC1C(v22, a2, v23, a3);
      }
    }
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v10) {
    return sub_10006FC1C(v22, a2, v23, a3);
  }
  unint64_t v18 = *(void *)(v24 + 8 * v19);
  if (v18)
  {
    int64_t v6 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v6 >= v10) {
      return sub_10006FC1C(v22, a2, v23, a3);
    }
    unint64_t v18 = *(void *)(v24 + 8 * v6);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000729E4(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = sub_100072804((uint64_t)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    unint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = sub_100072804((uint64_t)v11, v8, v6, a2);
    swift_slowDealloc();
  }
  return a3;
}

uint64_t sub_100072B5C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100072B64()
{
  return swift_bridgeObjectRelease();
}

unint64_t sub_100072B6C()
{
  unint64_t result = qword_100183B70;
  if (!qword_100183B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183B70);
  }
  return result;
}

unint64_t sub_100072BC0()
{
  unint64_t result = qword_100183B78;
  if (!qword_100183B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183B78);
  }
  return result;
}

unint64_t sub_100072C14()
{
  unint64_t result = qword_100183B80;
  if (!qword_100183B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183B80);
  }
  return result;
}

uint64_t sub_100072C68(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7261507473726966 && a2 == 0xEA00000000007974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261506472696874 && a2 == 0xEA00000000007974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100072D74(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001BLL && a2 == 0x80000001001473F0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void *sub_100072DFC(void *a1)
{
  uint64_t v2 = sub_100004700(&qword_10017D608);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v23 = v2;
  uint64_t v24 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100004700(&qword_10017D610);
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004700(&qword_10017D618);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  Swift::UInt v26 = a1;
  uint64_t v14 = sub_1000036B0(a1, v13);
  sub_100072B6C();
  uint64_t v15 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    uint64_t v16 = v25;
    uint64_t v28 = v10;
    uint64_t v14 = v12;
    uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v17 + 16) == 1)
    {
      if (*(unsigned char *)(v17 + 32))
      {
        LOBYTE(v27) = 1;
        sub_100072BC0();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        sub_10001CA64();
        uint64_t v18 = v23;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v18);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v9);
        uint64_t v14 = v27;
      }
      else
      {
        LOBYTE(v27) = 0;
        sub_100072C14();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v9);
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v21 = v20;
      sub_100004700(&qword_10017D620);
      *uint64_t v21 = &type metadata for ApprovalDBEntrySource;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, enum case for DecodingError.typeMismatch(_:), v19);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
    }
  }
  sub_10000478C((uint64_t)v26);
  return v14;
}

uint64_t _s10driverkitd10ApprovalDBV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == *(void *)(a3 + 16))
  {
    if (!v3) {
      return 1;
    }
    for (unint64_t i = (unsigned __int8 *)(swift_bridgeObjectRetain() + 64); ; i += 40)
    {
      uint64_t v6 = *((void *)i - 2);
      unint64_t v7 = *((void *)i - 1);
      int v8 = *i;
      uint64_t v9 = *((void *)i - 4);
      uint64_t v10 = *((void *)i - 3);
      swift_bridgeObjectRetain();
      sub_10002F064(v6, v7);
      unsigned __int8 v11 = sub_10006A4CC(v9, v10, v6, v7, a3);
      swift_bridgeObjectRelease();
      if (v11 == 3)
      {
        swift_bridgeObjectRelease();
        sub_10002404C(v6, v7);
        return 0;
      }
      sub_10002404C(v6, v7);
      if (v8 != v11) {
        break;
      }
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
    }
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t _s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    if (a4 >> 60 == 15) {
      return 1;
    }
  }
  else if (a4 >> 60 != 15)
  {
    uint64_t v9 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(a1), a1))
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          JUMPOUT(0x100073500);
        }
        uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_10:
        sub_100012DE4(a1, a2);
LABEL_11:
        switch(a4 >> 62)
        {
          case 1uLL:
            LODWORD(v12) = HIDWORD(a3) - a3;
            if (__OFSUB__(HIDWORD(a3), a3)) {
              goto LABEL_26;
            }
            uint64_t v12 = (int)v12;
LABEL_16:
            if (v9 != v12)
            {
LABEL_21:
              sub_10002404C(a1, a2);
              return 0;
            }
            if (v9 < 1)
            {
LABEL_23:
              sub_10002404C(a1, a2);
              return 1;
            }
            sub_100012DE4(a3, a4);
            char v16 = sub_100022B08(a1, a2, a3, a4);
            sub_10002404C(a1, a2);
            if (v16) {
              return 1;
            }
            break;
          case 2uLL:
            uint64_t v14 = *(void *)(a3 + 16);
            uint64_t v13 = *(void *)(a3 + 24);
            BOOL v15 = __OFSUB__(v13, v14);
            uint64_t v12 = v13 - v14;
            if (!v15) {
              goto LABEL_16;
            }
            goto LABEL_27;
          case 3uLL:
            if (v9) {
              goto LABEL_21;
            }
            goto LABEL_23;
          default:
            uint64_t v12 = BYTE6(a4);
            goto LABEL_16;
        }
        break;
      case 2uLL:
        uint64_t v11 = *(void *)(a1 + 16);
        uint64_t v10 = *(void *)(a1 + 24);
        uint64_t v9 = v10 - v11;
        if (!__OFSUB__(v10, v11)) {
          goto LABEL_10;
        }
        goto LABEL_25;
      case 3uLL:
        goto LABEL_11;
      default:
        uint64_t v9 = BYTE6(a2);
        goto LABEL_11;
    }
  }
  return 0;
}

uint64_t sub_100073520(uint64_t a1)
{
  return a1;
}

unint64_t sub_10007354C()
{
  unint64_t result = qword_100183B88;
  if (!qword_100183B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183B88);
  }
  return result;
}

_OWORD *sub_1000735A0(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

unint64_t sub_1000735B0()
{
  unint64_t result = qword_10017D450;
  if (!qword_10017D450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D450);
  }
  return result;
}

unint64_t sub_100073604()
{
  unint64_t result = qword_10017D458;
  if (!qword_10017D458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D458);
  }
  return result;
}

BOOL _s10driverkitd26ApprovalSettingsStateEntryV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL result = 0;
    if ((v5 & 1) == 0) {
      return result;
    }
  }
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (v8) {
      return 0;
    }
    goto LABEL_15;
  }
  if (!v8) {
    return 0;
  }
  BOOL v9 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && v7 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v10 & 1) != 0))
  {
LABEL_15:
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(a2 + 40);
    if (v11)
    {
      if (v12)
      {
        if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || v11 != v12)
        {
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL result = 0;
          if ((v13 & 1) == 0) {
            return result;
          }
        }
        goto LABEL_22;
      }
    }
    else if (!v12)
    {
LABEL_22:
      if (_s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a2 + 48), *(void *)(a2 + 56)))return *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64); {
    }
      }
    return 0;
  }
  return result;
}

uint64_t _s10driverkitd26ApprovalStateUpdateRequestC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  int v4 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v5 = *(void *)(a2 + 32);
  unint64_t v6 = *(void *)(a2 + 40);
  int v7 = *(unsigned __int8 *)(a2 + 48);
  BOOL v8 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (_s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(v2, v3, v5, v6) & 1) == 0
    || v4 != v7)
  {
    return 0;
  }

  return static Date.== infix(_:_:)();
}

uint64_t sub_100073820(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100147410
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C61766F72707061 && a2 == 0xED00006574617453)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100073990@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004700(&qword_10017D600);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_10007354C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000478C((uint64_t)a1);
  }
  LOBYTE(v20) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v19 = v9;
  char v22 = 1;
  sub_100076814();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v22 = 2;
  unint64_t v17 = v21;
  uint64_t v18 = v20;
  sub_10002F064(v20, v21);
  sub_100076868();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v12 = v20;
  swift_bridgeObjectRetain();
  unint64_t v14 = v17;
  uint64_t v13 = v18;
  sub_10002F064(v18, v17);
  sub_10002404C(v13, v14);
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = sub_10002404C(v13, v14);
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v14;
  *(unsigned char *)(a2 + 32) = v12;
  return result;
}

uint64_t sub_100073C70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  sub_10002F064(v2, v3);
  return a1;
}

unint64_t sub_100073CB4()
{
  unint64_t result = qword_10017D460;
  if (!qword_10017D460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D460);
  }
  return result;
}

uint64_t sub_100073D08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  swift_bridgeObjectRelease();
  sub_10002404C(v2, v3);
  return a1;
}

uint64_t sub_100073D4C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100073D7C(uint64_t a1)
{
  return a1;
}

unint64_t sub_100073DAC()
{
  unint64_t result = qword_100183B90;
  if (!qword_100183B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183B90);
  }
  return result;
}

unint64_t sub_100073E00()
{
  unint64_t result = qword_100183B98;
  if (!qword_100183B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183B98);
  }
  return result;
}

void *sub_100073E54(void *a1)
{
  uint64_t v3 = sub_100004700(&qword_10017D5A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000036B0(a1, a1[3]);
  sub_100076718();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000478C((uint64_t)a1);
  }
  else
  {
    sub_100004700(&qword_10017D588);
    sub_100076968(&qword_10017D5A8, &qword_10017D588, (void (*)(void))sub_1000767C0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    sub_10000478C((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_100074004(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12406 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000740E0(void *a1)
{
  uint64_t v3 = sub_100004700(&qword_10017D5F0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000036B0(a1, v7);
  sub_100073DAC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000478C((uint64_t)a1);
  }
  else
  {
    v9[7] = 0;
    sub_100076A28();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v10;
    v9[6] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_10000478C((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1000742C4()
{
  unint64_t result = qword_10017D470;
  if (!qword_10017D470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D470);
  }
  return result;
}

uint64_t sub_100074318(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10002F064(v2, v3);
  return a1;
}

unint64_t sub_10007437C()
{
  unint64_t result = qword_100183BA0;
  if (!qword_100183BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183BA0);
  }
  return result;
}

unint64_t sub_1000743D0()
{
  unint64_t result = qword_10017D490;
  if (!qword_10017D490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D490);
  }
  return result;
}

void *sub_100074424(void *a1)
{
  uint64_t v3 = sub_100004700(&qword_10017D5D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000036B0(a1, a1[3]);
  sub_10007437C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000478C((uint64_t)a1);
  }
  else
  {
    sub_100004700(&qword_10017D480);
    sub_100076968(&qword_10017D5D8, &qword_10017D480, (void (*)(void))sub_1000769D4);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    sub_10000478C((uint64_t)a1);
  }
  return v7;
}

void sub_1000745D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002404C(a8, a9);
  }
}

uint64_t sub_100074640(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017D498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000746A8()
{
  unint64_t result = qword_100183BA8[0];
  if (!qword_100183BA8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100183BA8);
  }
  return result;
}

uint64_t sub_1000746FC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100147410
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7865546567617375 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C61766F72707061 && a2 == 0xED00006574617453)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100074958@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004700(&qword_10017D5B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_1000746A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000478C((uint64_t)a1);
  }
  LOBYTE(v31) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v29 = v9;
  LOBYTE(v31) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v30 = v13;
  uint64_t v26 = v12;
  LOBYTE(v31) = 2;
  swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v33 = 3;
  uint64_t v15 = v14;
  sub_100076814();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v27 = v15;
  uint64_t v16 = v31;
  char v33 = 4;
  unint64_t v24 = v32;
  sub_10002F064(v31, v32);
  sub_100076868();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v17 = v31;
  swift_bridgeObjectRetain();
  uint64_t v18 = v16;
  uint64_t v19 = v30;
  swift_bridgeObjectRetain();
  uint64_t v20 = v27;
  swift_bridgeObjectRetain();
  unint64_t v21 = v24;
  sub_10002F064(v18, v24);
  sub_10002404C(v18, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_10002404C(v18, v21);
  *(void *)a2 = v29;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v26;
  *(void *)(a2 + 24) = v19;
  *(void *)(a2 + 32) = v25;
  *(void *)(a2 + 40) = v20;
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v21;
  *(unsigned char *)(a2 + 64) = v17;
  return result;
}

unint64_t sub_100074DB8()
{
  unint64_t result = qword_10017EC00;
  if (!qword_10017EC00)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EC00);
  }
  return result;
}

uint64_t sub_100074E14()
{
  return sub_10001348C(&qword_10017D4A8, &qword_10017D4B0);
}

unint64_t sub_100074E54()
{
  unint64_t result = qword_10017D4B8;
  if (!qword_10017D4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D4B8);
  }
  return result;
}

unint64_t sub_100074EAC()
{
  unint64_t result = qword_10017D4C0;
  if (!qword_10017D4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D4C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalState()
{
  return &type metadata for ApprovalState;
}

uint64_t destroy for ApprovalsError()
{
  return sub_100072B64();
}

uint64_t _s10driverkitd14ApprovalsErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_100072B5C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ApprovalsError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_100072B5C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_100072B64();
  return a1;
}

__n128 initializeWithTake for ApprovalsError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ApprovalsError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_100072B64();
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalsError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ApprovalsError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000750B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000750C0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ApprovalsError()
{
  return &type metadata for ApprovalsError;
}

uint64_t *destroy for ApprovalDBEntrySource(uint64_t *result)
{
  unint64_t v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0) {
    return (uint64_t *)sub_100012A10(*result, v1);
  }
  return result;
}

uint64_t _s10driverkitd21ApprovalDBEntrySourceOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *a2;
    sub_100012DE4(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for ApprovalDBEntrySource(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  uint64_t v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v6)
    {
      uint64_t v9 = *a2;
      sub_100012DE4(v9, v5);
      uint64_t v10 = *a1;
      unint64_t v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_100012A10(v10, v11);
      return a1;
    }
    sub_100012A10(*a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  uint64_t v7 = *a2;
  sub_100012DE4(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

__n128 initializeWithTake for CodeSigningHash(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for ApprovalDBEntrySource(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    uint64_t v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      uint64_t v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_100012A10(v7, v4);
      return a1;
    }
    sub_100012A10(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalDBEntrySource(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 12);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  if (v3 + 1 >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ApprovalDBEntrySource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 12;
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_1000752F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 60;
  if (((4 * v1) & 0xC) != 0) {
    return 16 - ((4 * v1) & 0xC | (v1 >> 2));
  }
  else {
    return 0;
  }
}

void *sub_100075320(void *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *__n128 result = a2 - 13;
    result[1] = 0;
  }
  else if (a2)
  {
    *__n128 result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDBEntrySource()
{
  return &type metadata for ApprovalDBEntrySource;
}

uint64_t destroy for ApprovalDBEntry(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    return sub_100012A10(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for ApprovalDBEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (_OWORD *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    uint64_t v7 = *(void *)v5;
    sub_100012DE4(v7, v6);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v6;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for ApprovalDBEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_100012DE4(*v4, *(void *)(a2 + 24));
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v5;
      sub_100012A10(v8, v9);
      goto LABEL_8;
    }
    sub_100075510(a1 + 16);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  sub_100012DE4(*v4, *(void *)(a2 + 24));
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
LABEL_8:
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t sub_100075510(uint64_t a1)
{
  uint64_t v2 = sub_100004700(&qword_10017D4C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 initializeWithTake for ApprovalDBEntry(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ApprovalDBEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  unint64_t v5 = (void *)(a2 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v5;
      *(void *)(a1 + 24) = v7;
      sub_100012A10(v8, v6);
      goto LABEL_6;
    }
    sub_100075510(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
LABEL_6:
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalDBEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApprovalDBEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDBEntry()
{
  return &type metadata for ApprovalDBEntry;
}

void *initializeBufferWithCopyOfBuffer for ApprovalDB(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ApprovalDB()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for ApprovalDB(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for ApprovalDB(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalDB(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApprovalDB(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDB()
{
  return &type metadata for ApprovalDB;
}

ValueMetadata *type metadata accessor for ApprovalSettingsState()
{
  return &type metadata for ApprovalSettingsState;
}

uint64_t destroy for ApprovalSettingsStateEntry(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    return sub_100012A10(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for ApprovalSettingsStateEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  unint64_t v7 = (uint64_t *)(a2 + 48);
  unint64_t v8 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
  }
  else
  {
    uint64_t v9 = *v7;
    sub_100012DE4(*v7, v8);
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v8;
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for ApprovalSettingsStateEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a2 + 48);
  unint64_t v5 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_100012DE4(*v4, *(void *)(a2 + 56));
      uint64_t v8 = *(void *)(a1 + 48);
      unint64_t v9 = *(void *)(a1 + 56);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v5;
      sub_100012A10(v8, v9);
      goto LABEL_8;
    }
    sub_100075510(a1 + 48);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  sub_100012DE4(*v4, *(void *)(a2 + 56));
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v5;
LABEL_8:
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for ApprovalSettingsStateEntry(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ApprovalSettingsStateEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(a2 + 48);
  unint64_t v8 = *(void *)(a1 + 56);
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = *(void *)(a2 + 56);
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = *v7;
      *(void *)(a1 + 56) = v9;
      sub_100012A10(v10, v8);
      goto LABEL_6;
    }
    sub_100075510(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
LABEL_6:
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalSettingsStateEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApprovalSettingsStateEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalSettingsStateEntry()
{
  return &type metadata for ApprovalSettingsStateEntry;
}

uint64_t sub_100075BCC()
{
  return type metadata accessor for ApprovalStateUpdateRequest();
}

uint64_t type metadata accessor for ApprovalStateUpdateRequest()
{
  uint64_t result = qword_100184C30;
  if (!qword_100184C30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100075C20()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ApprovalSettingsStateEntry.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100075D94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalSettingsStateEntry.CodingKeys()
{
  return &type metadata for ApprovalSettingsStateEntry.CodingKeys;
}

ValueMetadata *type metadata accessor for ApprovalSettingsState.CodingKeys()
{
  return &type metadata for ApprovalSettingsState.CodingKeys;
}

ValueMetadata *type metadata accessor for ApprovalDB.V0()
{
  return &type metadata for ApprovalDB.V0;
}

ValueMetadata *type metadata accessor for ApprovalDB.CodingKeys()
{
  return &type metadata for ApprovalDB.CodingKeys;
}

unsigned char *_s10driverkitd13ApprovalStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100075EDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDBEntry.CodingKeys()
{
  return &type metadata for ApprovalDBEntry.CodingKeys;
}

unsigned char *_s10driverkitd10ApprovalDBV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100075FE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDBEntrySource.CodingKeys()
{
  return &type metadata for ApprovalDBEntrySource.CodingKeys;
}

ValueMetadata *type metadata accessor for ApprovalDBEntrySource.FirstPartyCodingKeys()
{
  return &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys;
}

ValueMetadata *type metadata accessor for ApprovalDBEntrySource.ThirdPartyCodingKeys()
{
  return &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys;
}

unint64_t sub_10007603C()
{
  unint64_t result = qword_100184D40[0];
  if (!qword_100184D40[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100184D40);
  }
  return result;
}

unint64_t sub_100076094()
{
  unint64_t result = qword_100185050[0];
  if (!qword_100185050[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185050);
  }
  return result;
}

unint64_t sub_1000760EC()
{
  unint64_t result = qword_100185260[0];
  if (!qword_100185260[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185260);
  }
  return result;
}

unint64_t sub_100076144()
{
  unint64_t result = qword_100185470[0];
  if (!qword_100185470[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185470);
  }
  return result;
}

unint64_t sub_10007619C()
{
  unint64_t result = qword_100185700[0];
  if (!qword_100185700[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185700);
  }
  return result;
}

unint64_t sub_1000761F4()
{
  unint64_t result = qword_100185910[0];
  if (!qword_100185910[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185910);
  }
  return result;
}

unint64_t sub_10007624C()
{
  unint64_t result = qword_100185A20;
  if (!qword_100185A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185A20);
  }
  return result;
}

unint64_t sub_1000762A4()
{
  unint64_t result = qword_100185A28[0];
  if (!qword_100185A28[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185A28);
  }
  return result;
}

unint64_t sub_1000762FC()
{
  unint64_t result = qword_100185AB0;
  if (!qword_100185AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185AB0);
  }
  return result;
}

unint64_t sub_100076354()
{
  unint64_t result = qword_100185AB8[0];
  if (!qword_100185AB8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185AB8);
  }
  return result;
}

unint64_t sub_1000763AC()
{
  unint64_t result = qword_100185BC0;
  if (!qword_100185BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185BC0);
  }
  return result;
}

unint64_t sub_100076404()
{
  unint64_t result = qword_100185BC8[0];
  if (!qword_100185BC8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185BC8);
  }
  return result;
}

unint64_t sub_10007645C()
{
  unint64_t result = qword_100185C50;
  if (!qword_100185C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185C50);
  }
  return result;
}

unint64_t sub_1000764B4()
{
  unint64_t result = qword_100185C58[0];
  if (!qword_100185C58[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185C58);
  }
  return result;
}

unint64_t sub_10007650C()
{
  unint64_t result = qword_100185CE0;
  if (!qword_100185CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185CE0);
  }
  return result;
}

unint64_t sub_100076564()
{
  unint64_t result = qword_100185CE8[0];
  if (!qword_100185CE8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185CE8);
  }
  return result;
}

unint64_t sub_1000765BC()
{
  unint64_t result = qword_100185D70;
  if (!qword_100185D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185D70);
  }
  return result;
}

unint64_t sub_100076614()
{
  unint64_t result = qword_100185D78;
  if (!qword_100185D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185D78);
  }
  return result;
}

unint64_t sub_10007666C()
{
  unint64_t result = qword_100185E00;
  if (!qword_100185E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185E00);
  }
  return result;
}

unint64_t sub_1000766C4()
{
  unint64_t result = qword_100185E08[0];
  if (!qword_100185E08[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185E08);
  }
  return result;
}

unint64_t sub_100076718()
{
  unint64_t result = qword_100185E90;
  if (!qword_100185E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185E90);
  }
  return result;
}

unint64_t sub_10007676C()
{
  unint64_t result = qword_10017D598;
  if (!qword_10017D598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D598);
  }
  return result;
}

unint64_t sub_1000767C0()
{
  unint64_t result = qword_10017D5B0;
  if (!qword_10017D5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D5B0);
  }
  return result;
}

unint64_t sub_100076814()
{
  unint64_t result = qword_10017D5C0;
  if (!qword_10017D5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D5C0);
  }
  return result;
}

unint64_t sub_100076868()
{
  unint64_t result = qword_10017D5C8;
  if (!qword_10017D5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D5C8);
  }
  return result;
}

uint64_t sub_1000768BC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000768F4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100076904(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002404C(v2, v3);
  return a1;
}

uint64_t sub_100076968(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000126B8(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000769D4()
{
  unint64_t result = qword_10017D5E0;
  if (!qword_10017D5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D5E0);
  }
  return result;
}

unint64_t sub_100076A28()
{
  unint64_t result = qword_100185E98[0];
  if (!qword_100185E98[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185E98);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s10driverkitd21ApprovalSettingsStateV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100076B68);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDB.V0.CodingKeys()
{
  return &type metadata for ApprovalDB.V0.CodingKeys;
}

unint64_t sub_100076BA4()
{
  unint64_t result = qword_100185FA0[0];
  if (!qword_100185FA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100185FA0);
  }
  return result;
}

unint64_t sub_100076BFC()
{
  unint64_t result = qword_1001860B0;
  if (!qword_1001860B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001860B0);
  }
  return result;
}

unint64_t sub_100076C54()
{
  unint64_t result = qword_1001860B8[0];
  if (!qword_1001860B8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001860B8);
  }
  return result;
}

uint64_t sub_100076CBC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for POSIXError();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1;
  swift_bridgeObjectRetain();
  sub_1000773EC(0xD000000000000010, 0x8000000100147460, v16);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();

  if (!v7)
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000026;
    *(void *)(v8 + 8) = 0x8000000100147480;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(void *)(v8 + 64) = 0;
    *(unsigned char *)(v8 + 72) = 4;
    swift_willThrow();
    return sub_100077504((uint64_t)v16);
  }
  sub_10001BA68((uint64_t)v16, (uint64_t)v14, &qword_10017C018);
  if (v15)
  {
    if (swift_dynamicCast()) {
      xpc_dictionary_set_mach_send();
    }
  }
  else
  {
    sub_100077504((uint64_t)v14);
  }
  v14[0] = 0;
  if (sub_100003304(v7, v14))
  {
    uint64_t v9 = POSIXErrorCode.init(rawValue:)();
    if ((v9 & (unint64_t)&_mh_execute_header) != 0) {
      int v10 = 96;
    }
    else {
      int v10 = v9;
    }
    uint64_t v12[3] = v10;
    sub_100077158((uint64_t)_swiftEmptyArrayStorage);
    sub_100077564();
    _BridgedStoredNSError.init(_:userInfo:)();
    POSIXError._nsError.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_willThrow();
    swift_unknownObjectRelease();
    return sub_100077504((uint64_t)v16);
  }
  sub_100077504((uint64_t)v16);
  swift_unknownObjectRelease();
  return v14[0];
}

uint64_t sub_100076F94()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t sub_100076FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  unsigned int v6 = sub_1000045E8(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_10000464C(a1, v7);
  return sub_100077070((uint64_t)v10, v7, v8);
}

uint64_t sub_100077070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000469C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100004700(&qword_10017D630);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_10000478C(a1);
}

uint64_t sub_1000770EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017D630);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32);

  return v5(v4, v4, a1);
}

unint64_t sub_100077158(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017C248);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10001BA68(v6, (uint64_t)&v15, (uint64_t *)&unk_10017DE70);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000775E0(v15, v16, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000772A4);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10001889C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000772A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

double sub_1000773EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000775E0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100004958);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100018304();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_10001889C((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_10003AD88(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_100077504(uint64_t a1)
{
  uint64_t v2 = sub_100004700(&qword_10017C018);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100077564()
{
  unint64_t result = qword_10017DD20;
  if (!qword_10017DD20)
  {
    type metadata accessor for POSIXError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DD20);
  }
  return result;
}

uint64_t type metadata accessor for RealDaemonLauncher()
{
  return self;
}

uint64_t sub_1000775E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v5 = Hasher._finalize()();

  return a3(a1, a2, v5);
}

void sub_100077664(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)sub_1000A2318();
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100132F10;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v10 = sub_10002A1DC();
  *(void *)(v9 + 64) = v10;
  *(void *)(v9 + 32) = v7;
  *(void *)(v9 + 40) = v8;
  sub_10002A230();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  aBlock[4] = sub_1000778C4;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000778EC;
  aBlock[3] = &unk_10016C268;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  uint64_t v14 = String.utf8CString.getter();
  xpc_set_event_stream_handler((const char *)(v14 + 32), a1, v13);
  swift_release();
  _Block_release(v13);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100132F10;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = v10;
  *(void *)(v15 + 32) = v7;
  *(void *)(v15 + 40) = v8;
  uint64_t v16 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
}

uint64_t sub_10007788C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000778C4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000778EC(uint64_t a1)
{
  unint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_10007794C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10007795C()
{
  return swift_release();
}

uint64_t sub_100077964()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t sub_1000779A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v6 = sub_1000045E8(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_10000464C(a1, v7);
  return sub_100077A40((uint64_t)v10, v7, v8);
}

uint64_t sub_100077A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000469C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100004700(&qword_10017D758);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_10000478C(a1);
}

uint64_t sub_100077ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017D758);
  Swift::Int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32);

  return v5(v4, v4, a1);
}

uint64_t type metadata accessor for RealDistNote()
{
  return self;
}

unint64_t sub_100077B4C(uint64_t a1, uint64_t a2)
{
  sub_100004700(&qword_10017C230);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100132F10;
  Swift::Int v5 = (uint64_t *)sub_1000A15C4();
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = v6;
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  swift_bridgeObjectRetain();
  uint64_t v9 = v8(a1, a2);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = v10;
  unint64_t v11 = sub_100016BFC(inited);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t *)sub_1000A1618();
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v21 = sub_100004700((uint64_t *)&unk_10017FA80);
    *(void *)&long long v20 = v13;
    sub_10001889C(&v20, v19);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100018144(v19, v15, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v11;
}

unint64_t sub_100077C98(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017DCD0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000048E0(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100077DB8(uint64_t a1)
{
  if (!a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_1000A11D8();
  if (!*(void *)(a1 + 16))
  {
    long long v9 = 0u;
    long long v10 = 0u;
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1000048E0(v4, v3);
  if ((v6 & 1) == 0)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  sub_1000047DC(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v10 + 1))
  {
LABEL_13:
    sub_1000130EC((uint64_t)&v9, &qword_10017C018);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v8;
  }
  else {
    return 0;
  }
}

uint64_t sub_100077EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 16))();
  if (!v2)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    goto LABEL_13;
  }
  uint64_t v3 = v2;
  uint64_t v4 = sub_1000A11D8();
  if (!*(void *)(v3 + 16))
  {
    long long v11 = 0u;
    long long v12 = 0u;
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_1000048E0(v6, v5);
  if ((v8 & 1) == 0)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  sub_1000047DC(*(void *)(v3 + 56) + 32 * v7, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_13:
    sub_1000130EC((uint64_t)&v11, &qword_10017C018);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v10;
  }
  else {
    return 0;
  }
}

uint64_t sub_100077FDC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_1000036B0(a1, v8);
  uint64_t v10 = *(void *)(a3 + 8);
  void v14[3] = a2;
  v14[4] = v10;
  long long v11 = sub_1000045E8(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v11, v4, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1000780C8(v14, AssociatedTypeWitness, v8, AssociatedTypeWitness, v9, a4);
  return sub_10000478C((uint64_t)v14);
}

uint64_t sub_1000780C8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_1000036B0(a1, v11);
  unint64_t v13 = sub_100077B4C(v11, v12);
  sub_100079FF4(v13, a2, a3, a4, a5, a6);
  return swift_bridgeObjectRelease();
}

double sub_100078174()
{
  sub_100004700(&qword_10017DCD8);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 17;
  *(_OWORD *)(v0 + 16) = xmmword_100135980;
  *(void *)(v0 + 32) = &type metadata for KernelRequests.GetRequests;
  *(void *)(v0 + 40) = &off_10016C330;
  *(void *)(v0 + 48) = &type metadata for KernelRequests.GetLoaded;
  *(void *)(v0 + 56) = &off_10016C348;
  *(void *)(v0 + 64) = &type metadata for KernelRequests.LoadExtension;
  *(void *)(v0 + 72) = &off_10016C378;
  *(void *)(v0 + 80) = &type metadata for KernelRequests.UnloadExtension;
  *(void *)(v0 + 88) = &off_10016C3A8;
  *(void *)(v0 + 96) = &type metadata for KernelRequests.SendResource;
  *(void *)(v0 + 104) = &off_10016C3C0;
  *(void *)(v0 + 112) = &type metadata for KernelRequests.LoadFileset;
  *(void *)(v0 + 120) = &off_10016C3D8;
  *(void *)(v0 + 128) = &type metadata for KernelRequests.DextLaunch;
  *(void *)(v0 + 136) = &off_10016C440;
  *(void *)(v0 + 144) = &type metadata for KernelRequests.RequestResource;
  *(void *)(v0 + 152) = &off_10016C490;
  *(void *)(v0 + 160) = &type metadata for KernelRequests.LoadRequest;
  *(void *)(v0 + 168) = &off_10016C4E0;
  *(void *)(v0 + 176) = &type metadata for KernelRequests.LoadNotification;
  *(void *)(v0 + 184) = &off_10016C530;
  *(void *)(v0 + 192) = &type metadata for KernelRequests.UnloadNotification;
  *(void *)(v0 + 200) = &off_10016C580;
  *(void *)(v0 + 208) = &type metadata for KernelRequests.RequestExit;
  *(void *)(v0 + 216) = &off_10016C5B8;
  *(void *)(v0 + 224) = &type metadata for KernelRequests.MissingAuxKCBundles;
  *(void *)(v0 + 232) = &off_10016C5D0;
  *(void *)(v0 + 240) = &type metadata for KernelRequests.AuxKCBundleAvailable;
  *(void *)(v0 + 248) = &off_10016C600;
  *(void *)(v0 + 256) = &type metadata for KernelRequests.GetDaemonActive;
  *(void *)(v0 + 264) = &off_10016C618;
  *(void *)(v0 + 272) = &type metadata for KernelRequests.GetDrivers;
  *(void *)(v0 + 280) = &off_10016C630;
  *(void *)(v0 + 288) = &type metadata for KernelRequests.DextUpdateNotification;
  *(void *)(v0 + 296) = &off_10016C668;
  qword_1001993E0 = v0;
  return result;
}

uint64_t sub_100078308@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = (uint64_t *)sub_1000A15C4();
  if (!*(void *)(a1 + 16))
  {
    long long v32 = 0u;
    long long v33 = 0u;
    goto LABEL_16;
  }
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_1000048E0(v7, v8);
  if ((v10 & 1) == 0)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  sub_1000047DC(*(void *)(a1 + 56) + 32 * v9, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  if (!*((void *)&v33 + 1))
  {
LABEL_16:
    sub_1000130EC((uint64_t)&v32, &qword_10017C018);
    goto LABEL_17;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    *(void *)&long long v32 = 0;
    *((void *)&v32 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    *(void *)&long long v32 = 0x2074736575716552;
    *((void *)&v32 + 1) = 0xE800000000000000;
    v22._uint64_t countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    unint64_t v23 = 0x80000001001475C0;
    unint64_t v24 = 0xD000000000000011;
LABEL_18:
    String.append(_:)(*(Swift::String *)&v24);
LABEL_19:
    long long v25 = v32;
    sub_100012E3C();
    swift_allocError();
    *(_OWORD *)uint64_t v26 = v25;
    *(_OWORD *)(v26 + 16) = 0u;
    *(_OWORD *)(v26 + 32) = 0u;
    *(_OWORD *)(v26 + 48) = 0u;
    *(void *)(v26 + 64) = 0;
    *(unsigned char *)(v26 + 72) = 9;
    return swift_willThrow();
  }
  uint64_t v11 = sub_100080160();
  if (!*(void *)(v11 + 16))
  {
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_23:
    *(void *)&long long v32 = 0;
    *((void *)&v32 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    *(void *)&long long v32 = 0xD000000000000017;
    *((void *)&v32 + 1) = 0x80000001001475E0;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1000048E0(v31._countAndFlagsBits, (uint64_t)v31._object);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 16 * v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_conformsToProtocol2();
  if (v15)
  {
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v16 = 0;
  }
  if (!v14) {
    goto LABEL_23;
  }
  long long v17 = (uint64_t *)sub_1000A1618();
  if (!*(void *)(a1 + 16))
  {
    long long v32 = 0u;
    long long v33 = 0u;
LABEL_30:
    sub_1000130EC((uint64_t)&v32, &qword_10017C018);
    uint64_t countAndFlagsBits = 0;
    goto LABEL_31;
  }
  uint64_t v34 = v16;
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000048E0(v18, v19);
  if (v21)
  {
    sub_1000047DC(*(void *)(a1 + 56) + 32 * v20, (uint64_t)&v32);
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v34;
  if (!*((void *)&v33 + 1)) {
    goto LABEL_30;
  }
  sub_100004700((uint64_t *)&unk_10017FA80);
  if (swift_dynamicCast()) {
    uint64_t countAndFlagsBits = v31._countAndFlagsBits;
  }
  else {
    uint64_t countAndFlagsBits = 0;
  }
LABEL_31:
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v14, v16) & 1) != 0 && !countAndFlagsBits)
  {
    *(void *)&long long v32 = 0;
    *((void *)&v32 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v29._uint64_t countAndFlagsBits = 0x2074736575716552;
    v29._int64_t object = (void *)0xE800000000000000;
    String.append(_:)(v29);
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    unint64_t v24 = 0xD00000000000002BLL;
    unint64_t v23 = 0x8000000100147600;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  a2[3] = v14;
  a2[4] = v16;
  sub_1000045E8(a2);
  uint64_t result = v30(countAndFlagsBits, v14, v16);
  if (v3) {
    return sub_10008038C((uint64_t)a2);
  }
  return result;
}

uint64_t sub_100078748(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A1660, qword_1001993E8, &qword_1001993E8[1]);
}

uint64_t sub_10007876C()
{
  return 0;
}

uint64_t sub_100078774(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_100186148, qword_1001993E8);
}

uint64_t sub_10007879C(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A16CC, qword_1001993F8, &qword_1001993F8[1]);
}

uint64_t sub_1000787C0()
{
  sub_100004700((uint64_t *)&unk_10017DE60);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100135990;
  unint64_t v1 = sub_1000A12A0();
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v2;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000A148C();
  uint64_t v6 = *(void *)v4;
  uint64_t v5 = *((void *)v4 + 1);
  *(void *)(v0 + 48) = v6;
  *(void *)(v0 + 56) = v5;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1000A11D8();
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  *(void *)(v0 + 64) = v9;
  *(void *)(v0 + 72) = v8;
  swift_bridgeObjectRetain();
  char v10 = sub_1000A1558();
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = v11;
  swift_bridgeObjectRetain();
  char v13 = sub_1000A13D4();
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *(void *)(v0 + 96) = v15;
  *(void *)(v0 + 104) = v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = (uint64_t *)sub_1000A15AC();
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *(void *)(v0 + 112) = v18;
  *(void *)(v0 + 120) = v17;
  swift_bridgeObjectRetain();
  uint64_t v19 = (uint64_t *)sub_1000A1498();
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *(void *)(v0 + 128) = v21;
  *(void *)(v0 + 136) = v20;
  swift_bridgeObjectRetain();
  Swift::String v22 = (uint64_t *)sub_1000A1398();
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *(void *)(v0 + 144) = v24;
  *(void *)(v0 + 152) = v23;
  swift_bridgeObjectRetain();
  long long v25 = (uint64_t *)sub_1000A145C();
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *(void *)(v0 + 160) = v27;
  *(void *)(v0 + 168) = v26;
  swift_bridgeObjectRetain();
  uint64_t v28 = (uint64_t *)sub_1000A14B0();
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *(void *)(v0 + 176) = v30;
  *(void *)(v0 + 184) = v29;
  swift_bridgeObjectRetain();
  Swift::String v31 = (uint64_t *)sub_1000A14A4();
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *(void *)(v0 + 192) = v33;
  *(void *)(v0 + 200) = v32;
  swift_bridgeObjectRetain();
  uint64_t v34 = (uint64_t *)sub_1000A138C();
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *(void *)(v0 + 208) = v36;
  *(void *)(v0 + 216) = v35;
  qword_100199408 = v0;

  return swift_bridgeObjectRetain();
}

uint64_t *sub_1000788D8()
{
  if (qword_100186158 != -1) {
    swift_once();
  }
  return &qword_100199408;
}

uint64_t sub_100078924()
{
  sub_100004700((uint64_t *)&unk_10017DE60);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001359A0;
  unint64_t v1 = (uint64_t *)sub_1000A1594();
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v2;
  swift_bridgeObjectRetain();
  uint64_t v4 = (uint64_t *)sub_1000A1564();
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  *(void *)(v0 + 48) = v6;
  *(void *)(v0 + 56) = v5;
  swift_bridgeObjectRetain();
  uint64_t v7 = (uint64_t *)sub_1000A15A0();
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  *(void *)(v0 + 64) = v9;
  *(void *)(v0 + 72) = v8;
  swift_bridgeObjectRetain();
  char v10 = (uint64_t *)sub_1000A1540();
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = v11;
  swift_bridgeObjectRetain();
  char v13 = (uint64_t *)sub_1000A154C();
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *(void *)(v0 + 96) = v15;
  *(void *)(v0 + 104) = v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = (uint64_t *)sub_1000A1534();
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *(void *)(v0 + 112) = v18;
  *(void *)(v0 + 120) = v17;
  swift_bridgeObjectRetain();
  uint64_t v19 = (uint64_t *)sub_1000A1588();
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *(void *)(v0 + 128) = v21;
  *(void *)(v0 + 136) = v20;
  swift_bridgeObjectRetain();
  Swift::String v22 = (uint64_t *)sub_1000A157C();
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *(void *)(v0 + 144) = v24;
  *(void *)(v0 + 152) = v23;
  swift_bridgeObjectRetain();
  long long v25 = (uint64_t *)sub_1000A1570();
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *(void *)(v0 + 160) = v27;
  *(void *)(v0 + 168) = v26;
  qword_100199410 = v0;

  return swift_bridgeObjectRetain();
}

uint64_t *sub_100078A0C()
{
  if (qword_100186160 != -1) {
    swift_once();
  }
  return &qword_100199410;
}

uint64_t sub_100078A58(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100078A64(*a1, *a2);
}

uint64_t sub_100078A64(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x646564616F6C6E55;
    }
    else {
      uint64_t v3 = 7958081;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE800000000000000;
    }
    else {
      unint64_t v4 = 0xE300000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x646564616F6C6E55;
      }
      else {
        uint64_t v6 = 7958081;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE800000000000000;
      }
      else {
        unint64_t v7 = 0xE300000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE600000000000000;
    uint64_t v3 = 0x646564616F4CLL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE600000000000000;
  if (v3 != 0x646564616F4CLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100078B68()
{
  return Hasher._finalize()();
}

uint64_t sub_100078C00()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100078C84()
{
  return Hasher._finalize()();
}

unint64_t sub_100078D18@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000803E0(*a1);
  *a2 = result;
  return result;
}

void sub_100078D48(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x646564616F6C6E55;
  if (v2 != 1)
  {
    uint64_t v5 = 7958081;
    unint64_t v4 = 0xE300000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x646564616F4CLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_100078D9C(void *a1@<X8>)
{
  *a1 = &off_10016C308;
}

unint64_t sub_100078DAC(char a1, char a2, uint64_t a3)
{
  switch(a1)
  {
    case 1:
      uint64_t v5 = (uint64_t *)sub_1000A172C();
      break;
    case 2:
      uint64_t v5 = (uint64_t *)sub_1000A1720();
      break;
    case 3:
      uint64_t v5 = (uint64_t *)sub_1000A1744();
      break;
    case 4:
      uint64_t v5 = (uint64_t *)sub_1000A1714();
      break;
    default:
      uint64_t v5 = (uint64_t *)sub_1000A1738();
      break;
  }
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  swift_bridgeObjectRetain();
  sub_100004700(&qword_10017C230);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001359B0;
  uint64_t v9 = (uint64_t *)sub_1000A1708();
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *(void *)(inited + 32) = v11;
  *(void *)(inited + 40) = v10;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v6;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1000A1750();
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)(inited + 80) = v14;
  *(void *)(inited + 88) = v13;
  if (a2)
  {
    if (a2 == 1)
    {
      unint64_t v15 = 0xE800000000000000;
      uint64_t v16 = 0x646564616F6C6E55;
    }
    else
    {
      unint64_t v15 = 0xE300000000000000;
      uint64_t v16 = 7958081;
    }
  }
  else
  {
    unint64_t v15 = 0xE600000000000000;
    uint64_t v16 = 0x646564616F4CLL;
  }
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v16;
  *(void *)(inited + 104) = v15;
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1000A1678();
  uint64_t v18 = v17[1];
  *(void *)(inited + 128) = *v17;
  *(void *)(inited + 136) = v18;
  *(void *)(inited + 168) = sub_100004700((uint64_t *)&unk_10017E5D0);
  *(void *)(inited + 144) = a3;
  swift_bridgeObjectRetain();
  return sub_100016BFC(inited);
}

uint64_t sub_100078F24(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_100186150, qword_1001993F8);
}

uint64_t sub_100078F4C(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A16F0, qword_100199418, &qword_100199418[1]);
}

uint64_t sub_100078F70(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_100186170, qword_100199418);
}

uint64_t sub_100078F98(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A1684, qword_100199428, &qword_100199428[1]);
}

unint64_t sub_100078FBC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100016BFC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = (uint64_t *)sub_1000A1630();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v17 = &type metadata for String;
  *(void *)&long long v16 = a1;
  *((void *)&v16 + 1) = a2;
  sub_10001889C(&v16, v15);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_100018144(v15, v6, v7, isUniquelyReferenced_nonNull_native);
  unint64_t v9 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)sub_1000A1690();
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v17 = &type metadata for Bool;
  LOBYTE(v16) = 1;
  sub_10001889C(&v16, v15);
  swift_bridgeObjectRetain();
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_100018144(v15, v11, v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1000790D8(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_100186178, qword_100199428);
}

uint64_t sub_100079100(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A160C, qword_100199438, &qword_100199438[1]);
}

uint64_t sub_100079124(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_100186180, qword_100199438);
}

uint64_t sub_10007914C(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A16B4, qword_100199448, &qword_100199448[1]);
}

unint64_t sub_100079170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_100016BFC((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v28 = v10;
  uint64_t v11 = (uint64_t *)sub_1000A169C();
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  if (a2)
  {
    uint64_t v27 = &type metadata for String;
    *(void *)&long long v26 = a1;
    *((void *)&v26 + 1) = a2;
    sub_10001889C(&v26, v25);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100018144(v25, v13, v12, isUniquelyReferenced_nonNull_native);
    unint64_t v28 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1000773EC(v13, v12, &v26);
    swift_bridgeObjectRelease();
    sub_1000130EC((uint64_t)&v26, &qword_10017C018);
  }
  unint64_t v15 = (uint64_t *)sub_1000A16A8();
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  if (a4)
  {
    uint64_t v27 = &type metadata for String;
    *(void *)&long long v26 = a3;
    *((void *)&v26 + 1) = a4;
    sub_10001889C(&v26, v25);
    swift_bridgeObjectRetain();
    unint64_t v18 = v28;
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    sub_100018144(v25, v17, v16, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1000773EC(v17, v16, &v26);
    swift_bridgeObjectRelease();
    sub_1000130EC((uint64_t)&v26, &qword_10017C018);
    unint64_t v18 = v28;
  }
  uint64_t v20 = (uint64_t *)sub_1000A16C0();
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  uint64_t v27 = (void *)sub_100004700(&qword_10017C7D0);
  *(void *)&long long v26 = a5;
  sub_10001889C(&v26, v25);
  swift_bridgeObjectRetain();
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  sub_100018144(v25, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_10007938C(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_100186188, qword_100199448);
}

uint64_t sub_1000793B4(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A16FC, qword_100199458, &qword_100199458[1]);
}

uint64_t sub_1000793D8(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_100186190, qword_100199458);
}

uint64_t sub_100079400(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A15D0, qword_100199468, &qword_100199468[1]);
}

uint64_t sub_100079424(uint64_t a1)
{
  return sub_1000796BC(a1, (uint64_t (*)(void))sub_1000A163C);
}

uint64_t sub_10007943C(uint64_t a1)
{
  return sub_1000797A8(a1, (uint64_t (*)(void))sub_1000A1648);
}

uint64_t sub_10007945C(uint64_t a1)
{
  if (!a1 || (int v2 = (uint64_t *)sub_1000A1654(), !*(void *)(a1 + 16)))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    goto LABEL_10;
  }
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1000048E0(v4, v3);
  if ((v6 & 1) == 0)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1000047DC(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  if (!*((void *)&v10 + 1))
  {
LABEL_10:
    sub_1000130EC((uint64_t)&v9, &qword_10017C018);
    return 2;
  }
  if (swift_dynamicCast()) {
    return v8;
  }
  else {
    return 2;
  }
}

unint64_t sub_100079540(uint64_t a1)
{
  if (!a1 || (int v2 = (uint64_t *)sub_1000A166C(), !*(void *)(a1 + 16)))
  {
    long long v12 = 0u;
    long long v13 = 0u;
    goto LABEL_10;
  }
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1000048E0(v4, v3);
  if ((v6 & 1) == 0)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1000047DC(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  if (!*((void *)&v13 + 1))
  {
LABEL_10:
    sub_1000130EC((uint64_t)&v12, &qword_10017C018);
    uint64_t v8 = 0;
    unsigned __int8 v9 = 1;
    return v8 | ((unint64_t)v9 << 32);
  }
  int v7 = swift_dynamicCast();
  uint64_t v8 = v11;
  unsigned __int8 v9 = v7 ^ 1;
  if (!v7) {
    uint64_t v8 = 0;
  }
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t sub_100079634(uint64_t a1)
{
  return sub_10007997C(a1, (uint64_t (*)(void))sub_1000A1504);
}

uint64_t sub_10007964C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100079654()
{
  return sub_100077DB8(*v0);
}

uint64_t sub_100079670(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_100186198, qword_100199468);
}

uint64_t sub_100079698(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A1600, qword_100199478, &qword_100199478[1]);
}

uint64_t sub_1000796BC(uint64_t a1, uint64_t (*a2)(void))
{
  if (!a1 || (uint64_t v3 = (uint64_t *)a2(), !*(void *)(a1 + 16)))
  {
    long long v10 = 0u;
    long long v11 = 0u;
    goto LABEL_11;
  }
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000048E0(v5, v4);
  if ((v7 & 1) == 0)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_1000047DC(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  if (!*((void *)&v11 + 1))
  {
LABEL_11:
    sub_1000130EC((uint64_t)&v10, &qword_10017C018);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000797A8(uint64_t a1, uint64_t (*a2)(void))
{
  if (!a1 || (uint64_t v3 = (uint64_t *)a2(), !*(void *)(a1 + 16)))
  {
    long long v10 = 0u;
    long long v11 = 0u;
    goto LABEL_11;
  }
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000048E0(v5, v4);
  if ((v7 & 1) == 0)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_1000047DC(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  if (!*((void *)&v11 + 1))
  {
LABEL_11:
    sub_1000130EC((uint64_t)&v10, &qword_10017C018);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t sub_100079898(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_1001861A0, qword_100199478);
}

uint64_t sub_1000798C0(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A15F4, qword_100199488, &qword_100199488[1]);
}

uint64_t sub_1000798E4(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_1001861A8, qword_100199488);
}

uint64_t sub_10007990C(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A15DC, qword_100199498, &qword_100199498[1]);
}

uint64_t sub_100079930(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_1001861B0, qword_100199498);
}

uint64_t sub_100079958(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A15E8, qword_1001994A8, &qword_1001994A8[1]);
}

uint64_t sub_10007997C(uint64_t a1, uint64_t (*a2)(void))
{
  if (!a1 || (uint64_t v3 = (uint64_t *)a2(), !*(void *)(a1 + 16)))
  {
    long long v10 = 0u;
    long long v11 = 0u;
    goto LABEL_11;
  }
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000048E0(v5, v4);
  if ((v7 & 1) == 0)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_1000047DC(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  if (!*((void *)&v11 + 1))
  {
LABEL_11:
    sub_1000130EC((uint64_t)&v10, &qword_10017C018);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t sub_100079A6C(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_1001861B8, qword_1001994A8);
}

uint64_t sub_100079A94(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A1624, qword_1001994B8, &qword_1001994B8[1]);
}

uint64_t sub_100079AB8(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_1001861C0, qword_1001994B8);
}

uint64_t sub_100079AE0(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A16D8, qword_1001994C8, &qword_1001994C8[1]);
}

uint64_t sub_100079B04(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_1001861C8, qword_1001994C8);
}

uint64_t sub_100079B2C(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A16E4, qword_1001994D8, &qword_1001994D8[1]);
}

uint64_t sub_100079B50(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_1001861D0, qword_1001994D8);
}

uint64_t sub_100079B78(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A1768, qword_1001994E8, &qword_1001994E8[1]);
}

uint64_t sub_100079B9C(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_1001861D8, qword_1001994E8);
}

uint64_t sub_100079BC4(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A1798, qword_1001994F8, &qword_1001994F8[1]);
}

unint64_t sub_100079BE8(uint64_t a1, uint64_t a2, char *a3)
{
  sub_100004700(&qword_10017C230);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100132F10;
  char v7 = (uint64_t *)sub_1000A1678();
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  *(void *)(inited + 32) = v9;
  *(void *)(inited + 40) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a3 = sub_10000C3BC(0, *((void *)a3 + 2) + 1, 1, a3);
  }
  unint64_t v11 = *((void *)a3 + 2);
  unint64_t v10 = *((void *)a3 + 3);
  if (v11 >= v10 >> 1) {
    a3 = sub_10000C3BC((char *)(v10 > 1), v11 + 1, 1, a3);
  }
  *((void *)a3 + 2) = v11 + 1;
  long long v12 = &a3[16 * v11];
  *((void *)v12 + 4) = a1;
  *((void *)v12 + 5) = a2;
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100004700((uint64_t *)&unk_10017E5D0);
  *(void *)(inited + 48) = a3;
  return sub_100016BFC(inited);
}

uint64_t sub_100079CF0(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, &qword_1001861E0, qword_1001994F8);
}

uint64_t sub_100079D18(uint64_t a1)
{
  return sub_100079D3C(a1, (uint64_t (*)(void))sub_1000A178C, qword_100199508, &qword_100199508[1]);
}

uint64_t sub_100079D3C(uint64_t a1, uint64_t (*a2)(void), void *a3, void *a4)
{
  unint64_t v6 = (uint64_t *)a2();
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  *a3 = v8;
  *a4 = v7;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100079D84(uint64_t a1)
{
  return sub_1000796BC(a1, (uint64_t (*)(void))sub_1000A1774);
}

uint64_t sub_100079D9C(uint64_t a1)
{
  return sub_10007997C(a1, (uint64_t (*)(void))sub_1000A1780);
}

uint64_t sub_100079DB4(uint64_t a1, uint64_t a2)
{
  return sub_100079DDC(a1, a2, qword_1001861E8, qword_100199508);
}

uint64_t sub_100079DDC(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_100079E34()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_100079E64(uint64_t a1, void *a2, char a3)
{
  if (a3)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v5 = 0xD00000000000001ELL;
  }
  else
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    unint64_t v5 = 0x6B2064616F6C6E75;
  }
  unint64_t v9 = v5;
  v6._uint64_t countAndFlagsBits = a1;
  v6._int64_t object = a2;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 39;
  v7._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return v9;
}

unint64_t sub_100079F34()
{
  return sub_100079E64(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_100079F40()
{
  id v1 = [*v0 processName];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100079F98()
{
  id v1 = [*v0 environment];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100079FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v17[3] = sub_100004700((uint64_t *)&unk_10017FA80);
  v17[0] = a1;
  type metadata accessor for CFDictionary(0);
  swift_bridgeObjectRetain();
  long long v12 = sub_1000F048C((uint64_t)v17);
  unint64_t v14 = v13;
  sub_10000478C((uint64_t)v17);
  if (v14 >> 60 == 15)
  {
    sub_100012E3C();
    swift_allocError();
    *(_OWORD *)uint64_t v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(void *)(v15 + 64) = 0;
    *(unsigned char *)(v15 + 72) = 73;
    return swift_willThrow();
  }
  else
  {
    sub_10007A11C((uint64_t)v12, v14, a2, a3, a4, a5, a6);
    return sub_10002404C((uint64_t)v12, v14);
  }
}

uint64_t sub_10007A11C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  size_t v54 = (char *)a7;
  int v55 = (void *)a4;
  sub_1000126B8(&qword_10017D868);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v15 = (uint64_t *)((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = __chkstk_darwin(v13);
  unint64_t v18 = (uint64_t *)((char *)&v48 - v17);
  uint64_t v69 = _swiftEmptyArrayStorage;
  char v19 = (char *)&v48 + *(int *)(v16 + 48) - v17;
  uint64_t v20 = v57;
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t))(a6 + 136))(v19, a1, a2, a3, a5, v55, a6);
  uint64_t v22 = v20;
  if (v20)
  {
    uint64_t v68 = v20;
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if (swift_dynamicCast())
    {
      char v23 = v58;
      uint64_t v24 = v59;
      uint64_t v26 = v60;
      uint64_t v25 = v61;
      unint64_t v28 = v62;
      uint64_t v27 = v63;
      uint64_t v29 = v64;
      uint64_t v30 = v65;
      if (v67 == 3)
      {
        uint64_t v56 = v66;
        swift_bridgeObjectRetain();
        int64_t v31 = v23[2];
        if (v31)
        {
          uint64_t v48 = v24;
          uint64_t v49 = v26;
          uint64_t v50 = v25;
          unint64_t v51 = v28;
          uint64_t v52 = v27;
          uint64_t v53 = v29;
          size_t v54 = (char *)v30;
          uint64_t v57 = v22;
          uint64_t v58 = _swiftEmptyArrayStorage;
          sub_10007F9DC(0, v31, 0);
          uint64_t v32 = v58;
          int v55 = v23;
          uint64_t v33 = v23 + 5;
          do
          {
            uint64_t v34 = *(v33 - 1);
            uint64_t v35 = *v33;
            swift_bridgeObjectRetain();
            char v36 = static os_log_type_t.error.getter();
            uint64_t v58 = v32;
            unint64_t v38 = v32[2];
            unint64_t v37 = v32[3];
            if (v38 >= v37 >> 1)
            {
              sub_10007F9DC((char *)(v37 > 1), v38 + 1, 1);
              uint64_t v32 = v58;
            }
            void v32[2] = v38 + 1;
            int64_t v39 = &v32[3 * v38];
            *((unsigned char *)v39 + 32) = v36;
            v33 += 2;
            void v39[5] = v34;
            v39[6] = v35;
            --v31;
          }
          while (v31);
          sub_10003E9C8((uint64_t)v55, v48, v49, v50, v51, v52, v53, (uint64_t)v54, v56, 3);
        }
        else
        {
          sub_10003E9C8((uint64_t)v23, v24, v26, v25, v28, v27, v29, v30, v56, 3);
          uint64_t v32 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v69 = v32;
      }
      else
      {
        sub_10003E9C8((uint64_t)v58, v59, v60, v61, v62, v63, v64, v65, v66, v67);
      }
    }
    swift_willThrow();
  }
  else
  {
    uint64_t v40 = (void *)v21;
    *unint64_t v18 = v21;
    uint64_t v41 = (char *)v15 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t *v15 = v21;
    uint64_t v42 = *(void *)(a5 - 8);
    uint64_t v57 = 0;
    uint64_t v43 = v42;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v41, v19, a5);
    uint64_t v69 = v40;
    int64_t v44 = *(void (**)(char *, uint64_t))(v43 + 8);
    swift_bridgeObjectRetain();
    v44(v41, a5);
    uint64_t v45 = (char *)v15 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v46(v45, v19, a5);
    swift_bridgeObjectRelease();
    v46(v54, v45, a5);
  }
  sub_10007A550((uint64_t *)&v69);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10007A550(uint64_t *a1)
{
  uint64_t result = *a1;
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      swift_bridgeObjectRetain();
      Swift::String v6 = (void *)*sub_1000EFAA8();
      sub_100004700((uint64_t *)&unk_10017D6E0);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_100132F10;
      *(void *)(v7 + 56) = &type metadata for String;
      *(void *)(v7 + 64) = sub_10002A1DC();
      *(void *)(v7 + 32) = v5;
      *(void *)(v7 + 40) = v4;
      swift_bridgeObjectRetain();
      id v8 = v6;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v3 += 3;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10007A6A0(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_100004700(&qword_10017C7E0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  id v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *(void (**)(void))(*(void *)v2 + 424);
  uint64_t v62 = ((uint64_t (*)(uint64_t))v9)(v6);
  uint64_t v63 = v10;
  uint64_t v66 = a1;
  unint64_t v67 = a2;
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 61;
  v11._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  uint64_t v12 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 1, 1, v12);
  sub_100029B24();
  StringProtocol.range<A>(of:options:range:locale:)();
  char v14 = v13;
  sub_1000130EC((uint64_t)v8, &qword_10017C7E0);
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_bridgeObjectRelease();
  if (v14) {
    return 0;
  }
  ((void (*)(uint64_t))v9)(v15);
  v9();
  swift_bridgeObjectRelease();
  unint64_t v16 = String.distance(from:to:)();
  uint64_t v17 = swift_bridgeObjectRelease();
  uint64_t v18 = ((uint64_t (*)(uint64_t))v9)(v17);
  unint64_t v20 = sub_1000804A8(v16, v18, v19);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v62 = v20;
  uint64_t v63 = v22;
  uint64_t v64 = v24;
  uint64_t v65 = v26;
  uint64_t v66 = 32;
  unint64_t v67 = 0xE100000000000000;
  sub_100080558();
  uint64_t v27 = (void *)StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (!v27[2])
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v29 = v27[4];
  unint64_t v28 = v27[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = sub_100037774();
  if ((result & 1) == 0)
  {
    uint64_t v42 = HIBYTE(v28) & 0xF;
    uint64_t v43 = v29 & 0xFFFFFFFFFFFFLL;
    if ((v28 & 0x2000000000000000) != 0) {
      uint64_t v44 = HIBYTE(v28) & 0xF;
    }
    else {
      uint64_t v44 = v29 & 0xFFFFFFFFFFFFLL;
    }
    if (!v44) {
      goto LABEL_10;
    }
    if ((v28 & 0x1000000000000000) != 0)
    {
      uint64_t v46 = (uint64_t)sub_10007FD28(v29, v28, 10);
      LOBYTE(v29) = v60;
LABEL_61:
      swift_bridgeObjectRelease();
      if (v29) {
        return 0;
      }
      else {
        return v46;
      }
    }
    if ((v28 & 0x2000000000000000) == 0)
    {
      if ((v29 & 0x1000000000000000) != 0) {
        uint64_t v45 = (unsigned __int8 *)((v28 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v45 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v46 = (uint64_t)sub_10007FE10(v45, v43, 10);
      LOBYTE(v29) = v47 & 1;
      goto LABEL_61;
    }
    uint64_t v62 = v29;
    uint64_t v63 = v28 & 0xFFFFFFFFFFFFFFLL;
    if (v29 == 43)
    {
      if (v42)
      {
        if (v42 == 1 || (BYTE1(v29) - 48) > 9u) {
          goto LABEL_44;
        }
        uint64_t v46 = (BYTE1(v29) - 48);
        if (v42 != 2)
        {
          if ((BYTE2(v29) - 48) > 9u) {
            goto LABEL_44;
          }
          uint64_t v46 = 10 * (BYTE1(v29) - 48) + (BYTE2(v29) - 48);
          if (v42 != 3)
          {
            if ((BYTE3(v29) - 48) > 9u) {
              goto LABEL_44;
            }
            uint64_t v46 = 10 * v46 + (BYTE3(v29) - 48);
            uint64_t v48 = v42 - 4;
            if (v48)
            {
              uint64_t v49 = (unsigned __int8 *)&v62 + 4;
              while (1)
              {
                unsigned int v50 = *v49 - 48;
                if (v50 > 9) {
                  goto LABEL_44;
                }
                uint64_t v51 = 10 * v46;
                if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63) {
                  goto LABEL_44;
                }
                uint64_t v46 = v51 + v50;
                if (__OFADD__(v51, v50)) {
                  goto LABEL_44;
                }
                LOBYTE(v29) = 0;
                ++v49;
                if (!--v48) {
                  goto LABEL_61;
                }
              }
            }
          }
        }
LABEL_60:
        LOBYTE(v29) = 0;
        goto LABEL_61;
      }
    }
    else
    {
      if (v29 != 45)
      {
        if (!v42 || (v29 - 48) > 9u) {
          goto LABEL_44;
        }
        uint64_t v46 = (v29 - 48);
        if (v42 != 1)
        {
          if ((BYTE1(v29) - 48) > 9u) {
            goto LABEL_44;
          }
          uint64_t v46 = 10 * (v29 - 48) + (BYTE1(v29) - 48);
          if (v42 != 2)
          {
            if ((BYTE2(v29) - 48) > 9u) {
              goto LABEL_44;
            }
            uint64_t v46 = 10 * v46 + (BYTE2(v29) - 48);
            uint64_t v52 = v42 - 3;
            if (v52)
            {
              uint64_t v53 = (unsigned __int8 *)&v62 + 3;
              while (1)
              {
                unsigned int v54 = *v53 - 48;
                if (v54 > 9) {
                  goto LABEL_44;
                }
                uint64_t v55 = 10 * v46;
                if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63) {
                  goto LABEL_44;
                }
                uint64_t v46 = v55 + v54;
                if (__OFADD__(v55, v54)) {
                  goto LABEL_44;
                }
                LOBYTE(v29) = 0;
                ++v53;
                if (!--v52) {
                  goto LABEL_61;
                }
              }
            }
          }
        }
        goto LABEL_60;
      }
      if (v42)
      {
        if (v42 == 1 || (BYTE1(v29) - 48) > 9u) {
          goto LABEL_44;
        }
        if (v42 == 2)
        {
          LOBYTE(v29) = 0;
          uint64_t v46 = -(uint64_t)(BYTE1(v29) - 48);
          goto LABEL_61;
        }
        if ((BYTE2(v29) - 48) > 9u) {
          goto LABEL_44;
        }
        uint64_t v46 = -10 * (BYTE1(v29) - 48) - (BYTE2(v29) - 48);
        if (v42 != 3)
        {
          if ((BYTE3(v29) - 48) <= 9u)
          {
            uint64_t v46 = 10 * (int)v46 - (BYTE3(v29) - 48);
            uint64_t v56 = v42 - 4;
            if (!v56) {
              goto LABEL_60;
            }
            uint64_t v57 = (unsigned __int8 *)&v62 + 4;
            while (1)
            {
              unsigned int v58 = *v57 - 48;
              if (v58 > 9) {
                break;
              }
              uint64_t v59 = 10 * v46;
              if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63) {
                break;
              }
              uint64_t v46 = v59 - v58;
              if (__OFSUB__(v59, v58)) {
                break;
              }
              LOBYTE(v29) = 0;
              ++v57;
              if (!--v56) {
                goto LABEL_61;
              }
            }
          }
LABEL_44:
          uint64_t v46 = 0;
          LOBYTE(v29) = 1;
          goto LABEL_61;
        }
        goto LABEL_60;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  unint64_t v31 = sub_1000804A8(2uLL, v29, v28);
  unint64_t v33 = v32;
  unint64_t v35 = v34;
  unint64_t v37 = v36;
  swift_bridgeObjectRelease();
  if ((v31 ^ v33) < 0x4000) {
    goto LABEL_10;
  }
  uint64_t v38 = sub_10008008C(v31, v33, v35, v37, 16);
  if ((v39 & 0x100) != 0) {
    uint64_t v38 = (uint64_t)sub_10007FC34(v31, v33, v35, v37, 16);
  }
  uint64_t v40 = v38;
  char v41 = v39;
  swift_bridgeObjectRelease();
  if (v41) {
    return 0;
  }
  else {
    return v40;
  }
}

uint64_t sub_10007ACF8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100004700(&qword_10017C7E0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v11 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 72);
  uint64_t v62 = v11(a3, a4);
  uint64_t v63 = v12;
  uint64_t v66 = a1;
  unint64_t v67 = a2;
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 61;
  v13._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  uint64_t v14 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v10, 1, 1, v14);
  sub_100029B24();
  StringProtocol.range<A>(of:options:range:locale:)();
  char v16 = v15;
  sub_1000130EC((uint64_t)v10, &qword_10017C7E0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16) {
    return 0;
  }
  v11(a3, a4);
  v11(a3, a4);
  swift_bridgeObjectRelease();
  unint64_t v17 = String.distance(from:to:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = v11(a3, a4);
  unint64_t v20 = sub_1000804A8(v17, v18, v19);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v62 = v20;
  uint64_t v63 = v22;
  uint64_t v64 = v24;
  uint64_t v65 = v26;
  uint64_t v66 = 32;
  unint64_t v67 = 0xE100000000000000;
  sub_100080558();
  uint64_t v27 = (void *)StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (!v27[2]) {
    goto LABEL_11;
  }
  uint64_t v29 = v27[4];
  unint64_t v28 = v27[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = sub_100037774();
  if ((result & 1) == 0)
  {
    uint64_t v42 = HIBYTE(v28) & 0xF;
    uint64_t v43 = v29 & 0xFFFFFFFFFFFFLL;
    if ((v28 & 0x2000000000000000) != 0) {
      uint64_t v44 = HIBYTE(v28) & 0xF;
    }
    else {
      uint64_t v44 = v29 & 0xFFFFFFFFFFFFLL;
    }
    if (!v44) {
      goto LABEL_11;
    }
    if ((v28 & 0x1000000000000000) != 0)
    {
      uint64_t v46 = (uint64_t)sub_10007FD28(v29, v28, 10);
      LOBYTE(v29) = v60;
LABEL_55:
      swift_bridgeObjectRelease();
      if (v29) {
        return 0;
      }
      else {
        return v46;
      }
    }
    if ((v28 & 0x2000000000000000) == 0)
    {
      if ((v29 & 0x1000000000000000) != 0) {
        uint64_t v45 = (unsigned __int8 *)((v28 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v45 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v46 = (uint64_t)sub_10007FE10(v45, v43, 10);
      LOBYTE(v29) = v47 & 1;
      goto LABEL_55;
    }
    uint64_t v62 = v29;
    uint64_t v63 = v28 & 0xFFFFFFFFFFFFFFLL;
    if (v29 == 43)
    {
      if (!v42) {
        goto LABEL_68;
      }
      if (v42 == 1 || (BYTE1(v29) - 48) > 9u) {
        goto LABEL_42;
      }
      uint64_t v46 = (BYTE1(v29) - 48);
      if (v42 != 2)
      {
        if ((BYTE2(v29) - 48) > 9u) {
          goto LABEL_42;
        }
        uint64_t v46 = 10 * (BYTE1(v29) - 48) + (BYTE2(v29) - 48);
        uint64_t v48 = v42 - 3;
        if (v48)
        {
          uint64_t v49 = (unsigned __int8 *)&v62 + 3;
          while (1)
          {
            unsigned int v50 = *v49 - 48;
            if (v50 > 9) {
              goto LABEL_42;
            }
            uint64_t v51 = 10 * v46;
            if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63) {
              goto LABEL_42;
            }
            uint64_t v46 = v51 + v50;
            if (__OFADD__(v51, v50)) {
              goto LABEL_42;
            }
            LOBYTE(v29) = 0;
            ++v49;
            if (!--v48) {
              goto LABEL_55;
            }
          }
        }
      }
    }
    else
    {
      if (v29 == 45)
      {
        if (v42)
        {
          if (v42 != 1 && (BYTE1(v29) - 48) <= 9u)
          {
            if (v42 == 2)
            {
              LOBYTE(v29) = 0;
              uint64_t v46 = -(uint64_t)(BYTE1(v29) - 48);
              goto LABEL_55;
            }
            if ((BYTE2(v29) - 48) <= 9u)
            {
              uint64_t v46 = -10 * (BYTE1(v29) - 48) - (BYTE2(v29) - 48);
              uint64_t v56 = v42 - 3;
              if (!v56) {
                goto LABEL_54;
              }
              uint64_t v57 = (unsigned __int8 *)&v62 + 3;
              while (1)
              {
                unsigned int v58 = *v57 - 48;
                if (v58 > 9) {
                  break;
                }
                uint64_t v59 = 10 * v46;
                if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63) {
                  break;
                }
                uint64_t v46 = v59 - v58;
                if (__OFSUB__(v59, v58)) {
                  break;
                }
                LOBYTE(v29) = 0;
                ++v57;
                if (!--v56) {
                  goto LABEL_55;
                }
              }
            }
          }
LABEL_42:
          uint64_t v46 = 0;
          LOBYTE(v29) = 1;
          goto LABEL_55;
        }
        __break(1u);
LABEL_68:
        __break(1u);
        return result;
      }
      if (!v42 || (v29 - 48) > 9u) {
        goto LABEL_42;
      }
      uint64_t v46 = (v29 - 48);
      if (v42 != 1)
      {
        if ((BYTE1(v29) - 48) > 9u) {
          goto LABEL_42;
        }
        uint64_t v46 = 10 * (v29 - 48) + (BYTE1(v29) - 48);
        uint64_t v52 = v42 - 2;
        if (v52)
        {
          uint64_t v53 = (unsigned __int8 *)&v62 + 2;
          while (1)
          {
            unsigned int v54 = *v53 - 48;
            if (v54 > 9) {
              goto LABEL_42;
            }
            uint64_t v55 = 10 * v46;
            if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63) {
              goto LABEL_42;
            }
            uint64_t v46 = v55 + v54;
            if (__OFADD__(v55, v54)) {
              goto LABEL_42;
            }
            LOBYTE(v29) = 0;
            ++v53;
            if (!--v52) {
              goto LABEL_55;
            }
          }
        }
      }
    }
LABEL_54:
    LOBYTE(v29) = 0;
    goto LABEL_55;
  }
  unint64_t v31 = sub_1000804A8(2uLL, v29, v28);
  unint64_t v33 = v32;
  unint64_t v35 = v34;
  unint64_t v37 = v36;
  swift_bridgeObjectRelease();
  if (!((v31 ^ v33) >> 14))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v38 = sub_10008008C(v31, v33, v35, v37, 16);
  if ((v39 & 0x100) != 0) {
    uint64_t v38 = (uint64_t)sub_10007FC34(v31, v33, v35, v37, 16);
  }
  uint64_t v40 = v38;
  char v41 = v39;
  swift_bridgeObjectRelease();
  if (v41) {
    return 0;
  }
  else {
    return v40;
  }
}

uint64_t sub_10007B2EC()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(v0 + 16) = 0;
  return result;
}

uint64_t sub_10007B30C(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

unsigned char *(*sub_10007B314(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_10007B2EC() & 1;
  return sub_10007B360;
}

unsigned char *sub_10007B360(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 16) = result[8];
  return result;
}

uint64_t sub_10007B370()
{
  int v1 = *(unsigned __int8 *)(v0 + 17);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(v0 + 17) = 0;
  return result;
}

uint64_t sub_10007B390(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

unsigned char *(*sub_10007B398(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_10007B370() & 1;
  return sub_10007B3E4;
}

unsigned char *sub_10007B3E4(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 17) = result[8];
  return result;
}

uint64_t sub_10007B3F4()
{
  int v1 = *(unsigned __int8 *)(v0 + 18);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(v0 + 18) = 0;
  return result;
}

uint64_t sub_10007B414(uint64_t result)
{
  *(unsigned char *)(v1 + 18) = result;
  return result;
}

unsigned char *(*sub_10007B41C(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_10007B3F4() & 1;
  return sub_10007B468;
}

unsigned char *sub_10007B468(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 18) = result[8];
  return result;
}

uint64_t sub_10007B478()
{
  int v1 = *(unsigned __int8 *)(v0 + 19);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(v0 + 19) = 0;
  return result;
}

uint64_t sub_10007B498(uint64_t result)
{
  *(unsigned char *)(v1 + 19) = result;
  return result;
}

unsigned char *(*sub_10007B4A0(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_10007B478() & 1;
  return sub_10007B4EC;
}

unsigned char *sub_10007B4EC(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 19) = result[8];
  return result;
}

uint64_t sub_10007B4FC()
{
  int v1 = *(unsigned __int8 *)(v0 + 20);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(v0 + 20) = 0;
  return result;
}

uint64_t sub_10007B51C(uint64_t result)
{
  *(unsigned char *)(v1 + 20) = result;
  return result;
}

unsigned char *(*sub_10007B524(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_10007B4FC() & 1;
  return sub_10007B570;
}

unsigned char *sub_10007B570(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 20) = result[8];
  return result;
}

uint64_t sub_10007B580()
{
  int v1 = *(unsigned __int8 *)(v0 + 21);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(v0 + 21) = 0;
  return result;
}

uint64_t sub_10007B5A0(uint64_t result)
{
  *(unsigned char *)(v1 + 21) = result;
  return result;
}

unsigned char *(*sub_10007B5A8(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_10007B580() & 1;
  return sub_10007B5F4;
}

unsigned char *sub_10007B5F4(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 21) = result[8];
  return result;
}

uint64_t sub_10007B604()
{
  int v1 = v0[22];
  if (v1 == 2)
  {
    if (((*(uint64_t (**)(void))(*(void *)v0 + 328))() & 1) != 0
      || ((*(uint64_t (**)(void))(*(void *)v0 + 232))() & 1) != 0
      || ((*(uint64_t (**)(void))(*(void *)v0 + 280))() & 1) != 0
      || ((*(uint64_t (**)(void))(*(void *)v0 + 304))() & 1) != 0)
    {
      char v2 = 0;
    }
    else
    {
      char v2 = sub_1000F59D4() ^ 1;
    }
    v0[22] = v2 & 1;
  }
  else
  {
    char v2 = v1 & 1;
  }
  return v2 & 1;
}

uint64_t sub_10007B700(uint64_t result)
{
  *(unsigned char *)(v1 + 22) = result;
  return result;
}

unsigned char *(*sub_10007B708(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_10007B604() & 1;
  return sub_10007B754;
}

unsigned char *sub_10007B754(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 22) = result[8];
  return result;
}

BOOL sub_10007B764()
{
  int v1 = v0[23];
  if (v1 != 2) {
    return v1 & 1;
  }
  char v2 = sub_1000A1A48();
  uint64_t v4 = *(void *)v2;
  uint64_t v3 = *((void *)v2 + 1);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v0 + 592);
  swift_bridgeObjectRetain();
  uint64_t v6 = v5(v4, v3);
  swift_bridgeObjectRelease();
  BOOL result = v6 != 0;
  v0[23] = result;
  return result;
}

uint64_t sub_10007B828(uint64_t result)
{
  *(unsigned char *)(v1 + 23) = result;
  return result;
}

unsigned char *(*sub_10007B830(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_10007B764();
  return sub_10007B87C;
}

unsigned char *sub_10007B87C(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 23) = result[8];
  return result;
}

uint64_t sub_10007B88C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    uint64_t v4 = (uint64_t *)sub_1000A2150();
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*v0 + 600);
    swift_bridgeObjectRetain();
    uint64_t v3 = v7(v5, v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    uint64_t v10 = v0[3];
    uint64_t v11 = v0[4];
    v0[3] = v3;
    v0[4] = v9;
    swift_bridgeObjectRetain();
    sub_1000805AC(v10, v11);
  }
  sub_1000805C0(v1, v2);
  return v3;
}

uint64_t sub_10007B984(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return sub_1000805AC(v3, v4);
}

uint64_t (*sub_10007B998(uint64_t *a1))(void *a1, char a2)
{
  a1[2] = v1;
  *a1 = sub_10007B88C();
  a1[1] = v3;
  return sub_10007B9E0;
}

uint64_t sub_10007B9E0(void *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 24) = *a1;
  *(void *)(v2 + 32) = v3;
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_1000805AC(v4, v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return sub_1000805AC(v4, v5);
  }
}

uint64_t sub_10007BA68()
{
  if (v0[6])
  {
    uint64_t v1 = v0[5];
  }
  else
  {
    uint64_t v2 = sub_1000A1A3C();
    uint64_t v3 = *(void *)v2;
    uint64_t v4 = *((void *)v2 + 1);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*v0 + 600);
    swift_bridgeObjectRetain();
    uint64_t v1 = v5(v3, v4);
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[5] = v1;
    v0[6] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10007BB50(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10007BB60(uint64_t *a1))(void *a1)
{
  a1[2] = v1;
  *a1 = sub_10007BA68();
  a1[1] = v3;
  return sub_10007BBA8;
}

uint64_t sub_10007BBA8(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  *(void *)(v1 + 40) = *a1;
  *(void *)(v1 + 48) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10007BBBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004700(&qword_10017C7E0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[8];
  uint64_t v8 = v6;
  if (v7 == 1)
  {
    uint64_t v9 = (void (**)(void))(*v1 + 424);
    uint64_t v10 = *v9;
    uint64_t v35 = ((uint64_t (*)(uint64_t))*v9)(v3);
    uint64_t v36 = v11;
    uint64_t v39 = 0x786966667573636BLL;
    unint64_t v40 = 0xE800000000000000;
    v12._uint64_t countAndFlagsBits = 61;
    v12._int64_t object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    uint64_t v13 = type metadata accessor for Locale();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 1, 1, v13);
    sub_100029B24();
    StringProtocol.range<A>(of:options:range:locale:)();
    v34[1] = v14;
    char v16 = v15;
    sub_1000130EC((uint64_t)v5, &qword_10017C7E0);
    swift_bridgeObjectRelease();
    uint64_t v17 = swift_bridgeObjectRelease();
    uint64_t v8 = 0;
    uint64_t v18 = 0;
    if ((v16 & 1) == 0)
    {
      ((void (*)(uint64_t))v10)(v17);
      v10();
      swift_bridgeObjectRelease();
      unint64_t v19 = String.distance(from:to:)();
      uint64_t v20 = swift_bridgeObjectRelease();
      uint64_t v21 = ((uint64_t (*)(uint64_t))v10)(v20);
      unint64_t v23 = sub_1000804A8(v19, v21, v22);
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      swift_bridgeObjectRelease();
      uint64_t v35 = v23;
      uint64_t v36 = v25;
      uint64_t v37 = v27;
      uint64_t v38 = v29;
      uint64_t v39 = 32;
      unint64_t v40 = 0xE100000000000000;
      sub_100080558();
      uint64_t v30 = (void *)StringProtocol.components<A>(separatedBy:)();
      swift_bridgeObjectRelease();
      if (v30[2])
      {
        uint64_t v8 = v30[4];
        uint64_t v18 = v30[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v8 = 0;
        uint64_t v18 = 0;
      }
    }
    uint64_t v31 = v1[7];
    uint64_t v32 = v1[8];
    v1[7] = v8;
    v1[8] = v18;
    swift_bridgeObjectRetain();
    sub_1000805AC(v31, v32);
  }
  sub_1000805C0(v6, v7);
  return v8;
}

uint64_t sub_10007BEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 64);
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return sub_1000805AC(v3, v4);
}

uint64_t (*sub_10007BEBC(uint64_t *a1))(void *a1, char a2)
{
  a1[2] = v1;
  *a1 = sub_10007BBBC();
  a1[1] = v3;
  return sub_10007BF04;
}

uint64_t sub_10007BF04(void *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v5 = *(void *)(v2 + 64);
  *(void *)(v2 + 56) = *a1;
  *(void *)(v2 + 64) = v3;
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_1000805AC(v4, v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return sub_1000805AC(v4, v5);
  }
}

uint64_t sub_10007BF8C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004700(&qword_10017C7E0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = v0[72];
  if (v6 == 2)
  {
    uint64_t v7 = (void (**)(void))(*(void *)v0 + 424);
    uint64_t v8 = *v7;
    uint64_t v31 = ((uint64_t (*)(uint64_t))*v7)(v3);
    uint64_t v32 = v9;
    uint64_t v35 = 0x427441434B787561;
    unint64_t v36 = 0xEB00000000746F6FLL;
    v10._uint64_t countAndFlagsBits = 61;
    v10._int64_t object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    uint64_t v11 = type metadata accessor for Locale();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 1, 1, v11);
    sub_100029B24();
    StringProtocol.range<A>(of:options:range:locale:)();
    char v13 = v12;
    sub_1000130EC((uint64_t)v5, &qword_10017C7E0);
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_bridgeObjectRelease();
    if (v13)
    {
      char v29 = 0;
    }
    else
    {
      ((void (*)(uint64_t))v8)(v14);
      v8();
      swift_bridgeObjectRelease();
      unint64_t v15 = String.distance(from:to:)();
      uint64_t v16 = swift_bridgeObjectRelease();
      uint64_t v17 = ((uint64_t (*)(uint64_t))v8)(v16);
      unint64_t v19 = sub_1000804A8(v15, v17, v18);
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      uint64_t v31 = v19;
      uint64_t v32 = v21;
      uint64_t v33 = v23;
      uint64_t v34 = v25;
      uint64_t v35 = 32;
      unint64_t v36 = 0xE100000000000000;
      sub_100080558();
      uint64_t v26 = (void *)StringProtocol.components<A>(separatedBy:)();
      swift_bridgeObjectRelease();
      if (v26[2])
      {
        uint64_t v28 = v26[4];
        uint64_t v27 = v26[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v28 == 0x65736C6166 && v27 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease();
          char v29 = 1;
        }
        else
        {
          char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        char v29 = 0;
      }
    }
    v1[72] = v29 & 1;
  }
  else
  {
    char v29 = v6 & 1;
  }
  return v29 & 1;
}

uint64_t sub_10007C2B0(uint64_t result)
{
  *(unsigned char *)(v1 + 72) = result;
  return result;
}

unsigned char *(*sub_10007C2B8(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_10007BF8C() & 1;
  return sub_10007C304;
}

unsigned char *sub_10007C304(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 72) = result[8];
  return result;
}

BOOL sub_10007C314()
{
  int v1 = *(unsigned __int8 *)(v0 + 73);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t v2 = v0;
  uint64_t v3 = sub_10007A6A0(0x676F6C6D6BLL, 0xE500000000000000);
  if (v4)
  {
    sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
    int v6 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    BOOL result = 0;
  }
  else
  {
    BOOL result = v3 == 1;
  }
  *(unsigned char *)(v2 + 73) = result;
  return result;
}

uint64_t sub_10007C3CC(uint64_t result)
{
  *(unsigned char *)(v1 + 73) = result;
  return result;
}

unsigned char *(*sub_10007C3D4(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_10007C314();
  return sub_10007C420;
}

unsigned char *sub_10007C420(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 73) = result[8];
  return result;
}

uint64_t sub_10007C430()
{
  if (*(unsigned char *)(v0 + 76))
  {
    uint64_t v1 = sub_10007A6A0(0x676F6C6D6BLL, 0xE500000000000000);
    if ((v2 & 1) != 0 || v1 != 1)
    {
      if ((sub_1000F59D4() & 1) == 0)
      {
        LOBYTE(v3) = 0;
        __int16 v5 = 256;
        int v4 = 1;
        goto LABEL_10;
      }
      LOBYTE(v3) = static os_log_type_t.error.getter();
    }
    else
    {
      LOBYTE(v3) = static os_log_type_t.default.getter();
    }
    int v4 = 0;
    __int16 v5 = v3;
LABEL_10:
    *(_WORD *)(v0 + 74) = v5;
    *(unsigned char *)(v0 + 76) = 0;
    return v3 | (v4 << 8);
  }
  unsigned int v3 = *(unsigned __int16 *)(v0 + 74);
  int v4 = (v3 >> 8) & 1;
  return v3 | (v4 << 8);
}

uint64_t sub_10007C4BC(uint64_t result)
{
  *(_WORD *)(v1 + 74) = result & 0x1FF;
  *(unsigned char *)(v1 + 76) = 0;
  return result;
}

uint64_t *(*sub_10007C4CC(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  __int16 v3 = sub_10007C430();
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = HIBYTE(v3) & 1;
  return sub_10007C51C;
}

uint64_t *sub_10007C51C(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*((unsigned char *)result + 9)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(v1 + 74) = v2 | *((unsigned __int8 *)result + 8);
  *(unsigned char *)(v1 + 76) = 0;
  return result;
}

BOOL sub_10007C544()
{
  int v1 = *(unsigned __int8 *)(v0 + 77);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t v2 = v0;
  uint64_t v3 = sub_10007A6A0(0x6173615F74786564, 0xEC00000062735F6ELL);
  if (v4)
  {
    BOOL result = 0;
  }
  else
  {
    uint64_t v5 = v3;
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_100132F10;
    *(void *)(v6 + 56) = &type metadata for Int;
    *(void *)(v6 + 64) = &protocol witness table for Int;
    *(void *)(v6 + 32) = v5;
    sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
    uint64_t v7 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    BOOL result = v5 == 1;
  }
  *(unsigned char *)(v2 + 77) = result;
  return result;
}

uint64_t sub_10007C658(uint64_t result)
{
  *(unsigned char *)(v1 + 77) = result;
  return result;
}

unsigned char *(*sub_10007C660(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_10007C544();
  return sub_10007C6AC;
}

unsigned char *sub_10007C6AC(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 77) = result[8];
  return result;
}

uint64_t sub_10007C6BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 80;
  swift_beginAccess();
  sub_10001BA68(v3, (uint64_t)&v7, &qword_10017D878);
  if (!v8)
  {
    sub_1000130EC((uint64_t)&v7, &qword_10017D878);
    id v4 = [objc_allocWithZone((Class)NSProcessInfo) init];
    uint64_t v8 = sub_10000483C(0, &qword_10017D880);
    uint64_t v9 = &off_10016C680;
    *(void *)&long long v7 = v4;
    sub_10000469C((uint64_t)&v7, (uint64_t)v6);
    swift_beginAccess();
    sub_1000805D4((uint64_t)v6, v3);
    swift_endAccess();
  }
  return sub_10000372C(&v7, a1);
}

uint64_t sub_10007C7B4(long long *a1)
{
  sub_10000372C(a1, (uint64_t)v3);
  swift_beginAccess();
  sub_1000805D4((uint64_t)v3, v1 + 80);
  return swift_endAccess();
}

void (*sub_10007C80C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  sub_10007C6BC((uint64_t)v3);
  return sub_10007C86C;
}

void sub_10007C86C(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (long long *)(*a1 + 40);
  uint64_t v4 = *a1 + 80;
  if (a2)
  {
    uint64_t v5 = v2[18];
    sub_10000469C(*a1, (uint64_t)v3);
    sub_10000372C(v3, v4);
    swift_beginAccess();
    sub_1000805D4(v4, v5 + 80);
    swift_endAccess();
    sub_10000478C((uint64_t)v2);
  }
  else
  {
    uint64_t v6 = v2[18];
    sub_10000372C((long long *)*a1, (uint64_t)v3);
    swift_beginAccess();
    sub_1000805D4((uint64_t)v3, v6 + 80);
    swift_endAccess();
  }

  free(v2);
}

uint64_t sub_10007C950()
{
  uint64_t v0 = type metadata accessor for POSIXError();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v8 = 8;
  uint64_t v9 = 0;
  uint64_t v4 = String.utf8CString.getter();
  int v5 = sysctlbyname((const char *)(v4 + 32), &v9, &v8, 0, 0);
  swift_release();
  if (!v5) {
    return v9;
  }
  sub_1000D5EB4((uint64_t)v3);
  POSIXError._nsError.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return swift_willThrow();
}

char *sub_10007CAB0()
{
  uint64_t v0 = type metadata accessor for POSIXError();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v10 = 0;
  uint64_t v4 = String.utf8CString.getter();
  int v5 = sysctlbyname((const char *)(v4 + 32), 0, &v10, 0, 0);
  swift_release();
  if (v5)
  {
    sub_1000D5EB4((uint64_t)v3);
    POSIXError._nsError.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    swift_willThrow();
  }
  else
  {
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v7 = String.utf8CString.getter();
    int v8 = sysctlbyname((const char *)(v7 + 32), v6, &v10, 0, 0);
    swift_release();
    if (v8)
    {
      sub_1000D5EB4((uint64_t)v3);
      POSIXError._nsError.getter();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      swift_willThrow();
    }
    else
    {
      uint64_t v3 = (char *)String.init(cString:)();
    }
    swift_slowDealloc();
  }
  return v3;
}

uint64_t sub_10007CCC4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 == 15)
  {
    mach_port_t v4 = sub_1000F5960();
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (!HIDWORD(a1))
    {
      return IOCatalogueSendData(v4, a1, 0, 0);
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  switch(a3 >> 62)
  {
    case 1uLL:
      if ((int)a2 > a2 >> 32) {
        goto LABEL_25;
      }
      swift_retain();
      int v8 = (const char *)__DataStorage._bytes.getter();
      if (!v8) {
        goto LABEL_13;
      }
      uint64_t v9 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v9)) {
        goto LABEL_27;
      }
      v8 += (int)a2 - v9;
LABEL_13:
      __DataStorage._length.getter();
      sub_10007CF68(v8, a1, a2, a3, v15);
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      sub_10002F064(a2, a3);
      swift_retain();
      swift_retain();
      char v12 = (const char *)__DataStorage._bytes.getter();
      if (!v12) {
        goto LABEL_17;
      }
      uint64_t v13 = __DataStorage._offset.getter();
      if (__OFSUB__(v10, v13)) {
        goto LABEL_28;
      }
      v12 += v10 - v13;
LABEL_17:
      if (__OFSUB__(v11, v10)) {
        goto LABEL_26;
      }
      __DataStorage._length.getter();
      sub_10007CF68(v12, a1, a2, a3, v15);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v15, 0, 14);
      goto LABEL_21;
    default:
      v15[0] = a2;
      LOWORD(v15[1]) = a3;
      BYTE2(v15[1]) = BYTE2(a3);
      BYTE3(v15[1]) = BYTE3(a3);
      BYTE4(v15[1]) = BYTE4(a3);
      BYTE5(v15[1]) = BYTE5(a3);
LABEL_21:
      sub_10007CF68((const char *)v15, a1, a2, a3, &v14);
      sub_10002404C(a2, a3);
      return v14;
  }
  sub_10002404C(a2, a3);
  return LODWORD(v15[0]);
}

uint64_t sub_10007CF68@<X0>(const char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  if (!a1) {
    goto LABEL_18;
  }
  mach_port_t v10 = sub_1000F5960();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (HIDWORD(a2))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    JUMPOUT(0x10007D044);
  }
  LODWORD(v11) = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_16;
      }
      unint64_t v11 = HIDWORD(a3) - (int)a3;
LABEL_9:
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_14;
      }
      if (HIDWORD(v11)) {
        goto LABEL_15;
      }
LABEL_11:
      uint64_t result = IOCatalogueSendData(v10, a2, a1, v11);
      *a5 = result;
      return result;
    case 2uLL:
      uint64_t v13 = *(void *)(a3 + 16);
      uint64_t v12 = *(void *)(a3 + 24);
      unint64_t v11 = v12 - v13;
      if (!__OFSUB__(v12, v13)) {
        goto LABEL_9;
      }
      goto LABEL_17;
    case 3uLL:
      goto LABEL_11;
    default:
      LODWORD(v11) = BYTE6(a4);
      goto LABEL_11;
  }
}

uint64_t sub_10007D054(uint64_t a1, uint64_t a2)
{
  v6[0] = a1;
  v6[1] = a2;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_100080A64(v6, a1, a2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10007D0B8(uint64_t a1, uint64_t a2, char a3)
{
  mach_port_t v4 = sub_1000F5960();
  if (a3) {
    uint32_t v5 = 3;
  }
  else {
    uint32_t v5 = 1;
  }
  sub_100072B5C();
  uint64_t v6 = (char *)sub_1000EDF4C();
  sub_100072B64();
  uint64_t result = IOCatalogueTerminate(v4, v5, v6);
  if (result)
  {
    _StringGuts.grow(_:)(55);
    v8._int64_t object = (void *)0x80000001001476D0;
    v8._uint64_t countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 41;
    v10._int64_t object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0xE000000000000000;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(void *)(v11 + 64) = 0;
    *(unsigned char *)(v11 + 72) = 38;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_10007D228(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v76 = (uint64_t)&v70 - v12;
  uint64_t v74 = *(a5 - 1);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = a1;
  uint64_t v72 = v16;
  uint64_t v73 = v13;
  uint64_t v75 = a4;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_75;
      }
      unint64_t v19 = HIDWORD(a2) - (int)a2;
LABEL_6:
      if ((v19 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
      if (HIDWORD(v19)) {
        goto LABEL_74;
      }
      mach_port_t v22 = mach_host_self();
      vm_offset_t response_data = 0;
      mach_msg_type_number_t response_dataCnt = 0;
      *(void *)log_dataCnt = 0;
      vm_offset_t log_data = 0;
      if (a3 >> 62 == 2)
      {
        uint64_t v23 = *(void *)(a2 + 16);
        swift_retain();
        swift_retain();
        vm_offset_t v24 = __DataStorage._bytes.getter();
        if (!v24)
        {
LABEL_12:
          mach_port_t v17 = v22;
          __DataStorage._length.getter();
          uint64_t v26 = kext_request(v22, 0xFF2u, v24, v19, &response_data, &response_dataCnt, &log_data, &log_dataCnt[1], (kern_return_t *)log_dataCnt);
          swift_release();
          swift_release();
          goto LABEL_20;
        }
        uint64_t v25 = __DataStorage._offset.getter();
        if (!__OFSUB__(v23, v25))
        {
          v24 += v23 - v25;
          goto LABEL_12;
        }
        goto LABEL_78;
      }
      if ((int)a2 > a2 >> 32)
      {
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      sub_100012DE4(a2, a3);
      vm_offset_t v27 = __DataStorage._bytes.getter();
      if (v27)
      {
        uint64_t v28 = __DataStorage._offset.getter();
        if (__OFSUB__((int)a2, v28))
        {
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
        v27 += (int)a2 - v28;
      }
      mach_port_t v17 = v22;
      __DataStorage._length.getter();
      uint64_t v26 = kext_request(v22, 0xFF2u, v27, v19, &response_data, &response_dataCnt, &log_data, &log_dataCnt[1], (kern_return_t *)log_dataCnt);
      sub_100012A10(a2, a3);
LABEL_20:
      if (v26)
      {
        uint64_t v29 = sub_1000EDA88(v26);
        uint64_t v31 = v30;
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v32 = v29;
        *(void *)(v32 + 8) = v31;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(_OWORD *)(v32 + 48) = 0u;
        *(void *)(v32 + 64) = 0;
        char v33 = 2;
        goto LABEL_22;
      }
      unint64_t v36 = (const char *)log_data;
      if (!log_data)
      {
        uint64_t v44 = _swiftEmptyArrayStorage;
        uint64_t v45 = log_dataCnt[0];
        if (log_dataCnt[0]) {
          goto LABEL_34;
        }
LABEL_41:
        if (a5 == (void *)((char *)&type metadata for () + 8))
        {
          uint64_t v68 = v44;
          swift_dynamicCast();
          if (response_data && response_dataCnt) {
            vm_deallocate(mach_task_self_, response_data, response_dataCnt);
          }
          if (log_data) {
            vm_deallocate(mach_task_self_, log_data, log_dataCnt[1]);
          }
          if (!v17) {
            return (uint64_t)v68;
          }
          goto LABEL_56;
        }
        vm_offset_t v54 = response_data;
        if (response_data && response_dataCnt)
        {
          uint64_t v55 = v76;
          vm_size_t v71 = response_dataCnt;
          sub_1000F023C((const char *)response_data, (uint64_t)a5, v76);
          uint64_t v56 = v74;
          if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v74 + 48))(v55, 1, a5) == 1)
          {
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v55, v73);
            sub_100012E3C();
            swift_allocError();
            *(void *)uint64_t v57 = 0xD000000000000026;
            *(void *)(v57 + 8) = 0x8000000100147760;
            *(_OWORD *)(v57 + 16) = 0u;
            *(_OWORD *)(v57 + 32) = 0u;
            *(_OWORD *)(v57 + 48) = 0u;
            *(void *)(v57 + 64) = 0;
            *(unsigned char *)(v57 + 72) = 1;
            goto LABEL_61;
          }
          uint64_t v68 = v44;
          uint64_t v69 = *(void (**)(char *, uint64_t, void *))(v56 + 32);
          v69(v15, v55, a5);
          v69(v77, (uint64_t)v15, a5);
          vm_deallocate(mach_task_self_, v54, v71);
          if (v36) {
            vm_deallocate(mach_task_self_, (vm_address_t)v36, log_dataCnt[1]);
          }
          if (!v17) {
            return (uint64_t)v68;
          }
LABEL_56:
          mach_port_deallocate(mach_task_self_, v17);
          return (uint64_t)v68;
        }
        swift_bridgeObjectRelease();
        *(void *)&long long v84 = 0;
        *((void *)&v84 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(58);
        v65._uint64_t countAndFlagsBits = 0xD000000000000038;
        v65._int64_t object = (void *)0x8000000100147790;
        String.append(_:)(v65);
        v66._uint64_t countAndFlagsBits = Data.description.getter();
        String.append(_:)(v66);
        swift_bridgeObjectRelease();
        long long v67 = v84;
        sub_100012E3C();
        swift_allocError();
        *(_OWORD *)uint64_t v63 = v67;
        goto LABEL_59;
      }
      if (!log_dataCnt[1])
      {
        uint64_t v44 = _swiftEmptyArrayStorage;
        uint64_t v45 = log_dataCnt[0];
        if (log_dataCnt[0]) {
          goto LABEL_34;
        }
        goto LABEL_41;
      }
      uint64_t v37 = sub_100004700(&qword_10017D888);
      sub_1000F023C(v36, v37, (uint64_t)&v84);
      uint64_t v38 = v84;
      if (!(void)v84)
      {
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v32 = 0xD00000000000001FLL;
        *(void *)(v32 + 8) = 0x8000000100147710;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(_OWORD *)(v32 + 48) = 0u;
        *(void *)(v32 + 64) = 0;
        char v33 = 1;
LABEL_22:
        *(unsigned char *)(v32 + 72) = v33;
        uint64_t result = swift_willThrow();
        vm_offset_t v35 = response_data;
        if (!response_data) {
          goto LABEL_64;
        }
LABEL_62:
        if (response_dataCnt) {
          uint64_t result = vm_deallocate(mach_task_self_, v35, response_dataCnt);
        }
        goto LABEL_64;
      }
      if (!*(void *)(v84 + 16)) {
        goto LABEL_80;
      }
      uint64_t v39 = swift_bridgeObjectRetain();
      unint64_t v40 = sub_10007DC48(v39);
      swift_bridgeObjectRelease();
      if (!v40) {
        goto LABEL_58;
      }
      LODWORD(v71) = v17;
      if (*(void *)(v38 + 16) < 2uLL) {
LABEL_81:
      }
        __break(1u);
      uint64_t v41 = *(void *)(v38 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v42 = sub_10007DD88(v41);
      swift_bridgeObjectRelease();
      if (v42)
      {
        uint64_t v43 = v78;
        uint64_t v44 = sub_10007DED0((uint64_t)v40, (uint64_t)v42);
        uint64_t v78 = v43;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        mach_port_t v17 = v71;
        uint64_t v45 = log_dataCnt[0];
        if (!log_dataCnt[0]) {
          goto LABEL_41;
        }
LABEL_34:
        int64_t v46 = v44[2];
        if (v46)
        {
          LODWORD(v71) = v17;
          *(void *)&long long v84 = _swiftEmptyArrayStorage;
          sub_10000C884(0, v46, 0);
          char v47 = (void *)v84;
          uint64_t v78 = v44;
          uint64_t v48 = v44 + 6;
          do
          {
            uint64_t v50 = *(v48 - 1);
            uint64_t v49 = *v48;
            *(void *)&long long v84 = v47;
            unint64_t v51 = v47[2];
            unint64_t v52 = v47[3];
            swift_bridgeObjectRetain();
            if (v51 >= v52 >> 1)
            {
              sub_10000C884(v52 > 1, v51 + 1, 1);
              char v47 = (void *)v84;
            }
            void v47[2] = v51 + 1;
            uint64_t v53 = &v47[2 * v51];
            v53[4] = v50;
            v53[5] = v49;
            v48 += 3;
            --v46;
          }
          while (v46);
          swift_bridgeObjectRelease();
          mach_port_t v17 = v71;
        }
        else
        {
          swift_bridgeObjectRelease();
          char v47 = _swiftEmptyArrayStorage;
        }
        *(void *)&long long v84 = sub_1000EDA88(v45);
        *((void *)&v84 + 1) = v58;
        v59._uint64_t countAndFlagsBits = 10272;
        v59._int64_t object = (void *)0xE200000000000000;
        String.append(_:)(v59);
        int v79 = v45;
        v60._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v60);
        swift_bridgeObjectRelease();
        v61._uint64_t countAndFlagsBits = 41;
        v61._int64_t object = (void *)0xE100000000000000;
        String.append(_:)(v61);
        long long v62 = v84;
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v63 = v47;
        *(_OWORD *)(v63 + 8) = v62;
        *(_OWORD *)(v63 + 24) = 0u;
        *(_OWORD *)(v63 + 40) = 0u;
        *(_OWORD *)(v63 + 56) = 0u;
        char v64 = 3;
        goto LABEL_60;
      }
      mach_port_t v17 = v71;
LABEL_58:
      swift_bridgeObjectRelease();
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v63 = 0xD000000000000025;
      *(void *)(v63 + 8) = 0x8000000100147730;
LABEL_59:
      *(_OWORD *)(v63 + 16) = 0u;
      *(_OWORD *)(v63 + 32) = 0u;
      *(_OWORD *)(v63 + 48) = 0u;
      *(void *)(v63 + 64) = 0;
      char v64 = 1;
LABEL_60:
      *(unsigned char *)(v63 + 72) = v64;
LABEL_61:
      uint64_t result = swift_willThrow();
      vm_offset_t v35 = response_data;
      if (response_data) {
        goto LABEL_62;
      }
LABEL_64:
      if (log_data) {
        uint64_t result = vm_deallocate(mach_task_self_, log_data, log_dataCnt[1]);
      }
      if (v17) {
        return mach_port_deallocate(mach_task_self_, v17);
      }
      return result;
    case 2uLL:
      uint64_t v21 = *(void *)(a2 + 16);
      uint64_t v20 = *(void *)(a2 + 24);
      unint64_t v19 = v20 - v21;
      if (!__OFSUB__(v20, v21)) {
        goto LABEL_6;
      }
      goto LABEL_76;
    case 3uLL:
      mach_port_t v17 = mach_host_self();
      mach_msg_type_number_t response_dataCnt = 0;
      *(void *)log_dataCnt = 0;
      vm_offset_t log_data = 0;
      *(void *)((char *)&v84 + 6) = 0;
      vm_offset_t response_data = 0;
      *(void *)&long long v84 = 0;
      uint64_t v18 = kext_request(v17, 0xFF2u, (vm_offset_t)&v84, 0, &response_data, &response_dataCnt, &log_data, &log_dataCnt[1], (kern_return_t *)log_dataCnt);
      goto LABEL_14;
    default:
      mach_port_t v17 = mach_host_self();
      vm_offset_t response_data = 0;
      mach_msg_type_number_t response_dataCnt = 0;
      *(void *)log_dataCnt = 0;
      vm_offset_t log_data = 0;
      *(void *)&long long v84 = a2;
      WORD4(v84) = a3;
      BYTE10(v84) = BYTE2(a3);
      BYTE11(v84) = BYTE3(a3);
      BYTE12(v84) = BYTE4(a3);
      BYTE13(v84) = BYTE5(a3);
      uint64_t v18 = kext_request(v17, 0xFF2u, (vm_offset_t)&v84, BYTE6(a3), &response_data, &response_dataCnt, &log_data, &log_dataCnt[1], (kern_return_t *)log_dataCnt);
LABEL_14:
      uint64_t v26 = v18;
      goto LABEL_20;
  }
}

void *sub_10007DC48(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  sub_10007F9FC(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_1000047DC(i, (uint64_t)v9);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10007F9FC(0, v3[2] + 1, 1);
        uint64_t v3 = v10;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_10007F9FC((char *)(v5 > 1), v6 + 1, 1);
        uint64_t v3 = v10;
      }
      v3[2] = v6 + 1;
      v3[v6 + 4] = v8;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    return 0;
  }
  return v3;
}

void *sub_10007DD88(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  sub_10000C884(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_1000047DC(i, (uint64_t)v11);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10000C884(0, v3[2] + 1, 1);
        uint64_t v3 = v12;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_10000C884(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v12;
      }
      v3[2] = v6 + 1;
      uint64_t v7 = &v3[2 * v6];
      _OWORD v7[4] = v9;
      v7[5] = v10;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

void *sub_10007DED0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  sub_10007F9DC(0, v6, 0);
  uint64_t v31 = a2;
  uint64_t v32 = a1;
  int64_t v29 = v6;
  unint64_t v33 = v4;
  int64_t v30 = v5;
  if (v6)
  {
    uint64_t v7 = (unint64_t *)(a1 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t *)(a2 + 40);
    unint64_t v9 = v4;
    while (v9)
    {
      if (!v5) {
        goto LABEL_40;
      }
      unint64_t v10 = *v7;
      if ((*v7 & 0x8000000000000000) != 0) {
        goto LABEL_41;
      }
      if (HIDWORD(v10)) {
        goto LABEL_42;
      }
      uint64_t v34 = *v8;
      uint64_t v36 = *(v8 - 1);
      switch(v10 & 7)
      {
        case 1uLL:
          swift_bridgeObjectRetain();
          char v11 = static os_log_type_t.error.getter();
          break;
        case 3uLL:
          swift_bridgeObjectRetain();
          char v11 = static os_log_type_t.info.getter();
          break;
        case 7uLL:
          swift_bridgeObjectRetain();
          char v11 = static os_log_type_t.debug.getter();
          break;
        default:
          swift_bridgeObjectRetain();
          char v11 = static os_log_type_t.default.getter();
          break;
      }
      char v12 = v11;
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_10007F9DC((char *)(v13 > 1), v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      unint64_t v15 = &_swiftEmptyArrayStorage[3 * v14];
      *((unsigned char *)v15 + 32) = v12;
      --v5;
      void v15[5] = v36;
      v15[6] = v34;
      --v9;
      v8 += 2;
      ++v7;
      if (!--v6) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    JUMPOUT(0x10007E20CLL);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_20:
  if (v33 > v30)
  {
    uint64_t v16 = 0;
    if (v29 <= v30) {
      int64_t v17 = v30;
    }
    else {
      int64_t v17 = v29;
    }
    int64_t v35 = v17 - v29;
    unint64_t v18 = v33 - v29;
    unint64_t v19 = (uint64_t *)(v31 + 16 * v29 + 40);
    while (v18 != v16)
    {
      if (v30 - v29 == v16) {
        goto LABEL_38;
      }
      if (v35 == v16) {
        goto LABEL_44;
      }
      unint64_t v20 = *(void *)(v32 + 8 * v29 + 32 + 8 * v16);
      if ((v20 & 0x8000000000000000) != 0) {
        goto LABEL_45;
      }
      if (HIDWORD(v20)) {
        goto LABEL_46;
      }
      uint64_t v22 = *(v19 - 1);
      uint64_t v21 = *v19;
      switch(v20 & 7)
      {
        case 1uLL:
          swift_bridgeObjectRetain();
          char v23 = static os_log_type_t.error.getter();
          break;
        case 3uLL:
          swift_bridgeObjectRetain();
          char v23 = static os_log_type_t.info.getter();
          break;
        case 7uLL:
          swift_bridgeObjectRetain();
          char v23 = static os_log_type_t.debug.getter();
          break;
        default:
          swift_bridgeObjectRetain();
          char v23 = static os_log_type_t.default.getter();
          break;
      }
      char v24 = v23;
      unint64_t v26 = _swiftEmptyArrayStorage[2];
      unint64_t v25 = _swiftEmptyArrayStorage[3];
      if (v26 >= v25 >> 1) {
        sub_10007F9DC((char *)(v25 > 1), v26 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v26 + 1;
      vm_offset_t v27 = &_swiftEmptyArrayStorage[3 * v26];
      *((unsigned char *)v27 + 32) = v24;
      v27[5] = v22;
      v27[6] = v21;
      ++v16;
      v19 += 2;
      if (v18 == v16) {
        goto LABEL_38;
      }
    }
    goto LABEL_43;
  }
LABEL_38:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10007E244()
{
  mach_port_t v0 = sub_1000F5960();
  io_registry_entry_t RootEntry = IORegistryGetRootEntry(v0);
  if (RootEntry)
  {
    io_registry_entry_t v2 = RootEntry;
    uint64_t v3 = (__CFString *)String._bridgeToObjectiveC()();
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);

    if (CFProperty)
    {
      CFTypeID v5 = CFGetTypeID(CFProperty);
      if (v5 == CFNumberGetTypeID())
      {
        int64_t v6 = (__CFString *)String._bridgeToObjectiveC()();
        CFTypeRef v7 = IORegistryEntryCreateCFProperty(v2, v6, kCFAllocatorDefault, 0);

        if (v7)
        {
          CFTypeID v8 = CFGetTypeID(v7);
          if (v8 == CFNumberGetTypeID())
          {
            swift_unknownObjectRetain();
            self;
            if (swift_dynamicCastObjCClass()) {
              static Int32._conditionallyBridgeFromObjectiveC(_:result:)();
            }
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            goto LABEL_15;
          }
          swift_unknownObjectRelease();
        }
        static os_log_type_t.error.getter();
        sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
        unint64_t v9 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_unknownObjectRelease();
LABEL_14:

LABEL_15:
        IOObjectRelease(v2);
        return 0;
      }
      swift_unknownObjectRelease();
    }
    static os_log_type_t.error.getter();
    sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
    unint64_t v9 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    goto LABEL_14;
  }
  return 0;
}

uint64_t sub_10007E60C()
{
  mach_port_t v0 = sub_1000F5960();
  io_registry_entry_t v1 = IORegistryEntryFromPath(v0, "IODeviceTree:/chosen");
  if (!v1) {
    goto LABEL_9;
  }
  io_registry_entry_t v2 = v1;
  uint64_t v3 = (__CFString *)String._bridgeToObjectiveC()();
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);

  if (!CFProperty) {
    goto LABEL_9;
  }
  CFTypeID v5 = CFGetTypeID(CFProperty);
  if (v5 != CFDataGetTypeID())
  {
    swift_unknownObjectRelease();
LABEL_9:
    static os_log_type_t.error.getter();
    sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
    CFTypeRef v7 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    goto LABEL_10;
  }
  swift_unknownObjectRetain();
  if (swift_dynamicCast())
  {
    uint64_t v6 = v21;
    switch(v22 >> 62)
    {
      case 1uLL:
        if ((int)v21 > v21 >> 32)
        {
          __break(1u);
LABEL_22:
          __break(1u);
        }
        else
        {
          sub_100012DE4(v21, v22);
          uint64_t v9 = __DataStorage._bytes.getter();
          if (!v9)
          {
LABEL_24:
            __DataStorage._length.getter();
            __break(1u);
LABEL_25:
            __DataStorage._length.getter();
            __break(1u);
            JUMPOUT(0x10007E96CLL);
          }
          uint64_t v10 = v9;
          uint64_t v11 = __DataStorage._offset.getter();
          uint64_t v12 = (int)v21 - v11;
          if (!__OFSUB__((int)v21, v11))
          {
            __DataStorage._length.getter();
            uint64_t v13 = *(void *)(v10 + v12);
            sub_100012A10(v21, v22);
            swift_unknownObjectRelease();
            sub_100012A10(v21, v22);
            return v13;
          }
        }
        __break(1u);
        goto LABEL_24;
      case 2uLL:
        uint64_t v14 = *(void *)(v21 + 16);
        swift_retain();
        swift_retain();
        uint64_t v15 = __DataStorage._bytes.getter();
        if (!v15) {
          goto LABEL_25;
        }
        uint64_t v16 = v15;
        uint64_t v17 = __DataStorage._offset.getter();
        BOOL v18 = __OFSUB__(v14, v17);
        uint64_t v19 = v14 - v17;
        if (v18) {
          goto LABEL_22;
        }
        __DataStorage._length.getter();
        uint64_t v20 = *(void *)(v16 + v19);
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        sub_100012A10(v21, v22);
        return v20;
      case 3uLL:
        swift_unknownObjectRelease();
        sub_100012A10(v21, v22);
        return 0;
      default:
        swift_unknownObjectRelease();
        sub_100012A10(v21, v22);
        return v6;
    }
  }
  static os_log_type_t.error.getter();
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  CFTypeRef v7 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_unknownObjectRelease();
LABEL_10:

  return 0;
}

char sub_10007E97C()
{
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t *)sub_1000A1A54();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v0 + 592);
  swift_bridgeObjectRetain();
  Swift::Int v7 = v6(v4, v5);
  char result = swift_bridgeObjectRelease();
  if (!v2)
  {
    char result = j___s10driverkitd13ApprovalStateO8rawValueACSgSi_tcfC(v7).value;
    if (result == 3)
    {
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v10 = 0xD000000000000023;
      *(void *)(v10 + 8) = 0x8000000100147900;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)(v10 + 48) = 0u;
      *(void *)(v10 + 64) = 0;
      *(unsigned char *)(v10 + 72) = 9;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_10007EAD8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t sub_10007EB04()
{
  sub_1000805AC(v0[3], v0[4]);
  swift_bridgeObjectRelease();
  sub_1000805AC(v0[7], v0[8]);
  sub_1000130EC((uint64_t)(v0 + 10), &qword_10017D878);

  return _swift_deallocClassInstance(v0, 120, 7);
}

double sub_10007EB5C()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001359C0;
  *(void *)(v0 + 32) = 1;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 1;
  *(_DWORD *)(v0 + 72) = 514;
  *(_WORD *)(v0 + 76) = 513;
  double result = 0.0;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(void *)(v0 + 112) = 0;
  return result;
}

uint64_t sub_10007EBB8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))() & 1;
}

uint64_t sub_10007EC00()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))() & 1;
}

uint64_t sub_10007EC50()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280))() & 1;
}

uint64_t sub_10007ECA0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 304))() & 1;
}

uint64_t sub_10007ECF0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 376))() & 1;
}

uint64_t sub_10007ED40()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 328))() & 1;
}

uint64_t sub_10007ED90()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 352))() & 1;
}

uint64_t sub_10007EDE0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))() & 1;
}

uint64_t sub_10007EE28()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 424))();
}

uint64_t sub_10007EE74()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 400))();
}

uint64_t sub_10007EEC0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 448))();
}

uint64_t sub_10007EF0C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 472))() & 1;
}

uint64_t sub_10007EF5C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 496))() & 1;
}

uint64_t sub_10007EFAC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 520))() & 0x1FF;
}

uint64_t sub_10007F004()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 544))() & 1;
}

uint64_t sub_10007F054()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 568))();
}

uint64_t sub_10007F0A0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 632))();
}

uint64_t sub_10007F0EC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 592))();
}

uint64_t sub_10007F138()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 600))();
}

uint64_t sub_10007F184()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 608))();
}

uint64_t sub_10007F1D0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 616))();
}

uint64_t sub_10007F21C(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(**(void **)v3 + 624))(a1, a2, a3 & 1);
}

uint64_t sub_10007F26C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 640))();
}

uint64_t sub_10007F2B8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 664))();
}

uint64_t sub_10007F304()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 648))();
}

uint64_t sub_10007F354()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 656))();
}

uint64_t sub_10007F3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v6 = sub_1000045E8(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_10000464C(a1, v7);
  return sub_10007F438((uint64_t)v10, v7, v8);
}

uint64_t sub_10007F438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000469C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100004700(&qword_10017D890);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_10000478C(a1);
}

uint64_t sub_10007F4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017D890);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32);

  return v5(v4, v4, a1);
}

uint64_t sub_10007F520(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017DCD0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v11) {
      break;
    }
    char v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    long long v39 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v17 == v28;
        if (v17 == v28) {
          unint64_t v17 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      unint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 16 * v18;
    uint64_t v20 = (void *)(*(void *)(v7 + 48) + v19);
    *uint64_t v20 = v34;
    v20[1] = v33;
    *(_OWORD *)(*(void *)(v7 + 56) + v19) = v39;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  char v24 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void *sub_10007F830()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017DCD0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_10007F9DC(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007FA1C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_10007F9FC(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007FB38(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_10007FA1C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017DCC8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_10007FB38(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017DCB8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

unsigned __int8 *sub_10007FC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_100081244();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_100014E6C();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  int64_t v13 = sub_10007FE10(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_10007FD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100014E6C();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v11 = sub_10007FE10(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_10007FE10(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10008008C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    unsigned int v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unsigned int v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_10008063C((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_100080160()
{
  if (qword_100186140 != -1) {
LABEL_21:
  }
    swift_once();
  uint64_t v0 = qword_1001993E0;
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)sub_100077C98((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v2 = *(void *)(v0 + 16);
  if (!v2)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return (uint64_t)v1;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  while (1)
  {
    long long v21 = *(_OWORD *)(v0 + 16 * v3 + 32);
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(v0 + 16 * v3 + 40) + 8))();
    uint64_t v6 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v9 = sub_1000048E0(v4, v6);
    uint64_t v10 = v1[2];
    BOOL v11 = (v8 & 1) == 0;
    uint64_t v12 = v10 + v11;
    if (__OFADD__(v10, v11))
    {
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    char v13 = v8;
    if (v1[3] < v12) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v8) {
        goto LABEL_4;
      }
    }
    else
    {
      sub_10007F830();
      if (v13)
      {
LABEL_4:
        *(_OWORD *)(v1[7] + 16 * v9) = v21;
        goto LABEL_5;
      }
    }
LABEL_13:
    v1[(v9 >> 6) + 8] |= 1 << v9;
    unsigned __int8 v16 = (uint64_t *)(v1[6] + 16 * v9);
    uint64_t *v16 = v4;
    v16[1] = v6;
    *(_OWORD *)(v1[7] + 16 * v9) = v21;
    uint64_t v17 = v1[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_20;
    }
    v1[2] = v19;
    swift_bridgeObjectRetain();
LABEL_5:
    ++v3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v2 == v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
  sub_10007F520(v12, isUniquelyReferenced_nonNull_native);
  unint64_t v14 = sub_1000048E0(v4, v6);
  if ((v13 & 1) == (v15 & 1))
  {
    unint64_t v9 = v14;
    if (v13) {
      goto LABEL_4;
    }
    goto LABEL_13;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10008038C(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

unint64_t sub_1000803E0(Swift::String string)
{
  int64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._int64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10016C2A0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_10008042C()
{
  unint64_t result = qword_10017D860;
  if (!qword_10017D860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D860);
  }
  return result;
}

void type metadata accessor for CFData(uint64_t a1)
{
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
}

unint64_t sub_1000804A8(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  unint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    unint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

unint64_t sub_100080558()
{
  unint64_t result = qword_10017D870;
  if (!qword_10017D870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D870);
  }
  return result;
}

uint64_t sub_1000805AC(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000805C0(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000805D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017D878);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008063C(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = sub_100015358(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_100015358(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_100015358(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  uint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    uint64_t v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          uint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_100080A64(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for String.Encoding();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  if ((v10 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = sub_100014E6C();
    uint64_t v20 = v15;
    swift_bridgeObjectRelease();
    uint64_t v10 = v20;
    *a1 = v11;
    a1[1] = v10;
    if ((v10 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v18 = v11;
    uint64_t v19 = v10 & 0xFFFFFFFFFFFFFFLL;
    v17[0] = a2;
    v17[1] = a3;
    static String.Encoding.utf8.getter();
    sub_100029B24();
    StringProtocol.lengthOfBytes(using:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    mach_port_t v13 = sub_1000F5960();
    unint64_t v14 = (char *)&v18;
    return IOCatalogueModuleLoaded(v13, v14);
  }
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v11 & 0x1000000000000000) != 0)
  {
    uint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v12 = _StringObject.sharedUTF8.getter();
    if (!v12) {
      return 4;
    }
  }
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  static String.Encoding.utf8.getter();
  sub_100029B24();
  StringProtocol.lengthOfBytes(using:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  mach_port_t v13 = sub_1000F5960();
  unint64_t v14 = (char *)v12;
  return IOCatalogueModuleLoaded(v13, v14);
}

unint64_t sub_100080C34()
{
  unint64_t result = qword_10017D8B0;
  if (!qword_10017D8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D8B0);
  }
  return result;
}

uint64_t sub_100080C88()
{
  return sub_10001348C(&qword_10017D8B8, &qword_10017D8C0);
}

ValueMetadata *type metadata accessor for KernelRequests()
{
  return &type metadata for KernelRequests;
}

void *initializeBufferWithCopyOfBuffer for KernelRequests.GetRequests(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KernelRequests.GetRequests(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for VariantKind(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void *assignWithTake for KernelRequests.GetRequests(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for KernelRequests.GetRequests()
{
  return &type metadata for KernelRequests.GetRequests;
}

ValueMetadata *type metadata accessor for KernelRequests.GetLoaded()
{
  return &type metadata for KernelRequests.GetLoaded;
}

unsigned char *storeEnumTagSinglePayload for KernelRequests.GetLoaded.LoadedOption(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100080E74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelRequests.GetLoaded.LoadedOption()
{
  return &type metadata for KernelRequests.GetLoaded.LoadedOption;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadExtension()
{
  return &type metadata for KernelRequests.LoadExtension;
}

ValueMetadata *type metadata accessor for KernelRequests.UnloadExtension()
{
  return &type metadata for KernelRequests.UnloadExtension;
}

ValueMetadata *type metadata accessor for KernelRequests.SendResource()
{
  return &type metadata for KernelRequests.SendResource;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadFileset()
{
  return &type metadata for KernelRequests.LoadFileset;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadCodeless()
{
  return &type metadata for KernelRequests.LoadCodeless;
}

ValueMetadata *type metadata accessor for KernelRequests.DextLaunch()
{
  return &type metadata for KernelRequests.DextLaunch;
}

ValueMetadata *type metadata accessor for KernelRequests.RequestResource()
{
  return &type metadata for KernelRequests.RequestResource;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadRequest()
{
  return &type metadata for KernelRequests.LoadRequest;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadNotification()
{
  return &type metadata for KernelRequests.LoadNotification;
}

ValueMetadata *type metadata accessor for KernelRequests.UnloadNotification()
{
  return &type metadata for KernelRequests.UnloadNotification;
}

ValueMetadata *type metadata accessor for KernelRequests.RequestExit()
{
  return &type metadata for KernelRequests.RequestExit;
}

ValueMetadata *type metadata accessor for KernelRequests.MissingAuxKCBundles()
{
  return &type metadata for KernelRequests.MissingAuxKCBundles;
}

ValueMetadata *type metadata accessor for KernelRequests.AuxKCBundleAvailable()
{
  return &type metadata for KernelRequests.AuxKCBundleAvailable;
}

ValueMetadata *type metadata accessor for KernelRequests.GetDaemonActive()
{
  return &type metadata for KernelRequests.GetDaemonActive;
}

ValueMetadata *type metadata accessor for KernelRequests.GetDrivers()
{
  return &type metadata for KernelRequests.GetDrivers;
}

uint64_t _s10driverkitd14KernelRequestsO11GetRequestsVwet_0(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s10driverkitd14KernelRequestsO11GetRequestsVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelRequests.DextUpdateNotification()
{
  return &type metadata for KernelRequests.DextUpdateNotification;
}

uint64_t sub_10008105C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KernelLogMessage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KernelLogMessage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KernelLogMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KernelLogMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelLogMessage()
{
  return &type metadata for KernelLogMessage;
}

ValueMetadata *type metadata accessor for IOTerminationAction()
{
  return &type metadata for IOTerminationAction;
}

uint64_t type metadata accessor for RealKernelClient()
{
  return self;
}

void type metadata accessor for OSLogType(uint64_t a1)
{
}

void sub_1000811FC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

unint64_t sub_100081244()
{
  unint64_t result = qword_10017DCC0;
  if (!qword_10017DCC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DCC0);
  }
  return result;
}

uint64_t sub_1000812B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000812C0()
{
  return swift_release();
}

uint64_t sub_1000812C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100081378(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*sub_100081430())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100081498()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000814F0(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 104));
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_100081550())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000815B8(int a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1000815F8(a1);
  return v2;
}

uint64_t sub_1000815F8(int a1)
{
  uint64_t v3 = *v1;
  v10[0] = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v10[0] - 8);
  __chkstk_darwin(v10[0]);
  unsigned int v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 56))((uint64_t)v1 + *(void *)(v3 + 96), 1, 1);
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 104)) = 0;
  if (a1)
  {
    *(_DWORD *)((char *)v1 + *(void *)(*v1 + 120)) = a1;
    sub_10000483C(0, (unint64_t *)&qword_10017DCE0);
    static DispatchQoS.userInitiated.getter();
    v10[1] = _swiftEmptyArrayStorage;
    sub_100086654((unint64_t *)&qword_10017DCE8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_100004700(&qword_10017DCF0);
    sub_10008669C((unint64_t *)&qword_10017DCF8, &qword_10017DCF0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, void))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v10[0]);
    *(uint64_t *)((char *)v1 + *(void *)(*v1 + 112)) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    return (uint64_t)v1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_100081950()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 152))();
  if (result)
  {
    self;
    swift_dynamicCastObjCClassUnconditional();
    dispatch_mig_server();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000819F8(_DWORD *a1, uint64_t a2)
{
  static os_log_type_t.info.getter();
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  uint64_t v4 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  int v5 = sub_1000034D8(a1, a2);
  if (!v5)
  {
    static os_log_type_t.error.getter();
    unsigned int v6 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
  }
  sub_10000483C(0, (unint64_t *)&unk_10017DEC0);
  Class isa = NSNumber.init(BOOLeanLiteral:)(v5 != 0).super.super.isa;
  uint64_t v8 = Int32.init(truncating:)();

  return v8;
}

void sub_100081B50()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v21 = v5;
  uint64_t v22 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000483C(0, &qword_10017DD00);
  uint64_t v9 = static OS_dispatch_source.makeMachReceiveSource(port:queue:)();
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 160))(v9);
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 152);
  if (v11(v10))
  {
    swift_getObjectType();
    unsigned int v27 = sub_100081F94;
    uint64_t v28 = v0;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    v19[1] = &v25;
    unsigned __int8 v25 = sub_10000AFF8;
    uint64_t v26 = &unk_10016D2B8;
    uint64_t v12 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    sub_100081FC4();
    OS_dispatch_source.setCancelHandler(qos:flags:handler:)();
    _Block_release(v12);
    swift_unknownObjectRelease();
    uint64_t v13 = v2 + 8;
    unint64_t v14 = *(void (**)(char *, uint64_t))(v2 + 8);
    _OWORD v19[2] = v13;
    uint64_t v20 = v1;
    v14(v4, v1);
    uint64_t v15 = *(void (**)(char *, uint64_t))(v22 + 8);
    v22 += 8;
    v15(v8, v21);
    uint64_t v16 = swift_release();
    if (v11(v16))
    {
      swift_getObjectType();
      swift_retain();
      unsigned int v27 = sub_1000866EC;
      uint64_t v28 = v0;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v24 = 1107296256;
      unsigned __int8 v25 = sub_10000AFF8;
      uint64_t v26 = &unk_10016D2E0;
      unint64_t v17 = _Block_copy(&aBlock);
      static DispatchQoS.unspecified.getter();
      sub_100081FC4();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)();
      _Block_release(v17);
      swift_unknownObjectRelease();
      v14(v4, v20);
      v15(v8, v21);
      swift_release();
      unsigned int v27 = sub_10008208C;
      uint64_t v28 = v0;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v24 = 1107296256;
      unsigned __int8 v25 = sub_10000AFF8;
      uint64_t v26 = &unk_10016D308;
      uint64_t v18 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      sub_100003288(v18);
      _Block_release(v18);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100081F94()
{
  return mach_port_mod_refs(mach_task_self_, *(_DWORD *)(v0 + *(void *)(*(void *)v0 + 120)), 1u, -1);
}

uint64_t sub_100081FC4()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10008208C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t sub_1000820B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = *(void *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v10 - v5, a1, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v6, 0, 1, v3);
  uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)v1 + 136))(v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 192))(v8);
}

uint64_t sub_1000821F4()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 152))();
  if (result)
  {
    swift_getObjectType();
    OS_dispatch_source.activate()();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10008225C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t))(v1 + 128))(v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v7, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
LABEL_6:
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    return sub_1000130EC((uint64_t)&v11, &qword_10017DD08);
  }
  sub_100004700((uint64_t *)&unk_10017DD10);
  if (!swift_dynamicCast()) {
    goto LABEL_6;
  }
  if (*((void *)&v12 + 1))
  {
    sub_10000372C(&v11, (uint64_t)v14);
    uint64_t v8 = v15;
    uint64_t v9 = v16;
    sub_1000036B0(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
    return sub_10000478C((uint64_t)v14);
  }
  return sub_1000130EC((uint64_t)&v11, &qword_10017DD08);
}

uint64_t sub_100082448()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease();

  return v0;
}

uint64_t sub_100082508()
{
  sub_100082448();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100082560()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t sub_1000825A4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t sub_1000825E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)v1 + *(void *)((swift_isaMask & *v1) + 0x60);
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000826D4(uint64_t a1)
{
  uint64_t v3 = (char *)v1 + *(void *)((swift_isaMask & *v1) + 0x60);
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*sub_1000827C8())()
{
  return j__swift_endAccess;
}

uint64_t sub_100082840(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v9 - v5, a1, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v6, 0, 1, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *))((swift_isaMask & *v1) + 0x88))(v6);
}

id sub_1000829A8()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  id v5 = (id)*sub_1000EFCB4();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return [*(id *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68)) resume];
}

void *sub_100082AE8(void *a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_100082B34(a1, a2, a3);
}

void *sub_100082B34(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  unsigned __int8 v33 = a1;
  id v5 = (void *)(swift_isaMask & *(void *)v3);
  uint64_t v30 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v30);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v11 = &v4[v5[12]];
  uint64_t v12 = v5[11];
  uint64_t v13 = v5[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v11, 1, 1, AssociatedTypeWitness);
  uint64_t v29 = sub_10000483C(0, (unint64_t *)&qword_10017DCE0);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  uint64_t v15 = v4;
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = _swiftEmptyArrayStorage;
  sub_100086654((unint64_t *)&qword_10017DCE8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100004700(&qword_10017DCF0);
  sub_10008669C((unint64_t *)&qword_10017DCF8, &qword_10017DCF0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v15[*(void *)((swift_isaMask & *(void *)v15) + 0x70)] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v16 = v33;
  *(void *)&v15[*(void *)((swift_isaMask & *(void *)v15) + 0x68)] = v33;
  unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 32);
  id v18 = v16;
  uint64_t v19 = (void *)v17(v13, v12);
  id v20 = [self interfaceWithProtocol:v19];

  *(void *)&v15[*(void *)((swift_isaMask & *(void *)v15) + 0x78)] = v20;
  uint64_t v21 = (objc_class *)type metadata accessor for NSXPCRequestSource();
  v34.receiver = v15;
  v34.super_class = v21;
  uint64_t v22 = [super init];
  unsigned __int8 v23 = *(void **)((char *)v22 + *(void *)((swift_isaMask & *v22) + 0x68));
  uint64_t v24 = v22;
  [v23 setDelegate:v24];
  unsigned __int8 v25 = *(void **)((char *)v24 + *(void *)((swift_isaMask & *v24) + 0x70));
  id v26 = v23;
  id v27 = v25;
  [v26 _setQueue:v27];

  return v24;
}

uint64_t type metadata accessor for NSXPCRequestSource()
{
  return sub_100004FAC();
}

uint64_t sub_100082FC4(uint64_t a1, void *a2)
{
  return sub_100085370(a2);
}

uint64_t sub_100082FCC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  char v9 = sub_100085370(v7);

  return v9 & 1;
}

void sub_10008302C()
{
}

id sub_100083070()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NSXPCRequestSource();
  return [super dealloc];
}

void sub_1000830E4(void *a1)
{
  objc_super v2 = (char *)a1 + *(void *)((swift_isaMask & *a1) + 0x60);
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  uint64_t v4 = *(void **)((char *)a1 + *(void *)((swift_isaMask & *a1) + 0x78));
}

uint64_t sub_100083228()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x98))();
}

uint64_t sub_10008327C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0xA0))();
}

uint64_t sub_1000832D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for POSIXError();
  uint64_t v19 = *(void *)(v4 - 8);
  uint64_t v20 = v4;
  __chkstk_darwin(v4);
  id v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  uint64_t v18 = a1;
  id v8 = (void *)v7(a1, a2);
  sub_1000A2198();
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v8 valueForEntitlement:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v21, 0, sizeof(v21));
  }
  sub_100085EB4((uint64_t)v21, (uint64_t)v22);
  if (!v23)
  {
    sub_1000130EC((uint64_t)v22, &qword_10017C018);
LABEL_9:
    static os_log_type_t.error.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_100132F10;
    uint64_t v13 = (void *)v7(v18, a2);
    unsigned int v14 = [v13 processIdentifier];

    *(void *)(v12 + 56) = &type metadata for Int32;
    *(void *)(v12 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v12 + 32) = v14;
    sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
    uint64_t v15 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    v22[0] = 1;
    sub_100077158((uint64_t)_swiftEmptyArrayStorage);
    sub_100086654((unint64_t *)&qword_10017DD20, (void (*)(uint64_t))&type metadata accessor for POSIXError);
    uint64_t v16 = v20;
    _BridgedStoredNSError.init(_:userInfo:)();
    POSIXError._nsError.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v16);
    return swift_willThrow();
  }
  uint64_t result = swift_dynamicCast();
  if (!result || (v24 & 1) == 0) {
    goto LABEL_9;
  }
  return result;
}

void *sub_1000835F0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_1000036B0(a1, v5);
  sub_10007F4B4(v5, v6);
  Swift::Int v7 = __src[3];
  Swift::Int v8 = __src[4];
  sub_1000036B0(__src, __src[3]);
  uint64_t v9 = (*(uint64_t (**)(Swift::Int, Swift::Int))(v8 + 88))(v7, v8);
  uint64_t v11 = v10;
  sub_10000478C((uint64_t)__src);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v144 = a1;
  sub_1000036B0(a1, v12);
  sub_10007F4B4(v12, v13);
  Swift::Int v14 = __src[3];
  Swift::Int v15 = __src[4];
  sub_1000036B0(__src, __src[3]);
  uint64_t v16 = (uint64_t *)sub_1000A1A30();
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, Swift::Int, Swift::Int))(v15 + 152);
  swift_bridgeObjectRetain();
  uint64_t v20 = v19(v17, v18, v14, v15);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)__src);
  uint64_t v23 = sub_1000A2488(v20, v22, v9, v11);
  unint64_t v24 = (unint64_t)v23;
  if (v23 == (void *)5) {
    unint64_t v25 = 0;
  }
  else {
    unint64_t v25 = (unint64_t)v23;
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v136 = sub_1000845DC(v25, KeyPath, a2, v144);
  uint64_t v138 = v27;
  swift_release();
  uint64_t v28 = swift_getKeyPath();
  sub_10003CC54(v25);
  uint64_t v135 = sub_1000845DC(v25, v28, a2, v144);
  uint64_t v137 = v29;
  sub_10003E8B0(v24);
  swift_release();
  uint64_t v30 = v144[3];
  uint64_t v31 = v144[4];
  sub_1000036B0(v144, v30);
  sub_10007F4B4(v30, v31);
  uint64_t v32 = v156;
  uint64_t v33 = v157;
  sub_1000036B0(v155, v156);
  LOBYTE(v30) = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v32, v33);
  sub_10000469C((uint64_t)v144, (uint64_t)v152);
  unint64_t v139 = v24;
  if (v30)
  {
    sub_10000478C((uint64_t)v152);
    sub_10000478C((uint64_t)v155);
LABEL_7:
    uint64_t v38 = v144[3];
    uint64_t v39 = v144[4];
    sub_1000036B0(v144, v38);
    sub_10007F4B4(v38, v39);
    Swift::Int v40 = __src[3];
    Swift::Int v41 = __src[4];
    sub_1000036B0(__src, __src[3]);
    (*(void (**)(Swift::Int, Swift::Int))(v41 + 32))(v40, v41);
    sub_10000478C((uint64_t)__src);
    uint64_t v42 = swift_getKeyPath();
    sub_10003CC54(v25);
    uint64_t v133 = sub_1000845DC(v25, v42, a2, v144);
    uint64_t v134 = v43;
    swift_release();
    sub_10003E8B0(v24);
    goto LABEL_9;
  }
  uint64_t v34 = v153;
  uint64_t v35 = v154;
  sub_1000036B0(v152, v153);
  sub_10007F4B4(v34, v35);
  Swift::Int v36 = __src[3];
  Swift::Int v37 = __src[4];
  sub_1000036B0(__src, __src[3]);
  LOBYTE(v34) = (*(uint64_t (**)(Swift::Int, Swift::Int))(v37 + 24))(v36, v37);
  sub_10000478C((uint64_t)__src);
  sub_10000478C((uint64_t)v152);
  sub_10000478C((uint64_t)v155);
  if (v34) {
    goto LABEL_7;
  }
  uint64_t v44 = swift_getKeyPath();
  sub_10003CC54(v25);
  uint64_t v133 = sub_1000845DC(v25, v44, a2, v144);
  uint64_t v134 = v45;
  sub_10003E8B0(v24);
  swift_release();
LABEL_9:
  sub_100004700(&qword_10017BF18);
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_100136120;
  *(_DWORD *)(v46 + 32) = *sub_1000B974C();
  *(_DWORD *)(v46 + 36) = *sub_1000B98BC();
  *(_DWORD *)(v46 + 40) = *(_DWORD *)sub_1000B9918();
  *(_DWORD *)(v46 + 44) = *sub_1000B97A8();
  __src[0] = v46;
  sub_100013438();
  sub_100004700(&qword_10017BF20);
  sub_10008669C(&qword_10017DD40, &qword_10017BF20);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  int v47 = v162[0];
  v162[0] = a3;
  sub_100085F1C();
  dispatch thunk of RawRepresentable.rawValue.getter();
  unint64_t v48 = sub_100085F70();
  dispatch thunk of OptionSet.init(rawValue:)();
  v163[0] = v47;
  dispatch thunk of SetAlgebra.formUnion(_:)();
  int v151 = __src[0];
  uint64_t v49 = v144[3];
  uint64_t v50 = v144[4];
  sub_1000036B0(v144, v49);
  sub_10002A4C4(v49, v50);
  Swift::Int v51 = __src[3];
  Swift::Int v52 = __src[4];
  sub_1000036B0(__src, __src[3]);
  LOBYTE(v49) = (*(uint64_t (**)(Swift::Int, Swift::Int))(v52 + 24))(v51, v52);
  sub_10000478C((uint64_t)__src);
  if ((v49 & 1) == 0)
  {
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_100132F30;
    *(_DWORD *)(v53 + 32) = *(_DWORD *)sub_1000B9580();
    *(_DWORD *)(v53 + 36) = *(_DWORD *)sub_1000B9638();
    __src[0] = v53;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    LODWORD(__src[0]) = v162[0];
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v162[0] = LODWORD(v148[0]) | v163[0];
    dispatch thunk of OptionSet.init(rawValue:)();
  }
  unint64_t v142 = v25;
  uint64_t v54 = v144[3];
  uint64_t v55 = v144[4];
  sub_1000036B0(v144, v54);
  sub_10007F4B4(v54, v55);
  Swift::Int v56 = __src[3];
  Swift::Int v57 = __src[4];
  sub_1000036B0(__src, __src[3]);
  LOBYTE(v54) = (*(uint64_t (**)(Swift::Int, Swift::Int))(v57 + 48))(v56, v57);
  sub_10000478C((uint64_t)__src);
  if (v54)
  {
    uint64_t v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_1001359B0;
    *(_DWORD *)(v58 + 32) = *(_DWORD *)sub_1000B9580();
    *(_DWORD *)(v58 + 36) = *(_DWORD *)sub_1000B9694();
    *(_DWORD *)(v58 + 40) = *(_DWORD *)sub_1000B9638();
    __src[0] = v58;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    LODWORD(__src[0]) = v162[0];
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v162[0] = LODWORD(v148[0]) | v163[0];
    dispatch thunk of OptionSet.init(rawValue:)();
  }
  uint64_t v59 = v144[3];
  uint64_t v60 = v144[4];
  sub_1000036B0(v144, v59);
  sub_10007F4B4(v59, v60);
  uint64_t v61 = v149;
  uint64_t v62 = v150;
  sub_1000036B0(v148, v149);
  LOBYTE(v59) = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 16))(v61, v62);
  sub_10000469C((uint64_t)v144, (uint64_t)v145);
  if (v59)
  {
    sub_10000478C((uint64_t)v145);
    sub_10000478C((uint64_t)v148);
LABEL_16:
    uint64_t v67 = swift_allocObject();
    *(_OWORD *)(v67 + 16) = xmmword_1001359B0;
    *(_DWORD *)(v67 + 32) = *(_DWORD *)sub_1000B9694();
    *(_DWORD *)(v67 + 36) = *(_DWORD *)sub_1000B9638();
    *(_DWORD *)(v67 + 40) = *(_DWORD *)sub_1000B9AF4();
    __src[0] = v67;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    LODWORD(__src[0]) = v160 | v163[0];
    dispatch thunk of OptionSet.init(rawValue:)();
    goto LABEL_17;
  }
  uint64_t v63 = v146;
  uint64_t v64 = v147;
  sub_1000036B0(v145, v146);
  sub_10007F4B4(v63, v64);
  Swift::Int v65 = __src[3];
  Swift::Int v66 = __src[4];
  sub_1000036B0(__src, __src[3]);
  LOBYTE(v63) = (*(uint64_t (**)(Swift::Int, Swift::Int))(v66 + 24))(v65, v66);
  sub_10000478C((uint64_t)__src);
  sub_10000478C((uint64_t)v145);
  sub_10000478C((uint64_t)v148);
  if (v63) {
    goto LABEL_16;
  }
LABEL_17:
  if (sub_1000F59D4())
  {
    uint64_t v68 = swift_allocObject();
    *(_OWORD *)(v68 + 16) = xmmword_100132F10;
    *(_DWORD *)(v68 + 32) = *(_DWORD *)sub_1000B9C14();
    __src[0] = v68;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v163[0] = v151;
    dispatch thunk of SetAlgebra.intersection(_:)();
    if ((dispatch thunk of SetAlgebra.isEmpty.getter() & 1) == 0) {
      dispatch thunk of SetAlgebra.subtract(_:)();
    }
  }
  uint64_t v69 = *(char **)(a2 + 112);
  long long v161 = v69;
  long long v70 = *(_OWORD *)(a2 + 144);
  long long v159 = *(_OWORD *)(a2 + 176);
  long long v160 = v70;
  int64_t v71 = *((void *)v69 + 2);
  int64_t v72 = v71 + 2;
  if (__OFADD__(v71, 2))
  {
    __break(1u);
  }
  else
  {
    sub_100073520((uint64_t)&v160);
    sub_100073520((uint64_t)&v159);
    sub_10006852C((uint64_t)&v161);
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v72 > *((void *)v69 + 3) >> 1)
    {
      if (v71 <= v72) {
        int64_t v74 = v71 + 2;
      }
      else {
        int64_t v74 = v71;
      }
      uint64_t v69 = sub_10000C3BC(isUniquelyReferenced_nonNull_native, v74, 1, v69);
    }
    int64_t v72 = *((void *)v69 + 2);
    unint64_t v48 = *((void *)v69 + 3);
    int64_t v71 = v72 + 1;
    swift_bridgeObjectRetain();
    if (v72 < v48 >> 1) {
      goto LABEL_28;
    }
  }
  uint64_t v69 = sub_10000C3BC((char *)(v48 > 1), v71, 1, v69);
LABEL_28:
  *((void *)v69 + 2) = v71;
  *(_OWORD *)&v69[16 * v72 + 32] = v160;
  unint64_t v75 = *((void *)v69 + 3);
  int64_t v76 = v72 + 2;
  swift_bridgeObjectRetain();
  if (v76 > (uint64_t)(v75 >> 1)) {
    uint64_t v69 = sub_10000C3BC((char *)(v75 > 1), v76, 1, v69);
  }
  *((void *)v69 + 2) = v76;
  *(_OWORD *)&v69[16 * v71 + 32] = v159;
  sub_100085FC4((uint64_t)&v159);
  sub_100085FC4((uint64_t)&v160);
  uint64_t v77 = v144[3];
  uint64_t v78 = v144[4];
  sub_1000036B0(v144, v77);
  sub_10007F4B4(v77, v78);
  Swift::Int v79 = __src[3];
  Swift::Int v80 = __src[4];
  sub_1000036B0(__src, __src[3]);
  uint64_t v81 = (*(uint64_t (**)(Swift::Int, Swift::Int))(v80 + 184))(v79, v80);
  if (v82 == 1) {
    goto LABEL_44;
  }
  uint64_t v83 = v81;
  uint64_t v84 = v82;
  uint64_t v85 = sub_1000F0F54(v81);
  uint64_t v87 = v86;
  sub_1000805AC(v83, v84);
  sub_10000478C((uint64_t)__src);
  if (!v87) {
    goto LABEL_47;
  }
  uint64_t v88 = v144[3];
  uint64_t v89 = v144[4];
  sub_1000036B0(v144, v88);
  sub_10007F4B4(v88, v89);
  Swift::Int v90 = __src[3];
  Swift::Int v91 = __src[4];
  sub_1000036B0(__src, __src[3]);
  uint64_t v92 = (*(uint64_t (**)(Swift::Int, Swift::Int))(v91 + 192))(v90, v91);
  if (v93 == 1)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000478C((uint64_t)__src);
LABEL_48:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v94 = v92;
  uint64_t v95 = v93;
  uint64_t v96 = sub_1000F0F54(v92);
  uint64_t v98 = v97;
  sub_1000805AC(v94, v95);
  sub_10000478C((uint64_t)__src);
  if (!v98)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  uint64_t v131 = v96;
  uint64_t v132 = v87;
  uint64_t v130 = v98;
  if (v85 == 0x34365F363878 && v87 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v99 = sub_10002A568();
    uint64_t v100 = *v99;
    uint64_t v101 = *(void *)(*v99 + 16);
    if (v101)
    {
      swift_bridgeObjectRetain();
      long long v102 = (Swift::Int *)(v100 + 40);
      do
      {
        Swift::Int v103 = *(v102 - 1);
        Swift::Int v104 = *v102;
        swift_bridgeObjectRetain();
        sub_1000848E0(__src, v103, v104);
        swift_bridgeObjectRelease();
        v102 += 2;
        --v101;
      }
      while (v101);
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v105 = v144[3];
  uint64_t v106 = v144[4];
  sub_1000036B0(v144, v105);
  sub_10012DCB4(v105, v106);
  Swift::Int v107 = __src[3];
  Swift::Int v108 = __src[4];
  sub_1000036B0(__src, __src[3]);
  uint64_t v109 = (*(uint64_t (**)(uint64_t, unint64_t, Swift::Int, Swift::Int))(v108 + 8))(47, 0xE100000000000000, v107, v108);
  uint64_t v126 = v110;
  uint64_t v127 = v109;
  sub_10000478C((uint64_t)__src);
  char v124 = sub_1000FDE28((uint64_t)v144);
  uint64_t v128 = *(void *)a2;
  uint64_t v129 = *(void *)(a2 + 64);
  uint64_t v125 = *(void *)(a2 + 72);
  uint64_t v123 = *(void *)(a2 + 136);
  uint64_t v111 = *(void *)(a2 + 240);
  memset(v162, 0, sizeof(v162));
  memset(v163, 0, sizeof(v163));
  uint64_t v164 = 0;
  LODWORD(v108) = v151;
  sub_10003CC44(v139);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013318(a2);
  swift_bridgeObjectRetain();
  uint64_t v112 = sub_1000BA38C();
  uint64_t v114 = v113;
  swift_bridgeObjectRetain();
  *(void *)&long long v122 = _swiftEmptyArrayStorage;
  *((void *)&v122 + 1) = _swiftEmptyArrayStorage;
  *(void *)&long long v121 = 47;
  *((void *)&v121 + 1) = 0xE100000000000000;
  *(void *)&long long v120 = v130;
  *((void *)&v120 + 1) = v142;
  *(void *)&long long v119 = v132;
  *((void *)&v119 + 1) = v131;
  *(void *)&long long v118 = v123;
  *((void *)&v118 + 1) = v85;
  *(void *)&long long v117 = &_swiftEmptySetSingleton;
  *((void *)&v117 + 1) = &_swiftEmptySetSingleton;
  *(void *)&long long v116 = v125;
  *((void *)&v116 + 1) = v69;
  sub_1000BA398(v128, v136, v138, v133, v134, v135, v137, v129, (uint64_t)__src, v116, v117, v118, v119, v120, v121, v122, v127, v126, a2,
    v111,
    (uint64_t)v162,
    v112,
    v114,
    (uint64_t)v163,
    v108,
    v124);
  sub_10003E8B0(v139);
  sub_10001100C(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)v144);
  return memcpy(a4, __src, 0x24DuLL);
}

uint64_t sub_1000845DC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::Int v37 = a4;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v34 - v12;
  long long v14 = *(_OWORD *)(a3 + 208);
  long long v50 = *(_OWORD *)(a3 + 192);
  long long v51 = v14;
  long long v52 = *(_OWORD *)(a3 + 224);
  uint64_t v53 = *(void *)(a3 + 240);
  long long v15 = *(_OWORD *)(a3 + 144);
  long long v46 = *(_OWORD *)(a3 + 128);
  long long v47 = v15;
  long long v16 = *(_OWORD *)(a3 + 176);
  long long v48 = *(_OWORD *)(a3 + 160);
  long long v49 = v16;
  long long v17 = *(_OWORD *)(a3 + 80);
  long long v42 = *(_OWORD *)(a3 + 64);
  long long v43 = v17;
  long long v18 = *(_OWORD *)(a3 + 112);
  long long v44 = *(_OWORD *)(a3 + 96);
  long long v45 = v18;
  long long v19 = *(_OWORD *)(a3 + 16);
  long long v38 = *(_OWORD *)a3;
  long long v39 = v19;
  long long v20 = *(_OWORD *)(a3 + 48);
  long long v40 = *(_OWORD *)(a3 + 32);
  long long v41 = v20;
  sub_100013318(a3);
  swift_getAtKeyPath();
  sub_10001100C(a3);
  if (a1 >= 5)
  {
    uint64_t v35 = a2;
    unint64_t v36 = *(void *)(a1 + 16);
    sub_10003CC54(v36);
    swift_bridgeObjectRetain();
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    URL.appendingPathExtension(_:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void (**)(char *, uint64_t))(v8 + 8);
    v23(v11, v7);
    uint64_t v22 = URL.path.getter();
    uint64_t v25 = v24;
    v23(v13, v7);
    id v26 = v37;
    uint64_t v27 = v37[3];
    uint64_t v28 = v37[4];
    sub_1000036B0(v37, v27);
    sub_1001297F4(v27, v28);
    uint64_t v29 = *((void *)&v39 + 1);
    uint64_t v30 = v40;
    sub_1000036B0(&v38, *((uint64_t *)&v39 + 1));
    LOBYTE(v27) = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v30 + 136))(v22, v25, 0, v29, v30);
    sub_10000478C((uint64_t)&v38);
    if (v27)
    {
      unint64_t v31 = v36;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v32 = v36;
      uint64_t v22 = sub_1000845DC(v36, v35, a3, v26);
      unint64_t v31 = v32;
    }
    sub_10003E8C0(v31);
  }
  else
  {
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    sub_1000F1604(a1, (uint64_t)v13);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
    v21(v11, v7);
    uint64_t v22 = URL.path.getter();
    v21(v13, v7);
  }
  return v22;
}

uint64_t sub_1000848E0(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      long long v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100084D70(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100084A90()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100004700(&qword_10017DE58);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int sub_100084D70(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100084A90();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100084F0C();
      goto LABEL_22;
    }
    sub_1000850C0();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_100084F0C()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017DE58);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000850C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100004700(&qword_10017DE58);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}