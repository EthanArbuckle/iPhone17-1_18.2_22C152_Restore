uint64_t sub_100085370(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  id v24;
  unsigned int v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t);
  uint64_t result;
  uint64_t v31;
  void (*v32)(char *, id, uint64_t, uint64_t);
  id v33;
  void *v34;
  uint64_t v35;
  char *v36;
  void (*v37)(void, void, void);
  int v38;
  void **p_ivar_lyt;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void *v52;
  id v53;
  char *v54;
  void *v55;
  id v56;
  char *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(id);
  char *v71;
  uint64_t v72;
  uint64_t (**v73)(uint64_t);
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  uint64_t v76;
  void (*v77)(void, void, void);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *AssociatedTypeWitness;
  char *v83;
  void **aBlock;
  unint64_t v85;
  uint64_t (*v86)(uint64_t);
  void *v87;
  uint64_t (*v88)();
  char *v89;
  long long v90;
  long long v91;
  uint64_t v92;

  v2 = v1;
  v4 = swift_isaMask & *v1;
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v76 = *(void *)(v5 - 8);
  v77 = (void (*)(void, void, void))v5;
  __chkstk_darwin(v5);
  v75 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = (uint64_t (**)(uint64_t))type metadata accessor for OS_dispatch_workloop.Attributes();
  __chkstk_darwin(v73);
  v74 = (void (*)(char *, char *, uint64_t))((char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void *)(v4 + 88);
  v9 = *(void *)(v4 + 80);
  v81 = v8;
  AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness();
  v68 = type metadata accessor for Optional();
  v67 = *(void *)(v68 - 8);
  v10 = __chkstk_darwin(v68);
  v71 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v66 - v13;
  v79 = v9;
  v80 = *(void *)(v9 - 8);
  v15 = __chkstk_darwin(v12);
  v78 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = v16;
  __chkstk_darwin(v15);
  v83 = (char *)&v66 - v17;
  v18 = type metadata accessor for OSSignpostID();
  v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  v22 = (void *)*sub_1000EFCB4();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100132F10;
  v24 = v22;
  v25 = [a1 processIdentifier];
  *(void *)(v23 + 56) = &type metadata for Int32;
  *(void *)(v23 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v23 + 32) = v25;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v26 = *(void **)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x78));
  v27 = [a1 setExportedInterface:v26];
  v28 = (swift_isaMask & *v2) + 128;
  v70 = *(void (**)(id))((swift_isaMask & *v2) + 0x80);
  v69 = v28;
  v70(v27);
  v29 = *(uint64_t (**)(char *, uint64_t))(*(AssociatedTypeWitness - 1) + 48);
  result = v29(v14, 1);
  if (result == 1)
  {
    __break(1u);
    return result;
  }
  v31 = v81;
  v32 = *(void (**)(char *, id, uint64_t, uint64_t))(v81 + 40);
  v33 = a1;
  v32(v14, v33, v79, v31);
  v34 = v33;
  [v33 setExportedObject:_bridgeAnythingToObjectiveC<A>(_:)()];
  v35 = swift_unknownObjectRelease();
  v36 = v71;
  v70((id)v35);
  if (((unsigned int (*)(char *, uint64_t, void *))v29)(v36, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v36, v68);
    v37 = v77;
LABEL_7:
    v92 = 0;
    v90 = 0u;
    v91 = 0u;
    p_ivar_lyt = &ApprovalSettingsStateManager.ivar_lyt;
    goto LABEL_8;
  }
  sub_100004700((uint64_t *)&unk_10017DEA0);
  v38 = swift_dynamicCast();
  v37 = v77;
  if (!v38) {
    goto LABEL_7;
  }
  p_ivar_lyt = (void **)(&ApprovalSettingsStateManager + 16);
  if (!*((void *)&v91 + 1))
  {
LABEL_8:
    sub_1000130EC((uint64_t)&v90, &qword_10017BC70);
    v40 = 0xD00000000000001ALL;
    v42 = 0x8000000100147DB0;
    goto LABEL_9;
  }
  sub_10000372C(&v90, (uint64_t)&aBlock);
  sub_1000036B0(&aBlock, (uint64_t)v87);
  swift_getDynamicType();
  v40 = (*((uint64_t (**)(void))v88 + 4))();
  v42 = v41;
  sub_10000478C((uint64_t)&aBlock);
LABEL_9:
  sub_10000483C(0, &qword_10017DE80);
  aBlock = 0;
  v85 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  aBlock = (void **)v40;
  v85 = v42;
  v43._object = (void *)0x8000000100147DD0;
  v43._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v43);
  LODWORD(v90) = [v34 p_ivar_lyt[157]];
  v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  aBlock = (void **)_swiftEmptyArrayStorage;
  sub_100086654(&qword_10017DE88, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_workloop.Attributes);
  sub_100004700(&qword_10017DE90);
  sub_10008669C(&qword_10017DE98, &qword_10017DE90);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void))(v76 + 104))(v75, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v37);
  AssociatedTypeWitness = (void *)OS_dispatch_workloop.init(label:attributes:autoreleaseFrequency:osWorkgroup:)();
  [v34 _setQueue:];
  v46 = v79;
  v45 = v80;
  v77 = *(void (**)(void, void, void))(v80 + 16);
  v47 = v78;
  v77(v78, v83, v79);
  v48 = *(unsigned __int8 *)(v45 + 80);
  v49 = (v48 + 40) & ~v48;
  v76 = v49;
  v75 = (char *)(v48 | 7);
  v50 = (char *)swift_allocObject();
  v51 = v81;
  *((void *)v50 + 2) = v46;
  *((void *)v50 + 3) = v51;
  *((void *)v50 + 4) = v34;
  v74 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  v74(&v50[v49], v47, v46);
  v88 = sub_10008631C;
  v89 = v50;
  aBlock = _NSConcreteStackBlock;
  v85 = 1107296256;
  v73 = &v86;
  v86 = sub_10000AFF8;
  v87 = &unk_10016D570;
  v52 = _Block_copy(&aBlock);
  v53 = v34;
  swift_release();
  [v53 setInterruptionHandler:v52];
  _Block_release(v52);
  v77(v47, v83, v46);
  v54 = (char *)swift_allocObject();
  *((void *)v54 + 2) = v46;
  *((void *)v54 + 3) = v51;
  *((void *)v54 + 4) = v53;
  v74(&v54[v76], v47, v46);
  v88 = sub_10008651C;
  v89 = v54;
  aBlock = _NSConcreteStackBlock;
  v85 = 1107296256;
  v86 = sub_10000AFF8;
  v87 = &unk_10016D5C0;
  v55 = _Block_copy(&aBlock);
  v56 = v53;
  v57 = v83;
  v58 = v56;
  swift_release();
  [v58 setInvalidationHandler:v55];
  _Block_release(v55);
  v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 48))(v46, v51);
  v60 = *(void *)(v59 + 16);
  if (v60)
  {
    v61 = (unsigned __int8 *)(v59 + 56);
    do
    {
      v62 = *((void *)v61 - 3);
      v63 = *((void *)v61 - 2);
      v64 = *((void *)v61 - 1);
      v65 = *v61;
      v61 += 32;
      [v26 setInterface:v62 forSelector:v63 argumentIndex:v64 ofReply:v65];
      --v60;
    }
    while (v60);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t, uint64_t))(v51 + 72))(v26, v46, v51);
  [v58 resume];

  (*(void (**)(char *, uint64_t))(v80 + 8))(v57, v46);
  return 1;
}

void sub_100085E84()
{
}

uint64_t sub_100085EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017C018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100085F1C()
{
  unint64_t result = qword_10017DD48;
  if (!qword_10017DD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DD48);
  }
  return result;
}

unint64_t sub_100085F70()
{
  unint64_t result = qword_10017DD50;
  if (!qword_10017DD50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DD50);
  }
  return result;
}

uint64_t sub_100085FC4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100085FF0()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for KernelRequestSource()
{
  return sub_100004FAC();
}

uint64_t sub_1000860C0()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void destroy for NSXPCRequestDelegateInterface(id *a1)
{
}

uint64_t initializeWithCopy for NSXPCRequestDelegateInterface(uint64_t a1, uint64_t a2)
{
  v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for NSXPCRequestDelegateInterface(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for NSXPCRequestDelegateInterface(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NSXPCRequestDelegateInterface(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSXPCRequestDelegateInterface(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSXPCRequestDelegateInterface(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NSXPCRequestDelegateInterface()
{
  return &type metadata for NSXPCRequestDelegateInterface;
}

uint64_t sub_10008631C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  v3 = (void *)v0[4];
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100132F10;
  unsigned int v5 = [v3 processIdentifier];
  *(void *)(v4 + 56) = &type metadata for Int32;
  *(void *)(v4 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v4 + 32) = v5;
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  id v6 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t sub_100086458()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10008651C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (void *)v0[4];
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100132F10;
  unsigned int v5 = [v3 processIdentifier];
  *(void *)(v4 + 56) = &type metadata for Int32;
  *(void *)(v4 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v4 + 32) = v5;
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  uint64_t v6 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
}

uint64_t sub_100086654(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008669C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000126B8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000866EC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t sub_100086738()
{
  unint64_t v0 = sub_100088CB8();
  unint64_t v1 = sub_10003FF7C();
  return sub_1000F0560(1, (uint64_t)&type metadata for XPCEventSubscriberFlags, v0, v1, (uint64_t)&qword_100199518);
}

uint64_t *sub_100086784()
{
  if (qword_100186720 != -1) {
    swift_once();
  }
  return &qword_100199518;
}

uint64_t sub_1000867D0(uint64_t a1)
{
  if (qword_100186720 != -1) {
    swift_once();
  }
  if ((qword_100199518 & ~a1) == 0)
  {
    uint64_t v2 = sub_10000C3BC(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v4 = *((void *)v2 + 2);
    unint64_t v3 = *((void *)v2 + 3);
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v3 > 1), v4 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v4 + 1;
    unsigned int v5 = &v2[16 * v4];
    *((void *)v5 + 4) = 0x64656C7469746E65;
    *((void *)v5 + 5) = 0xE800000000000000;
  }
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
  uint64_t v6 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100086924()
{
  return sub_1000867D0(*v0);
}

uint64_t sub_10008692C()
{
  sub_100004700(&qword_10017DF30);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_100086998(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  sub_100086A00(a1, a2, a3, a4);
  return v8;
}

uint64_t sub_100086A00(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = v4;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  v25 = a2;
  uint64_t v28 = a1;
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v10 - 8);
  sub_10000483C(0, (unint64_t *)&qword_10017DCE0);
  static DispatchQoS.unspecified.getter();
  aBlock = (void **)_swiftEmptyArrayStorage;
  sub_100087388();
  sub_100004700(&qword_10017DCF0);
  sub_10001348C((unint64_t *)&qword_10017DCF8, &qword_10017DCF0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v24);
  v11 = v25;
  uint64_t v12 = v28;
  v13 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v5[3] = v13;
  String.utf8CString.getter();
  id v14 = v13;
  id v15 = (id)xpc_event_publisher_create();

  swift_release();
  if (v15)
  {
    v5[4] = v12;
    v5[5] = v11;
    v5[2] = v15;
    v5[6] = _swiftEmptyArrayStorage;
    v5[7] = sub_100087D7C((uint64_t)_swiftEmptyArrayStorage);
    v33 = sub_100087E54;
    v34 = v5;
    aBlock = _NSConcreteStackBlock;
    unint64_t v30 = 1107296256;
    v31 = sub_100086FC8;
    v32 = &unk_10016D5E8;
    v16 = _Block_copy(&aBlock);
    id v17 = v15;
    swift_retain();
    swift_release();
    xpc_event_publisher_set_handler();
    _Block_release(v16);

    v18 = (void *)v5[2];
    v33 = sub_1000882EC;
    v34 = v5;
    aBlock = _NSConcreteStackBlock;
    unint64_t v30 = 1107296256;
    v31 = sub_100087048;
    v32 = &unk_10016D610;
    v19 = _Block_copy(&aBlock);
    swift_retain();
    id v20 = v18;
    swift_release();
    xpc_event_publisher_set_error_handler();
    _Block_release(v19);

    return (uint64_t)v5;
  }
  else
  {
    aBlock = 0;
    unint64_t v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    aBlock = (void **)0xD000000000000025;
    unint64_t v30 = 0x8000000100147EE0;
    v22._countAndFlagsBits = v12;
    v22._object = v11;
    String.append(_:)(v22);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t sub_100086E50(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017E068);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000048E0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100086F64(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100086FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v7(a2, a3, a4);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_100087048(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_10008709C()
{
  sub_100004700(&qword_10017DF38);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100132F10;
  uint64_t v2 = *(void *)(v0 + 40);
  *(void *)(inited + 32) = *(void *)(v0 + 32);
  *(void *)(inited + 40) = v2;
  *(unsigned char *)(inited + 48) = 1;
  swift_bridgeObjectRetain();
  sub_100086E50(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v4 = _CFXPCCreateXPCObjectFromCFObject();

  if (v4)
  {
    xpc_event_publisher_fire();
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v6 = 0xD000000000000025;
    *(void *)(v6 + 8) = 0x8000000100147F40;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(void *)(v6 + 64) = 0;
    *(unsigned char *)(v6 + 72) = 50;
    return swift_willThrow();
  }
}

uint64_t sub_1000871CC()
{
  return _xpc_event_publisher_activate(*(void *)(v0 + 16));
}

uint64_t sub_1000871D4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100087214()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_10008726C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t sub_1000872B0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t sub_1000872F4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t sub_100087338@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  *a1 = *(void *)(v1 + 56);
  return swift_bridgeObjectRetain();
}

unint64_t sub_100087388()
{
  unint64_t result = qword_10017DCE8;
  if (!qword_10017DCE8)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DCE8);
  }
  return result;
}

char *sub_1000873E0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017E078);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  id v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1000874DC(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_100087520(a1, v2);
}

unint64_t sub_100087520(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000875BC(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1000874DC(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100087AA8();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  sub_100087910(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100087668(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017E070);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              unint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_100087910(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            unint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              void *v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *sub_100087AA8()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017E070);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100087C38(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000874DC(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100087AA8();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v18 = 8 * v10;
    *(void *)(v16[6] + v18) = a2;
    *(void *)(v16[7] + v18) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_100087668(result, a3 & 1);
  uint64_t result = sub_1000874DC(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    uint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

char *sub_100087D68(uint64_t a1)
{
  return sub_1000873E0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_100087D7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100004700(&qword_10017E070);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = sub_1000874DC(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_100087E54(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  if (result != 1)
  {
    if (result) {
      return result;
    }
    uint64_t v5 = (char *)v2[6];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v3[6] = v5;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_40;
  }
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100132F30;
  uint64_t v18 = v2[4];
  uint64_t v17 = v2[5];
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v19 = sub_10002A1DC();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v17;
  *(void *)(v16 + 96) = &type metadata for UInt64;
  *(void *)(v16 + 104) = &protocol witness table for UInt64;
  *(void *)(v16 + 64) = v19;
  *(void *)(v16 + 72) = a2;
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  swift_bridgeObjectRetain();
  BOOL v20 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v5 = (char *)(v3 + 6);
  uint64_t v21 = (char *)v3[6];
  unint64_t v22 = *((void *)v21 + 2);
  if (!v22) {
    goto LABEL_14;
  }
  if (*((void *)v21 + 4) == a2)
  {
    unint64_t v23 = 0;
  }
  else
  {
    if (v22 == 1)
    {
      unint64_t v23 = 1;
      goto LABEL_34;
    }
    uint64_t v31 = 5;
    while (1)
    {
      unint64_t v23 = v31 - 4;
      if (*(void *)&v21[8 * v31] == a2) {
        break;
      }
      uint64_t v32 = v31 - 3;
      if (__OFADD__(v23, 1)) {
        goto LABEL_38;
      }
      ++v31;
      if (v32 == v22)
      {
        unint64_t v23 = *((void *)v21 + 2);
        goto LABEL_34;
      }
    }
  }
  unint64_t v24 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v24 == v22)
  {
LABEL_12:
    if ((uint64_t)v22 >= (uint64_t)v23)
    {
LABEL_34:
      sub_100088584(v23, v22);
      swift_beginAccess();
      sub_1000875BC(a2);
      return swift_endAccess();
    }
    __break(1u);
LABEL_14:
    unint64_t v23 = 0;
    goto LABEL_34;
  }
  if ((v24 & 0x8000000000000000) != 0)
  {
LABEL_42:
    __break(1u);
    return result;
  }
  unint64_t v25 = v23 + 5;
  while (v25 - 4 < v22)
  {
    uint64_t v28 = *(void *)&v21[8 * v25];
    if (v28 != a2)
    {
      if (v25 - 4 != v23)
      {
        if (v23 >= v22) {
          goto LABEL_39;
        }
        uint64_t v29 = *(void *)&v21[8 * v23 + 32];
        char v30 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v5 = v21;
        if ((v30 & 1) == 0)
        {
          uint64_t v21 = sub_100087D68((uint64_t)v21);
          *(void *)uint64_t v5 = v21;
        }
        *(void *)&v21[8 * v23 + 32] = v28;
        *(void *)(*(void *)v5 + 8 * v25) = v29;
        uint64_t v21 = *(char **)v5;
      }
      if (__OFADD__(v23++, 1)) {
        goto LABEL_37;
      }
      unint64_t v22 = *((void *)v21 + 2);
    }
    unint64_t v27 = v25 - 3;
    ++v25;
    if (v27 == v22) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t v5 = sub_1000873E0(0, *((void *)v5 + 2) + 1, 1, v5);
  v3[6] = v5;
LABEL_4:
  unint64_t v8 = *((void *)v5 + 2);
  unint64_t v7 = *((void *)v5 + 3);
  if (v8 >= v7 >> 1)
  {
    uint64_t v5 = sub_1000873E0((char *)(v7 > 1), v8 + 1, 1, v5);
    v3[6] = v5;
  }
  *((void *)v5 + 2) = v8 + 1;
  *(void *)&v5[8 * v8 + 32] = a2;
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100132F30;
  uint64_t v11 = v3[4];
  uint64_t v10 = v3[5];
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v12 = sub_10002A1DC();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v10;
  *(void *)(v9 + 96) = &type metadata for UInt64;
  *(void *)(v9 + 104) = &protocol witness table for UInt64;
  *(void *)(v9 + 64) = v12;
  *(void *)(v9 + 72) = a2;
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  swift_bridgeObjectRetain();
  int64_t v13 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  xpc_dictionary_create(0, 0, 0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v3;
  *(void *)(v14 + 24) = a2;
  v33[4] = sub_1000886C4;
  v33[5] = v14;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 1107296256;
  v33[2] = sub_1000778EC;
  v33[3] = &unk_10016D6A8;
  uint64_t v15 = _Block_copy(v33);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  xpc_event_publisher_fire_with_reply();
  _Block_release(v15);
  return swift_unknownObjectRelease_n();
}

uint64_t sub_1000882D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000882E4()
{
  return swift_release();
}

uint64_t sub_1000882EC(int a1)
{
  static os_log_type_t.error.getter();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100132F30;
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_10002A1DC();
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 96) = &type metadata for Int32;
  *(void *)(v3 + 104) = &protocol witness table for Int32;
  *(_DWORD *)(v3 + 72) = a1;
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  return swift_bridgeObjectRelease();
}

unint64_t sub_1000883F4()
{
  unint64_t result = qword_10017DF40;
  if (!qword_10017DF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DF40);
  }
  return result;
}

unint64_t sub_10008844C()
{
  unint64_t result = qword_10017DF48;
  if (!qword_10017DF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DF48);
  }
  return result;
}

unint64_t sub_1000884A4()
{
  unint64_t result = qword_10017DF50;
  if (!qword_10017DF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DF50);
  }
  return result;
}

unint64_t sub_1000884FC()
{
  unint64_t result = qword_10017DF58;
  if (!qword_10017DF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DF58);
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCEventSubscriberFlags()
{
  return &type metadata for XPCEventSubscriberFlags;
}

uint64_t type metadata accessor for RealXPCEventPublisher()
{
  return self;
}

unint64_t sub_100088584(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    unint64_t result = (unint64_t)sub_1000873E0((char *)result, v10, 1, (char *)v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  unint64_t result = v4 + 32 + 8 * v6;
  uint64_t v14 = (const void *)(v4 + 32 + 8 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 8 * v13) {
    unint64_t result = (unint64_t)memmove((void *)result, v14, 8 * v13);
  }
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10008868C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000886C4(void *a1)
{
  unint64_t v4 = *(void **)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  int64_t v5 = (char **)(v4 + 6);
  if ((sub_100086F64(v3, v4[6]) & 1) == 0) {
    goto LABEL_9;
  }
  unint64_t v6 = *v5;
  unint64_t v7 = *((void *)*v5 + 2);
  if (!v7)
  {
    unint64_t v8 = 0;
    goto LABEL_30;
  }
  if (*((void *)v6 + 4) == v3)
  {
    unint64_t v8 = 0;
    goto LABEL_5;
  }
  if (v7 == 1)
  {
    unint64_t v8 = 1;
LABEL_30:
    sub_100088584(v8, v7);
    uint64_t ObjectType = swift_getObjectType();
    if (!sub_1000F5224(ObjectType))
    {
      unint64_t v27 = sub_1000F5320();
      if (v28)
      {
        uint64_t v29 = (uint64_t)v27;
      }
      else
      {
        type = xpc_get_type(a1);
        xpc_type_get_name(type);
        uint64_t v29 = String.init(cString:)();
      }
      uint64_t v30 = v28;
      static os_log_type_t.error.getter();
      sub_100004700((uint64_t *)&unk_10017D6E0);
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_1001359B0;
      uint64_t v33 = v4[4];
      uint64_t v32 = v4[5];
      *(void *)(v31 + 56) = &type metadata for String;
      unint64_t v34 = sub_10002A1DC();
      *(void *)(v31 + 32) = v33;
      *(void *)(v31 + 40) = v32;
      *(void *)(v31 + 96) = &type metadata for UInt64;
      *(void *)(v31 + 104) = &protocol witness table for UInt64;
      *(void *)(v31 + 64) = v34;
      *(void *)(v31 + 72) = v3;
      *(void *)(v31 + 136) = &type metadata for String;
      *(void *)(v31 + 144) = v34;
      *(void *)(v31 + 112) = v29;
      *(void *)(v31 + 120) = v30;
      sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
      swift_bridgeObjectRetain();
      uint64_t v14 = (void *)static OS_os_log.default.getter();
      goto LABEL_41;
    }
    xpc_dictionary_get_audit_token();
    sub_1000A2198();
    String.utf8CString.getter();
    unint64_t v24 = (void *)xpc_copy_entitlement_for_token();
    swift_release();
    if (!v24 || (BOOL value = xpc_BOOL_get_value(v24), swift_unknownObjectRelease(), !value))
    {
      uint64_t v26 = 0;
      goto LABEL_39;
    }
    if (qword_100186720 == -1)
    {
LABEL_34:
      uint64_t v26 = qword_100199518;
LABEL_39:
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v45 = v4[7];
      v4[7] = 0x8000000000000000;
      sub_100087C38(v26, v3, isUniquelyReferenced_nonNull_native);
      v4[7] = v45;
      swift_bridgeObjectRelease();
      swift_endAccess();
      sub_100004700((uint64_t *)&unk_10017D6E0);
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1001359B0;
      uint64_t v38 = v4[4];
      uint64_t v37 = v4[5];
      *(void *)(v36 + 56) = &type metadata for String;
      unint64_t v39 = sub_10002A1DC();
      *(void *)(v36 + 32) = v38;
      *(void *)(v36 + 40) = v37;
      *(void *)(v36 + 96) = &type metadata for UInt64;
      *(void *)(v36 + 104) = &protocol witness table for UInt64;
      *(void *)(v36 + 64) = v39;
      *(void *)(v36 + 72) = v3;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_1000867D0(v26);
      *(void *)(v36 + 136) = &type metadata for String;
      *(void *)(v36 + 144) = v39;
      *(void *)(v36 + 112) = v40;
      *(void *)(v36 + 120) = v41;
      sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
      v42 = (void *)static OS_os_log.default.getter();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      return swift_bridgeObjectRelease();
    }
LABEL_50:
    swift_once();
    goto LABEL_34;
  }
  uint64_t v21 = 5;
  while (1)
  {
    unint64_t v8 = v21 - 4;
    if (*(void *)&v6[8 * v21] == v3) {
      break;
    }
    uint64_t v22 = v21 - 3;
    if (__OFADD__(v8, 1)) {
      goto LABEL_46;
    }
    ++v21;
    if (v22 == v7)
    {
      unint64_t v8 = *((void *)*v5 + 2);
      goto LABEL_30;
    }
  }
LABEL_5:
  unint64_t v9 = v8 + 1;
  if (__OFADD__(v8, 1)) {
    goto LABEL_48;
  }
  if (v9 != v7)
  {
    if ((v9 & 0x8000000000000000) != 0)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    unint64_t v15 = v8 + 5;
    while (v15 - 4 < v7)
    {
      uint64_t v17 = *(void *)&v6[8 * v15];
      if (v17 != v3)
      {
        if (v15 - 4 != v8)
        {
          if (v8 >= v7) {
            goto LABEL_47;
          }
          uint64_t v18 = *(void *)&v6[8 * v8 + 32];
          char v19 = swift_isUniquelyReferenced_nonNull_native();
          char *v5 = v6;
          if ((v19 & 1) == 0)
          {
            unint64_t v6 = sub_100087D68((uint64_t)v6);
            char *v5 = v6;
          }
          *(void *)&v6[8 * v8 + 32] = v17;
          *(void *)&(*v5)[8 * v15] = v18;
          unint64_t v6 = *v5;
        }
        if (__OFADD__(v8++, 1)) {
          goto LABEL_45;
        }
        unint64_t v7 = *((void *)v6 + 2);
      }
      unint64_t v16 = v15 - 3;
      ++v15;
      if (v16 == v7) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
LABEL_7:
  if ((uint64_t)v7 >= (uint64_t)v8) {
    goto LABEL_30;
  }
  __break(1u);
LABEL_9:
  static os_log_type_t.error.getter();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100132F30;
  uint64_t v12 = v4[4];
  uint64_t v11 = v4[5];
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v13 = sub_10002A1DC();
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 40) = v11;
  *(void *)(v10 + 96) = &type metadata for UInt64;
  *(void *)(v10 + 104) = &protocol witness table for UInt64;
  *(void *)(v10 + 64) = v13;
  *(void *)(v10 + 72) = v3;
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  swift_bridgeObjectRetain();
  uint64_t v14 = (void *)static OS_os_log.default.getter();
LABEL_41:
  os_log(_:dso:log:_:_:)();

  return swift_bridgeObjectRelease();
}

unint64_t sub_100088CB8()
{
  unint64_t result = qword_10017E080;
  if (!qword_10017E080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E080);
  }
  return result;
}

void sub_100088D0C()
{
}

uint64_t (*sub_100088D38())()
{
  return j__swift_endAccess;
}

uint64_t sub_100088D8C(uint64_t a1)
{
  return sub_1000898A0(a1, (uint64_t)"SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient returning approvals for:", 87);
}

void sub_100088DB0(uint64_t a1)
{
  uint64_t v34 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v33 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v5 = (void *)*sub_1000EFC0C();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v6 = swift_allocObject();
  unint64_t v7 = (void *)v6;
  *(_OWORD *)(v6 + 16) = xmmword_100132F10;
  int64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    unint64_t v27 = (void *)v6;
    uint64_t v29 = v1;
    uint64_t v37 = _swiftEmptyArrayStorage;
    uint64_t v28 = v5;
    id v9 = v5;
    sub_10000C884(0, v8, 0);
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v10 = v3 + 16;
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64));
    uint64_t v31 = *(void *)(v10 + 56);
    uint64_t v32 = v11;
    uint64_t v30 = (void (**)(char *, uint64_t))(v10 - 8);
    do
    {
      uint64_t v14 = v33;
      uint64_t v13 = v34;
      v32(v33, v12, v34);
      uint64_t v35 = 2314;
      unint64_t v36 = 0xE200000000000000;
      v15._countAndFlagsBits = URL.path.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      uint64_t v16 = v35;
      unint64_t v17 = v36;
      (*v30)(v14, v13);
      uint64_t v18 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10000C884(0, v18[2] + 1, 1);
        uint64_t v18 = v37;
      }
      unint64_t v20 = v18[2];
      unint64_t v19 = v18[3];
      if (v20 >= v19 >> 1)
      {
        sub_10000C884(v19 > 1, v20 + 1, 1);
        uint64_t v18 = v37;
      }
      v18[2] = v20 + 1;
      uint64_t v21 = &v18[2 * v20];
      v21[4] = v16;
      v21[5] = v17;
      v12 += v31;
      --v8;
    }
    while (v8);
    int64_t v5 = v28;
    unint64_t v7 = v27;
  }
  else
  {
    id v22 = v5;
    uint64_t v18 = _swiftEmptyArrayStorage;
  }
  uint64_t v35 = (uint64_t)v18;
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100014AB8();
  uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  v7[7] = &type metadata for String;
  v7[8] = sub_10002A1DC();
  v7[4] = v23;
  v7[5] = v25;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  sub_10002A230();
  uint64_t v26 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
}

void sub_1000890E8(uint64_t a1)
{
  uint64_t v30 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v29 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_100132F10;
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v24[1] = v1;
    uint64_t v33 = _swiftEmptyArrayStorage;
    sub_10000C884(0, v5, 0);
    int64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v7 = v3 + 16;
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v7 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 64));
    uint64_t v27 = *(void *)(v7 + 56);
    uint64_t v28 = v8;
    uint64_t v26 = (void (**)(char *, uint64_t))(v7 - 8);
    do
    {
      uint64_t v11 = v29;
      uint64_t v10 = v30;
      uint64_t v12 = v7;
      v28(v29, v9, v30);
      uint64_t v31 = 2314;
      unint64_t v32 = 0xE200000000000000;
      v13._countAndFlagsBits = URL.path.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      uint64_t v14 = v31;
      unint64_t v15 = v32;
      (*v26)(v11, v10);
      uint64_t v6 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10000C884(0, v6[2] + 1, 1);
        uint64_t v6 = v33;
      }
      unint64_t v17 = v6[2];
      unint64_t v16 = v6[3];
      if (v17 >= v16 >> 1)
      {
        sub_10000C884(v16 > 1, v17 + 1, 1);
        uint64_t v6 = v33;
      }
      v6[2] = v17 + 1;
      uint64_t v18 = &v6[2 * v17];
      v18[4] = v14;
      v18[5] = v15;
      v9 += v27;
      --v5;
      uint64_t v7 = v12;
    }
    while (v5);
  }
  uint64_t v31 = (uint64_t)v6;
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100014AB8();
  uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  id v22 = (void *)v25;
  *(void *)(v25 + 56) = &type metadata for String;
  v22[8] = sub_10002A1DC();
  v22[4] = v19;
  v22[5] = v21;
  sub_10002A230();
  uint64_t v23 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
}

void sub_1000893C8(uint64_t a1)
{
}

uint64_t sub_1000893EC()
{
  return sub_10008AEB0();
}

uint64_t sub_100089410(uint64_t a1)
{
  return sub_10008AF54(a1);
}

void sub_100089434()
{
}

void sub_100089458(uint64_t a1, uint64_t a2)
{
}

void sub_10008947C(uint64_t a1)
{
}

void *sub_1000894A4()
{
  unint64_t result = (void *)swift_allocObject();
  result[3] = 0;
  result[4] = 0;
  result[2] = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1000894D8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000894E4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_100089528()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t sub_10008956C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t sub_1000895B0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t sub_1000895F4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t sub_100089638()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t sub_10008967C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t sub_1000896C0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t sub_100089704()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t sub_100089748()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t sub_10008978C(uint64_t a1)
{
  return sub_10008A214(a1, type metadata accessor for NullSystemPolicyClient, (uint64_t)&off_10016D6D0);
}

uint64_t sub_1000897AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000469C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100004700(&qword_10017E098);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_10000478C(a1);
}

uint64_t (*sub_100089828())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10008987C(uint64_t a1)
{
  return sub_1000898A0(a1, (uint64_t)"SPKernelExtensionPolicy is unavailable, AllowAllSystemPolicyClient returning approvals for:", 91);
}

uint64_t sub_1000898A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004700(&qword_10017E088);
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  __chkstk_darwin(v6);
  v50 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v59 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*sub_1000EFC0C();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v12 = swift_allocObject();
  uint64_t v47 = a1;
  v48 = (void *)v12;
  *(_OWORD *)(v12 + 16) = xmmword_100132F10;
  int64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    v46[1] = a2;
    v46[2] = a3;
    v62 = _swiftEmptyArrayStorage;
    v46[0] = v11;
    id v14 = v11;
    sub_10000C884(0, v13, 0);
    uint64_t v58 = v9;
    unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v15 = v9 + 16;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
    uint64_t v52 = *(void *)(v15 + 56);
    v53 = v16;
    uint64_t v54 = v15;
    uint64_t v55 = v8;
    v51 = (void (**)(char *, uint64_t))(v15 - 8);
    int64_t v18 = v13;
    do
    {
      uint64_t v19 = v59;
      v53(v59, v17, v8);
      uint64_t v60 = 2314;
      unint64_t v61 = 0xE200000000000000;
      v20._countAndFlagsBits = URL.path.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      uint64_t v21 = v60;
      unint64_t v22 = v61;
      (*v51)(v19, v8);
      uint64_t v23 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10000C884(0, v23[2] + 1, 1);
        uint64_t v23 = v62;
      }
      unint64_t v25 = v23[2];
      unint64_t v24 = v23[3];
      if (v25 >= v24 >> 1)
      {
        sub_10000C884(v24 > 1, v25 + 1, 1);
        uint64_t v23 = v62;
      }
      v23[2] = v25 + 1;
      uint64_t v26 = &v23[2 * v25];
      v26[4] = v21;
      v26[5] = v22;
      v17 += v52;
      --v18;
      uint64_t v8 = v55;
    }
    while (v18);
    uint64_t v9 = v58;
    uint64_t v11 = (void *)v46[0];
  }
  else
  {
    id v27 = v11;
    uint64_t v23 = _swiftEmptyArrayStorage;
  }
  uint64_t v60 = (uint64_t)v23;
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100014AB8();
  uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = v48;
  v48[7] = &type metadata for String;
  v31[8] = sub_10002A1DC();
  v31[4] = v28;
  v31[5] = v30;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  unint64_t v32 = _swiftEmptyArrayStorage;
  if (v13)
  {
    uint64_t v60 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10008C514(0, v13, 0);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v33 = v9 + 16;
    uint64_t v34 = v35;
    uint64_t v36 = v47 + ((*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64));
    uint64_t v55 = *(void *)(v33 + 56);
    uint64_t v37 = (uint64_t)v50;
    uint64_t v58 = v33;
    do
    {
      uint64_t v38 = v59;
      v34(v59, v36, v8);
      uint64_t v39 = *(int *)(v57 + 48);
      v34((char *)v37, (uint64_t)v38, v8);
      *(unsigned char *)(v37 + v39) = 1;
      (*(void (**)(char *, uint64_t))(v33 - 8))(v38, v8);
      unint64_t v32 = (void *)v60;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10008C514(0, v32[2] + 1, 1);
        uint64_t v37 = (uint64_t)v50;
        unint64_t v32 = (void *)v60;
      }
      unint64_t v41 = v32[2];
      unint64_t v40 = v32[3];
      if (v41 >= v40 >> 1)
      {
        sub_10008C514(v40 > 1, v41 + 1, 1);
        uint64_t v37 = (uint64_t)v50;
        unint64_t v32 = (void *)v60;
      }
      v32[2] = v41 + 1;
      sub_10008C534(v37, (uint64_t)v32+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(void *)(v56 + 72) * v41);
      v36 += v55;
      --v13;
    }
    while (v13);
  }
  if (v32[2])
  {
    sub_100004700(&qword_10017E090);
    v42 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v42 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v60 = (uint64_t)v42;
  uint64_t v43 = swift_bridgeObjectRetain();
  uint64_t v44 = v49;
  sub_10008B928(v43, 1, &v60);
  if (v44)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return v60;
  }
  return result;
}

uint64_t sub_100089DF0(uint64_t a1)
{
  return sub_10008A82C(a1, 0xD000000000000064, 0x8000000100148600);
}

uint64_t sub_100089E20(uint64_t a1, uint64_t a2)
{
  return sub_10008AB90(a1, a2, 97, 0xD00000000000005FLL, (void *)0x8000000100148670);
}

void sub_100089E54(uint64_t a1)
{
}

uint64_t sub_100089E78()
{
  return sub_10008AEB0();
}

uint64_t sub_100089E9C(uint64_t a1)
{
  return sub_10008AF54(a1);
}

void sub_100089EC0()
{
}

void sub_100089EE4(uint64_t a1, uint64_t a2)
{
}

void sub_100089F08(uint64_t a1)
{
}

uint64_t sub_100089F2C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_100089F6C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_100089FB0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t sub_100089FF4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t sub_10008A038()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t sub_10008A07C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t sub_10008A0C0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t sub_10008A104()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t sub_10008A148()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t sub_10008A18C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t sub_10008A1D0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t sub_10008A214(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  v9[3] = a2();
  v9[4] = a3;
  v9[0] = v3;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  sub_10000464C(a1, v6);
  swift_retain();
  return sub_1000897AC((uint64_t)v9, v6, v7);
}

uint64_t sub_10008A288()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10008A2D4(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10008A328@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_10001BA68(v1 + 40, a1, &qword_10017E0A0);
}

uint64_t sub_10008A37C(uint64_t a1)
{
  swift_beginAccess();
  sub_10008C5E4(a1, v1 + 40);
  return swift_endAccess();
}

uint64_t (*sub_10008A3D0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10008A424(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v43 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  v42 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)*sub_1000EFC0C();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_100132F10;
  int64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    uint64_t v36 = v2;
    uint64_t v37 = v1;
    v46 = _swiftEmptyArrayStorage;
    uint64_t v34 = v8;
    id v10 = v8;
    sub_10000C884(0, v9, 0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v11 = v6 + 16;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v35 = a1;
    uint64_t v14 = a1 + ((v13 + 32) & ~v13);
    uint64_t v40 = *(void *)(v11 + 56);
    unint64_t v41 = v12;
    uint64_t v39 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      unint64_t v16 = v42;
      uint64_t v15 = v43;
      v41(v42, v14, v43);
      uint64_t v44 = 2314;
      unint64_t v45 = 0xE200000000000000;
      v17._countAndFlagsBits = URL.path.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      uint64_t v18 = v44;
      unint64_t v19 = v45;
      (*v39)(v16, v15);
      Swift::String v20 = v46;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10000C884(0, v20[2] + 1, 1);
        Swift::String v20 = v46;
      }
      unint64_t v22 = v20[2];
      unint64_t v21 = v20[3];
      if (v22 >= v21 >> 1)
      {
        sub_10000C884(v21 > 1, v22 + 1, 1);
        Swift::String v20 = v46;
      }
      v20[2] = v22 + 1;
      uint64_t v23 = &v20[2 * v22];
      v23[4] = v18;
      v23[5] = v19;
      v14 += v40;
      --v9;
    }
    while (v9);
    uint64_t v3 = v36;
    uint64_t v4 = v37;
    uint64_t v8 = v34;
    a1 = v35;
  }
  else
  {
    id v24 = v8;
    Swift::String v20 = _swiftEmptyArrayStorage;
  }
  uint64_t v44 = (uint64_t)v20;
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100014AB8();
  uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = (void *)v38;
  *(void *)(v38 + 56) = &type metadata for String;
  v28[8] = sub_10002A1DC();
  v28[4] = v25;
  v28[5] = v27;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v29 = sub_10008C828(a1, v4);
  uint64_t result = swift_release();
  if (!v3)
  {
    swift_retain();
    uint64_t v31 = sub_10008CB80((uint64_t)v29, v4);
    swift_bridgeObjectRelease();
    swift_release();
    if (v31[2])
    {
      sub_100004700(&qword_10017E090);
      unint64_t v32 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      unint64_t v32 = &_swiftEmptyDictionarySingleton;
    }
    uint64_t v44 = (uint64_t)v32;
    uint64_t v33 = swift_bridgeObjectRetain();
    sub_10008B928(v33, 1, &v44);
    swift_bridgeObjectRelease();
    return v44;
  }
  return result;
}

uint64_t sub_10008A7FC(uint64_t a1)
{
  return sub_10008A82C(a1, 0xD000000000000068, 0x80000001001489F0);
}

uint64_t sub_10008A82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = (void *)*sub_1000EFC0C();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_100132F10;
  int64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v32 = a2;
    uint64_t v33 = a3;
    v42 = _swiftEmptyArrayStorage;
    uint64_t v31 = v9;
    id v11 = v9;
    sub_10000C884(0, v10, 0);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v12 = v6 + 16;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v36 = *(void *)(v12 + 56);
    uint64_t v37 = v13;
    uint64_t v38 = v12;
    uint64_t v35 = (void (**)(char *, uint64_t))(v12 - 8);
    do
    {
      uint64_t v15 = v39;
      v37(v8, v14, v39);
      uint64_t v40 = 2314;
      unint64_t v41 = 0xE200000000000000;
      v16._countAndFlagsBits = URL.path.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      uint64_t v17 = v40;
      unint64_t v18 = v41;
      (*v35)(v8, v15);
      unint64_t v19 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10000C884(0, v19[2] + 1, 1);
        unint64_t v19 = v42;
      }
      unint64_t v21 = v19[2];
      unint64_t v20 = v19[3];
      if (v21 >= v20 >> 1)
      {
        sub_10000C884(v20 > 1, v21 + 1, 1);
        unint64_t v19 = v42;
      }
      v19[2] = v21 + 1;
      unint64_t v22 = &v19[2 * v21];
      v22[4] = v17;
      v22[5] = v18;
      v14 += v36;
      --v10;
    }
    while (v10);
    a2 = v32;
    a3 = v33;
    int64_t v9 = v31;
  }
  else
  {
    id v23 = v9;
    unint64_t v19 = _swiftEmptyArrayStorage;
  }
  uint64_t v40 = (uint64_t)v19;
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100014AB8();
  uint64_t v24 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = (void *)v34;
  *(void *)(v34 + 56) = &type metadata for String;
  v27[8] = sub_10002A1DC();
  v27[4] = v24;
  v27[5] = v26;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v28 = a2;
  *(void *)(v28 + 8) = a3;
  *(_OWORD *)(v28 + 16) = 0u;
  *(_OWORD *)(v28 + 32) = 0u;
  *(_OWORD *)(v28 + 48) = 0u;
  *(void *)(v28 + 64) = 0;
  *(unsigned char *)(v28 + 72) = 28;
  return swift_willThrow();
}

uint64_t sub_10008AB5C(uint64_t a1, uint64_t a2)
{
  return sub_10008AB90(a1, a2, 101, 0xD000000000000063, (void *)0x8000000100148A60);
}

uint64_t sub_10008AB90(uint64_t a1, uint64_t a2, Swift::Int a3, uint64_t a4, void *a5)
{
  uint64_t v39 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v38 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(a3);
  v11._countAndFlagsBits = a4;
  v11._object = a5;
  String.append(_:)(v11);
  int64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = _swiftEmptyArrayStorage;
  if (v12)
  {
    uint64_t v44 = _swiftEmptyArrayStorage;
    sub_10000C884(0, v12, 0);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v14 = v9 + 16;
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v36 = *(void *)(v14 + 56);
    uint64_t v37 = v15;
    uint64_t v35 = (void (**)(char *, uint64_t))(v14 - 8);
    do
    {
      unint64_t v18 = v38;
      uint64_t v17 = v39;
      uint64_t v19 = v14;
      v37(v38, v16, v39);
      uint64_t v40 = 2314;
      unint64_t v41 = 0xE200000000000000;
      v20._countAndFlagsBits = URL.path.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      uint64_t v22 = v40;
      unint64_t v21 = v41;
      (*v35)(v18, v17);
      uint64_t v13 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10000C884(0, v13[2] + 1, 1);
        uint64_t v13 = v44;
      }
      unint64_t v24 = v13[2];
      unint64_t v23 = v13[3];
      if (v24 >= v23 >> 1)
      {
        sub_10000C884(v23 > 1, v24 + 1, 1);
        uint64_t v13 = v44;
      }
      v13[2] = v24 + 1;
      uint64_t v25 = &v13[2 * v24];
      v25[4] = v22;
      v25[5] = v21;
      v16 += v36;
      --v12;
      uint64_t v14 = v19;
    }
    while (v12);
  }
  uint64_t v40 = (uint64_t)v13;
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100014AB8();
  uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  uint64_t v30 = v42;
  unint64_t v31 = v43;
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v32 = v30;
  *(void *)(v32 + 8) = v31;
  *(_OWORD *)(v32 + 16) = 0u;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(void *)(v32 + 64) = 0;
  *(unsigned char *)(v32 + 72) = 28;
  return swift_willThrow();
}

void sub_10008AE68(uint64_t a1)
{
}

uint64_t sub_10008AE8C()
{
  return sub_10008AEB0();
}

uint64_t sub_10008AEB0()
{
  sub_10002A230();
  uint64_t v0 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return 0;
}

uint64_t sub_10008AF30(uint64_t a1)
{
  return sub_10008AF54(a1);
}

uint64_t sub_10008AF54(uint64_t a1)
{
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100132F10;
  uint64_t v3 = URL.path.getter();
  uint64_t v5 = v4;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_10002A1DC();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v5;
  sub_10002A230();
  uint64_t v6 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  sub_100004700(&qword_10017FB40);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100132F10;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(v10 + v9, a1, v7);
  return v10;
}

void sub_10008B0E8()
{
}

void sub_10008B10C()
{
  sub_10002A230();
  uint64_t v0 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
}

void sub_10008B184(uint64_t a1, uint64_t a2)
{
}

void sub_10008B1A8(uint64_t a1, uint64_t a2)
{
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100132F10;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_10002A1DC();
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = a2;
  sub_10002A230();
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
}

void sub_10008B280(uint64_t a1)
{
}

void sub_10008B2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  unint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_100132F10;
  int64_t v10 = *(void *)(a1 + 16);
  Swift::String v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v27[1] = a2;
    v27[2] = a3;
    v27[3] = v3;
    uint64_t v36 = _swiftEmptyArrayStorage;
    sub_10000C884(0, v10, 0);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v12 = v7 + 16;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v30 = *(void *)(v12 + 56);
    unint64_t v31 = v13;
    uint64_t v32 = v12;
    Swift::String v29 = (void (**)(char *, uint64_t))(v12 - 8);
    do
    {
      uint64_t v15 = v33;
      v31(v9, v14, v33);
      uint64_t v34 = 2314;
      unint64_t v35 = 0xE200000000000000;
      v16._countAndFlagsBits = URL.path.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      uint64_t v17 = v34;
      unint64_t v18 = v35;
      (*v29)(v9, v15);
      Swift::String v11 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10000C884(0, v11[2] + 1, 1);
        Swift::String v11 = v36;
      }
      unint64_t v20 = v11[2];
      unint64_t v19 = v11[3];
      if (v20 >= v19 >> 1)
      {
        sub_10000C884(v19 > 1, v20 + 1, 1);
        Swift::String v11 = v36;
      }
      v11[2] = v20 + 1;
      unint64_t v21 = &v11[2 * v20];
      v21[4] = v17;
      v21[5] = v18;
      v14 += v30;
      --v10;
    }
    while (v10);
  }
  uint64_t v34 = (uint64_t)v11;
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_100014AB8();
  uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = (void *)v28;
  *(void *)(v28 + 56) = &type metadata for String;
  v25[8] = sub_10002A1DC();
  v25[4] = v22;
  v25[5] = v24;
  sub_10002A230();
  uint64_t v26 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
}

uint64_t sub_10008B588()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10008CE9C(v0 + 40);

  return _swift_deallocClassInstance(v0, 80, 7);
}

double sub_10008B5D0()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = _swiftEmptyArrayStorage;
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(void *)(v0 + 72) = 0;
  return result;
}

uint64_t sub_10008B614()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t sub_10008B658()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t sub_10008B69C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t sub_10008B6E0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t sub_10008B724()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t sub_10008B768()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t sub_10008B7AC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t sub_10008B7F0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t sub_10008B834()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t sub_10008B878()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

uint64_t sub_10008B8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017E098);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32);

  return v5(v4, v4, a1);
}

uint64_t sub_10008B928(uint64_t a1, int a2, void *a3)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int64_t v10 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004700(&qword_10017E088);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  LODWORD(v58) = a2;
  v55[1] = v3;
  uint64_t v17 = *(int *)(v12 + 48);
  v55[0] = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = a1 + v55[0];
  uint64_t v60 = *(void *)(v13 + 72);
  uint64_t v57 = a1;
  swift_bridgeObjectRetain();
  sub_10001BA68(v18, (uint64_t)v15, &qword_10017E088);
  uint64_t v56 = v8;
  unint64_t v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v61 = v7;
  v62 = v19;
  v19((unint64_t)v10, v15, v7);
  uint64_t v59 = v17;
  char v20 = v15[v17];
  v63 = a3;
  uint64_t v21 = *a3;
  unint64_t v23 = sub_10005FCA4((uint64_t)v10);
  uint64_t v24 = *(void *)(v21 + 16);
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_24;
  }
  char v27 = v22;
  if (*(void *)(v21 + 24) >= v26)
  {
    if (v58)
    {
      if (v22) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_10008BE74();
      if (v27) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v32 = (void *)*v63;
    *(void *)(*v63 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    uint64_t v33 = v32[6];
    uint64_t v58 = *(void *)(v56 + 72);
    uint64_t v34 = v61;
    v62(v33 + v58 * v23, v10, v61);
    *(unsigned char *)(v32[7] + v23) = v20;
    uint64_t v35 = v32[2];
    BOOL v36 = __OFADD__(v35, 1);
    uint64_t v37 = v35 + 1;
    if (v36)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v32[2] = v37;
    uint64_t v38 = v16 - 1;
    if (v16 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    uint64_t v39 = v57 + v60 + v55[0];
    while (1)
    {
      sub_10001BA68(v39, (uint64_t)v15, &qword_10017E088);
      v62((unint64_t)v10, v15, v34);
      char v40 = v15[v59];
      unint64_t v41 = (void *)*v63;
      unint64_t v43 = sub_10005FCA4((uint64_t)v10);
      uint64_t v44 = v41[2];
      BOOL v45 = (v42 & 1) == 0;
      uint64_t v46 = v44 + v45;
      if (__OFADD__(v44, v45)) {
        break;
      }
      char v47 = v42;
      if (v41[3] < v46)
      {
        sub_10008C104(v46, 1);
        unint64_t v48 = sub_10005FCA4((uint64_t)v10);
        if ((v47 & 1) != (v49 & 1)) {
          goto LABEL_26;
        }
        unint64_t v43 = v48;
      }
      if (v47) {
        goto LABEL_10;
      }
      v50 = (void *)*v63;
      *(void *)(*v63 + 8 * (v43 >> 6) + 64) |= 1 << v43;
      uint64_t v34 = v61;
      v62(v50[6] + v58 * v43, v10, v61);
      *(unsigned char *)(v50[7] + v43) = v40;
      uint64_t v51 = v50[2];
      BOOL v36 = __OFADD__(v51, 1);
      uint64_t v52 = v51 + 1;
      if (v36) {
        goto LABEL_25;
      }
      v50[2] = v52;
      v39 += v60;
      if (!--v38) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_10008C104(v26, v58 & 1);
  unint64_t v28 = sub_10005FCA4((uint64_t)v10);
  if ((v27 & 1) == (v29 & 1))
  {
    unint64_t v23 = v28;
    if ((v27 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v31 = swift_allocError();
    swift_willThrow();
    uint64_t v66 = v31;
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v10, v61);
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  uint64_t v64 = 0;
  unint64_t v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v53._object = (void *)0x80000001001460E0;
  v53._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v53);
  _print_unlocked<A, B>(_:_:)();
  v54._countAndFlagsBits = 39;
  v54._object = (void *)0xE100000000000000;
  String.append(_:)(v54);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10008BE74()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004700(&qword_10017E090);
  char v22 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *char v22 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v23 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v26 = v2 + 16;
  int64_t v24 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v25 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    char v17 = *(unsigned char *)(*(void *)(v5 + 56) + v15);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(unsigned char *)(*(void *)(v7 + 56) + v15) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v24) {
    goto LABEL_23;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10008C104(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100004700(&qword_10017E090);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    char v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    unint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      char v28 = *(unsigned char *)(*(void *)(v9 + 56) + v21);
      sub_10008CF20(&qword_10017BE90);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(unsigned char *)(*(void *)(v11 + 56) + v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

size_t sub_10008C514(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_10008C64C(a1, a2, a3, (void *)*v3);
  size_t *v3 = result;
  return result;
}

uint64_t sub_10008C534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017E088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NullSystemPolicyClient()
{
  return self;
}

uint64_t type metadata accessor for AllowAllSystemPolicyClient()
{
  return self;
}

uint64_t sub_10008C5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017E0A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

size_t sub_10008C64C(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100004700(&qword_10017E3E0);
  uint64_t v10 = *(void *)(sub_100004700(&qword_10017E088) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_100004700(&qword_10017E088) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

char *sub_10008C828(uint64_t a1, uint64_t a2)
{
  void (*v15)(void *__return_ptr, size_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t (**v32)(char *, char *, uint64_t);
  void (**v33)(char *, uint64_t);
  void (**v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(void *__return_ptr, size_t);
  uint64_t v39;
  int64_t v40;
  void v41[5];
  void v42[6];
  char *v43;

  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v30 - v9;
  int64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = (char *)_swiftEmptyArrayStorage;
  if (v11)
  {
    unint64_t v43 = (char *)_swiftEmptyArrayStorage;
    char v40 = v11;
    size_t v13 = sub_100044920(0, v11, 0);
    uint64_t v36 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v14 = a1 + v36;
    uint64_t v15 = *(void (**)(void *__return_ptr, size_t))(*(void *)a2 + 128);
    uint64_t v37 = *(void *)a2 + 128;
    int64_t v38 = v15;
    unint64_t v16 = *(void *)(v5 + 72);
    BOOL v34 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v35 = v16;
    char v32 = (uint64_t (**)(char *, char *, uint64_t))(v5 + 32);
    unint64_t v33 = (void (**)(char *, uint64_t))(v5 + 8);
    unint64_t v31 = v10;
    do
    {
      v38(v42, v13);
      if (v42[3])
      {
        char v17 = v4;
        int64_t v18 = v8;
        unint64_t v19 = a2;
        sub_10000469C((uint64_t)v42, (uint64_t)v41);
        sub_10008CE9C((uint64_t)v42);
        unint64_t v20 = v41[4];
        unint64_t v21 = (char *)sub_1000036B0(v41, v41[3]);
        int64_t v22 = URL.path.getter();
        unint64_t v12 = v21;
        unint64_t v23 = v39;
        (*(void (**)(uint64_t))(v20 + 152))(v22);
        if (v23)
        {
          swift_bridgeObjectRelease();
          sub_10000478C((uint64_t)v41);
          swift_release();
          return v12;
        }
        uint64_t v25 = v24;
        uint64_t v39 = 0;
        swift_bridgeObjectRelease();
        sub_10000478C((uint64_t)v41);
        a2 = v19;
        uint64_t v8 = v18;
        uint64_t v4 = v17;
        uint64_t v10 = v31;
      }
      else
      {
        sub_10008CE9C((uint64_t)v42);
        uint64_t v25 = 0;
      }
      (*v34)(v8, v14, v4);
      if (!v25) {
        URL.path.getter();
      }
      (*v33)(v8, v4);
      URL.init(fileURLWithPath:)();
      swift_bridgeObjectRelease();
      unint64_t v12 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100044920(0, *((void *)v12 + 2) + 1, 1);
        unint64_t v12 = v43;
      }
      uint64_t v27 = *((void *)v12 + 2);
      unint64_t v26 = *((void *)v12 + 3);
      if (v27 >= v26 >> 1)
      {
        sub_100044920(v26 > 1, v27 + 1, 1);
        unint64_t v12 = v43;
      }
      *((void *)v12 + 2) = v27 + 1;
      char v28 = v35;
      size_t v13 = (*v32)(&v12[v36 + v27 * v35], v10, v4);
      unint64_t v43 = v12;
      v14 += v28;
      --v40;
    }
    while (v40);
  }
  return v12;
}

void *sub_10008CB80(uint64_t a1, uint64_t a2)
{
  void (*v13)(void *__return_ptr);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (**v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void *__return_ptr);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void v35[3];
  uint64_t v36;
  uint64_t v37;
  void v38[5];
  void *v39;

  uint64_t v3 = v2;
  uint64_t v6 = sub_100004700(&qword_10017E088);
  char v32 = *(void *)(v6 - 8);
  unint64_t v33 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    uint64_t v39 = _swiftEmptyArrayStorage;
    sub_10008C514(0, v9, 0);
    uint64_t v29 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v29 - 8);
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    size_t v13 = *(void (**)(void *__return_ptr))(*(void *)a2 + 128);
    unint64_t v30 = *(void *)a2 + 128;
    unint64_t v31 = v13;
    char v28 = *(void *)(v11 + 72);
    uint64_t v27 = (void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    do
    {
      uint64_t v14 = URL.path.getter();
      unint64_t v16 = v15;
      v31(v38);
      if (v38[3])
      {
        char v17 = a2;
        sub_10000469C((uint64_t)v38, (uint64_t)v35);
        sub_10008CE9C((uint64_t)v38);
        BOOL v34 = v3;
        unint64_t v19 = v36;
        int64_t v18 = v37;
        uint64_t v10 = sub_1000036B0(v35, v36);
        unint64_t v20 = v34;
        unint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 224))(v14, v16, v19, v18);
        uint64_t v3 = v20;
        if (v20)
        {
          swift_bridgeObjectRelease();
          sub_10000478C((uint64_t)v35);
          swift_release();
          return v10;
        }
        int64_t v22 = v21;
        swift_bridgeObjectRelease();
        sub_10000478C((uint64_t)v35);
        a2 = v17;
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_10008CE9C((uint64_t)v38);
        int64_t v22 = 0;
      }
      unint64_t v23 = *(int *)(v33 + 48);
      (*v27)(v8, v12, v29);
      v8[v23] = v22 & 1;
      uint64_t v10 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10008C514(0, v10[2] + 1, 1);
        uint64_t v10 = v39;
      }
      uint64_t v25 = v10[2];
      int64_t v24 = v10[3];
      if (v25 >= v24 >> 1)
      {
        sub_10008C514(v24 > 1, v25 + 1, 1);
        uint64_t v10 = v39;
      }
      v10[2] = v25 + 1;
      sub_10008C534((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v25);
      v12 += v28;
      --v9;
    }
    while (v9);
  }
  return v10;
}

uint64_t sub_10008CE9C(uint64_t a1)
{
  uint64_t v2 = sub_100004700(&qword_10017E0A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AllowARVOnlySystemPolicyClient()
{
  return self;
}

uint64_t sub_10008CF20(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URL();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008CF6C()
{
  return 0xD000000000000011;
}

uint64_t sub_10008CF88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_10008DD78(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_10008CFB8(uint64_t a1)
{
  unint64_t v2 = sub_100090058();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008CFF4(uint64_t a1)
{
  unint64_t v2 = sub_100090058();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10008D030@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10008DE00(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10008D05C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v5 = [self mainBundle];
  id v6 = [v5 executablePath];

  if (!v6)
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v41 = 0xD000000000000026;
    *(void *)(v41 + 8) = 0x8000000100148E80;
LABEL_17:
    *(_OWORD *)(v41 + 16) = 0u;
    *(_OWORD *)(v41 + 32) = 0u;
    *(_OWORD *)(v41 + 48) = 0u;
    *(void *)(v41 + 64) = 0;
    *(unsigned char *)(v41 + 72) = 33;
    return swift_willThrow();
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_1000036B0(a1, v10);
  sub_1001297F4(v10, v11);
  uint64_t v12 = *((void *)&v87 + 1);
  uint64_t v13 = v88;
  sub_1000036B0(&v86, *((uint64_t *)&v87 + 1));
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 112))(&v102, v7, v9, 1, v12, v13);
  swift_bridgeObjectRelease();
  if (!v103)
  {
    sub_1000130EC((uint64_t)&v102, &qword_10017C930);
    sub_10000478C((uint64_t)&v86);
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v41 = 0xD00000000000002ALL;
    *(void *)(v41 + 8) = 0x8000000100148EB0;
    goto LABEL_17;
  }
  uint64_t v107 = v2;
  uint64_t v83 = a2;
  sub_10000372C(&v102, (uint64_t)v104);
  sub_10000478C((uint64_t)&v86);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_1000036B0(a1, v14);
  sub_10007F4B4(v14, v15);
  uint64_t v16 = *((void *)&v87 + 1);
  uint64_t v17 = v88;
  sub_1000036B0(&v86, *((uint64_t *)&v87 + 1));
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 192))(v16, v17);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  sub_10000478C((uint64_t)&v86);
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_1000036B0(a1, v23);
  sub_10007F4B4(v23, v24);
  uint64_t v25 = *((void *)&v87 + 1);
  uint64_t v26 = v88;
  sub_1000036B0(&v86, *((uint64_t *)&v87 + 1));
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 184))(v25, v26);
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  sub_10000478C((uint64_t)&v86);
  sub_100004700(&qword_10017E3F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100132F30;
  *(void *)(inited + 32) = v18;
  *(void *)(inited + 40) = v20;
  *(void *)(inited + 48) = v22;
  *(void *)(inited + 56) = v27;
  *(void *)(inited + 64) = v29;
  *(void *)(inited + 72) = v31;
  unint64_t v33 = (char *)_swiftEmptyArrayStorage;
  if (v20 != 1)
  {
    swift_bridgeObjectRetain();
    unint64_t v33 = sub_10008DC5C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v35 = *((void *)v33 + 2);
    unint64_t v34 = *((void *)v33 + 3);
    if (v35 >= v34 >> 1) {
      unint64_t v33 = sub_10008DC5C((char *)(v34 > 1), v35 + 1, 1, v33);
    }
    *((void *)v33 + 2) = v35 + 1;
    uint64_t v36 = &v33[24 * v35];
    *((void *)v36 + 4) = v18;
    *((void *)v36 + 5) = v20;
    *((void *)v36 + 6) = v22;
  }
  if (v29 != 1)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v33 = sub_10008DC5C(0, *((void *)v33 + 2) + 1, 1, v33);
    }
    unint64_t v38 = *((void *)v33 + 2);
    unint64_t v37 = *((void *)v33 + 3);
    if (v38 >= v37 >> 1) {
      unint64_t v33 = sub_10008DC5C((char *)(v37 > 1), v38 + 1, 1, v33);
    }
    *((void *)v33 + 2) = v38 + 1;
    uint64_t v39 = &v33[24 * v38];
    *((void *)v39 + 4) = v27;
    *((void *)v39 + 5) = v29;
    *((void *)v39 + 6) = v31;
  }
  swift_release();
  if (sub_1000EF0B4())
  {
    swift_bridgeObjectRelease();
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v40 = 0xD000000000000029;
    *(void *)(v40 + 8) = 0x8000000100148F30;
LABEL_32:
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    *(_OWORD *)(v40 + 48) = 0u;
    *(void *)(v40 + 64) = 0;
    *(unsigned char *)(v40 + 72) = 33;
    swift_willThrow();
    return sub_10000478C((uint64_t)v104);
  }
  uint64_t v43 = *((void *)v33 + 2);
  if (!v43)
  {
LABEL_26:
    *(void *)&long long v86 = 0;
    *((void *)&v86 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v59._countAndFlagsBits = 0xD00000000000004ALL;
    v59._object = (void *)0x8000000100148EE0;
    String.append(_:)(v59);
    int64_t v60 = *((void *)v33 + 2);
    if (v60)
    {
      *(void *)&long long v102 = _swiftEmptyArrayStorage;
      sub_10000C884(0, v60, 0);
      uint64_t v61 = v102;
      v62 = v33 + 52;
      do
      {
        uint64_t v63 = *(void *)(v62 - 20);
        uint64_t v64 = *(void *)(v62 - 12);
        unint64_t v65 = *(void *)(v62 - 4);
        swift_bridgeObjectRetain();
        uint64_t v66 = sub_1000F0F88(v63, v64, v65);
        uint64_t v68 = v67;
        swift_bridgeObjectRelease();
        *(void *)&long long v102 = v61;
        unint64_t v70 = *(void *)(v61 + 16);
        unint64_t v69 = *(void *)(v61 + 24);
        if (v70 >= v69 >> 1)
        {
          sub_10000C884(v69 > 1, v70 + 1, 1);
          uint64_t v61 = v102;
        }
        v62 += 24;
        *(void *)(v61 + 16) = v70 + 1;
        uint64_t v71 = v61 + 16 * v70;
        *(void *)(v71 + 32) = v66;
        *(void *)(v71 + 40) = v68;
        --v60;
      }
      while (v60);
    }
    swift_bridgeObjectRelease();
    v72._countAndFlagsBits = Array.description.getter();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v73._countAndFlagsBits = 46;
    v73._object = (void *)0xE100000000000000;
    String.append(_:)(v73);
    long long v74 = v86;
    sub_100012E3C();
    swift_allocError();
    *(_OWORD *)uint64_t v40 = v74;
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  v82 = v33;
  uint64_t v44 = v33 + 52;
  while (1)
  {
    uint64_t v45 = *(void *)(v44 - 12);
    uint64_t v47 = v105;
    uint64_t v46 = v106;
    uint64_t v84 = *(void *)(v44 - 4);
    uint64_t v85 = *(void *)(v44 - 20);
    sub_1000036B0(v104, v105);
    swift_bridgeObjectRetain();
    unint64_t v48 = sub_1000A1AB8();
    uint64_t v49 = *v48;
    uint64_t v50 = v48[1];
    uint64_t v51 = v48[2];
    uint64_t v52 = v48[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v53 = v49;
    uint64_t v54 = v107;
    uint64_t v55 = sub_1000FFA30(v53, v50, v51, v52, v85, v45, v84, v47, v46);
    if (!v54) {
      break;
    }
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v107 = 0;
LABEL_21:
    v44 += 24;
    if (!--v43)
    {
      unint64_t v33 = v82;
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
  }
  uint64_t v57 = v55;
  unint64_t v58 = v56;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v58 >> 60 == 15)
  {
    uint64_t v107 = 0;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease_n();
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10008DF78();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  sub_10002404C(v57, v58);
  swift_release();
  long long v75 = v99;
  *(_OWORD *)(v83 + 192) = v98;
  *(_OWORD *)(v83 + 208) = v75;
  *(_OWORD *)(v83 + 224) = v100;
  *(void *)(v83 + 240) = v101;
  long long v76 = v95;
  *(_OWORD *)(v83 + 128) = v94;
  *(_OWORD *)(v83 + 144) = v76;
  long long v77 = v97;
  *(_OWORD *)(v83 + 160) = v96;
  *(_OWORD *)(v83 + 176) = v77;
  long long v78 = v91;
  *(_OWORD *)(v83 + 64) = v90;
  *(_OWORD *)(v83 + 80) = v78;
  long long v79 = v93;
  *(_OWORD *)(v83 + 96) = v92;
  *(_OWORD *)(v83 + 112) = v79;
  long long v80 = v87;
  *(_OWORD *)uint64_t v83 = v86;
  *(_OWORD *)(v83 + 16) = v80;
  long long v81 = v89;
  *(_OWORD *)(v83 + 32) = v88;
  *(_OWORD *)(v83 + 48) = v81;
  return sub_10000478C((uint64_t)v104);
}

unint64_t sub_10008D8B8(char a1)
{
  unint64_t result = 0x56726567616E614DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x61506C656E72654BLL;
      break;
    case 2:
      unint64_t result = 0x6365746968637241;
      break;
    case 3:
    case 8:
    case 17:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 7:
      unint64_t result = 0xD000000000000022;
      break;
    case 9:
      unint64_t result = 0xD000000000000016;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    case 11:
      unint64_t result = 0xD000000000000017;
      break;
    case 12:
      unint64_t result = 0xD000000000000021;
      break;
    case 13:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 14:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 15:
      unint64_t result = 0xD000000000000023;
      break;
    case 16:
      unint64_t result = 0xD000000000000015;
      break;
    case 18:
      unint64_t result = 0x6F69747065637845;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10008DB10()
{
  return sub_10008D8B8(*v0);
}

uint64_t sub_10008DB18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008DFCC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10008DB40(unsigned char *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_10008DB4C(uint64_t a1)
{
  unint64_t v2 = sub_10008FF44();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008DB88(uint64_t a1)
{
  unint64_t v2 = sub_10008FF44();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10008DBC4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10008E6F4(a1, (uint64_t)v12);
  if (!v2)
  {
    long long v5 = v24;
    *(_OWORD *)(a2 + 192) = v23;
    *(_OWORD *)(a2 + 208) = v5;
    *(_OWORD *)(a2 + 224) = v25;
    *(void *)(a2 + 240) = v26;
    long long v6 = v20;
    *(_OWORD *)(a2 + 128) = v19;
    *(_OWORD *)(a2 + 144) = v6;
    long long v7 = v22;
    *(_OWORD *)(a2 + 160) = v21;
    *(_OWORD *)(a2 + 176) = v7;
    long long v8 = v16;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v8;
    long long v9 = v18;
    *(_OWORD *)(a2 + 96) = v17;
    *(_OWORD *)(a2 + 112) = v9;
    long long v10 = v12[1];
    *(_OWORD *)a2 = v12[0];
    *(_OWORD *)(a2 + 16) = v10;
    double result = *(double *)&v13;
    long long v11 = v14;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v11;
  }
  return result;
}

char *sub_10008DC5C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017E408);
    long long v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    long long v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  long long v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10008DD78(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100149170)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void *sub_10008DE00(void *a1)
{
  uint64_t v3 = sub_100004700(&qword_10017E410);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = sub_1000036B0(a1, a1[3]);
  sub_100090058();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000478C((uint64_t)a1);
  }
  else
  {
    sub_100004700(&qword_10017E418);
    sub_1000900AC();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    int64_t v7 = (void *)v9[1];
    sub_10000478C((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_10008DF78()
{
  unint64_t result = qword_10017E3E8;
  if (!qword_10017E3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E3E8);
  }
  return result;
}

uint64_t sub_10008DFCC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x56726567616E614DLL && a2 == 0xEE006E6F69737265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61506C656E72654BLL && a2 == 0xEA00000000006874 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6365746968637241 && a2 == 0xED00007365727574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100148F60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100148F80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100148FA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100148FC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x8000000100148FE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100149010 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100149030 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100149050 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100149070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x8000000100149090 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001001490C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001001490E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000023 && a2 == 0x8000000100149100 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100149130 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100149150 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x6F69747065637845 && a2 == 0xEA0000000000736ELL)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 18;
    }
    else {
      return 19;
    }
  }
}

uint64_t sub_10008E6F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004700(&qword_10017E3F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  long long v86 = a1;
  sub_1000036B0(a1, v9);
  sub_10008FF44();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000478C((uint64_t)v86);
  }
  uint64_t v73 = a2;
  LOBYTE(v103[0]) = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v103[0]) = 1;
  uint64_t v71 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v72 = v10;
  uint64_t v12 = v11;
  sub_100004700((uint64_t *)&unk_10017E5D0);
  LOBYTE(v87) = 2;
  unint64_t v13 = sub_10008FF98();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v85 = v12;
  unint64_t v78 = v13;
  uint64_t v14 = v103[0];
  LOBYTE(v103[0]) = 3;
  swift_bridgeObjectRetain();
  uint64_t v69 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v70 = v14;
  LOBYTE(v103[0]) = 4;
  uint64_t v16 = v15;
  swift_bridgeObjectRetain();
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v84 = v16;
  uint64_t v68 = v17;
  LOBYTE(v103[0]) = 5;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v83 = v19;
  uint64_t v67 = v20;
  LOBYTE(v103[0]) = 6;
  uint64_t v22 = v21;
  swift_bridgeObjectRetain();
  uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v82 = v22;
  uint64_t v66 = v23;
  LOBYTE(v103[0]) = 7;
  uint64_t v25 = v24;
  swift_bridgeObjectRetain();
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v81 = v25;
  uint64_t v65 = v26;
  LOBYTE(v87) = 8;
  uint64_t v28 = v27;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v80 = v28;
  LOBYTE(v87) = 9;
  uint64_t v64 = v103[0];
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  LOBYTE(v87) = 10;
  uint64_t v29 = v103[0];
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  LOBYTE(v87) = 11;
  uint64_t v79 = v103[0];
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v30 = v103[0];
  LOBYTE(v103[0]) = 12;
  unint64_t v78 = v30;
  swift_bridgeObjectRetain();
  uint64_t v63 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v77 = v31;
  LOBYTE(v103[0]) = 13;
  swift_bridgeObjectRetain();
  uint64_t v62 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v76 = v32;
  LOBYTE(v103[0]) = 14;
  swift_bridgeObjectRetain();
  uint64_t v61 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v75 = v33;
  LOBYTE(v103[0]) = 15;
  swift_bridgeObjectRetain();
  uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v74 = v35;
  uint64_t v36 = v34;
  LOBYTE(v103[0]) = 16;
  swift_bridgeObjectRetain();
  uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v38 = v37;
  LOBYTE(v103[0]) = 17;
  swift_bridgeObjectRetain();
  *(void *)&long long v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)&v59 + 1) = v39;
  char v104 = 18;
  sub_100090004();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v58 = v29;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v56 = v105;
  *(void *)&long long v87 = v72;
  *((void *)&v87 + 1) = v71;
  *(void *)&long long v88 = v85;
  *((void *)&v88 + 1) = v70;
  *(void *)&long long v89 = v69;
  *((void *)&v89 + 1) = v84;
  *(void *)&long long v90 = v68;
  *((void *)&v90 + 1) = v83;
  *(void *)&long long v91 = v67;
  *((void *)&v91 + 1) = v82;
  *(void *)&long long v92 = v66;
  *((void *)&v92 + 1) = v81;
  *(void *)&long long v93 = v65;
  *((void *)&v93 + 1) = v80;
  *(void *)&long long v94 = v64;
  *((void *)&v94 + 1) = v29;
  *(void *)&long long v95 = v79;
  *((void *)&v95 + 1) = v78;
  *(void *)&long long v96 = v63;
  *((void *)&v96 + 1) = v77;
  *(void *)&long long v97 = v62;
  *((void *)&v97 + 1) = v76;
  *(void *)&long long v98 = v61;
  *((void *)&v98 + 1) = v75;
  uint64_t v57 = v36;
  *(void *)&long long v99 = v36;
  *((void *)&v99 + 1) = v74;
  *(void *)&long long v100 = v60;
  *((void *)&v100 + 1) = v38;
  uint64_t v40 = v38;
  uint64_t v41 = *((void *)&v59 + 1);
  long long v101 = v59;
  uint64_t v102 = v105;
  sub_100013318((uint64_t)&v87);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v42 = v78;
  swift_bridgeObjectRelease();
  uint64_t v43 = v77;
  swift_bridgeObjectRelease();
  uint64_t v44 = v76;
  swift_bridgeObjectRelease();
  uint64_t v45 = v75;
  swift_bridgeObjectRelease();
  uint64_t v46 = v74;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)v86);
  v103[0] = v72;
  v103[1] = v71;
  v103[2] = v85;
  v103[3] = v70;
  v103[4] = v69;
  v103[5] = v84;
  v103[6] = v68;
  v103[7] = v83;
  v103[8] = v67;
  v103[9] = v82;
  v103[10] = v66;
  v103[11] = v81;
  v103[12] = v65;
  v103[13] = v80;
  v103[14] = v64;
  v103[15] = v58;
  v103[16] = v79;
  v103[17] = v42;
  v103[18] = v63;
  v103[19] = v43;
  v103[20] = v62;
  v103[21] = v44;
  v103[22] = v61;
  v103[23] = v45;
  v103[24] = v57;
  v103[25] = v46;
  v103[26] = v60;
  v103[27] = v40;
  v103[28] = v59;
  v103[29] = v41;
  v103[30] = v56;
  uint64_t result = sub_10001100C((uint64_t)v103);
  long long v48 = v100;
  uint64_t v49 = v73;
  *(_OWORD *)(v73 + 192) = v99;
  *(_OWORD *)(v49 + 208) = v48;
  *(_OWORD *)(v49 + 224) = v101;
  *(void *)(v49 + 240) = v102;
  long long v50 = v96;
  *(_OWORD *)(v49 + 128) = v95;
  *(_OWORD *)(v49 + 144) = v50;
  long long v51 = v98;
  *(_OWORD *)(v49 + 160) = v97;
  *(_OWORD *)(v49 + 176) = v51;
  long long v52 = v92;
  *(_OWORD *)(v49 + 64) = v91;
  *(_OWORD *)(v49 + 80) = v52;
  long long v53 = v94;
  *(_OWORD *)(v49 + 96) = v93;
  *(_OWORD *)(v49 + 112) = v53;
  long long v54 = v88;
  *(_OWORD *)uint64_t v49 = v87;
  *(_OWORD *)(v49 + 16) = v54;
  long long v55 = v90;
  *(_OWORD *)(v49 + 32) = v89;
  *(_OWORD *)(v49 + 48) = v55;
  return result;
}

uint64_t destroy for KernelManagementConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KernelManagementConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  uint64_t v12 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v12;
  uint64_t v13 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v13;
  uint64_t v14 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v14;
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  uint64_t v16 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v16;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KernelManagementConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[20] = a2[20];
  a1[21] = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[22] = a2[22];
  a1[23] = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[24] = a2[24];
  a1[25] = a2[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[26] = a2[26];
  a1[27] = a2[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[28] = a2[28];
  a1[29] = a2[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[30] = a2[30];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for KernelManagementConfiguration(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for KernelManagementConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v12;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KernelManagementConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 248)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KernelManagementConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 248) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 248) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelManagementConfiguration()
{
  return &type metadata for KernelManagementConfiguration;
}

ValueMetadata *type metadata accessor for KernelManagementConfiguration.ExceptionsConfiguration()
{
  return &type metadata for KernelManagementConfiguration.ExceptionsConfiguration;
}

unint64_t sub_10008FF44()
{
  unint64_t result = qword_100186B30;
  if (!qword_100186B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100186B30);
  }
  return result;
}

unint64_t sub_10008FF98()
{
  unint64_t result = qword_10017C050;
  if (!qword_10017C050)
  {
    sub_1000126B8((uint64_t *)&unk_10017E5D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C050);
  }
  return result;
}

unint64_t sub_100090004()
{
  unint64_t result = qword_10017E400;
  if (!qword_10017E400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E400);
  }
  return result;
}

unint64_t sub_100090058()
{
  unint64_t result = qword_100186B38[0];
  if (!qword_100186B38[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100186B38);
  }
  return result;
}

unint64_t sub_1000900AC()
{
  unint64_t result = qword_10017E420;
  if (!qword_10017E420)
  {
    sub_1000126B8(&qword_10017E418);
    sub_10008FF98();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E420);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000901C4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys()
{
  return &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for KernelManagementConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KernelManagementConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *unint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100090358);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelManagementConfiguration.CodingKeys()
{
  return &type metadata for KernelManagementConfiguration.CodingKeys;
}

unint64_t sub_100090394()
{
  unint64_t result = qword_100186C40[0];
  if (!qword_100186C40[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100186C40);
  }
  return result;
}

unint64_t sub_1000903EC()
{
  unint64_t result = qword_100186E50[0];
  if (!qword_100186E50[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100186E50);
  }
  return result;
}

unint64_t sub_100090444()
{
  unint64_t result = qword_100186F60;
  if (!qword_100186F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100186F60);
  }
  return result;
}

unint64_t sub_10009049C()
{
  unint64_t result = qword_100186F68[0];
  if (!qword_100186F68[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100186F68);
  }
  return result;
}

unint64_t sub_1000904F4()
{
  unint64_t result = qword_100186FF0;
  if (!qword_100186FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100186FF0);
  }
  return result;
}

unint64_t sub_10009054C()
{
  unint64_t result = qword_100186FF8[0];
  if (!qword_100186FF8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100186FF8);
  }
  return result;
}

uint64_t sub_1000905A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  uint64_t v34 = v3;
  __chkstk_darwin(v2);
  uint64_t v32 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v28 = *(void *)(v5 - 8);
  uint64_t v29 = v5;
  __chkstk_darwin(v5);
  uint64_t v27 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v0 + 24);
  aBlock = *(void ***)(v0 + 16);
  uint64_t v37 = v11;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 47;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  uint64_t v14 = aBlock;
  uint64_t v13 = v37;
  aBlock = (void **)*(unsigned __int8 *)(v0
                                       + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_context);
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v17 = v16;
  aBlock = v14;
  uint64_t v37 = v13;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = (uint64_t)aBlock;
  unint64_t v20 = v37;
  unint64_t v26 = sub_100090AA8();
  sub_1000913E4(0x3CuLL, v19, v20);
  swift_bridgeObjectRelease();
  static String._fromSubstring(_:)();
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  aBlock = (void **)_swiftEmptyArrayStorage;
  sub_1000916C0((unint64_t *)&qword_10017DCE8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100004700(&qword_10017DCF0);
  sub_10008669C((unint64_t *)&qword_10017DCF8, &qword_10017DCF0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v28 + 104))(v27, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v29);
  uint64_t v21 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v40 = sub_1000914A0;
  uint64_t v41 = v1;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  uint64_t v38 = sub_10000AFF8;
  uint64_t v39 = &unk_10016DA00;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = _swiftEmptyArrayStorage;
  sub_1000916C0((unint64_t *)&qword_10017EBD0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100004700((uint64_t *)&unk_10017DEB0);
  sub_10008669C((unint64_t *)&qword_10017EBE0, (uint64_t *)&unk_10017DEB0);
  uint64_t v23 = v32;
  uint64_t v24 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v23, v24);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v31);
  return swift_release();
}

unint64_t sub_100090AA8()
{
  unint64_t result = qword_10017DCE0;
  if (!qword_10017DCE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017DCE0);
  }
  return result;
}

Swift::Int sub_100090AE8()
{
  return OS_dispatch_semaphore.signal()();
}

void *sub_100090B14@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_100090B34(uint64_t a1, uint64_t a2, char a3)
{
  char v5 = a3 & 1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  static Date.now.getter();
  *(void *)(v6 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_semaphore) = dispatch_semaphore_create(0);
  *(unsigned char *)(v6 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_context) = v5;
  return v6;
}

uint64_t sub_100090BB0()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_timeInfo;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_100090C68()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t sub_100090CAC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t sub_100090CF0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t sub_100090D34(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a1 + 16) == *(void *)(*(void *)a2 + 16)
    && *(void *)(*(void *)a1 + 24) == *(void *)(*(void *)a2 + 24))
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_100090D60()
{
  type metadata accessor for DextLaunchThreadManager();
  uint64_t v0 = swift_allocObject();
  if (os_variant_allows_internal_security_policies())
  {
    uint64_t v1 = sub_100004700(&qword_10017E428);
    uint64_t v3 = sub_10005ACD0(8);
    uint64_t result = sub_100004BD0((uint64_t)&v3, v1);
  }
  else
  {
    uint64_t result = 0;
  }
  *(void *)(v0 + 16) = result;
  qword_100199520 = v0;
  return result;
}

uint64_t *sub_100090DE4()
{
  if (qword_100187080 != -1) {
    swift_once();
  }
  return &qword_100199520;
}

uint64_t sub_100090E30(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6 = a3 & 1;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v3 + 16);
  if (v12)
  {
    __chkstk_darwin(v9);
    v18[-4] = a1;
    v18[-3] = a2;
    LOBYTE(v18[-2]) = v6;
    swift_retain();
    sub_100004700(&qword_10017E428);
    sub_100004A40((void (*)(uint64_t))sub_1000914E4, (uint64_t)&v18[-6], v12);
    return swift_release();
  }
  else
  {
    uint64_t v14 = sub_1000F00E4();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v14, v7);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      v18[0] = swift_slowAlloc();
      uint64_t v20 = v18[0];
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_100003F90(a1, a2, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v17 + 12) = 2048;
      uint64_t v19 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Skipping addBreadcrumbForDextWithIdentifier for %s %ld", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

uint64_t sub_100091100(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v2 + 16);
  if (v10)
  {
    __chkstk_darwin(v7);
    v16[-2] = a1;
    v16[-1] = a2;
    swift_retain();
    sub_100004700(&qword_10017E428);
    sub_100004A40((void (*)(uint64_t))sub_1000915BC, (uint64_t)&v16[-4], v10);
    return swift_release();
  }
  else
  {
    uint64_t v12 = sub_1000F00E4();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v12, v5);
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      v16[0] = v15 + 4;
      swift_bridgeObjectRetain();
      v16[2] = sub_100003F90(a1, a2, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Skipping removeBreadcrumbForDextWithIdentifier for %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_1000913AC()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 24, 7);
}

unint64_t sub_1000913E4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v4) {
    uint64_t result = 15;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_12;
  }

  return String.subscript.getter();
}

void sub_1000914A0()
{
}

uint64_t sub_1000914CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000914DC()
{
  return swift_release();
}

uint64_t sub_1000914E4(uint64_t *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  char v5 = *(unsigned char *)(v1 + 32);
  type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v3;
  swift_bridgeObjectRetain();
  static Date.now.getter();
  *(void *)(v6 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_semaphore) = dispatch_semaphore_create(0);
  *(unsigned char *)(v6 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_context) = v5;
  uint64_t v7 = *a1;
  uint64_t v9 = v6;
  (*(void (**)(uint64_t *))(*(void *)v7 + 184))(&v9);
  return swift_release();
}

uint64_t sub_1000915BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)a1 + 192))(*(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_100091614()
{
  unint64_t result = qword_10017E430;
  if (!qword_10017E430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E430);
  }
  return result;
}

uint64_t sub_100091668(uint64_t a1)
{
  uint64_t result = sub_1000916C0(&qword_10017E438, (void (*)(uint64_t))type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000916C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata()
{
  uint64_t result = qword_100187310;
  if (!qword_100187310) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for DextLaunchThreadManager()
{
  return self;
}

uint64_t sub_100091778()
{
  return type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata();
}

uint64_t sub_100091780()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DextLaunchThreadManager.DextLaunchDebuggingMetadata.Context(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100091900);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata.Context()
{
  return &type metadata for DextLaunchThreadManager.DextLaunchDebuggingMetadata.Context;
}

uint64_t sub_100091938()
{
  return swift_retain();
}

uint64_t sub_100091970(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t sub_1000919B8()
{
  int v3 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 96);
  uint64_t v1 = swift_retain();

  return v3(v1);
}

uint64_t sub_100091A0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v0 + 88);
  uint64_t result = v2();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = (void *)(result + 16);
    swift_beginAccess();
    uint64_t v6 = *(void *)(v4 + 40);
    uint64_t v7 = *(void *)(v4 + 48);
    sub_1000036B0(v5, v6);
    sub_100077ABC(v6, v7);
    swift_endAccess();
    swift_release();
    uint64_t v8 = v13;
    uint64_t v9 = v14;
    sub_1000036B0(v12, v13);
    uint64_t result = v2();
    if (result)
    {
      id v10 = *(id *)(result + 64);
      swift_release();
      uint64_t v11 = *(void (**)(id, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v9 + 8);
      swift_retain();
      v11(v10, sub_100091B64, v1, v8, v9);

      swift_release();
      return sub_10000478C((uint64_t)v12);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100091B64()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

void sub_100091B88(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for XPCUtil();
  if (sub_1000F51CC(a1))
  {
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_100132F10;
    sub_100004700(&qword_10017E5C8);
    _print_unlocked<A, B>(_:_:)();
    *(void *)(v4 + 56) = &type metadata for String;
    unint64_t v5 = sub_10002A1DC();
    *(void *)(v4 + 64) = v5;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0xE000000000000000;
    sub_10002A230();
    uint64_t v6 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    uint64_t v7 = (void *)swift_unknownObjectRetain();
    BOOL v8 = sub_1000F55FC(v7);
    if (v9)
    {
      uint64_t v10 = v9;
      if (v8)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v11 = *(void *)(v9 + 16);
      if (v11)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = (uint64_t *)(v10 + 40);
        do
        {
          uint64_t v13 = *(v12 - 1);
          uint64_t v14 = *v12;
          uint64_t v15 = swift_allocObject();
          *(_OWORD *)(v15 + 16) = xmmword_100132F10;
          *(void *)(v15 + 56) = &type metadata for String;
          *(void *)(v15 + 64) = v5;
          *(void *)(v15 + 32) = v13;
          *(void *)(v15 + 40) = v14;
          swift_bridgeObjectRetain();
          os_log_type_t v16 = (void *)static OS_os_log.default.getter();
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();
          swift_bridgeObjectRelease();

          v12 += 2;
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease();
        uint64_t v2 = v1;
      }
      if ((*(uint64_t (**)(void))(*(void *)v2 + 88))())
      {
        swift_retain();
        swift_release();
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease();
        uint64_t v39 = 0xD000000000000018;
        uint64_t v40 = (char *)0x80000001001493F0;
LABEL_21:
        sub_100004700((uint64_t *)&unk_10017E5D0);
        sub_100014AB8();
        uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        v35._countAndFlagsBits = v32;
        v35._object = v34;
        String.append(_:)(v35);
        swift_bridgeObjectRelease();
        uint64_t v36 = type metadata accessor for ApplicationManager();
        sub_1000EA080(v39, v40, v36, &off_10016A7D8);
        swift_release();
        goto LABEL_22;
      }
      __break(1u);
    }
    else
    {
      uint64_t v22 = (void *)swift_unknownObjectRetain();
      BOOL v23 = sub_1000F5614(v22);
      if (!v24)
      {
        uint64_t v37 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        return;
      }
      uint64_t v25 = v24;
      if (v23) {
        goto LABEL_22;
      }
      uint64_t v26 = *(void *)(v24 + 16);
      if (v26)
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = (uint64_t *)(v25 + 40);
        do
        {
          uint64_t v28 = *(v27 - 1);
          uint64_t v29 = *v27;
          uint64_t v30 = swift_allocObject();
          *(_OWORD *)(v30 + 16) = xmmword_100132F10;
          *(void *)(v30 + 56) = &type metadata for String;
          *(void *)(v30 + 64) = v5;
          *(void *)(v30 + 32) = v28;
          *(void *)(v30 + 40) = v29;
          swift_bridgeObjectRetain();
          uint64_t v31 = (void *)static OS_os_log.default.getter();
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();
          swift_bridgeObjectRelease();

          v27 += 2;
          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
        uint64_t v2 = v1;
      }
      if ((*(uint64_t (**)(void))(*(void *)v2 + 88))())
      {
        swift_retain();
        swift_release();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        uint64_t v39 = 0xD00000000000001ALL;
        uint64_t v40 = (char *)0x8000000100149390;
        goto LABEL_21;
      }
    }
    __break(1u);
    return;
  }
  type = xpc_get_type(a1);
  xpc_type_get_name(type);
  uint64_t v18 = String.init(cString:)();
  uint64_t v20 = v19;
  static os_log_type_t.error.getter();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100132F10;
  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = sub_10002A1DC();
  *(void *)(v21 + 32) = v18;
  *(void *)(v21 + 40) = v20;
  sub_10002A230();
  uint64_t v38 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
}

uint64_t sub_100092108()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_100092130(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)v1 + 112))(*a1);
}

uint64_t sub_100092178()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t type metadata accessor for ApplicationRequestSource()
{
  return self;
}

uint64_t sub_1000921E0(uint64_t a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  sub_100092230(a1, a2);
  return v4;
}

uint64_t sub_100092230(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100132F10;
  swift_retain();
  id v6 = a2;
  unsigned int v7 = [v6 processIdentifier];
  *(void *)(v5 + 56) = &type metadata for Int32;
  *(void *)(v5 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v5 + 32) = v7;
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  BOOL v8 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  swift_release();
  return v3;
}

uint64_t sub_100092334(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v18[0] - 8);
  __chkstk_darwin(v18[0]);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void **)(*(void *)(v3 + 16) + 64);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_100092860;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000AFF8;
  aBlock[3] = &unk_10016DB18;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v13;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_100092884();
  sub_100004700((uint64_t *)&unk_10017DEB0);
  sub_1000928DC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, void))(v10 + 8))(v12, v18[0]);
  return swift_release();
}

uint64_t sub_1000925C0(uint64_t a1, void (*a2)(unint64_t))
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static os_signpost_type_t.event.getter();
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  uint64_t v8 = (void *)static OS_os_log.default.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v15 = a1;
  uint64_t v9 = type metadata accessor for DriverKitDaemonXPCRequestDelegate();
  nullsub_1(v9, &off_10017E6F0, v10, v11);
  uint64_t v15 = a1;
  sub_1000832D0(v9, (uint64_t)&off_10017E6F0);
  unint64_t v12 = sub_1000ACF00();
  a2(v12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100092820()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100092860()
{
  return sub_1000925C0(*(void *)(v0 + 16), *(void (**)(unint64_t))(v0 + 24));
}

uint64_t sub_10009286C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10009287C()
{
  return swift_release();
}

unint64_t sub_100092884()
{
  unint64_t result = qword_10017EBD0;
  if (!qword_10017EBD0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EBD0);
  }
  return result;
}

unint64_t sub_1000928DC()
{
  unint64_t result = qword_10017EBE0;
  if (!qword_10017EBE0)
  {
    sub_1000126B8((uint64_t *)&unk_10017DEB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EBE0);
  }
  return result;
}

void sub_1000929C8(uint64_t a1, NSString a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    a2 = String._bridgeToObjectiveC()();
  }
  id v5 = a2;
  (*(void (**)(uint64_t))(a4 + 16))(a4);
}

uint64_t sub_100092A2C(void (*a1)(uint64_t, unint64_t, void))
{
  uint64_t v2 = v1;
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  uint64_t v4 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  id v5 = *(void (**)(uint64_t))(**(void **)(*(void *)(v2 + 16) + 104) + 336);
  uint64_t v6 = swift_retain();
  v5(v6);
  swift_release();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_100092F30();
  uint64_t v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_release();
  sub_100012DE4(v7, v9);
  a1(v7, v9, 0);
  sub_100012A10(v7, v9);
  return sub_100012A10(v7, v9);
}

unint64_t sub_100092F30()
{
  unint64_t result = qword_10017E6D0;
  if (!qword_10017E6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E6D0);
  }
  return result;
}

unint64_t sub_100092F84()
{
  unint64_t result = qword_10017E6D8;
  if (!qword_10017E6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E6D8);
  }
  return result;
}

unint64_t sub_100092FD8()
{
  unint64_t result = qword_10017E6E0;
  if (!qword_10017E6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E6E0);
  }
  return result;
}

uint64_t sub_10009302C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000930E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1000767C0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  v14[0] = v11;
  v14[1] = v12;
  char v15 = v13;
  uint64_t v7 = *(void *)(*(void *)(v4 + 16) + 96);
  type metadata accessor for ApprovalStateUpdateRequest();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  swift_retain();
  sub_100073C70((uint64_t)v14);
  swift_retain();
  uint64_t v9 = ApprovalStateUpdateRequest.__allocating_init(entry:callback:)((uint64_t)v14, (uint64_t)sub_1000934FC, v8);
  (*(void (**)(uint64_t))(*(void *)v7 + 304))(v9);
  swift_release();
  swift_release();
  return sub_100073D08((uint64_t)v14);
}

uint64_t sub_1000933A4(uint64_t a1, char a2, void (*a3)(void))
{
  if ((a2 & 1) == 0) {
    return ((uint64_t (*)(void))a3)(0);
  }
  swift_errorRetain();
  static os_log_type_t.error.getter();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100132F10;
  swift_errorRetain();
  sub_100004700(&qword_10017EB50);
  uint64_t v7 = String.init<A>(describing:)();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_10002A1DC();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  uint64_t v10 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  long long v11 = (void *)_convertErrorToNSError(_:)();
  a3();

  return sub_100096D00(a1, 1);
}

uint64_t sub_1000934FC(uint64_t a1, char a2)
{
  return sub_1000933A4(a1, a2 & 1, *(void (**)(void))(v2 + 16));
}

uint64_t sub_1000935B8(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, void (*a7)(void, void, id), uint64_t a8)
{
  void (*v43)(long long *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  char v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  void (*v63)(void, void, id);
  id v64;
  void *v65;
  Swift::String v67;
  Swift::String v68;
  long long v69;
  uint64_t v70;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  long long v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  long long v81;
  uint64_t v82;
  uint64_t v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  uint64_t v87;
  void *v88;
  void *v89;
  Swift::String v90;
  long long v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unsigned int v99;
  BOOL v100;
  char v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unsigned int v104;
  unsigned __int8 *v105;
  unsigned int v106;
  char v107;
  uint64_t v108;
  void *v109;
  unsigned int v110;
  Swift::String v111;
  uint64_t (*v112)(uint64_t);
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  uint64_t v121;
  Swift::String v122;
  Swift::String v123;
  uint64_t v124;
  Swift::String v125;
  Swift::String v126;
  Swift::String v127;
  Swift::String v128;
  Swift::String v129;
  Swift::String v130;
  long long v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 *v134;
  char v135;
  char v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  void *v144;
  uint64_t v145;
  unint64_t v146;
  long long v147;
  uint64_t v148;
  void (*v149)(void, void, id);
  uint64_t v150[12];
  unsigned char v151[48];
  long long v152;
  long long v153;
  uint64_t v154;

  v148 = a8;
  v149 = a7;
  v146 = a6;
  *(void *)&v147 = a5;
  uint64_t v13 = type metadata accessor for LookupSpec();
  __chkstk_darwin(v13);
  char v15 = (uint64_t *)((char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&v152 = v8;
  uint64_t v16 = type metadata accessor for DriverKitDaemonXPCRequestDelegate();
  nullsub_1(v16, &off_10017E6F0, v17, v18);
  v142 = v13;
  v143 = v15;
  v145 = a1;
  v144 = a2;
  uint64_t v19 = v147;
  *(void *)&v152 = v8;
  sub_1000832D0(v16, (uint64_t)&off_10017E6F0);
  uint64_t v20 = *(void **)(v8 + 16);
  swift_beginAccess();
  uint64_t v21 = v20[5];
  uint64_t v22 = v20[6];
  sub_1000036B0(v20 + 2, v21);
  sub_10007F4B4(v21, v22);
  uint64_t v23 = *((void *)&v153 + 1);
  uint64_t v24 = v154;
  sub_1000036B0(&v152, *((uint64_t *)&v153 + 1));
  swift_endAccess();
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 80))(v23, v24);
  if (!v26)
  {
    sub_10000478C((uint64_t)&v152);
    goto LABEL_21;
  }
  uint64_t v27 = v25;
  uint64_t v28 = v26;
  sub_10000478C((uint64_t)&v152);
  uint64_t v29 = sub_1000A2488(v27, v28, 0, 0);
  if (!v29)
  {
    sub_100012E3C();
    uint64_t v60 = swift_allocError();
    *(void *)long long v59 = 0xD00000000000002DLL;
    *(void *)(v59 + 8) = 0x80000001001496F0;
    *(_OWORD *)(v59 + 16) = 0u;
    *(_OWORD *)(v59 + 32) = 0u;
    *(_OWORD *)(v59 + 48) = 0u;
    *(void *)(v59 + 64) = 0;
    uint64_t v61 = 9;
    goto LABEL_23;
  }
  unint64_t v30 = (unint64_t)v29;
  if (v29 == (void *)5)
  {
LABEL_21:
    sub_100012E3C();
    uint64_t v60 = swift_allocError();
    *(void *)long long v59 = 0xD000000000000017;
    *(void *)(v59 + 8) = 0x8000000100149590;
    *(_OWORD *)(v59 + 16) = 0u;
    *(_OWORD *)(v59 + 32) = 0u;
    *(_OWORD *)(v59 + 48) = 0u;
    *(void *)(v59 + 64) = 0;
    uint64_t v61 = 2;
LABEL_23:
    *(unsigned char *)(v59 + 72) = v61;
    swift_willThrow();
    uint64_t v62 = v60;
    goto LABEL_24;
  }
  v141 = (uint64_t)v20;
  uint64_t v31 = sub_1000AB270();
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 144))(v31);
  swift_release();
  sub_10005FAF8(v32, (uint64_t)v151);
  swift_release();
  uint64_t v33 = v145;
  uint64_t v34 = (uint64_t)v143;
  Swift::String v35 = v144;
  *v143 = v145;
  *(void *)(v34 + 8) = v35;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  uint64_t v36 = (uint64_t *)sub_10005F384(v34, 0, 0);
  sub_100011138((uint64_t)v151);
  sub_100066778(v34);
  if (!v36)
  {
    *(void *)&v152 = 0;
    *((void *)&v152 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    *(void *)&v152 = 0xD000000000000029;
    *((void *)&v152 + 1) = 0x80000001001495B0;
    v67._countAndFlagsBits = v33;
    v67._object = v35;
    String.append(_:)(v67);
    v68._countAndFlagsBits = 46;
    v68._object = (void *)0xE100000000000000;
    String.append(_:)(v68);
    uint64_t v69 = v152;
    sub_100012E3C();
    uint64_t v70 = swift_allocError();
    *(_OWORD *)uint64_t v71 = v69;
    *(_OWORD *)(v71 + 16) = 0u;
    *(_OWORD *)(v71 + 32) = 0u;
    *(_OWORD *)(v71 + 48) = 0u;
    *(void *)(v71 + 64) = 0;
    *(unsigned char *)(v71 + 72) = 10;
    swift_willThrow();
    uint64_t v62 = v70;
LABEL_31:
    sub_10003E8B0(v30);
    goto LABEL_24;
  }
  uint64_t v37 = v36[3];
  type metadata accessor for DriverExtension(0);
  uint64_t v38 = (void *)swift_dynamicCastClass();
  if (!v38)
  {
    *(void *)&v152 = 0;
    *((void *)&v152 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&v152 = 0x6F696E7365747845;
    *((void *)&v152 + 1) = 0xEA0000000000206ELL;
    v72._countAndFlagsBits = v145;
    v72._object = v35;
    String.append(_:)(v72);
    v73._countAndFlagsBits = 0xD00000000000001BLL;
    v73._object = (void *)0x80000001001495E0;
    String.append(_:)(v73);
    uint64_t v74 = v152;
    sub_100012E3C();
    uint64_t v75 = swift_allocError();
    *(_OWORD *)uint64_t v76 = v74;
    *(_OWORD *)(v76 + 16) = 0u;
    *(_OWORD *)(v76 + 32) = 0u;
    *(_OWORD *)(v76 + 48) = 0u;
    *(void *)(v76 + 64) = 0;
    *(unsigned char *)(v76 + 72) = 9;
    swift_willThrow();
    uint64_t v62 = v75;
    swift_release();
    goto LABEL_31;
  }
  v138 = v38;
  v140 = v30;
  v139 = v37;
  swift_retain();
  uint64_t v39 = sub_1000AB270();
  uint64_t v40 = *(void *)(v39 + 184);
  v143 = *(uint64_t **)(v39 + 176);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v41 = (uint64_t *)sub_1000A1368();
  uint64_t v42 = v41[1];
  v142 = *v41;
  uint64_t v43 = *(void (**)(long long *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t))(*v36 + 312);
  swift_bridgeObjectRetain();
  uint64_t v44 = v143;
  v143 = v36;
  v43(&v152, v44, v40, v142, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v153 + 1))
  {
    sub_1000130EC((uint64_t)&v152, &qword_10017C018);
    goto LABEL_33;
  }
  sub_100004700(&qword_10017C920);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_33:
    uint64_t v63 = v149;
    uint64_t v77 = v140;
    *(void *)&v152 = 0;
    *((void *)&v152 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v78._countAndFlagsBits = 0x6F69736E65747845;
    v78._object = (void *)0xEA0000000000206ELL;
    String.append(_:)(v78);
    v79._countAndFlagsBits = v145;
    v79._object = v144;
    String.append(_:)(v79);
    v80._countAndFlagsBits = 0xD000000000000028;
    v80._object = (void *)0x8000000100149600;
    String.append(_:)(v80);
    uint64_t v81 = v152;
    sub_100012E3C();
    uint64_t v82 = swift_allocError();
    *(_OWORD *)uint64_t v83 = v81;
    *(_OWORD *)(v83 + 16) = 0u;
    *(_OWORD *)(v83 + 32) = 0u;
    *(_OWORD *)(v83 + 48) = 0u;
    *(void *)(v83 + 64) = 0;
    *(unsigned char *)(v83 + 72) = 9;
    swift_willThrow();
    uint64_t v62 = v82;
    swift_release();
    swift_release();
    sub_10003E8B0(v77);
    goto LABEL_25;
  }
  uint64_t v45 = sub_100094644(v150[0]);
  swift_bridgeObjectRelease();
  uint64_t v46 = sub_100095B5C(v45);
  swift_bridgeObjectRelease();
  uint64_t v47 = (void *)a3;
  long long v48 = a4;
  uint64_t v49 = sub_1000948F4(a3, (uint64_t)a4, v46);
  long long v50 = v140;
  if (v49)
  {
    swift_bridgeObjectRelease();
    long long v51 = (void *)v146;
    if (!v146)
    {
      *(void *)&v152 = 0;
      swift_stdlib_random();
      long long v94 = v152;
LABEL_76:
      v150[0] = v141;
      v154 = 0;
      v152 = 0u;
      v153 = 0u;
      v108 = type metadata accessor for DriverKitDaemon();
      swift_retain();
      v109 = v138;
      v110 = sub_1000E72D4(v138, v47, (unint64_t)v48, (void *)v94, 0, 0, (uint64_t)&v152, v108, (uint64_t)&off_10016EDA0);
      sub_1000130EC((uint64_t)&v152, &qword_10017C010);
      swift_release();
      *(void *)&v152 = 0;
      *((void *)&v152 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(76);
      v111._countAndFlagsBits = 0x646568636E75614CLL;
      v111._object = (void *)0xEE00207478656420;
      String.append(_:)(v111);
      v112 = *(uint64_t (**)(uint64_t))(*v109 + 144);
      v113 = swift_retain();
      v114 = v112(v113);
      v116 = v115;
      swift_release();
      v117._countAndFlagsBits = v114;
      v117._object = v116;
      String.append(_:)(v117);
      swift_bridgeObjectRelease();
      v118._object = (void *)0x8000000100149690;
      v118._countAndFlagsBits = 0xD000000000000017;
      String.append(_:)(v118);
      v119._countAndFlagsBits = (uint64_t)v47;
      v119._object = v48;
      String.append(_:)(v119);
      v120._countAndFlagsBits = 0x20676174202CLL;
      v120._object = (void *)0xE600000000000000;
      String.append(_:)(v120);
      sub_100004700((uint64_t *)&unk_10017D6E0);
      v121 = swift_allocObject();
      v147 = xmmword_100132F10;
      *(_OWORD *)(v121 + 16) = xmmword_100132F10;
      *(void *)(v121 + 56) = &type metadata for UInt64;
      *(void *)(v121 + 64) = &protocol witness table for UInt64;
      *(void *)(v121 + 32) = v94;
      v122._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v122);
      swift_bridgeObjectRelease();
      v123._countAndFlagsBits = 0xD000000000000010;
      v123._object = (void *)0x80000001001496B0;
      String.append(_:)(v123);
      v124 = swift_allocObject();
      *(_OWORD *)(v124 + 16) = v147;
      *(void *)(v124 + 56) = &type metadata for UInt32;
      *(void *)(v124 + 64) = &protocol witness table for UInt32;
      *(_DWORD *)(v124 + 32) = 0;
      v125._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v125);
      swift_bridgeObjectRelease();
      v126._countAndFlagsBits = 0x20646970203ALL;
      v126._object = (void *)0xE600000000000000;
      String.append(_:)(v126);
      LODWORD(v150[0]) = v110;
      v127._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v127);
      swift_bridgeObjectRelease();
      v128._countAndFlagsBits = 10;
      v128._object = (void *)0xE100000000000000;
      String.append(_:)(v128);
      v149(v152, *((void *)&v152 + 1), 0);
      sub_10003E8B0(v140);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    long long v52 = HIBYTE(v146) & 0xF;
    long long v53 = v19;
    long long v54 = v19 & 0xFFFFFFFFFFFFLL;
    if ((v146 & 0x2000000000000000) != 0) {
      long long v55 = HIBYTE(v146) & 0xF;
    }
    else {
      long long v55 = v19 & 0xFFFFFFFFFFFFLL;
    }
    if (!v55)
    {
LABEL_74:
      swift_bridgeObjectRetain();
      uint64_t v57 = sub_100094A2C(v53, (unint64_t)v51, 0x10uLL);
      if ((v107 & 1) == 0)
      {
LABEL_75:
        long long v94 = v57;
        goto LABEL_76;
      }
      *(void *)&v152 = 0;
      *((void *)&v152 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      *(void *)&v152 = 543646036;
      *((void *)&v152 + 1) = 0xE400000000000000;
      v129._countAndFlagsBits = v53;
      v129._object = v51;
      String.append(_:)(v129);
      v130._countAndFlagsBits = 0xD00000000000001ALL;
      v130._object = (void *)0x80000001001496D0;
      String.append(_:)(v130);
      v131 = v152;
      sub_100012E3C();
      v132 = swift_allocError();
      *(_OWORD *)v133 = v131;
      *(_OWORD *)(v133 + 16) = 0u;
      *(_OWORD *)(v133 + 32) = 0u;
      *(_OWORD *)(v133 + 48) = 0u;
      *(void *)(v133 + 64) = 0;
      *(unsigned char *)(v133 + 72) = 9;
      swift_willThrow();
      uint64_t v62 = v132;
      sub_10003E8B0(v140);
      swift_release();
      swift_release();
      goto LABEL_24;
    }
    if ((v146 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      v134 = sub_100094FEC(v19, (uint64_t)v51, 10);
      v136 = v135;
      swift_bridgeObjectRelease();
      long long v48 = a4;
      uint64_t v47 = (void *)a3;
      if ((v136 & 1) == 0)
      {
        long long v94 = (uint64_t)v134;
        goto LABEL_76;
      }
      long long v51 = (void *)v146;
      long long v53 = v19;
      goto LABEL_74;
    }
    if ((v146 & 0x2000000000000000) == 0)
    {
      if ((v19 & 0x1000000000000000) != 0) {
        uint64_t v56 = (unsigned __int8 *)((v146 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v56 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v57 = (uint64_t)sub_1000950D4(v56, v54, 10);
      if ((v58 & 1) == 0) {
        goto LABEL_75;
      }
      goto LABEL_74;
    }
    *(void *)&v152 = v19;
    *((void *)&v152 + 1) = v146 & 0xFFFFFFFFFFFFFFLL;
    if (v19 == 43)
    {
      if (!v52) {
        goto LABEL_85;
      }
      if (v52 == 1 || (BYTE1(v19) - 48) > 9u) {
        goto LABEL_74;
      }
      long long v95 = (BYTE1(v19) - 48);
      long long v97 = v52 - 2;
      if (v52 == 2) {
        goto LABEL_58;
      }
      long long v98 = (unsigned __int8 *)&v152 + 2;
      while (1)
      {
        long long v99 = *v98 - 48;
        if (v99 > 9) {
          break;
        }
        if (!is_mul_ok(v95, 0xAuLL)
          || (v100 = __CFADD__(10 * v95, v99), long long v95 = 10 * v95 + v99, v100))
        {
LABEL_78:
          long long v48 = a4;
          uint64_t v47 = (void *)a3;
          long long v51 = (void *)v146;
          long long v53 = v19;
          goto LABEL_74;
        }
        long long v101 = 0;
        ++v98;
        --v97;
        long long v48 = a4;
        uint64_t v47 = (void *)a3;
        long long v51 = (void *)v146;
        long long v53 = v19;
        if (!v97) {
          goto LABEL_73;
        }
      }
    }
    else
    {
      if (v19 == 45)
      {
        if (v52)
        {
          if (v52 == 1 || (BYTE1(v19) - 48) > 9u) {
            goto LABEL_74;
          }
          long long v95 = -(uint64_t)(BYTE1(v19) - 48);
          if (BYTE1(v19) == 48)
          {
            long long v96 = v52 - 2;
            if (v52 == 2)
            {
              long long v48 = a4;
              uint64_t v47 = (void *)a3;
              long long v94 = -(uint64_t)(BYTE1(v19) - 48);
              goto LABEL_76;
            }
            uint64_t v105 = (unsigned __int8 *)&v152 + 2;
            long long v48 = a4;
            uint64_t v47 = (void *)a3;
            long long v51 = (void *)v146;
            long long v53 = v19;
            while (1)
            {
              uint64_t v106 = *v105 - 48;
              if (v106 > 9) {
                goto LABEL_72;
              }
              if (!is_mul_ok(v95, 0xAuLL)) {
                goto LABEL_78;
              }
              long long v100 = 10 * v95 >= v106;
              long long v95 = 10 * v95 - v106;
              if (!v100) {
                goto LABEL_78;
              }
              long long v101 = 0;
              ++v105;
              --v96;
              long long v48 = a4;
              uint64_t v47 = (void *)a3;
              long long v51 = (void *)v146;
              long long v53 = v19;
              if (!v96) {
                goto LABEL_73;
              }
            }
          }
          goto LABEL_86;
        }
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        long long v48 = a4;
        uint64_t v47 = (void *)a3;
        long long v51 = (void *)v146;
        long long v53 = v19;
        goto LABEL_74;
      }
      if (!v52 || (v19 - 48) > 9u) {
        goto LABEL_74;
      }
      long long v95 = (v19 - 48);
      uint64_t v102 = v52 - 1;
      if (v52 == 1)
      {
LABEL_58:
        long long v94 = v95;
        goto LABEL_76;
      }
      uint64_t v103 = (unsigned __int8 *)&v152 + 1;
      while (1)
      {
        char v104 = *v103 - 48;
        if (v104 > 9) {
          break;
        }
        if (!is_mul_ok(v95, 0xAuLL)) {
          goto LABEL_78;
        }
        long long v100 = __CFADD__(10 * v95, v104);
        long long v95 = 10 * v95 + v104;
        if (v100) {
          goto LABEL_78;
        }
        long long v101 = 0;
        ++v103;
        --v102;
        long long v48 = a4;
        uint64_t v47 = (void *)a3;
        long long v51 = (void *)v146;
        long long v53 = v19;
        if (!v102) {
          goto LABEL_73;
        }
      }
    }
LABEL_72:
    long long v95 = 0;
    long long v101 = 1;
LABEL_73:
    long long v94 = v95;
    if ((v101 & 1) == 0) {
      goto LABEL_76;
    }
    goto LABEL_74;
  }
  *(void *)&v152 = 0;
  *((void *)&v152 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(71);
  v84._countAndFlagsBits = 0xD000000000000011;
  v84._object = (void *)0x8000000100149630;
  String.append(_:)(v84);
  v85._countAndFlagsBits = a3;
  v85._object = a4;
  String.append(_:)(v85);
  v86._countAndFlagsBits = 0xD000000000000032;
  v86._object = (void *)0x8000000100149650;
  String.append(_:)(v86);
  long long v87 = Set.description.getter();
  long long v89 = v88;
  swift_bridgeObjectRelease();
  v90._countAndFlagsBits = v87;
  v90._object = v89;
  String.append(_:)(v90);
  swift_bridgeObjectRelease();
  long long v91 = v152;
  sub_100012E3C();
  long long v92 = swift_allocError();
  *(_OWORD *)long long v93 = v91;
  *(_OWORD *)(v93 + 16) = 0u;
  *(_OWORD *)(v93 + 32) = 0u;
  *(_OWORD *)(v93 + 48) = 0u;
  *(void *)(v93 + 64) = 0;
  *(unsigned char *)(v93 + 72) = 9;
  swift_willThrow();
  uint64_t v62 = v92;
  swift_release();
  swift_release();
  sub_10003E8B0(v50);
LABEL_24:
  uint64_t v63 = v149;
LABEL_25:
  v150[10] = v62;
  swift_errorRetain();
  sub_100004700(&qword_10017EB50);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    sub_10005BFC4((uint64_t)v150, (uint64_t)&v152);
    uint64_t v64 = sub_1000CD320();
    v63(0, 0, v64);

    sub_10009302C((uint64_t)&v152);
  }
  else
  {
    swift_errorRelease();
    uint64_t v65 = (void *)_convertErrorToNSError(_:)();
    v63(0, 0, v65);
  }
  return swift_errorRelease();
}

uint64_t sub_100094644(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  if (v5) {
    goto LABEL_10;
  }
LABEL_16:
  if (!__OFADD__(v8++, 1))
  {
    if (v8 >= v6) {
      goto LABEL_40;
    }
    unint64_t v20 = *(void *)(v2 + 8 * v8);
    if (v20)
    {
LABEL_28:
      unint64_t v5 = (v20 - 1) & v20;
      for (unint64_t i = __clz(__rbit64(v20)) + (v8 << 6); ; unint64_t i = v11 | (v8 << 6))
      {
        uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8 * i);
        swift_bridgeObjectRetain();
        uint64_t v23 = (uint64_t *)sub_1000A14F8();
        if (!*(void *)(v22 + 16)) {
          break;
        }
        uint64_t v24 = *v23;
        uint64_t v25 = v23[1];
        swift_bridgeObjectRetain();
        unint64_t v26 = sub_1000048E0(v24, v25);
        if (v27)
        {
          sub_1000047DC(*(void *)(v22 + 56) + 32 * v26, (uint64_t)&v28);
        }
        else
        {
          long long v28 = 0u;
          long long v29 = 0u;
        }
        swift_bridgeObjectRelease();
        if (!*((void *)&v29 + 1)) {
          goto LABEL_6;
        }
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_7;
        }
LABEL_8:
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v10 = v31;
        if (v31)
        {
          uint64_t v13 = v30;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v32 = v13;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_10000C3BC(0, *((void *)v9 + 2) + 1, 1, v9);
            uint64_t v9 = (char *)result;
          }
          uint64_t v14 = v9;
          unint64_t v15 = *((void *)v9 + 2);
          uint64_t v16 = (uint64_t)v14;
          unint64_t v17 = *((void *)v14 + 3);
          if (v15 >= v17 >> 1)
          {
            uint64_t result = (uint64_t)sub_10000C3BC((char *)(v17 > 1), v15 + 1, 1, (char *)v16);
            uint64_t v16 = result;
          }
          *(void *)(v16 + 16) = v15 + 1;
          unint64_t v18 = v16 + 16 * v15;
          uint64_t v9 = (char *)v16;
          *(void *)(v18 + 32) = v32;
          *(void *)(v18 + 40) = v10;
          if (!v5) {
            goto LABEL_16;
          }
        }
        else if (!v5)
        {
          goto LABEL_16;
        }
LABEL_10:
        unint64_t v11 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
      }
      long long v28 = 0u;
      long long v29 = 0u;
LABEL_6:
      sub_1000130EC((uint64_t)&v28, &qword_10017C018);
LABEL_7:
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      goto LABEL_8;
    }
    int64_t v21 = v8 + 1;
    if (v8 + 1 >= v6) {
      goto LABEL_40;
    }
    unint64_t v20 = *(void *)(v2 + 8 * v21);
    if (!v20)
    {
      int64_t v21 = v8 + 2;
      if (v8 + 2 >= v6) {
        goto LABEL_40;
      }
      unint64_t v20 = *(void *)(v2 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v8 + 3;
        if (v8 + 3 >= v6) {
          goto LABEL_40;
        }
        unint64_t v20 = *(void *)(v2 + 8 * v21);
        if (!v20)
        {
          int64_t v21 = v8 + 4;
          if (v8 + 4 < v6)
          {
            unint64_t v20 = *(void *)(v2 + 8 * v21);
            if (v20) {
              goto LABEL_27;
            }
            while (1)
            {
              int64_t v8 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_42;
              }
              if (v8 >= v6) {
                break;
              }
              unint64_t v20 = *(void *)(v2 + 8 * v8);
              ++v21;
              if (v20) {
                goto LABEL_28;
              }
            }
          }
LABEL_40:
          swift_release();
          return (uint64_t)v9;
        }
      }
    }
LABEL_27:
    int64_t v8 = v21;
    goto LABEL_28;
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1000948F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100094A2C(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3 - 37 < 0xFFFFFFFFFFFFFFDDLL)
  {
    __break(1u);
LABEL_75:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v4 = HIBYTE(a2) & 0xF;
  uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v6) {
    goto LABEL_75;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        unint64_t v8 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        unint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v9 = sub_1000950D4(v8, v5, a3);
      char v11 = v10 & 1;
      goto LABEL_11;
    }
    v41[0] = result;
    v41[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (v4)
      {
        uint64_t v23 = v4 - 1;
        if (v23)
        {
          unint64_t v13 = 0;
          unsigned __int8 v24 = a3 + 48;
          unsigned __int8 v25 = a3 + 55;
          unsigned __int8 v26 = a3 + 87;
          if (a3 > 0xA)
          {
            unsigned __int8 v24 = 58;
          }
          else
          {
            unsigned __int8 v26 = 97;
            unsigned __int8 v25 = 65;
          }
          char v27 = (unsigned __int8 *)v41 + 1;
          char v11 = 1;
          do
          {
            unsigned int v28 = *v27;
            if (v28 < 0x30 || v28 >= v24)
            {
              if (v28 < 0x41 || v28 >= v25)
              {
                uint64_t v9 = 0;
                if (v28 < 0x61 || v28 >= v26) {
                  goto LABEL_11;
                }
                char v29 = -87;
              }
              else
              {
                char v29 = -55;
              }
            }
            else
            {
              char v29 = -48;
            }
            if (!is_mul_ok(v13, a3)) {
              goto LABEL_73;
            }
            unint64_t v30 = v13 * a3;
            unsigned __int8 v31 = v28 + v29;
            BOOL v22 = __CFADD__(v30, v31);
            unint64_t v13 = v30 + v31;
            if (v22) {
              goto LABEL_73;
            }
            ++v27;
            --v23;
          }
          while (v23);
LABEL_72:
          char v11 = 0;
          uint64_t v9 = (unsigned __int8 *)v13;
          goto LABEL_11;
        }
        goto LABEL_73;
      }
    }
    else
    {
      if (result != 45)
      {
        if (v4)
        {
          unint64_t v13 = 0;
          unsigned __int8 v32 = a3 + 48;
          unsigned __int8 v33 = a3 + 55;
          unsigned __int8 v34 = a3 + 87;
          if (a3 > 0xA)
          {
            unsigned __int8 v32 = 58;
          }
          else
          {
            unsigned __int8 v34 = 97;
            unsigned __int8 v33 = 65;
          }
          Swift::String v35 = (unsigned __int8 *)v41;
          char v11 = 1;
          while (1)
          {
            unsigned int v36 = *v35;
            if (v36 < 0x30 || v36 >= v32)
            {
              if (v36 < 0x41 || v36 >= v33)
              {
                uint64_t v9 = 0;
                if (v36 < 0x61 || v36 >= v34) {
                  goto LABEL_11;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            if (!is_mul_ok(v13, a3)) {
              goto LABEL_73;
            }
            unint64_t v38 = v13 * a3;
            unsigned __int8 v39 = v36 + v37;
            BOOL v22 = __CFADD__(v38, v39);
            unint64_t v13 = v38 + v39;
            if (v22) {
              goto LABEL_73;
            }
            ++v35;
            if (!--v4) {
              goto LABEL_72;
            }
          }
        }
        goto LABEL_73;
      }
      if (v4)
      {
        uint64_t v12 = v4 - 1;
        if (v12)
        {
          unint64_t v13 = 0;
          unsigned __int8 v14 = a3 + 48;
          unsigned __int8 v15 = a3 + 55;
          unsigned __int8 v16 = a3 + 87;
          if (a3 > 0xA)
          {
            unsigned __int8 v14 = 58;
          }
          else
          {
            unsigned __int8 v16 = 97;
            unsigned __int8 v15 = 65;
          }
          BOOL v17 = (unsigned __int8 *)v41 + 1;
          char v11 = 1;
          while (1)
          {
            unsigned int v18 = *v17;
            if (v18 < 0x30 || v18 >= v14)
            {
              if (v18 < 0x41 || v18 >= v15)
              {
                uint64_t v9 = 0;
                if (v18 < 0x61 || v18 >= v16) {
                  goto LABEL_11;
                }
                char v19 = -87;
              }
              else
              {
                char v19 = -55;
              }
            }
            else
            {
              char v19 = -48;
            }
            if (!is_mul_ok(v13, a3)) {
              break;
            }
            unint64_t v20 = v13 * a3;
            unsigned __int8 v21 = v18 + v19;
            BOOL v22 = v20 >= v21;
            unint64_t v13 = v20 - v21;
            if (!v22) {
              break;
            }
            ++v17;
            if (!--v12) {
              goto LABEL_72;
            }
          }
        }
LABEL_73:
        uint64_t v9 = 0;
        char v11 = 1;
        goto LABEL_11;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  uint64_t v9 = sub_100094FEC(result, a2, a3);
  char v11 = v40;
LABEL_11:
  swift_bridgeObjectRelease();
  if (v11) {
    return 0;
  }
  else {
    return (uint64_t)v9;
  }
}

uint64_t sub_100094E54()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100094E94@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16);
  return swift_retain();
}

id sub_100094EA4()
{
  return *(id *)(*(void *)v0 + 24);
}

__objc2_prot *sub_100094EB0()
{
  return &OBJC_PROTOCOL____TtP10driverkitd29DriverKitDaemonClientProtocol_;
}

uint64_t sub_100094EBC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 96))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100094EF8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t sub_100094F3C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t sub_100094F80()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t type metadata accessor for DriverKitDaemonXPCRequestDelegate()
{
  return self;
}

unsigned __int8 *sub_100094FEC(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100014E6C();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  char v11 = sub_1000950D4(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_1000950D4(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v14 = v9 * a3;
              unsigned __int8 v15 = v11 + v12;
              BOOL v16 = v14 >= v15;
              unint64_t v9 = v14 - v15;
              if (!v16) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      unsigned __int8 v26 = a3 + 48;
      unsigned __int8 v27 = a3 + 55;
      unsigned __int8 v28 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v26 = 58;
      }
      else
      {
        unsigned __int8 v28 = 97;
        unsigned __int8 v27 = 65;
      }
      if (result)
      {
        unint64_t v29 = 0;
        do
        {
          unsigned int v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              uint64_t v13 = 0;
              if (v30 < 0x61 || v30 >= v28) {
                return (unsigned __int8 *)v13;
              }
              char v31 = -87;
            }
            else
            {
              char v31 = -55;
            }
          }
          else
          {
            char v31 = -48;
          }
          if (!is_mul_ok(v29, a3)) {
            return 0;
          }
          unint64_t v32 = v29 * a3;
          unsigned __int8 v33 = v30 + v31;
          BOOL v16 = __CFADD__(v32, v33);
          unint64_t v29 = v32 + v33;
          if (v16) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  uint64_t v17 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v18 = a3 + 48;
  unsigned __int8 v19 = a3 + 55;
  unsigned __int8 v20 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v18 = 58;
  }
  else
  {
    unsigned __int8 v20 = 97;
    unsigned __int8 v19 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  unsigned __int8 v21 = result + 1;
  do
  {
    unsigned int v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        uint64_t v13 = 0;
        if (v22 < 0x61 || v22 >= v20) {
          return (unsigned __int8 *)v13;
        }
        char v23 = -87;
      }
      else
      {
        char v23 = -55;
      }
    }
    else
    {
      char v23 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v24 = v9 * a3;
    unsigned __int8 v25 = v22 + v23;
    BOOL v16 = __CFADD__(v24, v25);
    unint64_t v9 = v24 + v25;
    if (v16) {
      return 0;
    }
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100095350(uint64_t a1, uint64_t a2)
{
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  int v4 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  uint64_t v5 = *(void (**)(uint64_t))(**(void **)(*(void *)(a1 + 16) + 104) + 336);
  uint64_t v6 = swift_retain();
  v5(v6);
  swift_release();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_100092F30();
  uint64_t v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_release();
  sub_100012DE4(v7, v9);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, void))(a2 + 16))(a2, isa, 0);

  sub_100012A10(v7, v9);
  return sub_100012A10(v7, v9);
}

uint64_t sub_100095868(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a4;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  _Block_copy(a4);
  PropertyListDecoder.init()();
  sub_1000767C0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  v14[0] = v11;
  v14[1] = v12;
  char v15 = v13;
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) + 96);
  type metadata accessor for ApprovalStateUpdateRequest();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_100096C74;
  *(void *)(v8 + 24) = v6;
  swift_retain();
  sub_100073C70((uint64_t)v14);
  swift_retain();
  uint64_t v9 = ApprovalStateUpdateRequest.__allocating_init(entry:callback:)((uint64_t)v14, (uint64_t)sub_100096D14, v8);
  (*(void (**)(uint64_t))(*(void *)v7 + 304))(v9);
  swift_release();
  swift_release();
  sub_100073D08((uint64_t)v14);
  return swift_release();
}

uint64_t sub_100095B5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    int v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1000848E0(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

void sub_100095BF4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v46)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  void (**v59)(void, void, void);
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  id v65;
  void *v66;
  Swift::String v67;
  Swift::String v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String v73;
  Swift::String v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  Swift::String v80;
  Swift::String v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  uint64_t v90;
  void *v91;
  void *v92;
  Swift::String v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unsigned int v103;
  BOOL v104;
  char v105;
  uint64_t v106;
  void *v107;
  unsigned int v108;
  unsigned int v109;
  Swift::String v110;
  uint64_t (*v111)(uint64_t);
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  Swift::String v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  uint64_t v120;
  Swift::String v121;
  Swift::String v122;
  uint64_t v123;
  Swift::String v124;
  Swift::String v125;
  Swift::String v126;
  Swift::String v127;
  NSString v128;
  Swift::String v129;
  Swift::String v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 *v136;
  unsigned int v137;
  unsigned __int8 *v138;
  unsigned int v139;
  char v140;
  char v141;
  void *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  Swift::String v148;
  uint64_t v149;
  unint64_t v150;
  long long v151;
  uint64_t v152[12];
  unsigned char v153[56];
  long long v154;
  long long v155;
  uint64_t v156;

  *(void *)&v151 = a8;
  v150 = a6;
  v149 = a5;
  uint64_t v13 = type metadata accessor for LookupSpec();
  __chkstk_darwin(v13);
  char v15 = (uint64_t *)((char *)&v142 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&v154 = a7;
  uint64_t v16 = type metadata accessor for DriverKitDaemonXPCRequestDelegate();
  nullsub_1(v16, &off_10017E6F0, v17, v18);
  v146 = v13;
  v147 = v15;
  v148._uint64_t countAndFlagsBits = a1;
  v148._object = a2;
  unint64_t v19 = v150;
  *(void *)&v154 = a7;
  sub_1000832D0(v16, (uint64_t)&off_10017E6F0);
  v145 = 0;
  unsigned __int8 v20 = *(void **)(a7 + 16);
  swift_beginAccess();
  uint64_t v21 = v20[5];
  uint64_t v22 = v20[6];
  sub_1000036B0(v20 + 2, v21);
  sub_10007F4B4(v21, v22);
  uint64_t v23 = *((void *)&v155 + 1);
  uint64_t v24 = v156;
  sub_1000036B0(&v154, *((uint64_t *)&v155 + 1));
  swift_endAccess();
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 80))(v23, v24);
  if (!v26)
  {
    sub_10000478C((uint64_t)&v154);
    goto LABEL_22;
  }
  uint64_t v27 = v25;
  uint64_t v28 = v26;
  sub_10000478C((uint64_t)&v154);
  unint64_t v29 = sub_1000A2488(v27, v28, 0, 0);
  if (!v29)
  {
    sub_100012E3C();
    uint64_t v63 = swift_allocError();
    *(void *)uint64_t v62 = 0xD00000000000002DLL;
    *(void *)(v62 + 8) = 0x80000001001496F0;
    *(_OWORD *)(v62 + 16) = 0u;
    *(_OWORD *)(v62 + 32) = 0u;
    *(_OWORD *)(v62 + 48) = 0u;
    *(void *)(v62 + 64) = 0;
    uint64_t v64 = 9;
    goto LABEL_24;
  }
  unint64_t v30 = (unint64_t)v29;
  if (v29 == (void *)5)
  {
LABEL_22:
    sub_100012E3C();
    uint64_t v63 = swift_allocError();
    *(void *)uint64_t v62 = 0xD000000000000017;
    *(void *)(v62 + 8) = 0x8000000100149590;
    *(_OWORD *)(v62 + 16) = 0u;
    *(_OWORD *)(v62 + 32) = 0u;
    *(_OWORD *)(v62 + 48) = 0u;
    *(void *)(v62 + 64) = 0;
    uint64_t v64 = 2;
LABEL_24:
    *(unsigned char *)(v62 + 72) = v64;
    swift_willThrow();
    uint64_t v47 = v63;
    goto LABEL_25;
  }
  uint64_t v31 = sub_1000AB270();
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 144))(v31);
  swift_release();
  sub_10005FAF8(v32, (uint64_t)v153);
  swift_release();
  uint64_t countAndFlagsBits = v148._countAndFlagsBits;
  uint64_t v34 = (uint64_t)v147;
  object = v148._object;
  *v147 = v148._countAndFlagsBits;
  *(void *)(v34 + 8) = object;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  unsigned int v36 = (void *)sub_10005F384(v34, 0, 0);
  sub_100011138((uint64_t)v153);
  sub_100066778(v34);
  if (v36)
  {
    char v37 = (uint64_t *)v36[3];
    type metadata accessor for DriverExtension(0);
    unint64_t v38 = (void *)swift_dynamicCastClass();
    if (v38)
    {
      v142 = v38;
      v144 = v30;
      v147 = v37;
      swift_retain();
      v143 = (uint64_t)v20;
      uint64_t v39 = sub_1000AB270();
      uint64_t v40 = *(void *)(v39 + 176);
      uint64_t v41 = *(void *)(v39 + 184);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v42 = (uint64_t *)sub_1000A1368();
      uint64_t v43 = *v42;
      uint64_t v44 = v42[1];
      uint64_t v45 = v36;
      uint64_t v46 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*v36 + 312);
      swift_bridgeObjectRetain();
      v146 = (uint64_t)v45;
      v46(&v154, v40, v41, v43, v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v155 + 1))
      {
        sub_100004700(&qword_10017C920);
        if (swift_dynamicCast())
        {
          uint64_t v47 = v145;
          long long v48 = sub_100094644(v152[0]);
          swift_bridgeObjectRelease();
          uint64_t v49 = sub_100095B5C(v48);
          swift_bridgeObjectRelease();
          long long v50 = (void *)a3;
          long long v51 = (void *)a4;
          if (sub_1000948F4(a3, a4, v49))
          {
            swift_bridgeObjectRelease();
            if (!v19)
            {
              *(void *)&v154 = 0;
              swift_stdlib_random();
              long long v98 = v154;
              long long v59 = (void (**)(void, void, void))v151;
              goto LABEL_63;
            }
            long long v53 = (void *)v19;
            long long v54 = HIBYTE(v19) & 0xF;
            long long v55 = v149;
            uint64_t v56 = v149 & 0xFFFFFFFFFFFFLL;
            if ((v19 & 0x2000000000000000) != 0) {
              uint64_t v57 = HIBYTE(v19) & 0xF;
            }
            else {
              uint64_t v57 = v149 & 0xFFFFFFFFFFFFLL;
            }
            if (!v57)
            {
              long long v59 = (void (**)(void, void, void))v151;
              goto LABEL_61;
            }
            if ((v19 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRetain();
              long long v98 = (unint64_t)sub_100094FEC(v55, v19, 10);
              v141 = v140;
              swift_bridgeObjectRelease();
              long long v51 = (void *)a4;
              if ((v141 & 1) == 0)
              {
                long long v59 = (void (**)(void, void, void))v151;
                long long v50 = (void *)a3;
                goto LABEL_63;
              }
              long long v59 = (void (**)(void, void, void))v151;
              long long v50 = (void *)a3;
              long long v53 = (void *)v19;
              long long v55 = v149;
              goto LABEL_61;
            }
            if ((v19 & 0x2000000000000000) == 0)
            {
              if ((v149 & 0x1000000000000000) != 0) {
                uint64_t v58 = (unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
              }
              else {
                uint64_t v58 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
              }
              long long v59 = (void (**)(void, void, void))v151;
              uint64_t v60 = (uint64_t)sub_1000950D4(v58, v56, 10);
              if (v47)
              {
                _Block_release(v59);
                __break(1u);
                return;
              }
              if ((v61 & 1) == 0)
              {
LABEL_62:
                long long v98 = v60;
                goto LABEL_63;
              }
LABEL_61:
              swift_bridgeObjectRetain();
              uint64_t v60 = sub_100094A2C(v55, (unint64_t)v53, 0x10uLL);
              if (v105)
              {
                *(void *)&v154 = 0;
                *((void *)&v154 + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(32);
                swift_bridgeObjectRelease();
                *(void *)&v154 = 543646036;
                *((void *)&v154 + 1) = 0xE400000000000000;
                v129._uint64_t countAndFlagsBits = v55;
                v129._object = v53;
                String.append(_:)(v129);
                v130._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
                v130._object = (void *)0x80000001001496D0;
                String.append(_:)(v130);
                v132 = *((void *)&v154 + 1);
                v131 = v154;
                sub_100012E3C();
                v133 = swift_allocError();
                *(_OWORD *)v134 = __PAIR128__(v132, v131);
                *(_OWORD *)(v134 + 16) = 0u;
                *(_OWORD *)(v134 + 32) = 0u;
                *(_OWORD *)(v134 + 48) = 0u;
                *(void *)(v134 + 64) = 0;
                *(unsigned char *)(v134 + 72) = 9;
                swift_willThrow();
                uint64_t v47 = v133;
                sub_10003E8B0(v144);
                swift_release();
LABEL_67:
                swift_release();
                goto LABEL_26;
              }
              goto LABEL_62;
            }
            *(void *)&v154 = v149;
            *((void *)&v154 + 1) = v19 & 0xFFFFFFFFFFFFFFLL;
            if (v149 == 43)
            {
              if (!v54) {
                goto LABEL_91;
              }
              if (v54 == 1)
              {
LABEL_89:
                long long v98 = 0;
LABEL_60:
                long long v59 = (void (**)(void, void, void))v151;
                if (v54) {
                  goto LABEL_61;
                }
LABEL_63:
                v152[0] = v143;
                v156 = 0;
                v154 = 0u;
                v155 = 0u;
                uint64_t v106 = type metadata accessor for DriverKitDaemon();
                swift_retain();
                uint64_t v107 = v142;
                v108 = sub_1000E72D4(v142, v50, (unint64_t)v51, (void *)v98, 0, 0, (uint64_t)&v154, v106, (uint64_t)&off_10016EDA0);
                if (!v47)
                {
                  v109 = v108;
                  sub_1000130EC((uint64_t)&v154, &qword_10017C010);
                  swift_release();
                  *(void *)&v154 = 0;
                  *((void *)&v154 + 1) = 0xE000000000000000;
                  _StringGuts.grow(_:)(76);
                  v110._uint64_t countAndFlagsBits = 0x646568636E75614CLL;
                  v110._object = (void *)0xEE00207478656420;
                  String.append(_:)(v110);
                  v111 = *(uint64_t (**)(uint64_t))(*v107 + 144);
                  v112 = swift_retain();
                  v113 = v111(v112);
                  v115 = v114;
                  swift_release();
                  v116._uint64_t countAndFlagsBits = v113;
                  v116._object = v115;
                  String.append(_:)(v116);
                  swift_bridgeObjectRelease();
                  v117._object = (void *)0x8000000100149690;
                  v117._uint64_t countAndFlagsBits = 0xD000000000000017;
                  String.append(_:)(v117);
                  v118._uint64_t countAndFlagsBits = (uint64_t)v50;
                  v118._object = v51;
                  String.append(_:)(v118);
                  v119._uint64_t countAndFlagsBits = 0x20676174202CLL;
                  v119._object = (void *)0xE600000000000000;
                  String.append(_:)(v119);
                  sub_100004700((uint64_t *)&unk_10017D6E0);
                  v120 = swift_allocObject();
                  v151 = xmmword_100132F10;
                  *(_OWORD *)(v120 + 16) = xmmword_100132F10;
                  *(void *)(v120 + 56) = &type metadata for UInt64;
                  *(void *)(v120 + 64) = &protocol witness table for UInt64;
                  *(void *)(v120 + 32) = v98;
                  v121._uint64_t countAndFlagsBits = String.init(format:_:)();
                  String.append(_:)(v121);
                  swift_bridgeObjectRelease();
                  v122._uint64_t countAndFlagsBits = 0xD000000000000010;
                  v122._object = (void *)0x80000001001496B0;
                  String.append(_:)(v122);
                  v123 = swift_allocObject();
                  *(_OWORD *)(v123 + 16) = v151;
                  *(void *)(v123 + 56) = &type metadata for UInt32;
                  *(void *)(v123 + 64) = &protocol witness table for UInt32;
                  *(_DWORD *)(v123 + 32) = 0;
                  v124._uint64_t countAndFlagsBits = String.init(format:_:)();
                  String.append(_:)(v124);
                  swift_bridgeObjectRelease();
                  v125._uint64_t countAndFlagsBits = 0x20646970203ALL;
                  v125._object = (void *)0xE600000000000000;
                  String.append(_:)(v125);
                  LODWORD(v152[0]) = v109;
                  v126._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                  String.append(_:)(v126);
                  swift_bridgeObjectRelease();
                  v127._uint64_t countAndFlagsBits = 10;
                  v127._object = (void *)0xE100000000000000;
                  String.append(_:)(v127);
                  v128 = String._bridgeToObjectiveC()();
                  ((void (**)(void, NSString, void))v59)[2](v59, v128, 0);

                  sub_10003E8B0(v144);
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  return;
                }
                swift_release();
                swift_release();
                sub_10003E8B0(v144);
                sub_1000130EC((uint64_t)&v154, &qword_10017C010);
                goto LABEL_67;
              }
              if ((BYTE1(v149) - 48) > 9u) {
                goto LABEL_59;
              }
              long long v98 = (BYTE1(v149) - 48);
              long long v101 = v54 - 2;
              if (v54 != 2)
              {
                uint64_t v102 = (unsigned __int8 *)&v154 + 2;
                while (1)
                {
                  uint64_t v103 = *v102 - 48;
                  if (v103 > 9) {
                    goto LABEL_59;
                  }
                  if (!is_mul_ok(v98, 0xAuLL)
                    || (v104 = __CFADD__(10 * v98, v103), long long v98 = 10 * v98 + v103, v104))
                  {
LABEL_83:
                    long long v98 = 0;
                    LOBYTE(v54) = 1;
                    long long v51 = (void *)a4;
                    long long v50 = (void *)a3;
                    long long v53 = (void *)v19;
                    long long v55 = v149;
                    goto LABEL_60;
                  }
                  LOBYTE(v54) = 0;
                  ++v102;
                  --v101;
                  long long v51 = (void *)a4;
                  long long v50 = (void *)a3;
                  long long v53 = (void *)v19;
                  long long v55 = v149;
                  if (!v101) {
                    goto LABEL_60;
                  }
                }
              }
            }
            else
            {
              if (v149 == 45)
              {
                if (v54)
                {
                  if (v54 != 1)
                  {
                    if ((BYTE1(v149) - 48) <= 9u)
                    {
                      long long v52 = 0;
                      long long v98 = -(uint64_t)(BYTE1(v149) - 48);
                      if (BYTE1(v149) == 48)
                      {
                        long long v99 = v54 - 2;
                        if (v54 == 2)
                        {
                          long long v100 = 0;
                          goto LABEL_45;
                        }
                        v138 = (unsigned __int8 *)&v154 + 2;
                        long long v51 = (void *)a4;
                        long long v50 = (void *)a3;
                        long long v53 = (void *)v19;
                        long long v55 = v149;
                        while (1)
                        {
                          v139 = *v138 - 48;
                          if (v139 > 9) {
                            goto LABEL_59;
                          }
                          if (!is_mul_ok(v98, 0xAuLL)) {
                            goto LABEL_83;
                          }
                          char v104 = 10 * v98 >= v139;
                          long long v98 = 10 * v98 - v139;
                          if (!v104) {
                            goto LABEL_83;
                          }
                          LOBYTE(v54) = 0;
                          ++v138;
                          --v99;
                          long long v51 = (void *)a4;
                          long long v50 = (void *)a3;
                          long long v53 = (void *)v19;
                          long long v55 = v149;
                          if (!v99) {
                            goto LABEL_60;
                          }
                        }
                      }
LABEL_92:
                      long long v100 = 1;
                      long long v98 = v52;
LABEL_45:
                      long long v51 = (void *)a4;
                      long long v59 = (void (**)(void, void, void))v151;
                      long long v50 = (void *)a3;
                      long long v53 = (void *)v19;
                      long long v55 = v149;
                      if ((v100 & 1) == 0) {
                        goto LABEL_63;
                      }
                      goto LABEL_61;
                    }
LABEL_59:
                    long long v98 = 0;
                    LOBYTE(v54) = 1;
                    goto LABEL_60;
                  }
                  goto LABEL_89;
                }
                __break(1u);
LABEL_91:
                __break(1u);
                goto LABEL_92;
              }
              if (!v54 || (v149 - 48) > 9u) {
                goto LABEL_59;
              }
              long long v98 = (v149 - 48);
              v135 = v54 - 1;
              if (v54 != 1)
              {
                v136 = (unsigned __int8 *)&v154 + 1;
                while (1)
                {
                  v137 = *v136 - 48;
                  if (v137 > 9) {
                    goto LABEL_59;
                  }
                  if (!is_mul_ok(v98, 0xAuLL)) {
                    goto LABEL_83;
                  }
                  char v104 = __CFADD__(10 * v98, v137);
                  long long v98 = 10 * v98 + v137;
                  if (v104) {
                    goto LABEL_83;
                  }
                  LOBYTE(v54) = 0;
                  ++v136;
                  --v135;
                  long long v51 = (void *)a4;
                  long long v50 = (void *)a3;
                  long long v53 = (void *)v19;
                  long long v55 = v149;
                  if (!v135) {
                    goto LABEL_60;
                  }
                }
              }
            }
            LOBYTE(v54) = 0;
            goto LABEL_60;
          }
          *(void *)&v154 = 0;
          *((void *)&v154 + 1) = 0xE000000000000000;
          long long v86 = v144;
          _StringGuts.grow(_:)(71);
          v87._uint64_t countAndFlagsBits = 0xD000000000000011;
          v87._object = (void *)0x8000000100149630;
          String.append(_:)(v87);
          v88._uint64_t countAndFlagsBits = a3;
          v88._object = v51;
          String.append(_:)(v88);
          v89._uint64_t countAndFlagsBits = 0xD000000000000032;
          v89._object = (void *)0x8000000100149650;
          String.append(_:)(v89);
          long long v90 = Set.description.getter();
          long long v92 = v91;
          swift_bridgeObjectRelease();
          v93._uint64_t countAndFlagsBits = v90;
          v93._object = v92;
          String.append(_:)(v93);
          swift_bridgeObjectRelease();
          long long v95 = *((void *)&v154 + 1);
          long long v94 = v154;
          sub_100012E3C();
          long long v96 = swift_allocError();
          *(_OWORD *)long long v97 = __PAIR128__(v95, v94);
          *(_OWORD *)(v97 + 16) = 0u;
          *(_OWORD *)(v97 + 32) = 0u;
          *(_OWORD *)(v97 + 48) = 0u;
          *(void *)(v97 + 64) = 0;
          *(unsigned char *)(v97 + 72) = 9;
          swift_willThrow();
          uint64_t v47 = v96;
          swift_release();
          swift_release();
          sub_10003E8B0(v86);
          goto LABEL_25;
        }
      }
      else
      {
        sub_1000130EC((uint64_t)&v154, &qword_10017C018);
      }
      uint64_t v79 = v144;
      long long v59 = (void (**)(void, void, void))v151;
      *(void *)&v154 = 0;
      *((void *)&v154 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v80._uint64_t countAndFlagsBits = 0x6F69736E65747845;
      v80._object = (void *)0xEA0000000000206ELL;
      String.append(_:)(v80);
      String.append(_:)(v148);
      v81._uint64_t countAndFlagsBits = 0xD000000000000028;
      v81._object = (void *)0x8000000100149600;
      String.append(_:)(v81);
      uint64_t v83 = *((void *)&v154 + 1);
      uint64_t v82 = v154;
      sub_100012E3C();
      uint64_t v84 = swift_allocError();
      *(_OWORD *)uint64_t v85 = __PAIR128__(v83, v82);
      *(_OWORD *)(v85 + 16) = 0u;
      *(_OWORD *)(v85 + 32) = 0u;
      *(_OWORD *)(v85 + 48) = 0u;
      *(void *)(v85 + 64) = 0;
      *(unsigned char *)(v85 + 72) = 9;
      swift_willThrow();
      uint64_t v47 = v84;
      swift_release();
      swift_release();
      sub_10003E8B0(v79);
      goto LABEL_26;
    }
    *(void *)&v154 = 0;
    *((void *)&v154 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&v154 = 0x6F696E7365747845;
    *((void *)&v154 + 1) = 0xEA0000000000206ELL;
    v73._uint64_t countAndFlagsBits = countAndFlagsBits;
    v73._object = object;
    String.append(_:)(v73);
    v74._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v74._object = (void *)0x80000001001495E0;
    String.append(_:)(v74);
    uint64_t v76 = *((void *)&v154 + 1);
    uint64_t v75 = v154;
    sub_100012E3C();
    uint64_t v77 = swift_allocError();
    *(_OWORD *)unint64_t v78 = __PAIR128__(v76, v75);
    *(_OWORD *)(v78 + 16) = 0u;
    *(_OWORD *)(v78 + 32) = 0u;
    *(_OWORD *)(v78 + 48) = 0u;
    *(void *)(v78 + 64) = 0;
    *(unsigned char *)(v78 + 72) = 9;
    swift_willThrow();
    uint64_t v47 = v77;
    swift_release();
  }
  else
  {
    *(void *)&v154 = 0;
    *((void *)&v154 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    *(void *)&v154 = 0xD000000000000029;
    *((void *)&v154 + 1) = 0x80000001001495B0;
    v67._uint64_t countAndFlagsBits = countAndFlagsBits;
    v67._object = object;
    String.append(_:)(v67);
    v68._uint64_t countAndFlagsBits = 46;
    v68._object = (void *)0xE100000000000000;
    String.append(_:)(v68);
    uint64_t v70 = *((void *)&v154 + 1);
    uint64_t v69 = v154;
    sub_100012E3C();
    uint64_t v71 = swift_allocError();
    *(_OWORD *)uint64_t v72 = __PAIR128__(v70, v69);
    *(_OWORD *)(v72 + 16) = 0u;
    *(_OWORD *)(v72 + 32) = 0u;
    *(_OWORD *)(v72 + 48) = 0u;
    *(void *)(v72 + 64) = 0;
    *(unsigned char *)(v72 + 72) = 10;
    swift_willThrow();
    uint64_t v47 = v71;
  }
  sub_10003E8B0(v30);
LABEL_25:
  long long v59 = (void (**)(void, void, void))v151;
LABEL_26:
  v152[10] = v47;
  swift_errorRetain();
  sub_100004700(&qword_10017EB50);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    sub_10005BFC4((uint64_t)v152, (uint64_t)&v154);
    uint64_t v65 = sub_1000CD320();
    ((void (**)(void, void, id))v59)[2](v59, 0, v65);

    sub_10009302C((uint64_t)&v154);
  }
  else
  {
    swift_errorRelease();
    uint64_t v66 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))v59)[2](v59, 0, v66);
  }
  swift_errorRelease();
}

uint64_t sub_100096C74()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100096C88()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100096CC0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100096CF8(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1000929C8(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_100096D00(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100096D18()
{
  id v1 = [*v0 bundleIdentifier];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_100096D80()
{
  id v1 = [*v0 URL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100096DE0(uint64_t a1, uint64_t a2)
{
  return sub_100096E54(a1, a2, (SEL *)&selRef_uniqueInstallIdentifier);
}

uint64_t sub_100096DEC()
{
  id v1 = [*v0 driverExtensionPaths];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100096E48(uint64_t a1, uint64_t a2)
{
  return sub_100096E54(a1, a2, (SEL *)&selRef_installSessionIdentifier);
}

uint64_t sub_100096E54(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  if (!v4) {
    return 0;
  }
  Swift::Int v5 = v4;
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t sub_100096EB8()
{
  id v1 = [*v0 localizedName];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100096F10@<X0>(char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = URL.pathComponents.getter();
  unint64_t v10 = *(void *)(URL.pathComponents.getter() + 16);
  swift_bridgeObjectRelease();
  if (v10)
  {
    if (*(void *)(v9 + 16) >= v10)
    {
      if (qword_100187320 == -1) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_12:
  swift_once();
LABEL_4:
  uint64_t v11 = sub_100097870(v2, (uint64_t)qword_100199540);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v11, v2);
  unint64_t v12 = v10 - 1;
  if (v10 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(a1, v8, v2);
  }
  else
  {
    uint64_t v18 = a1;
    uint64_t v13 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    swift_bridgeObjectRetain();
    uint64_t v17 = v9;
    uint64_t v14 = v9 + 56;
    do
    {
      swift_bridgeObjectRetain();
      URL.appendingPathComponent(_:isDirectory:)();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      char v15 = *v13;
      (*v13)(v8, v6, v2);
      swift_bridgeObjectRelease();
      v14 += 16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    v15(v18, v8, v2);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100097148@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t *)sub_1000A21BC();
  uint64_t v3 = *v2;
  uint64_t v4 = (void *)v2[1];
  swift_bridgeObjectRetain();
  sub_1000F16F8(v3, v4, a1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000971A4(uint64_t a1)
{
  id v1 = *(void (**)(uint64_t))(*(void *)a1 + 168);
  v1(a1);
  sub_100004700(&qword_10017CC08);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100132F30;
  *(void *)(v2 + 32) = *sub_10002FD60();
  *(void *)(v2 + 40) = *sub_10002FE38();
  sub_10003F664();
  sub_100004700(&qword_10017E828);
  sub_10009AE14();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t result = dispatch thunk of SetAlgebra.isSubset(of:)();
  if ((result & 1) == 0)
  {
    uint64_t v34 = v1;
    ((void (*)(void))v1)();
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_100132F30;
    *(void *)(v4 + 32) = *sub_10002FFC8();
    *(void *)(v4 + 40) = *sub_1000301A8();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    sub_10003F60C();
    dispatch thunk of RawRepresentable.rawValue.getter();
    sub_10003F560();
    dispatch thunk of OptionSet.init(rawValue:)();
    dispatch thunk of SetAlgebra.formIntersection(_:)();
    uint64_t v5 = v4;
    dispatch thunk of SetAlgebra.init()();
    sub_10003F6BC();
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)a1 + 240))();
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        uint64_t v8 = v6 + 32;
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v7; ++i)
        {
          sub_10005BFC4(v8 + 80 * i, (uint64_t)v41);
          sub_10005BFC4((uint64_t)v41, (uint64_t)v42);
          if (v43)
          {
            sub_10009AEC8((uint64_t)v41, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10005C020);
            v10._uint64_t countAndFlagsBits = sub_1000CB9EC();
            String.append(_:)(v10);
            swift_bridgeObjectRelease();
            uint64_t v11 = 10;
            unint64_t v12 = 0xE100000000000000;
          }
          else
          {
            uint64_t v14 = *(void *)(v42[0] + 16);
            if (v14)
            {
              uint64_t v15 = v42[0] + 32;
              sub_10009AEC8((uint64_t)v41, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10005C020);
              swift_bridgeObjectRetain();
              do
              {
                sub_10005BFC4(v15, (uint64_t)v40);
                sub_10009AEC8((uint64_t)v40, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10005C020);
                v16._uint64_t countAndFlagsBits = sub_1000CB9EC();
                String.append(_:)(v16);
                swift_bridgeObjectRelease();
                v17._uint64_t countAndFlagsBits = 10;
                v17._object = (void *)0xE100000000000000;
                String.append(_:)(v17);
                swift_bridgeObjectRelease();
                sub_10009AEC8((uint64_t)v40, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10003E9C8);
                v15 += 80;
                --v14;
              }
              while (v14);
              sub_10009AEC8((uint64_t)v41, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10003E9C8);
              uint64_t v11 = 0;
              unint64_t v12 = 0xE000000000000000;
            }
            else
            {
              swift_bridgeObjectRetain();
              uint64_t v11 = 0;
              unint64_t v12 = 0xE000000000000000;
            }
          }
          unint64_t v13 = v12;
          String.append(_:)(*(Swift::String *)&v11);
          swift_bridgeObjectRelease();
          sub_10009AEC8((uint64_t)v41, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10003E9C8);
        }
        uint64_t v26 = swift_bridgeObjectRelease_n();
        v34(v26);
      }
      else
      {
        uint64_t v27 = swift_bridgeObjectRelease();
        v1(v27);
      }
      if (dispatch thunk of SetAlgebra.isSuperset(of:)())
      {
        type metadata accessor for OSExtension(0);
        sub_10009AE70();
        uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v38 = v28;
        v29._uint64_t countAndFlagsBits = 2618;
        v29._object = (void *)0xE200000000000000;
        String.append(_:)(v29);
        v30._uint64_t countAndFlagsBits = 0;
        v30._object = (void *)0xE000000000000000;
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        uint64_t v23 = v38;
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v24 = v36;
        char v25 = 31;
      }
      else
      {
        type metadata accessor for OSExtension(0);
        sub_10009AE70();
        uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v39 = v31;
        v32._uint64_t countAndFlagsBits = 2618;
        v32._object = (void *)0xE200000000000000;
        String.append(_:)(v32);
        v33._uint64_t countAndFlagsBits = 0;
        v33._object = (void *)0xE000000000000000;
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        uint64_t v23 = v39;
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v24 = v37;
        char v25 = 17;
      }
    }
    else
    {
      _StringGuts.grow(_:)(25);
      type metadata accessor for OSExtension(0);
      sub_10009AE70();
      swift_retain();
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v20 = v19;
      swift_release();
      swift_bridgeObjectRelease();
      v21._object = (void *)0x8000000100149DF0;
      v21._uint64_t countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v21);
      v22._uint64_t countAndFlagsBits = sub_10003025C(v5);
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      uint64_t v23 = v20;
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v24 = v18;
      char v25 = 54;
    }
    *(void *)(v24 + 8) = v23;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(void *)(v24 + 64) = 0;
    *(unsigned char *)(v24 + 72) = v25;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100097850(uint64_t a1)
{
  return sub_1000978C8(a1, qword_100199540, (void (*)(void))sub_1000A21BC);
}

uint64_t sub_100097870(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1000978A8(uint64_t a1)
{
  return sub_1000978C8(a1, qword_100199558, (void (*)(void))sub_1000A21C8);
}

uint64_t sub_1000978C8(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = type metadata accessor for URL();
  sub_10009AF20(v5, a2);
  sub_100097870(v5, (uint64_t)a2);
  a3();
  swift_bridgeObjectRetain();
  URL.init(fileURLWithPath:)();

  return swift_bridgeObjectRelease();
}

id sub_100097950(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = (void *)v3;
  int v53 = a3;
  uint64_t v54 = a2;
  uint64_t v8 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v52 = (uint64_t)v48 - v12;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  Swift::String v16 = (char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v17 = *(_DWORD *)(v3 + 640);
  LODWORD(v61[0]) = *(_DWORD *)sub_1000B9638();
  LODWORD(v58[0]) = v17;
  sub_100013438();
  LOBYTE(v17) = dispatch thunk of SetAlgebra.isSuperset(of:)();
  sub_10000469C((uint64_t)a1, (uint64_t)v61);
  uint64_t v64 = v6;
  if (v17)
  {
    uint64_t v18 = v14;
    uint64_t v19 = v13;
    sub_10000478C((uint64_t)v61);
    sub_10000469C((uint64_t)a1, (uint64_t)v58);
LABEL_4:
    sub_10000478C((uint64_t)v58);
    goto LABEL_5;
  }
  uint64_t v50 = v13;
  uint64_t v20 = v6[5];
  uint64_t v21 = v6[6];
  sub_1000036B0(v6 + 2, v20);
  sub_10002A4C4(v20, v21);
  uint64_t v49 = v59;
  uint64_t v51 = v4;
  uint64_t v22 = v60;
  v48[1] = sub_1000036B0(v58, v59);
  uint64_t v24 = v62;
  uint64_t v23 = v63;
  sub_1000036B0(v61, v62);
  (*(void (**)(uint64_t, uint64_t))(v23 + 64))(v24, v23);
  uint64_t v25 = URL.path.getter();
  uint64_t v27 = v26;
  uint64_t v18 = v14;
  uint64_t v28 = *(void (**)(char *))(v14 + 8);
  uint64_t v19 = v50;
  v28(v16);
  Swift::String v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v30 = v22;
  uint64_t v5 = v51;
  LOBYTE(v25) = v29(v25, v27, v49, v30);
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)v58);
  sub_10000478C((uint64_t)v61);
  sub_10000469C((uint64_t)a1, (uint64_t)v58);
  if (v25) {
    goto LABEL_4;
  }
  uint64_t v40 = v59;
  uint64_t v41 = v60;
  sub_1000036B0(v58, v59);
  uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 16))(v40, v41);
  unint64_t v44 = v43;
  uint64_t v56 = v42;
  unint64_t v57 = v43;
  long long v55 = xmmword_100136BF0;
  sub_100097DF8();
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  sub_10003C944(v42, v44);
  sub_10000478C((uint64_t)v58);
  if (v45)
  {
LABEL_5:
    uint64_t v31 = a1[3];
    uint64_t v32 = a1[4];
    sub_1000036B0(a1, v31);
    (*(void (**)(uint64_t, uint64_t))(v32 + 64))(v31, v32);
    Swift::String v33 = (uint64_t *)sub_1000A21BC();
    uint64_t v34 = *v33;
    Swift::String v35 = (void *)v33[1];
    swift_bridgeObjectRetain();
    uint64_t v36 = v52;
    sub_1000F16F8(v34, v35, v52);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v19);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v37(v36, 0, 1, v19);
    v37((uint64_t)v11, 1, 1, v19);
    char v38 = sub_10002A278();
    uint64_t v39 = sub_100034048(a1, v38 & 1, v36, (uint64_t)v11, v54, v53 & 1);
    sub_1000130EC((uint64_t)v11, (uint64_t *)&unk_10017FA60);
    sub_1000130EC(v36, (uint64_t *)&unk_10017FA60);
    if (!v5) {
      sub_1000971A4(v39);
    }
    return (id)v39;
  }
  uint64_t v39 = (uint64_t)v64;
  id v46 = sub_100097E4C(a1, v54, v53 & 1);
  if (!v5) {
    return v46;
  }
  return (id)v39;
}

unint64_t sub_100097DF8()
{
  unint64_t result = qword_10017E820;
  if (!qword_10017E820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E820);
  }
  return result;
}

id sub_100097E4C(void *a1, uint64_t a2, int a3)
{
  int v65 = a3;
  uint64_t v66 = a2;
  uint64_t v4 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v67 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v68 = (char *)&v59 - v7;
  uint64_t v79 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v79 - 8);
  uint64_t v9 = __chkstk_darwin(v79);
  uint64_t v63 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v78 = (char *)&v59 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = type metadata accessor for OSSignpostID();
  uint64_t v76 = *(void *)(v15 - 8);
  uint64_t v77 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v62 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v82 = (char *)&v59 - v18;
  uint64_t v19 = sub_1000EFCB4();
  id v20 = (id)*v19;
  OSSignpostID.init(log:)();
  LODWORD(v73) = static os_signpost_type_t.event.getter();
  uint64_t v75 = (id *)v19;
  id v72 = (id)*v19;
  uint64_t v21 = sub_1000A2258();
  uint64_t v22 = *v21;
  uint64_t v70 = v21[1];
  uint64_t v71 = v22;
  int v69 = *((unsigned __int8 *)v21 + 16);
  uint64_t v59 = sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v23 = swift_allocObject();
  long long v61 = xmmword_100132F10;
  *(_OWORD *)(v23 + 16) = xmmword_100132F10;
  uint64_t v24 = a1[3];
  uint64_t v25 = a1[4];
  sub_1000036B0(a1, v24);
  (*(void (**)(uint64_t, uint64_t))(v25 + 64))(v24, v25);
  uint64_t v26 = URL.path.getter();
  uint64_t v28 = v27;
  uint64_t v64 = v8;
  uint64_t v31 = *(void (**)(char *, uint64_t))(v8 + 8);
  Swift::String v29 = (void *)(v8 + 8);
  uint64_t v30 = v31;
  uint64_t v32 = v79;
  v31(v14, v79);
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v60 = sub_10002A1DC();
  *(void *)(v23 + 64) = v60;
  *(void *)(v23 + 32) = v26;
  *(void *)(v23 + 40) = v28;
  Swift::String v33 = v72;
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  uint64_t v34 = v32;
  swift_bridgeObjectRelease();
  uint64_t v35 = a1[3];
  uint64_t v36 = a1[4];
  sub_1000036B0(a1, v35);
  uint64_t v37 = v35;
  char v38 = v78;
  (*(void (**)(uint64_t, uint64_t))(v36 + 64))(v37, v36);
  sub_100096F10(v38);
  v31(v14, v34);
  uint64_t v39 = v74;
  sub_100098964(a1, (uint64_t)v81);
  if (v39)
  {
    v30(v38, v34);
    static os_signpost_type_t.end.getter();
    id v40 = *v75;
    uint64_t v41 = v82;
    os_signpost(_:dso:log:name:signpostID:)();
    uint64_t v42 = v41;
  }
  else
  {
    id v72 = v29;
    uint64_t v73 = (void (*)(uint64_t, uint64_t))v30;
    uint64_t v74 = v21;
    uint64_t v43 = a1[3];
    uint64_t v44 = a1[4];
    sub_1000036B0(a1, v43);
    uint64_t v45 = (uint64_t)v68;
    (*(void (**)(uint64_t, uint64_t))(v44 + 64))(v43, v44);
    id v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56);
    v46(v45, 0, 1, v34);
    uint64_t v47 = (uint64_t)v67;
    v46((uint64_t)v67, 1, 1, v34);
    char v48 = sub_10002A278();
    uint64_t v49 = (unsigned __int8 *)sub_100034048(v81, v48 & 1, v45, v47, v66, v65 & 1);
    sub_1000130EC(v47, (uint64_t *)&unk_10017FA60);
    sub_1000130EC(v45, (uint64_t *)&unk_10017FA60);
    uint64_t v50 = swift_retain();
    sub_1000971A4(v50);
    uint64_t v51 = (uint64_t)v78;
    sub_100099B54(v81, (uint64_t)v78, (uint64_t)v80);
    type metadata accessor for OSExtension(0);
    uint64_t v53 = sub_100114014(v80);
    if (v53)
    {
      uint64_t v54 = v53;
      type metadata accessor for RealizedInfo(0);
      id v40 = (id)sub_10009ABE4(v54, v49);
      swift_release();
      sub_10000478C((uint64_t)v80);
      swift_release();
      v73(v51, v79);
      sub_10000478C((uint64_t)v81);
      static os_signpost_type_t.end.getter();
      id v55 = *v75;
      uint64_t v56 = v82;
      id v57 = v55;
      os_signpost(_:dso:log:name:signpostID:)();

      (*(void (**)(char *, uint64_t))(v76 + 8))(v56, v77);
      return v40;
    }
    swift_release();
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v58 = 0xD00000000000002DLL;
    *(void *)(v58 + 8) = 0x8000000100149930;
    *(_OWORD *)(v58 + 16) = 0u;
    *(_OWORD *)(v58 + 32) = 0u;
    *(_OWORD *)(v58 + 48) = 0u;
    *(void *)(v58 + 64) = 0;
    *(unsigned char *)(v58 + 72) = 27;
    swift_willThrow();
    sub_10000478C((uint64_t)v80);
    swift_release();
    v73(v51, v79);
    sub_10000478C((uint64_t)v81);
    static os_signpost_type_t.end.getter();
    id v40 = *v75;
    uint64_t v42 = v82;
    os_signpost(_:dso:log:name:signpostID:)();
  }

  (*(void (**)(char *, uint64_t))(v76 + 8))(v42, v77);
  return v40;
}

uint64_t sub_100098964@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v154 = a2;
  uint64_t v157 = type metadata accessor for OSSignpostID();
  uint64_t v156 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  v155 = (char *)&v154 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v170 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  v158 = (char *)&v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  v159 = (char *)&v154 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v168 = (uint64_t *)((char *)&v154 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  v164 = (char *)&v154 - v14;
  __chkstk_darwin(v13);
  v163 = (char *)&v154 - v15;
  LOBYTE(v173) = 0;
  uint64_t v16 = v2 + 2;
  uint64_t v17 = v2[5];
  uint64_t v18 = v2[6];
  v172 = v16;
  sub_1000036B0(v16, v17);
  sub_1001297F4(v17, v18);
  uint64_t v19 = v178;
  sub_1000036B0(&v175, v177);
  if (qword_100187328 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_100097870(v6, (uint64_t)qword_100199558);
  uint64_t v21 = URL.path.getter();
  char v22 = (*(uint64_t (**)(uint64_t))(v19 + 136))(v21);
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)&v175);
  v166 = v3;
  v171 = a1;
  if (v22)
  {
    if (v173) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if ((v173 & 1) == 0)
  {
LABEL_8:
    uint64_t v169 = v6;
    static os_log_type_t.error.getter();
    sub_10002A230();
    uint64_t v25 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v26 = v3[5];
    uint64_t v27 = v3[6];
    uint64_t v23 = v172;
    sub_1000036B0(v172, v26);
    sub_1001297F4(v26, v27);
    uint64_t v28 = v177;
    uint64_t v29 = v178;
    sub_1000036B0(&v175, v177);
    uint64_t v24 = v20;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 104))(v20, v28, v29);
    sub_10000478C((uint64_t)&v175);
    v167 = 0;
    goto LABEL_9;
  }
  uint64_t v169 = v6;
  v167 = 0;
  uint64_t v23 = v172;
  uint64_t v24 = v20;
LABEL_9:
  static os_log_type_t.error.getter();
  uint64_t v160 = sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_100132F10;
  uint64_t v31 = URL.path.getter();
  uint64_t v32 = v24;
  uint64_t v34 = v33;
  *(void *)(v30 + 56) = &type metadata for String;
  id v162 = (id)sub_10002A1DC();
  *(void *)(v30 + 64) = v162;
  *(void *)(v30 + 32) = v31;
  *(void *)(v30 + 40) = v34;
  unint64_t v161 = sub_10002A230();
  uint64_t v35 = static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  LODWORD(v35) = S_IRWXU.getter();
  int v36 = S_IRGRP.getter() | v35;
  LODWORD(v35) = S_IXGRP.getter();
  LODWORD(v35) = v36 | v35 | S_IROTH.getter();
  uint64_t v37 = v35 | S_IXOTH.getter();
  uint64_t v38 = v3[5];
  uint64_t v39 = v3[6];
  sub_1000036B0(v23, v38);
  sub_1001297F4(v38, v39);
  uint64_t v40 = v177;
  uint64_t v41 = v178;
  sub_1000036B0(&v175, v177);
  uint64_t v42 = (uint64_t *)sub_1000A21B0();
  uint64_t v43 = *v42;
  uint64_t v44 = v42[1];
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56);
  swift_bridgeObjectRetain();
  uint64_t v46 = v43;
  uint64_t v47 = v167;
  v45(v32, v37, v46, v44, v40, v41);
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)&v175);
  if (v47)
  {
    static os_log_type_t.error.getter();
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_100132F30;
    uint64_t v49 = URL.path.getter();
    id v50 = v162;
    *(void *)(v48 + 56) = &type metadata for String;
    *(void *)(v48 + 64) = v50;
    *(void *)(v48 + 32) = v49;
    *(void *)(v48 + 40) = v51;
    unint64_t v175 = (unint64_t)v47;
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    uint64_t v52 = String.init<A>(describing:)();
    *(void *)(v48 + 96) = &type metadata for String;
    *(void *)(v48 + 104) = v50;
    *(void *)(v48 + 72) = v52;
    *(void *)(v48 + 80) = v53;
    uint64_t v54 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v169;
  a1 = v171;
LABEL_12:
  uint64_t v55 = a1[3];
  uint64_t v56 = a1[4];
  sub_1000036B0(a1, v55);
  uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 24))(v55, v56);
  if (!v58)
  {
    unint64_t v175 = 0;
    unint64_t v176 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    unint64_t v175 = 0x6120656C646E7542;
    unint64_t v176 = 0xEA00000000002074;
    uint64_t v67 = a1[3];
    uint64_t v68 = a1[4];
    sub_1000036B0(a1, v67);
    int v69 = v168;
    (*(void (**)(uint64_t, uint64_t))(v68 + 64))(v67, v68);
    uint64_t v70 = URL.path.getter();
    id v72 = v71;
    (*(void (**)(void *, uint64_t))(v170 + 8))(v69, v6);
    v73._uint64_t countAndFlagsBits = v70;
    v73._object = v72;
    String.append(_:)(v73);
    swift_bridgeObjectRelease();
    v74._uint64_t countAndFlagsBits = 0xD000000000000013;
    v74._object = (void *)0x8000000100149B50;
    String.append(_:)(v74);
    unint64_t v75 = v175;
    unint64_t v76 = v176;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v65 = v75;
    *(void *)(v65 + 8) = v76;
    *(_OWORD *)(v65 + 16) = 0u;
    *(_OWORD *)(v65 + 32) = 0u;
    *(_OWORD *)(v65 + 48) = 0u;
    *(void *)(v65 + 64) = 0;
    char v66 = 27;
    goto LABEL_16;
  }
  uint64_t v59 = v57;
  unint64_t v60 = v58;
  unint64_t v175 = v57;
  unint64_t v176 = (unint64_t)v58;
  *(void *)&long long v173 = 47;
  *((void *)&v173 + 1) = 0xE100000000000000;
  sub_100029B24();
  if (StringProtocol.contains<A>(_:)())
  {
    unint64_t v175 = 0;
    unint64_t v176 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    unint64_t v175 = 0xD000000000000012;
    unint64_t v176 = 0x8000000100149C40;
    v61._uint64_t countAndFlagsBits = v59;
    v61._object = v60;
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v62._object = (void *)0x8000000100149C60;
    String.append(_:)(v62);
    unint64_t v63 = v175;
    unint64_t v64 = v176;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v65 = v63;
    *(void *)(v65 + 8) = v64;
    *(_OWORD *)(v65 + 16) = 0u;
    *(_OWORD *)(v65 + 32) = 0u;
    *(_OWORD *)(v65 + 48) = 0u;
    *(void *)(v65 + 64) = 0;
    char v66 = 9;
LABEL_16:
    *(unsigned char *)(v65 + 72) = v66;
    return swift_willThrow();
  }
  uint64_t v78 = v166[5];
  uint64_t v79 = v166[6];
  sub_1000036B0(v172, v78);
  sub_1001297F4(v78, v79);
  uint64_t v80 = v177;
  uint64_t v81 = v178;
  sub_1000036B0(&v175, v177);
  if (qword_100187328 != -1) {
    swift_once();
  }
  uint64_t v82 = v6;
  uint64_t v83 = sub_100097870(v6, (uint64_t)qword_100199558);
  *(void *)&long long v173 = v59;
  *((void *)&v173 + 1) = v60;
  v84._uint64_t countAndFlagsBits = 0x5858585858582ELL;
  v84._object = (void *)0xE700000000000000;
  String.append(_:)(v84);
  uint64_t v85 = v164;
  uint64_t v86 = v165;
  (*(void (**)(uint64_t, void, void, uint64_t, uint64_t))(v81 + 80))(v83, v173, *((void *)&v173 + 1), v80, v81);
  swift_bridgeObjectRelease();
  if (v86) {
    return sub_10000478C((uint64_t)&v175);
  }
  uint64_t v165 = 0;
  uint64_t v87 = v171[3];
  uint64_t v88 = v171[4];
  sub_1000036B0(v171, v87);
  long long v89 = (char *)v168;
  (*(void (**)(uint64_t, uint64_t))(v88 + 64))(v87, v88);
  URL.lastPathComponent.getter();
  uint64_t v90 = v82;
  uint64_t v91 = v170 + 8;
  long long v92 = *(void (**)(char *, uint64_t))(v170 + 8);
  v92(v89, v90);
  long long v93 = v163;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v92(v85, v90);
  sub_10000478C((uint64_t)&v175);
  URL.deletingLastPathComponent()();
  long long v94 = v159;
  URL.deletingLastPathComponent()();
  v92(v89, v90);
  uint64_t v95 = URL.path.getter();
  uint64_t v97 = v96;
  v167 = v92;
  uint64_t v170 = v91;
  v92(v94, v90);
  long long v98 = sub_1000A21C8();
  if (v95 == *v98 && v97 == v98[1])
  {
    swift_bridgeObjectRelease();
LABEL_25:
    LODWORD(v164) = static os_signpost_type_t.event.getter();
    id v162 = (id)*sub_1000EFCB4();
    long long v101 = sub_1000A2258();
    unint64_t v161 = (unint64_t)*v101;
    uint64_t v160 = (uint64_t)v101[1];
    LODWORD(v159) = *((unsigned __int8 *)v101 + 16);
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v102 = swift_allocObject();
    *(_OWORD *)(v102 + 16) = xmmword_100132F30;
    uint64_t v103 = URL.path.getter();
    uint64_t v105 = v104;
    *(void *)(v102 + 56) = &type metadata for String;
    unint64_t v106 = sub_10002A1DC();
    uint64_t v169 = v90;
    unint64_t v107 = v106;
    *(void *)(v102 + 64) = v106;
    *(void *)(v102 + 32) = v103;
    *(void *)(v102 + 40) = v105;
    v108 = v171;
    uint64_t v109 = v171[3];
    uint64_t v110 = v171[4];
    sub_1000036B0(v171, v109);
    v111 = (char *)v168;
    (*(void (**)(uint64_t, uint64_t))(v110 + 64))(v109, v110);
    uint64_t v112 = URL.path.getter();
    uint64_t v114 = v113;
    v167(v111, v90);
    *(void *)(v102 + 96) = &type metadata for String;
    *(void *)(v102 + 104) = v107;
    *(void *)(v102 + 72) = v112;
    *(void *)(v102 + 80) = v114;
    v115 = v155;
    static OSSignpostID.exclusive.getter();
    v116 = v162;
    os_signpost(_:dso:log:name:signpostID:_:_:)();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v156 + 8))(v115, v157);
    v117 = v166;
    uint64_t v118 = v166[5];
    uint64_t v119 = v166[6];
    sub_1000036B0(v172, v118);
    sub_1001297F4(v118, v119);
    uint64_t v120 = v177;
    uint64_t v121 = v178;
    v168 = sub_1000036B0(&v175, v177);
    uint64_t v122 = v108[3];
    uint64_t v123 = v108[4];
    sub_1000036B0(v108, v122);
    v124 = v158;
    (*(void (**)(uint64_t, uint64_t))(v123 + 64))(v122, v123);
    uint64_t v125 = URL.path.getter();
    uint64_t v127 = v126;
    v128 = v124;
    v129 = (uint64_t (*)(char *, uint64_t))v167;
    v167(v128, v169);
    uint64_t v130 = URL.path.getter();
    uint64_t v132 = v131;
    uint64_t v133 = sub_10012772C();
    uint64_t v134 = v165;
    sub_100127738(v125, v127, v130, v132, v133, v120, v121);
    if (v134)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000478C((uint64_t)&v175);
      unint64_t v175 = 0;
      unint64_t v176 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      unint64_t v175 = 0xD000000000000024;
      unint64_t v176 = 0x8000000100149BE0;
      swift_getErrorValue();
      v135._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
      String.append(_:)(v135);
      swift_bridgeObjectRelease();
      unint64_t v136 = v175;
      unint64_t v137 = v176;
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v138 = v136;
      *(void *)(v138 + 8) = v137;
      *(_OWORD *)(v138 + 16) = 0u;
      *(_OWORD *)(v138 + 32) = 0u;
      *(_OWORD *)(v138 + 48) = 0u;
      *(void *)(v138 + 64) = 0;
      *(unsigned char *)(v138 + 72) = 27;
      swift_willThrow();
      swift_errorRelease();
      return v129(v163, v169);
    }
    uint64_t v139 = v169;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000478C((uint64_t)&v175);
    uint64_t v140 = v117[5];
    uint64_t v141 = v117[6];
    sub_1000036B0(v172, v140);
    sub_1000B07CC(v140, v141);
    uint64_t v142 = v177;
    uint64_t v143 = v178;
    sub_1000036B0(&v175, v177);
    v144 = v163;
    (*(void (**)(long long *__return_ptr, char *, uint64_t, uint64_t))(v143 + 24))(&v173, v163, v142, v143);
    if (v174)
    {
      v129(v144, v139);
      sub_10000372C(&v173, v154);
      return sub_10000478C((uint64_t)&v175);
    }
    sub_1000130EC((uint64_t)&v173, &qword_10017BC78);
    sub_10000478C((uint64_t)&v175);
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v149 = 0xD000000000000028;
    *(void *)(v149 + 8) = 0x8000000100149C10;
    *(_OWORD *)(v149 + 16) = 0u;
    *(_OWORD *)(v149 + 32) = 0u;
    *(_OWORD *)(v149 + 48) = 0u;
    *(void *)(v149 + 64) = 0;
    *(unsigned char *)(v149 + 72) = 27;
    swift_willThrow();
    return v129(v144, v139);
  }
  char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v100 = v165;
  if (v99) {
    goto LABEL_25;
  }
  uint64_t v145 = v166[5];
  uint64_t v146 = v166[6];
  sub_1000036B0(v172, v145);
  sub_1001297F4(v145, v146);
  uint64_t v147 = v177;
  uint64_t v148 = v178;
  sub_1000036B0(&v175, v177);
  (*(void (**)(char *, uint64_t, uint64_t))(v148 + 104))(v93, v147, v148);
  if (v100)
  {
    v167(v93, v90);
    return sub_10000478C((uint64_t)&v175);
  }
  sub_10000478C((uint64_t)&v175);
  unint64_t v175 = 0;
  unint64_t v176 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  unint64_t v175 = 0xD000000000000029;
  unint64_t v176 = 0x8000000100149B70;
  v150._uint64_t countAndFlagsBits = URL.path.getter();
  String.append(_:)(v150);
  swift_bridgeObjectRelease();
  unint64_t v151 = v175;
  unint64_t v152 = v176;
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v153 = v151;
  *(void *)(v153 + 8) = v152;
  *(_OWORD *)(v153 + 16) = 0u;
  *(_OWORD *)(v153 + 32) = 0u;
  *(_OWORD *)(v153 + 48) = 0u;
  *(void *)(v153 + 64) = 0;
  *(unsigned char *)(v153 + 72) = 27;
  swift_willThrow();
  return ((uint64_t (*)(char *, uint64_t))v167)(v93, v90);
}

void sub_100099B54(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v101 = a3;
  uint64_t v113 = type metadata accessor for OSSignpostID();
  v115 = *(void **)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v111 = *(void *)(v7 - 8);
  uint64_t v112 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v102 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v97 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v97 - v13;
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_1000036B0(a1, v15);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v16 + 64);
  uint64_t v110 = v14;
  v17(v15, v16);
  uint64_t v106 = a2;
  URL.deletingLastPathComponent()();
  LODWORD(v108) = static os_signpost_type_t.event.getter();
  uint64_t v105 = sub_1000EFCB4();
  id v18 = (id)*v105;
  uint64_t v19 = sub_1000A2258();
  unint64_t v107 = *v19;
  uint64_t v103 = sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100132F10;
  uint64_t v21 = URL.path.getter();
  uint64_t v23 = v22;
  *(void *)(v20 + 56) = &type metadata for String;
  unint64_t v104 = sub_10002A1DC();
  *(void *)(v20 + 64) = v104;
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v23;
  static OSSignpostID.exclusive.getter();
  uint64_t v24 = v114;
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  swift_bridgeObjectRelease();
  uint64_t v25 = (void (*)(char *, uint64_t))v115[1];
  v108 = v6;
  ++v115;
  v25(v6, v113);
  uint64_t v26 = v24[5];
  uint64_t v27 = v24[6];
  sub_1000036B0(v24 + 2, v26);
  sub_1001297F4(v26, v27);
  uint64_t v28 = v120;
  uint64_t v29 = v121;
  sub_1000036B0(&v118, v120);
  uint64_t v30 = v109;
  (*(void (**)(char *, uint64_t, void, uint64_t, uint64_t))(v29 + 48))(v12, 1, 0, v28, v29);
  if (v30)
  {
    sub_10000478C((uint64_t)&v118);
    unint64_t v118 = 0;
    unint64_t v119 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v118 = 0xD000000000000022;
    unint64_t v119 = 0x8000000100149990;
    *(void *)&long long v116 = v30;
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    v31._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    unint64_t v32 = v118;
    unint64_t v33 = v119;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v34 = v32;
    *(void *)(v34 + 8) = v33;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(void *)(v34 + 64) = 0;
    *(unsigned char *)(v34 + 72) = 27;
    swift_willThrow();
    swift_errorRelease();
    uint64_t v35 = v112;
    int v36 = *(void (**)(char *, uint64_t))(v111 + 8);
    v36(v12, v112);
    uint64_t v37 = (uint64_t)v110;
    sub_10009A7A8((uint64_t)v110, v24);
    v36((char *)v37, v35);
    return;
  }
  long long v98 = v12;
  sub_10000478C((uint64_t)&v118);
  int v99 = static os_signpost_type_t.event.getter();
  id v38 = (id)*v105;
  unint64_t v107 = *v19;
  uint64_t v105 = (uint64_t *)v19[1];
  int v100 = *((unsigned __int8 *)v19 + 16);
  uint64_t v39 = swift_allocObject();
  uint64_t v109 = v24 + 2;
  uint64_t v40 = (void *)v39;
  *(_OWORD *)(v39 + 16) = xmmword_100132F30;
  id v41 = v38;
  uint64_t v42 = (uint64_t)v110;
  uint64_t v43 = URL.path.getter();
  unint64_t v44 = v104;
  v40[7] = &type metadata for String;
  v40[8] = v44;
  v40[4] = v43;
  v40[5] = v45;
  uint64_t v46 = v106;
  uint64_t v47 = URL.path.getter();
  v40[12] = &type metadata for String;
  v40[13] = v44;
  v40[9] = v47;
  v40[10] = v48;
  uint64_t v49 = v108;
  static OSSignpostID.exclusive.getter();
  id v50 = v114;
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  uint64_t v51 = v50;
  swift_bridgeObjectRelease();
  v25(v49, v113);
  uint64_t v52 = v109;
  uint64_t v53 = v50[5];
  uint64_t v54 = v51[6];
  sub_1000036B0(v109, v53);
  sub_1001297F4(v53, v54);
  uint64_t v55 = v120;
  uint64_t v56 = v121;
  sub_1000036B0(&v118, v120);
  *(void *)&long long v116 = 0;
  (*(void (**)(uint64_t, uint64_t, void, void, void, long long *, uint64_t, uint64_t))(v56 + 88))(v46, v42, 0, 0, 0, &v116, v55, v56);
  uint64_t v57 = v46;
  uint64_t v58 = (id)v116;
  sub_10000478C((uint64_t)&v118);
  uint64_t v59 = v112;
  if (!v58)
  {
    unint64_t v118 = 0;
    unint64_t v119 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v69._uint64_t countAndFlagsBits = 0xD000000000000033;
    v69._object = (void *)0x8000000100149A30;
    String.append(_:)(v69);
    v70._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    v71._uint64_t countAndFlagsBits = 544175136;
    v71._object = (void *)0xE400000000000000;
    String.append(_:)(v71);
    v72._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    unint64_t v73 = v118;
    unint64_t v74 = v119;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v75 = v73;
    *(void *)(v75 + 8) = v74;
    *(_OWORD *)(v75 + 16) = 0u;
    *(_OWORD *)(v75 + 32) = 0u;
    *(_OWORD *)(v75 + 48) = 0u;
    *(void *)(v75 + 64) = 0;
    *(unsigned char *)(v75 + 72) = 27;
    swift_willThrow();
    unint64_t v76 = *(void (**)(char *, uint64_t))(v111 + 8);
    v76(v98, v59);
    sub_10009A7A8(v42, v51);
    v76((char *)v42, v59);
    return;
  }
  unint64_t v60 = v51;
  uint64_t v61 = v57;
  v115 = v58;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = URL.path.getter();
  uint64_t v64 = v63;
  uint64_t v65 = v61;
  uint64_t v66 = URL.path.getter();
  uint64_t v68 = v111;
  if (v62 == v66 && v64 == v67)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v77 & 1) == 0)
    {
      uint64_t v86 = v60[5];
      uint64_t v87 = v60[6];
      sub_1000036B0(v52, v86);
      sub_1001297F4(v86, v87);
      uint64_t v88 = v120;
      uint64_t v89 = v121;
      sub_1000036B0(&v118, v120);
      uint64_t v90 = v102;
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 104))(v102, v88, v89);
      sub_10000478C((uint64_t)&v118);
      unint64_t v118 = 0;
      unint64_t v119 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v91._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
      v91._object = (void *)0x8000000100149A70;
      String.append(_:)(v91);
      v92._uint64_t countAndFlagsBits = URL.path.getter();
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      v93._uint64_t countAndFlagsBits = 0x6974656C6544202ELL;
      v93._object = (void *)0xEB000000002E676ELL;
      String.append(_:)(v93);
      unint64_t v94 = v118;
      unint64_t v95 = v119;
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v96 = v94;
      *(void *)(v96 + 8) = v95;
      *(_OWORD *)(v96 + 16) = 0u;
      *(_OWORD *)(v96 + 32) = 0u;
      *(_OWORD *)(v96 + 48) = 0u;
      *(void *)(v96 + 64) = 0;
      *(unsigned char *)(v96 + 72) = 27;
      swift_willThrow();
      uint64_t v82 = *(void (**)(char *, uint64_t))(v68 + 8);
      uint64_t v85 = v90;
      goto LABEL_13;
    }
  }
  uint64_t v78 = v60[5];
  uint64_t v79 = v60[6];
  sub_1000036B0(v52, v78);
  sub_1000B07CC(v78, v79);
  uint64_t v80 = v120;
  uint64_t v81 = v121;
  sub_1000036B0(&v118, v120);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v81 + 24))(&v116, v65, v80, v81);
  if (!v117)
  {
    sub_1000130EC((uint64_t)&v116, &qword_10017BC78);
    sub_10000478C((uint64_t)&v118);
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v84 = 0xD000000000000028;
    *(void *)(v84 + 8) = 0x8000000100149AA0;
    *(_OWORD *)(v84 + 16) = 0u;
    *(_OWORD *)(v84 + 32) = 0u;
    *(_OWORD *)(v84 + 48) = 0u;
    *(void *)(v84 + 64) = 0;
    *(unsigned char *)(v84 + 72) = 27;
    swift_willThrow();
    uint64_t v82 = *(void (**)(char *, uint64_t))(v68 + 8);
    uint64_t v85 = v102;
LABEL_13:
    uint64_t v83 = v112;
    v82(v85, v112);
    v82(v98, v83);
    goto LABEL_14;
  }
  uint64_t v82 = *(void (**)(char *, uint64_t))(v68 + 8);
  uint64_t v83 = v112;
  v82(v102, v112);
  v82(v98, v83);
  sub_10000372C(&v116, v101);
  sub_10000478C((uint64_t)&v118);
LABEL_14:
  sub_10009A7A8(v42, v60);
  v82((char *)v42, v83);
}

uint64_t sub_10009A7A8(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v31 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.deletingLastPathComponent()();
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v29 = a2 + 2;
  sub_1000036B0(a2 + 2, v10);
  sub_1001297F4(v10, v11);
  uint64_t v12 = v34;
  sub_1000036B0(v32, v33);
  uint64_t v13 = URL.path.getter();
  LOBYTE(v10) = (*(uint64_t (**)(uint64_t))(v12 + 136))(v13);
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)v32);
  if ((v10 & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v27 = v7;
  uint64_t v28 = v6;
  int v26 = static os_signpost_type_t.event.getter();
  id v14 = (id)*sub_1000EFCB4();
  int v25 = *((unsigned __int8 *)sub_1000A2258() + 16);
  v24[1] = sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100132F10;
  uint64_t v16 = URL.path.getter();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10002A1DC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v31);
  uint64_t v19 = a2[5];
  uint64_t v20 = a2[6];
  sub_1000036B0(v29, v19);
  sub_1001297F4(v19, v20);
  uint64_t v21 = v33;
  uint64_t v22 = v34;
  sub_1000036B0(v32, v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v9, v21, v22);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
  return sub_10000478C((uint64_t)v32);
}

uint64_t sub_10009ABE4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = v2;
  uint64_t v28 = a1;
  uint64_t v5 = sub_100004700(&qword_10017C918);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10001BA68((uint64_t)(a2 + 32), (uint64_t)v30, &qword_10017C010);
  unsigned int v27 = a2[72];
  uint64_t v12 = (*(void *(**)(void *__return_ptr, uint64_t))(*(void *)a2 + 192))(v29, v11);
  uint64_t v13 = (*(uint64_t (**)(void *))(*(void *)a2 + 216))(v12);
  uint64_t v25 = v14;
  uint64_t v26 = v13;
  uint64_t v16 = v15;
  sub_10001BA68((uint64_t)&a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL], (uint64_t)v10, (uint64_t *)&unk_10017FA60);
  uint64_t v17 = *(void *)&a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex];
  unsigned __int8 v18 = a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex + 8];
  sub_10001BA68((uint64_t)&a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid], (uint64_t)v7, &qword_10017C918);
  uint64_t v19 = *(void *)&a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches];
  uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 168);
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = v20(v21);
  unsigned __int8 v24 = v18;
  return (*(uint64_t (**)(uint64_t, unsigned char *, void, void *, uint64_t, uint64_t, uint64_t, char *, uint64_t, unsigned __int8, char *, uint64_t, uint64_t))(v3 + 264))(v28, v30, v27, v29, v26, v25, v16, v10, v17, v24, v7, v19, v22);
}

unint64_t sub_10009AE14()
{
  unint64_t result = qword_10017E830;
  if (!qword_10017E830)
  {
    sub_1000126B8(&qword_10017E828);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E830);
  }
  return result;
}

unint64_t sub_10009AE70()
{
  unint64_t result = qword_10017BC90;
  if (!qword_10017BC90)
  {
    type metadata accessor for OSExtension(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BC90);
  }
  return result;
}

uint64_t sub_10009AEC8(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 72);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), v4);
  return a1;
}

uint64_t *sub_10009AF20(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10009AF84(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)v1;
  int v4 = *(_DWORD *)(v1 + 640);
  LODWORD(v71[0]) = *(_DWORD *)sub_1000B95DC();
  LODWORD(v69) = v4;
  sub_100013438();
  char v5 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v6 = *a1;
  if (v5)
  {
    uint64_t v7 = *sub_10002FD60();
    uint64_t v8 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v6 + 184))(v71);
    uint64_t v69 = v7;
    uint64_t v70 = *v9;
    sub_10003F664();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_10003F6BC();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      uint64_t v70 = v7;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
    v8(v71, 0);
    return 1;
  }
  type metadata accessor for KernelExtension(0);
  if (swift_dynamicCastClass())
  {
    swift_retain();
    sub_100115C44();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v11 = v2 + 20;
    uint64_t v12 = v2 + 21;
    goto LABEL_10;
  }
  type metadata accessor for DriverExtension(0);
  if (swift_dynamicCastClass())
  {
    swift_retain();
    sub_100116198();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v11 = v2 + 22;
    uint64_t v12 = v2 + 23;
LABEL_10:
    uint64_t v13 = *v12;
    uint64_t v14 = *v11;
    swift_bridgeObjectRetain();
    sub_100004700(&qword_10017E838);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100132F10;
    uint64_t v16 = sub_1000A1A24();
    uint64_t v18 = *(void *)v16;
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)(inited + 32) = v18;
    *(void *)(inited + 40) = v17;
    *(void *)(inited + 48) = v14;
    *(void *)(inited + 56) = v13;
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_100033A20(inited);
    sub_100004700(&qword_10017E840);
    v71[3] = type metadata accessor for RealizedInfo(0);
    v71[4] = &off_10016B0F8;
    v71[0] = v6;
    swift_retain();
    sub_10009BF00(v19);
    swift_bridgeObjectRelease();
    unint64_t v20 = sub_10011A194();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000478C((uint64_t)v71);
    if (!v20)
    {
      sub_10009C26C((uint64_t)a1);
      uint64_t v51 = *a1;
      uint64_t v52 = *sub_10002FD60();
      uint64_t v53 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v51 + 184))(v71);
      uint64_t v69 = v52;
      uint64_t v70 = *v54;
      sub_10003F664();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_10003F6BC();
      char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
      if ((v55 & 1) == 0)
      {
        uint64_t v70 = v52;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
      v53(v71, 0);
      sub_10009BA38(a1);
      return 1;
    }
    uint64_t v21 = *a1;
    uint64_t v22 = *(void *)(*a1 + 24);
    uint64_t v23 = *(uint64_t (**)(uint64_t))(*(void *)v22 + 144);
    unsigned __int8 v24 = (void *)(*(void *)v22 + 144);
    uint64_t v25 = swift_retain();
    uint64_t v26 = (void *)v23(v25);
    uint64_t v28 = v27;
    swift_release();
    if (v20 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v29) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v29 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v29)
      {
LABEL_13:
        v71[0] = _swiftEmptyArrayStorage;
        sub_10000C884(0, v29 & ~(v29 >> 63), 0);
        if (v29 < 0)
        {
          __break(1u);
          uint64_t v64 = sub_1000A0BB4(0, v24[2] + 1, 1, v24);
          *uint64_t v26 = v64;
          unint64_t v39 = v64[2];
          unint64_t v38 = v64[3];
          if (v39 >= v38 >> 1)
          {
            uint64_t v64 = sub_1000A0BB4((void *)(v38 > 1), v39 + 1, 1, v64);
            *uint64_t v26 = v64;
          }
          v64[2] = v39 + 1;
          sub_10005BFC4((uint64_t)v71, (uint64_t)&v64[10 * v39 + 4]);
          ((void (*)(char *, void))v71[0])(v68, 0);
          static os_log_type_t.error.getter();
          sub_100004700((uint64_t *)&unk_10017D6E0);
          uint64_t v40 = swift_allocObject();
          *(_OWORD *)(v40 + 16) = xmmword_100132F10;
          unint64_t v41 = sub_1000CB9EC();
          uint64_t v43 = v42;
          *(void *)(v40 + 56) = &type metadata for String;
          *(void *)(v40 + 64) = sub_10002A1DC();
          *(void *)(v40 + 32) = v41;
          *(void *)(v40 + 40) = v43;
          sub_10002A230();
          unint64_t v44 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          sub_10009AEC8((uint64_t)v71, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10003E9C8);
          swift_bridgeObjectRelease();

          swift_errorRelease();
          goto LABEL_39;
        }
        uint64_t v65 = v28;
        uint64_t v66 = v26;
        uint64_t v67 = a1;
        uint64_t v30 = (void *)v71[0];
        if ((v20 & 0xC000000000000001) != 0)
        {
          uint64_t v31 = 0;
          do
          {
            uint64_t v32 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v33 = *(void *)(v32 + 16);
            uint64_t v34 = *(void *)(v32 + 24);
            swift_bridgeObjectRetain();
            swift_unknownObjectRelease();
            v71[0] = v30;
            unint64_t v36 = v30[2];
            unint64_t v35 = v30[3];
            if (v36 >= v35 >> 1)
            {
              sub_10000C884(v35 > 1, v36 + 1, 1);
              uint64_t v30 = (void *)v71[0];
            }
            ++v31;
            v30[2] = v36 + 1;
            uint64_t v37 = &v30[2 * v36];
            v37[4] = v33;
            v37[5] = v34;
          }
          while (v29 != v31);
        }
        else
        {
          unint64_t v45 = v20 + 32;
          do
          {
            uint64_t v46 = *(void *)(*(void *)v45 + 16);
            uint64_t v47 = *(void *)(*(void *)v45 + 24);
            v71[0] = v30;
            unint64_t v48 = v30[2];
            unint64_t v49 = v30[3];
            swift_bridgeObjectRetain();
            if (v48 >= v49 >> 1)
            {
              sub_10000C884(v49 > 1, v48 + 1, 1);
              uint64_t v30 = (void *)v71[0];
            }
            v30[2] = v48 + 1;
            id v50 = &v30[2 * v48];
            v50[4] = v46;
            v50[5] = v47;
            v45 += 8;
            --v29;
          }
          while (v29);
        }
        swift_bridgeObjectRelease();
        uint64_t v26 = v66;
        a1 = v67;
        uint64_t v28 = v65;
LABEL_34:
        uint64_t v56 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v21 + 256))(v71);
        uint64_t v58 = v57;
        uint64_t v59 = *v57;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v58 = v59;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v59 = sub_1000A0BB4(0, v59[2] + 1, 1, v59);
          *uint64_t v58 = v59;
        }
        unint64_t v62 = v59[2];
        unint64_t v61 = v59[3];
        if (v62 >= v61 >> 1)
        {
          uint64_t v59 = sub_1000A0BB4((void *)(v61 > 1), v62 + 1, 1, v59);
          *uint64_t v58 = v59;
        }
        v59[2] = v62 + 1;
        uint64_t v63 = &v59[10 * v62];
        v63[4] = v26;
        v63[5] = v28;
        v63[6] = v30;
        *(_OWORD *)(v63 + 7) = 0u;
        *(_OWORD *)(v63 + 9) = 0u;
        *(_OWORD *)(v63 + 11) = 0u;
        *((unsigned char *)v63 + 104) = 18;
        v56(v71, 0);
LABEL_39:
        sub_10009BA38(a1);
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v30 = _swiftEmptyArrayStorage;
    goto LABEL_34;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009BA38(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  unint64_t v38 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v35 - v5;
  uint64_t v7 = type metadata accessor for OSSignposter();
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  swift_retain();
  uint64_t v11 = *sub_10002FDBC();
  uint64_t v12 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v10 + 184))(v45);
  uint64_t v44 = v11;
  uint64_t v43 = *v13;
  sub_10003F664();
  dispatch thunk of SetAlgebra.intersection(_:)();
  sub_10003F6BC();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v43 = v11;
    dispatch thunk of SetAlgebra.formUnion(_:)();
  }
  v12(v45, 0);
  swift_release();
  uint64_t v14 = *(uint64_t (**)(uint64_t))(**(void **)(*a1 + 24) + 144);
  uint64_t v15 = swift_retain();
  uint64_t v37 = v14(v15);
  unint64_t v17 = v16;
  swift_release();
  uint64_t v18 = sub_1000F01A8();
  uint64_t v20 = v41;
  uint64_t v19 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v9, v18, v42);
  uint64_t v21 = sub_1000A227C();
  uint64_t v22 = *v21;
  char v23 = *((unsigned char *)v21 + 16);
  swift_bridgeObjectRetain();
  unsigned __int8 v24 = v6;
  static OSSignpostID.exclusive.getter();
  uint64_t v25 = OSSignposter.logHandle.getter();
  int v26 = static os_signpost_type_t.event.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_7;
  }
  int v36 = v26;
  if ((v23 & 1) == 0)
  {
    if (!v22)
    {
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_7:
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v40);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v19);
    }
    goto LABEL_12;
  }
  if ((unint64_t)v22 >> 32)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v22 >> 11 == 27)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  if (v22 >> 16 > 0x10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v22 = &v46;
LABEL_12:
  uint64_t v28 = v39;
  uint64_t v29 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v38, v24, v40);
  uint64_t v30 = swift_slowAlloc();
  unint64_t v35 = v24;
  uint64_t v31 = (uint8_t *)v30;
  v45[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v31 = 136315138;
  swift_bridgeObjectRetain();
  uint64_t v44 = sub_100003F90(v37, v17, v45);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  uint64_t v32 = v38;
  os_signpost_id_t v33 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, (os_signpost_type_t)v36, v33, v22, "Validated: %s", v31, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v34 = *(void (**)(char *, uint64_t))(v28 + 8);
  v34(v35, v29);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v42);
  return ((uint64_t (*)(char *, uint64_t))v34)(v32, v29);
}

unint64_t sub_10009BF00(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100004700(&qword_10017C248);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = (char *)&type metadata for Any + 8;
  uint64_t v11 = &type metadata for String;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1000048D8();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (int64_t i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    unsigned __int8 v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_10001889C(v6, v7);
    sub_10001889C(v7, v40);
    sub_10001889C(v40, &v38);
    unint64_t result = sub_1000048E0(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      uint64_t v12 = v7;
      uint64_t v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      unint64_t v16 = v10;
      unint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *unint64_t v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      uint64_t v11 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      uint64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      sub_10000478C((uint64_t)v18);
      unint64_t result = (unint64_t)sub_10001889C(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_10001889C(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_10009C26C(uint64_t a1)
{
  void (*v24)(long long *__return_ptr, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void (*v29)(uint64_t, uint64_t);
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  void **v42;
  void *v43;
  uint64_t v44;
  Swift::String v45;
  Swift::Bool v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t inited;
  NSString *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  void *object;
  uint64_t countAndFlagsBits;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  Swift::String v76;
  Swift::String v77;
  void *v78;
  uint64_t v79;
  void **v80;
  void *v81;
  uint64_t v82;
  Swift::String v83;
  Swift::Bool v84;
  uint64_t v85;
  Swift::String v86;
  Swift::String v87;
  long long v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void **v102;
  void *v103;
  uint64_t v104;
  Swift::String v105;
  Swift::Bool v106;
  Swift::String v107;
  Swift::String v108;
  Swift::String v109;
  uint64_t v110;
  void *v111;
  void *v112;
  Swift::String v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  void *v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  Swift::Int v121;
  uint64_t v122;
  void *v123;
  void *v124;
  Swift::String v125;
  long long v126;
  void *v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  void **v153;
  void *v154;
  uint64_t v155;
  Swift::String v156;
  Swift::Bool v157;
  Swift::String v158;
  Swift::String v159;
  Swift::String v160;
  Swift::String v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  long long v168;
  void *v169;
  void (*v170)(uint64_t, uint64_t);
  uint64_t v171;
  long long v172;
  Swift::String v173;
  uint64_t v174;
  char *v175;
  char *v176;
  long long v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  Swift::String v181;
  uint64_t v182;
  uint64_t v183;
  long long v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;

  uint64_t v3 = v2;
  uint64_t v4 = (void *)v1;
  uint64_t v6 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v6 - 8);
  unint64_t v176 = (char *)&v166 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  *(void *)&uint64_t v177 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v175 = (char *)&v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v166 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v166 - v14;
  int v16 = *(_DWORD *)(v1 + 640);
  LODWORD(v187) = *(_DWORD *)sub_1000B9A88();
  LODWORD(v184) = v16;
  sub_100013438();
  if (dispatch thunk of SetAlgebra.isSuperset(of:)())
  {
    static os_log_type_t.info.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_100132F10;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = sub_10002A1DC();
    *(void *)(v17 + 32) = 0xD000000000000015;
    *(void *)(v17 + 40) = 0x800000010014A2D0;
    sub_10002A230();
    goto LABEL_3;
  }
  uint64_t v174 = v8;
  sub_10003FDC8(*(void *)(*(void *)a1 + 24) + 24, (uint64_t)&v187);
  if (v191 == 1)
  {
    swift_release();
    v187 = 0;
    v188 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v19._uint64_t countAndFlagsBits = 0xD000000000000036;
    v19._object = (void *)0x800000010014A290;
    String.append(_:)(v19);
LABEL_9:
    sub_10003F50C();
    v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    unint64_t v21 = v187;
    unint64_t v22 = v188;
    static os_log_type_t.info.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_100132F10;
    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_10002A1DC();
    *(void *)(v23 + 32) = v21;
    *(void *)(v23 + 40) = v22;
    sub_10002A230();
    swift_bridgeObjectRetain();
    uint64_t v18 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_10003FE80((uint64_t)&v187);
  sub_10003FDC8(*(void *)(*(void *)a1 + 24) + 24, (uint64_t)&v187);
  if (v191 == 2)
  {
    v187 = 0;
    v188 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v187 = 0xD000000000000020;
    v188 = 0x800000010014A260;
    goto LABEL_9;
  }
  sub_10003FE80((uint64_t)&v187);
  unsigned __int8 v24 = *(void (**)(long long *__return_ptr, uint64_t))(**(void **)(*(void *)a1 + 24) + 112);
  unint64_t v25 = swift_retain();
  v24(&v184, v25);
  swift_release();
  if (!v185)
  {
    sub_1000130EC((uint64_t)&v184, &qword_10017BC78);
    sub_100012E3C();
    swift_allocError();
    *(void *)unint64_t v61 = 0xD000000000000020;
    *(void *)(v61 + 8) = 0x8000000100149ED0;
    *(_OWORD *)(v61 + 16) = 0u;
    *(_OWORD *)(v61 + 32) = 0u;
    *(_OWORD *)(v61 + 48) = 0u;
    *(void *)(v61 + 64) = 0;
    *(unsigned char *)(v61 + 72) = 19;
    swift_willThrow();
LABEL_56:
    static os_log_type_t.info.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v58 = swift_allocObject();
    uint64_t v59 = v58;
    unint64_t v60 = xmmword_100132F10;
    goto LABEL_57;
  }
  sub_10000372C(&v184, (uint64_t)&v187);
  char v26 = v189;
  uint64_t v27 = v190;
  sub_1000036B0(&v187, v189);
  (*(void (**)(uint64_t, uint64_t))(v27 + 64))(v26, v27);
  v173._uint64_t countAndFlagsBits = URL.path.getter();
  v173._object = v28;
  BOOL v29 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
  v171 = v177 + 8;
  uint64_t v170 = v29;
  v29((uint64_t)v15, v174);
  LODWORD(v184) = *(_DWORD *)sub_1000B9638();
  LODWORD(v181._countAndFlagsBits) = v16;
  uint64_t v30 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  *(void *)&v172 = v1;
  if ((v30 & 1) == 0)
  {
    v167 = v3;
    sub_100004700((uint64_t *)&unk_10017DE60);
    int64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1001359B0;
    uint64_t v32 = *(void *)(v1 + 400);
    *(void *)(v31 + 32) = *(void *)(v1 + 392);
    *(void *)(v31 + 40) = v32;
    int64_t v33 = *(void *)(v1 + 416);
    *(void *)(v31 + 48) = v4[51];
    *(void *)(v31 + 56) = v33;
    uint64_t v34 = v4[54];
    *(void *)(v31 + 64) = v4[53];
    *(void *)(v31 + 72) = v34;
    uint64_t v169 = (void *)v31;
    uint64_t v36 = v189;
    uint64_t v35 = v190;
    sub_1000036B0(&v187, v189);
    *(void *)&v168 = *(void *)(v35 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v37 = ((uint64_t (*)(uint64_t, uint64_t))v168)(v36, v35);
    if (v38 == 1)
    {
      uint64_t v78 = v169;
      uint64_t v79 = v169[2];
      if (v79)
      {
        swift_bridgeObjectRetain();
        uint64_t v80 = (void **)(v78 + 5);
        do
        {
          uint64_t v82 = (uint64_t)*(v80 - 1);
          uint64_t v81 = *v80;
          swift_bridgeObjectRetain();
          v83._uint64_t countAndFlagsBits = v82;
          v83._object = v81;
          uint64_t v84 = String.hasPrefix(_:)(v83);
          swift_bridgeObjectRelease();
          if (v84)
          {
LABEL_19:
            swift_bridgeObjectRelease();
            goto LABEL_20;
          }
          v80 += 2;
          --v79;
        }
        while (v79);
        swift_bridgeObjectRelease();
        uint64_t v78 = v169;
      }
      swift_bridgeObjectRelease();
      *(void *)&v184 = 0;
      *((void *)&v184 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(112);
      v94._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v94._object = (void *)0x8000000100149F70;
      String.append(_:)(v94);
      sub_1000036B0(&v187, v189);
      v95._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v95);
      swift_bridgeObjectRelease();
      v96._uint64_t countAndFlagsBits = 0xD00000000000004FLL;
      v96._object = (void *)0x8000000100149F90;
      String.append(_:)(v96);
      v181._uint64_t countAndFlagsBits = (uint64_t)v78;
      sub_100004700((uint64_t *)&unk_10017E5D0);
      sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
      BidirectionalCollection<>.joined(separator:)();
      goto LABEL_52;
    }
    uint64_t v39 = v38;
    if (v38)
    {
      uint64_t v85 = v37;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10003C944(v85, v39);
      *(void *)&v184 = 0;
      *((void *)&v184 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      *(void *)&v184 = 0x20656C646E7542;
      *((void *)&v184 + 1) = 0xE700000000000000;
      sub_1000036B0(&v187, v189);
      v86._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v86);
      swift_bridgeObjectRelease();
      v87._uint64_t countAndFlagsBits = 0xD000000000000024;
      v87._object = (void *)0x8000000100149F40;
      String.append(_:)(v87);
      uint64_t v88 = v184;
      sub_100012E3C();
      swift_allocError();
      *(_OWORD *)uint64_t v89 = v88;
      *(_OWORD *)(v89 + 16) = 0u;
      *(_OWORD *)(v89 + 32) = 0u;
      *(_OWORD *)(v89 + 48) = 0u;
      *(void *)(v89 + 64) = 0;
      uint64_t v90 = 9;
LABEL_54:
      *(unsigned char *)(v89 + 72) = v90;
      swift_willThrow();
LABEL_55:
      sub_10000478C((uint64_t)&v187);
      goto LABEL_56;
    }
    uint64_t v40 = v169;
    uint64_t v41 = v169[2];
    if (v41)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = (void **)(v40 + 5);
      while (1)
      {
        uint64_t v44 = (uint64_t)*(v42 - 1);
        uint64_t v43 = *v42;
        swift_bridgeObjectRetain();
        v45._uint64_t countAndFlagsBits = v44;
        v45._object = v43;
        char v46 = String.hasPrefix(_:)(v45);
        swift_bridgeObjectRelease();
        if (v46) {
          break;
        }
        v42 += 2;
        if (!--v41) {
          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v117 = v169;
      swift_bridgeObjectRelease();
      *(void *)&v184 = 0;
      *((void *)&v184 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(111);
      v118._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v118._object = (void *)0x8000000100149F70;
      String.append(_:)(v118);
      sub_1000036B0(&v187, v189);
      v119._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v119);
      swift_bridgeObjectRelease();
      v120._uint64_t countAndFlagsBits = 0xD00000000000004ELL;
      v120._object = (void *)0x800000010014A210;
      String.append(_:)(v120);
      v181._uint64_t countAndFlagsBits = (uint64_t)v117;
      sub_100004700((uint64_t *)&unk_10017E5D0);
      sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
      BidirectionalCollection<>.joined(separator:)();
LABEL_52:
      swift_bridgeObjectRelease();
      uint64_t v121 = sub_10002A270();
      uint64_t v122 = sub_1000EDF8C(v121);
      v124 = v123;
      swift_bridgeObjectRelease();
      v125._uint64_t countAndFlagsBits = v122;
      v125._object = v124;
      String.append(_:)(v125);
      swift_bridgeObjectRelease();
LABEL_53:
      uint64_t v126 = v184;
      sub_100012E3C();
      swift_allocError();
      *(_OWORD *)uint64_t v89 = v126;
      *(_OWORD *)(v89 + 16) = 0u;
      *(_OWORD *)(v89 + 32) = 0u;
      *(_OWORD *)(v89 + 48) = 0u;
      *(void *)(v89 + 64) = 0;
      uint64_t v90 = 19;
      goto LABEL_54;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v3 = v167;
  }
  uint64_t v47 = v3;
  v180 = 0;
  LODWORD(v184) = *(_DWORD *)sub_1000B9AF4();
  LODWORD(v181._countAndFlagsBits) = v16;
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) == 0)
  {
    unint64_t v62 = (uint64_t)v176;
    object = v173._object;
    uint64_t countAndFlagsBits = v173._countAndFlagsBits;
LABEL_26:
    uint64_t v65 = (void *)(v172 + 16);
    uint64_t v66 = *(void *)(v172 + 40);
    uint64_t v67 = *(void *)(v172 + 48);
    sub_1000036B0((void *)(v172 + 16), v66);
    sub_1001297F4(v66, v67);
    uint64_t v68 = v185;
    uint64_t v69 = v186;
    sub_1000036B0(&v184, v185);
    if ((*(uint64_t (**)(uint64_t, void *, char *, uint64_t, uint64_t))(v69 + 136))(countAndFlagsBits, object, &v180, v68, v69))
    {
      uint64_t v70 = v180;
      sub_10000478C((uint64_t)&v184);
      if (v70)
      {
        Swift::String v71 = *(void *)(v172 + 40);
        Swift::String v72 = *(void *)(v172 + 48);
        sub_1000036B0(v65, v71);
        sub_1001297F4(v71, v72);
        unint64_t v73 = v185;
        unint64_t v74 = v186;
        sub_1000036B0(&v184, v185);
        uint64_t v75 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v74 + 224))(countAndFlagsBits, object, v73, v74);
        if (!v47)
        {
          v128 = v75;
          sub_10000469C((uint64_t)&v187, (uint64_t)&v181);
          if (v128)
          {
            v129 = v182;
            uint64_t v130 = v183;
            sub_1000036B0(&v181, v182);
            uint64_t v131 = (*(uint64_t (**)(uint64_t, uint64_t))(v130 + 16))(v129, v130);
            uint64_t v133 = v132;
            LOBYTE(v130) = sub_1000F26AC(0, 1, v131, v132);
            sub_10003C944(v131, v133);
            sub_10000478C((uint64_t)&v181);
            sub_10000478C((uint64_t)&v184);
            if (v130)
            {
              static os_log_type_t.info.getter();
              sub_100004700((uint64_t *)&unk_10017D6E0);
              uint64_t v134 = swift_allocObject();
              uint64_t v177 = xmmword_100132F10;
              *(_OWORD *)(v134 + 16) = xmmword_100132F10;
              *(void *)(v134 + 56) = &type metadata for String;
              Swift::String v135 = sub_10002A1DC();
              *(void *)(v134 + 64) = v135;
              *(void *)(v134 + 32) = countAndFlagsBits;
              *(void *)(v134 + 40) = object;
              sub_10002A230();
              unint64_t v136 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();

              sub_10000478C((uint64_t)&v187);
              static os_log_type_t.info.getter();
              unint64_t v137 = swift_allocObject();
              *(_OWORD *)(v137 + 16) = v177;
              *(void *)(v137 + 56) = &type metadata for String;
              *(void *)(v137 + 64) = v135;
              *(void *)(v137 + 32) = 0xD000000000000026;
              *(void *)(v137 + 40) = 0x800000010014A090;
              uint64_t v18 = (void *)static OS_os_log.default.getter();
              goto LABEL_4;
            }
          }
          else
          {
            sub_10000478C((uint64_t)&v181);
            sub_10000478C((uint64_t)&v184);
          }
          v173._uint64_t countAndFlagsBits = sub_100004700((uint64_t *)&unk_10017D6E0);
          uint64_t v138 = swift_allocObject();
          v172 = xmmword_100132F10;
          *(_OWORD *)(v138 + 16) = xmmword_100132F10;
          *(void *)(v138 + 56) = &type metadata for String;
          uint64_t v139 = sub_10002A1DC();
          *(void *)(v138 + 64) = v139;
          *(void *)(v138 + 32) = countAndFlagsBits;
          *(void *)(v138 + 40) = object;
          uint64_t v140 = (void *)sub_10002A230();
          swift_bridgeObjectRetain();
          v173._object = v140;
          uint64_t v141 = (void *)static OS_os_log.default.getter();
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();
          swift_bridgeObjectRelease();

          uint64_t v142 = (uint64_t)v175;
          URL.init(fileURLWithPath:)();
          swift_bridgeObjectRelease();
          uint64_t v143 = v174;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v177 + 56))(v62, 1, 1, v174);
          sub_10009DB1C(v142, v62);
          sub_1000130EC(v62, (uint64_t *)&unk_10017FA60);
          v170(v142, v143);
          sub_10000478C((uint64_t)&v187);
          static os_log_type_t.info.getter();
          v144 = swift_allocObject();
          *(_OWORD *)(v144 + 16) = v172;
          *(void *)(v144 + 56) = &type metadata for String;
          *(void *)(v144 + 64) = v139;
          *(void *)(v144 + 32) = 0xD000000000000015;
          *(void *)(v144 + 40) = 0x800000010014A030;
LABEL_3:
          uint64_t v18 = (void *)static OS_os_log.default.getter();
LABEL_4:
          os_log(_:dso:log:_:_:)();
LABEL_10:
          swift_bridgeObjectRelease();

          return;
        }
        swift_bridgeObjectRelease();
        sub_10000478C((uint64_t)&v184);
        goto LABEL_55;
      }
    }
    else
    {
      sub_10000478C((uint64_t)&v184);
    }
    *(void *)&v184 = 0;
    *((void *)&v184 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    *(void *)&v184 = 0x5520656C646E7542;
    *((void *)&v184 + 1) = 0xEB00000000204C52;
    v76._uint64_t countAndFlagsBits = countAndFlagsBits;
    v76._object = object;
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    v77._uint64_t countAndFlagsBits = 0xD000000000000013;
    v77._object = (void *)0x8000000100149FE0;
    String.append(_:)(v77);
    goto LABEL_53;
  }
  unint64_t v48 = (void *)(v172 + 16);
  unint64_t v49 = *(void *)(v172 + 40);
  id v50 = *(void *)(v172 + 48);
  sub_1000036B0((void *)(v172 + 16), v49);
  sub_1001297F4(v49, v50);
  uint64_t v51 = v182;
  uint64_t v52 = v183;
  uint64_t v169 = sub_1000036B0(&v181, v182);
  uint64_t v53 = v189;
  uint64_t v54 = v190;
  sub_1000036B0(&v187, v189);
  (*(void (**)(uint64_t, uint64_t))(v54 + 64))(v53, v54);
  sub_100004700(&qword_10017E848);
  uint64_t inited = swift_initStackObject();
  v168 = xmmword_100132F10;
  *(_OWORD *)(inited + 16) = xmmword_100132F10;
  *(void *)(inited + 32) = NSURLIsSymbolicLinkKey;
  uint64_t v56 = NSURLIsSymbolicLinkKey;
  uint64_t v57 = sub_1000A0DCC(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey();
  swift_arrayDestroy();
  (*(void (**)(long long *__return_ptr, char *, void *, uint64_t, uint64_t))(v52 + 192))(&v184, v13, v57, v51, v52);
  if (v47)
  {
    v170((uint64_t)v13, v174);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000478C((uint64_t)&v181);
    sub_10000478C((uint64_t)&v187);
    static os_log_type_t.info.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v58 = swift_allocObject();
    uint64_t v59 = v58;
    unint64_t v60 = v168;
LABEL_57:
    *(_OWORD *)(v58 + 16) = v60;
    *(void *)(v58 + 56) = &type metadata for String;
    goto LABEL_58;
  }
  uint64_t v169 = v48;
  v170((uint64_t)v13, v174);
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)&v181);
  Swift::String v91 = v185;
  Swift::String v92 = v186;
  sub_1000036B0(&v184, v185);
  Swift::String v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 16))(v91, v92);
  object = v173._object;
  if ((v93 & 1) == 0)
  {
    uint64_t v47 = 0;
    uint64_t countAndFlagsBits = v173._countAndFlagsBits;
LABEL_40:
    sub_10000478C((uint64_t)&v184);
    unint64_t v62 = (uint64_t)v176;
    goto LABEL_26;
  }
  uint64_t v97 = v173._countAndFlagsBits;
  v181 = v173;
  uint64_t v178 = 3092014;
  v179 = 0xE300000000000000;
  sub_100029B24();
  long long v98 = StringProtocol.contains<A>(_:)();
  int v99 = v172;
  if ((v98 & 1) != 0 || (int v100 = *(void *)(v172 + 384), (v101 = *(void *)(v100 + 16)) == 0))
  {
LABEL_48:
    v181._uint64_t countAndFlagsBits = 0;
    v181._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(115);
    v107._uint64_t countAndFlagsBits = 0x5520656C646E7542;
    v107._object = (void *)0xEB00000000204C52;
    String.append(_:)(v107);
    v108._uint64_t countAndFlagsBits = v97;
    v108._object = object;
    String.append(_:)(v108);
    swift_bridgeObjectRelease();
    v109._uint64_t countAndFlagsBits = 0xD000000000000064;
    v109._object = (void *)0x800000010014A0C0;
    String.append(_:)(v109);
    uint64_t v178 = *(void *)(v99 + 384);
    swift_bridgeObjectRetain();
    sub_100004700((uint64_t *)&unk_10017E5D0);
    sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
    uint64_t v110 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v112 = v111;
    swift_bridgeObjectRelease();
    v113._uint64_t countAndFlagsBits = v110;
    v113._object = v112;
    String.append(_:)(v113);
LABEL_49:
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  swift_bridgeObjectRetain();
  uint64_t v102 = (void **)(v100 + 40);
  while (1)
  {
    unint64_t v104 = (uint64_t)*(v102 - 1);
    uint64_t v103 = *v102;
    swift_bridgeObjectRetain();
    v105._uint64_t countAndFlagsBits = v104;
    v105._object = v103;
    uint64_t v106 = String.hasPrefix(_:)(v105);
    swift_bridgeObjectRelease();
    if (v106) {
      break;
    }
    v102 += 2;
    if (!--v101)
    {
      swift_bridgeObjectRelease();
      int v99 = v172;
      goto LABEL_48;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v145 = *(void *)(v172 + 40);
  uint64_t v146 = *(void *)(v172 + 48);
  sub_1000036B0(v169, v145);
  sub_1001297F4(v145, v146);
  uint64_t v147 = v182;
  uint64_t v148 = v183;
  sub_1000036B0(&v181, v182);
  uint64_t v149 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v148 + 152))(v97, object, v147, v148);
  object = v150;
  if (!v150)
  {
    sub_10000478C((uint64_t)&v181);
    v181._uint64_t countAndFlagsBits = 0;
    v181._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v181._uint64_t countAndFlagsBits = 0xD000000000000026;
    v181._object = (void *)0x800000010014A130;
    String.append(_:)(v173);
    goto LABEL_49;
  }
  uint64_t countAndFlagsBits = v149;
  uint64_t v47 = 0;
  sub_10000478C((uint64_t)&v181);
  unint64_t v151 = *(void *)(v172 + 368);
  unint64_t v152 = *(void *)(v151 + 16);
  if (v152)
  {
    swift_bridgeObjectRetain();
    uint64_t v153 = (void **)(v151 + 40);
    while (1)
    {
      v155 = (uint64_t)*(v153 - 1);
      uint64_t v154 = *v153;
      swift_bridgeObjectRetain();
      v156._uint64_t countAndFlagsBits = v155;
      v156._object = v154;
      uint64_t v157 = String.hasPrefix(_:)(v156);
      swift_bridgeObjectRelease();
      if (v157) {
        break;
      }
      v153 += 2;
      if (!--v152)
      {
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
    }
    swift_bridgeObjectRelease();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    id v162 = swift_allocObject();
    *(_OWORD *)(v162 + 16) = xmmword_100132F30;
    *(void *)(v162 + 56) = &type metadata for String;
    v163 = sub_10002A1DC();
    v164 = v173._object;
    *(void *)(v162 + 32) = v173._countAndFlagsBits;
    *(void *)(v162 + 40) = v164;
    *(void *)(v162 + 96) = &type metadata for String;
    *(void *)(v162 + 104) = v163;
    *(void *)(v162 + 64) = v163;
    *(void *)(v162 + 72) = countAndFlagsBits;
    *(void *)(v162 + 80) = object;
    sub_10002A230();
    swift_bridgeObjectRetain();
    uint64_t v165 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    goto LABEL_40;
  }
LABEL_70:
  v181._uint64_t countAndFlagsBits = 0;
  v181._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(96);
  v158._uint64_t countAndFlagsBits = 0x5520656C646E7542;
  v158._object = (void *)0xEB00000000204C52;
  String.append(_:)(v158);
  String.append(_:)(v173);
  swift_bridgeObjectRelease();
  v159._uint64_t countAndFlagsBits = 0xD000000000000011;
  v159._object = (void *)0x800000010014A160;
  String.append(_:)(v159);
  v160._uint64_t countAndFlagsBits = countAndFlagsBits;
  v160._object = object;
  String.append(_:)(v160);
  swift_bridgeObjectRelease();
  v161._uint64_t countAndFlagsBits = 0xD000000000000040;
  v161._object = (void *)0x800000010014A180;
  String.append(_:)(v161);
LABEL_50:
  uint64_t v114 = v181._countAndFlagsBits;
  v115 = v181._object;
  sub_100012E3C();
  swift_allocError();
  *(void *)long long v116 = v114;
  *(void *)(v116 + 8) = v115;
  *(_OWORD *)(v116 + 16) = 0u;
  *(_OWORD *)(v116 + 32) = 0u;
  *(_OWORD *)(v116 + 48) = 0u;
  *(void *)(v116 + 64) = 0;
  *(unsigned char *)(v116 + 72) = 19;
  swift_willThrow();
  sub_10000478C((uint64_t)&v184);
  sub_10000478C((uint64_t)&v187);
  static os_log_type_t.info.getter();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = v168;
  *(void *)(v59 + 56) = &type metadata for String;
LABEL_58:
  *(void *)(v59 + 64) = sub_10002A1DC();
  *(void *)(v59 + 32) = 0x726F727245;
  *(void *)(v59 + 40) = 0xE500000000000000;
  sub_10002A230();
  uint64_t v127 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
}

uint64_t sub_10009DB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v74 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v85 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  int v16 = (char *)&v74 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v74 - v17;
  sub_10001BA68(a2, (uint64_t)v9, (uint64_t *)&unk_10017FA60);
  Swift::String v19 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v86 = a1;
  uint64_t v89 = v19;
  uint64_t v90 = v11 + 16;
  v19(v16, a1, v10);
  uint64_t v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v88 = v11 + 48;
  if (v87(v9, 1, v10) == 1)
  {
    uint64_t v84 = *(void (**)(void))(v11 + 32);
    ((void (*)(char *, char *, uint64_t))v84)(v18, v16, v10);
    sub_1000130EC((uint64_t)v9, (uint64_t *)&unk_10017FA60);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    uint64_t v84 = *(void (**)(void))(v11 + 32);
    ((void (*)(char *, char *, uint64_t))v84)(v18, v9, v10);
  }
  uint64_t v103 = _swiftEmptyArrayStorage;
  uint64_t v20 = URL.path.getter();
  unint64_t v21 = v91;
  unint64_t v22 = v83;
  sub_10009E3C0(v20, v23);
  if (!v22)
  {
    uint64_t v83 = v7;
    uint64_t v80 = v18;
    uint64_t v81 = v11;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  uint64_t v102 = v22;
  swift_errorRetain();
  sub_100004700(&qword_10017EB50);
  if (swift_dynamicCast())
  {
    uint64_t v83 = v7;
    uint64_t v25 = v92;
    uint64_t v24 = v93;
    uint64_t v27 = v98;
    uint64_t v26 = v99;
    uint64_t v28 = v100;
    if (v101 == 19)
    {
      uint64_t v75 = v94;
      uint64_t v76 = v95;
      unint64_t v77 = v96;
      uint64_t v82 = v97;
      swift_errorRelease();
      BOOL v29 = v103;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v79 = v26;
      unint64_t v78 = v27;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        BOOL v29 = sub_1000A0BB4(0, v29[2] + 1, 1, v29);
      }
      unint64_t v32 = v29[2];
      unint64_t v31 = v29[3];
      uint64_t v33 = v82;
      if (v32 >= v31 >> 1)
      {
        unint64_t v73 = sub_1000A0BB4((void *)(v31 > 1), v32 + 1, 1, v29);
        uint64_t v33 = v82;
        BOOL v29 = v73;
      }
      uint64_t v80 = v18;
      uint64_t v81 = v11;
      v29[2] = v32 + 1;
      uint64_t v34 = &v29[10 * v32];
      v34[4] = v25;
      v34[5] = v24;
      uint64_t v35 = v76;
      v34[6] = v75;
      v34[7] = v35;
      v34[8] = v77;
      v34[9] = v33;
      uint64_t v36 = v79;
      v34[10] = v78;
      v34[11] = v36;
      v34[12] = v28;
      *((unsigned char *)v34 + 104) = 19;
      uint64_t v103 = v29;
      swift_errorRelease();
      unint64_t v21 = v91;
LABEL_13:
      uint64_t v38 = v21[5];
      uint64_t v37 = v21[6];
      sub_1000036B0(v21 + 2, v38);
      sub_1001297F4(v38, v37);
      unint64_t v39 = v96;
      uint64_t v82 = v95;
      sub_1000036B0(&v92, v95);
      sub_100004700(&qword_10017E848);
      uint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_1001359B0;
      *(void *)(v40 + 32) = NSURLPathKey;
      *(void *)(v40 + 40) = NSURLIsDirectoryKey;
      *(void *)(v40 + 48) = NSURLIsSymbolicLinkKey;
      uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, unint64_t))(v39 + 24);
      uint64_t v42 = NSURLPathKey;
      uint64_t v43 = NSURLIsDirectoryKey;
      uint64_t v44 = NSURLIsSymbolicLinkKey;
      unint64_t v45 = v80;
      uint64_t v46 = v41(v80, v40, 1, v82, v39);
      swift_bridgeObjectRelease();
      sub_10000478C((uint64_t)&v92);
      uint64_t v47 = *(void *)(v46 + 16);
      uint64_t v48 = v81;
      if (v47)
      {
        unint64_t v49 = v46 + ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80));
        uint64_t v82 = *(void *)(v81 + 72);
        id v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56);
        uint64_t v51 = v46;
        uint64_t v52 = (void (**)(uint64_t, uint64_t))(v81 + 8);
        uint64_t v79 = v51;
        swift_bridgeObjectRetain();
        unint64_t v78 = (v48 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        while (1)
        {
          uint64_t v53 = v83;
          v89(v83, v49, v10);
          uint64_t v54 = *v50;
          (*v50)(v53, 0, 1, v10);
          if (v87(v53, 1, v10) == 1) {
            break;
          }
          uint64_t v55 = (uint64_t)v85;
          v84();
          sub_10009E850(v55, v91, v86, (uint64_t *)&v103);
          (*v52)(v55, v10);
          v49 += v82;
          if (!--v47)
          {
            unint64_t v45 = v80;
            uint64_t v48 = v81;
            goto LABEL_21;
          }
        }
        unint64_t v45 = v80;
        uint64_t v48 = v81;
      }
      else
      {
        uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56);
        swift_bridgeObjectRetain();
LABEL_21:
        v54(v83, 1, 1, v10);
      }
      swift_bridgeObjectRelease_n();
      uint64_t v56 = v103;
      swift_bridgeObjectRetain();
      BOOL v57 = sub_1000EF0B4();
      swift_bridgeObjectRelease();
      if (!v57)
      {
        if (v56[2] == 1)
        {
          uint64_t v59 = v56[4];
          uint64_t v58 = (void *)v56[5];
          uint64_t v60 = v56[7];
          uint64_t v90 = v56[6];
          Swift::String v91 = v58;
          uint64_t v80 = v45;
          unint64_t v61 = v56[8];
          uint64_t v62 = v56[9];
          uint64_t v63 = (void (*)(char *, unint64_t, uint64_t))v56[10];
          uint64_t v64 = v56[12];
          uint64_t v88 = v56[11];
          uint64_t v89 = v63;
          char v65 = *((unsigned char *)v56 + 104);
          sub_100012E3C();
          swift_allocError();
          uint64_t v66 = v90;
          uint64_t v67 = v91;
          *(void *)uint64_t v68 = v59;
          *(void *)(v68 + 8) = v67;
          *(void *)(v68 + 16) = v66;
          *(void *)(v68 + 24) = v60;
          *(void *)(v68 + 32) = v61;
          *(void *)(v68 + 40) = v62;
          uint64_t v70 = v88;
          uint64_t v69 = (uint64_t)v89;
          *(void *)(v68 + 48) = v89;
          *(void *)(v68 + 56) = v70;
          *(void *)(v68 + 64) = v64;
          *(unsigned char *)(v68 + 72) = v65;
          sub_10005C020(v59, (uint64_t)v67, v66, v60, v61, v62, v69, v70, v64, v65);
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v80, v10);
          return swift_bridgeObjectRelease();
        }
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v71 = v56;
        *(_OWORD *)(v71 + 8) = 0u;
        *(_OWORD *)(v71 + 24) = 0u;
        *(_OWORD *)(v71 + 40) = 0u;
        *(_OWORD *)(v71 + 56) = 0u;
        *(unsigned char *)(v71 + 72) = 0;
        swift_bridgeObjectRetain();
        swift_willThrow();
      }
      (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v10);
      return swift_bridgeObjectRelease();
    }
    sub_10003E9C8(v92, v93, v94, v95, v96, v97, v98, v99, v100, v101);
  }
  swift_errorRelease();
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10009E3C0(uint64_t a1, void *a2)
{
  uint64_t v6 = v2 + 2;
  uint64_t v8 = v2[5];
  uint64_t v7 = v2[6];
  sub_1000036B0(v6, v8);
  sub_1001297F4(v8, v7);
  uint64_t v9 = *((void *)&v31 + 1);
  uint64_t v10 = v32;
  sub_1000036B0(&v30, *((uint64_t *)&v31 + 1));
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v10 + 72))(a1, a2, v9, v10);
  uint64_t result = sub_10000478C((uint64_t)&v30);
  if (!v3)
  {
    if (!*(void *)(v11 + 16)) {
      goto LABEL_11;
    }
    uint64_t v13 = NSFileOwnerAccountID;
    unint64_t v14 = sub_100022688((uint64_t)v13);
    if (v15)
    {
      sub_1000047DC(*(void *)(v11 + 56) + 32 * v14, (uint64_t)&v30);
    }
    else
    {
      long long v30 = 0u;
      long long v31 = 0u;
    }

    if (!*((void *)&v31 + 1)) {
      goto LABEL_12;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_20;
    }
    if (*(void *)(v11 + 16))
    {
      int v16 = NSFileGroupOwnerAccountID;
      unint64_t v17 = sub_100022688((uint64_t)v16);
      if (v18)
      {
        sub_1000047DC(*(void *)(v11 + 56) + 32 * v17, (uint64_t)&v30);
      }
      else
      {
        long long v30 = 0u;
        long long v31 = 0u;
      }

      if (*((void *)&v31 + 1))
      {
        if (swift_dynamicCast())
        {
          if (*(void *)(v11 + 16))
          {
            Swift::String v19 = NSFilePosixPermissions;
            unint64_t v20 = sub_100022688((uint64_t)v19);
            if (v21)
            {
              sub_1000047DC(*(void *)(v11 + 56) + 32 * v20, (uint64_t)&v30);
            }
            else
            {
              long long v30 = 0u;
              long long v31 = 0u;
            }
          }
          else
          {
            long long v30 = 0u;
            long long v31 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v31 + 1))
          {
            if (swift_dynamicCast())
            {
              if (!v29)
              {
                S_IWOTH.getter();
                return S_IWGRP.getter();
              }
              *(void *)&long long v30 = 0;
              *((void *)&v30 + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(47);
              swift_bridgeObjectRelease();
              *(void *)&long long v30 = 0xD000000000000013;
              *((void *)&v30 + 1) = 0x800000010014A320;
              v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v25);
              swift_bridgeObjectRelease();
              v26._uint64_t countAndFlagsBits = 58;
              v26._object = (void *)0xE100000000000000;
              String.append(_:)(v26);
              v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v27);
              swift_bridgeObjectRelease();
              v28._uint64_t countAndFlagsBits = 0xD000000000000015;
              v28._object = (void *)0x800000010014A340;
              String.append(_:)(v28);
              goto LABEL_22;
            }
LABEL_21:
            *(void *)&long long v30 = 0;
            *((void *)&v30 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(40);
            swift_bridgeObjectRelease();
            *(void *)&long long v30 = 0xD000000000000026;
            *((void *)&v30 + 1) = 0x800000010014A2F0;
LABEL_22:
            v22._uint64_t countAndFlagsBits = a1;
            v22._object = a2;
            String.append(_:)(v22);
            long long v23 = v30;
            sub_100012E3C();
            swift_allocError();
            *(_OWORD *)uint64_t v24 = v23;
            *(_OWORD *)(v24 + 16) = 0u;
            *(_OWORD *)(v24 + 32) = 0u;
            *(_OWORD *)(v24 + 48) = 0u;
            *(void *)(v24 + 64) = 0;
            *(unsigned char *)(v24 + 72) = 19;
            return swift_willThrow();
          }
LABEL_13:
          sub_1000130EC((uint64_t)&v30, &qword_10017C018);
          goto LABEL_21;
        }
LABEL_20:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    else
    {
LABEL_11:
      long long v30 = 0u;
      long long v31 = 0u;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_10009E850(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v69 = a4;
  uint64_t v71 = a3;
  uint64_t v6 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v6 - 8);
  unint64_t v70 = (unint64_t)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  sub_1000036B0(a2 + 2, v8);
  sub_1001297F4(v8, v9);
  uint64_t v10 = v76;
  unint64_t v11 = v77;
  sub_1000036B0(&v73, v76);
  sub_100004700(&qword_10017E848);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100132F30;
  *(void *)(inited + 32) = NSURLIsDirectoryKey;
  *(void *)(inited + 40) = NSURLIsSymbolicLinkKey;
  uint64_t v13 = NSURLIsDirectoryKey;
  unint64_t v14 = NSURLIsSymbolicLinkKey;
  char v15 = sub_1000A0DCC(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey();
  swift_arrayDestroy();
  uint64_t v16 = v72;
  (*(void (**)(void *__return_ptr, uint64_t, void *, uint64_t, unint64_t))(v11 + 192))(v83, a1, v15, v10, v11);
  swift_bridgeObjectRelease();
  uint64_t result = sub_10000478C((uint64_t)&v73);
  if (!v16)
  {
    uint64_t v18 = v70;
    uint64_t v19 = v71;
    uint64_t v20 = v84;
    uint64_t v21 = v85;
    sub_1000036B0(v83, v84);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21) & 1) == 0)
    {
      uint64_t v22 = v84;
      uint64_t v23 = v85;
      sub_1000036B0(v83, v84);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23))
      {
        URL.absoluteURL.getter();
        uint64_t v30 = type metadata accessor for URL();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v18, 0, 1, v30);
        sub_10009DB1C(v19, v18);
        sub_1000130EC(v18, (uint64_t *)&unk_10017FA60);
        return sub_10000478C((uint64_t)v83);
      }
      uint64_t v24 = URL.path.getter();
      sub_10009E3C0(v24, v25);
LABEL_9:
      swift_bridgeObjectRelease();
      return sub_10000478C((uint64_t)v83);
    }
    uint64_t v26 = a2[5];
    uint64_t v27 = a2[6];
    sub_1000036B0(a2 + 2, v26);
    sub_1001297F4(v26, v27);
    unint64_t v28 = v77;
    sub_1000036B0(&v73, v76);
    uint64_t v29 = URL.path.getter();
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(v28 + 152))(v29);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    if (v33)
    {
      sub_10000478C((uint64_t)&v73);
      v34._uint64_t countAndFlagsBits = URL.path.getter();
      Swift::Bool v35 = String.hasPrefix(_:)(v34);
      swift_bridgeObjectRelease();
      if (v35) {
        goto LABEL_9;
      }
      uint64_t v73 = 0;
      uint64_t v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(103);
      v36._uint64_t countAndFlagsBits = 0xD000000000000034;
      v36._object = (void *)0x800000010014A500;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = URL.path.getter();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v38._uint64_t countAndFlagsBits = 0x2073746E696F7020;
      v38._object = (void *)0xEB00000000206F74;
      String.append(_:)(v38);
      v39._uint64_t countAndFlagsBits = v31;
      v39._object = v33;
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40._object = (void *)0x800000010014A540;
      v40._uint64_t countAndFlagsBits = 0xD000000000000022;
      String.append(_:)(v40);
    }
    else
    {
      sub_10000478C((uint64_t)&v73);
      uint64_t v73 = 0;
      uint64_t v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      uint64_t v73 = 0xD000000000000026;
      uint64_t v74 = 0x800000010014A130;
    }
    v41._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    uint64_t v42 = v73;
    uint64_t v43 = v74;
    sub_100012E3C();
    uint64_t v44 = swift_allocError();
    *(void *)uint64_t v45 = v42;
    *(void *)(v45 + 8) = v43;
    *(_OWORD *)(v45 + 16) = 0u;
    *(_OWORD *)(v45 + 32) = 0u;
    *(_OWORD *)(v45 + 48) = 0u;
    *(void *)(v45 + 64) = 0;
    *(unsigned char *)(v45 + 72) = 19;
    swift_willThrow();
    uint64_t v86 = v44;
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if (swift_dynamicCast())
    {
      uint64_t v47 = v73;
      uint64_t v46 = v74;
      uint64_t v49 = v75;
      uint64_t v48 = v76;
      uint64_t v50 = v79;
      uint64_t v72 = v80;
      uint64_t v51 = v81;
      if (!v82)
      {
        uint64_t v71 = v78;
        unint64_t v70 = v77;
        swift_errorRelease();
        uint64_t v68 = v50;
        uint64_t v62 = v69;
        swift_bridgeObjectRetain();
        uint64_t v63 = sub_1000EEF88();
        sub_10003E9C8(v47, v46, v49, v48, v70, v71, v68, v72, v51, 0);
        swift_bridgeObjectRelease();
        uint64_t *v62 = v63;
        swift_bridgeObjectRelease();
LABEL_21:
        swift_errorRelease();
        return sub_10000478C((uint64_t)v83);
      }
      if (v82 == 19)
      {
        unint64_t v70 = v77;
        uint64_t v71 = v78;
        swift_errorRelease();
        uint64_t v52 = v69;
        uint64_t v53 = (void *)*v69;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v52 = (uint64_t)v53;
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v55 = v52;
        }
        else
        {
          uint64_t v64 = sub_1000A0BB4(0, v53[2] + 1, 1, v53);
          uint64_t v55 = v69;
          uint64_t v53 = v64;
          *uint64_t v69 = (uint64_t)v64;
        }
        unint64_t v57 = v53[2];
        unint64_t v56 = v53[3];
        uint64_t v58 = (uint64_t *)(v57 + 1);
        if (v57 >= v56 >> 1)
        {
          uint64_t v69 = (uint64_t *)(v57 + 1);
          uint64_t v68 = v50;
          char v65 = v55;
          uint64_t v66 = sub_1000A0BB4((void *)(v56 > 1), v57 + 1, 1, v53);
          uint64_t v58 = v69;
          uint64_t v53 = v66;
          *char v65 = (uint64_t)v66;
          uint64_t v50 = v68;
        }
        v53[2] = v58;
        uint64_t v59 = &v53[10 * v57];
        v59[4] = v47;
        v59[5] = v46;
        v59[6] = v49;
        v59[7] = v48;
        uint64_t v60 = v71;
        v59[8] = v70;
        v59[9] = v60;
        uint64_t v61 = v72;
        v59[10] = v50;
        v59[11] = v61;
        v59[12] = v51;
        *((unsigned char *)v59 + 104) = 19;
        goto LABEL_21;
      }
      sub_10003E9C8(v73, v74, v75, v76, v77, v78, v79, v72, v81, v82);
    }
    swift_errorRelease();
    swift_willThrow();
    return sub_10000478C((uint64_t)v83);
  }
  return result;
}

uint64_t sub_10009EFE4(uint64_t a1)
{
  uint64_t v3 = swift_allocObject();
  int v4 = *(_DWORD *)(v1 + 640);
  LODWORD(v71[0]) = *(_DWORD *)sub_1000B9580();
  LODWORD(v69) = v4;
  sub_100013438();
  char v5 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v6 = *(void ***)a1;
  uint64_t v7 = *(uint64_t (**)(void))(**(void **)a1 + 168);
  uint64_t v8 = v7();
  uint64_t v9 = sub_10002FFC8();
  if (v5)
  {
    v71[0] = *v9;
    *(void *)&long long v69 = v8;
    sub_10003F664();
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) != 0
      || (uint64_t v10 = v7(),
          v71[0] = *sub_1000301A8(),
          *(void *)&long long v69 = v10,
          (dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) != 0))
    {
      *(void *)(v3 + 16) = 0xD000000000000018;
      *(void *)(v3 + 24) = 0x800000010014A480;
      sub_10009FAF4(a1, v3);
      swift_release();
      return 0;
    }
    else
    {
      uint64_t v31 = *sub_10002FE38();
      uint64_t v32 = (void (*)(void *, void))((uint64_t (*)(void *))(*v6)[23])(v71);
      *(void *)&long long v69 = v31;
      uint64_t v75 = *v33;
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_10003F6BC();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        uint64_t v75 = v31;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
      v32(v71, 0);
      *(void *)(v3 + 16) = 0xD000000000000022;
      *(void *)(v3 + 24) = 0x800000010014A4A0;
      sub_10009FAF4(a1, v3);
      swift_release();
      return 1;
    }
  }
  v71[0] = *v9;
  *(void *)&long long v69 = v8;
  sub_10003F664();
  uint64_t v68 = v3;
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) == 0)
  {
    uint64_t v12 = v7();
    v71[0] = *sub_1000301A8();
    *(void *)&long long v69 = v12;
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) == 0)
    {
      LODWORD(v71[0]) = *(_DWORD *)sub_1000B9860();
      LODWORD(v69) = v4;
      if (dispatch thunk of SetAlgebra.isSuperset(of:)())
      {
        Swift::String v34 = *(uint64_t (**)(uint64_t))(*v6[3] + 208);
        uint64_t v35 = swift_retain();
        char v36 = v34(v35);
        swift_release();
        if (v36)
        {
          uint64_t v37 = *sub_1000300DC();
          Swift::String v38 = (void (*)(void *, void))((uint64_t (*)(void *))(*v6)[23])(v71);
          *(void *)&long long v69 = v37;
          uint64_t v75 = *v39;
          dispatch thunk of SetAlgebra.intersection(_:)();
          sub_10003F6BC();
          if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
          {
            uint64_t v75 = v37;
            dispatch thunk of SetAlgebra.formUnion(_:)();
          }
          v38(v71, 0);
          unint64_t v40 = 0xD000000000000014;
          Swift::String v41 = "Apple prefix trusted";
LABEL_31:
          *(void *)(v3 + 16) = v40;
          *(void *)(v3 + 24) = (unint64_t)(v41 - 32) | 0x8000000000000000;
LABEL_46:
          uint64_t v24 = (uint64_t *)a1;
          uint64_t v64 = *(void *)a1;
          uint64_t v65 = *sub_10002FE38();
          uint64_t v66 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v64 + 184))(v71);
          *(void *)&long long v69 = v65;
          uint64_t v75 = *v67;
          dispatch thunk of SetAlgebra.intersection(_:)();
          sub_10003F6BC();
          if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
          {
            uint64_t v75 = v65;
            dispatch thunk of SetAlgebra.formUnion(_:)();
          }
          v66(v71, 0);
          uint64_t v11 = 1;
          goto LABEL_14;
        }
      }
      sub_10003FDC8((uint64_t)(v6[3] + 3), (uint64_t)v71);
      if (v74 == 1)
      {
        swift_release();
        uint64_t v42 = *(uint64_t (**)(uint64_t))(*v6[3] + 208);
        uint64_t v43 = swift_retain();
        char v44 = v42(v43);
        swift_release();
        if ((v44 & 1) == 0)
        {
          unint64_t v13 = 0xD00000000000001ELL;
          unint64_t v14 = "Third-party kext in collection";
          goto LABEL_8;
        }
        uint64_t v45 = *sub_1000300DC();
        uint64_t v46 = (void (*)(void *, void))((uint64_t (*)(void *))(*v6)[23])(v71);
        *(void *)&long long v69 = v45;
        uint64_t v75 = *v47;
        dispatch thunk of SetAlgebra.intersection(_:)();
        sub_10003F6BC();
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        {
          uint64_t v75 = v45;
          dispatch thunk of SetAlgebra.formUnion(_:)();
        }
        v46(v71, 0);
        unint64_t v40 = 0xD000000000000020;
        Swift::String v41 = "Trusted Apple kext in collection";
        goto LABEL_31;
      }
      sub_10003FE80((uint64_t)v71);
      uint64_t v48 = *(void *)a1;
      sub_10001BA68(*(void *)a1 + 32, (uint64_t)&v69, &qword_10017C010);
      if (!v70)
      {
        unint64_t v13 = 0xD000000000000012;
        sub_1000130EC((uint64_t)&v69, &qword_10017C010);
        unint64_t v14 = "Bad code signature";
        goto LABEL_8;
      }
      sub_10000372C(&v69, (uint64_t)v71);
      uint64_t v49 = v72;
      uint64_t v50 = v73;
      sub_1000036B0(v71, v72);
      uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 24))(v49, v50);
      if (v52)
      {
        uint64_t v53 = v52;
        if (v52 != (void *)1)
        {
          uint64_t v62 = v51;
          *(void *)&long long v69 = 0;
          *((void *)&v69 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(17);
          swift_bridgeObjectRelease();
          *(void *)&long long v69 = 0x204449206D616554;
          *((void *)&v69 + 1) = 0xEF203A64696C6176;
          v63._uint64_t countAndFlagsBits = v62;
          v63._object = v53;
          String.append(_:)(v63);
          sub_100018888(v62, (unint64_t)v53);
          unint64_t v61 = *((void *)&v69 + 1);
          unint64_t v57 = v69;
          goto LABEL_45;
        }
        uint64_t v54 = *(uint64_t (**)(void))(*(void *)v48 + 168);
        uint64_t v55 = ((uint64_t (*)(uint64_t))v54)(v51);
        *(void *)&long long v69 = *sub_100030024();
        uint64_t v76 = v55;
        if ((dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) == 0)
        {
          uint64_t v56 = v54();
          *(void *)&long long v69 = *sub_100030080();
          uint64_t v76 = v56;
          if ((dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) == 0)
          {
            *(void *)(v3 + 16) = 0xD000000000000012;
            *(void *)(v3 + 24) = 0x800000010014A3B0;
            sub_10000478C((uint64_t)v71);
            unint64_t v13 = *(void *)(v3 + 16);
            unint64_t v15 = *(void *)(v3 + 24);
            goto LABEL_9;
          }
        }
        unint64_t v57 = 0xD000000000000016;
        uint64_t v58 = "Exception list trusted";
      }
      else
      {
        uint64_t v59 = *sub_1000300DC();
        uint64_t v60 = (void (*)(long long *, void))(*(uint64_t (**)(long long *))(*(void *)v48 + 184))(&v69);
        uint64_t v76 = v59;
        dispatch thunk of SetAlgebra.intersection(_:)();
        sub_10003F6BC();
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
          dispatch thunk of SetAlgebra.formUnion(_:)();
        }
        v60(&v69, 0);
        unint64_t v57 = 0xD000000000000017;
        uint64_t v58 = "Platform binary trusted";
      }
      unint64_t v61 = (unint64_t)(v58 - 32) | 0x8000000000000000;
LABEL_45:
      *(void *)(v3 + 16) = v57;
      *(void *)(v3 + 24) = v61;
      sub_10000478C((uint64_t)v71);
      goto LABEL_46;
    }
  }
  unint64_t v13 = 0xD000000000000018;
  unint64_t v14 = "Rejected by exclude list";
LABEL_8:
  unint64_t v15 = (unint64_t)(v14 - 32) | 0x8000000000000000;
  *(void *)(v3 + 16) = v13;
  *(void *)(v3 + 24) = v15;
LABEL_9:
  uint64_t v16 = *(uint64_t (**)(void *))(**(void **)a1 + 256);
  swift_bridgeObjectRetain();
  unint64_t v17 = (void (*)(void *, void))v16(v71);
  uint64_t v19 = v18;
  uint64_t v20 = *v18;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v19 = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v20 = sub_1000A0BB4(0, v20[2] + 1, 1, v20);
    void *v19 = v20;
  }
  unint64_t v23 = v20[2];
  unint64_t v22 = v20[3];
  uint64_t v24 = (uint64_t *)a1;
  if (v23 >= v22 >> 1)
  {
    uint64_t v20 = sub_1000A0BB4((void *)(v22 > 1), v23 + 1, 1, v20);
    void *v19 = v20;
  }
  v20[2] = v23 + 1;
  Swift::String v25 = &v20[10 * v23];
  v25[4] = v13;
  v25[5] = v15;
  *((_OWORD *)v25 + 3) = 0u;
  *((_OWORD *)v25 + 4) = 0u;
  *((_OWORD *)v25 + 5) = 0u;
  v25[12] = 0;
  *((unsigned char *)v25 + 104) = 31;
  v17(v71, 0);
  uint64_t v11 = 0;
LABEL_14:
  uint64_t v26 = *v24;
  swift_retain();
  uint64_t v27 = *sub_10002FE94();
  unint64_t v28 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v26 + 184))(v71);
  *(void *)&long long v69 = v27;
  uint64_t v75 = *v29;
  dispatch thunk of SetAlgebra.intersection(_:)();
  sub_10003F6BC();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v75 = v27;
    dispatch thunk of SetAlgebra.formUnion(_:)();
  }
  v28(v71, 0);
  swift_release();
  sub_10009FAF4((uint64_t)v24, v68);
  swift_release();
  return v11;
}

uint64_t sub_10009FAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v44 - 8);
  uint64_t v5 = __chkstk_darwin(v44);
  uint64_t v43 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v35 - v7;
  uint64_t v9 = type metadata accessor for OSSignposter();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)a1 + 24) + 144);
  uint64_t v14 = swift_retain();
  uint64_t v15 = v9;
  uint64_t v41 = v13(v14);
  unint64_t v17 = v16;
  swift_release();
  uint64_t v18 = sub_1000F01A8();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v18, v9);
  uint64_t v19 = sub_1000A2288();
  uint64_t v20 = *v19;
  char v21 = *((unsigned char *)v19 + 16);
  swift_retain_n();
  swift_bridgeObjectRetain();
  static OSSignpostID.exclusive.getter();
  unint64_t v22 = OSSignposter.logHandle.getter();
  int v42 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    swift_release_n();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v44);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v15);
  }
  os_log_t v37 = v22;
  uint64_t v38 = v10;
  Swift::String v39 = v12;
  uint64_t v40 = v15;
  if (v21)
  {
    if ((unint64_t)v20 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v20 >> 11 == 27)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      if (v20 >> 16 <= 0x10)
      {
        Swift::String v25 = &v48;
        unint64_t v23 = v8;
        uint64_t v24 = v4;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  if (!v20)
  {
LABEL_15:
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_release_n();
    __break(1u);
    return result;
  }
  unint64_t v23 = v8;
  uint64_t v24 = v4;
  Swift::String v25 = v20;
LABEL_10:
  char v36 = v23;
  uint64_t v27 = v43;
  uint64_t v28 = v44;
  (*(void (**)(char *))(v24 + 16))(v43);
  uint64_t v29 = swift_slowAlloc();
  uint64_t v47 = swift_slowAlloc();
  *(_DWORD *)uint64_t v29 = 136315394;
  swift_bridgeObjectRetain();
  uint64_t v46 = sub_100003F90(v41, v17, &v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v29 + 12) = 2080;
  swift_beginAccess();
  uint64_t v31 = *(void *)(a2 + 16);
  unint64_t v30 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  uint64_t v45 = sub_100003F90(v31, v30, &v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  os_signpost_id_t v32 = OSSignpostID.rawValue.getter();
  os_log_t v33 = v37;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, (os_signpost_type_t)v42, v32, v25, "Authenticated: %s with result: %s", (uint8_t *)v29, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  Swift::String v34 = *(void (**)(char *, uint64_t))(v24 + 8);
  v34(v36, v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  return ((uint64_t (*)(char *, uint64_t))v34)(v27, v28);
}

uint64_t sub_10009FF88(uint64_t *a1)
{
  LODWORD(v9[0]) = *(_DWORD *)sub_1000B9694();
  sub_100013438();
  char v2 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v3 = *a1;
  if (v2)
  {
    sub_10002FF10();
    uint64_t v4 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v3 + 184))(v9);
    sub_10003F664();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_10003F6BC();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
    v4(v9, 0);
  }
  else
  {
    (*(void (**)(void *__return_ptr))(*(void *)v3 + 192))(v9);
    uint64_t v5 = v9[3];
    sub_1000130EC((uint64_t)v9, &qword_10017C910);
    if (!v5)
    {
      sub_1000A01E4(a1);
      return 0;
    }
    uint64_t v6 = *a1;
    sub_10002FF10();
    uint64_t v7 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v6 + 184))(v9);
    sub_10003F664();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_10003F6BC();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
    v7(v9, 0);
    sub_1000A01E4(a1);
  }
  return 1;
}

uint64_t sub_1000A01E4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_retain();
  sub_10002FF6C();
  char v2 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 184))(v4);
  sub_10003F664();
  dispatch thunk of SetAlgebra.intersection(_:)();
  sub_10003F6BC();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    dispatch thunk of SetAlgebra.formUnion(_:)();
  }
  v2(v4, 0);
  return swift_release();
}

BOOL sub_1000A02F8(void *a1)
{
  sub_100004700(&qword_10017CC08);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100136120;
  uint64_t v65 = sub_10002FFC8();
  *(void *)(v3 + 32) = *v65;
  uint64_t v64 = sub_100030024();
  *(void *)(v3 + 40) = *v64;
  Swift::String v63 = sub_100030080();
  *(void *)(v3 + 48) = *v63;
  uint64_t v60 = sub_1000301A8();
  *(void *)(v3 + 56) = *v60;
  uint64_t v74 = v3;
  sub_10003F664();
  sub_100004700(&qword_10017E828);
  sub_10001348C((unint64_t *)&qword_10017E830, &qword_10017E828);
  uint64_t v4 = dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v5 = v71[0];
  uint64_t v6 = (void **)*a1;
  uint64_t v73 = ((uint64_t (*)(uint64_t))(*v6)[21])(v4);
  uint64_t v74 = v71[0];
  sub_10003F60C();
  dispatch thunk of RawRepresentable.rawValue.getter();
  sub_10003F560();
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v7 = v1;
  dispatch thunk of SetAlgebra.formIntersection(_:)();
  uint64_t v61 = v71[0];
  uint64_t v70 = v6;
  long long v69 = (uint64_t (*)(void *))(*v6)[23];
  uint64_t v8 = (void (*)(void *, void))v69(v71);
  uint64_t v62 = v5;
  sub_1000A0A78();
  v8(v71, 0);
  uint64_t v66 = sub_10002A5CC();
  uint64_t v9 = (char *)v66[2];
  if (v9)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)v1 + 168);
    uint64_t v11 = (unsigned __int8 *)(v66 + 4);
    uint64_t v67 = v10;
    uint64_t v68 = v1;
    do
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      uint64_t v14 = v10();
      if (*(void *)(v14 + 16) && (unint64_t v15 = sub_10003A578(v12), (v16 & 1) != 0))
      {
        uint64_t v17 = *(void *)(v14 + 56) + 24 * v15;
        uint64_t v18 = *(void *)(v17 + 8);
        char v19 = *(unsigned char *)v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        char v20 = sub_10002B074((uint64_t)v70, v19, v18);
        swift_bridgeObjectRelease();
        if (v20)
        {
          static os_log_type_t.info.getter();
          sub_100004700((uint64_t *)&unk_10017D6E0);
          uint64_t v21 = swift_allocObject();
          *(_OWORD *)(v21 + 16) = xmmword_100132F30;
          unint64_t v22 = *(uint64_t (**)(uint64_t))(*v70[3] + 200);
          uint64_t v23 = swift_retain();
          uint64_t v24 = v22(v23);
          uint64_t v26 = v25;
          swift_release();
          *(void *)(v21 + 56) = &type metadata for String;
          unint64_t v27 = sub_10002A1DC();
          *(void *)(v21 + 64) = v27;
          *(void *)(v21 + 32) = v24;
          *(void *)(v21 + 40) = v26;
          unint64_t v28 = sub_10002A5D8(v12);
          *(void *)(v21 + 96) = &type metadata for String;
          *(void *)(v21 + 104) = v27;
          *(void *)(v21 + 72) = v28;
          *(void *)(v21 + 80) = v29;
          sub_10002A230();
          unint64_t v30 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();

          if (v12)
          {
            if (v12 == 1) {
              uint64_t v31 = v64;
            }
            else {
              uint64_t v31 = v63;
            }
          }
          else
          {
            uint64_t v31 = v65;
          }
          uint64_t v32 = *v31;
          os_log_t v33 = (void (*)(void *, void))v69(v71);
          uint64_t v74 = v32;
          uint64_t v72 = *v34;
          dispatch thunk of SetAlgebra.intersection(_:)();
          sub_10003F6BC();
          if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
          {
            uint64_t v72 = v32;
            dispatch thunk of SetAlgebra.formUnion(_:)();
          }
          v33(v71, 0);
          uint64_t v10 = v67;
          uint64_t v7 = v68;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      --v9;
    }
    while (v9);
  }
  uint64_t v35 = swift_bridgeObjectRelease();
  uint64_t v36 = *(void *)(v7 + 496);
  if (v36 && *(void *)(v36 + 16))
  {
    uint64_t v39 = v7 + 160;
    uint64_t v38 = *(void *)(v7 + 160);
    uint64_t v37 = *(void *)(v39 + 8);
    swift_bridgeObjectRetain();
    unint64_t v40 = sub_1000048E0(v38, v37);
    if (v41)
    {
      int v42 = *(void **)(*(void *)(v36 + 56) + 8 * v40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v43 = *(uint64_t (**)(uint64_t))(*v70[3] + 144);
      uint64_t v44 = swift_retain();
      uint64_t v45 = v43(v44);
      uint64_t v47 = v46;
      swift_release();
      char v48 = sub_1000391C4(v45, v47, v42);
      swift_bridgeObjectRelease();
      uint64_t v35 = swift_bridgeObjectRelease();
      if (v48)
      {
        sub_100004700((uint64_t *)&unk_10017D6E0);
        uint64_t v49 = swift_allocObject();
        *(_OWORD *)(v49 + 16) = xmmword_100132F10;
        uint64_t v50 = *(uint64_t (**)(uint64_t))(*v70[3] + 200);
        uint64_t v51 = swift_retain();
        uint64_t v52 = v50(v51);
        uint64_t v54 = v53;
        swift_release();
        *(void *)(v49 + 56) = &type metadata for String;
        *(void *)(v49 + 64) = sub_10002A1DC();
        *(void *)(v49 + 32) = v52;
        *(void *)(v49 + 40) = v54;
        sub_10002A230();
        uint64_t v55 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        uint64_t v56 = *v60;
        unint64_t v57 = (uint64_t (*)(void *, void))((uint64_t (*)(void *))(*v70)[23])(v71);
        uint64_t v74 = v56;
        uint64_t v72 = *v58;
        dispatch thunk of SetAlgebra.intersection(_:)();
        sub_10003F6BC();
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        {
          uint64_t v72 = v56;
          dispatch thunk of SetAlgebra.formUnion(_:)();
        }
        uint64_t v35 = v57(v71, 0);
      }
    }
    else
    {
      uint64_t v35 = swift_bridgeObjectRelease();
    }
  }
  uint64_t v73 = ((uint64_t (*)(uint64_t))(*v70)[21])(v35);
  uint64_t v74 = v62;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of OptionSet.init(rawValue:)();
  dispatch thunk of SetAlgebra.formIntersection(_:)();
  uint64_t v74 = v61;
  sub_10003F6BC();
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t sub_1000A0A78()
{
  sub_10003F664();
  dispatch thunk of SetAlgebra.intersection(_:)();
  if (dispatch thunk of SetAlgebra.isEmpty.getter()) {
    return 0;
  }
  dispatch thunk of SetAlgebra.subtract(_:)();
  return v1;
}

uint64_t sub_1000A0B1C(uint64_t a1)
{
  uint64_t v2 = sub_1000A117C(&qword_10017E878);
  uint64_t v3 = sub_1000A117C(&qword_10017E880);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

void *sub_1000A0BB4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100004700(&qword_10017D410);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4]) {
          memmove(v12, a4 + 4, 80 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000A0CD4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A0CD4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 80 * a1 + 32;
    unint64_t v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000A0DCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100004700(&qword_10017E888);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      unint64_t v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      id v7 = v6;
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return (void *)v3;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void type metadata accessor for URLResourceKey()
{
  if (!qword_10017E858)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10017E858);
    }
  }
}

unint64_t sub_1000A1054()
{
  unint64_t result = qword_10017E850;
  if (!qword_10017E850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E850);
  }
  return result;
}

uint64_t sub_1000A10A8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A10E0()
{
  return sub_1000A117C(&qword_10017E860);
}

uint64_t sub_1000A1114()
{
  return sub_1000A117C(&qword_10017E868);
}

uint64_t sub_1000A1148()
{
  return sub_1000A117C(&qword_10017E870);
}

uint64_t sub_1000A117C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URLResourceKey();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A11C0(uint64_t a1)
{
  return sub_1000A1420(a1, (uint64_t *)&kCFBundleIdentifierKey, &qword_100199570, &qword_100199578);
}

uint64_t *sub_1000A11D8()
{
  if (qword_100187530 != -1) {
    swift_once();
  }
  return &qword_100199570;
}

uint64_t sub_1000A1224(uint64_t a1)
{
  return sub_1000A1420(a1, (uint64_t *)&kCFBundleExecutableKey, &qword_100199580, &qword_100199588);
}

uint64_t *sub_1000A123C()
{
  if (qword_100187538 != -1) {
    swift_once();
  }
  return &qword_100199580;
}

uint64_t sub_1000A1288(uint64_t a1)
{
  return sub_1000A1420(a1, &_kCFBundlePackageTypeKey, &qword_100199590, &qword_100199598);
}

uint64_t *sub_1000A12A0()
{
  if (qword_100187540 != -1) {
    swift_once();
  }
  return &qword_100199590;
}

void *sub_1000A12EC()
{
  return &unk_10016DC68;
}

uint64_t sub_1000A12F8(uint64_t a1)
{
  return sub_1000A1420(a1, (uint64_t *)&kCFBundleNameKey, &qword_1001995A0, &qword_1001995A8);
}

uint64_t *sub_1000A1310()
{
  if (qword_100187548 != -1) {
    swift_once();
  }
  return &qword_1001995A0;
}

void *sub_1000A135C()
{
  return &unk_10016DC78;
}

void *sub_1000A1368()
{
  return &unk_10016DC88;
}

void *sub_1000A1374()
{
  return &unk_10016DC98;
}

void *sub_1000A1380()
{
  return &unk_10016DCA8;
}

void *sub_1000A138C()
{
  return &unk_10016DCB8;
}

void *sub_1000A1398()
{
  return &unk_10016DCC8;
}

void *sub_1000A13A4()
{
  return &unk_10016DCD8;
}

void *sub_1000A13B0()
{
  return &unk_10016DCE8;
}

uint64_t sub_1000A13BC(uint64_t a1)
{
  return sub_1000A1420(a1, (uint64_t *)&kCFBundleVersionKey, &qword_1001995B0, &qword_1001995B8);
}

uint64_t *sub_1000A13D4()
{
  if (qword_100187550 != -1) {
    swift_once();
  }
  return &qword_1001995B0;
}

uint64_t sub_1000A1420(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t result = *a2;
  if (*a2)
  {
    uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *a3 = result;
    *a4 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1000A145C()
{
  return &unk_10016DCF8;
}

void *sub_1000A1468()
{
  return &unk_10016DD08;
}

void *sub_1000A1474()
{
  return &unk_10016DD18;
}

void *sub_1000A1480()
{
  return &unk_10016DD28;
}

const char *sub_1000A148C()
{
  return "OSBundleUUID";
}

void *sub_1000A1498()
{
  return &unk_10016DD38;
}

void *sub_1000A14A4()
{
  return &unk_10016DD48;
}

void *sub_1000A14B0()
{
  return &unk_10016DD58;
}

void *sub_1000A14BC()
{
  return &unk_10016DD68;
}

void *sub_1000A14C8()
{
  return &unk_10016DD78;
}

void *sub_1000A14D4()
{
  return &unk_10016DD88;
}

void *sub_1000A14E0()
{
  return &unk_10016DD98;
}

void *sub_1000A14EC()
{
  return &unk_100136D30;
}

void *sub_1000A14F8()
{
  return &unk_10016DDA8;
}

void *sub_1000A1504()
{
  return &unk_10016DDB8;
}

void *sub_1000A1510()
{
  return &unk_10016DDC8;
}

const char *sub_1000A151C()
{
  return "None";
}

const char *sub_1000A1528()
{
  return "Apple";
}

void *sub_1000A1534()
{
  return &unk_10016DDD8;
}

void *sub_1000A1540()
{
  return &unk_100136D60;
}

void *sub_1000A154C()
{
  return &unk_10016DDE8;
}

const char *sub_1000A1558()
{
  return "OSBundlePath";
}

void *sub_1000A1564()
{
  return &unk_100136D80;
}

void *sub_1000A1570()
{
  return &unk_10016DDF8;
}

void *sub_1000A157C()
{
  return &unk_10016DE08;
}

void *sub_1000A1588()
{
  return &unk_10016DE18;
}

void *sub_1000A1594()
{
  return &unk_10016DE28;
}

void *sub_1000A15A0()
{
  return &unk_10016DE38;
}

void *sub_1000A15AC()
{
  return &unk_10016DE48;
}

void *sub_1000A15B8()
{
  return &unk_10016DE58;
}

void *sub_1000A15C4()
{
  return &unk_10016DE68;
}

void *sub_1000A15D0()
{
  return &unk_10016DE78;
}

void *sub_1000A15DC()
{
  return &unk_10016DE88;
}

void *sub_1000A15E8()
{
  return &unk_10016DE98;
}

void *sub_1000A15F4()
{
  return &unk_10016DEA8;
}

void *sub_1000A1600()
{
  return &unk_10016DEB8;
}

const char *sub_1000A160C()
{
  return "Send Resource";
}

void *sub_1000A1618()
{
  return &unk_10016DEC8;
}

void *sub_1000A1624()
{
  return &unk_10016DED8;
}

void *sub_1000A1630()
{
  return &unk_10016DEE8;
}

void *sub_1000A163C()
{
  return &unk_10016DEF8;
}

void *sub_1000A1648()
{
  return &unk_10016DF08;
}

void *sub_1000A1654()
{
  return &unk_10016DF18;
}

void *sub_1000A1660()
{
  return &unk_10016DF28;
}

const char *sub_1000A166C()
{
  return "Check In Token";
}

void *sub_1000A1678()
{
  return &unk_10016DF38;
}

const char *sub_1000A1684()
{
  return "Unload";
}

void *sub_1000A1690()
{
  return &unk_10016DF48;
}

const char *sub_1000A169C()
{
  return "PageableKCName";
}

const char *sub_1000A16A8()
{
  return "AuxKCName";
}

const char *sub_1000A16B4()
{
  return "loadfilesetkc";
}

void *sub_1000A16C0()
{
  return &unk_10016DF58;
}

void *sub_1000A16CC()
{
  return &unk_10016DF68;
}

void *sub_1000A16D8()
{
  return &unk_10016DF78;
}

void *sub_1000A16E4()
{
  return &unk_10016DF88;
}

const char *sub_1000A16F0()
{
  return "LoadFromKC";
}

void *sub_1000A16FC()
{
  return &unk_10016DF98;
}

void *sub_1000A1708()
{
  return &unk_100136E08;
}

void *sub_1000A1714()
{
  return &unk_100136E18;
}

const char *sub_1000A1720()
{
  return "Auxiliary";
}

const char *sub_1000A172C()
{
  return "System";
}

const char *sub_1000A1738()
{
  return "Primary";
}

const char *sub_1000A1744()
{
  return "Codeless";
}

const char *sub_1000A1750()
{
  return "Loaded State";
}

void *sub_1000A175C()
{
  return &unk_10016DFA8;
}

const char *sub_1000A1768()
{
  return "DaemonReady";
}

void *sub_1000A1774()
{
  return &unk_10016DFB8;
}

void *sub_1000A1780()
{
  return &unk_10016DFC8;
}

void *sub_1000A178C()
{
  return &unk_10016DFD8;
}

const char *sub_1000A1798()
{
  return "Get Dexts";
}

void *sub_1000A17A4()
{
  return &unk_10016DFE8;
}

_DWORD *sub_1000A17B0@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1000A17BC(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1000A17C4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1000A17D8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1000A17EC@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1000A1800(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1000A1830@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1000A185C@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1000A1880(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_1000A1894(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_1000A18A8(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_1000A18BC@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000A18D0(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000A18E4(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1000A18F8(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000A190C()
{
  return *v0 == 0;
}

_DWORD *sub_1000A191C(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_1000A1930@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_1000A1940(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_1000A194C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000A1960@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_1000A3D00(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *sub_1000A19A0()
{
  return &unk_10016DFF8;
}

void *sub_1000A19AC()
{
  return &unk_10016E008;
}

void *sub_1000A19B8()
{
  return &unk_10016E018;
}

const char *sub_1000A19C4()
{
  return "IOMatchDefer";
}

void *sub_1000A19D0()
{
  return &unk_10016E028;
}

void *sub_1000A19DC()
{
  return &unk_10016E038;
}

void *sub_1000A19E8()
{
  return &unk_10016E048;
}

const char *sub_1000A19F4()
{
  return "_BootKCID";
}

const char *sub_1000A1A00()
{
  return "_PageableKCID";
}

const char *sub_1000A1A0C()
{
  return "_PrelinkKCID";
}

const char *sub_1000A1A18()
{
  return "ManagerVersion";
}

const char *sub_1000A1A24()
{
  return "arch";
}

void *sub_1000A1A30()
{
  return &unk_10016E058;
}

const char *sub_1000A1A3C()
{
  return "kern.bootargs";
}

const char *sub_1000A1A48()
{
  return "kern.safeboot";
}

void *sub_1000A1A54()
{
  return &unk_10016E068;
}

uint64_t sub_1000A1A60()
{
  uint64_t result = nullsub_1(0x545845545F5FLL, 0xE600000000000000, 0x6769666E6F635F5FLL, 0xEE007473696C705FLL);
  qword_1001995C0 = result;
  *(void *)algn_1001995C8 = v1;
  qword_1001995D0 = v2;
  unk_1001995D8 = v3;
  return result;
}

uint64_t *sub_1000A1AB8()
{
  if (qword_100187560 != -1) {
    swift_once();
  }
  return &qword_1001995C0;
}

uint64_t sub_1000A1B04()
{
  uint64_t result = nullsub_1(0x4E494C4552505F5FLL, 0xEE004F464E495F4BLL, 0x6F666E695F5FLL, 0xE600000000000000);
  qword_1001995E0 = result;
  *(void *)algn_1001995E8 = v1;
  qword_1001995F0 = v2;
  unk_1001995F8 = v3;
  return result;
}

uint64_t *sub_1000A1B5C()
{
  if (qword_100187568 != -1) {
    swift_once();
  }
  return &qword_1001995E0;
}

uint64_t sub_1000A1BA8()
{
  uint64_t result = nullsub_1(0x4E494B4E494C5F5FLL, 0xEA00000000004F46, 0x6C6F626D79735F5FLL, 0xEC00000073746573);
  qword_100199600 = result;
  *(void *)algn_100199608 = v1;
  qword_100199610 = v2;
  unk_100199618 = v3;
  return result;
}

uint64_t *sub_1000A1C04()
{
  if (qword_100187578 != -1) {
    swift_once();
  }
  return &qword_100199600;
}

uint64_t sub_1000A1C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0x545845545F5FLL, 0xE600000000000000, a3, a4);
  qword_100199620 = result;
  *(void *)algn_100199628 = v5;
  return result;
}

uint64_t *sub_1000A1C84()
{
  if (qword_100187580 != -1) {
    swift_once();
  }
  return &qword_100199620;
}

uint64_t sub_1000A1CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0x455F545845545F5FLL, 0xEB00000000434558, a3, a4);
  qword_100199630 = result;
  *(void *)algn_100199638 = v5;
  return result;
}

uint64_t *sub_1000A1D10()
{
  if (qword_100187588 != -1) {
    swift_once();
  }
  return &qword_100199630;
}

uint64_t sub_1000A1D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0xD000000000000010, 0x800000010014B510, a3, a4);
  qword_100199640 = result;
  *(void *)algn_100199648 = v5;
  return result;
}

uint64_t *sub_1000A1D98()
{
  if (qword_100187590 != -1) {
    swift_once();
  }
  return &qword_100199640;
}

uint64_t sub_1000A1DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0x535F415441445F5FLL, 0xEB000000004D5450, a3, a4);
  qword_100199650 = result;
  *(void *)algn_100199658 = v5;
  return result;
}

uint64_t *sub_1000A1E24()
{
  if (qword_100187598 != -1) {
    swift_once();
  }
  return &qword_100199650;
}

uint64_t sub_1000A1E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0x4E494C4552505F5FLL, 0xEE004F464E495F4BLL, a3, a4);
  qword_100199660 = result;
  *(void *)algn_100199668 = v5;
  return result;
}

uint64_t *sub_1000A1EB4()
{
  if (qword_1001875A0 != -1) {
    swift_once();
  }
  return &qword_100199660;
}

uint64_t sub_1000A1F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0x44454B4E494C5F5FLL, 0xEA00000000005449, a3, a4);
  qword_100199670 = result;
  *(void *)algn_100199678 = v5;
  return result;
}

uint64_t *sub_1000A1F3C()
{
  if (qword_1001875A8 != -1) {
    swift_once();
  }
  return &qword_100199670;
}

uint64_t sub_1000A1F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0x5049454345525F5FLL, 0xEE004F464E495F54, a3, a4);
  qword_100199680 = result;
  *(void *)algn_100199688 = v5;
  return result;
}

uint64_t *sub_1000A1FCC()
{
  if (qword_1001875B0 != -1) {
    swift_once();
  }
  return &qword_100199680;
}

void sub_1000A2018()
{
  qword_100199690 = (uint64_t)&off_10016E398;
}

uint64_t *sub_1000A202C()
{
  if (qword_1001875B8 != -1) {
    swift_once();
  }
  return &qword_100199690;
}

void *sub_1000A2078()
{
  return &unk_100136F18;
}

void *sub_1000A2084()
{
  return &unk_100136F1C;
}

void *sub_1000A2090()
{
  return &unk_100136F20;
}

void *sub_1000A209C()
{
  return &unk_100136F24;
}

void *sub_1000A20A8()
{
  return &unk_100136F28;
}

const char *sub_1000A20B4()
{
  return "SymbolsSets";
}

const char *sub_1000A20C0()
{
  return "Symbols";
}

const char *sub_1000A20CC()
{
  return "SymbolName";
}

const char *sub_1000A20D8()
{
  return "SymbolPrefix";
}

const char *sub_1000A20E4()
{
  return "AliasTarget";
}

const char *sub_1000A20F0()
{
  return "com.apple";
}

const char *sub_1000A20FC()
{
  return "com.apple.kpi.";
}

void *sub_1000A2108()
{
  return &unk_10016E078;
}

void *sub_1000A2114()
{
  return &unk_10016E088;
}

const char *sub_1000A2120()
{
  return "__kernel__";
}

const char *sub_1000A212C()
{
  return "com.apple.txm";
}

const char *sub_1000A2138()
{
  return "com.apple.sptm";
}

void *sub_1000A2144()
{
  return &unk_10016E098;
}

void *sub_1000A2150()
{
  return &unk_10016E0A8;
}

void *sub_1000A215C()
{
  return &unk_10016E0B8;
}

void *sub_1000A2168()
{
  return &unk_10016E0C8;
}

void *sub_1000A2174()
{
  return &unk_10016E0D8;
}

const char *sub_1000A2180()
{
  return "get-task-allow";
}

void *sub_1000A218C()
{
  return &unk_10016E0E8;
}

void *sub_1000A2198()
{
  return &unk_10016E0F8;
}

void *sub_1000A21A4()
{
  return &unk_10016E108;
}

void *sub_1000A21B0()
{
  return &unk_10016E118;
}

void *sub_1000A21BC()
{
  return &unk_10016E128;
}

void *sub_1000A21C8()
{
  return &unk_10016E138;
}

void *sub_1000A21D4()
{
  return &unk_10016E148;
}

void *sub_1000A21E0()
{
  return &unk_10016E158;
}

void *sub_1000A21EC()
{
  return &unk_10016E168;
}

void *sub_1000A21F8()
{
  return &unk_10016E178;
}

void *sub_1000A2204()
{
  return &unk_10016E188;
}

void *sub_1000A2210()
{
  return &unk_10016E198;
}

void *sub_1000A221C()
{
  return &unk_10016E1A8;
}

void *sub_1000A2228()
{
  return &unk_10016E1B8;
}

void *sub_1000A2234()
{
  return &unk_10016E1C8;
}

void *sub_1000A2240()
{
  return &unk_100136FE8;
}

const char *sub_1000A224C()
{
  return "-restore";
}

char **sub_1000A2258()
{
  return &off_10016E1D8;
}

char **sub_1000A2264()
{
  return &off_10016E1F0;
}

char **sub_1000A2270()
{
  return &off_10016E208;
}

char **sub_1000A227C()
{
  return &off_10016E220;
}

char **sub_1000A2288()
{
  return &off_10016E238;
}

char **sub_1000A2294()
{
  return &off_10016E250;
}

char **sub_1000A22A0()
{
  return &off_10016E268;
}

char **sub_1000A22AC()
{
  return &off_10016E280;
}

char **sub_1000A22B8()
{
  return &off_10016E298;
}

char **sub_1000A22C4()
{
  return &off_10016E2B0;
}

char **sub_1000A22D0()
{
  return &off_10016E2C8;
}

char **sub_1000A22DC()
{
  return &off_10016E2E0;
}

char **sub_1000A22E8()
{
  return &off_10016E2F8;
}

char **sub_1000A22F4()
{
  return &off_10016E310;
}

void *sub_1000A2300()
{
  return &unk_10016E328;
}

void *sub_1000A230C()
{
  return &unk_10016E338;
}

void *sub_1000A2318()
{
  return &unk_10016E348;
}

void *sub_1000A2324()
{
  return &unk_10016E358;
}

void *sub_1000A2330()
{
  return &unk_10016E368;
}

const char *sub_1000A233C()
{
  return "Name";
}

const char *sub_1000A2348()
{
  return "UserInfo";
}

const char *sub_1000A2354()
{
  return "isPlaceholder";
}

const char *sub_1000A2360()
{
  return "bundleIDs";
}

void sub_1000A236C()
{
  qword_100199698 = (uint64_t)&off_10016E3C8;
}

uint64_t sub_1000A2380@<X0>(void *a1@<X8>)
{
  return sub_1000A3B2C(&qword_1001875C0, &qword_100199698, a1);
}

void sub_1000A23A4()
{
  qword_1001996A0 = (uint64_t)&off_10016E3F0;
}

uint64_t *sub_1000A23B8()
{
  if (qword_1001875C8 != -1) {
    swift_once();
  }
  return &qword_1001996A0;
}

uint64_t sub_1000A2404@<X0>(void *a1@<X8>)
{
  return sub_1000A3B2C(&qword_1001875C8, &qword_1001996A0, a1);
}

void sub_1000A2428()
{
  qword_1001996A8 = (uint64_t)&off_10016E418;
}

uint64_t *sub_1000A243C()
{
  if (qword_1001875D0 != -1) {
    swift_once();
  }
  return &qword_1001996A8;
}

void *sub_1000A2488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v5 = a1 == 0x657361656C6572 && a2 == 0xE700000000000000;
  if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    uint64_t v9 = sub_1000A3D38(a1, a2);
    if (v9 == 5)
    {
      swift_bridgeObjectRelease();
    }
    else if (a4)
    {
      unint64_t v11 = (void *)swift_allocObject();
      v11[2] = v9;
      v11[3] = a3;
      v11[4] = a4;
      return v11;
    }
  }
  return (void *)v9;
}

uint64_t sub_1000A2568(uint64_t a1)
{
  uint64_t v1 = 0x657361656C6572;
  switch(a1)
  {
    case 0:
      return v1;
    case 1:
      uint64_t v1 = 0x6D706F6C65766564;
      break;
    case 2:
      uint64_t v1 = 0x6775626564;
      break;
    case 3:
      uint64_t v1 = 0x6E6173616BLL;
      break;
    case 4:
      uint64_t v1 = 0x6863726165736572;
      break;
    default:
      uint64_t v1 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      break;
  }
  return v1;
}

uint64_t sub_1000A264C(uint64_t a1)
{
  uint64_t v1 = a1;
  switch(a1)
  {
    case 0:
      return v1;
    case 1:
      uint64_t v1 = 0x706F6C657665645FLL;
      break;
    case 2:
      uint64_t v1 = 0x67756265645FLL;
      break;
    case 3:
      uint64_t v1 = 0x6E6173616B5FLL;
      break;
    case 4:
      uint64_t v1 = 0x637261657365725FLL;
      break;
    default:
      unint64_t v2 = *(void *)(a1 + 16);
      sub_10003CC54(v2);
      uint64_t v1 = sub_1000A264C(v2);
      sub_10003E8C0(v2);
      break;
  }
  return v1;
}

uint64_t sub_1000A2748(uint64_t result)
{
  switch(result)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x6D706F6C65766564;
      break;
    case 2:
      uint64_t result = 0x6775626564;
      break;
    case 3:
      uint64_t result = 0x6E6173616BLL;
      break;
    case 4:
      uint64_t result = 0x6863726165736572;
      break;
    default:
      uint64_t v1 = *(void *)(result + 24);
      swift_bridgeObjectRetain();
      uint64_t result = v1;
      break;
  }
  return result;
}

BOOL sub_1000A281C(void *a1, void *a2)
{
  switch((unint64_t)a1)
  {
    case 0uLL:
      if (!a2) {
        return 0;
      }
      unint64_t v2 = 0;
      goto LABEL_14;
    case 1uLL:
      if (a2 == (void *)1) {
        return 0;
      }
      unint64_t v2 = 1;
      goto LABEL_14;
    case 2uLL:
      if (a2 == (void *)2) {
        return 0;
      }
      unint64_t v2 = 2;
      goto LABEL_14;
    case 3uLL:
      if (a2 == (void *)3) {
        return 0;
      }
      unint64_t v2 = 3;
      goto LABEL_14;
    case 4uLL:
      if (a2 == (void *)4) {
        return 0;
      }
      unint64_t v2 = 4;
      goto LABEL_14;
    default:
      if ((unint64_t)a2 >= 5)
      {
        BOOL v5 = (void *)a1[2];
        uint64_t v6 = a1[3];
        uint64_t v7 = a1[4];
        Swift::Int v8 = (void *)a2[2];
        uint64_t v9 = a2[3];
        uint64_t v10 = a2[4];
        sub_10003CC54((unint64_t)v5);
        sub_10003CC54((unint64_t)v8);
        if (sub_1000A29AC(v5, v8))
        {
          if (v6 == v9 && v7 == v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            sub_10003E8C0((unint64_t)v8);
            sub_10003E8C0((unint64_t)v5);
            return 0;
          }
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        else
        {
          char v11 = sub_1000A281C(v5, v8);
        }
        char v12 = v11;
        sub_10003E8C0((unint64_t)v8);
        sub_10003E8C0((unint64_t)v5);
        return v12 & 1;
      }
      unint64_t v2 = 5;
LABEL_14:
      unint64_t v3 = 5;
      if ((unint64_t)a2 < 5) {
        unint64_t v3 = (unint64_t)a2;
      }
      return v2 < v3;
  }
}

uint64_t sub_1000A29AC(void *a1, void *a2)
{
  switch((unint64_t)a1)
  {
    case 0uLL:
      if (a2) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 1uLL:
      if (a2 != (void *)1) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 2uLL:
      if (a2 != (void *)2) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 3uLL:
      if (a2 != (void *)3) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 4uLL:
      if (a2 != (void *)4) {
        goto LABEL_18;
      }
LABEL_16:
      uint64_t result = 1;
      break;
    default:
      if ((unint64_t)a2 < 5) {
        goto LABEL_18;
      }
      unint64_t v2 = a1[2];
      uint64_t v3 = a1[3];
      uint64_t v4 = a1[4];
      unint64_t v5 = a2[2];
      uint64_t v6 = a2[3];
      uint64_t v7 = a2[4];
      sub_10003CC54(v2);
      sub_10003CC54(v5);
      if (sub_1000A29AC(v2, v5))
      {
        if (v3 == v6 && v4 == v7)
        {
          sub_10003E8C0(v5);
          sub_10003E8C0(v2);
          uint64_t result = 1;
        }
        else
        {
          char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_10003E8C0(v5);
          sub_10003E8C0(v2);
          uint64_t result = v9 & 1;
        }
      }
      else
      {
        sub_10003E8C0(v5);
        sub_10003E8C0(v2);
LABEL_18:
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

BOOL sub_1000A2AFC(void **a1, void **a2)
{
  return sub_1000A281C(*a1, *a2);
}

BOOL sub_1000A2B08(void **a1, void **a2)
{
  return !sub_1000A281C(*a2, *a1);
}

BOOL sub_1000A2B34(void **a1, void **a2)
{
  return !sub_1000A281C(*a1, *a2);
}

BOOL sub_1000A2B5C(void **a1, void **a2)
{
  return sub_1000A281C(*a2, *a1);
}

uint64_t sub_1000A2B6C@<X0>(void *a1@<X8>)
{
  if (qword_1001875D0 != -1) {
    swift_once();
  }
  *a1 = qword_1001996A8;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A2BD8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = 0x657361656C6572;
  switch(v1)
  {
    case 0:
      return v2;
    case 1:
      uint64_t v2 = 0x6D706F6C65766564;
      break;
    case 2:
      uint64_t v2 = 0x6775626564;
      break;
    case 3:
      uint64_t v2 = 0x6E6173616BLL;
      break;
    case 4:
      uint64_t v2 = 0x6863726165736572;
      break;
    default:
      uint64_t v2 = *(void *)(v1 + 24);
      swift_bridgeObjectRetain();
      break;
  }
  return v2;
}

uint64_t sub_1000A2CBC(void **a1, void **a2)
{
  return sub_1000A29AC(*a1, *a2);
}

Swift::Int sub_1000A2CC8()
{
  return Hasher._finalize()();
}

uint64_t sub_1000A2D18()
{
  return String.hash(into:)();
}

Swift::Int sub_1000A2D2C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000A2D78@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  if (*a1 == 0x6E6567636BLL && a1[1] == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v6 = 0;
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v6 = v4 ^ 1;
  }
  *a2 = v6 & 1;
  return result;
}

void sub_1000A2E04(void *a1@<X8>)
{
  *a1 = 0x6E6567636BLL;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1000A2E1C()
{
  unint64_t v0 = sub_1000A4BF4();
  unint64_t v1 = sub_1000A4C48();
  return sub_1000F0560(0, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001996B0);
}

uint64_t sub_1000A2E68()
{
  unint64_t v0 = sub_1000A4BF4();
  unint64_t v1 = sub_1000A4C48();
  return sub_1000F0560(1, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001996B8);
}

uint64_t sub_1000A2EB4()
{
  unint64_t v0 = sub_1000A4BF4();
  unint64_t v1 = sub_1000A4C48();
  return sub_1000F0560(3, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001996C0);
}

uint64_t sub_1000A2F00()
{
  unint64_t v0 = sub_1000A4BF4();
  unint64_t v1 = sub_1000A4C48();
  return sub_1000F0560(4, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001996C8);
}

uint64_t sub_1000A2F4C()
{
  unint64_t v0 = sub_1000A4BF4();
  unint64_t v1 = sub_1000A4C48();
  return sub_1000F0560(5, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001996D0);
}

uint64_t sub_1000A2F98()
{
  unint64_t v0 = sub_1000A4BF4();
  unint64_t v1 = sub_1000A4C48();
  return sub_1000F0560(6, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001996D8);
}

uint64_t sub_1000A2FE4()
{
  unint64_t v0 = sub_1000A4BF4();
  unint64_t v1 = sub_1000A4C48();
  return sub_1000F0560(7, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001996E0);
}

uint64_t sub_1000A3030()
{
  unint64_t v0 = sub_1000A4BF4();
  unint64_t v1 = sub_1000A4C48();
  return sub_1000F0560(8, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001996E8);
}

uint64_t sub_1000A307C()
{
  unint64_t v0 = sub_1000A4BF4();
  unint64_t v1 = sub_1000A4C48();
  return sub_1000F0560(9, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001996F0);
}

uint64_t sub_1000A30C8()
{
  unint64_t v0 = sub_1000A4BF4();
  unint64_t v1 = sub_1000A4C48();
  return sub_1000F0560(10, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001996F8);
}

uint64_t sub_1000A3114()
{
  unint64_t v0 = sub_1000A4BF4();
  unint64_t v1 = sub_1000A4C48();
  return sub_1000F0560(11, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_100199700);
}

uint64_t sub_1000A3160(uint64_t a1)
{
  if (qword_1001875D8 != -1) {
    swift_once();
  }
  if ((qword_1001996B0 & ~a1) != 0)
  {
    uint64_t v2 = (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v2 = sub_10000C3BC(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v4 = *((void *)v2 + 2);
    unint64_t v3 = *((void *)v2 + 3);
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v3 > 1), v4 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v4 + 1;
    unint64_t v5 = &v2[16 * v4];
    strcpy(v5 + 32, "kcgen enabled");
    *((_WORD *)v5 + 23) = -4864;
  }
  if (qword_1001875E0 != -1) {
    swift_once();
  }
  if ((qword_1001996B8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v7 = *((void *)v2 + 2);
    unint64_t v6 = *((void *)v2 + 3);
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v6 > 1), v7 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v7 + 1;
    Swift::Int v8 = &v2[16 * v7];
    *((void *)v8 + 4) = 0xD000000000000021;
    *((void *)v8 + 5) = 0x800000010014B4E0;
  }
  if (qword_1001875E8 != -1) {
    swift_once();
  }
  if ((qword_1001996C0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v10 = *((void *)v2 + 2);
    unint64_t v9 = *((void *)v2 + 3);
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v9 > 1), v10 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v10 + 1;
    char v11 = &v2[16 * v10];
    *((void *)v11 + 4) = 0xD000000000000014;
    *((void *)v11 + 5) = 0x800000010014B4C0;
  }
  if (qword_1001875F0 != -1) {
    swift_once();
  }
  if ((qword_1001996C8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v13 = *((void *)v2 + 2);
    unint64_t v12 = *((void *)v2 + 3);
    if (v13 >= v12 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v12 > 1), v13 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v13 + 1;
    uint64_t v14 = &v2[16 * v13];
    *((void *)v14 + 4) = 0xD000000000000021;
    *((void *)v14 + 5) = 0x800000010014B490;
  }
  if (qword_1001875F8 != -1) {
    swift_once();
  }
  if ((qword_1001996D0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v16 = *((void *)v2 + 2);
    unint64_t v15 = *((void *)v2 + 3);
    if (v16 >= v15 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v15 > 1), v16 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v16 + 1;
    uint64_t v17 = &v2[16 * v16];
    *((void *)v17 + 4) = 0xD000000000000024;
    *((void *)v17 + 5) = 0x800000010014B460;
  }
  if (qword_100187600 != -1) {
    swift_once();
  }
  if ((qword_1001996D8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v19 = *((void *)v2 + 2);
    unint64_t v18 = *((void *)v2 + 3);
    if (v19 >= v18 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v18 > 1), v19 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v19 + 1;
    char v20 = &v2[16 * v19];
    *((void *)v20 + 4) = 0xD00000000000001BLL;
    *((void *)v20 + 5) = 0x800000010014B440;
  }
  if (qword_100187608 != -1) {
    swift_once();
  }
  if ((qword_1001996E0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v22 = *((void *)v2 + 2);
    unint64_t v21 = *((void *)v2 + 3);
    if (v22 >= v21 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v21 > 1), v22 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v22 + 1;
    uint64_t v23 = &v2[16 * v22];
    *((void *)v23 + 4) = 0xD000000000000037;
    *((void *)v23 + 5) = 0x800000010014B400;
  }
  if (qword_100187610 != -1) {
    swift_once();
  }
  if ((qword_1001996E8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v25 = *((void *)v2 + 2);
    unint64_t v24 = *((void *)v2 + 3);
    if (v25 >= v24 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v24 > 1), v25 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v25 + 1;
    uint64_t v26 = &v2[16 * v25];
    *((void *)v26 + 4) = 0xD000000000000027;
    *((void *)v26 + 5) = 0x800000010014B3D0;
  }
  if (qword_100187618 != -1) {
    swift_once();
  }
  if ((qword_1001996F0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v28 = *((void *)v2 + 2);
    unint64_t v27 = *((void *)v2 + 3);
    if (v28 >= v27 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v27 > 1), v28 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v28 + 1;
    BOOL v29 = &v2[16 * v28];
    *((void *)v29 + 4) = 0xD00000000000002CLL;
    *((void *)v29 + 5) = 0x800000010014B3A0;
  }
  if (qword_100187620 != -1) {
    swift_once();
  }
  if ((qword_1001996F8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v31 = *((void *)v2 + 2);
    unint64_t v30 = *((void *)v2 + 3);
    if (v31 >= v30 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v30 > 1), v31 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v31 + 1;
    uint64_t v32 = &v2[16 * v31];
    *((void *)v32 + 4) = 0xD000000000000027;
    *((void *)v32 + 5) = 0x800000010014B370;
  }
  if (qword_100187628 != -1) {
    swift_once();
  }
  if ((qword_100199700 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10000C3BC(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v34 = *((void *)v2 + 2);
    unint64_t v33 = *((void *)v2 + 3);
    if (v34 >= v33 >> 1) {
      uint64_t v2 = sub_10000C3BC((char *)(v33 > 1), v34 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v34 + 1;
    uint64_t v35 = &v2[16 * v34];
    *((void *)v35 + 4) = 0xD000000000000026;
    *((void *)v35 + 5) = 0x800000010014B340;
  }
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
  uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v38 = v37;
  swift_bridgeObjectRelease();
  v39._uint64_t countAndFlagsBits = v36;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._uint64_t countAndFlagsBits = 93;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  return 91;
}

uint64_t sub_1000A3A50()
{
  return sub_1000A3160(*v0);
}

const char *sub_1000A3A58()
{
  return "Copyright © ";
}

void *sub_1000A3A64()
{
  return &unk_10016E378;
}

const char *sub_1000A3A70()
{
  return "^[0-9]{4}$";
}

void *sub_1000A3A7C()
{
  return &unk_10016E388;
}

void sub_1000A3A88()
{
  qword_100199708 = (uint64_t)&off_10016E460;
}

const char *sub_1000A3A9C()
{
  return "Root";
}

const char *sub_1000A3AA8()
{
  return "Console";
}

const char *sub_1000A3AB4()
{
  return "Local-Root";
}

const char *sub_1000A3AC0()
{
  return "Network-Root";
}

const char *sub_1000A3ACC()
{
  return "DriverKit";
}

const char *sub_1000A3AD8()
{
  return "Safe Boot";
}

const char *sub_1000A3AE4()
{
  return "Auxiliary";
}

void *sub_1000A3AF0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000A3AFC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A3B08@<X0>(void *a1@<X8>)
{
  return sub_1000A3B2C(qword_100187638, &qword_100199708, a1);
}

uint64_t sub_1000A3B2C@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A3B94(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int sub_1000A3BC4()
{
  return Hasher._finalize()();
}

uint64_t sub_1000A3C20()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000A3C78()
{
  return Hasher._finalize()();
}

void *sub_1000A3CD0()
{
  return &unk_1001370D8;
}

void *sub_1000A3CDC()
{
  return &unk_1001370DC;
}

void *sub_1000A3CE8()
{
  return &unk_1001370E0;
}

void *sub_1000A3CF4()
{
  return &unk_1001370E4;
}

uint64_t sub_1000A3D00(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  unint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1000A3D38(uint64_t a1, uint64_t a2)
{
  if (!a1 && a2 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D706F6C65766564 && a2 == 0xEB00000000746E65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6775626564 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6173616BLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6863726165736572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1000A3F44()
{
  if (*(void *)(v0 + 16) >= 5uLL) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

unint64_t sub_1000A3F90()
{
  unint64_t result = qword_10017E890;
  if (!qword_10017E890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E890);
  }
  return result;
}

unint64_t sub_1000A3FEC()
{
  unint64_t result = qword_10017E898;
  if (!qword_10017E898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E898);
  }
  return result;
}

unint64_t sub_1000A4044()
{
  unint64_t result = qword_10017E8A0;
  if (!qword_10017E8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E8A0);
  }
  return result;
}

unint64_t sub_1000A409C()
{
  unint64_t result = qword_10017E8A8;
  if (!qword_10017E8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E8A8);
  }
  return result;
}

uint64_t sub_1000A40F0()
{
  return sub_10001348C(&qword_10017E8B0, &qword_10017E8B8);
}

uint64_t sub_1000A412C()
{
  return sub_10001348C(&qword_10017E8C0, &qword_10017E8C8);
}

unint64_t sub_1000A416C()
{
  unint64_t result = qword_10017E8D0;
  if (!qword_10017E8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E8D0);
  }
  return result;
}

uint64_t sub_1000A41C0()
{
  return sub_10001348C(&qword_10017E8D8, &qword_10017E8E0);
}

unint64_t sub_1000A4200()
{
  unint64_t result = qword_10017E8E8;
  if (!qword_10017E8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E8E8);
  }
  return result;
}

unint64_t sub_1000A4258()
{
  unint64_t result = qword_10017E8F0;
  if (!qword_10017E8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E8F0);
  }
  return result;
}

unint64_t sub_1000A42B0()
{
  unint64_t result = qword_10017E8F8;
  if (!qword_10017E8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E8F8);
  }
  return result;
}

unint64_t sub_1000A4308()
{
  unint64_t result = qword_10017E900;
  if (!qword_10017E900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E900);
  }
  return result;
}

unint64_t sub_1000A4360()
{
  unint64_t result = qword_10017E908;
  if (!qword_10017E908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E908);
  }
  return result;
}

unint64_t sub_1000A43B8()
{
  unint64_t result = qword_10017E910;
  if (!qword_10017E910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E910);
  }
  return result;
}

uint64_t sub_1000A440C()
{
  return sub_10001348C(&qword_10017E918, &qword_10017E920);
}

unint64_t sub_1000A444C()
{
  unint64_t result = qword_10017E928;
  if (!qword_10017E928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E928);
  }
  return result;
}

ValueMetadata *type metadata accessor for InfoKeys()
{
  return &type metadata for InfoKeys;
}

ValueMetadata *type metadata accessor for DriverTeamIdentifierConstants()
{
  return &type metadata for DriverTeamIdentifierConstants;
}

ValueMetadata *type metadata accessor for MKextKeys()
{
  return &type metadata for MKextKeys;
}

ValueMetadata *type metadata accessor for LoadInfoKeys()
{
  return &type metadata for LoadInfoKeys;
}

ValueMetadata *type metadata accessor for KextRequestKeys()
{
  return &type metadata for KextRequestKeys;
}

ValueMetadata *type metadata accessor for KextRequestFlags()
{
  return &type metadata for KextRequestFlags;
}

ValueMetadata *type metadata accessor for PersonalityKeys()
{
  return &type metadata for PersonalityKeys;
}

ValueMetadata *type metadata accessor for PersonalityValues()
{
  return &type metadata for PersonalityValues;
}

ValueMetadata *type metadata accessor for CollectionKeys()
{
  return &type metadata for CollectionKeys;
}

ValueMetadata *type metadata accessor for ContextKeys()
{
  return &type metadata for ContextKeys;
}

ValueMetadata *type metadata accessor for EnvKeys()
{
  return &type metadata for EnvKeys;
}

ValueMetadata *type metadata accessor for PageProtectionType()
{
  return &type metadata for PageProtectionType;
}

ValueMetadata *type metadata accessor for SysctlKeys()
{
  return &type metadata for SysctlKeys;
}

ValueMetadata *type metadata accessor for MachO()
{
  return &type metadata for MachO;
}

ValueMetadata *type metadata accessor for SymbolSetKeys()
{
  return &type metadata for SymbolSetKeys;
}

ValueMetadata *type metadata accessor for KernelResourceIdentifier()
{
  return &type metadata for KernelResourceIdentifier;
}

ValueMetadata *type metadata accessor for KextExcludeListKeys()
{
  return &type metadata for KextExcludeListKeys;
}

ValueMetadata *type metadata accessor for EntitlementKeys()
{
  return &type metadata for EntitlementKeys;
}

ValueMetadata *type metadata accessor for StagingConstants()
{
  return &type metadata for StagingConstants;
}

ValueMetadata *type metadata accessor for PrebootStashingConstants()
{
  return &type metadata for PrebootStashingConstants;
}

ValueMetadata *type metadata accessor for MountedVolumeConstants()
{
  return &type metadata for MountedVolumeConstants;
}

ValueMetadata *type metadata accessor for DataStashingConstants()
{
  return &type metadata for DataStashingConstants;
}

ValueMetadata *type metadata accessor for DeveloperKitConstants()
{
  return &type metadata for DeveloperKitConstants;
}

ValueMetadata *type metadata accessor for MaxLengthConstants()
{
  return &type metadata for MaxLengthConstants;
}

ValueMetadata *type metadata accessor for TimeoutConstants()
{
  return &type metadata for TimeoutConstants;
}

ValueMetadata *type metadata accessor for NVRAMKeys()
{
  return &type metadata for NVRAMKeys;
}

ValueMetadata *type metadata accessor for LogSignposts()
{
  return &type metadata for LogSignposts;
}

ValueMetadata *type metadata accessor for LifeCycleLogSignPosts()
{
  return &type metadata for LifeCycleLogSignPosts;
}

ValueMetadata *type metadata accessor for ExtendedAttributeConstants()
{
  return &type metadata for ExtendedAttributeConstants;
}

ValueMetadata *type metadata accessor for DistNoteConstants()
{
  return &type metadata for DistNoteConstants;
}

uint64_t *initializeBufferWithCopyOfBuffer for VariantKind(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for VariantKind(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for VariantKind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for VariantKind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for VariantKind(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for VariantKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 4;
    }
  }
  return result;
}

uint64_t sub_1000A4878(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000A4890(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for VariantKind()
{
  return &type metadata for VariantKind;
}

unsigned char *_s10driverkitd18PageProtectionTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A498CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureBootPolicy()
{
  return &type metadata for SecureBootPolicy;
}

unsigned char *storeEnumTagSinglePayload for BootEnvironment(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000A4A60);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BootEnvironment()
{
  return &type metadata for BootEnvironment;
}

ValueMetadata *type metadata accessor for KcgenModeOptions()
{
  return &type metadata for KcgenModeOptions;
}

ValueMetadata *type metadata accessor for AppleCopyright()
{
  return &type metadata for AppleCopyright;
}

void *initializeBufferWithCopyOfBuffer for OSBundleRequiredValue(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OSBundleRequiredValue(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for OSBundleRequiredValue(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OSBundleRequiredValue(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OSBundleRequiredValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OSBundleRequiredValue()
{
  return &type metadata for OSBundleRequiredValue;
}

unint64_t sub_1000A4BF4()
{
  unint64_t result = qword_10017E930;
  if (!qword_10017E930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E930);
  }
  return result;
}

unint64_t sub_1000A4C48()
{
  unint64_t result = qword_10017E938;
  if (!qword_10017E938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E938);
  }
  return result;
}

unint64_t sub_1000A4C9C()
{
  unint64_t result = qword_10017E940;
  if (!qword_10017E940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E940);
  }
  return result;
}

uint64_t sub_1000A4D00()
{
  return sub_1000A4EDC();
}

uint64_t sub_1000A4D0C(uint64_t a1)
{
  return sub_1000A4F30(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_requests);
}

uint64_t (*sub_1000A4D18())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000A4D74()
{
  return sub_100047E38();
}

uint64_t sub_1000A4D80(uint64_t a1)
{
  return sub_100047E8C(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_driverBinManager);
}

uint64_t (*sub_1000A4D8C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000A4DE8()
{
  return sub_100047E38();
}

uint64_t sub_1000A4DF4(uint64_t a1)
{
  return sub_100047E8C(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_kernelStateManager);
}

uint64_t (*sub_1000A4E00())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000A4E5C()
{
  return sub_100047E38();
}

uint64_t sub_1000A4E68(uint64_t a1)
{
  return sub_100047E8C(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_applicationManager);
}

uint64_t (*sub_1000A4E74())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000A4ED0()
{
  return sub_1000A4EDC();
}

uint64_t sub_1000A4EDC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A4F24(uint64_t a1)
{
  return sub_1000A4F30(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_subscribers);
}

uint64_t sub_1000A4F30(uint64_t a1, void *a2)
{
  unsigned int v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *unsigned int v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000A4F80())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000A4FDC(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = swift_allocObject();
  sub_1000A5034(a1, a2, a3);
  return v6;
}

uint64_t sub_1000A5034(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_driverBinManager) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_kernelStateManager) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_applicationManager) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_subscribers) = _swiftEmptyArrayStorage;
  uint64_t v6 = (void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB);
  *uint64_t v6 = 0;
  v6[1] = 0;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_stateManagerQueue) = a1;
  uint64_t v7 = v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_databasePath;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
  sub_10000372C(a3, v3 + 16);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_requests) = _swiftEmptyArrayStorage;
  return v3;
}

uint64_t sub_1000A515C()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 184);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 176))(v3);
  if (result)
  {
    uint64_t v5 = type metadata accessor for DriverBinManager();
    sub_1000E94E0(v0, (uint64_t)&off_10016EC40, v5, (uint64_t)&off_10016B4F0);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A5214()
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 208);
  uint64_t v1 = swift_retain();

  return v3(v1);
}

uint64_t sub_1000A5268()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 232);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 224))(v3);
  if (result)
  {
    uint64_t v5 = type metadata accessor for ApplicationManager();
    sub_1000E94E0(v0, (uint64_t)&off_10016EC40, v5, (uint64_t)&off_10016A7D8);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A5320(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v2;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = sub_1000A55E4;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000AFF8;
  aBlock[3] = &unk_10016EBF0;
  unint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_1000A9D60((unint64_t *)&qword_10017EBD0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100004700((uint64_t *)&unk_10017DEB0);
  sub_1000928DC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_1000A55CC()
{
  return sub_1000A9AB0((void (*)(void))&_swift_release);
}

unint64_t sub_1000A55E4()
{
  uint64_t v1 = *(uint64_t (**)(unsigned char *))(**(void **)(v0 + 16) + 168);
  swift_retain();
  uint64_t v2 = (void (*)(unsigned char *, void))v1(v7);
  uint64_t v4 = v3;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v2(v7, 0);
  uint64_t v5 = type metadata accessor for ApprovalManager();
  return sub_1000EA080(0xD00000000000001BLL, (char *)0x800000010014B740, v5, &off_10016EC40);
}

uint64_t sub_1000A56E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000A56F4()
{
  return swift_release();
}

uint64_t sub_1000A56FC()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_stateManagerQueue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 152))(result);
    (*(void (**)(void *))(*(void *)v0 + 160))(_swiftEmptyArrayStorage);
    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1000A5864()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v46 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v46 - v12;
  if (*(void *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB))
  {
    uint64_t v14 = *(void **)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB);
LABEL_15:
    swift_bridgeObjectRetain();
    return (char *)v14;
  }
  uint64_t v52 = v11;
  uint64_t v46 = (void *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB);
  uint64_t v15 = sub_1000EFE9C();
  unint64_t v16 = *(void (**)(void))(v3 + 16);
  uint64_t v53 = v15;
  uint64_t v50 = (void (*)(void (*)(void, void), uint64_t, uint64_t))v16;
  uint64_t v51 = v3 + 16;
  v16(v13);
  swift_retain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  char v48 = v6;
  uint64_t v49 = v9;
  uint64_t v54 = v3;
  if (v19)
  {
    char v20 = (uint8_t *)swift_slowAlloc();
    v56[0] = swift_slowAlloc();
    *(_DWORD *)char v20 = 136315138;
    uint64_t v47 = v2;
    uint64_t v21 = URL.path.getter();
    uint64_t v55 = sub_100003F90(v21, v22, v56);
    uint64_t v2 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Loading approvals database from %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v23 = *(void (**)(char *, uint64_t))(v54 + 8);
  }
  else
  {

    swift_release_n();
    uint64_t v23 = *(void (**)(char *, uint64_t))(v3 + 8);
  }
  v23(v13, v2);
  uint64_t v24 = *(void *)(v0 + 40);
  uint64_t v25 = *(void *)(v0 + 48);
  sub_1000036B0((void *)(v1 + 16), *(void *)(v1 + 40));
  sub_1001297F4(v24, v25);
  uint64_t v26 = v56[4];
  sub_1000036B0(v56, v56[3]);
  uint64_t v27 = URL.path.getter();
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(v26 + 16))(v27);
  unint64_t v30 = v29;
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)v56);
  if (v30 >> 60 != 15)
  {
    v50((void (*)(void, void))v52, v53, v2);
    char v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Loading approvals database, decoding data", v43, 2u);
      swift_slowDealloc();
    }

    v23((char *)v52, v2);
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_1000A96F4();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    sub_10002404C(v28, v30);
    swift_release();
    uint64_t v14 = (void *)v56[0];
    uint64_t v44 = v56[1];
    uint64_t v45 = v46;
    void *v46 = v56[0];
    v45[1] = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v52 = v23;
  int v31 = errno.getter();
  uint64_t result = strerror(v31);
  if (result)
  {
    uint64_t v33 = String.init(cString:)();
    unint64_t v35 = v34;
    uint64_t v36 = v49;
    v50((void (*)(void, void))v49, v53, v2);
    swift_bridgeObjectRetain();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      Swift::String v39 = (uint8_t *)swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *(_DWORD *)Swift::String v39 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_100003F90(v33, v35, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "contentsOfFile failed to read approvals database: %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      Swift::String v40 = v49;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      Swift::String v40 = v36;
    }
    v52(v40, v2);
    uint64_t v14 = sub_10006A4BC();
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

char *sub_1000A6080()
{
  uint64_t v1 = sub_100004700(&qword_10017BEF0);
  __chkstk_darwin(v1 - 8);
  v332 = (char *)&v290 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v337 = type metadata accessor for DriverBinEntry();
  *(void *)&long long v334 = *(void *)(v337 - 8);
  uint64_t v3 = __chkstk_darwin(v337);
  unint64_t v340 = (unint64_t)&v290 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v333 = (uint64_t)&v290 - v5;
  uint64_t v342 = type metadata accessor for Logger();
  uint64_t v296 = *(void *)(v342 - 8);
  uint64_t v6 = __chkstk_darwin(v342);
  v293 = (char *)&v290 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  v319 = (char *)&v290 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v290 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  v291 = (char *)&v290 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v294 = (char *)&v290 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v326 = (char *)&v290 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v323 = (char *)&v290 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v305 = (char *)&v290 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v312 = (char *)&v290 - v24;
  __chkstk_darwin(v23);
  v309 = (char *)&v290 - v25;
  uint64_t v26 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v26 - 8);
  v314 = (char *)&v290 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v346 = type metadata accessor for URL();
  uint64_t v295 = *(void *)(v346 - 8);
  uint64_t v28 = __chkstk_darwin(v346);
  v292 = (char *)&v290 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  v325 = (char *)&v290 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (uint64_t)&v290 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  v304 = (char *)&v290 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v311 = (char *)&v290 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v41 = (uint64_t)&v290 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  v308 = (char *)&v290 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  *(void *)&long long v327 = (char *)&v290 - v45;
  __chkstk_darwin(v44);
  v345 = (char *)&v290 - v46;
  uint64_t v47 = type metadata accessor for LookupSpec();
  uint64_t v48 = __chkstk_darwin(v47);
  uint64_t v50 = (char *)&v290 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = (*(uint64_t (**)(uint64_t))(*v0 + 344))(v48);
  uint64_t v320 = v52;
  uint64_t v321 = v51;
  v356 = sub_10006A4BC();
  unint64_t v357 = v53;
  uint64_t v54 = *(uint64_t (**)(void))(*v0 + 176);
  uint64_t v299 = *v0 + 176;
  v300 = v54;
  uint64_t result = (char *)v54();
  if (!result) {
    goto LABEL_145;
  }
  uint64_t v56 = (*(uint64_t (**)(char *))(*(void *)result + 360))(result);
  unint64_t v343 = v57;
  uint64_t v59 = v58;
  uint64_t v60 = swift_release();
  uint64_t v61 = *(uint64_t (**)(uint64_t))(*v0 + 200);
  v341 = v0;
  uint64_t result = (char *)v61(v60);
  if (result)
  {
    uint64_t v62 = *((void *)result + 7);
    swift_retain();
    uint64_t v63 = swift_release();
    uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 144))(v63);
    swift_release();
    sub_10005FAF8(v64, (uint64_t)v358);
    swift_release();
    swift_storeEnumTagMultiPayload();
    uint64_t v65 = sub_10005E4B0((uint64_t)v50, 0, 0);
    sub_100011138((uint64_t)v358);
    sub_1000A9800((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for LookupSpec);
    if (v65) {
      unint64_t v66 = (unint64_t)v65;
    }
    else {
      unint64_t v66 = (unint64_t)_swiftEmptyArrayStorage;
    }
    uint64_t v336 = v56;
    uint64_t v67 = sub_100040BCC();
    v315 = (void *)sub_100012700(v67);
    swift_bridgeObjectRelease();
    if (v66 >> 62) {
      goto LABEL_139;
    }
    uint64_t v69 = *(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_8:
    uint64_t v71 = (uint64_t)v345;
    uint64_t v70 = v346;
    uint64_t v324 = v41;
    uint64_t v310 = v34;
    v290 = v12;
    v344 = (void (*)(char *, uint64_t))v66;
    if (v69)
    {
      v318 = v341 + 2;
      unint64_t v343 = v66 & 0xC000000000000001;
      v339 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v295 + 48);
      v313 = (void (**)(uint64_t, uint64_t, uint64_t))(v295 + 32);
      v329 = (void (**)(char *, char *, uint64_t))(v295 + 16);
      v306 = (void (**)(char *, uint64_t))(v296 + 8);
      v307 = (void (**)(char *, uint64_t, uint64_t))(v296 + 16);
      v331 = (char *)_swiftEmptyArrayStorage;
      uint64_t v41 = 4;
      uint64_t v303 = 0xD000000000000017;
      v301 = (void *)0x800000010014B550;
      v302 = (void *)0x800000010014B530;
      v316 = (void *)0x800000010014B5E0;
      uint64_t v317 = (uint64_t)&type metadata for () + 8;
      *(void *)&long long v68 = 136315394;
      long long v298 = v68;
      v297 = (char *)&type metadata for Any + 8;
      unint64_t v66 = v337;
      uint64_t v12 = (char *)v340;
      uint64_t v34 = (uint64_t)v314;
      v338 = (void (**)(char *, uint64_t))v59;
      v335 = (void (**)(void, void))v69;
      v328 = (void *)(v295 + 8);
      while (1)
      {
        uint64_t v79 = v41 - 4;
        if (v343)
        {
          uint64_t v59 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v80 = (void *)(v41 - 3);
          if (__OFADD__(v79, 1)) {
            goto LABEL_136;
          }
        }
        else
        {
          uint64_t v59 = *((void *)v344 + v41);
          swift_retain();
          uint64_t v80 = (void *)(v41 - 3);
          if (__OFADD__(v79, 1))
          {
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            swift_bridgeObjectRetain();
            uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            goto LABEL_8;
          }
        }
        (*(void (**)(void))(**(void **)(v59 + 24) + 152))();
        if ((*v339)(v34, 1, v70) == 1) {
          break;
        }
        (*v313)(v71, v34, v70);
        char v91 = sub_10000ADE4(v71, (uint64_t)v315);
        uint64_t v92 = v71;
        uint64_t v93 = *v329;
        uint64_t v94 = v327;
        uint64_t v95 = ((uint64_t (*)(void, uint64_t, uint64_t))*v329)(v327, v92, v70);
        v330 = v80;
        if (v91)
        {
          v322 = (char *)*v328;
          ((void (*)(uint64_t, uint64_t))v322)(v94, v70);
        }
        else
        {
          uint64_t result = (char *)((uint64_t (*)(uint64_t))v300)(v95);
          if (!result) {
            goto LABEL_144;
          }
          uint64_t v96 = v327;
          char v97 = (*(uint64_t (**)(void))(*(void *)result + 392))(v327);
          swift_release();
          uint64_t v98 = v96;
          uint64_t v99 = (char *)*v328;
          uint64_t v100 = v346;
          ((void (*)(uint64_t, uint64_t))*v328)(v98, v346);
          if ((v97 & 1) == 0)
          {
            uint64_t v81 = ((uint64_t (*)(char *, uint64_t))v99)(v345, v100);
            uint64_t v80 = v330;
            uint64_t v34 = (uint64_t)v314;
            goto LABEL_20;
          }
          v322 = v99;
          uint64_t v70 = v100;
        }
        uint64_t v101 = sub_1000EFE9C();
        uint64_t v102 = v309;
        (*v307)(v309, v101, v342);
        uint64_t v103 = v308;
        v93(v308, v345, v70);
        swift_retain_n();
        unint64_t v104 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v104, v105))
        {
          uint64_t v106 = swift_slowAlloc();
          uint64_t v352 = swift_slowAlloc();
          *(_DWORD *)uint64_t v106 = v298;
          uint64_t v107 = (*(uint64_t (**)(void))(**(void **)(v59 + 24) + 144))();
          *(void *)(v106 + 4) = sub_100003F90(v107, v108, &v352);
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v106 + 12) = 2080;
          uint64_t v109 = URL.path.getter();
          *(void *)(v106 + 14) = sub_100003F90(v109, v110, &v352);
          swift_bridgeObjectRelease();
          uint64_t v111 = v103;
          uint64_t v112 = (void (*)(char *, uint64_t))v322;
          ((void (*)(char *, uint64_t))v322)(v111, v346);
          _os_log_impl((void *)&_mh_execute_header, v104, v105, "Skipping third party driver %s at %s during first approvals database update pass", (uint8_t *)v106, 0x16u);
          swift_arrayDestroy();
          uint64_t v70 = v346;
          swift_slowDealloc();
          unint64_t v66 = v337;
          swift_slowDealloc();
          swift_release();

          (*v306)(v102, v342);
          uint64_t v71 = (uint64_t)v345;
          v112(v345, v70);
          uint64_t v12 = (char *)v340;
          uint64_t v34 = (uint64_t)v314;
        }
        else
        {

          uint64_t v113 = (void (*)(char *, uint64_t))v322;
          ((void (*)(char *, uint64_t))v322)(v103, v70);
          swift_release_n();
          (*v306)(v102, v342);
          uint64_t v114 = v345;
          v113(v345, v70);
          uint64_t v12 = (char *)v340;
          uint64_t v34 = (uint64_t)v314;
          uint64_t v71 = (uint64_t)v114;
        }
        uint64_t v78 = v335;
        uint64_t v80 = v330;
LABEL_12:
        ++v41;
        uint64_t v59 = (uint64_t)v338;
        if (v80 == v78) {
          goto LABEL_36;
        }
      }
      uint64_t v81 = sub_1000130EC(v34, (uint64_t *)&unk_10017FA60);
LABEL_20:
      uint64_t v82 = (*(uint64_t (**)(uint64_t))(**(void **)(v59 + 24) + 144))(v81);
      char v74 = sub_10006A4CC(v82, v83, 0, 0xF000000000000000, v321);
      swift_bridgeObjectRelease();
      if (v74 == 3)
      {
        uint64_t v352 = 0;
        unint64_t v353 = 0xE000000000000000;
        _StringGuts.grow(_:)(54);
        v84._object = v302;
        v84._uint64_t countAndFlagsBits = v303;
        String.append(_:)(v84);
        *(void *)&long long v349 = v59;
        type metadata accessor for RealizedInfo(0);
        _print_unlocked<A, B>(_:_:)();
        v85._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        v85._object = v301;
        String.append(_:)(v85);
        LOBYTE(v349) = 1;
        sub_1000A9748();
        v86._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v86);
        swift_bridgeObjectRelease();
        uint64_t v87 = v352;
        unint64_t v88 = v353;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v331 = sub_10000C3BC(0, *((void *)v331 + 2) + 1, 1, v331);
        }
        unint64_t v90 = *((void *)v331 + 2);
        unint64_t v89 = *((void *)v331 + 3);
        if (v90 >= v89 >> 1) {
          v331 = sub_10000C3BC((char *)(v89 > 1), v90 + 1, 1, v331);
        }
        uint64_t v72 = v331;
        *((void *)v331 + 2) = v90 + 1;
        uint64_t v73 = &v72[16 * v90];
        *((void *)v73 + 4) = v87;
        *((void *)v73 + 5) = v88;
        char v74 = 1;
        uint64_t v12 = (char *)v340;
      }
      uint64_t v75 = (*(uint64_t (**)(void))(**(void **)(v59 + 24) + 144))();
      uint64_t v77 = ApprovalDBEntry.init(driverIdentifier:source:approvalState:)(v75, v76, 0, 0xF000000000000000, v74, (uint64_t)v359);
      __chkstk_darwin(v77);
      sub_1000D5CA8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/KernelManagement_executables/driverkitd/ApprovalManager.swift", 99, 2, 127, (uint64_t)v318, 0xD000000000000026, (uint64_t)v316, (void (*)(uint64_t))sub_1000A9DA8);
      swift_release();
      sub_100073D08((uint64_t)v359);
      uint64_t v71 = (uint64_t)v345;
      uint64_t v70 = v346;
      uint64_t v78 = v335;
      goto LABEL_12;
    }
    v331 = (char *)_swiftEmptyArrayStorage;
    unint64_t v66 = v337;
    uint64_t v12 = (char *)v340;
LABEL_36:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v34 = 0;
    uint64_t v116 = v336;
    uint64_t v117 = *(void *)(v336 + 64);
    v329 = (void (**)(char *, char *, uint64_t))(v336 + 64);
    uint64_t v118 = 1 << *(unsigned char *)(v336 + 32);
    uint64_t v119 = -1;
    if (v118 < 64) {
      uint64_t v119 = ~(-1 << v118);
    }
    unint64_t v120 = v119 & v117;
    v328 = v341 + 2;
    v330 = (void *)((unint64_t)(v118 + 63) >> 6);
    v345 = (char *)(v295 + 16);
    v335 = (void (**)(void, void))(v295 + 8);
    v338 = (void (**)(char *, uint64_t))(v296 + 8);
    v339 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v296 + 16);
    *(void *)&long long v115 = 136315138;
    long long v327 = v115;
    v322 = (char *)&type metadata for Any + 8;
    v315 = (void *)0x800000010014B550;
    v316 = (void *)0x800000010014B610;
    uint64_t v317 = 0x800000010014B5E0;
    v318 = (void *)((char *)&type metadata for () + 8);
    uint64_t v41 = v324;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (v120)
          {
            v344 = (void (*)(char *, uint64_t))((v120 - 1) & v120);
            unint64_t v122 = __clz(__rbit64(v120)) | (v34 << 6);
          }
          else
          {
            uint64_t v123 = v34 + 1;
            if (__OFADD__(v34, 1)) {
              goto LABEL_137;
            }
            if (v123 >= (uint64_t)v330)
            {
LABEL_89:
              swift_release();
              uint64_t v199 = swift_allocObject();
              *(void *)(v199 + 16) = _swiftEmptyArrayStorage;
              unint64_t v200 = (*(uint64_t (**)(void))(*v341 + 312))();
              unint64_t v202 = v200;
              if (v200 >> 62) {
                uint64_t v203 = _CocoaArrayWrapper.endIndex.getter();
              }
              else {
                uint64_t v203 = *(void *)((v200 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              uint64_t v336 = v199;
              if (!v203)
              {
                uint64_t v70 = 0;
                goto LABEL_110;
              }
              if (v203 < 1)
              {
                __break(1u);
LABEL_142:
                v331 = sub_10000C3BC(0, *((void *)v331 + 2) + 1, 1, v331);
LABEL_114:
                unint64_t v225 = *((void *)v331 + 2);
                unint64_t v224 = *((void *)v331 + 3);
                if (v225 >= v224 >> 1) {
                  v331 = sub_10000C3BC((char *)(v224 > 1), v225 + 1, 1, v331);
                }
                v226 = v331;
                *((void *)v331 + 2) = v225 + 1;
                v227 = &v226[16 * v225];
                *((void *)v227 + 4) = 0xD000000000000019;
                *((void *)v227 + 5) = 0x800000010014B640;
              }
              else
              {
                uint64_t v204 = 0;
                uint64_t v70 = 0;
                unint64_t v340 = v202 & 0xC000000000000001;
                *(void *)&long long v201 = 136315394;
                long long v334 = v201;
                v332 = (char *)0x800000010014B660;
                uint64_t v333 = (uint64_t)&type metadata for Any + 8;
                v330 = (void *)0x800000010014B680;
                unint64_t v343 = v203;
                v344 = (void (*)(char *, uint64_t))v202;
                do
                {
                  if (v340)
                  {
                    uint64_t v205 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else
                  {
                    uint64_t v205 = *(void *)(v202 + 8 * v204 + 32);
                    swift_retain();
                  }
                  long long v206 = *(_OWORD *)(v205 + 32);
                  long long v349 = *(_OWORD *)(v205 + 16);
                  long long v350 = v206;
                  LOBYTE(v351) = *(unsigned char *)(v205 + 48);
                  sub_100073C70((uint64_t)&v349);
                  char v207 = sub_10006BC94((uint64_t)&v349);
                  sub_100073D08((uint64_t)&v349);
                  if (v207)
                  {
                    uint64_t v352 = 0;
                    unint64_t v353 = 0xE000000000000000;
                    _StringGuts.grow(_:)(61);
                    v208._uint64_t countAndFlagsBits = 0xD000000000000017;
                    v208._object = v332;
                    String.append(_:)(v208);
                    *(void *)&long long v347 = v205;
                    type metadata accessor for ApprovalStateUpdateRequest();
                    sub_1000A9D60(&qword_10017E968, (void (*)(uint64_t))type metadata accessor for ApprovalStateUpdateRequest);
                    v209._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v209);
                    swift_bridgeObjectRelease();
                    v210._uint64_t countAndFlagsBits = 0xD000000000000024;
                    v210._object = v330;
                    String.append(_:)(v210);
                    uint64_t v211 = v352;
                    unint64_t v212 = v353;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      v331 = sub_10000C3BC(0, *((void *)v331 + 2) + 1, 1, v331);
                    }
                    unint64_t v214 = *((void *)v331 + 2);
                    unint64_t v213 = *((void *)v331 + 3);
                    if (v214 >= v213 >> 1) {
                      v331 = sub_10000C3BC((char *)(v213 > 1), v214 + 1, 1, v331);
                    }
                    v215 = v331;
                    *((void *)v331 + 2) = v214 + 1;
                    v216 = &v215[16 * v214];
                    *((void *)v216 + 4) = v211;
                    *((void *)v216 + 5) = v212;
                    uint64_t v199 = v336;
                  }
                  v217 = *(void **)(v199 + 16);
                  swift_retain();
                  sub_1000A98C0(0, 0);
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  *(void *)(v199 + 16) = v217;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    v217 = sub_1000A95D0(0, v217[2] + 1, 1, v217);
                    *(void *)(v199 + 16) = v217;
                  }
                  unint64_t v220 = v217[2];
                  unint64_t v219 = v217[3];
                  if (v220 >= v219 >> 1) {
                    v217 = sub_1000A95D0((void *)(v219 > 1), v220 + 1, 1, v217);
                  }
                  ++v204;
                  v217[2] = v220 + 1;
                  v221 = &v217[3 * v220];
                  v221[4] = v205;
                  v221[5] = 0;
                  *((unsigned char *)v221 + 48) = 0;
                  *(void *)(v199 + 16) = v217;
                  sub_100096D00(0, 0);
                  swift_release();
                  unint64_t v202 = (unint64_t)v344;
                }
                while (v343 != v204);
LABEL_110:
                swift_bridgeObjectRelease();
                uint64_t v352 = (uint64_t)v356;
                unint64_t v353 = v357;
                *(void *)&long long v347 = v321;
                *((void *)&v347 + 1) = v320;
                sub_1000A98CC();
                char v222 = dispatch thunk of static Equatable.== infix(_:_:)();
                swift_bridgeObjectRelease();
                if (v222)
                {
                  uint64_t v59 = v342;
                  unint64_t v66 = (unint64_t)v328;
                  goto LABEL_117;
                }
                swift_bridgeObjectRetain();
                BOOL v223 = sub_1000EF0B4();
                swift_bridgeObjectRelease();
                uint64_t v59 = v342;
                unint64_t v66 = (unint64_t)v328;
                if (v223)
                {
                  if (swift_isUniquelyReferenced_nonNull_native()) {
                    goto LABEL_114;
                  }
                  goto LABEL_142;
                }
              }
LABEL_117:
              swift_bridgeObjectRetain();
              BOOL v228 = sub_1000EF0B4();
              swift_bridgeObjectRelease();
              if (v228)
              {
                sub_1000A8E34(0, (uint64_t)v341, v199);
                swift_bridgeObjectRelease();
                swift_release();
                v229 = 0;
              }
              else
              {
                uint64_t v230 = sub_1000EFE9C();
                v345 = (char *)*v339;
                ((void (*)(char *, uint64_t, uint64_t))v345)(v294, v230, v59);
                v231 = Logger.logObject.getter();
                os_log_type_t v232 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v231, v232))
                {
                  v233 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)v233 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v231, v232, "Saving appproval db, encoding", v233, 2u);
                  swift_slowDealloc();
                }

                v234 = *v338;
                (*v338)(v294, v59);
                type metadata accessor for PropertyListEncoder();
                swift_allocObject();
                PropertyListEncoder.init()();
                uint64_t v352 = (uint64_t)v356;
                unint64_t v353 = v357;
                sub_1000A9920();
                swift_bridgeObjectRetain();
                uint64_t v235 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
                uint64_t v237 = v70;
                if (v70)
                {
                  swift_release();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  unint64_t v340 = v235;
                  unint64_t v343 = v236;
                  swift_release();
                  swift_bridgeObjectRelease();
                  v238 = v291;
                  uint64_t v337 = v230;
                  ((void (*)(char *, uint64_t, uint64_t))v345)(v291, v230, v59);
                  v239 = Logger.logObject.getter();
                  uint64_t v240 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v239, (os_log_type_t)v240))
                  {
                    v241 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)v241 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v239, (os_log_type_t)v240, "Writing new approval db contents", v241, 2u);
                    v238 = v291;
                    swift_slowDealloc();
                  }

                  v344 = v234;
                  v234(v238, v59);
                  v242 = v341;
                  *(void *)&long long v334 = (char *)v341 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_databasePath;
                  URL.appendingPathExtension(_:)();
                  uint64_t v243 = v242[5];
                  uint64_t v244 = v242[6];
                  sub_1000036B0((void *)v66, v243);
                  sub_1001297F4(v243, v244);
                  uint64_t v245 = v354;
                  uint64_t v246 = v355;
                  sub_1000036B0(&v352, v354);
                  uint64_t v247 = URL.path.getter();
                  uint64_t v249 = v248;
                  uint64_t v250 = v340;
                  unint64_t v251 = v343;
                  sub_100012DE4(v340, v343);
                  unint64_t v252 = sub_10001DB3C((uint64_t)_swiftEmptyArrayStorage);
                  LOBYTE(v247) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v246 + 40))(v247, v249, v250, v251, v252, v245, v246);
                  swift_bridgeObjectRelease();
                  sub_100012A10(v250, v251);
                  swift_bridgeObjectRelease();
                  sub_10000478C((uint64_t)&v352);
                  if (v247)
                  {
                    v253 = v290;
                    uint64_t v254 = v342;
                    ((void (*)(char *, uint64_t, uint64_t))v345)(v290, v337, v342);
                    v255 = Logger.logObject.getter();
                    os_log_type_t v256 = static os_log_type_t.info.getter();
                    if (os_log_type_enabled(v255, v256))
                    {
                      v257 = (uint8_t *)swift_slowAlloc();
                      *(_WORD *)v257 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v255, v256, "Replacing old approval db contents", v257, 2u);
                      swift_slowDealloc();
                    }

                    v344(v253, v254);
                    v258 = v341;
                    uint64_t v259 = v341[5];
                    uint64_t v260 = v341[6];
                    v261 = v328;
                    sub_1000036B0(v328, v259);
                    sub_1001297F4(v259, v260);
                    uint64_t v262 = v354;
                    uint64_t v263 = v355;
                    sub_1000036B0(&v352, v354);
                    v264 = v292;
                    (*(void (**)(void, char *, void, void, void, void, uint64_t, uint64_t))(v263 + 88))(v334, v292, 0, 0, 0, 0, v262, v263);
                    sub_10000478C((uint64_t)&v352);
                    uint64_t v283 = v258[5];
                    uint64_t v284 = v258[6];
                    sub_1000036B0(v261, v283);
                    sub_1001297F4(v283, v284);
                    uint64_t v285 = v354;
                    uint64_t v286 = v355;
                    sub_1000036B0(&v352, v354);
                    (*(void (**)(char *, uint64_t, uint64_t))(v286 + 104))(v264, v285, v286);
                    sub_10000478C((uint64_t)&v352);
                    unint64_t v287 = v357;
                    v288 = v341;
                    v289 = (void *)((char *)v341 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB);
                    void *v289 = v356;
                    v289[1] = v287;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    sub_1000A8E34(0, (uint64_t)v288, v336);
                    sub_100012A10(v340, v343);
                    (*v335)(v264, v346);
                    swift_release();
                    v229 = v331;
                    goto LABEL_135;
                  }
                  int v265 = errno.getter();
                  uint64_t result = strerror(v265);
                  uint64_t v230 = v337;
                  if (!result) {
                    goto LABEL_147;
                  }
                  uint64_t v266 = String.init(cString:)();
                  v268 = v267;
                  uint64_t v352 = 0;
                  unint64_t v353 = 0xE000000000000000;
                  _StringGuts.grow(_:)(30);
                  swift_bridgeObjectRelease();
                  uint64_t v352 = 0x6946657461657263;
                  unint64_t v353 = 0xEB0000000020656CLL;
                  sub_1000A9D60(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
                  v269 = v292;
                  uint64_t v270 = v346;
                  v271._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                  String.append(_:)(v271);
                  swift_bridgeObjectRelease();
                  v272._uint64_t countAndFlagsBits = 0x3A64656C69616620;
                  v272._object = (void *)0xEF206F6E72726520;
                  String.append(_:)(v272);
                  v273._uint64_t countAndFlagsBits = v266;
                  v273._object = v268;
                  String.append(_:)(v273);
                  swift_bridgeObjectRelease();
                  uint64_t v274 = v352;
                  unint64_t v275 = v353;
                  sub_100012E3C();
                  uint64_t v237 = swift_allocError();
                  *(void *)uint64_t v276 = v274;
                  *(void *)(v276 + 8) = v275;
                  *(_OWORD *)(v276 + 16) = 0u;
                  *(_OWORD *)(v276 + 32) = 0u;
                  *(_OWORD *)(v276 + 48) = 0u;
                  *(void *)(v276 + 64) = 0;
                  *(unsigned char *)(v276 + 72) = 19;
                  swift_willThrow();
                  sub_100012A10(v340, v343);
                  (*v335)(v269, v270);
                  uint64_t v59 = v342;
                  uint64_t v199 = v336;
                  v234 = v344;
                }
                v277 = v293;
                ((void (*)(char *, uint64_t, uint64_t))v345)(v293, v230, v59);
                swift_errorRetain();
                swift_errorRetain();
                v278 = Logger.logObject.getter();
                os_log_type_t v279 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v278, v279))
                {
                  v280 = (uint8_t *)swift_slowAlloc();
                  uint64_t v352 = swift_slowAlloc();
                  *(_DWORD *)v280 = v327;
                  *(void *)&long long v347 = v237;
                  swift_errorRetain();
                  sub_100004700(&qword_10017EB50);
                  v344 = v234;
                  uint64_t v281 = String.init<A>(describing:)();
                  *(void *)&long long v347 = sub_100003F90(v281, v282, &v352);
                  uint64_t v199 = v336;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  swift_errorRelease();
                  swift_errorRelease();
                  _os_log_impl((void *)&_mh_execute_header, v278, v279, "Failed to write approval database during state update: %s", v280, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  v344(v293, v342);
                }
                else
                {
                  swift_errorRelease();
                  swift_errorRelease();

                  v234(v277, v59);
                }
                swift_errorRetain();
                sub_1000A8E34(v237, (uint64_t)v341, v199);
                swift_errorRelease();
                swift_errorRelease();
                swift_release();
                swift_bridgeObjectRelease();
                v229 = 0;
              }
LABEL_135:
              swift_bridgeObjectRelease();
              return v229;
            }
            unint64_t v124 = (unint64_t)v329[v123];
            ++v34;
            if (!v124)
            {
              uint64_t v34 = v123 + 1;
              if (v123 + 1 >= (uint64_t)v330) {
                goto LABEL_89;
              }
              unint64_t v124 = (unint64_t)v329[v34];
              if (!v124)
              {
                uint64_t v34 = v123 + 2;
                if (v123 + 2 >= (uint64_t)v330) {
                  goto LABEL_89;
                }
                unint64_t v124 = (unint64_t)v329[v34];
                if (!v124)
                {
                  uint64_t v34 = v123 + 3;
                  if (v123 + 3 >= (uint64_t)v330) {
                    goto LABEL_89;
                  }
                  unint64_t v124 = (unint64_t)v329[v34];
                  if (!v124)
                  {
                    uint64_t v125 = v123 + 4;
                    if (v125 >= (uint64_t)v330) {
                      goto LABEL_89;
                    }
                    unint64_t v124 = (unint64_t)v329[v125];
                    if (!v124)
                    {
                      while (1)
                      {
                        uint64_t v34 = v125 + 1;
                        if (__OFADD__(v125, 1)) {
                          goto LABEL_138;
                        }
                        if (v34 >= (uint64_t)v330) {
                          goto LABEL_89;
                        }
                        unint64_t v124 = (unint64_t)v329[v34];
                        ++v125;
                        if (v124) {
                          goto LABEL_58;
                        }
                      }
                    }
                    uint64_t v34 = v125;
                  }
                }
              }
            }
LABEL_58:
            v344 = (void (*)(char *, uint64_t))((v124 - 1) & v124);
            unint64_t v122 = __clz(__rbit64(v124)) + (v34 << 6);
          }
          uint64_t v126 = v333;
          sub_1000461D0(*(void *)(v116 + 56) + *(void *)(v334 + 72) * v122, v333, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
          sub_1000A979C(v126, (uint64_t)v12);
          uint64_t v127 = *(void (**)(char *, uint64_t, uint64_t))v345;
          uint64_t v128 = (*(uint64_t (**)(uint64_t, char *, uint64_t))v345)(v41, &v12[*(int *)(v66 + 28)], v70);
          uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*v341 + 224))(v128);
          if (!result)
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
            goto LABEL_146;
          }
          uint64_t v129 = (*(uint64_t (**)(void))(*(void *)result + 216))();
          swift_release();
          uint64_t v130 = &v12[*(int *)(v66 + 20)];
          uint64_t v131 = type metadata accessor for ApplicationRecord(0);
          uint64_t v132 = v131;
          uint64_t v133 = (uint64_t *)&v130[*(int *)(v131 + 32)];
          uint64_t v134 = *v133;
          unint64_t v135 = v133[1];
          uint64_t v136 = *(void *)(v129 + 16);
          unint64_t v343 = v34;
          if (v136)
          {
            sub_100012DE4(v134, v135);
            unint64_t v137 = sub_10000CF34(v134, v135);
            uint64_t v139 = *(void *)(v132 - 8);
            uint64_t v140 = v332;
            if (v138)
            {
              sub_1000461D0(*(void *)(v129 + 56) + *(void *)(*(void *)(v132 - 8) + 72) * v137, (uint64_t)v332, type metadata accessor for ApplicationRecord);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v139 + 56))(v140, 0, 1, v132);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v132 - 8) + 56))(v332, 1, 1, v132);
            }
          }
          else
          {
            uint64_t v139 = *(void *)(v131 - 8);
            uint64_t v140 = v332;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56))(v332, 1, 1, v131);
            sub_100012DE4(v134, v135);
          }
          swift_bridgeObjectRelease();
          sub_100012A10(v134, v135);
          int v141 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v139 + 48))(v140, 1, v132);
          sub_1000130EC((uint64_t)v140, &qword_10017BEF0);
          if (v141 == 1)
          {
            uint64_t v142 = sub_1000EFE9C();
            uint64_t v143 = v326;
            uint64_t v59 = v342;
            (*v339)((uint64_t)v326, v142, v342);
            v144 = v325;
            uint64_t v70 = v346;
            v127(v325, v41, v346);
            uint64_t v145 = Logger.logObject.getter();
            os_log_type_t v146 = static os_log_type_t.info.getter();
            if (!os_log_type_enabled(v145, v146)) {
              goto LABEL_39;
            }
            uint64_t v147 = swift_slowAlloc();
            uint64_t v352 = swift_slowAlloc();
            *(_DWORD *)uint64_t v147 = v327;
            uint64_t v148 = URL.path.getter();
            *(void *)(v147 + 4) = sub_100003F90(v148, v149, &v352);
            swift_bridgeObjectRelease();
            Swift::String v150 = *v335;
            (*v335)(v144, v346);
            _os_log_impl((void *)&_mh_execute_header, v145, v146, "Skipping bundle at %s since containing application was removed", (uint8_t *)v147, 0xCu);
            swift_arrayDestroy();
            uint64_t v41 = v324;
            swift_slowDealloc();
            uint64_t v70 = v346;
            swift_slowDealloc();

            (*v338)(v143, v59);
            goto LABEL_75;
          }
          uint64_t v151 = v341[5];
          uint64_t v152 = v341[6];
          sub_1000036B0(v328, v151);
          sub_1000B07CC(v151, v152);
          uint64_t v153 = *((void *)&v350 + 1);
          uint64_t v154 = v351;
          sub_1000036B0(&v349, *((uint64_t *)&v350 + 1));
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v154 + 24))(&v347, v41, v153, v154);
          if (v348) {
            break;
          }
          sub_1000130EC((uint64_t)&v347, &qword_10017BC78);
          sub_10000478C((uint64_t)&v349);
          uint64_t v174 = sub_1000EFE9C();
          uint64_t v143 = v323;
          uint64_t v59 = v342;
          (*v339)((uint64_t)v323, v174, v342);
          v144 = (char *)v310;
          uint64_t v70 = v346;
          v127((char *)v310, v41, v346);
          uint64_t v145 = Logger.logObject.getter();
          os_log_type_t v175 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v145, v175))
          {
LABEL_39:

            uint64_t v121 = *v335;
            (*v335)(v144, v70);
            (*v338)(v143, v59);
            v121(v41, v70);
            goto LABEL_40;
          }
          uint64_t v176 = swift_slowAlloc();
          uint64_t v352 = swift_slowAlloc();
          *(_DWORD *)uint64_t v176 = v327;
          uint64_t v177 = URL.path.getter();
          *(void *)(v176 + 4) = sub_100003F90(v177, v178, &v352);
          swift_bridgeObjectRelease();
          Swift::String v150 = *v335;
          (*v335)(v144, v346);
          _os_log_impl((void *)&_mh_execute_header, v145, v175, "Bundle at %s is invalid", (uint8_t *)v176, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v70 = v346;
          swift_slowDealloc();

          (*v338)(v323, v59);
LABEL_75:
          v150(v41, v70);
LABEL_40:
          uint64_t v12 = (char *)v340;
          sub_1000A9800(v340, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
          uint64_t v116 = v336;
          unint64_t v66 = v337;
          uint64_t v34 = v343;
          unint64_t v120 = (unint64_t)v344;
        }
        sub_10000372C(&v347, (uint64_t)&v352);
        sub_10000478C((uint64_t)&v349);
        uint64_t v155 = v354;
        uint64_t v156 = v355;
        sub_1000036B0(&v352, v354);
        uint64_t v157 = (*(uint64_t (**)(uint64_t, uint64_t))(v156 + 24))(v155, v156);
        if (v158) {
          break;
        }
        uint64_t v179 = sub_1000EFE9C();
        v166 = v305;
        uint64_t v59 = v342;
        (*v339)((uint64_t)v305, v179, v342);
        v167 = v304;
        uint64_t v70 = v346;
        v127(v304, v41, v346);
        v168 = Logger.logObject.getter();
        os_log_type_t v180 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v168, v180))
        {
          uint64_t v181 = swift_slowAlloc();
          *(void *)&long long v349 = swift_slowAlloc();
          *(_DWORD *)uint64_t v181 = v327;
          uint64_t v182 = URL.path.getter();
          *(void *)(v181 + 4) = sub_100003F90(v182, v183, (uint64_t *)&v349);
          swift_bridgeObjectRelease();
          long long v173 = *v335;
          (*v335)(v167, v346);
          _os_log_impl((void *)&_mh_execute_header, v168, v180, "Bundle at %s does not have a bundle identifier", (uint8_t *)v181, 0xCu);
          swift_arrayDestroy();
          uint64_t v41 = v324;
          goto LABEL_78;
        }
LABEL_79:

        v184 = *v335;
        (*v335)(v167, v70);
        (*v338)(v166, v59);
        v184(v41, v70);
LABEL_80:
        uint64_t v12 = (char *)v340;
        sub_1000A9800(v340, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
        unint64_t v66 = v337;
        unint64_t v120 = (unint64_t)v344;
        sub_10000478C((uint64_t)&v352);
        uint64_t v116 = v336;
        uint64_t v34 = v343;
      }
      uint64_t v159 = v157;
      uint64_t v160 = v158;
      uint64_t v161 = (uint64_t)v356;
      id v162 = (uint64_t *)&v130[*(int *)(v132 + 28)];
      uint64_t v59 = *v162;
      unint64_t v163 = v162[1];
      swift_bridgeObjectRetain();
      sub_100012DE4(v59, v163);
      int v164 = sub_10006A4CC(v159, v160, v59, v163, v161);
      sub_100012A10(v59, v163);
      swift_bridgeObjectRelease();
      if (v164 != 3)
      {
        swift_bridgeObjectRelease();
        uint64_t v165 = sub_1000EFE9C();
        v166 = v312;
        uint64_t v59 = v342;
        (*v339)((uint64_t)v312, v165, v342);
        v167 = v311;
        uint64_t v70 = v346;
        v127(v311, v41, v346);
        v168 = Logger.logObject.getter();
        os_log_type_t v169 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v168, v169))
        {
          uint64_t v170 = swift_slowAlloc();
          *(void *)&long long v349 = swift_slowAlloc();
          *(_DWORD *)uint64_t v170 = v327;
          uint64_t v171 = URL.path.getter();
          *(void *)(v170 + 4) = sub_100003F90(v171, v172, (uint64_t *)&v349);
          swift_bridgeObjectRelease();
          long long v173 = *v335;
          uint64_t v41 = v324;
          (*v335)(v167, v346);
          _os_log_impl((void *)&_mh_execute_header, v168, v169, "Skipping bundle at %s, already inserted into approvals database", (uint8_t *)v170, 0xCu);
          swift_arrayDestroy();
LABEL_78:
          swift_slowDealloc();
          uint64_t v70 = v346;
          swift_slowDealloc();

          (*v338)(v166, v59);
          v173(v41, v70);
          goto LABEL_80;
        }
        goto LABEL_79;
      }
      sub_100012DE4(v59, v163);
      char v185 = sub_10006A4CC(v159, v160, v59, v163, v321);
      sub_100012A10(v59, v163);
      if (v185 == 3)
      {
        *(void *)&long long v349 = 0;
        *((void *)&v349 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(69);
        v186._uint64_t countAndFlagsBits = 0xD000000000000026;
        v186._object = v316;
        String.append(_:)(v186);
        sub_1000A9D60(&qword_10017BEB8, (void (*)(uint64_t))type metadata accessor for DriverBinEntry);
        v187._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v187);
        swift_bridgeObjectRelease();
        v188._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        v188._object = v315;
        String.append(_:)(v188);
        LOBYTE(v347) = 0;
        sub_1000A9748();
        v189._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v189);
        swift_bridgeObjectRelease();
        long long v190 = v349;
        v191 = v331;
        char v192 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v34 = v343;
        v313 = (void (**)(uint64_t, uint64_t, uint64_t))*((void *)&v190 + 1);
        v314 = (char *)v190;
        if ((v192 & 1) == 0) {
          v191 = sub_10000C3BC(0, *((void *)v191 + 2) + 1, 1, v191);
        }
        unint64_t v194 = *((void *)v191 + 2);
        unint64_t v193 = *((void *)v191 + 3);
        v331 = v191;
        if (v194 >= v193 >> 1) {
          v331 = sub_10000C3BC((char *)(v193 > 1), v194 + 1, 1, v331);
        }
        char v185 = 0;
        v195 = v331;
        *((void *)v331 + 2) = v194 + 1;
        v196 = &v195[16 * v194];
        v197 = v313;
        *((void *)v196 + 4) = v314;
        *((void *)v196 + 5) = v197;
      }
      else
      {
        uint64_t v34 = v343;
      }
      unint64_t v120 = (unint64_t)v344;
      sub_100012DE4(v59, v163);
      uint64_t v198 = ApprovalDBEntry.init(driverIdentifier:source:approvalState:)(v159, v160, v59, v163, v185, (uint64_t)v360);
      __chkstk_darwin(v198);
      sub_1000D5CA8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/KernelManagement_executables/driverkitd/ApprovalManager.swift", 99, 2, 165, (uint64_t)v328, 0xD000000000000026, v317, (void (*)(uint64_t))sub_1000A9860);
      uint64_t v70 = v346;
      (*v335)(v41, v346);
      uint64_t v12 = (char *)v340;
      sub_1000A9800(v340, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      sub_100073D08((uint64_t)v360);
      sub_10000478C((uint64_t)&v352);
      uint64_t v116 = v336;
      unint64_t v66 = v337;
    }
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
  return result;
}

uint64_t sub_1000A8E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = sub_1000A9B00;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000AFF8;
  aBlock[3] = &unk_10016ECA0;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  sub_1000A9D60((unint64_t *)&qword_10017EBD0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100004700((uint64_t *)&unk_10017DEB0);
  sub_1000928DC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

unint64_t sub_1000A90E4()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 344))();
  unint64_t v2 = sub_10006CCA0(v1);
  swift_bridgeObjectRelease();
  unint64_t v14 = v2;
  _StringGuts.grow(_:)(20);
  uint64_t v3 = swift_bridgeObjectRelease();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 152);
  if ((unint64_t)v4(v3) >> 62) {
    _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 58;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0xD000000000000011;
  v7._object = (void *)0x800000010014B6B0;
  String.append(_:)(v7);
  uint64_t v8 = swift_bridgeObjectRelease();
  unint64_t result = v4(v8);
  unint64_t v10 = result;
  if (!(result >> 62))
  {
    uint64_t v11 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11) {
      goto LABEL_5;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return v14;
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v11 = result;
  if (!result) {
    goto LABEL_12;
  }
LABEL_5:
  if (v11 >= 1)
  {
    uint64_t v12 = 0;
    do
    {
      if ((v10 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      ++v12;
      type metadata accessor for ApprovalStateUpdateRequest();
      sub_1000A9D60(&qword_10017E968, (void (*)(uint64_t))type metadata accessor for ApprovalStateUpdateRequest);
      v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_release();
      swift_bridgeObjectRelease();
    }
    while (v11 != v12);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A9364()
{
  sub_10000478C(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_databasePath;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000A9440()
{
  sub_1000A9364();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

id sub_1000A9498()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_stateManagerQueue);
}

uint64_t sub_1000A94A8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t sub_1000A94CC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

void (*sub_1000A94F8(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 264))();
  return sub_10000C31C;
}

uint64_t sub_1000A9578()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t sub_1000A95A4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

void *sub_1000A95D0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100004700(&qword_10017EB20);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000A9C50(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000A96F4()
{
  unint64_t result = qword_10017E948;
  if (!qword_10017E948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E948);
  }
  return result;
}

unint64_t sub_1000A9748()
{
  unint64_t result = qword_10017E950;
  if (!qword_10017E950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E950);
  }
  return result;
}

uint64_t sub_1000A979C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DriverBinEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A9800(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000A9860()
{
  return sub_10006B07C(*(void **)(v0 + 24));
}

uint64_t sub_1000A9888()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A98C0(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t sub_1000A98CC()
{
  unint64_t result = qword_10017E958;
  if (!qword_10017E958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E958);
  }
  return result;
}

unint64_t sub_1000A9920()
{
  unint64_t result = qword_10017E960;
  if (!qword_10017E960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E960);
  }
  return result;
}

uint64_t sub_1000A9974()
{
  return type metadata accessor for ApprovalManager();
}

uint64_t type metadata accessor for ApprovalManager()
{
  uint64_t result = qword_1001884C8;
  if (!qword_1001884C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A99C8()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000A9A98()
{
  return sub_1000A9AB0((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1000A9AB0(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 32, 7);
}

uint64_t sub_1000A9B00()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (int64_t i = (unsigned __int8 *)(v4 + 48); ; i += 24)
    {
      uint64_t v7 = *((void *)i - 1);
      int v8 = *i;
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*((void *)i - 2) + 56);
      swift_retain();
      if (v8 == 1)
      {
        sub_1000A98C0(v7, 1);
        swift_retain();
        v9(v7, 1);
        sub_100096D00(v7, 1);
        swift_release();
      }
      else
      {
        if (v1)
        {
          swift_errorRetain();
          swift_retain();
          v9(v1, 1);
          swift_release();
          swift_release();
          swift_errorRelease();
          goto LABEL_5;
        }
        swift_retain();
        v9(v7, 0);
        swift_release();
      }
      swift_release();
LABEL_5:
      if (!--v5) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_1000A9C50(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100004700(&qword_10017EB28);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A9D60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A9DA8()
{
  return sub_1000A9860();
}

uint64_t sub_1000A9DC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  unint64_t v10 = (char *)&v27 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - v11;
  if (URL.pathExtension.getter() == 0x6775626564 && v13 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v14 = 1;
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v15(v12, a1, v3);
  uint64_t v27 = v7;
  if ((v14 & 1) == 0)
  {
    if (URL.pathExtension.getter() != 0x6D706F6C65766564 || v16 != 0xEB00000000746E65)
    {
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
  }
  char v18 = 1;
LABEL_13:
  uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
  v19(v12, v3);
  v15(v10, a1, v3);
  if (v18)
  {
LABEL_21:
    v19(v10, v3);
    uint64_t v23 = v28;
    goto LABEL_22;
  }
  if (URL.pathExtension.getter() == 0x6E6173616BLL && v20 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v19(v10, v3);
  uint64_t v23 = v28;
  if (v22)
  {
LABEL_22:
    uint64_t v25 = v27;
    URL.deletingPathExtension()();
    URL.appendingPathExtension(_:)();
    v19(v25, v3);
    uint64_t v24 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v23, v24, 1, v3);
  }
  uint64_t v24 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v23, v24, 1, v3);
}

uint64_t sub_1000AA0FC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v4 - 8);
  uint64_t v69 = &v64[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v70 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v70 - 8);
  uint64_t v7 = __chkstk_darwin(v70);
  uint64_t v9 = &v64[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v64[-v10];
  uint64_t v68 = a1;
  URL.appendingPathExtension(_:)();
  uint64_t v12 = v2 + 2;
  uint64_t v13 = v2[5];
  uint64_t v14 = v2[6];
  sub_1000036B0(v2 + 2, v13);
  sub_1001297F4(v13, v14);
  uint64_t v15 = v73;
  sub_1000036B0(v71, v72);
  uint64_t v16 = URL.path.getter();
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v15 + 16))(v16);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (v19 >> 60 == 15)
  {
    uint64_t v20 = v2;
    uint64_t v22 = (uint64_t)v69;
    uint64_t v21 = v70;
    uint64_t v67 = v11;
    uint64_t v23 = v6;
    sub_10000478C((uint64_t)v71);
    int v24 = errno.getter();
    if (v24 != 2)
    {
      int v25 = v24;
      static os_log_type_t.error.getter();
      uint64_t v26 = (void *)*sub_1000EF94C();
      sub_100004700((uint64_t *)&unk_10017D6E0);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_100132F30;
      id v28 = v26;
      uint64_t v29 = v67;
      uint64_t v30 = URL.path.getter();
      uint64_t v32 = v31;
      *(void *)(v27 + 56) = &type metadata for String;
      *(void *)(v27 + 64) = sub_10002A1DC();
      *(void *)(v27 + 32) = v30;
      *(void *)(v27 + 40) = v32;
      *(void *)(v27 + 96) = &type metadata for Int32;
      *(void *)(v27 + 104) = &protocol witness table for Int32;
      *(_DWORD *)(v27 + 72) = v25;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v29, v21);
      return 0;
    }
    sub_1000A9DC8(v68, v22);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v22, 1, v21) == 1)
    {
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v67, v21);
      sub_1000AAB74(v22);
      return 0;
    }
    uint64_t v66 = v6;
    uint64_t v33 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 32);
    uint64_t v34 = v9;
    v33(v9, v22, v21);
    uint64_t v35 = v20[5];
    uint64_t v36 = v20[6];
    sub_1000036B0(v12, v35);
    sub_1001297F4(v35, v36);
    uint64_t v37 = v73;
    sub_1000036B0(v71, v72);
    uint64_t v38 = URL.path.getter();
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(v37 + 16))(v38);
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    sub_10000478C((uint64_t)v71);
    uint64_t v41 = v67;
    if (v40 >> 60 == 15)
    {
      int v65 = errno.getter();
      LODWORD(v69) = static os_log_type_t.error.getter();
      uint64_t v42 = (void *)*sub_1000EF94C();
      sub_100004700((uint64_t *)&unk_10017D6E0);
      uint64_t v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = xmmword_1001359B0;
      id v44 = v42;
      uint64_t v45 = URL.path.getter();
      uint64_t v47 = v46;
      *(void *)(v43 + 56) = &type metadata for String;
      unint64_t v48 = sub_10002A1DC();
      *(void *)(v43 + 64) = v48;
      *(void *)(v43 + 32) = v45;
      *(void *)(v43 + 40) = v47;
      uint64_t v49 = URL.path.getter();
      *(void *)(v43 + 96) = &type metadata for String;
      *(void *)(v43 + 104) = v48;
      *(void *)(v43 + 72) = v49;
      *(void *)(v43 + 80) = v50;
      *(void *)(v43 + 136) = &type metadata for Int32;
      *(void *)(v43 + 144) = &protocol witness table for Int32;
      *(_DWORD *)(v43 + 112) = v65;
      os_log(_:dso:log:_:_:)();
    }
    else
    {
      LODWORD(v69) = static os_log_type_t.default.getter();
      uint64_t v51 = (void *)*sub_1000EF94C();
      sub_100004700((uint64_t *)&unk_10017D6E0);
      uint64_t v52 = swift_allocObject();
      *(_OWORD *)(v52 + 16) = xmmword_100132F30;
      id v53 = v51;
      uint64_t v54 = URL.path.getter();
      uint64_t v56 = v55;
      *(void *)(v52 + 56) = &type metadata for String;
      unint64_t v57 = sub_10002A1DC();
      *(void *)(v52 + 64) = v57;
      *(void *)(v52 + 32) = v54;
      *(void *)(v52 + 40) = v56;
      uint64_t v58 = URL.path.getter();
      *(void *)(v52 + 96) = &type metadata for String;
      *(void *)(v52 + 104) = v57;
      *(void *)(v52 + 72) = v58;
      *(void *)(v52 + 80) = v59;
      os_log(_:dso:log:_:_:)();
    }
    swift_bridgeObjectRelease();
    uint64_t v60 = *(void (**)(unsigned char *, uint64_t))(v66 + 8);
    uint64_t v61 = v34;
    uint64_t v62 = v70;
    v60(v61, v70);
    v60(v41, v62);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v11, v70);
    sub_10000478C((uint64_t)v71);
  }
  return v17;
}

void *sub_1000AA6CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v40[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_1000AA0FC(a1);
  if (v8 >> 60 == 15)
  {
    static os_log_type_t.default.getter();
    uint64_t v9 = (void *)*sub_1000EF94C();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_100132F10;
    id v11 = v9;
    uint64_t v12 = URL.path.getter();
    uint64_t v14 = v13;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_10002A1DC();
    *(void *)(v10 + 32) = v12;
    *(void *)(v10 + 40) = v14;
    os_log(_:dso:log:_:_:)();

LABEL_3:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v15 = v7;
  unint64_t v16 = v8;
  uint64_t v41 = v7;
  unint64_t v42 = v8;
  static String.Encoding.utf8.getter();
  sub_1000AAB20();
  uint64_t v17 = String.init<A>(bytes:encoding:)();
  if (!v18)
  {
    static os_log_type_t.error.getter();
    uint64_t v33 = (void *)*sub_1000EF94C();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_100132F10;
    id v35 = v33;
    uint64_t v36 = URL.path.getter();
    uint64_t v38 = v37;
    *(void *)(v34 + 56) = &type metadata for String;
    *(void *)(v34 + 64) = sub_10002A1DC();
    *(void *)(v34 + 32) = v36;
    *(void *)(v34 + 40) = v38;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    sub_10002404C(v15, v16);
    return _swiftEmptyArrayStorage;
  }
  uint64_t v41 = v17;
  unint64_t v42 = v18;
  static CharacterSet.whitespacesAndNewlines.getter();
  sub_100029B24();
  uint64_t v19 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v21 = v20;
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v22 = swift_bridgeObjectRelease();
  uint64_t v41 = 32;
  unint64_t v42 = 0xE100000000000000;
  __chkstk_darwin(v22);
  *(void *)&v40[-16] = &v41;
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_10002CD68(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002FCB0, (uint64_t)&v40[-32], v19, v21);
  swift_bridgeObjectRelease();
  int64_t v24 = *((void *)v23 + 2);
  if (!v24)
  {
    sub_10002404C(v15, v16);
    goto LABEL_3;
  }
  uint64_t v41 = (uint64_t)_swiftEmptyArrayStorage;
  sub_10000C884(0, v24, 0);
  uint64_t v25 = v41;
  uint64_t v26 = v23 + 56;
  do
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = static String._fromSubstring(_:)();
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v41 = v25;
    unint64_t v31 = *(void *)(v25 + 16);
    unint64_t v30 = *(void *)(v25 + 24);
    if (v31 >= v30 >> 1)
    {
      sub_10000C884(v30 > 1, v31 + 1, 1);
      uint64_t v25 = v41;
    }
    *(void *)(v25 + 16) = v31 + 1;
    unint64_t v32 = v25 + 16 * v31;
    *(void *)(v32 + 32) = v27;
    *(void *)(v32 + 40) = v29;
    v26 += 32;
    --v24;
  }
  while (v24);
  sub_10002404C(v15, v16);
  swift_bridgeObjectRelease();
  return (void *)v25;
}

unint64_t sub_1000AAB20()
{
  unint64_t result = qword_10017EB30;
  if (!qword_10017EB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EB30);
  }
  return result;
}

uint64_t sub_1000AAB74(uint64_t a1)
{
  uint64_t v2 = sub_100004700((uint64_t *)&unk_10017FA60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AABD4()
{
  uint64_t v0 = swift_allocObject();
  sub_1000AAC0C();
  return v0;
}

uint64_t sub_1000AAC0C()
{
  *(void *)(v0 + 16) = sub_1000AD6FC((uint64_t)_swiftEmptyArrayStorage);
  v22[3] = type metadata accessor for DriverKitDaemonSideEffects();
  v22[4] = &off_10016ED40;
  v22[0] = v0;
  uint64_t v1 = type metadata accessor for RealBundleResolver();
  swift_retain();
  uint64_t v20 = sub_100003BEC();
  sub_1000B06B8((uint64_t)v22, v1, (uint64_t)&off_10016EE98);
  swift_release();
  id v2 = objc_allocWithZone((Class)NSFileManager);
  id v3 = [v2 init:v20, v22[0]];
  uint64_t v4 = sub_10000483C(0, &qword_10017EB40);
  sub_1001296E0((uint64_t)v22, v4, (uint64_t)&off_100173BD0);

  uint64_t v5 = type metadata accessor for RealKernelClient();
  sub_10007EB5C();
  sub_10007F3A0((uint64_t)v22, v5, (uint64_t)&off_10016C698);
  swift_release();
  uint64_t v6 = type metadata accessor for RealDaemonLauncher();
  sub_100003BEC();
  sub_100076FD8((uint64_t)v22, v6, (uint64_t)&off_10016C230);
  swift_release();
  type metadata accessor for RealCodeSigningResolver();
  sub_1000FCEBC();
  sub_1000FD070((uint64_t)v22);
  swift_release();
  type metadata accessor for NullSystemPolicyClient();
  sub_1000894A4();
  sub_10008978C((uint64_t)v22);
  swift_release();
  uint64_t v7 = type metadata accessor for EmbeddedSIPStatus();
  sub_100003BEC();
  sub_10002A3B0((uint64_t)v22, v7, (uint64_t)&off_10016AB88);
  swift_release();
  uint64_t v8 = type metadata accessor for RealDistNote();
  sub_100003BEC();
  sub_1000779A8((uint64_t)v22, v8, (uint64_t)&off_10016C290);
  swift_release();
  type metadata accessor for MinimalDeveloperKitClient();
  sub_10012E224();
  sub_10012DBFC((uint64_t)v22);
  swift_release();
  uint64_t v9 = type metadata accessor for RealApprovalsXPCPublisher();
  sub_10012E42C();
  sub_10012E22C((uint64_t)v22, v9, (uint64_t)&off_100174018);
  swift_release();
  uint64_t v10 = type metadata accessor for RealDeviceProperties();
  sub_100003BEC();
  sub_100126D8C((uint64_t)v22, v10, (uint64_t)&off_100173B78);
  swift_release();
  uint64_t v11 = type metadata accessor for RealCoreAnalyticsClient();
  sub_100003BEC();
  sub_100003E10((uint64_t)v22, v11, (uint64_t)&off_10016A1F8);
  swift_release();
  if (sub_1000F59D4())
  {
    uint64_t v12 = type metadata accessor for RestoreOSFeatureFlagsClient();
    sub_100003BEC();
    sub_100040658((uint64_t)v22, v12, (uint64_t)&off_10016B2A8);
    swift_release();
    uint64_t v13 = type metadata accessor for NullRunningBoardSupport();
    sub_100003BEC();
    sub_1000140E0((uint64_t)v22, v13, (uint64_t)&off_10016A460);
    swift_release();
    uint64_t v14 = type metadata accessor for NullLaunchServices();
    sub_100003BEC();
    uint64_t v15 = &off_10016B250;
  }
  else
  {
    uint64_t v16 = type metadata accessor for RealFeatureFlagsClient();
    uint64_t v21 = sub_100003BEC();
    sub_100040658((uint64_t)v22, v16, (uint64_t)&off_10016B280);
    swift_release();
    id v17 = [objc_allocWithZone((Class)RunningBoardSupport) init:v21];
    uint64_t v18 = sub_10000483C(0, &qword_10017EB48);
    sub_1000140E0((uint64_t)v22, v18, (uint64_t)&off_10016A440);

    uint64_t v14 = type metadata accessor for RealLaunchServices();
    sub_100003BEC();
    uint64_t v15 = &off_10016B268;
  }
  sub_10003FFD4((uint64_t)v22, v14, (uint64_t)v15);
  swift_release();
  sub_10000478C((uint64_t)v22);
  return v0;
}

uint64_t sub_1000AB08C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_1000AB0C4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t sub_1000AB108()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

void (*sub_1000AB14C(void *a1))(void *)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 104))();
  return sub_100013548;
}

uint64_t sub_1000AB1C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1000F1EEC(a1, a3, a2, a4, a5);
}

uint64_t sub_1000AB1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000F219C(a1, a2, a4, a3, a5);
}

void (*sub_1000AB1E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(void *)
{
  uint64_t v10 = malloc(0x28uLL);
  *a1 = v10;
  v10[4] = sub_1000F2208(v10, a2, a4, a3, a5);
  return sub_100013548;
}

uint64_t sub_1000AB270()
{
  return swift_retain();
}

uint64_t sub_1000AB27C()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t *sub_1000AB2B8(uint64_t a1, void *a2, uint64_t a3)
{
  swift_allocObject();
  uint64_t v6 = sub_1000AD824(a1, a2, a3);

  return v6;
}

unint64_t sub_1000AB318()
{
  return 0xD000000000000014;
}

uint64_t sub_1000AB334()
{
  uint64_t v1 = os_transaction_create();
  v5[8] = sub_10007876C();
  swift_beginAccess();
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  sub_1000036B0(v0 + 2, v2);
  sub_10007F4B4(v2, v3);
  swift_endAccess();
  sub_100077FDC(v5, (uint64_t)&type metadata for KernelRequests.GetRequests, (uint64_t)&off_10017D898, (uint64_t)&v6);
  sub_10000478C((uint64_t)v5);
  swift_bridgeObjectRelease();
  sub_1000AB510(v6, v1);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1000AB510(uint64_t a1, uint64_t a2)
{
  uint64_t v72 = a2;
  uint64_t v79 = *v2;
  uint64_t v78 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v75 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for DispatchQoS();
  uint64_t v74 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v73 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = _swiftEmptyArrayStorage;
  uint64_t v6 = objc_retain_x22;
  *(void *)&long long v83 = *(void *)(a1 + 16);
  if ((void)v83)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    long long v82 = xmmword_100132F30;
    *(void *)&long long v81 = (char *)&type metadata for Any + 8;
    do
    {
      uint64_t v8 = swift_bridgeObjectRetain();
      sub_100078308(v8, (uint64_t *)&v93);
      swift_bridgeObjectRelease();
      if (v94)
      {
        sub_10000372C(&v93, (uint64_t)&aBlock);
        sub_10000372C(&aBlock, (uint64_t)&v93);
        uint64_t v9 = (void *)v84;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v9 = sub_1000AD518(0, v9[2] + 1, 1, v9, &qword_10017EDB8, (uint64_t *)&unk_10017EB60);
          *(void *)&long long v84 = v9;
        }
        unint64_t v11 = v9[2];
        unint64_t v10 = v9[3];
        if (v11 >= v10 >> 1) {
          *(void *)&long long v84 = sub_1000AD518((void *)(v10 > 1), v11 + 1, 1, v9, &qword_10017EDB8, (uint64_t *)&unk_10017EB60);
        }
        uint64_t v12 = v94;
        uint64_t v13 = v95;
        uint64_t v14 = sub_10000464C((uint64_t)&v93, v94);
        __chkstk_darwin(v14);
        uint64_t v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v17 + 16))(v16);
        sub_1000AD654(v11, (uint64_t)v16, (uint64_t *)&v84, v12, v13, (uint64_t (*)(uint64_t *, uint64_t))sub_10000372C);
        sub_10000478C((uint64_t)&v93);
      }
      else
      {
        sub_1000130EC((uint64_t)&v93, &qword_10017EB58);
      }
      ++v7;
    }
    while ((void)v83 != v7);
    swift_bridgeObjectRelease();
    uint64_t v18 = (void *)v84;
    uint64_t v6 = objc_retain_x22;
  }
  else
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
  }
  *(void *)&long long v82 = swift_allocObject();
  *(void *)(v82 + 16) = _swiftEmptyArrayStorage;
  uint64_t v19 = v18[2];
  uint64_t v20 = v80;
  if (v19)
  {
    uint64_t v71 = v18;
    uint64_t v21 = (uint64_t)(v18 + 4);
    long long v83 = *((_OWORD *)v6 + 243);
    long long v81 = xmmword_100132F10;
    uint64_t v70 = (void *)0x800000010014B950;
    do
    {
      sub_10000469C(v21, (uint64_t)&aBlock);
      sub_10000469C((uint64_t)&aBlock, (uint64_t)&v93);
      sub_100004700((uint64_t *)&unk_10017EB60);
      if (swift_dynamicCast())
      {
        uint64_t v23 = v84;
        uint64_t v24 = sub_1000AC63C(v84);
        uint64_t v92 = v20;
        sub_1000B73F8(v23, v24, v25, v79, (uint64_t)&off_10016ED88);
        swift_bridgeObjectRelease();
        sub_10000478C((uint64_t)&aBlock);
        swift_bridgeObjectRelease();
        sub_10000478C((uint64_t)&v93);
        goto LABEL_18;
      }
      if (swift_dynamicCast())
      {
        uint64_t v34 = v92;
        uint64_t v35 = v82;
        uint64_t v36 = *(void **)(v82 + 16);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v35 + 16) = v36;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v36 = sub_1000AD518(0, v36[2] + 1, 1, v36, &qword_10017EDB8, (uint64_t *)&unk_10017EB60);
          *(void *)(v82 + 16) = v36;
        }
        unint64_t v39 = v36[2];
        unint64_t v38 = v36[3];
        unint64_t v40 = v39 + 1;
        if (v39 >= v38 >> 1)
        {
          uint64_t v36 = sub_1000AD518((void *)(v38 > 1), v39 + 1, 1, v36, &qword_10017EDB8, (uint64_t *)&unk_10017EB60);
          *(void *)(v82 + 16) = v36;
        }
        Swift::String v86 = &off_10016C598;
        uint64_t v22 = &type metadata for KernelRequests.RequestExit;
      }
      else
      {
        if (swift_dynamicCast())
        {
          uint64_t v41 = v84;
          uint64_t v92 = v84;
          uint64_t v42 = sub_100077EC0((uint64_t)&type metadata for KernelRequests.LoadNotification, (uint64_t)&off_10016C518);
          if (v43)
          {
            uint64_t v44 = v42;
            uint64_t v45 = v43;
            uint64_t v46 = *(void (**)(uint64_t, uint64_t))(*(void *)*sub_100090DE4() + 104);
            swift_retain();
            v46(v44, v45);
            swift_bridgeObjectRelease();
            swift_release();
          }
          static os_log_type_t.debug.getter();
          sub_100004700((uint64_t *)&unk_10017D6E0);
          uint64_t v47 = swift_allocObject();
          *(_OWORD *)(v47 + 16) = v81;
          uint64_t v92 = v41;
          uint64_t v48 = String.init<A>(describing:)();
          uint64_t v50 = v49;
          *(void *)(v47 + 56) = &type metadata for String;
          *(void *)(v47 + 64) = sub_10002A1DC();
          *(void *)(v47 + 32) = v48;
          *(void *)(v47 + 40) = v50;
          sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
          uint64_t v51 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();

          goto LABEL_17;
        }
        if (swift_dynamicCast())
        {
          uint64_t v34 = v92;
          uint64_t v52 = v82;
          uint64_t v36 = *(void **)(v82 + 16);
          char v53 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v52 + 16) = v36;
          if ((v53 & 1) == 0)
          {
            uint64_t v36 = sub_1000AD518(0, v36[2] + 1, 1, v36, &qword_10017EDB8, (uint64_t *)&unk_10017EB60);
            *(void *)(v82 + 16) = v36;
          }
          unint64_t v39 = v36[2];
          unint64_t v54 = v36[3];
          unint64_t v40 = v39 + 1;
          if (v39 >= v54 >> 1)
          {
            uint64_t v36 = sub_1000AD518((void *)(v54 > 1), v39 + 1, 1, v36, &qword_10017EDB8, (uint64_t *)&unk_10017EB60);
            *(void *)(v82 + 16) = v36;
          }
          Swift::String v86 = &off_10016C548;
          uint64_t v22 = &type metadata for KernelRequests.UnloadNotification;
        }
        else
        {
          if (!swift_dynamicCast())
          {
            *(void *)&long long v84 = 0;
            *((void *)&v84 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(21);
            v58._uint64_t countAndFlagsBits = 0xD000000000000013;
            v58._object = v70;
            String.append(_:)(v58);
            _print_unlocked<A, B>(_:_:)();
            long long v59 = v84;
            sub_100012E3C();
            uint64_t v60 = swift_allocError();
            *(_OWORD *)uint64_t v61 = v59;
            *(_OWORD *)(v61 + 16) = 0u;
            *(_OWORD *)(v61 + 32) = 0u;
            *(_OWORD *)(v61 + 48) = 0u;
            *(void *)(v61 + 64) = 0;
            *(unsigned char *)(v61 + 72) = 9;
            swift_willThrow();
            sub_10000478C((uint64_t)&v93);
            static os_log_type_t.error.getter();
            sub_100004700((uint64_t *)&unk_10017D6E0);
            uint64_t v26 = swift_allocObject();
            *(_OWORD *)(v26 + 16) = v83;
            sub_10000469C((uint64_t)&aBlock, (uint64_t)&v93);
            uint64_t v27 = String.init<A>(describing:)();
            uint64_t v29 = v28;
            *(void *)(v26 + 56) = &type metadata for String;
            unint64_t v30 = sub_10002A1DC();
            *(void *)(v26 + 64) = v30;
            *(void *)(v26 + 32) = v27;
            *(void *)(v26 + 40) = v29;
            *(void *)&long long v93 = v60;
            swift_errorRetain();
            sub_100004700(&qword_10017EB50);
            uint64_t v31 = String.init<A>(describing:)();
            *(void *)(v26 + 96) = &type metadata for String;
            *(void *)(v26 + 104) = v30;
            *(void *)(v26 + 72) = v31;
            *(void *)(v26 + 80) = v32;
            sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
            uint64_t v33 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();

            swift_errorRelease();
            sub_10000478C((uint64_t)&aBlock);
            uint64_t v20 = v80;
            goto LABEL_18;
          }
          uint64_t v34 = v92;
          uint64_t v55 = v82;
          uint64_t v36 = *(void **)(v82 + 16);
          char v56 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v55 + 16) = v36;
          if ((v56 & 1) == 0)
          {
            uint64_t v36 = sub_1000AD518(0, v36[2] + 1, 1, v36, &qword_10017EDB8, (uint64_t *)&unk_10017EB60);
            *(void *)(v82 + 16) = v36;
          }
          unint64_t v39 = v36[2];
          unint64_t v57 = v36[3];
          unint64_t v40 = v39 + 1;
          if (v39 >= v57 >> 1)
          {
            uint64_t v36 = sub_1000AD518((void *)(v57 > 1), v39 + 1, 1, v36, &qword_10017EDB8, (uint64_t *)&unk_10017EB60);
            *(void *)(v82 + 16) = v36;
          }
          Swift::String v86 = &off_10016C648;
          uint64_t v22 = &type metadata for KernelRequests.DextUpdateNotification;
        }
      }
      Swift::String v85 = v22;
      *(void *)&long long v84 = v34;
      v36[2] = v40;
      sub_10000372C(&v84, (uint64_t)&v36[5 * v39 + 4]);
LABEL_17:
      sub_10000478C((uint64_t)&aBlock);
      sub_10000478C((uint64_t)&v93);
LABEL_18:
      v21 += 40;
      --v19;
    }
    while (v19);
  }
  swift_bridgeObjectRelease();
  uint64_t v62 = (void *)swift_allocObject();
  uint64_t v63 = v82;
  v62[2] = v72;
  v62[3] = v63;
  v62[4] = v20;
  unint64_t v90 = sub_1000AE450;
  char v91 = v62;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  unint64_t v88 = sub_10000AFF8;
  unint64_t v89 = &unk_10016ED18;
  uint64_t v64 = _Block_copy(&aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  int v65 = v73;
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v93 = _swiftEmptyArrayStorage;
  sub_1000AEAC0((unint64_t *)&qword_10017EBD0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100004700((uint64_t *)&unk_10017DEB0);
  sub_1000928DC();
  uint64_t v66 = v75;
  uint64_t v67 = v78;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v64);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v66, v67);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v65, v76);
  swift_release();
  return swift_release();
}

uint64_t sub_1000AC2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = __chkstk_darwin(a1);
  unint64_t v11 = (char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v23[-1] - v12;
  v23[0] = v4;
  (*(void (**)(void *))(v14 + 24))(v23);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15(v13, a1, a2);
  uint64_t v16 = (uint64_t *)(v4 + 56);
  swift_beginAccess();
  uint64_t v17 = *(void **)(v4 + 56);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 56) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v17 = sub_1000AD518(0, v17[2] + 1, 1, v17, &qword_10017EDA8, &qword_10017EDB0);
    uint64_t *v16 = (uint64_t)v17;
  }
  unint64_t v20 = v17[2];
  unint64_t v19 = v17[3];
  if (v20 >= v19 >> 1) {
    uint64_t *v16 = (uint64_t)sub_1000AD518((void *)(v19 > 1), v20 + 1, 1, v17, &qword_10017EDA8, &qword_10017EDB0);
  }
  v15(v11, (uint64_t)v13, a2);
  sub_1000AD654(v20, (uint64_t)v11, v16, a2, *(void *)(a3 + 8), (uint64_t (*)(uint64_t *, uint64_t))sub_10000372C);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, a2);
}

unint64_t sub_1000AC50C()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_10000469C(v3, (uint64_t)v9);
      uint64_t v4 = v10;
      uint64_t v5 = v11;
      sub_1000036B0(v9, v10);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      sub_10000478C((uint64_t)v9);
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = type metadata accessor for KernelStateManager();
  sub_1000EA080(0xD000000000000011, (char *)0x800000010014B9E0, v6, &off_10016A358);
  uint64_t v7 = type metadata accessor for ActivationStateManager();
  return sub_1000EA080(0xD000000000000014, (char *)0x800000010014BA00, v7, &off_10016EF30);
}

uint64_t sub_1000AC63C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for ApplicationRecord(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for DriverBinEntry();
  uint64_t v62 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100004700(&qword_10017BEF8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v56 - v14;
  v69[0] = a1;
  uint64_t v16 = sub_100077EC0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_10016C428);
  if (!v17)
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v53 = 0xD00000000000002FLL;
    *(void *)(v53 + 8) = 0x800000010014BA20;
    *(_OWORD *)(v53 + 16) = 0u;
    *(_OWORD *)(v53 + 32) = 0u;
    *(_OWORD *)(v53 + 48) = 0u;
    *(void *)(v53 + 64) = 0;
    *(unsigned char *)(v53 + 72) = 9;
    swift_willThrow();
    return a1;
  }
  uint64_t v18 = v17;
  unint64_t v57 = (uint64_t *)v7;
  uint64_t v58 = v2;
  uint64_t v19 = v16;
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100132F10;
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = sub_10002A1DC();
  uint64_t v60 = v19;
  *(void *)(v20 + 32) = v19;
  *(void *)(v20 + 40) = v18;
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  uint64_t v64 = v18;
  swift_bridgeObjectRetain();
  uint64_t v21 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(v3 + 88) + 360))();
  uint64_t v23 = *(void *)(v22 + 64);
  uint64_t v59 = v22 + 64;
  uint64_t v63 = v22;
  uint64_t v24 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v70 = 0;
  uint64_t v26 = -1;
  if (v24 < 64) {
    uint64_t v26 = ~(-1 << v24);
  }
  unint64_t v27 = v26 & v23;
  uint64_t v28 = (void *)(v3 + 16);
  int64_t v61 = (unint64_t)(v24 + 63) >> 6;
  int64_t v56 = v61 - 1;
  while (1)
  {
    if (v27)
    {
      unint64_t v31 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      unint64_t v32 = v31 | (v70 << 6);
LABEL_9:
      uint64_t v33 = v63;
      uint64_t v34 = *(void *)(v63 + 48);
      uint64_t v35 = type metadata accessor for UUID();
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v13, v34 + *(void *)(*(void *)(v35 - 8) + 72) * v32, v35);
      uint64_t v36 = *(void *)(v33 + 56) + *(void *)(v62 + 72) * v32;
      uint64_t v37 = sub_100004700((uint64_t *)&unk_10017EBF0);
      sub_1000461D0(v36, (uint64_t)&v13[*(int *)(v37 + 48)], (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v13, 0, 1, v37);
      goto LABEL_28;
    }
    int64_t v38 = v70 + 1;
    if (__OFADD__(v70, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v38 < v61)
    {
      unint64_t v39 = *(void *)(v59 + 8 * v38);
      if (v39) {
        goto LABEL_13;
      }
      int64_t v40 = v70 + 2;
      ++v70;
      if (v38 + 1 < v61)
      {
        unint64_t v39 = *(void *)(v59 + 8 * v40);
        if (v39) {
          goto LABEL_16;
        }
        int64_t v70 = v38 + 1;
        if (v38 + 2 < v61)
        {
          unint64_t v39 = *(void *)(v59 + 8 * (v38 + 2));
          if (v39)
          {
            v38 += 2;
            goto LABEL_13;
          }
          int64_t v40 = v38 + 3;
          int64_t v70 = v38 + 2;
          if (v38 + 3 < v61) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v41 = sub_100004700((uint64_t *)&unk_10017EBF0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v13, 1, 1, v41);
    unint64_t v27 = 0;
LABEL_28:
    sub_100029900((uint64_t)v13, (uint64_t)v15, &qword_10017BEF8);
    uint64_t v42 = sub_100004700((uint64_t *)&unk_10017EBF0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v15, 1, v42) == 1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    sub_1000A979C((uint64_t)&v15[*(int *)(v42 + 48)], (uint64_t)v9);
    swift_beginAccess();
    uint64_t v43 = *(void *)(v3 + 40);
    uint64_t v44 = *(void *)(v3 + 48);
    uint64_t v45 = v3;
    sub_1000036B0(v28, v43);
    sub_1000B07CC(v43, v44);
    swift_endAccess();
    uint64_t v46 = v67;
    uint64_t v47 = v68;
    sub_1000036B0(v66, v67);
    (*(void (**)(void *__return_ptr, char *, uint64_t, uint64_t))(v47 + 24))(v69, &v9[*(int *)(v65 + 28)], v46, v47);
    sub_10000478C((uint64_t)v66);
    sub_10001BA68((uint64_t)v69, (uint64_t)v66, &qword_10017BC78);
    uint64_t v48 = v67;
    if (!v67)
    {
      sub_1000130EC((uint64_t)v66, &qword_10017BC78);
LABEL_35:
      swift_bridgeObjectRetain();
      sub_1000130EC((uint64_t)v69, &qword_10017BC78);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = v45;
      goto LABEL_6;
    }
    uint64_t v49 = v68;
    sub_1000036B0(v66, v67);
    uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 24))(v48, v49);
    uint64_t v52 = v51;
    sub_10000478C((uint64_t)v66);
    if (!v52) {
      goto LABEL_35;
    }
    uint64_t v3 = v45;
    if (v50 == v60 && v52 == v64)
    {
      sub_1000130EC((uint64_t)v69, &qword_10017BC78);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_39:
      unint64_t v54 = v57;
      sub_1000461D0((uint64_t)&v9[*(int *)(v65 + 20)], (uint64_t)v57, type metadata accessor for ApplicationRecord);
      sub_1000462F4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
      a1 = *v54;
      swift_bridgeObjectRetain();
      sub_1000462F4((uint64_t)v54, type metadata accessor for ApplicationRecord);
      uint64_t v55 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v15, v55);
      return a1;
    }
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1000130EC((uint64_t)v69, &qword_10017BC78);
    swift_bridgeObjectRelease();
    if (v29)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_39;
    }
LABEL_6:
    sub_1000462F4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for DriverBinEntry);
    uint64_t v30 = type metadata accessor for UUID();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v15, v30);
  }
  unint64_t v39 = *(void *)(v59 + 8 * v40);
  if (v39)
  {
LABEL_16:
    int64_t v38 = v40;
LABEL_13:
    unint64_t v27 = (v39 - 1) & v39;
    unint64_t v32 = __clz(__rbit64(v39)) + (v38 << 6);
    int64_t v70 = v38;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v38 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v38 >= v61)
    {
      int64_t v70 = v56;
      goto LABEL_27;
    }
    unint64_t v39 = *(void *)(v59 + 8 * v38);
    ++v40;
    if (v39) {
      goto LABEL_13;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

unint64_t sub_1000ACF00()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v29 = 0xD00000000000001ELL;
  unint64_t v30 = 0x800000010014BA80;
  static Date.now.getter();
  sub_1000AEAC0((unint64_t *)&qword_10017EC00, (void (*)(uint64_t))&type metadata accessor for Date);
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v6._uint64_t countAndFlagsBits = 10;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v28._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*v0[9] + 304))();
  v28._object = v7;
  v8._uint64_t countAndFlagsBits = 10;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  String.append(_:)(v28);
  uint64_t v9 = swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[11] + 384))(v9);
  v28._object = v10;
  v11._uint64_t countAndFlagsBits = 10;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  String.append(_:)(v28);
  uint64_t v12 = swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[12] + 360))(v12);
  v28._object = v13;
  v14._uint64_t countAndFlagsBits = 10;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  String.append(_:)(v28);
  uint64_t v15 = swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[10] + 424))(v15);
  v28._object = v16;
  v17._uint64_t countAndFlagsBits = 10;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  String.append(_:)(v28);
  uint64_t v18 = swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[13] + 352))(v18);
  v28._object = v19;
  v20._uint64_t countAndFlagsBits = 10;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  String.append(_:)(v28);
  uint64_t v21 = swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[14] + 200))(v21);
  v28._object = v22;
  v23._uint64_t countAndFlagsBits = 10;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  String.append(_:)(v28);
  uint64_t v24 = swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[15] + 192))(v24);
  v28._object = v25;
  v26._uint64_t countAndFlagsBits = 10;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t sub_1000AD30C()
{
  sub_10000478C(v0 + 16);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000AD374()
{
  sub_1000AD30C();

  return _swift_deallocClassInstance(v0, 128, 7);
}

uint64_t sub_1000AD3A8()
{
  return sub_1000AB334();
}

uint64_t sub_1000AD3CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + 16;
  swift_beginAccess();
  return sub_10000469C(v3, a1);
}

uint64_t sub_1000AD41C()
{
  return swift_retain();
}

id sub_1000AD42C()
{
  return *(id *)(*(void *)v0 + 64);
}

unint64_t sub_1000AD438(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_1000AD47C(a1, v2);
}

unint64_t sub_1000AD47C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

void *sub_1000AD518(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100004700(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  if (v8)
  {
    if (v13 != a4 || v13 + 4 >= &a4[5 * v11 + 4]) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100004700(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1000AD654(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t *, uint64_t))
{
  v14[3] = a4;
  v14[4] = a5;
  uint64_t v11 = sub_1000045E8(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v11, a2, a4);
  uint64_t v12 = *a3;
  *(void *)(v12 + 16) = a1 + 1;
  return a6(v14, v12 + 40 * a1 + 32);
}

unint64_t sub_1000AD6FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100004700((uint64_t *)&unk_10017FB50);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 40)
    {
      sub_10001BA68(i, (uint64_t)&v11, (uint64_t *)&unk_10017EDD0);
      uint64_t v5 = v11;
      unint64_t result = sub_1000AD438(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = (unint64_t)sub_10001889C(&v12, (_OWORD *)(v3[7] + 32 * result));
      uint64_t v8 = v3[2];
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t type metadata accessor for DriverKitDaemonSideEffects()
{
  return self;
}

uint64_t *sub_1000AD824(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  uint64_t v9 = type metadata accessor for URL();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[7] = (uint64_t)_swiftEmptyArrayStorage;
  sub_10000469C(a1, (uint64_t)(v4 + 2));
  v4[8] = (uint64_t)a2;
  sub_100029900(a3, (uint64_t)v98, (uint64_t *)&unk_10017EDC0);
  uint64_t v12 = sub_1000AEB2C((uint64_t)v98);
  uint64_t v91 = v8;
  uint64_t v92 = a1;
  Swift::String v86 = v11;
  if (v12 == 1)
  {
    __chkstk_darwin(v12);
    id v13 = a2;
    sub_1000D5CA8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/KernelManagement_executables/driverkitd/DriverKitDaemon.swift", 99, 2, 66, a1, 0xD00000000000001BLL, 0x800000010014BD60, (void (*)(uint64_t))sub_1000AEB44);
    long long v84 = v124;
    long long v85 = v123;
    uint64_t v82 = v126;
    uint64_t v83 = v125;
    uint64_t v80 = v128;
    uint64_t v81 = v127;
    uint64_t v78 = v130;
    uint64_t v79 = v129;
    uint64_t v76 = v132;
    uint64_t v77 = v131;
    long long v74 = v135;
    long long v75 = v134;
    uint64_t v72 = v136;
    uint64_t v73 = v133;
    uint64_t v70 = v138;
    uint64_t v71 = v137;
    uint64_t v68 = v140;
    uint64_t v69 = v139;
    uint64_t v66 = v142;
    uint64_t v67 = v141;
    uint64_t v14 = v143;
    uint64_t v15 = v144;
    uint64_t v93 = v145;
    uint64_t v16 = v146;
    uint64_t v17 = v147;
    long long v94 = v148;
    if (v144)
    {
LABEL_3:
      uint64_t v87 = v14;
      uint64_t v88 = v15;
      goto LABEL_6;
    }
  }
  else
  {
    long long v84 = v98[1];
    long long v85 = v98[0];
    uint64_t v82 = v100;
    uint64_t v83 = v99;
    uint64_t v80 = v102;
    uint64_t v81 = v101;
    uint64_t v78 = v104;
    uint64_t v79 = v103;
    uint64_t v76 = v106;
    uint64_t v77 = v105;
    long long v74 = v109;
    long long v75 = v108;
    uint64_t v72 = v110;
    uint64_t v73 = v107;
    uint64_t v70 = v112;
    uint64_t v71 = v111;
    uint64_t v68 = v114;
    uint64_t v69 = v113;
    uint64_t v14 = v117;
    uint64_t v66 = v116;
    uint64_t v67 = v115;
    uint64_t v15 = v118;
    uint64_t v93 = v119;
    uint64_t v16 = v120;
    uint64_t v18 = v121;
    long long v94 = v122;
    id v19 = a2;
    uint64_t v17 = v18;
    if (v15) {
      goto LABEL_3;
    }
  }
  Swift::String v20 = (uint64_t *)sub_1000FDE04();
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  uint64_t v87 = v22;
  uint64_t v88 = v21;
  swift_bridgeObjectRetain();
LABEL_6:
  if (v16)
  {
    uint64_t v89 = v16;
    uint64_t v90 = v93;
  }
  else
  {
    swift_bridgeObjectRetain();
    Swift::String v23 = (uint64_t *)sub_1000FDE10();
    uint64_t v24 = *v23;
    uint64_t v89 = v23[1];
    uint64_t v90 = v24;
  }
  swift_bridgeObjectRetain();
  if (!(void)v94)
  {
    swift_bridgeObjectRetain();
    sub_1000FDE1C();
  }
  swift_bridgeObjectRetain();
  long long v123 = v85;
  long long v124 = v84;
  uint64_t v125 = v83;
  uint64_t v126 = v82;
  uint64_t v127 = v81;
  uint64_t v128 = v80;
  uint64_t v129 = v79;
  uint64_t v130 = v78;
  uint64_t v131 = v77;
  uint64_t v132 = v76;
  long long v134 = v75;
  long long v135 = v74;
  uint64_t v133 = v73;
  uint64_t v136 = v72;
  uint64_t v137 = v71;
  uint64_t v138 = v70;
  uint64_t v139 = v69;
  uint64_t v140 = v68;
  uint64_t v141 = v67;
  uint64_t v142 = v66;
  uint64_t v143 = v14;
  uint64_t v144 = v15;
  uint64_t v145 = v93;
  uint64_t v146 = v16;
  uint64_t v147 = v17;
  long long v148 = v94;
  type metadata accessor for ActivationStateManager();
  uint64_t v25 = (void *)v4[8];
  uint64_t v26 = v92;
  sub_10000469C(v92, (uint64_t)&v95);
  swift_bridgeObjectRetain();
  id v27 = v25;
  v4[15] = sub_1000B652C((uint64_t)v27, &v95);
  type metadata accessor for ApplicationManager();
  id v28 = v27;
  uint64_t v29 = (uint64_t)v86;
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  sub_10000469C(v26, (uint64_t)&v95);
  v4[9] = sub_10001E714((uint64_t)v28, v29, &v95);
  type metadata accessor for KernelStateManager();
  sub_10000469C(v26, (uint64_t)&v95);
  id v30 = (id)v4[8];
  v4[10] = sub_10000577C((uint64_t)&v123, (uint64_t)&v95, v30);
  type metadata accessor for DriverBinManager();
  id v31 = v30;
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  sub_10000469C(v26, (uint64_t)&v95);
  v4[11] = sub_100048034((uint64_t)v31, v29, &v95);
  type metadata accessor for ApprovalManager();
  id v32 = (id)v4[8];
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  sub_10000469C(v26, (uint64_t)&v95);
  v4[12] = sub_1000A4FDC((uint64_t)v32, v29, &v95);
  type metadata accessor for ApprovalSettingsStateManager();
  uint64_t v33 = (void *)v4[8];
  sub_10000469C(v26, (uint64_t)&v95);
  id v34 = v33;
  v4[13] = sub_10011F028(v34, (uint64_t)&v95);
  type metadata accessor for ActiveDriversStateManager();
  sub_10000469C(v26, (uint64_t)&v95);
  v4[14] = (uint64_t)sub_100025A10((uint64_t)v34, &v95);
  uint64_t v35 = v4[10];
  uint64_t v96 = v91;
  char v97 = &off_10016EDA0;
  *(void *)&long long v95 = v4;
  uint64_t v36 = *(void (**)(long long *))(*(void *)v35 + 400);
  swift_retain();
  v36(&v95);
  sub_10000478C((uint64_t)&v95);
  uint64_t v37 = *(void (**)(uint64_t))(*(void *)v4[9] + 288);
  swift_retain();
  uint64_t v38 = swift_retain();
  v37(v38);
  swift_release();
  swift_release();
  unint64_t v39 = *(void (**)(uint64_t))(*(void *)v4[11] + 264);
  swift_retain();
  uint64_t v40 = swift_retain();
  v39(v40);
  swift_release();
  swift_release();
  uint64_t v41 = *(void (**)(uint64_t))(*(void *)v4[11] + 272);
  swift_retain();
  uint64_t v42 = swift_retain();
  v41(v42);
  swift_release();
  swift_release();
  uint64_t v43 = *(void (**)(uint64_t))(*(void *)v4[12] + 280);
  swift_retain();
  uint64_t v44 = swift_retain();
  v43(v44);
  swift_release();
  swift_release();
  uint64_t v45 = *(void (**)(uint64_t))(*(void *)v4[12] + 288);
  swift_retain();
  uint64_t v46 = swift_retain();
  v45(v46);
  swift_release();
  swift_release();
  uint64_t v47 = *(void (**)(uint64_t))(*(void *)v4[12] + 296);
  swift_retain();
  uint64_t v48 = swift_retain();
  v47(v48);
  swift_release();
  swift_release();
  uint64_t v49 = *(void (**)(uint64_t))(*(void *)v4[10] + 392);
  swift_retain();
  uint64_t v50 = swift_retain();
  v49(v50);
  swift_release();
  swift_release();
  uint64_t v51 = *(void (**)(uint64_t))(*(void *)v4[10] + 376);
  swift_retain();
  uint64_t v52 = swift_retain();
  v51(v52);
  swift_release();
  swift_release();
  uint64_t v53 = *(void (**)(uint64_t))(*(void *)v4[10] + 360);
  swift_retain();
  uint64_t v54 = swift_retain();
  v53(v54);
  swift_release();
  swift_release();
  uint64_t v55 = *(void (**)(uint64_t))(*(void *)v4[10] + 368);
  swift_retain();
  uint64_t v56 = swift_retain();
  v55(v56);
  swift_release();
  swift_release();
  unint64_t v57 = *(void (**)(uint64_t))(*(void *)v4[10] + 384);
  swift_retain();
  uint64_t v58 = swift_retain();
  v57(v58);
  swift_release();
  swift_release();
  uint64_t v59 = *(void (**)(uint64_t))(*(void *)v4[13] + 304);
  swift_retain();
  uint64_t v60 = swift_retain();
  v59(v60);
  swift_release();
  swift_release();
  int64_t v61 = *(void (**)(uint64_t))(*(void *)v4[13] + 320);
  swift_retain();
  uint64_t v62 = swift_retain();
  v61(v62);
  swift_release();
  swift_release();
  uint64_t v63 = *(void (**)(uint64_t))(*(void *)v4[13] + 312);
  swift_retain();
  uint64_t v64 = swift_retain();
  v63(v64);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(void *)v4[13] + 328))(v4[9]);
  sub_10000478C(v26);
  return v4;
}

uint64_t sub_1000AE3D0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AE408()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000AE450()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_beginAccess();
  uint64_t result = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = result + 32;
    swift_bridgeObjectRetain();
    char v42 = 0;
    uint64_t v5 = &type metadata for String;
    do
    {
      sub_10000469C(v4, (uint64_t)v45);
      sub_10000469C((uint64_t)v45, (uint64_t)v44);
      sub_100004700((uint64_t *)&unk_10017EB60);
      if (swift_dynamicCast())
      {
        sub_10000478C((uint64_t)v45);
        swift_bridgeObjectRelease();
        char v42 = 1;
      }
      else if (swift_dynamicCast())
      {
        sub_100004700((uint64_t *)&unk_10017D6E0);
        uint64_t v6 = swift_allocObject();
        *(_OWORD *)(v6 + 16) = xmmword_100132F30;
        uint64_t v7 = sub_100079D84(v43);
        if (!v8)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          swift_bridgeObjectRelease();
          __break(1u);
LABEL_28:
          if (sub_1000F59D4())
          {
            static os_log_type_t.error.getter();
            sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
            uint64_t v40 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();
          }
          else
          {
            sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
            uint64_t v40 = (void *)static OS_os_log.default.getter();
            static os_log_type_t.default.getter();
            os_log(_:dso:log:type:_:)();
          }

          exit(0);
        }
        uint64_t v9 = v7;
        uint64_t v10 = v8;
        *(void *)(v6 + 56) = v5;
        unint64_t v11 = sub_10002A1DC();
        *(void *)(v6 + 64) = v11;
        *(void *)(v6 + 32) = v9;
        *(void *)(v6 + 40) = v10;
        uint64_t v12 = sub_100079D9C(v43);
        if (v13 >> 60 == 15) {
          goto LABEL_26;
        }
        uint64_t v14 = v12;
        unint64_t v15 = v13;
        uint64_t v16 = sub_100014690(v12, v13);
        uint64_t v18 = v17;
        sub_10002404C(v14, v15);
        id v19 = v5;
        *(void *)(v6 + 96) = v5;
        *(void *)(v6 + 104) = v11;
        *(void *)(v6 + 72) = v16;
        *(void *)(v6 + 80) = v18;
        sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
        Swift::String v20 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        uint64_t v21 = sub_100079D84(v43);
        unint64_t v23 = v22;
        swift_bridgeObjectRelease();
        if (v23) {
          uint64_t v24 = v21;
        }
        else {
          uint64_t v24 = 0x296C696E28;
        }
        if (!v23) {
          unint64_t v23 = 0xE500000000000000;
        }
        unint64_t v25 = v23;
        String.append(_:)(*(Swift::String *)&v24);
        swift_bridgeObjectRelease();
        active = type metadata accessor for ActiveDriversStateManager();
        sub_1000EA080(0xD000000000000021, (char *)0x800000010014BCC0, active, &off_10016AA30);
        swift_bridgeObjectRelease();
        sub_10000478C((uint64_t)v45);
        uint64_t v5 = v19;
      }
      else
      {
        if (!swift_dynamicCast())
        {
          _StringGuts.grow(_:)(34);
          v41._uint64_t countAndFlagsBits = 0xD000000000000020;
          v41._object = (void *)0x800000010014BB60;
          String.append(_:)(v41);
          _print_unlocked<A, B>(_:_:)();
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        sub_100004700((uint64_t *)&unk_10017D6E0);
        uint64_t v27 = swift_allocObject();
        *(_OWORD *)(v27 + 16) = xmmword_100132F10;
        uint64_t v28 = sub_100077EC0((uint64_t)&type metadata for KernelRequests.UnloadNotification, (uint64_t)&off_10016C568);
        if (!v29) {
          goto LABEL_27;
        }
        uint64_t v30 = v28;
        uint64_t v31 = v29;
        *(void *)(v27 + 56) = v5;
        *(void *)(v27 + 64) = sub_10002A1DC();
        *(void *)(v27 + 32) = v30;
        *(void *)(v27 + 40) = v31;
        sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
        id v32 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        uint64_t v33 = sub_100077EC0((uint64_t)&type metadata for KernelRequests.UnloadNotification, (uint64_t)&off_10016C568);
        id v34 = v5;
        unint64_t v36 = v35;
        swift_bridgeObjectRelease();
        if (v36) {
          uint64_t v37 = v33;
        }
        else {
          uint64_t v37 = 0x296C696E28;
        }
        if (!v36) {
          unint64_t v36 = 0xE500000000000000;
        }
        unint64_t v38 = v36;
        String.append(_:)(*(Swift::String *)&v37);
        swift_bridgeObjectRelease();
        unint64_t v39 = type metadata accessor for ActiveDriversStateManager();
        sub_1000EA080(0xD000000000000021, (char *)0x800000010014BBD0, v39, &off_10016AA30);
        uint64_t v5 = v34;
        swift_bridgeObjectRelease();
        sub_10000478C((uint64_t)v45);
      }
      sub_10000478C((uint64_t)v44);
      v4 += 40;
      --v3;
    }
    while (v3);
    uint64_t result = swift_bridgeObjectRelease();
    if (v42) {
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t sub_1000AEAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000AEAB8()
{
  return swift_release();
}

uint64_t sub_1000AEAC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DriverKitDaemon()
{
  return self;
}

uint64_t sub_1000AEB2C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_1000AEB44@<D0>(uint64_t a1@<X8>)
{
  sub_10008D05C(*(void **)(v1 + 16), (uint64_t)v12);
  if (!v2)
  {
    long long v5 = v24;
    *(_OWORD *)(a1 + 192) = v23;
    *(_OWORD *)(a1 + 208) = v5;
    *(_OWORD *)(a1 + 224) = v25;
    *(void *)(a1 + 240) = v26;
    long long v6 = v20;
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v6;
    long long v7 = v22;
    *(_OWORD *)(a1 + 160) = v21;
    *(_OWORD *)(a1 + 176) = v7;
    long long v8 = v16;
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 80) = v8;
    long long v9 = v18;
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 112) = v9;
    long long v10 = v12[1];
    *(_OWORD *)a1 = v12[0];
    *(_OWORD *)(a1 + 16) = v10;
    double result = *(double *)&v13;
    long long v11 = v14;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v11;
  }
  return result;
}

uint64_t sub_1000AEBE0(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 32))();
  if (result) {
    return sub_1000F2410(result);
  }
  return result;
}

uint64_t sub_1000AEC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (v9) {
    uint64_t v10 = 0x6261747563657865;
  }
  else {
    uint64_t v10 = 0x7373656C65646F63;
  }
  if (v9) {
    unint64_t v11 = 0xEA0000000000656CLL;
  }
  else {
    unint64_t v11 = 0xE800000000000000;
  }
  uint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  uint64_t v29 = v10;
  unint64_t v30 = v11;
  v12._uint64_t countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  unint64_t v15 = v14;
  v28[0] = v13;
  v28[1] = v14;
  sub_1000B0838();
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  sub_10003C944(v13, v15);
  v17._uint64_t countAndFlagsBits = 0x20656C646E756220;
  v17._object = (void *)0xE800000000000000;
  String.append(_:)(v17);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  if (v19)
  {
    unint64_t v20 = v19;
  }
  else
  {
    uint64_t v18 = 0x296C696E28;
    unint64_t v20 = 0xE500000000000000;
  }
  unint64_t v21 = v20;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 544497952;
  v22._object = (void *)0xE400000000000000;
  String.append(_:)(v22);
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  uint64_t v23 = URL.path.getter();
  long long v25 = v24;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  return v29;
}

void sub_1000AEEB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [v1 _cfBundle];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = (void *)_CFBundleCopyInfoPlistURL();

    if (v8)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v9 = Data.init(contentsOf:options:)();
      unint64_t v11 = v10;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_1000EDB34(v9, v11);
      sub_100012A10(v9, v11);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1000AF038()
{
  id v1 = [v0 _cfBundle];
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  id v2 = v1;
  id v3 = (id)_CFBundleCopyInfoPlistURL();

  if (!v3)
  {
LABEL_7:
    __break(1u);
    return;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000AF0C0(uint64_t a1, uint64_t a2)
{
  return sub_1000AF0D8(a1, a2, (SEL *)&selRef_infoDictionary);
}

uint64_t sub_1000AF0CC(uint64_t a1, uint64_t a2)
{
  return sub_1000AF0D8(a1, a2, (SEL *)&selRef_localizedInfoDictionary);
}

uint64_t sub_1000AF0D8(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void sub_1000AF144()
{
}

uint64_t sub_1000AF168(uint64_t a1, uint64_t a2)
{
  return sub_100013C84(a1, a2, (SEL *)&selRef_executablePath);
}

void sub_1000AF174()
{
  id v1 = [*v0 bundleURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_1000AF1D4()
{
}

uint64_t sub_1000AF1F8@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 builtInPlugInsURL];
  if (v3)
  {
    id v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

uint64_t sub_1000AF2C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1000AF2E4(a1, a2, a3, a4);
}

uint64_t sub_1000AF2E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v5 = a4;
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  NSString v6 = 0;
  if (a4) {
LABEL_3:
  }
    NSString v5 = String._bridgeToObjectiveC()();
LABEL_4:
  id v7 = [v4 pathForResource:v6 ofType:v5];

  if (!v7) {
    return 0;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v8;
}

uint64_t sub_1000AF394(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v5 = a4;
  NSString v6 = *v4;
  if (!a2)
  {
    NSString v7 = 0;
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  NSString v7 = String._bridgeToObjectiveC()();
  if (v5) {
LABEL_3:
  }
    NSString v5 = String._bridgeToObjectiveC()();
LABEL_4:
  id v8 = [v6 pathsForResourcesOfType:v7 inDirectory:v5];

  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  return v9;
}

uint64_t sub_1000AF438@<X0>(uint64_t a1@<X8>)
{
  CFURLRef v3 = CFBundleCopyBuiltInPlugInsURL(*(CFBundleRef *)(v1 + 16));
  if (v3)
  {
    CFURLRef v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for URL();
    NSString v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    NSString v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

uint64_t sub_1000AF4F4(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = *(__CFBundle **)(v4 + 16);
  if (a2) {
    a2 = (__CFString *)String._bridgeToObjectiveC()();
  }
  if (a4) {
    unint64_t v14 = (__CFString *)String._bridgeToObjectiveC()();
  }
  else {
    unint64_t v14 = 0;
  }
  CFURLRef v15 = CFBundleCopyResourceURL(v13, a2, v14, 0);

  if (v15)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 0, 1, v16);
  }
  else
  {
    uint64_t v16 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
  }
  sub_1000B09A8((uint64_t)v10, (uint64_t)v12);
  type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
  {

    sub_1000130EC((uint64_t)v12, (uint64_t *)&unk_10017FA60);
    return 0;
  }
  else
  {
    uint64_t v18 = URL.path.getter();

    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v16);
  }
  return v18;
}

void *sub_1000AF738(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v33 - v13;
  (*(void (**)(uint64_t))(*(void *)v4 + 168))(v12);
  URL._bridgeToObjectiveC()(v15);
  CFURLRef v17 = v16;
  unint64_t v36 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v37 = v8 + 8;
  v36(v14, v7);
  if (a2) {
    a2 = (__CFString *)String._bridgeToObjectiveC()();
  }
  if (a4) {
    uint64_t v18 = (__CFString *)String._bridgeToObjectiveC()();
  }
  else {
    uint64_t v18 = 0;
  }
  CFArrayRef v19 = CFBundleCopyResourceURLsOfTypeInDirectory(v17, a2, v18);

  if (!v19) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v38 = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v20 = v38;
  unint64_t v21 = _swiftEmptyArrayStorage;
  if (v38)
  {
    int64_t v22 = v38[2];
    if (v22)
    {
      unint64_t v38 = _swiftEmptyArrayStorage;
      sub_10000C884(0, v22, 0);
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
      uint64_t v33 = v20;
      id v34 = v23;
      long long v24 = (char *)v20 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      uint64_t v35 = v8 + 16;
      uint64_t v25 = *(void *)(v8 + 72);
      do
      {
        v34(v11, v24, v7);
        uint64_t v26 = URL.path.getter();
        uint64_t v28 = v27;
        v36(v11, v7);
        unint64_t v21 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10000C884(0, v21[2] + 1, 1);
          unint64_t v21 = v38;
        }
        unint64_t v30 = v21[2];
        unint64_t v29 = v21[3];
        if (v30 >= v29 >> 1)
        {
          sub_10000C884(v29 > 1, v30 + 1, 1);
          unint64_t v21 = v38;
        }
        v21[2] = v30 + 1;
        uint64_t v31 = &v21[2 * v30];
        v31[4] = v26;
        v31[5] = v28;
        v24 += v25;
        --v22;
      }
      while (v22);
    }
    swift_bridgeObjectRelease();
  }
  return v21;
}

CFStringRef sub_1000AFA10()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 128))();
  if (!v1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    goto LABEL_12;
  }
  uint64_t v2 = v1;
  CFStringRef result = kCFBundleIdentifierKey;
  if (!kCFBundleIdentifierKey)
  {
    __break(1u);
    return result;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v2 + 16) || (unint64_t v6 = sub_1000048E0(v4, v5), (v7 & 1) == 0))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  sub_1000047DC(*(void *)(v2 + 56) + 32 * v6, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v10 + 1))
  {
LABEL_12:
    sub_1000130EC((uint64_t)&v9, &qword_10017C018);
    return 0;
  }
  if (swift_dynamicCast()) {
    return (CFStringRef)v8;
  }
  else {
    return 0;
  }
}

id sub_1000AFB2C()
{
  return sub_1000AFB5C((uint64_t (*)(void))&CFBundleGetInfoDictionary);
}

id sub_1000AFB44()
{
  return sub_1000AFB5C((uint64_t (*)(void))&CFBundleGetLocalInfoDictionary);
}

id sub_1000AFB5C(uint64_t (*a1)(void))
{
  id result = (id)a1(*(void *)(v1 + 16));
  if (result)
  {
    CFURLRef v3 = result;
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

    return 0;
  }
  return result;
}

uint64_t sub_1000AFBD0()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void))(*(void *)v0 + 152))();
  uint64_t v6 = Data.init(contentsOf:options:)();
  unint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v9 = sub_1000EDB34(v6, v8);
  sub_100012A10(v6, v8);
  return v9;
}

void sub_1000AFD48()
{
}

uint64_t sub_1000AFD60()
{
  uint64_t v1 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - v5;
  CFURLRef v7 = CFBundleCopyExecutableURL(*(CFBundleRef *)(v0 + 16));
  if (v7)
  {
    CFURLRef v8 = v7;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 0, 1, v9);
  }
  else
  {
    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  }
  sub_1000B09A8((uint64_t)v4, (uint64_t)v6);
  type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    sub_1000130EC((uint64_t)v6, (uint64_t *)&unk_10017FA60);
    return 0;
  }
  else
  {
    uint64_t v11 = URL.path.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v9);
  }
  return v11;
}

void sub_1000AFF38()
{
}

void sub_1000AFF50(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(*(void *)(v1 + 16));
  if (v2)
  {
    id v3 = (id)v2;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000AFFB0()
{
  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_1000AFFE8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t sub_1000B002C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t sub_1000B0070()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t sub_1000B00B4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t sub_1000B00F8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t sub_1000B013C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t sub_1000B0180()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t sub_1000B01C4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t sub_1000B0208()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t sub_1000B024C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t sub_1000B0290(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000AEC1C(a1, WitnessTable);
}

double sub_1000B02E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  uint64_t v8 = sub_1000B088C((uint64_t)v6);
  if (v8)
  {
    uint64_t v9 = v8;
    *(void *)(a2 + 24) = type metadata accessor for UncachedBundle();
    *(void *)(a2 + 32) = sub_1000B0B04(&qword_10017EDE8, v10, (void (*)(uint64_t))type metadata accessor for UncachedBundle);
    *(void *)a2 = v9;
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

double sub_1000B0408@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_1000B088C((uint64_t)v4);
  if (v5)
  {
    uint64_t v6 = v5;
    *(void *)(a1 + 24) = type metadata accessor for UncachedBundle();
    *(void *)(a1 + 32) = sub_1000B0B04(&qword_10017EDE8, v7, (void (*)(uint64_t))type metadata accessor for UncachedBundle);
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double sub_1000B0504@<D0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [self bundleWithIdentifier:v2];

  if (v3)
  {
    *(void *)(a1 + 24) = sub_1000B0A10();
    *(void *)(a1 + 32) = sub_1000B0B04(&qword_10017EDF8, 255, (void (*)(uint64_t))sub_1000B0A10);
    *(void *)a1 = v3;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1000B05E0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t sub_1000B0624()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t sub_1000B0668()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_1000B06AC(uint64_t a1, uint64_t a2)
{
  return sub_1000B06B8(a1, a2, (uint64_t)&off_10016EE98);
}

uint64_t sub_1000B06B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v6 = sub_1000045E8(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_10000464C(a1, v7);
  return sub_1000B0750((uint64_t)v10, v7, v8);
}

uint64_t sub_1000B0750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000469C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100004700(&qword_10017EE00);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_10000478C(a1);
}

uint64_t sub_1000B07CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017EE00);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32);

  return v5(v4, v4, a1);
}

unint64_t sub_1000B0838()
{
  unint64_t result = qword_10017EDE0;
  if (!qword_10017EDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EDE0);
  }
  return result;
}

uint64_t sub_1000B088C(uint64_t a1)
{
  type metadata accessor for UncachedBundle();
  uint64_t v2 = swift_allocObject();
  URL._bridgeToObjectiveC()(v3);
  uint64_t v5 = v4;
  Unique = (void *)_CFBundleCreateUnique();

  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  if (Unique)
  {
    id v9 = Unique;
    v8(a1, v7);

    *(void *)(v2 + 16) = v9;
  }
  else
  {
    v8(a1, v7);
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v2;
}

uint64_t type metadata accessor for UncachedBundle()
{
  return self;
}

uint64_t sub_1000B09A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700((uint64_t *)&unk_10017FA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B0A10()
{
  unint64_t result = qword_10017EDF0;
  if (!qword_10017EDF0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017EDF0);
  }
  return result;
}

uint64_t sub_1000B0A50(uint64_t a1)
{
  uint64_t result = sub_1000B0B04(&qword_10017EE08, 255, (void (*)(uint64_t))sub_1000B0A10);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B0AAC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000B0B04(&qword_10017EE10, a2, (void (*)(uint64_t))type metadata accessor for UncachedBundle);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B0B04(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for RealBundleResolver()
{
  return self;
}

void type metadata accessor for CFBundle()
{
  if (!qword_10017EFB8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10017EFB8);
    }
  }
}

uint64_t sub_1000B0BC8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v77 = a2;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v75 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = a1;
  uint64_t v12 = *(void *)(a1 + 24);
  LODWORD(a1) = *(_DWORD *)(v3 + 640);
  LODWORD(v78[0]) = *sub_1000B9B60();
  LODWORD(v82) = a1;
  sub_100013438();
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v74 = v4;
  if ((a3 & 1) == 0)
  {
    type metadata accessor for DriverExtension(0);
    if (!swift_dynamicCastClass())
    {
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v12 + 144))();
      uint64_t v15 = v14;
      CFURLRef v16 = sub_10002A5B4();
      if (v13 == *v16 && v15 == v16[1])
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          type metadata accessor for KernelExtension(0);
          if (!swift_dynamicCastClass()
            || ((*(uint64_t (**)(void))(*(void *)v12 + 216))() & 1) == 0
            || ((*(uint64_t (**)(void))(*(void *)v12 + 136))() & 1) == 0)
          {
            if (!swift_dynamicCastClass()) {
              goto LABEL_53;
            }
            sub_10003FDC8(v12 + 24, (uint64_t)v78);
            if (v81 != 2)
            {
              sub_10003FE80((uint64_t)v78);
              goto LABEL_53;
            }
            if (LOBYTE(v78[0]) == 4
              || (LOBYTE(v82) = 2, sub_100029B94(), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0))
            {
LABEL_53:
              if (swift_dynamicCastClass())
              {
                (*(void (**)(void))(*(void *)v12 + 216))();
                static os_log_type_t.error.getter();
                sub_100004700((uint64_t *)&unk_10017D6E0);
                uint64_t v61 = swift_allocObject();
                *(_OWORD *)(v61 + 16) = xmmword_100132F10;
                uint64_t v62 = (*(uint64_t (**)(void))(*(void *)v12 + 200))();
                uint64_t v64 = v63;
                *(void *)(v61 + 56) = &type metadata for String;
                *(void *)(v61 + 64) = sub_10002A1DC();
                *(void *)(v61 + 32) = v62;
                *(void *)(v61 + 40) = v64;
              }
              else
              {
                static os_log_type_t.error.getter();
                sub_100004700((uint64_t *)&unk_10017D6E0);
                uint64_t v66 = swift_allocObject();
                *(_OWORD *)(v66 + 16) = xmmword_100132F10;
                uint64_t v67 = (*(uint64_t (**)(void))(*(void *)v12 + 200))();
                uint64_t v69 = v68;
                *(void *)(v66 + 56) = &type metadata for String;
                *(void *)(v66 + 64) = sub_10002A1DC();
                *(void *)(v66 + 32) = v67;
                *(void *)(v66 + 40) = v69;
              }
              sub_10002A230();
              uint64_t v65 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();

              v78[0] = 0;
              v78[1] = 0xE000000000000000;
              _StringGuts.grow(_:)(47);
              swift_bridgeObjectRelease();
              strcpy((char *)v78, "Cannot insert ");
              HIBYTE(v78[1]) = -18;
              uint64_t v82 = v12;
              type metadata accessor for OSExtension(0);
              sub_1000B5CF8((unint64_t *)&qword_10017BC90, (void (*)(uint64_t))type metadata accessor for OSExtension);
              v70._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v70);
              swift_bridgeObjectRelease();
              v71._object = (void *)0x800000010014BE70;
              v71._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
              String.append(_:)(v71);
              uint64_t v72 = v78[0];
              unint64_t v59 = v78[1];
              sub_100012E3C();
              swift_allocError();
              *(void *)uint64_t v58 = v72;
              char v60 = 68;
              goto LABEL_57;
            }
          }
        }
      }
    }
  }
  type metadata accessor for DriverExtension(0);
  if (swift_dynamicCastClass())
  {
    static os_log_type_t.info.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_100132F10;
    uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v12 + 200))();
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10002A1DC();
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    sub_10002A230();
    uint64_t v23 = (void *)static OS_os_log.default.getter();
  }
  else
  {
    type metadata accessor for KernelExtension(0);
    if (!swift_dynamicCastClass())
    {
      static os_log_type_t.debug.getter();
      sub_100004700((uint64_t *)&unk_10017D6E0);
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_100132F10;
      uint64_t v55 = (*(uint64_t (**)(void))(*(void *)v12 + 200))();
      uint64_t v57 = v56;
      *(void *)(v54 + 56) = &type metadata for String;
      *(void *)(v54 + 64) = sub_10002A1DC();
      *(void *)(v54 + 32) = v55;
      *(void *)(v54 + 40) = v57;
      sub_10002A230();
      uint64_t v23 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      goto LABEL_22;
    }
    (*(void (**)(void))(*(void *)v12 + 216))();
    v73[3] = static os_log_type_t.debug.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_100132F10;
    uint64_t v47 = (*(uint64_t (**)(void))(*(void *)v12 + 200))();
    uint64_t v49 = v48;
    *(void *)(v46 + 56) = &type metadata for String;
    *(void *)(v46 + 64) = sub_10002A1DC();
    *(void *)(v46 + 32) = v47;
    *(void *)(v46 + 40) = v49;
    sub_10002A230();
    uint64_t v23 = (void *)static OS_os_log.default.getter();
  }
  os_log(_:dso:log:_:_:)();
LABEL_22:
  swift_bridgeObjectRelease();

  uint64_t v5 = v74;
LABEL_23:
  uint64_t v24 = (*(uint64_t (**)(void))(*(void *)v12 + 144))();
  uint64_t v26 = v25;
  uint64_t v27 = sub_10002A5B4();
  if (v24 == *v27 && v26 == v27[1])
  {
    uint64_t v30 = swift_bridgeObjectRelease();
  }
  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v30 = swift_bridgeObjectRelease();
    if ((v29 & 1) == 0) {
      return sub_10005D028(v76);
    }
  }
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v12 + 112))(v78, v30);
  uint64_t v31 = v79;
  if (!v79)
  {
    sub_1000130EC((uint64_t)v78, &qword_10017BC78);
    sub_10002A5C0();
    return sub_10005D028(v76);
  }
  uint64_t v32 = v80;
  sub_1000036B0(v78, v79);
  (*(void (**)(uint64_t, uint64_t))(v32 + 64))(v31, v32);
  uint64_t v33 = URL.path.getter();
  uint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v11, v9);
  sub_10000478C((uint64_t)v78);
  unint64_t v36 = sub_10002A5C0();
  if (!v35) {
    return sub_10005D028(v76);
  }
  if (v33 == *v36 && v35 == v36[1])
  {
    uint64_t v37 = swift_bridgeObjectRelease();
  }
  else
  {
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v37 = swift_bridgeObjectRelease();
    if ((v38 & 1) == 0) {
      return sub_10005D028(v76);
    }
  }
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 192))(v37);
  uint64_t v40 = (*(uint64_t (**)(void))(*(void *)v6 + 168))();
  sub_1000B169C(v40);
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v45 = swift_bridgeObjectRelease();
  if (!v42)
  {
    if (v39 >= 1) {
      goto LABEL_44;
    }
    return sub_10005D028(v76);
  }
  uint64_t v45 = swift_bridgeObjectRelease();
  if (v44 >= v39) {
    return sub_10005D028(v76);
  }
LABEL_44:
  if ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 136))(v45)) {
    return sub_10005D028(v76);
  }
  type metadata accessor for KernelExtension(0);
  uint64_t v51 = swift_dynamicCastClass();
  uint64_t v52 = v77;
  if (!v51)
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v58 = 0xD00000000000003ELL;
    unint64_t v59 = 0x800000010014BDE0;
    char v60 = 44;
LABEL_57:
    *(void *)(v58 + 8) = v59;
    *(_OWORD *)(v58 + 16) = 0u;
    *(_OWORD *)(v58 + 32) = 0u;
    *(_OWORD *)(v58 + 48) = 0u;
    *(void *)(v58 + 64) = 0;
    *(unsigned char *)(v58 + 72) = v60;
    return swift_willThrow();
  }
  uint64_t v53 = v51;
  swift_retain();
  sub_1000B1730(v53, v52);
  uint64_t result = swift_release();
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return sub_10005D028(v76);
  }
  return result;
}

uint64_t sub_1000B169C(uint64_t a1)
{
  uint64_t result = sub_100010EA4(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = sub_1000B59EC(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1000B1730(uint64_t a1, uint64_t a2)
{
  void (*v45)(uint64_t *__return_ptr, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65[3];
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  char v4 = v2;
  static os_log_type_t.info.getter();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100132F10;
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)a1 + 200))();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10002A1DC();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  sub_10002A230();
  uint64_t v11 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  uint64_t v12 = sub_10002A5CC();
  swift_retain();
  uint64_t v13 = sub_1000B5A48((uint64_t)v12);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (v3) {
    return result;
  }
  uint64_t v63 = v4;
  if (v13[2])
  {
    sub_100004700(&qword_10017EFC0);
    uint64_t v15 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v15 = &_swiftEmptyDictionarySingleton;
  }
  CFURLRef v16 = v4;
  v65[0] = (uint64_t)v15;
  uint64_t v17 = swift_bridgeObjectRetain();
  sub_1000B3880(v17, 1, v65);
  swift_bridgeObjectRelease();
  char v18 = *(void (**)(void))(*v4 + 176);
  char v60 = swift_retain();
  v18();
  uint64_t v68 = (unint64_t)&_swiftEmptySetSingleton;
  uint64_t v19 = *(void *)(a2 + 24);
  if ((v19 & 0xC000000000000001) != 0)
  {
    uint64_t v62 = 0;
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    unint64_t v22 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v23 = -1 << *(unsigned char *)(v19 + 32);
    uint64_t v20 = ~v23;
    uint64_t v62 = v19 + 64;
    uint64_t v24 = -v23;
    if (v24 < 64) {
      uint64_t v25 = ~(-1 << v24);
    }
    else {
      uint64_t v25 = -1;
    }
    unint64_t v21 = v25 & *(void *)(v19 + 64);
    unint64_t v22 = *(void *)(a2 + 24);
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = 0;
  uint64_t v61 = (unint64_t)(v20 + 64) >> 6;
  while ((v22 & 0x8000000000000000) != 0)
  {
    uint64_t v30 = __CocoaDictionary.Iterator.next()();
    if (!v30)
    {
      CFURLRef v16 = v63;
      goto LABEL_40;
    }
    uint64_t v32 = v31;
    uint64_t v64 = v30;
    type metadata accessor for OSExtension(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v33 = v65[0];
    swift_unknownObjectRelease();
    uint64_t v64 = v32;
    type metadata accessor for RealizedInfo(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v34 = v65[0];
    swift_unknownObjectRelease();
    uint64_t v29 = v26;
    uint64_t v27 = v21;
    CFURLRef v16 = v63;
    if (!v33) {
      goto LABEL_40;
    }
LABEL_34:
    swift_release();
    uint64_t v64 = v34;
    BOOL v40 = sub_1000A02F8(&v64);
    uint64_t v41 = v64;
    if (v40)
    {
      uint64_t v42 = *(void (**)(uint64_t))(*(void *)v64 + 168);
      uint64_t v43 = swift_retain();
      v42(v43);
      swift_release();
      sub_100004700(&qword_10017CC08);
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_100132F30;
      *(void *)(v44 + 32) = *sub_10002FFC8();
      *(void *)(v44 + 40) = *sub_1000301A8();
      sub_10003F664();
      sub_100004700(&qword_10017E828);
      sub_10009AE14();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      CFURLRef v16 = v63;
      sub_10003F60C();
      dispatch thunk of RawRepresentable.rawValue.getter();
      sub_10003F560();
      dispatch thunk of OptionSet.init(rawValue:)();
      dispatch thunk of SetAlgebra.formIntersection(_:)();
      dispatch thunk of SetAlgebra.init()();
      sub_10003F6BC();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        uint64_t v45 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(v41 + 24) + 112);
        uint64_t v46 = swift_retain();
        v45(v65, v46);
        swift_release();
        uint64_t v47 = v66;
        sub_1000130EC((uint64_t)v65, &qword_10017BC78);
        if (v47)
        {
          uint64_t v48 = *(void *)(v41 + 24);
          swift_retain();
          sub_1000B3C04(v65, v48);
          swift_release();
        }
      }
    }
    swift_release();
    uint64_t v26 = v29;
    unint64_t v21 = v27;
  }
  if (v21)
  {
    uint64_t v27 = (v21 - 1) & v21;
    unint64_t v28 = __clz(__rbit64(v21)) | (v26 << 6);
    uint64_t v29 = v26;
    goto LABEL_33;
  }
  int64_t v35 = v26 + 1;
  if (__OFADD__(v26, 1))
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  if (v35 >= v61) {
    goto LABEL_40;
  }
  unint64_t v36 = *(void *)(v62 + 8 * v35);
  uint64_t v29 = v26 + 1;
  if (v36) {
    goto LABEL_32;
  }
  uint64_t v29 = v26 + 2;
  if (v26 + 2 >= v61) {
    goto LABEL_40;
  }
  unint64_t v36 = *(void *)(v62 + 8 * v29);
  if (v36) {
    goto LABEL_32;
  }
  uint64_t v29 = v26 + 3;
  if (v26 + 3 >= v61) {
    goto LABEL_40;
  }
  unint64_t v36 = *(void *)(v62 + 8 * v29);
  if (v36) {
    goto LABEL_32;
  }
  uint64_t v29 = v26 + 4;
  if (v26 + 4 >= v61) {
    goto LABEL_40;
  }
  unint64_t v36 = *(void *)(v62 + 8 * v29);
  if (v36)
  {
LABEL_32:
    uint64_t v27 = (v36 - 1) & v36;
    unint64_t v28 = __clz(__rbit64(v36)) + (v29 << 6);
LABEL_33:
    uint64_t v38 = 8 * v28;
    uint64_t v39 = *(void *)(*(void *)(v22 + 48) + v38);
    uint64_t v34 = *(void *)(*(void *)(v22 + 56) + v38);
    swift_retain();
    swift_retain();
    if (!v39) {
      goto LABEL_40;
    }
    goto LABEL_34;
  }
  uint64_t v37 = v26 + 5;
  while (v61 != v37)
  {
    unint64_t v36 = *(void *)(v62 + 8 * v37++);
    if (v36)
    {
      uint64_t v29 = v37 - 1;
      goto LABEL_32;
    }
  }
LABEL_40:
  sub_1000048D8();
  uint64_t v49 = v68;
  if ((v68 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v50 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v50 = *(void *)(v68 + 16);
  }
  if (v50)
  {
    static os_log_type_t.info.getter();
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_100132F10;
    if ((v49 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v52 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v52 = *(void *)(v49 + 16);
    }
    *(void *)(v51 + 56) = &type metadata for Int;
    *(void *)(v51 + 64) = &protocol witness table for Int;
    *(void *)(v51 + 32) = v52;
    uint64_t v53 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    uint64_t v55 = v16[5];
    uint64_t v54 = v16[6];
    sub_1000036B0(v16 + 2, v55);
    sub_10008B8BC(v55, v54);
    uint64_t v56 = v66;
    uint64_t v57 = v67;
    sub_1000036B0(v65, v66);
    uint64_t v58 = swift_bridgeObjectRetain();
    unint64_t v59 = sub_1000B31B8(v58);
    swift_bridgeObjectRelease_n();
    (*(void (**)(void *, uint64_t, uint64_t))(v57 + 88))(v59, v56, v57);
    swift_bridgeObjectRelease();
    sub_10000478C((uint64_t)v65);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v60;
}

uint64_t sub_1000B1F70(uint64_t a1, uint64_t a2)
{
  char v4 = v2;
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v34 = *(_OWORD *)a2;
  long long v35 = v7;
  long long v36 = *(_OWORD *)(a2 + 32);
  uint64_t v37 = *(void *)(a2 + 48);
  uint64_t v8 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
  uint64_t v9 = sub_10005CAB8(*(unsigned char *)(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
  swift_release();
  if (v9)
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v10 = 0xD00000000000003BLL;
    *(void *)(v10 + 8) = 0x800000010014C140;
LABEL_5:
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(void *)(v10 + 64) = 0;
    *(unsigned char *)(v10 + 72) = 9;
    return swift_willThrow();
  }
  swift_retain();
  unint64_t v11 = swift_bridgeObjectRetain();
  char v12 = sub_1000B5B68(v11, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v12)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    type metadata accessor for URL();
    sub_1000B5CF8(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
    v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 0xD000000000000017;
    v14._object = (void *)0x800000010014C1A0;
    String.append(_:)(v14);
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v10 = 0xD000000000000016;
    *(void *)(v10 + 8) = 0x800000010014C180;
    goto LABEL_5;
  }
  uint64_t result = sub_1000378DC(a1);
  if (!v3)
  {
    uint64_t v16 = result;
    uint64_t v17 = sub_1000AA6CC(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path);
    int v18 = v4[160];
    LODWORD(v32) = *(_DWORD *)sub_1000B9974();
    LODWORD(v33) = v18;
    sub_100013438();
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) == 0)
    {
      switch(v8)
      {
        case 1:
          sub_1000B2804(2, a2, a1);
          uint64_t v28 = v16 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID;
          char v29 = 0;
          char v30 = 0;
          goto LABEL_29;
        case 2:
          sub_1000B29AC(v16 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID, 0, 0, a2, a1);
          uint64_t v28 = v16 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID;
          char v29 = 1;
          char v30 = 1;
LABEL_29:
          sub_1000B29AC(v28, v29, v30, a2, a1);
          break;
        case 3:
          break;
        default:
          sub_1000B2804(1, a2, a1);
          sub_1000B2804(2, a2, a1);
          break;
      }
    }
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)a2 & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v31 = v16;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v19 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v4 + 256))(&v32);
    uint64_t v20 = v17[2];
    if (v20)
    {
      unint64_t v21 = v17 + 5;
      do
      {
        Swift::Int v22 = *(v21 - 1);
        Swift::Int v23 = *v21;
        swift_bridgeObjectRetain();
        sub_1000848E0(&v33, v22, v23);
        swift_bridgeObjectRelease();
        v21 += 2;
        --v20;
      }
      while (v20);
    }
    swift_bridgeObjectRelease();
    v19(&v32, 0);
    unint64_t v24 = *(void *)(v31 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions);
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    if (v25)
    {
      if (v25 < 1)
      {
        __break(1u);
        type metadata accessor for OSExtension(0);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        JUMPOUT(0x1000B27F4);
      }
      uint64_t v26 = 0;
      unint64_t v38 = v24 & 0xC000000000000001;
      do
      {
        if (v38)
        {
          uint64_t v27 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v27 = *(void *)(v24 + 8 * v26 + 32);
          swift_retain();
        }
        sub_1000B0BC8(v27, a2, 0);
        swift_release();
        ++v26;
      }
      while (v25 != v26);
    }
    swift_bridgeObjectRelease();
    return v31;
  }
  return result;
}

uint64_t sub_1000B2804(char a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  v13[2] = *(_OWORD *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 48);
  sub_1000661D0((uint64_t)v13);
  uint64_t v6 = sub_10005CAB8(a1);
  sub_100011138((uint64_t)v13);
  uint64_t result = swift_release();
  if (v6)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    char v15 = *(unsigned char *)(a3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
    sub_100059970();
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 0x20726574666120;
    v9._object = (void *)0xE700000000000000;
    String.append(_:)(v9);
    char v15 = a1;
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 46;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v12 = 0x6120746F6E6E6143;
    *(void *)(v12 + 8) = 0xEB00000000206464;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(void *)(v12 + 64) = 0;
    *(unsigned char *)(v12 + 72) = 9;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1000B29AC(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v54 = a5;
  uint64_t v9 = sub_100004700(&qword_10017C918);
  __chkstk_darwin(v9 - 8);
  Swift::String v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v16 = *(_OWORD *)(a4 + 16);
  v57[0] = *(_OWORD *)a4;
  v57[1] = v16;
  v57[2] = *(_OWORD *)(a4 + 32);
  uint64_t v58 = *(void *)(a4 + 48);
  sub_1000661D0((uint64_t)v57);
  uint64_t v17 = sub_10005CAB8(a2);
  uint64_t result = sub_100011138((uint64_t)v57);
  if (v17)
  {
    sub_100057A70(a1, (uint64_t)v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      sub_1000130EC((uint64_t)v11, &qword_10017C918);
      uint64_t v19 = v54;
      unint64_t v20 = sub_1000F11D0(*(unsigned char *)(v54 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
      uint64_t v22 = v21;
      uint64_t v55 = 0;
      unint64_t v56 = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      uint64_t v59 = v19;
      type metadata accessor for KernelCollection();
      sub_1000B5CF8(&qword_10017C928, (void (*)(uint64_t))type metadata accessor for KernelCollection);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v25 = v24;
      swift_bridgeObjectRelease();
      uint64_t v55 = v23;
      unint64_t v56 = v25;
      v26._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v26._object = (void *)0x800000010014C1C0;
      String.append(_:)(v26);
      uint64_t v27 = v55;
      unint64_t v28 = v56;
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v29 = v20;
      *(void *)(v29 + 8) = v22;
      *(void *)(v29 + 16) = v27;
      *(void *)(v29 + 24) = v28;
      *(_OWORD *)(v29 + 32) = 0u;
      *(_OWORD *)(v29 + 48) = 0u;
      *(void *)(v29 + 64) = 0;
      *(unsigned char *)(v29 + 72) = 6;
      swift_willThrow();
      return swift_release();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
      if (static UUID.== infix(_:_:)())
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        return swift_release();
      }
      else
      {
        uint64_t v37 = v54;
        unint64_t v53 = sub_1000F11D0(*(unsigned char *)(v54 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
        uint64_t v39 = v38;
        uint64_t v55 = 0;
        unint64_t v56 = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v40._uint64_t countAndFlagsBits = 0x6120746F6E6E6143;
        v40._object = (void *)0xEB00000000206464;
        String.append(_:)(v40);
        uint64_t v59 = v37;
        type metadata accessor for KernelCollection();
        uint64_t v41 = v13;
        sub_1000B5CF8(&qword_10017C928, (void (*)(uint64_t))type metadata accessor for KernelCollection);
        v42._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        v43._object = (void *)0x800000010014C1E0;
        v43._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v43);
        v44._uint64_t countAndFlagsBits = UUID.uuidString.getter();
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v45._uint64_t countAndFlagsBits = 0x207361202CLL;
        v45._object = (void *)0xE500000000000000;
        String.append(_:)(v45);
        uint64_t v59 = v17;
        type metadata accessor for RealizedKernelCollection(0);
        sub_1000B5CF8(&qword_10017EFC8, (void (*)(uint64_t))type metadata accessor for RealizedKernelCollection);
        v46._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._uint64_t countAndFlagsBits = 0x4955552073616820;
        v47._object = (void *)0xEA00000000002044;
        String.append(_:)(v47);
        v48._uint64_t countAndFlagsBits = UUID.uuidString.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._uint64_t countAndFlagsBits = 10530;
        v49._object = (void *)0xE200000000000000;
        String.append(_:)(v49);
        uint64_t v50 = v55;
        unint64_t v51 = v56;
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v52 = v53;
        *(void *)(v52 + 8) = v39;
        *(void *)(v52 + 16) = v50;
        *(void *)(v52 + 24) = v51;
        *(_OWORD *)(v52 + 32) = 0u;
        *(_OWORD *)(v52 + 48) = 0u;
        *(void *)(v52 + 64) = 0;
        *(unsigned char *)(v52 + 72) = 6;
        swift_willThrow();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v15, v12);
      }
    }
  }
  else if ((a3 & 1) == 0)
  {
    uint64_t v55 = 0;
    unint64_t v56 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    uint64_t v55 = 0x6120746F6E6E6143;
    unint64_t v56 = 0xEB00000000206464;
    LOBYTE(v59) = *(unsigned char *)(v54 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
    sub_100059970();
    v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 0x74756F6874697720;
    v31._object = (void *)0xE900000000000020;
    String.append(_:)(v31);
    LOBYTE(v59) = a2;
    v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 46;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    uint64_t v34 = v55;
    unint64_t v35 = v56;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v36 = v34;
    *(void *)(v36 + 8) = v35;
    *(_OWORD *)(v36 + 16) = 0u;
    *(_OWORD *)(v36 + 32) = 0u;
    *(_OWORD *)(v36 + 48) = 0u;
    *(void *)(v36 + 64) = 0;
    *(unsigned char *)(v36 + 72) = 9;
    return swift_willThrow();
  }
  return result;
}

id sub_1000B3024(void *a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  id v9 = sub_100097950(a1, a2, a3);
  id v10 = v9;
  if (v5)
  {
    v15[10] = v5;
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if (swift_dynamicCast())
    {
      sub_10005BFC4((uint64_t)v15, (uint64_t)v16);
      type metadata accessor for OSExtension(0);
      uint64_t v11 = sub_100114014(a1);
      if (!v11)
      {
        swift_willThrow();
        sub_1000B5CA0((uint64_t)v16, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10003E9C8);
        return v10;
      }
      uint64_t v12 = v11;
      swift_retain();
      sub_1000B5CA0((uint64_t)v16, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10005C020);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v15[0] = *(void *)(a5 + 8);
      *(void *)(a5 + 8) = 0x8000000000000000;
      sub_1000B5700((uint64_t)v16, v12, isUniquelyReferenced_nonNull_native);
      *(void *)(a5 + 8) = v15[0];
      swift_release_n();
      swift_bridgeObjectRelease();
      sub_1000B5CA0((uint64_t)v16, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10003E9C8);
    }
    swift_willThrow();
  }
  else
  {
    sub_1000B0BC8((uint64_t)v9, a5, a4 & 1);
  }
  return v10;
}

void *sub_1000B31B8(uint64_t a1)
{
  uint64_t v2 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v2 - 8);
  char v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  Swift::String v46 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  Swift::String v42 = (char *)&v41 - v9;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for OSExtension(0);
    sub_1000B5CF8(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    a1 = v59;
    uint64_t v51 = v60;
    uint64_t v11 = v61;
    uint64_t v12 = v62;
    unint64_t v13 = v63;
  }
  else
  {
    uint64_t v14 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v51 = a1 + 56;
    uint64_t v11 = ~v14;
    uint64_t v16 = -v14;
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    unint64_t v13 = v17 & v15;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    uint64_t v12 = 0;
  }
  uint64_t v55 = v5;
  uint64_t v49 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v44 = v11;
  int64_t v50 = (unint64_t)(v11 + 64) >> 6;
  unint64_t v53 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v54 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  Swift::String v47 = _swiftEmptyArrayStorage;
  uint64_t v43 = v6;
  Swift::String v45 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  long long v52 = xmmword_100132F10;
  Swift::String v48 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    uint64_t v18 = v12;
    if ((a1 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v21 = __CocoaSet.Iterator.next()();
    if (!v21) {
      goto LABEL_41;
    }
    uint64_t v64 = v21;
    type metadata accessor for OSExtension(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v22 = v56[0];
    swift_unknownObjectRelease();
    if (!v22) {
      goto LABEL_41;
    }
LABEL_31:
    uint64_t v26 = a1;
    static os_log_type_t.info.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = v52;
    uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v22 + 200))();
    uint64_t v30 = v29;
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = sub_10002A1DC();
    *(void *)(v27 + 32) = v28;
    *(void *)(v27 + 40) = v30;
    sub_10002A230();
    Swift::String v31 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    (*(void (**)(void *__return_ptr))(*(void *)v22 + 112))(v56);
    uint64_t v32 = v57;
    if (v57)
    {
      uint64_t v33 = v58;
      sub_1000036B0(v56, v57);
      (*(void (**)(uint64_t, uint64_t))(v33 + 64))(v32, v33);
      uint64_t v34 = v55;
      (*v54)(v4, 0, 1, v55);
      sub_10000478C((uint64_t)v56);
    }
    else
    {
      sub_1000130EC((uint64_t)v56, &qword_10017BC78);
      uint64_t v34 = v55;
      (*v54)(v4, 1, 1, v55);
    }
    swift_release();
    if ((*v53)(v4, 1, v34) == 1)
    {
      a1 = v26;
      uint64_t result = (void *)sub_1000130EC((uint64_t)v4, (uint64_t *)&unk_10017FA60);
    }
    else
    {
      unint64_t v35 = *v45;
      uint64_t v36 = v42;
      (*v45)(v42, v4, v34);
      v35(v46, v36, v34);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v47 = (void *)sub_10000C4CC(0, v47[2] + 1, 1, (unint64_t)v47);
      }
      unint64_t v38 = v47[2];
      unint64_t v37 = v47[3];
      if (v38 >= v37 >> 1) {
        Swift::String v47 = (void *)sub_10000C4CC(v37 > 1, v38 + 1, 1, (unint64_t)v47);
      }
      uint64_t v39 = v46;
      Swift::String v40 = v47;
      v47[2] = v38 + 1;
      uint64_t result = (void *)((uint64_t (*)(char *, char *, uint64_t))v35)((char *)v40+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v38, v39, v34);
      a1 = v26;
    }
  }
  if (v13)
  {
    unint64_t v19 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v20 = v19 | (v12 << 6);
LABEL_30:
    uint64_t v22 = *(void *)(*(void *)(a1 + 48) + 8 * v20);
    swift_retain();
    if (!v22) {
      goto LABEL_41;
    }
    goto LABEL_31;
  }
  int64_t v23 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v23 >= v50) {
      goto LABEL_41;
    }
    unint64_t v24 = *(void *)(v51 + 8 * v23);
    ++v12;
    if (!v24)
    {
      uint64_t v12 = v18 + 2;
      if (v18 + 2 >= v50) {
        goto LABEL_41;
      }
      unint64_t v24 = *(void *)(v51 + 8 * v12);
      if (!v24)
      {
        uint64_t v12 = v18 + 3;
        if (v18 + 3 >= v50) {
          goto LABEL_41;
        }
        unint64_t v24 = *(void *)(v51 + 8 * v12);
        if (!v24)
        {
          uint64_t v12 = v18 + 4;
          if (v18 + 4 >= v50) {
            goto LABEL_41;
          }
          unint64_t v24 = *(void *)(v51 + 8 * v12);
          if (!v24)
          {
            uint64_t v12 = v18 + 5;
            if (v18 + 5 >= v50) {
              goto LABEL_41;
            }
            unint64_t v24 = *(void *)(v51 + 8 * v12);
            if (!v24)
            {
              uint64_t v25 = v18 + 6;
              while (v50 != v25)
              {
                unint64_t v24 = *(void *)(v51 + 8 * v25++);
                if (v24)
                {
                  uint64_t v12 = v25 - 1;
                  goto LABEL_29;
                }
              }
LABEL_41:
              sub_1000048D8();
              return v47;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v12 << 6);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B3880(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v44 = *(void *)(a1 + 56);
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_10003A578(v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1000B4BD4();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    unint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    *(unsigned char *)(v19[6] + v11) = v6;
    uint64_t v20 = v19[7] + 24 * v11;
    *(unsigned char *)uint64_t v20 = v7;
    *(void *)(v20 + 8) = v8;
    *(void *)(v20 + 16) = v44;
    uint64_t v21 = v19[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v19[2] = v23;
    uint64_t v24 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = (void *)(a1 + 88); ; i += 4)
    {
      uint64_t v26 = *((unsigned __int8 *)i - 24);
      char v27 = *((unsigned char *)i - 16);
      uint64_t v29 = *(i - 1);
      uint64_t v28 = *i;
      uint64_t v30 = (void *)*a3;
      swift_bridgeObjectRetain();
      unint64_t v31 = sub_10003A578(v26);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v22 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v22) {
        break;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        sub_1000B4FE4(v35, 1);
        unint64_t v31 = sub_10003A578(v26);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_25;
        }
      }
      if (v36) {
        goto LABEL_10;
      }
      unint64_t v38 = (void *)*a3;
      *(void *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      *(unsigned char *)(v38[6] + v31) = v26;
      uint64_t v39 = v38[7] + 24 * v31;
      *(unsigned char *)uint64_t v39 = v27;
      *(void *)(v39 + 8) = v29;
      *(void *)(v39 + 16) = v28;
      uint64_t v40 = v38[2];
      BOOL v22 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (v22) {
        goto LABEL_24;
      }
      v38[2] = v41;
      if (!--v24) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1000B4FE4(v14, a2 & 1);
  unint64_t v16 = sub_10003A578(v6);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x80000001001460E0;
  v42._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)();
  v43._uint64_t countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B3C04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for OSExtension(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_1000B3F00(v7, result + 1);
    uint64_t v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      sub_1000B413C();
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    sub_1000B4464(a2, v17);
    uint64_t *v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for OSExtension(0);
  sub_1000B5CF8(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
  swift_bridgeObjectRetain();
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_1000B454C(v15, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_1000B5CF8(&qword_10017D420, (void (*)(uint64_t))type metadata accessor for OSExtension);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_1000B3F00(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100004700(&qword_10017EFD0);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for OSExtension(0);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1000B413C();
          uint64_t v2 = v14;
        }
        sub_1000B5CF8(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_1000B413C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100004700(&qword_10017EFD0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v26 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_33;
          }
          unint64_t v15 = v27[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v26) {
              goto LABEL_33;
            }
            unint64_t v15 = v27[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v26)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v27 = -1 << v25;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v26) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v27[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      type metadata accessor for OSExtension(0);
      sub_1000B5CF8(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v19 = result & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v21 = 0;
        unint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v23 = v20 == v22;
          if (v20 == v22) {
            unint64_t v20 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_1000B4464(uint64_t a1, uint64_t a2)
{
  type metadata accessor for OSExtension(0);
  sub_1000B5CF8(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_1000B454C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000B413C();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)sub_1000B4728();
      goto LABEL_12;
    }
    sub_1000B48D4();
  }
  uint64_t v8 = *v3;
  type metadata accessor for OSExtension(0);
  sub_1000B5CF8(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
  unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    sub_1000B5CF8(&qword_10017D420, (void (*)(uint64_t))type metadata accessor for OSExtension);
    do
    {
      unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1000B4728()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017EFD0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000B48D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100004700(&qword_10017EFD0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    type metadata accessor for OSExtension(0);
    sub_1000B5CF8(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void *sub_1000B4BD4()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017EFC0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 24 * v15;
    char v17 = *(unsigned char *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    uint64_t v20 = *(void *)(v4 + 56) + 24 * v15;
    *(unsigned char *)uint64_t v20 = v17;
    *(void *)(v20 + 8) = v18;
    *(void *)(v20 + 16) = v19;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000B4D8C()
{
  sub_100004700(&qword_10017D418);
  uint64_t v33 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t v32 = v3;
    uint64_t result = (void *)swift_release();
    uint64_t *v33 = v32;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  unint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 64);
  BOOL v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  uint64_t v37 = v3;
  if (v6)
  {
    uint64_t result = memmove(result, __src, 8 * v5);
    uint64_t v3 = v37;
  }
  int64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v1 + 64);
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v36 = v1;
  while (1)
  {
    if (v10)
    {
      uint64_t v38 = (v10 - 1) & v10;
      int64_t v39 = v7;
      unint64_t v11 = __clz(__rbit64(v10)) | (v7 << 6);
      uint64_t v12 = v36;
      uint64_t v3 = v37;
      goto LABEL_12;
    }
    int64_t v28 = v7 + 1;
    uint64_t v12 = v36;
    uint64_t v3 = v37;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v35) {
      goto LABEL_26;
    }
    unint64_t v29 = *((void *)__src + v28);
    int64_t v30 = v7 + 1;
    if (!v29)
    {
      int64_t v30 = v7 + 2;
      if (v7 + 2 >= v35) {
        goto LABEL_26;
      }
      unint64_t v29 = *((void *)__src + v30);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    uint64_t v38 = (v29 - 1) & v29;
    int64_t v39 = v30;
    unint64_t v11 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_12:
    uint64_t v13 = 8 * v11;
    uint64_t v14 = *(void *)(v12 + 56);
    uint64_t v15 = *(void *)(*(void *)(v12 + 48) + 8 * v11);
    uint64_t v16 = 80 * v11;
    uint64_t v17 = *(void *)(v14 + v16);
    uint64_t v18 = *(void *)(v14 + v16 + 8);
    uint64_t v19 = *(void *)(v14 + v16 + 16);
    uint64_t v20 = *(void *)(v14 + v16 + 24);
    unint64_t v21 = *(void *)(v14 + v16 + 32);
    uint64_t v22 = *(void *)(v14 + v16 + 40);
    uint64_t v23 = *(void *)(v14 + v16 + 48);
    uint64_t v24 = *(void *)(v14 + v16 + 56);
    uint64_t v25 = *(void *)(v14 + v16 + 64);
    char v26 = *(unsigned char *)(v14 + v16 + 72);
    *(void *)(*(void *)(v3 + 48) + v13) = v15;
    uint64_t v27 = *(void *)(v3 + 56) + v16;
    *(void *)uint64_t v27 = v17;
    *(void *)(v27 + 8) = v18;
    *(void *)(v27 + 16) = v19;
    *(void *)(v27 + 24) = v20;
    *(void *)(v27 + 32) = v21;
    *(void *)(v27 + 40) = v22;
    *(void *)(v27 + 48) = v23;
    *(void *)(v27 + 56) = v24;
    *(void *)(v27 + 64) = v25;
    *(unsigned char *)(v27 + 72) = v26;
    swift_retain();
    uint64_t result = (void *)sub_10005C020(v17, v18, v19, v20, v21, v22, v23, v24, v25, v26);
    unint64_t v10 = v38;
    int64_t v7 = v39;
  }
  uint64_t v31 = v7 + 3;
  if (v7 + 3 >= v35) {
    goto LABEL_26;
  }
  unint64_t v29 = *((void *)__src + v31);
  if (v29)
  {
    int64_t v30 = v7 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v35) {
      goto LABEL_26;
    }
    unint64_t v29 = *((void *)__src + v30);
    ++v31;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000B4FE4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017EFC0);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v37) {
      break;
    }
    uint64_t v22 = v38;
    unint64_t v23 = v38[v21];
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v23 = v38[v13];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v37) {
              goto LABEL_33;
            }
            unint64_t v23 = v38[v13];
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = *(void *)(v5 + 56);
    char v30 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
    uint64_t v31 = (char *)(v29 + 24 * v20);
    char v32 = *v31;
    uint64_t v34 = *((void *)v31 + 1);
    uint64_t v33 = *((void *)v31 + 2);
    if ((v40 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_10003FED4();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(unsigned char *)(*(void *)(v7 + 48) + v17) = v30;
    uint64_t v18 = *(void *)(v7 + 56) + 24 * v17;
    *(unsigned char *)uint64_t v18 = v32;
    *(void *)(v18 + 8) = v34;
    *(void *)(v18 + 16) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  uint64_t v22 = v38;
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000B530C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017D418);
  char v44 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  Swift::String v42 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v40 = v2;
  int64_t v41 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  uint64_t v43 = v5;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v45 = v13;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v41) {
      break;
    }
    uint64_t v22 = v42;
    unint64_t v23 = v42[v21];
    int64_t v24 = v13 + 1;
    if (!v23)
    {
      int64_t v24 = v13 + 2;
      if (v13 + 2 >= v41) {
        goto LABEL_33;
      }
      unint64_t v23 = v42[v24];
      if (!v23)
      {
        uint64_t v25 = v13 + 3;
        if (v13 + 3 >= v41)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = v42[v25];
        if (!v23)
        {
          while (1)
          {
            int64_t v24 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v24 >= v41) {
              goto LABEL_33;
            }
            unint64_t v23 = v42[v24];
            ++v25;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v24 = v13 + 3;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    int64_t v45 = v24;
    unint64_t v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_31:
    uint64_t v30 = *(void *)(v5 + 56);
    uint64_t v31 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
    uint64_t v32 = v30 + 80 * v20;
    uint64_t v33 = *(void *)v32;
    uint64_t v34 = *(void *)(v32 + 8);
    uint64_t v36 = *(void *)(v32 + 16);
    uint64_t v35 = *(void *)(v32 + 24);
    unint64_t v37 = *(void *)(v32 + 32);
    uint64_t v38 = *(void *)(v32 + 40);
    uint64_t v49 = *(void *)(v32 + 48);
    uint64_t v47 = *(void *)(v32 + 64);
    uint64_t v48 = *(void *)(v32 + 56);
    char v46 = *(unsigned char *)(v32 + 72);
    if ((v44 & 1) == 0)
    {
      swift_retain();
      sub_10005C020(v33, v34, v36, v35, v37, v38, v49, v48, v47, v46);
    }
    type metadata accessor for OSExtension(0);
    sub_1000B5CF8(&qword_10017C938, (void (*)(uint64_t))type metadata accessor for OSExtension);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(void *)(*(void *)(v7 + 48) + 8 * v17) = v31;
    uint64_t v18 = *(void *)(v7 + 56) + 80 * v17;
    *(void *)uint64_t v18 = v33;
    *(void *)(v18 + 8) = v34;
    *(void *)(v18 + 16) = v36;
    *(void *)(v18 + 24) = v35;
    *(void *)(v18 + 32) = v37;
    *(void *)(v18 + 40) = v38;
    *(void *)(v18 + 48) = v49;
    *(void *)(v18 + 56) = v48;
    *(void *)(v18 + 64) = v47;
    *(unsigned char *)(v18 + 72) = v46;
    ++*(void *)(v7 + 16);
    uint64_t v5 = v43;
    int64_t v13 = v45;
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v22 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v39 = 1 << *(unsigned char *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v22, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v39;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000B5700(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10005FBF8(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1000B4D8C();
      goto LABEL_7;
    }
    sub_1000B530C(v13, a3 & 1);
    unint64_t v19 = sub_10005FBF8(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      unint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for OSExtension(0);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 80 * v10;
    return sub_1000B5D40(a1, v17);
  }
LABEL_13:
  sub_1000B583C(v10, a2, a1, v16);

  return swift_retain();
}

uint64_t sub_1000B583C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_10005BFC4(a3, a4[7] + 80 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

void *sub_1000B58A8(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B58C8(a1, a2, a3, *v3);
  void *v3 = result;
  return result;
}

void *sub_1000B58C8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017EFD8);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100004700(&qword_10017EFE0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1000B59EC(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(unsigned __int8 *)(*(void *)(a4 + 56) + 24 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

void *sub_1000B5A48(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1000B58A8(0, v2, 0);
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    while (1)
    {
      unsigned int v6 = *v4++;
      char v5 = v6;
      uint64_t v7 = swift_bridgeObjectRetain();
      char v8 = sub_10002BB04(v7, v6);
      if (v1) {
        break;
      }
      char v11 = v8;
      uint64_t v12 = v9;
      uint64_t v13 = v10;
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1) {
        sub_1000B58A8((void *)(v14 > 1), v15 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v15 + 1;
      unint64_t v16 = &_swiftEmptyArrayStorage[4 * v15];
      *((unsigned char *)v16 + 32) = v5;
      *((unsigned char *)v16 + 40) = v11;
      v16[6] = v12;
      v16[7] = v13;
      if (!--v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    swift_release();
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000B5B68(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      a2 += OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
      uint64_t v5 = 4;
      while (1)
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v7 = v5 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_12;
          }
        }
        else
        {
          swift_retain();
          uint64_t v7 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_12:
            __break(1u);
            goto LABEL_13;
          }
        }
        char v8 = static URL.== infix(_:_:)();
        swift_release();
        if ((v8 & 1) == 0)
        {
          ++v5;
          if (v7 != v4) {
            continue;
          }
        }
        goto LABEL_15;
      }
    }
  }
  char v8 = 0;
LABEL_15:
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1000B5CA0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 72);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), v4);
  return a1;
}

uint64_t sub_1000B5CF8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B5D40(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t (*sub_1000B5D9C())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000B5DF0()
{
  int v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 == 2)
  {
    char v2 = sub_1000B5E28();
    *(unsigned char *)(v0 + 72) = v2 & 1;
  }
  else
  {
    char v2 = v1 & 1;
  }
  return v2 & 1;
}

uint64_t sub_1000B5E28()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  v8[11] = sub_10007876C();
  uint64_t v3 = v0 + 2;
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  sub_1000036B0(v3, v5);
  sub_10007F4B4(v5, v4);
  sub_100077FDC(v8, (uint64_t)&type metadata for KernelRequests.GetDaemonActive, (uint64_t)&off_10017D988, v6);
  sub_10000478C((uint64_t)v8);
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_1000B652C(uint64_t a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 72) = 2;
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = _swiftEmptyArrayStorage;
  sub_10000372C(a2, v4 + 16);
  return v4;
}

_UNKNOWN **sub_1000B6590()
{
  char v1 = sub_1000B5E28();
  int v2 = *(unsigned __int8 *)(v0 + 72);
  BOOL v5 = v2 == 2;
  int v3 = v2 & 1;
  int v4 = v1 & 1;
  BOOL v5 = !v5 && v4 == v3;
  if (v5) {
    return 0;
  }
  *(unsigned char *)(v0 + 72) = v4;
  return &off_10016EF00;
}

unint64_t sub_1000B65D8()
{
  char v1 = (*(uint64_t (**)(void))(*(void *)v0 + 160))();
  BOOL v2 = (v1 & 1) == 0;
  if (v1) {
    uint64_t v3 = 0x6574617669746361;
  }
  else {
    uint64_t v3 = 0x6974636120746F6ELL;
  }
  if (v2) {
    unint64_t v4 = 0xED00006465746176;
  }
  else {
    unint64_t v4 = 0xE900000000000064;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x68206E6F6D656144;
  v6._object = (void *)0xEB00000000207361;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return 0xD00000000000001CLL;
}

uint64_t sub_1000B66D0()
{
  sub_10000478C(v0 + 16);

  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 73, 7);
}

uint64_t sub_1000B6718()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t sub_1000B673C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

void (*sub_1000B6760(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 128))();
  return sub_10000C31C;
}

uint64_t sub_1000B67D8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t sub_1000B67FC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t type metadata accessor for ActivationStateManager()
{
  return self;
}

void sub_1000B6844(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(a7 + 8) + 16))(a6);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 144))(v11);
  swift_release();
  sub_10005FAF8(v12, (uint64_t)v86);
  swift_release();
  unint64_t v13 = (unint64_t)v86;
  unint64_t v14 = sub_10005E234(a1, (uint64_t)a2);
  sub_100011138((uint64_t)v86);
  if (!v14) {
    goto LABEL_57;
  }
  char v77 = a5;
  uint64_t v79 = a3;
  uint64_t v87 = _swiftEmptyArrayStorage;
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v80 = a1;
    if (v15) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v80 = a1;
    if (v15)
    {
LABEL_4:
      if (v15 >= 1)
      {
        uint64_t v76 = a2;
        uint64_t v16 = 0;
        while (1)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v17 = *(void *)(v14 + 8 * v16 + 32);
            swift_retain();
          }
          (*(void (**)(uint64_t *__return_ptr))(**(void **)(v17 + 24) + 112))(&v82);
          uint64_t v18 = v84;
          if (v84)
          {
            uint64_t v19 = v85;
            sub_1000036B0(&v82, v84);
            (*(void (**)(uint64_t, uint64_t))(v19 + 56))(v18, v19);
            uint64_t v21 = v20;
            sub_10000478C((uint64_t)&v82);
            swift_bridgeObjectRelease();
            if (v21)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
              goto LABEL_8;
            }
          }
          else
          {
            sub_1000130EC((uint64_t)&v82, &qword_10017BC78);
          }
          swift_release();
LABEL_8:
          if (v15 == ++v16)
          {
            swift_bridgeObjectRelease();
            uint64_t v22 = (uint64_t)v87;
            a2 = v76;
            goto LABEL_18;
          }
        }
      }
      __break(1u);
      goto LABEL_60;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_18:
  BOOL v23 = v22 < 0 || (v22 & 0x4000000000000000) != 0;
  if (!v23)
  {
    uint64_t v24 = *(void *)(v22 + 16);
    if (v24 > 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v24 <= 0)
  {
LABEL_56:
    swift_release();
    a1 = v80;
LABEL_57:
    uint64_t v82 = 0;
    unint64_t v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v69._uint64_t countAndFlagsBits = 0xD000000000000027;
    v69._object = (void *)0x800000010014C280;
    String.append(_:)(v69);
    swift_bridgeObjectRetain();
    v70._uint64_t countAndFlagsBits = a1;
    v70._object = a2;
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    v71._object = (void *)0x800000010014C2B0;
    v71._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v71);
    uint64_t v72 = v82;
    unint64_t v73 = v83;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v35 = v72;
    *(void *)(v35 + 8) = v73;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_OWORD *)(v35 + 32) = 0u;
    *(_OWORD *)(v35 + 48) = 0u;
    *(void *)(v35 + 64) = 0;
    char v36 = 10;
    goto LABEL_58;
  }
LABEL_23:
  BOOL v74 = v23;
  unint64_t v78 = v22;
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v25 = swift_allocObject();
  long long v75 = xmmword_100132F30;
  *(_OWORD *)(v25 + 16) = xmmword_100132F30;
  *(void *)(v25 + 56) = &type metadata for Int;
  *(void *)(v25 + 64) = &protocol witness table for Int;
  *(void *)(v25 + 32) = v24;
  *(void *)(v25 + 96) = &type metadata for String;
  unint64_t v26 = sub_10002A1DC();
  *(void *)(v25 + 104) = v26;
  *(void *)(v25 + 72) = v80;
  *(void *)(v25 + 80) = a2;
  sub_10002A230();
  swift_bridgeObjectRetain();
  unint64_t v27 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  if (a4 >> 60 == 15)
  {
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_100132F10;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = v26;
    *(void *)(v28 + 32) = v80;
    *(void *)(v28 + 40) = a2;
    swift_bridgeObjectRetain();
    uint64_t v29 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    if ((a5 & 1) == 0)
    {
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = xmmword_100132F10;
      *(void *)(v46 + 56) = &type metadata for String;
      *(void *)(v46 + 64) = v26;
      a4 = v26;
      *(void *)(v46 + 32) = v80;
      *(void *)(v46 + 40) = a2;
      swift_bridgeObjectRetain();
      uint64_t v47 = (void *)static OS_os_log.default.getter();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();

      if (v23)
      {
        uint64_t v47 = (void *)v78;
        swift_bridgeObjectRetain();
        uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (!v48) {
          goto LABEL_54;
        }
      }
      else if (!*(void *)(v78 + 16))
      {
        goto LABEL_54;
      }
      if ((v78 & 0xC000000000000001) != 0) {
        goto LABEL_63;
      }
      if (*(void *)(v78 + 16))
      {
        Swift::String v42 = a2;
        uint64_t v43 = *(void *)(v78 + 32);
        swift_retain();
        goto LABEL_39;
      }
      __break(1u);
      goto LABEL_65;
    }
    swift_release();
    uint64_t v82 = 0;
    unint64_t v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(93);
    v30._uint64_t countAndFlagsBits = 0xD000000000000036;
    v30._object = (void *)0x800000010014C400;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = v80;
    v31._object = a2;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = 0xD000000000000025;
    v32._object = (void *)0x800000010014C440;
    String.append(_:)(v32);
    uint64_t v33 = v82;
    unint64_t v34 = v83;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v35 = v33;
    *(void *)(v35 + 8) = v34;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_OWORD *)(v35 + 32) = 0u;
    *(_OWORD *)(v35 + 48) = 0u;
    *(void *)(v35 + 64) = 0;
    char v36 = 50;
LABEL_58:
    *(unsigned char *)(v35 + 72) = v36;
    swift_willThrow();
    return;
  }
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_100132F30;
  sub_100012DE4(v79, a4);
  uint64_t v38 = sub_100014690(v79, a4);
  *(void *)(v37 + 56) = &type metadata for String;
  *(void *)(v37 + 64) = v26;
  *(void *)(v37 + 32) = v38;
  *(void *)(v37 + 40) = v39;
  *(void *)(v37 + 96) = &type metadata for String;
  *(void *)(v37 + 104) = v26;
  a5 = v26;
  *(void *)(v37 + 72) = v80;
  *(void *)(v37 + 80) = a2;
  swift_bridgeObjectRetain();
  char v40 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  swift_retain();
  sub_10002F064(v79, a4);
  unint64_t v13 = (unint64_t)sub_1000B84D8(v78, v79, a4);
  sub_10002404C(v79, a4);
  swift_release();
  if (!(v13 >> 62))
  {
    uint64_t v41 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_28;
  }
LABEL_60:
  uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
LABEL_28:
  unint64_t v26 = a5;
  if (v41)
  {
    if ((v13 & 0xC000000000000001) != 0)
    {
      Swift::String v42 = a2;
      uint64_t v43 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_32;
    }
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      Swift::String v42 = a2;
      uint64_t v43 = *(void *)(v13 + 32);
      swift_retain();
LABEL_32:
      swift_bridgeObjectRelease();
      uint64_t v44 = v79;
      unint64_t v45 = a4;
LABEL_33:
      sub_10002404C(v44, v45);
LABEL_39:
      swift_release();
LABEL_40:
      uint64_t v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = v75;
      *(void *)(v49 + 56) = &type metadata for String;
      *(void *)(v49 + 64) = v26;
      *(void *)(v49 + 32) = v80;
      *(void *)(v49 + 40) = v42;
      int64_t v50 = *(uint64_t (**)(uint64_t))(**(void **)(v43 + 24) + 200);
      swift_bridgeObjectRetain();
      uint64_t v51 = swift_retain();
      uint64_t v52 = v50(v51);
      *(void *)(v49 + 96) = &type metadata for String;
      *(void *)(v49 + 104) = v26;
      *(void *)(v49 + 72) = v52;
      *(void *)(v49 + 80) = v53;
      uint64_t v54 = (void *)static OS_os_log.default.getter();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_release();
      swift_bridgeObjectRelease();

      return;
    }
    __break(1u);
LABEL_63:
    Swift::String v42 = a2;
    uint64_t v43 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_release();
    unint64_t v26 = a4;
    goto LABEL_40;
  }
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = v75;
  *(void *)(v55 + 56) = &type metadata for String;
  *(void *)(v55 + 64) = a5;
  *(void *)(v55 + 32) = v80;
  *(void *)(v55 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v56 = sub_100014690(v79, a4);
  *(void *)(v55 + 96) = &type metadata for String;
  *(void *)(v55 + 104) = a5;
  *(void *)(v55 + 72) = v56;
  *(void *)(v55 + 80) = v57;
  uint64_t v58 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  if (v77)
  {
    swift_release();
    uint64_t v82 = 0;
    unint64_t v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(68);
    v59._uint64_t countAndFlagsBits = 0xD000000000000029;
    v59._object = (void *)0x800000010014C510;
    String.append(_:)(v59);
    v60._uint64_t countAndFlagsBits = v80;
    v60._object = a2;
    String.append(_:)(v60);
    v61._uint64_t countAndFlagsBits = 0xD000000000000017;
    v61._object = (void *)0x800000010014C540;
    String.append(_:)(v61);
    v62._uint64_t countAndFlagsBits = sub_100014690(v79, a4);
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    uint64_t v63 = v82;
    unint64_t v64 = v83;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v65 = v63;
    *(void *)(v65 + 8) = v64;
    *(_OWORD *)(v65 + 16) = 0u;
    *(_OWORD *)(v65 + 32) = 0u;
    *(_OWORD *)(v65 + 48) = 0u;
    *(void *)(v65 + 64) = 0;
    *(unsigned char *)(v65 + 72) = 10;
    swift_willThrow();
    sub_10002404C(v79, a4);
    return;
  }
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_100132F10;
  *(void *)(v66 + 56) = &type metadata for String;
  *(void *)(v66 + 64) = a5;
  *(void *)(v66 + 32) = v80;
  *(void *)(v66 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v67 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  if (v74)
  {
    swift_bridgeObjectRetain();
    uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    uint64_t v68 = *(void *)(v78 + 16);
  }
  uint64_t v47 = (void *)a4;
  if (!v68)
  {
    sub_10002404C(v79, a4);
LABEL_54:
    swift_release();
    return;
  }
  if ((v78 & 0xC000000000000001) != 0)
  {
LABEL_65:
    Swift::String v42 = a2;
    uint64_t v43 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_52;
  }
  if (*(void *)(v78 + 16))
  {
    Swift::String v42 = a2;
    uint64_t v43 = *(void *)(v78 + 32);
    swift_retain();
LABEL_52:
    uint64_t v44 = v79;
    unint64_t v45 = (unint64_t)v47;
    goto LABEL_33;
  }
  __break(1u);
}

uint64_t sub_1000B73F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v152 = a3;
  uint64_t v156 = a4;
  uint64_t v151 = a2;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v164 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v141 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004700(&qword_10017F0F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100133C60;
  unint64_t v160 = a1;
  uint64_t v12 = sub_100077EC0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_10016C428);
  if (v13)
  {
    unint64_t v14 = &type metadata for String;
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v14 = 0;
    *(void *)(inited + 48) = 0;
  }
  *(void *)(inited + 32) = v12;
  *(void *)(inited + 40) = v13;
  *(void *)(inited + 56) = v14;
  uint64_t v15 = sub_100079424(a1);
  if (v16)
  {
    uint64_t v17 = &type metadata for String;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    *(void *)(inited + 80) = 0;
  }
  *(void *)(inited + 64) = v15;
  *(void *)(inited + 72) = v16;
  *(void *)(inited + 88) = v17;
  uint64_t v18 = sub_10007943C(a1);
  uint64_t v155 = v5;
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v18 = 0;
    *(void *)(inited + 104) = 0;
    *(void *)(inited + 112) = 0;
  }
  else
  {
    uint64_t v20 = &type metadata for UInt64;
  }
  *(void *)(inited + 120) = v20;
  *(void *)(inited + 96) = v18;
  uint64_t v21 = (void *)(inited + 128);
  char v22 = sub_10007945C(a1);
  uint64_t v154 = a5;
  if (v22 == 2)
  {
    BOOL v23 = 0;
    *uint64_t v21 = 0;
    *(void *)(inited + 136) = 0;
    *(void *)(inited + 144) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t v21 = v22 & 1;
    BOOL v23 = &type metadata for Bool;
  }
  *(void *)(inited + 152) = v23;
  uint64_t v24 = (void *)(inited + 160);
  unint64_t v25 = sub_100079540(a1);
  if ((v25 & 0x100000000) != 0)
  {
    unint64_t v26 = 0;
    *uint64_t v24 = 0;
    *(void *)(inited + 168) = 0;
    *(void *)(inited + 176) = 0;
  }
  else
  {
    *(_DWORD *)uint64_t v24 = v25;
    unint64_t v26 = &type metadata for UInt32;
  }
  *(void *)(inited + 184) = v26;
  swift_bridgeObjectRetain();
  sub_1000B87A8(inited + 32, (uint64_t)&v160);
  if (!v162) {
    goto LABEL_26;
  }
  sub_1000130EC((uint64_t)&v160, &qword_10017C018);
  sub_1000B87A8(inited + 64, (uint64_t)&v160);
  if (!v162
    || (sub_1000130EC((uint64_t)&v160, &qword_10017C018), sub_1000B87A8(inited + 96, (uint64_t)&v160), !v162)
    || (sub_1000130EC((uint64_t)&v160, &qword_10017C018), sub_1000B87A8(inited + 128, (uint64_t)&v160), !v162)
    || (sub_1000130EC((uint64_t)&v160, &qword_10017C018), sub_1000B87A8(inited + 160, (uint64_t)&v160), !v162))
  {
LABEL_26:
    swift_bridgeObjectRelease();
    sub_100012E3C();
    swift_allocError();
    *(_OWORD *)uint64_t v41 = xmmword_100137DD0;
    *(_OWORD *)(v41 + 16) = 0u;
    *(_OWORD *)(v41 + 32) = 0u;
    *(_OWORD *)(v41 + 48) = 0u;
    *(void *)(v41 + 64) = 0;
    *(unsigned char *)(v41 + 72) = 9;
    swift_willThrow();
    sub_1000130EC((uint64_t)&v160, &qword_10017C018);
    swift_setDeallocating();
    sub_100004700(&qword_10017C018);
    return swift_arrayDestroy();
  }
  sub_1000130EC((uint64_t)&v160, &qword_10017C018);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_100004700(&qword_10017C018);
  swift_arrayDestroy();
  LODWORD(v148) = static os_signpost_type_t.event.getter();
  id v149 = (id)*sub_1000EFCB4();
  unint64_t v27 = sub_1000A22A0();
  uint64_t v28 = *v27;
  uint64_t v146 = v27[1];
  uint64_t v147 = v28;
  int v145 = *((unsigned __int8 *)v27 + 16);
  uint64_t v144 = sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v29 = swift_allocObject();
  long long v143 = xmmword_100136120;
  *(_OWORD *)(v29 + 16) = xmmword_100136120;
  unint64_t v160 = a1;
  uint64_t result = sub_100077EC0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_10016C428);
  if (!v31)
  {
    __break(1u);
    goto LABEL_86;
  }
  uint64_t v32 = result;
  uint64_t v33 = v31;
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v34 = sub_10002A1DC();
  *(void *)(v29 + 64) = v34;
  *(void *)(v29 + 32) = v32;
  *(void *)(v29 + 40) = v33;
  uint64_t result = sub_100079424(a1);
  if (!v35)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  *(void *)(v29 + 96) = &type metadata for String;
  *(void *)(v29 + 104) = v34;
  Swift::String v150 = (uint64_t *)v34;
  *(void *)(v29 + 72) = result;
  *(void *)(v29 + 80) = v35;
  uint64_t result = sub_10007943C(a1);
  if (v36)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  *(void *)(v29 + 136) = &type metadata for UInt64;
  *(void *)(v29 + 144) = &protocol witness table for UInt64;
  *(void *)(v29 + 112) = result;
  uint64_t v37 = sub_100079634(a1);
  if (v38 >> 60 == 15)
  {
    uint64_t v39 = (uint64_t *)(v29 + 152);
    char v40 = v150;
    *(void *)(v29 + 176) = &type metadata for String;
    *(void *)(v29 + 184) = v40;
  }
  else
  {
    uint64_t v42 = v37;
    unint64_t v43 = v38;
    uint64_t v142 = sub_100014690(v37, v38);
    unint64_t v45 = v44;
    sub_10002404C(v42, v43);
    uint64_t v39 = (uint64_t *)(v29 + 152);
    uint64_t v46 = v150;
    *(void *)(v29 + 176) = &type metadata for String;
    *(void *)(v29 + 184) = v46;
    if (v45)
    {
      *uint64_t v39 = v142;
      uint64_t v47 = v164;
      uint64_t v48 = v149;
      goto LABEL_30;
    }
  }
  uint64_t v47 = v164;
  uint64_t v48 = v149;
  *uint64_t v39 = 0x7571696E75206F6ELL;
  unint64_t v45 = 0xEC00000044492065;
LABEL_30:
  *(void *)(v29 + 160) = v45;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v10, v8);
  uint64_t result = sub_100079540(a1);
  if ((result & 0x100000000) != 0)
  {
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  uint64_t v49 = result;
  if (*(_DWORD *)sub_1000F1EE0() == result || *(_DWORD *)sub_1000F1ED4() == v49)
  {
    unint64_t v160 = 0;
    unint64_t v161 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    unint64_t v160 = 0xD00000000000001DLL;
    unint64_t v161 = 0x800000010014C640;
    LODWORD(v157[0]) = v49;
    v50._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    unint64_t v51 = v160;
    unint64_t v52 = v161;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v53 = v51;
    *(void *)(v53 + 8) = v52;
    *(_OWORD *)(v53 + 16) = 0u;
    *(_OWORD *)(v53 + 32) = 0u;
    *(_OWORD *)(v53 + 48) = 0u;
    *(void *)(v53 + 64) = 0;
    *(unsigned char *)(v53 + 72) = 9;
    return swift_willThrow();
  }
  unint64_t v160 = a1;
  uint64_t result = sub_100077EC0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_10016C428);
  if (!v54) {
    goto LABEL_89;
  }
  uint64_t v55 = result;
  uint64_t v56 = v54;
  uint64_t v57 = sub_100079634(a1);
  unint64_t v59 = v58;
  Swift::String v60 = v153;
  sub_1000B6844(v55, v56, v57, v58, 0, v156, v154);
  if (v60)
  {
    sub_10002404C(v57, v59);
    swift_bridgeObjectRelease();
    return mach_port_deallocate(mach_task_self_, v49);
  }
  uint64_t v62 = v61;
  sub_10002404C(v57, v59);
  swift_bridgeObjectRelease();
  if (!v62)
  {
    unint64_t v160 = 0;
    unint64_t v161 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v76._object = (void *)0x800000010014C280;
    v76._uint64_t countAndFlagsBits = 0xD000000000000027;
    String.append(_:)(v76);
    v157[0] = a1;
    uint64_t result = sub_100077EC0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_10016C428);
    if (v77)
    {
      String.append(_:)(*(Swift::String *)&result);
      swift_bridgeObjectRelease();
      v78._uint64_t countAndFlagsBits = 0xD000000000000015;
      v78._object = (void *)0x800000010014C2B0;
      String.append(_:)(v78);
      unint64_t v79 = v160;
      unint64_t v80 = v161;
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v81 = v79;
      *(void *)(v81 + 8) = v80;
      *(_OWORD *)(v81 + 16) = 0u;
      *(_OWORD *)(v81 + 32) = 0u;
      *(_OWORD *)(v81 + 48) = 0u;
      *(void *)(v81 + 64) = 0;
      *(unsigned char *)(v81 + 72) = 10;
      swift_willThrow();
      return mach_port_deallocate(mach_task_self_, v49);
    }
    goto LABEL_91;
  }
  uint64_t v63 = *(void **)(v62 + 24);
  type metadata accessor for DriverExtension(0);
  uint64_t v64 = swift_dynamicCastClass();
  if (!v64)
  {
    unint64_t v160 = 0;
    unint64_t v161 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(67);
    v82._object = (void *)0x800000010014C280;
    v82._uint64_t countAndFlagsBits = 0xD000000000000027;
    String.append(_:)(v82);
    v157[0] = a1;
    uint64_t result = sub_100077EC0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_10016C428);
    if (v83)
    {
      String.append(_:)(*(Swift::String *)&result);
      swift_bridgeObjectRelease();
      v84._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v84._object = (void *)0x800000010014C590;
      String.append(_:)(v84);
      unint64_t v85 = v160;
      unint64_t v86 = v161;
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v87 = v85;
      *(void *)(v87 + 8) = v86;
      *(_OWORD *)(v87 + 16) = 0u;
      *(_OWORD *)(v87 + 32) = 0u;
      *(_OWORD *)(v87 + 48) = 0u;
      *(void *)(v87 + 64) = 0;
      *(unsigned char *)(v87 + 72) = 10;
      swift_willThrow();
      swift_release_n();
      return mach_port_deallocate(mach_task_self_, v49);
    }
    goto LABEL_92;
  }
  uint64_t v65 = (void *)v64;
  uint64_t v164 = v62;
  swift_retain();
  swift_retain();
  char v66 = sub_1000F59D4();
  id v149 = v63;
  uint64_t v153 = v65;
  if ((v66 & 1) == 0)
  {
    uint64_t v88 = swift_allocObject();
    *(_OWORD *)(v88 + 16) = v143;
    unint64_t v160 = a1;
    uint64_t result = sub_100077EC0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_10016C428);
    if (!v89)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    uint64_t v90 = v150;
    *(void *)(v88 + 56) = &type metadata for String;
    *(void *)(v88 + 64) = v90;
    *(void *)(v88 + 32) = result;
    *(void *)(v88 + 40) = v89;
    uint64_t result = sub_100079424(a1);
    if (!v91)
    {
LABEL_97:
      __break(1u);
      goto LABEL_98;
    }
    *(void *)(v88 + 96) = &type metadata for String;
    *(void *)(v88 + 104) = v90;
    *(void *)(v88 + 72) = result;
    *(void *)(v88 + 80) = v91;
    uint64_t result = sub_10007943C(a1);
    if (v92)
    {
LABEL_98:
      __break(1u);
      goto LABEL_99;
    }
    *(void *)(v88 + 136) = &type metadata for UInt64;
    *(void *)(v88 + 144) = &protocol witness table for UInt64;
    *(void *)(v88 + 112) = result;
    uint64_t v93 = sub_100079634(a1);
    if (v94 >> 60 == 15)
    {
      long long v95 = (uint64_t *)(v88 + 152);
      uint64_t v96 = v150;
      *(void *)(v88 + 176) = &type metadata for String;
      *(void *)(v88 + 184) = v96;
    }
    else
    {
      uint64_t v104 = v93;
      unint64_t v105 = v94;
      uint64_t v106 = sub_100014690(v93, v94);
      unint64_t v108 = v107;
      sub_10002404C(v104, v105);
      long long v95 = (uint64_t *)(v88 + 152);
      long long v109 = v150;
      *(void *)(v88 + 176) = &type metadata for String;
      *(void *)(v88 + 184) = v109;
      if (v108)
      {
        *long long v95 = v106;
LABEL_60:
        *(void *)(v88 + 160) = v108;
        sub_10002A230();
        uint64_t v110 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        goto LABEL_64;
      }
    }
    *long long v95 = 0x7571696E75206F6ELL;
    unint64_t v108 = 0xEC00000044492065;
    goto LABEL_60;
  }
  LODWORD(v148) = static os_log_type_t.error.getter();
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = v143;
  unint64_t v160 = a1;
  uint64_t result = sub_100077EC0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_10016C428);
  if (!v68)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  Swift::String v69 = v150;
  *(void *)(v67 + 56) = &type metadata for String;
  *(void *)(v67 + 64) = v69;
  *(void *)(v67 + 32) = result;
  *(void *)(v67 + 40) = v68;
  uint64_t result = sub_100079424(a1);
  if (!v70)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  *(void *)(v67 + 96) = &type metadata for String;
  *(void *)(v67 + 104) = v69;
  *(void *)(v67 + 72) = result;
  *(void *)(v67 + 80) = v70;
  uint64_t result = sub_10007943C(a1);
  if (v71)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  *(void *)(v67 + 136) = &type metadata for UInt64;
  *(void *)(v67 + 144) = &protocol witness table for UInt64;
  *(void *)(v67 + 112) = result;
  uint64_t v72 = sub_100079634(a1);
  if (v73 >> 60 == 15)
  {
    BOOL v74 = (uint64_t *)(v67 + 152);
    long long v75 = v150;
    *(void *)(v67 + 176) = &type metadata for String;
    *(void *)(v67 + 184) = v75;
LABEL_62:
    *BOOL v74 = 0x7571696E75206F6ELL;
    unint64_t v102 = 0xEC00000044492065;
    goto LABEL_63;
  }
  uint64_t v97 = v72;
  unint64_t v98 = v73;
  uint64_t v99 = v49;
  uint64_t v100 = sub_100014690(v72, v73);
  unint64_t v102 = v101;
  sub_10002404C(v97, v98);
  BOOL v74 = (uint64_t *)(v67 + 152);
  uint64_t v103 = v150;
  *(void *)(v67 + 176) = &type metadata for String;
  *(void *)(v67 + 184) = v103;
  if (!v102)
  {
    uint64_t v49 = v99;
    goto LABEL_62;
  }
  *BOOL v74 = v100;
  uint64_t v49 = v99;
LABEL_63:
  *(void *)(v67 + 160) = v102;
  sub_10002A230();
  uint64_t v110 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
LABEL_64:
  swift_bridgeObjectRelease();

  Swift::String v150 = sub_100090DE4();
  uint64_t v111 = *v150;
  unint64_t v160 = a1;
  swift_retain();
  uint64_t result = sub_100077EC0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_10016C428);
  if (!v112)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  (*(void (**)(uint64_t))(*(void *)v111 + 96))(result);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v113 = *(void *)(v154 + 8);
  uint64_t v114 = *(uint64_t (**)(uint64_t, uint64_t))(v113 + 16);
  int v115 = *(_DWORD *)(v114(v156, v113) + 640);
  swift_release();
  LODWORD(v160) = *(_DWORD *)sub_1000B9C14();
  LODWORD(v157[0]) = v115;
  sub_100013438();
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)() & 1) == 0 || v152 == (void *)1)
  {
    uint64_t result = sub_100079424(a1);
    if (v128)
    {
      uint64_t v129 = (void *)result;
      unint64_t v130 = v128;
      uint64_t v154 = v49;
      uint64_t result = sub_10007943C(a1);
      if ((v131 & 1) == 0)
      {
        uint64_t v132 = (void *)result;
        uint64_t result = sub_10007945C(a1);
        if (result != 2)
        {
          char v133 = result;
          uint64_t result = sub_100079540(a1);
          if ((result & 0x100000000) == 0)
          {
            sub_1000E72D4(v153, v129, v130, v132, v133 & 1, result, v164 + 32, v156, v113);
            swift_bridgeObjectRelease();
            swift_release();
            swift_release_n();
            goto LABEL_83;
          }
          goto LABEL_102;
        }
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  if (v152)
  {
    uint64_t result = sub_100079424(a1);
    uint64_t v148 = result;
    if (v116)
    {
      uint64_t v117 = v116;
      uint64_t v154 = v49;
      uint64_t result = sub_10007943C(a1);
      if ((v118 & 1) == 0)
      {
        uint64_t v119 = result;
        uint64_t result = sub_10007945C(a1);
        if (result != 2)
        {
          char v120 = result;
          uint64_t result = sub_100079540(a1);
          if ((result & 0x100000000) == 0)
          {
            sub_1000E8624(v153, v148, v117, v119, v120 & 1, result, v164 + 32, v151, (uint64_t)v152, v156, v113);
            swift_bridgeObjectRelease();
            uint64_t v121 = v156;
            (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v113 + 8))(&v160, v156, v113);
            uint64_t v122 = v162;
            uint64_t v123 = v163;
            sub_1000036B0(&v160, v162);
            sub_100003F24(v122, v123);
            uint64_t v124 = v158;
            uint64_t v153 = v159;
            uint64_t v152 = sub_1000036B0(v157, v158);
            uint64_t v125 = v114(v121, v113);
            uint64_t v126 = *(void *)(v125 + 160);
            uint64_t v127 = *(void *)(v125 + 168);
            swift_bridgeObjectRetain();
            swift_release();
            sub_100017BEC(v164, v126, v127, v124, (uint64_t)v153);
            swift_bridgeObjectRelease();
            swift_release();
            swift_release_n();
            sub_10000478C((uint64_t)v157);
            sub_10000478C((uint64_t)&v160);
LABEL_83:
            mach_port_name_t v137 = v154;
            return mach_port_deallocate(mach_task_self_, v137);
          }
          goto LABEL_106;
        }
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  uint64_t result = sub_100079424(a1);
  if (!v134)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  long long v135 = (void *)result;
  unint64_t v136 = v134;
  mach_port_name_t v137 = v49;
  uint64_t result = sub_10007943C(a1);
  if (v138)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  uint64_t v139 = (void *)result;
  uint64_t result = sub_10007945C(a1);
  if (result == 2)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  char v140 = result;
  uint64_t result = sub_100079540(a1);
  if ((result & 0x100000000) == 0)
  {
    sub_1000E72D4(v153, v135, v136, v139, v140 & 1, result, v164 + 32, v156, v113);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    return mach_port_deallocate(mach_task_self_, v137);
  }
LABEL_110:
  __break(1u);
  return result;
}

void *sub_1000B84D8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a1;
  unint64_t v27 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_27:
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
LABEL_3:
      unint64_t v7 = 0;
      uint64_t v21 = v5 & 0xFFFFFFFFFFFFFF8;
      unint64_t v22 = v5 & 0xC000000000000001;
      unint64_t v20 = v5;
      while (1)
      {
        if (v22)
        {
          uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v9 = v7 + 1;
          if (__OFADD__(v7, 1))
          {
LABEL_24:
            __break(1u);
            return v27;
          }
        }
        else
        {
          if (v7 >= *(void *)(v21 + 16))
          {
            __break(1u);
            goto LABEL_27;
          }
          uint64_t v8 = *(void *)(v5 + 8 * v7 + 32);
          swift_retain();
          unint64_t v9 = v7 + 1;
          if (__OFADD__(v7, 1)) {
            goto LABEL_24;
          }
        }
        char v10 = sub_10002A278();
        uint64_t v11 = (*(uint64_t (**)(void, void, void))(*(void *)v8 + 288))(0, 0, v10 & 1);
        uint64_t v12 = (uint64_t *)sub_1000A1504();
        if (*(void *)(v11 + 16))
        {
          uint64_t v14 = *v12;
          uint64_t v13 = v12[1];
          swift_bridgeObjectRetain();
          unint64_t v15 = sub_1000048E0(v14, v13);
          if (v16)
          {
            sub_1000047DC(*(void *)(v11 + 56) + 32 * v15, (uint64_t)&v25);
          }
          else
          {
            long long v25 = 0u;
            long long v26 = 0u;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          long long v25 = 0u;
          long long v26 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v26 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v17 = v6;
            sub_100012DE4(a2, a3);
            sub_100012DE4(v23, v24);
            char v18 = sub_100023B8C(v23, v24, a2, a3);
            sub_100012A10(a2, a3);
            sub_100012A10(v23, v24);
            sub_100012A10(v23, v24);
            if (v18)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            else
            {
              swift_release();
            }
            uint64_t v6 = v17;
            unint64_t v5 = v20;
            goto LABEL_6;
          }
        }
        else
        {
          sub_1000130EC((uint64_t)&v25, &qword_10017C018);
        }
        sub_100012DE4(a2, a3);
        sub_10002404C(0, 0xF000000000000000);
        sub_10002404C(a2, a3);
        swift_release();
LABEL_6:
        ++v7;
        if (v9 == v6) {
          return v27;
        }
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000B87A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017C018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for DextLaunchContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DextLaunchContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_1000B88B4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000B88CC(void *result, int a2)
{
  if (a2 < 0)
  {
    *uint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DextLaunchContext()
{
  return &type metadata for DextLaunchContext;
}

int main(int argc, const char **argv, const char **envp)
{
}

uint64_t sub_1000B8944()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sched_param v56 = 0;
  uint64_t v4 = pthread_self();
  int v55 = 4;
  pthread_set_qos_class_self_np(QOS_CLASS_USER_INTERACTIVE, 0);
  pthread_getschedparam(v4, &v55, &v56);
  int v55 = 4;
  v56.sched_priority = 50;
  pthread_setschedparam(v4, 4, &v56);
  static os_signpost_type_t.begin.getter();
  uint64_t v48 = sub_1000EFB58();
  id v5 = (id)*v48;
  sub_1000A22E8();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  uint64_t v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  uint64_t v49 = v3;
  unint64_t v51 = v6;
  uint64_t v52 = v1 + 8;
  v6(v3, v0);
  uint64_t v7 = type metadata accessor for DriverKitDaemonSideEffects();
  uint64_t v8 = sub_1000AABD4();
  v60[0] = v8;
  sub_10007F4B4(v7, (uint64_t)&off_10016ED40);
  unint64_t v9 = v62;
  char v10 = v63;
  sub_1000036B0(v61, (uint64_t)v62);
  __int16 v11 = (*((uint64_t (**)(void *, void (*)()))v10 + 14))(v9, v10);
  sub_10000478C((uint64_t)v61);
  if ((v11 & 0x100) == 0)
  {
    *(void *)&long long v57 = v8;
    sub_1001297F4(v7, (uint64_t)&off_10016ED40);
    uint64_t v12 = v62;
    uint64_t v13 = v63;
    sub_1000036B0(v61, (uint64_t)v62);
    (*((void (**)(long long *__return_ptr, uint64_t, unint64_t, void *, void (*)()))v13 + 21))(&v57, 0x6E6F632F7665642FLL, 0xEC000000656C6F73, v12, v13);
    if (v58)
    {
      sub_10000372C(&v57, (uint64_t)v60);
      sub_10000478C((uint64_t)v61);
      sub_10000469C((uint64_t)v60, (uint64_t)&v57);
      uint64_t v14 = swift_allocObject();
      sub_10000372C(&v57, v14 + 16);
      uint64_t v63 = sub_1000B9450;
      uint64_t v64 = v14;
      v61[0] = _NSConcreteStackBlock;
      v61[1] = 1107296256;
      v61[2] = sub_1000B94F8;
      uint64_t v62 = &unk_10016F020;
      unint64_t v15 = _Block_copy(v61);
      swift_release();
      id v16 = (id)os_log_set_hook();
      _Block_release(v15);
      sub_10000478C((uint64_t)v60);
      if (v16) {
        _Block_release(v16);
      }
    }
    else
    {
      sub_1000B93B8((uint64_t)&v57);
      sub_10000478C((uint64_t)v61);
    }
  }
  if (sub_1000F59D4())
  {
    static os_log_type_t.error.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_100132F10;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = sub_10002A1DC();
    *(void *)(v17 + 32) = 0xD000000000000025;
    *(void *)(v17 + 40) = 0x8000000100145E30;
    sub_10002A230();
    char v18 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
  }
  else
  {
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_100132F10;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10002A1DC();
    *(void *)(v19 + 32) = 0xD000000000000025;
    *(void *)(v19 + 40) = 0x8000000100145E30;
    sub_10002A230();
    char v18 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
  swift_bridgeObjectRelease();

  type metadata accessor for DriverKitDaemon();
  sub_1000AB318();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int v20 = _set_user_dir_suffix();
  swift_release();
  if (v20)
  {
    uint64_t v50 = v0;
    uint64_t v58 = v7;
    unint64_t v59 = &off_10016ED40;
    *(void *)&long long v57 = v8;
    sub_1000B9324((uint64_t)v60);
    sub_1000B9350((uint64_t)v60, (uint64_t)v61);
    swift_retain();
    uint64_t v21 = (void *)sub_1000AB27C();
    sub_1000AB2B8((uint64_t)&v57, v21, (uint64_t)v61);
    int v54 = *(_DWORD *)sub_1000F1EE0();
    uint64_t v22 = bootstrap_check_in(bootstrap_port, "com.apple.KernelManagementPingServer", (mach_port_t *)&v54);
    uint64_t v47 = v8;
    if (!v22)
    {
      uint64_t v23 = sub_100004700(&qword_10017F0F8);
      *(void *)&long long v57 = sub_1000815B8(v54);
      uint64_t v24 = sub_10001348C(&qword_10017F100, &qword_10017F0F8);
      sub_1000AC2F8((uint64_t)&v57, v23, v24);
      swift_release();
      uint64_t v25 = type metadata accessor for ApplicationRequestSource();
      *(void *)&long long v57 = sub_100092108();
      sub_1000AC2F8((uint64_t)&v57, v25, (uint64_t)&off_10017E5E0);
      swift_release();
      static os_signpost_type_t.event.getter();
      sub_10002A230();
      long long v26 = (void *)static OS_os_log.default.getter();
      sub_100004700((uint64_t *)&unk_10017D6E0);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_100132F10;
      uint64_t v28 = (uint64_t *)DriverKitDaemonXPC.serverName.unsafeMutableAddressor();
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      *(void *)(v27 + 56) = &type metadata for String;
      *(void *)(v27 + 64) = sub_10002A1DC();
      *(void *)(v27 + 32) = v29;
      *(void *)(v27 + 40) = v30;
      swift_bridgeObjectRetain();
      uint64_t v31 = v49;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:_:_:)();

      swift_bridgeObjectRelease();
      v51(v31, v50);
      uint64_t v32 = sub_100004700(&qword_10017F108);
      id v33 = objc_allocWithZone((Class)NSXPCListener);
      swift_bridgeObjectRetain();
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v35 = [v33 initWithMachServiceName:v34];

      uint64_t v46 = sub_100082AE8(v35, 0xD000000000000027, 0x800000010014C770);
      *(void *)&long long v57 = v46;
      uint64_t v36 = sub_10001348C(&qword_10017F110, &qword_10017F108);
      sub_1000AC2F8((uint64_t)&v57, v32, v36);
      uint64_t v53 = v47;
      sub_10012E340(v7, (uint64_t)&off_10016ED40);
      sub_100004700(&qword_10017F118);
      uint64_t v37 = type metadata accessor for RealApprovalsXPCPublisher();
      swift_dynamicCast();
      *(void *)&long long v57 = v53;
      sub_1000AC2F8((uint64_t)&v57, v37, (uint64_t)&off_100180908);
      sub_1000AC50C();
      static os_signpost_type_t.end.getter();
      id v38 = (id)*v48;
      sub_1000A22F4();
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      swift_release();
      swift_release();

      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v51)(v31, v50);
    }
    uint64_t v40 = v22;
    *(void *)&long long v57 = 0;
    *((void *)&v57 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    *(void *)&long long v57 = 0xD00000000000001BLL;
    *((void *)&v57 + 1) = 0x800000010014C720;
    LODWORD(v53) = v40;
    v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._uint64_t countAndFlagsBits = 10272;
    v42._object = (void *)0xE200000000000000;
    String.append(_:)(v42);
    v43._uint64_t countAndFlagsBits = sub_1000EDA88(v40);
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._uint64_t countAndFlagsBits = 41;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double sub_1000B9324(uint64_t a1)
{
  *(void *)(a1 + 240) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1000B9350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700((uint64_t *)&unk_10017EDC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B93B8(uint64_t a1)
{
  uint64_t v2 = sub_100004700(&qword_10017F120);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B9418()
{
  sub_10000478C(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000B9450()
{
  uint64_t v1 = os_log_copy_decorated_message();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    unint64_t v3 = v0 + 2;
    uint64_t v4 = String.init(cString:)();
    uint64_t v6 = v5;
    uint64_t v8 = v0[5];
    uint64_t v7 = v0[6];
    sub_1000036B0(v3, v8);
    sub_100127430(v4, v6, v8, v7);
    swift_bridgeObjectRelease();
    free(v2);
  }
}

uint64_t sub_1000B94F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t sub_1000B9558(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B9568()
{
  return swift_release();
}

uint64_t sub_1000B9570(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&unk_100199748, 0);
}

void *sub_1000B9580()
{
  if (qword_100188660 != -1) {
    swift_once();
  }
  return &unk_100199748;
}

uint64_t sub_1000B95CC(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&unk_10019974C, 1);
}

void *sub_1000B95DC()
{
  if (qword_100188668 != -1) {
    swift_once();
  }
  return &unk_10019974C;
}

uint64_t sub_1000B9628(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&unk_100199750, 2);
}

void *sub_1000B9638()
{
  if (qword_100188670 != -1) {
    swift_once();
  }
  return &unk_100199750;
}

uint64_t sub_1000B9684(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&unk_100199754, 3);
}

void *sub_1000B9694()
{
  if (qword_100188678 != -1) {
    swift_once();
  }
  return &unk_100199754;
}

uint64_t sub_1000B96E0(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&dword_100199758, 4);
}

int *sub_1000B96F0()
{
  if (qword_100188680 != -1) {
    swift_once();
  }
  return &dword_100199758;
}

uint64_t sub_1000B973C(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&dword_10019975C, 5);
}

int *sub_1000B974C()
{
  if (qword_100188688 != -1) {
    swift_once();
  }
  return &dword_10019975C;
}

uint64_t sub_1000B9798(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&dword_100199760, 6);
}

int *sub_1000B97A8()
{
  if (qword_100188690 != -1) {
    swift_once();
  }
  return &dword_100199760;
}

uint64_t sub_1000B97F4(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&dword_100199764, 7);
}

int *sub_1000B9804()
{
  if (qword_100188698 != -1) {
    swift_once();
  }
  return &dword_100199764;
}

uint64_t sub_1000B9850(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&unk_100199768, 8);
}

void *sub_1000B9860()
{
  if (qword_1001886A0 != -1) {
    swift_once();
  }
  return &unk_100199768;
}

uint64_t sub_1000B98AC(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&dword_10019976C, 9);
}

int *sub_1000B98BC()
{
  if (qword_1001886A8 != -1) {
    swift_once();
  }
  return &dword_10019976C;
}

uint64_t sub_1000B9908(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&unk_100199770, 10);
}

void *sub_1000B9918()
{
  if (qword_1001886B0 != -1) {
    swift_once();
  }
  return &unk_100199770;
}

uint64_t sub_1000B9964(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&unk_100199774, 11);
}

void *sub_1000B9974()
{
  if (qword_1001886B8 != -1) {
    swift_once();
  }
  return &unk_100199774;
}

uint64_t sub_1000B99C0(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&unk_100199778, 12);
}

void *sub_1000B99D0()
{
  if (qword_1001886C0 != -1) {
    swift_once();
  }
  return &unk_100199778;
}

uint64_t sub_1000B9A1C(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&dword_100199780, 14);
}

int *sub_1000B9A2C()
{
  if (qword_1001886D0 != -1) {
    swift_once();
  }
  return &dword_100199780;
}

uint64_t sub_1000B9A78(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&unk_100199784, 15);
}

void *sub_1000B9A88()
{
  if (qword_1001886D8 != -1) {
    swift_once();
  }
  return &unk_100199784;
}

uint64_t sub_1000B9AD4(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&dword_100199788, 16);
}

uint64_t sub_1000B9AE4(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&unk_100199790, 18);
}

void *sub_1000B9AF4()
{
  if (qword_1001886F0 != -1) {
    swift_once();
  }
  return &unk_100199790;
}

uint64_t sub_1000B9B40(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&dword_100199794, 19);
}

uint64_t sub_1000B9B50(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&dword_100199798, 20);
}

int *sub_1000B9B60()
{
  if (qword_100188700 != -1) {
    swift_once();
  }
  return &dword_100199798;
}

uint64_t sub_1000B9BAC(uint64_t a1)
{
  return sub_1000B9BBC(a1, (uint64_t)&unk_10019979C, 21);
}

uint64_t sub_1000B9BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_100085F70();
  unint64_t v6 = sub_1000A4C9C();
  return sub_1000F0560(a3, (uint64_t)&type metadata for ExtensionManager.Settings.Flags, v5, v6, a2);
}

void *sub_1000B9C14()
{
  if (qword_100188708 != -1) {
    swift_once();
  }
  return &unk_10019979C;
}

uint64_t sub_1000B9C60()
{
  _StringGuts.grow(_:)(132);
  v1._uint64_t countAndFlagsBits = 0x203A686372610A5BLL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  uint64_t v2 = *v0;
  unint64_t v3 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x6E61697261760A2CLL;
  v5._object = (void *)0xEB00000000203A74;
  String.append(_:)(v5);
  uint64_t v6 = v0[2];
  uint64_t v7 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x6C656E72656B0A2CLL;
  v9._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v9);
  uint64_t v10 = v0[4];
  __int16 v11 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x800000010014C820;
  v13._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0xD000000000000011;
  v15._object = (void *)0x800000010014C840;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x800000010014C860;
  v17._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._object = (void *)0x800000010014C880;
  v19._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 6097452;
  v21._object = (void *)0xE300000000000000;
  String.append(_:)(v21);
  return 0;
}

unint64_t sub_1000B9EA4(char a1)
{
  unint64_t result = 1751347809;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x746E6169726176;
      break;
    case 2:
      unint64_t result = 0x6C656E72656BLL;
      break;
    case 3:
    case 5:
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0x6465726975716572;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000B9F78()
{
  return sub_1000B9EA4(*v0);
}

uint64_t sub_1000B9F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000C7BC4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000B9FA8(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1000B9FB4(uint64_t a1)
{
  unint64_t v2 = sub_1000BA2D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B9FF0(uint64_t a1)
{
  unint64_t v2 = sub_1000BA2D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000BA02C(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100004700(&qword_10017F130);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_1000BA2D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = v3[6];
    HIBYTE(v10) = 3;
    sub_100004700((uint64_t *)&unk_10017E5D0);
    sub_1000190B0(&qword_10017C038);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = v3[7];
    HIBYTE(v10) = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = v3[8];
    HIBYTE(v10) = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = v3[9];
    HIBYTE(v10) = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000BA2D0()
{
  unint64_t result = qword_100188718[0];
  if (!qword_100188718[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100188718);
  }
  return result;
}

__n128 sub_1000BA324@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000C7E9C(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1000BA370(void *a1)
{
  return sub_1000BA02C(a1);
}

uint64_t sub_1000BA38C()
{
  return 0;
}

__n128 sub_1000BA398@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26)
{
  sub_100029900(a24, (uint64_t)v53, &qword_10017F140);
  __n128 v46 = (__n128)v53[1];
  long long v47 = v53[0];
  uint64_t v31 = v54;
  sub_100029900(a21, (uint64_t)v52, &qword_10017F138);
  long long v32 = *(_OWORD *)(a19 + 208);
  *(_OWORD *)(a9 + 384) = *(_OWORD *)(a19 + 192);
  *(_OWORD *)(a9 + 400) = v32;
  *(_OWORD *)(a9 + 416) = *(_OWORD *)(a19 + 224);
  uint64_t v33 = *(void *)(a19 + 240);
  long long v34 = *(_OWORD *)(a19 + 144);
  *(_OWORD *)(a9 + 320) = *(_OWORD *)(a19 + 128);
  *(_OWORD *)(a9 + 336) = v34;
  long long v35 = *(_OWORD *)(a19 + 176);
  *(_OWORD *)(a9 + 352) = *(_OWORD *)(a19 + 160);
  *(_OWORD *)(a9 + 368) = v35;
  long long v36 = *(_OWORD *)(a19 + 80);
  *(_OWORD *)(a9 + 256) = *(_OWORD *)(a19 + 64);
  *(_OWORD *)(a9 + 272) = v36;
  long long v37 = *(_OWORD *)(a19 + 112);
  *(_OWORD *)(a9 + 288) = *(_OWORD *)(a19 + 96);
  *(_OWORD *)(a9 + 304) = v37;
  long long v38 = *(_OWORD *)(a19 + 16);
  *(_OWORD *)(a9 + 192) = *(_OWORD *)a19;
  *(_OWORD *)(a9 + 208) = v38;
  long long v39 = *(_OWORD *)(a19 + 48);
  *(_OWORD *)(a9 + 224) = *(_OWORD *)(a19 + 32);
  *(_OWORD *)(a9 + 240) = v39;
  long long v40 = v52[0];
  long long v41 = v52[1];
  long long v42 = v52[2];
  long long v43 = v52[3];
  long long v44 = v52[4];
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 96) = a12;
  *(_OWORD *)(a9 + 112) = a13;
  *(_OWORD *)(a9 + 128) = a14;
  *(_OWORD *)(a9 + 144) = a15;
  *(_OWORD *)(a9 + 160) = a16;
  *(void *)(a9 + 176) = a17;
  *(void *)(a9 + 184) = a18;
  *(void *)(a9 + 432) = v33;
  *(void *)(a9 + 440) = a20;
  *(_OWORD *)(a9 + 448) = v40;
  *(_OWORD *)(a9 + 464) = v41;
  *(_OWORD *)(a9 + 480) = v42;
  *(_OWORD *)(a9 + 496) = v43;
  *(_OWORD *)(a9 + 512) = v44;
  *(void *)(a9 + 528) = a22;
  *(void *)(a9 + 536) = a23;
  __n128 result = v46;
  *(_OWORD *)(a9 + 544) = v47;
  *(__n128 *)(a9 + 560) = v46;
  *(void *)(a9 + 576) = v31;
  *(_DWORD *)(a9 + 584) = a25;
  *(unsigned char *)(a9 + 588) = a26;
  return result;
}

uint64_t sub_1000BA580()
{
  return swift_retain();
}

uint64_t sub_1000BA5B8(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 648) = a1;
  return swift_release();
}

uint64_t (*sub_1000BA600())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_1000BA654(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017EFC0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  Swift::String v4 = (void *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *((unsigned __int8 *)v4 - 24);
    char v6 = *((unsigned char *)v4 - 16);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000C4910(v5, (void (*)(void))sub_10003FED4, (uint64_t)&type metadata for ExceptionList.ExceptionType, (void (*)(void))sub_10002F394);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    uint64_t v11 = v2[7] + 24 * result;
    *(unsigned char *)uint64_t v11 = v6;
    *(void *)(v11 + 8) = v8;
    *(void *)(v11 + 16) = v7;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000BA7B0(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000048E0(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000BA8C8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017F3F8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *((unsigned __int8 *)v4 - 8);
    uint64_t v6 = *v4;
    swift_retain();
    unint64_t result = sub_1000C4910(v5, (void (*)(void))sub_1000599C4, (uint64_t)&type metadata for CollectionKind, (void (*)(void))sub_100029B94);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    *(void *)(v2[7] + 8 * result) = v6;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000BAA08()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000BAA40(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 656) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000BAA88())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000BAADC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000BAB14(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 664) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000BAB5C())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000BABB0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000BABE8(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 696) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000BAC30())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000BAC84()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000BACBC(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 728) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000BAD04())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000BAD58()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 736);
}

uint64_t sub_1000BAD8C(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 736) = a1;
  return result;
}

uint64_t (*sub_1000BADCC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000BAE20(void *a1, _DWORD *a2)
{
  uint64_t v4 = swift_allocObject();
  sub_1000BAE78(a1, a2);
  return v4;
}

uint64_t sub_1000BAE78(void *a1, _DWORD *a2)
{
  uint64_t v3 = (void *)v2;
  uint64_t v6 = type metadata accessor for OSSignpostError();
  uint64_t v193 = *(void *)(v6 - 8);
  uint64_t v194 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  long long v190 = (char *)&v190 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v192 = (char *)&v190 - v9;
  uint64_t v205 = type metadata accessor for OSSignpostID();
  uint64_t v213 = *(void *)(v205 - 8);
  uint64_t v10 = __chkstk_darwin(v205);
  v191 = (char *)&v190 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v203 = (char *)&v190 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v199 = (char *)&v190 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  Swift::String v208 = (char *)&v190 - v17;
  __chkstk_darwin(v16);
  long long v206 = (char *)&v190 - v18;
  uint64_t v212 = type metadata accessor for OSSignposter();
  uint64_t v214 = *(void *)(v212 - 8);
  uint64_t v19 = __chkstk_darwin(v212);
  uint64_t v198 = (char *)&v190 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v202 = (char *)&v190 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v204 = (char *)&v190 - v24;
  __chkstk_darwin(v23);
  char v207 = (char *)&v190 - v25;
  uint64_t v211 = type metadata accessor for URL();
  Swift::String v209 = *(void (**)(char *, uint64_t))(v211 - 8);
  __chkstk_darwin(v211);
  Swift::String v210 = (char *)&v190 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v2 + 656) = sub_1000BA654((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v2 + 664) = sub_1000BA7B0((uint64_t)_swiftEmptyArrayStorage, &qword_10017F3E8);
  *(void *)(v2 + 680) = 0;
  *(void *)(v2 + 672) = 0;
  *(unsigned char *)(v2 + 688) = 0;
  *(void *)(v2 + 696) = sub_1000BA7B0((uint64_t)_swiftEmptyArrayStorage, &qword_10017CC38);
  *(void *)(v2 + 712) = 0;
  *(void *)(v2 + 704) = 0;
  *(unsigned char *)(v2 + 720) = 0;
  *(void *)(v2 + 728) = &_swiftEmptySetSingleton;
  *(unsigned char *)(v2 + 736) = 0;
  uint64_t v216 = sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v27 = swift_allocObject();
  long long v224 = xmmword_100132F10;
  *(_OWORD *)(v27 + 16) = xmmword_100132F10;
  uint64_t v28 = sub_1000BC964();
  uint64_t v30 = v29;
  *(void *)(v27 + 56) = &type metadata for String;
  unint64_t v223 = sub_10002A1DC();
  *(void *)(v27 + 64) = v223;
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = v30;
  uint64_t v222 = sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  uint64_t v31 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  unint64_t v219 = a1;
  sub_10000469C((uint64_t)a1, (uint64_t)(v3 + 2));
  memcpy(v3 + 7, a2, 0x24DuLL);
  sub_10003C9A0(a2);
  long long v32 = sub_10005C378();
  uint64_t v41 = sub_10005C384();
  uint64_t v33 = sub_10005CA68();
  unint64_t v34 = sub_10005CA74();
  unint64_t v35 = sub_10005CA80();
  unint64_t v36 = sub_10005CA8C();
  unint64_t v37 = sub_10005CA98();
  uint64_t v38 = v35;
  long long v39 = a2;
  sub_10005CAA4((uint64_t)v32, v41, (uint64_t)v33, v34, v38, v36, v37, v235);
  long long v40 = (const char *)(v3 + 81);
  v3[81] = sub_100004BD0((uint64_t)v235, (uint64_t)&type metadata for LookupTable);
  LODWORD(v41) = a2[146];
  if (qword_100188688 != -1) {
    goto LABEL_99;
  }
  while (1)
  {
    v215 = v3;
    v217 = v39;
    int v201 = v41;
    v197 = v40;
    if ((dword_10019975C & ~v41) == 0) {
      break;
    }
    long long v42 = sub_1000A23B8();
    swift_beginAccess();
    *(void *)&v235[0] = *v42;
    swift_bridgeObjectRetain_n();
    uint64_t v43 = v221;
    sub_1000C5094((char **)v235);
    uint64_t v221 = v43;
    uint64_t v3 = (void *)v216;
    if (v43) {
      goto LABEL_118;
    }
    swift_bridgeObjectRelease();
    unint64_t v220 = *(unsigned __int8 **)&v235[0];
    v218 = *(const char **)(*(void *)&v235[0] + 16);
    if (!v218)
    {
LABEL_24:
      swift_release();
      break;
    }
    swift_beginAccess();
    long long v40 = 0;
    Swift::String v209 = (void (*)(char *, uint64_t))((char *)v209 + 8);
    while (1)
    {
      uint64_t v49 = v40[(void)v220 + 32];
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = v224;
      unint64_t v50 = sub_1000F11D0(v49);
      unint64_t v51 = v223;
      *(void *)(v41 + 56) = &type metadata for String;
      *(void *)(v41 + 64) = v51;
      *(void *)(v41 + 32) = v50;
      *(void *)(v41 + 40) = v52;
      uint64_t v53 = (void *)static OS_os_log.default.getter();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();

      if (qword_100188710 != -1) {
        swift_once();
      }
      if (!*(void *)(qword_1001997A0 + 16)) {
        break;
      }
      sub_1000C4910(v49, (void (*)(void))sub_1000599C4, (uint64_t)&type metadata for CollectionKind, (void (*)(void))sub_100029B94);
      if ((v54 & 1) == 0) {
        goto LABEL_98;
      }
      memcpy(v235, v39, 0x24DuLL);
      sub_10003C9A0(v39);
      swift_retain();
      swift_getAtKeyPath();
      sub_10003E600(v39);
      int v55 = v232;
      if (v232)
      {
        uint64_t v56 = v231;
        uint64_t v57 = v219[3];
        uint64_t v58 = v219[4];
        sub_1000036B0(v219, v57);
        sub_1001297F4(v57, v58);
        uint64_t v59 = v233;
        uint64_t v60 = v234;
        sub_1000036B0(&v231, v233);
        (*(void (**)(long long *__return_ptr, uint64_t, void *, uint64_t, uint64_t, uint64_t))(v60 + 112))(&v228, v56, v55, 1, v59, v60);
        if (v229)
        {
          sub_10000372C(&v228, (uint64_t)v235);
          sub_10000478C((uint64_t)&v231);
          uint64_t v61 = *((void *)&v235[1] + 1);
          uint64_t v62 = *(void *)&v235[2];
          sub_1000036B0(v235, *((uint64_t *)&v235[1] + 1));
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v62 + 80))(&v226, v61, v62);
          sub_10000469C((uint64_t)v235, (uint64_t)v225);
          if (v227)
          {
            sub_10000478C((uint64_t)v225);
            sub_10000372C(&v226, (uint64_t)&v228);
          }
          else
          {
            sub_10000372C(v225, (uint64_t)&v228);
            sub_1000130EC((uint64_t)&v226, &qword_10017C930);
          }
          uint64_t v69 = v229;
          uint64_t v70 = v230;
          sub_1000036B0(&v228, v229);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v70 + 72))(&v231, v69, v70);
          sub_10000478C((uint64_t)&v228);
          char v71 = v210;
          URL.init(fileURLWithPath:)();
          uint64_t v72 = swift_bridgeObjectRelease();
          uint64_t v73 = v215[81];
          __chkstk_darwin(v72);
          long long v39 = v217;
          *(&v190 - 6) = v74;
          *(&v190 - 5) = (char *)v39;
          *(&v190 - 4) = v71;
          *((unsigned char *)&v190 - 24) = v49;
          *(&v190 - 2) = (char *)&v231;
          type metadata accessor for RealizedKernelCollection(0);
          swift_retain();
          uint64_t v75 = v221;
          sub_100004A40((void (*)(uint64_t))sub_1000C8B44, (uint64_t)(&v190 - 8), v73);
          uint64_t v221 = v75;
          if (v75)
          {
            swift_release();
            sub_10003E600(v39);
            unint64_t v83 = (unint64_t)v215;
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))v209)(v71, v211);
            sub_10000478C((uint64_t)&v231);
            goto LABEL_38;
          }
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))v209)(v71, v211);
          sub_10000478C((uint64_t)&v231);
          sub_10000478C((uint64_t)v235);
          uint64_t v3 = (void *)v216;
        }
        else
        {
          sub_1000130EC((uint64_t)&v228, &qword_10017C930);
          sub_10000478C((uint64_t)&v231);
          BOOL v63 = sub_100029B78(v49, 2);
          uint64_t v3 = (void *)v216;
          if (!v63)
          {
            if (qword_100188680 != -1) {
              swift_once();
            }
            if ((dword_100199758 & ~v201) != 0)
            {
              swift_release();
              unint64_t v83 = (unint64_t)v215;
              swift_release();
              *(void *)&v235[0] = 0;
              *((void *)&v235[0] + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(37);
              swift_bridgeObjectRelease();
              *(void *)&v235[0] = 0xD000000000000023;
              *((void *)&v235[0] + 1) = 0x800000010014C970;
              v187._uint64_t countAndFlagsBits = v56;
              v187._object = v55;
              String.append(_:)(v187);
              swift_bridgeObjectRelease();
              long long v188 = v235[0];
              sub_100012E3C();
              swift_allocError();
              *(_OWORD *)uint64_t v189 = v188;
              *(_OWORD *)(v189 + 16) = 0u;
              *(_OWORD *)(v189 + 32) = 0u;
              *(_OWORD *)(v189 + 48) = 0u;
              *(void *)(v189 + 64) = 0;
              *(unsigned char *)(v189 + 72) = 9;
              swift_willThrow();
              sub_10003E600(v217);
              goto LABEL_66;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v64 = swift_allocObject();
          *(_OWORD *)(v64 + 16) = v224;
          unint64_t v65 = sub_1000F11D0(v49);
          unint64_t v66 = v223;
          *(void *)(v64 + 56) = &type metadata for String;
          *(void *)(v64 + 64) = v66;
          *(void *)(v64 + 32) = v65;
          *(void *)(v64 + 40) = v67;
          uint64_t v68 = (void *)static OS_os_log.default.getter();
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();
          swift_release();
          swift_bridgeObjectRelease();

          long long v39 = v217;
        }
      }
      else
      {
        uint64_t v44 = swift_allocObject();
        *(_OWORD *)(v44 + 16) = v224;
        unint64_t v45 = sub_1000F11D0(v49);
        unint64_t v46 = v223;
        *(void *)(v44 + 56) = &type metadata for String;
        *(void *)(v44 + 64) = v46;
        *(void *)(v44 + 32) = v45;
        *(void *)(v44 + 40) = v47;
        uint64_t v48 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_release();
        swift_bridgeObjectRelease();
      }
      if (v218 == ++v40) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    swift_once();
  }
  uint64_t v76 = v214;
  uint64_t v77 = v206;
  uint64_t v78 = sub_1000F01A8();
  Swift::String v210 = *(char **)(v76 + 16);
  uint64_t v211 = v78;
  uint64_t v200 = v76 + 16;
  ((void (*)(char *))v210)(v207);
  unint64_t v79 = sub_1000A22B8();
  unint64_t v80 = *v79;
  char v81 = *((unsigned char *)v79 + 16);
  static OSSignpostID.exclusive.getter();
  Swift::String v82 = OSSignposter.logHandle.getter();
  unint64_t v83 = static os_signpost_type_t.begin.getter();
  char v84 = OS_os_log.signpostsEnabled.getter();
  v196 = v79;
  if ((v84 & 1) == 0)
  {

    unint64_t v85 = v77;
    uint64_t v86 = v213;
    uint64_t v87 = *(unsigned __int8 **)(v213 + 16);
    unint64_t v88 = (v213 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v89 = v205;
    uint64_t v90 = v208;
    goto LABEL_35;
  }
  if (v81)
  {
    if (!((unint64_t)v80 >> 32))
    {
      if (v80 >> 11 == 27)
      {
LABEL_110:
        __break(1u);
        goto LABEL_111;
      }
      if (v80 >> 16 <= 0x10)
      {
        v218 = &v236;
        goto LABEL_34;
      }
LABEL_102:
      __break(1u);
LABEL_103:
      swift_once();
LABEL_84:
      if ((dword_100199780 & ~v80) != 0)
      {
        uint64_t v180 = v221;
        (*(void (**)(void))(*(void *)v83 + 400))();
        if (v180)
        {
LABEL_65:
          sub_10003E600(v217);
          swift_release();
          swift_release();
LABEL_66:
          swift_release();
          goto LABEL_67;
        }
        uint64_t v221 = 0;
      }
      sub_10000469C((uint64_t)v219, (uint64_t)v235);
      uint64_t v181 = swift_allocObject();
      sub_10000372C(v235, v181 + 16);
      swift_beginAccess();
      uint64_t v182 = *(void *)(v83 + 672);
      *(void *)(v83 + 672) = sub_1000C84D8;
      *(void *)(v83 + 680) = v181;
      *(unsigned char *)(v83 + 688) = 1;
      sub_1000C8B34(v182);
      if (qword_100188690 != -1) {
        swift_once();
      }
      if ((dword_100199760 & ~v80) == 0)
      {
        BOOL v183 = 1;
LABEL_93:
        sub_10000469C((uint64_t)v219, (uint64_t)v235);
        uint64_t v184 = swift_allocObject();
        char v185 = v217;
        memcpy((void *)(v184 + 16), v217, 0x24DuLL);
        sub_10000372C(v235, v184 + 608);
        swift_beginAccess();
        uint64_t v186 = *(void *)(v83 + 704);
        sub_10003C9A0(v185);
        swift_retain();
        sub_1000C8B34(v186);
        *(void *)(v83 + 704) = sub_1000C8928;
        *(void *)(v83 + 712) = v184;
        if (v183) {
          *(unsigned char *)(v83 + 720) = 1;
        }
        swift_endAccess();
        sub_10003E600(v217);
        swift_release();
        swift_release();
        swift_release();
        sub_10000478C((uint64_t)v219);
        return v83;
      }
      if (qword_100188698 == -1)
      {
LABEL_92:
        BOOL v183 = (dword_100199764 & ~v80) == 0;
        goto LABEL_93;
      }
LABEL_111:
      swift_once();
      goto LABEL_92;
    }
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  if (!v80)
  {
    __break(1u);
    goto LABEL_101;
  }
  v218 = v80;
LABEL_34:
  uint64_t v86 = v213;
  unint64_t v220 = *(unsigned __int8 **)(v213 + 16);
  unint64_t v88 = (v213 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v91 = v208;
  uint64_t v89 = v205;
  ((void (*)(char *, char *, uint64_t))v220)(v208, v206, v205);
  char v92 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)char v92 = 0;
  os_signpost_id_t v93 = OSSignpostID.rawValue.getter();
  os_signpost_type_t v94 = v83;
  uint64_t v90 = v91;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v82, v94, v93, v218, "", v92, 2u);
  uint64_t v87 = v220;
  swift_slowDealloc();

  unint64_t v85 = v206;
  (*(void (**)(char *, uint64_t))(v86 + 8))(v90, v89);
LABEL_35:
  unint64_t v220 = v87;
  long long v206 = (char *)v88;
  ((void (*)(char *, char *, uint64_t))v87)(v90, v85, v89);
  uint64_t v195 = type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v218 = (const char *)OSSignpostIntervalState.init(id:isOpen:)();
  long long v95 = *(char **)(v86 + 8);
  uint64_t v213 = v86 + 8;
  Swift::String v209 = (void (*)(char *, uint64_t))v95;
  ((void (*)(char *, uint64_t))v95)(v85, v89);
  uint64_t v96 = *(char **)(v214 + 8);
  uint64_t v97 = v207;
  uint64_t v98 = v212;
  v214 += 8;
  char v207 = v96;
  ((void (*)(char *, uint64_t))v96)(v97, v212);
  uint64_t v100 = v39[18];
  uint64_t v99 = v39[19];
  unint64_t v101 = (uint64_t *)sub_10002A5C0();
  uint64_t v102 = *v101;
  unint64_t v103 = v101[1];
  swift_bridgeObjectRetain();
  uint64_t v104 = sub_1000EE3FC(v102, v103);
  uint64_t v106 = v105;
  swift_bridgeObjectRelease();
  *(void *)&v235[0] = v100;
  *((void *)&v235[0] + 1) = v99;
  swift_bridgeObjectRetain();
  v107._uint64_t countAndFlagsBits = v104;
  v107._object = v106;
  String.append(_:)(v107);
  swift_bridgeObjectRelease();
  long long v108 = v235[0];
  uint64_t v109 = v219[3];
  uint64_t v110 = v219[4];
  sub_1000036B0(v219, v109);
  sub_1000B07CC(v109, v110);
  uint64_t v111 = v233;
  uint64_t v112 = v234;
  sub_1000036B0(&v231, v233);
  (*(void (**)(long long *__return_ptr, void, void, uint64_t, uint64_t))(v112 + 16))(&v228, v108, *((void *)&v108 + 1), v111, v112);
  swift_bridgeObjectRelease();
  uint64_t v113 = v199;
  if (v229)
  {
    sub_10000372C(&v228, (uint64_t)v235);
    sub_10000478C((uint64_t)&v231);
    uint64_t v114 = swift_beginAccess();
    unint64_t v83 = (unint64_t)v215;
    uint64_t v115 = v215[81];
    __chkstk_darwin(v114);
    *(&v190 - 2) = (char *)v83;
    *(&v190 - 1) = (char *)v235;
    type metadata accessor for RealizedInfo(0);
    swift_retain();
    uint64_t v116 = v221;
    sub_100004A40((void (*)(uint64_t))sub_1000CB9D4, (uint64_t)(&v190 - 4), v115);
    uint64_t v221 = v116;
    unint64_t v80 = (char *)v204;
    if (v116)
    {
      sub_10003E600(v217);
      swift_release();
      swift_release();
      swift_release();
LABEL_38:
      sub_10000478C((uint64_t)v235);
LABEL_67:
      sub_10000478C((uint64_t)v219);
      return v83;
    }
    swift_release();
    swift_release();
    sub_10000478C((uint64_t)v235);
  }
  else
  {
    sub_1000130EC((uint64_t)&v228, &qword_10017BC78);
    sub_10000478C((uint64_t)&v231);
    sub_100004700(&qword_10017F148);
    uint64_t v117 = swift_allocObject();
    *(_OWORD *)(v117 + 16) = v224;
    *(void *)&v235[0] = 0;
    *((void *)&v235[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    *(void *)&v235[0] = 0x3A676E696E726157;
    *((void *)&v235[0] + 1) = 0xE900000000000020;
    char v118 = (uint64_t *)sub_10002A5B4();
    uint64_t v119 = *v118;
    char v120 = (void *)v118[1];
    swift_bridgeObjectRetain();
    v121._uint64_t countAndFlagsBits = v119;
    v121._object = v120;
    String.append(_:)(v121);
    swift_bridgeObjectRelease();
    v122._uint64_t countAndFlagsBits = 0x746F6E2073617720;
    v122._object = (void *)0xEF21646E756F6620;
    String.append(_:)(v122);
    long long v123 = v235[0];
    *(void *)(v117 + 56) = &type metadata for String;
    *(_OWORD *)(v117 + 32) = v123;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    uint64_t v124 = swift_allocObject();
    *(_OWORD *)(v124 + 16) = v224;
    uint64_t v126 = *v118;
    uint64_t v125 = v118[1];
    unint64_t v127 = v223;
    *(void *)(v124 + 56) = &type metadata for String;
    *(void *)(v124 + 64) = v127;
    *(void *)(v124 + 32) = v126;
    *(void *)(v124 + 40) = v125;
    swift_bridgeObjectRetain();
    unint64_t v128 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    unint64_t v80 = (char *)v204;
  }
  ((void (*)(char *, uint64_t, uint64_t))v210)(v80, v211, v98);
  unint64_t v83 = (unint64_t)*v196;
  char v129 = *((unsigned char *)v196 + 16);
  unint64_t v130 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  LODWORD(v224) = static os_signpost_type_t.end.getter();
  char v131 = OS_os_log.signpostsEnabled.getter();
  uint64_t v132 = v205;
  if ((v131 & 1) == 0)
  {

    v209(v113, v132);
    ((void (*)(char *, uint64_t))v207)(v80, v98);
    uint64_t v137 = v132;
    goto LABEL_54;
  }
  uint64_t v133 = v205;
  if (v129)
  {
    if (!HIDWORD(v83))
    {
      uint64_t v135 = v193;
      uint64_t v134 = v194;
      unint64_t v136 = v192;
      if (v83 >> 11 == 27)
      {
        __break(1u);
        goto LABEL_113;
      }
      if (WORD1(v83) > 0x10u)
      {
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
        goto LABEL_110;
      }
      unint64_t v83 = (unint64_t)&v237;
      goto LABEL_50;
    }
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  if (!v83)
  {
    __break(1u);
    goto LABEL_105;
  }
  uint64_t v135 = v193;
  uint64_t v134 = v194;
  unint64_t v136 = v192;
LABEL_50:
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t))(v135 + 88))(v136, v134) == enum case for OSSignpostError.doubleEnd(_:))
  {
    char v138 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v135 + 8))(v136, v134);
    char v138 = "";
  }
  uint64_t v139 = v208;
  ((void (*)(char *, char *, uint64_t))v220)(v208, v113, v133);
  char v140 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)char v140 = 0;
  os_signpost_id_t v141 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v130, (os_signpost_type_t)v224, v141, (const char *)v83, v138, v140, 2u);
  swift_slowDealloc();

  uint64_t v142 = v113;
  long long v143 = v209;
  v209(v142, v133);
  uint64_t v144 = v212;
  ((void (*)(const char *, uint64_t))v207)(v204, v212);
  int v145 = v139;
  uint64_t v98 = v144;
  uint64_t v137 = v133;
  v143(v145, v133);
LABEL_54:
  ((void (*)(char *, uint64_t, uint64_t))v210)(v202, v211, v98);
  uint64_t v146 = sub_1000A22D0();
  unint64_t v83 = (unint64_t)*v146;
  char v147 = *((unsigned char *)v146 + 16);
  static OSSignpostID.exclusive.getter();
  uint64_t v148 = OSSignposter.logHandle.getter();
  LODWORD(v80) = static os_signpost_type_t.begin.getter();
  char v149 = OS_os_log.signpostsEnabled.getter();
  *(void *)&long long v224 = v146;
  if ((v149 & 1) == 0)
  {

    uint64_t v151 = v209;
    Swift::String v150 = v203;
    ((void (*)(char *, char *, uint64_t))v220)(v208, v203, v137);
    goto LABEL_64;
  }
  LODWORD(v223) = v80;
  if (v147)
  {
    if (HIDWORD(v83))
    {
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
    Swift::String v150 = v203;
    unint64_t v80 = (char *)v220;
    if (v83 >> 11 != 27)
    {
      if (WORD1(v83) <= 0x10u)
      {
        unint64_t v83 = (unint64_t)&v238;
        goto LABEL_63;
      }
      goto LABEL_109;
    }
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  unint64_t v80 = (char *)v220;
  if (!v83)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  Swift::String v150 = v203;
LABEL_63:
  uint64_t v152 = v208;
  ((void (*)(char *, char *, uint64_t))v80)(v208, v150, v137);
  uint64_t v153 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v153 = 0;
  os_signpost_id_t v154 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v148, (os_signpost_type_t)v223, v154, (const char *)v83, "", v153, 2u);
  swift_slowDealloc();

  uint64_t v151 = v209;
  v209(v152, v137);
  ((void (*)(char *, char *, uint64_t))v80)(v152, v150, v137);
LABEL_64:
  swift_allocObject();
  uint64_t v155 = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v156 = v137;
  unint64_t v157 = v155;
  v151(v150, v156);
  uint64_t v158 = v212;
  ((void (*)(char *, uint64_t))v207)(v202, v212);
  unint64_t v83 = (unint64_t)v215;
  uint64_t v159 = v221;
  (*(void (**)(void, uint64_t))(*v215 + 392))(0, 1);
  unint64_t v160 = v198;
  if (v159) {
    goto LABEL_65;
  }
  uint64_t v221 = 0;
  ((void (*)(char *, uint64_t, uint64_t))v210)(v198, v211, v158);
  uint64_t v162 = v158;
  uint64_t v163 = *(const char **)v224;
  char v164 = *(unsigned char *)(v224 + 16);
  uint64_t v165 = OSSignposter.logHandle.getter();
  v166 = v191;
  OSSignpostIntervalState.signpostID.getter();
  LODWORD(v224) = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    v209(v166, v205);
    ((void (*)(char *, uint64_t))v207)(v160, v162);
    goto LABEL_83;
  }
  if ((v164 & 1) == 0)
  {
    v167 = v208;
    v168 = v190;
    if (v163)
    {
      uint64_t v169 = v194;
LABEL_79:
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v170 = v193;
      int v171 = (*(uint64_t (**)(char *, uint64_t))(v193 + 88))(v168, v169);
      unint64_t v223 = v157;
      if (v171 == enum case for OSSignpostError.doubleEnd(_:))
      {
        unint64_t v172 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v170 + 8))(v168, v169);
        unint64_t v172 = "";
      }
      long long v173 = v166;
      uint64_t v174 = v166;
      uint64_t v175 = v205;
      ((void (*)(char *, char *, uint64_t))v220)(v167, v173, v205);
      uint64_t v176 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v176 = 0;
      os_signpost_id_t v177 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v165, (os_signpost_type_t)v224, v177, v163, v172, v176, 2u);
      swift_slowDealloc();

      unint64_t v178 = v174;
      uint64_t v179 = v209;
      v209(v178, v175);
      ((void (*)(char *, uint64_t))v207)(v198, v212);
      v179(v167, v175);
LABEL_83:
      unint64_t v83 = (unint64_t)v215;
      LODWORD(v80) = v201;
      if (qword_1001886D0 == -1) {
        goto LABEL_84;
      }
      goto LABEL_103;
    }
    goto LABEL_114;
  }
  v167 = v208;
  v168 = v190;
  if ((unint64_t)v163 >> 32)
  {
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  uint64_t v169 = v194;
  if (v163 >> 11 != 27)
  {
    if (v163 >> 16 <= 0x10)
    {
      uint64_t v163 = &v239;
      goto LABEL_79;
    }
    goto LABEL_116;
  }
LABEL_117:
  __break(1u);
LABEL_118:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000BC964()
{
  uint64_t v1 = v0;
  v116[0] = 0;
  v116[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(270);
  v2._uint64_t countAndFlagsBits = 0xD000000000000011;
  v2._object = (void *)0x800000010014C9C0;
  String.append(_:)(v2);
  if (v0[2])
  {
    uint64_t v3 = v0[1];
    uint64_t v4 = (void *)v0[2];
  }
  else
  {
    uint64_t v4 = (void *)0xE500000000000000;
    uint64_t v3 = 0x296C696E28;
  }
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x3A6D65747379530ALL;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  if (v0[4])
  {
    uint64_t v7 = v0[3];
    uint64_t v8 = (void *)v0[4];
  }
  else
  {
    uint64_t v8 = (void *)0xE500000000000000;
    uint64_t v7 = 0x296C696E28;
  }
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x61696C697875410ALL;
  v10._object = (void *)0xEC000000203A7972;
  String.append(_:)(v10);
  if (v0[6])
  {
    uint64_t v11 = v0[5];
    uint64_t v12 = (void *)v0[6];
  }
  else
  {
    uint64_t v12 = (void *)0xE500000000000000;
    uint64_t v11 = 0x296C696E28;
  }
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0xD000000000000010;
  v14._object = (void *)0x800000010014C9E0;
  String.append(_:)(v14);
  uint64_t v109 = v0[9];
  v116[0] = v109;
  swift_bridgeObjectRetain();
  sub_100004700((uint64_t *)&unk_10017E5D0);
  sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
  uint64_t v15 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v17 = v16;
  sub_100068558((uint64_t)&v109);
  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0x20656C646E75420ALL;
  v19._object = (void *)0xEF203A7368746150;
  String.append(_:)(v19);
  uint64_t v108 = v0[10];
  v116[0] = v108;
  swift_bridgeObjectRetain();
  sub_100004700(&qword_10017F150);
  sub_10001348C(&qword_10017F158, &qword_10017F150);
  sub_100029B24();
  uint64_t v20 = Sequence<>.joined(separator:)();
  uint64_t v22 = v21;
  sub_100068558((uint64_t)&v108);
  v23._uint64_t countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 0xD000000000000015;
  v24._object = (void *)0x800000010014CA00;
  String.append(_:)(v24);
  uint64_t v107 = v0[11];
  v116[0] = v107;
  swift_bridgeObjectRetain();
  uint64_t v25 = Sequence<>.joined(separator:)();
  uint64_t v27 = v26;
  sub_100068558((uint64_t)&v107);
  v28._uint64_t countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._object = (void *)0x800000010014CA20;
  v29._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v29);
  uint64_t v106 = v0[12];
  v116[0] = v106;
  swift_bridgeObjectRetain();
  uint64_t v30 = BidirectionalCollection<>.joined(separator:)();
  long long v32 = v31;
  sub_100068558((uint64_t)&v106);
  v33._uint64_t countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._uint64_t countAndFlagsBits = 0xD000000000000017;
  v34._object = (void *)0x800000010014CA40;
  String.append(_:)(v34);
  uint64_t v35 = v0[13];
  unint64_t v36 = (void *)v0[14];
  swift_bridgeObjectRetain();
  v37._uint64_t countAndFlagsBits = v35;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._object = (void *)0x800000010014CA60;
  v38._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v38);
  uint64_t v39 = v0[15];
  long long v40 = (void *)v0[16];
  swift_bridgeObjectRetain();
  v41._uint64_t countAndFlagsBits = v39;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = 0x746E61697261560ALL;
  v42._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v42);
  sub_100029900((uint64_t)(v0 + 17), (uint64_t)v105, &qword_10017F160);
  sub_100029900((uint64_t)v105, (uint64_t)&v110, &qword_10017F160);
  if (v110 == 5)
  {
    unint64_t v43 = 0xE500000000000000;
    uint64_t v44 = 0x296C696E28;
  }
  else
  {
    uint64_t v44 = sub_1000A2568(v110);
    unint64_t v43 = v45;
  }
  unint64_t v46 = v43;
  String.append(_:)(*(Swift::String *)&v44);
  swift_bridgeObjectRelease();
  v47._uint64_t countAndFlagsBits = 0x7265746C69460A0ALL;
  v47._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v47);
  sub_100029900((uint64_t)(v0 + 68), (uint64_t)v104, &qword_10017F140);
  sub_100029900((uint64_t)v104, (uint64_t)v116, &qword_10017F140);
  if (!v116[0])
  {
    uint64_t v62 = (void *)0xE500000000000000;
    uint64_t v63 = 0x296C696E28;
    goto LABEL_29;
  }
  unint64_t v48 = v117;
  unint64_t v118 = v117;
  if (v117 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    if (v49) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v49 = *(void *)((v117 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v49)
    {
LABEL_16:
      uint64_t v114 = _swiftEmptyArrayStorage;
      uint64_t result = sub_10000C884(0, v49 & ~(v49 >> 63), 0);
      if (v49 < 0)
      {
        __break(1u);
        goto LABEL_53;
      }
      uint64_t v102 = v0;
      uint64_t v51 = 0;
      uint64_t v52 = v114;
      do
      {
        if ((v48 & 0xC000000000000001) != 0) {
          id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v53 = *(id *)(v48 + 8 * v51 + 32);
        }
        char v54 = v53;
        id v55 = [v53 predicateFormat];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v58 = v57;

        uint64_t v114 = v52;
        unint64_t v60 = v52[2];
        unint64_t v59 = v52[3];
        if (v60 >= v59 >> 1)
        {
          sub_10000C884(v59 > 1, v60 + 1, 1);
          uint64_t v52 = v114;
        }
        ++v51;
        v52[2] = v60 + 1;
        uint64_t v61 = &v52[2 * v60];
        v61[4] = v56;
        v61[5] = v58;
      }
      while (v49 != v51);
      sub_100068558((uint64_t)&v118);
      uint64_t v1 = v102;
      goto LABEL_28;
    }
  }
  sub_100068558((uint64_t)&v118);
  uint64_t v52 = _swiftEmptyArrayStorage;
LABEL_28:
  uint64_t v114 = v52;
  uint64_t v63 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v62 = v64;
  swift_bridgeObjectRelease();
LABEL_29:
  v65._uint64_t countAndFlagsBits = v63;
  v65._object = v62;
  String.append(_:)(v65);
  swift_bridgeObjectRelease();
  v66._uint64_t countAndFlagsBits = 0x207265746C69460ALL;
  v66._object = (void *)0xED0000203A6C6C41;
  String.append(_:)(v66);
  sub_100029900((uint64_t)v104, (uint64_t)&v114, &qword_10017F140);
  if (v114)
  {
    unint64_t v67 = v115;
    unint64_t v119 = v115;
    if (v115 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
      if (v68)
      {
LABEL_32:
        uint64_t v112 = _swiftEmptyArrayStorage;
        uint64_t result = sub_10000C884(0, v68 & ~(v68 >> 63), 0);
        if ((v68 & 0x8000000000000000) == 0)
        {
          unint64_t v103 = v1;
          uint64_t v69 = 0;
          uint64_t v70 = v112;
          do
          {
            if ((v67 & 0xC000000000000001) != 0) {
              id v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v71 = *(id *)(v67 + 8 * v69 + 32);
            }
            uint64_t v72 = v71;
            id v73 = [v71 predicateFormat];
            uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v76 = v75;

            uint64_t v112 = v70;
            unint64_t v78 = v70[2];
            unint64_t v77 = v70[3];
            if (v78 >= v77 >> 1)
            {
              sub_10000C884(v77 > 1, v78 + 1, 1);
              uint64_t v70 = v112;
            }
            ++v69;
            v70[2] = v78 + 1;
            unint64_t v79 = &v70[2 * v78];
            v79[4] = v74;
            v79[5] = v76;
          }
          while (v68 != v69);
          sub_100068558((uint64_t)&v119);
          uint64_t v1 = v103;
          goto LABEL_44;
        }
LABEL_53:
        __break(1u);
        return result;
      }
    }
    else
    {
      uint64_t v68 = *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v68) {
        goto LABEL_32;
      }
    }
    sub_100068558((uint64_t)&v119);
    uint64_t v70 = _swiftEmptyArrayStorage;
LABEL_44:
    uint64_t v112 = v70;
    uint64_t v81 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v80 = v82;
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  unint64_t v80 = (void *)0xE500000000000000;
  uint64_t v81 = 0x296C696E28;
LABEL_45:
  v83._uint64_t countAndFlagsBits = v81;
  v83._object = v80;
  String.append(_:)(v83);
  swift_bridgeObjectRelease();
  v84._uint64_t countAndFlagsBits = 0x203A6564696C450ALL;
  v84._object = (void *)0xE800000000000000;
  String.append(_:)(v84);
  sub_100029900((uint64_t)v104, (uint64_t)&v112, &qword_10017F140);
  if (v112)
  {
    uint64_t v120 = v113;
    v111[0] = v113;
    swift_bridgeObjectRetain();
    uint64_t v85 = Sequence<>.joined(separator:)();
    uint64_t v87 = v86;
    sub_100068558((uint64_t)&v120);
  }
  else
  {
    uint64_t v87 = (void *)0xE500000000000000;
    uint64_t v85 = 0x296C696E28;
  }
  v88._uint64_t countAndFlagsBits = v85;
  v88._object = v87;
  String.append(_:)(v88);
  swift_bridgeObjectRelease();
  v89._uint64_t countAndFlagsBits = 0x616E6F6974704F0ALL;
  v89._object = (void *)0xEB00000000203A6CLL;
  String.append(_:)(v89);
  sub_100029900((uint64_t)v104, (uint64_t)v111, &qword_10017F140);
  if (v111[0])
  {
    uint64_t v121 = v111[2];
    swift_bridgeObjectRetain();
    uint64_t v90 = Sequence<>.joined(separator:)();
    char v92 = v91;
    sub_100068558((uint64_t)&v121);
  }
  else
  {
    char v92 = (void *)0xE500000000000000;
    uint64_t v90 = 0x296C696E28;
  }
  v93._uint64_t countAndFlagsBits = v90;
  v93._object = v92;
  String.append(_:)(v93);
  swift_bridgeObjectRelease();
  v94._uint64_t countAndFlagsBits = 0x656D756C6F560A0ALL;
  v94._object = (void *)0xEF203A746F6F5220;
  String.append(_:)(v94);
  uint64_t v95 = v1[18];
  uint64_t v96 = (void *)v1[19];
  swift_bridgeObjectRetain();
  v97._uint64_t countAndFlagsBits = v95;
  v97._object = v96;
  String.append(_:)(v97);
  swift_bridgeObjectRelease();
  v98._uint64_t countAndFlagsBits = 0x203A7367616C460ALL;
  v98._object = (void *)0xE800000000000000;
  String.append(_:)(v98);
  unint64_t v99 = sub_100085F70();
  unint64_t v100 = sub_1000C8B6C();
  v101._uint64_t countAndFlagsBits = sub_1000F07BC((uint64_t)&type metadata for ExtensionManager.Settings.Flags, v99, v100);
  String.append(_:)(v101);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000BD3FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v22 = a7;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KernelCollection();
  uint64_t v15 = *a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  uint64_t v16 = a3[13];
  uint64_t v17 = a3[14];
  sub_10000469C(a6, (uint64_t)v25);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_100057484(v15, (uint64_t)v14, v16, v17, a5, v25);
  uint64_t v19 = v26;
  uint64_t v20 = sub_1000B1F70(v18, v23);
  uint64_t result = swift_release();
  if (!v19) {
    *uint64_t v22 = v20;
  }
  return result;
}

void (*sub_1000BD564(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  Swift::String v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  _OWORD v6[5] = sub_1000C5C38(v6, a2, a3);
  return sub_10002CD14;
}

uint64_t sub_1000BD5E4(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_1000036B0(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 72))(v1, v2);
}

uint64_t sub_1000BD63C()
{
  uint64_t v2 = v0;
  uint64_t v3 = v0 + 664;
  swift_beginAccess();
  uint64_t v4 = *(void (**)(uint64_t))(v2 + 672);
  if (v4)
  {
    if (*(unsigned char *)(v2 + 688))
    {
      uint64_t v5 = *(void *)(v2 + 680);
      swift_retain();
      uint64_t v6 = v3;
      uint64_t v7 = v5;
      v4(v6);
      if (v1)
      {
        swift_endAccess();
        sub_1000C8B34((uint64_t)v4);
        return v7;
      }
      sub_1000C8B34((uint64_t)v4);
    }
    uint64_t v8 = swift_endAccess();
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 192))(v8);
    uint64_t v7 = sub_1000BD7A8(v9);
    swift_bridgeObjectRelease();
    return v7;
  }
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BD7A8(uint64_t a1)
{
  uint64_t v2 = &_swiftEmptyDictionarySingleton;
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  Swift::String v34 = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & v3;
  int64_t v8 = (unint64_t)(63 - v5) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v7) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v12 = v11 | (v10 << 6);
  while (1)
  {
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
    if (*(void *)(v13 + 16))
    {
      uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
      uint64_t v19 = v18[1];
      uint64_t v32 = *v18;
      sub_10000469C(v13 + 32, (uint64_t)v33);
      unint64_t v20 = v2[2];
      if (v2[3] <= v20)
      {
        uint64_t v21 = v20 + 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000C63E4(v21, 1);
        uint64_t v2 = v34;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = v2 + 8;
      uint64_t v23 = -1 << *((unsigned char *)v2 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~v2[(v24 >> 6) + 8]) == 0)
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v23) >> 6;
        while (++v25 != v28 || (v27 & 1) == 0)
        {
          BOOL v29 = v25 == v28;
          if (v25 == v28) {
            unint64_t v25 = 0;
          }
          v27 |= v29;
          uint64_t v30 = v22[v25];
          if (v30 != -1)
          {
            unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            goto LABEL_37;
          }
        }
        goto LABEL_41;
      }
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~v2[(v24 >> 6) + 8])) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_37:
      *(void *)((char *)v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      uint64_t v31 = (void *)(v2[6] + 16 * v26);
      void *v31 = v32;
      v31[1] = v19;
      sub_10000372C(v33, v2[7] + 40 * v26);
      ++v2[2];
      uint64_t result = swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_5;
      }
    }
    else if (v7)
    {
      goto LABEL_5;
    }
LABEL_8:
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v14 >= v8) {
      goto LABEL_39;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    int64_t v16 = v10 + 1;
    if (!v15)
    {
      int64_t v16 = v10 + 2;
      if (v10 + 2 >= v8) {
        goto LABEL_39;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v10 + 3;
        if (v10 + 3 >= v8) {
          goto LABEL_39;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v10 + 4;
          if (v10 + 4 >= v8) {
            goto LABEL_39;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v16 << 6);
    int64_t v10 = v16;
  }
  int64_t v17 = v10 + 5;
  if (v10 + 5 >= v8)
  {
LABEL_39:
    sub_1000048D8();
    return (uint64_t)v2;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v10 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v8) {
      goto LABEL_39;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1000BDABC()
{
  swift_beginAccess();
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 704);
  if (v2)
  {
    if (*(unsigned char *)(v0 + 720))
    {
      swift_retain();
      v2(v0 + 696);
      if (v1)
      {
        swift_endAccess();
        return sub_1000C8B34((uint64_t)v2);
      }
      sub_1000C8B34((uint64_t)v2);
    }
    return swift_endAccess();
  }
  else
  {
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BDBDC(char a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for URL();
  __chkstk_darwin(v10 - 8);
  unint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v4 + 2;
  uint64_t v14 = v4[5];
  uint64_t v15 = v5[6];
  sub_1000036B0(v13, v14);
  sub_1001297F4(v14, v15);
  uint64_t v17 = v43;
  uint64_t v16 = v44;
  sub_1000036B0(&v42, v43);
  (*(void (**)(long long *__return_ptr, uint64_t, void *, uint64_t, uint64_t, uint64_t))(v16 + 112))(&v39, a2, a3, 1, v17, v16);
  if (v40)
  {
    sub_10000372C(&v39, (uint64_t)&v45);
    sub_10000478C((uint64_t)&v42);
    if (a4)
    {
      uint64_t v18 = v47;
      uint64_t v19 = v48;
      sub_1000036B0(&v45, v47);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v19 + 80))(&v42, v18, v19);
      sub_10000469C((uint64_t)&v45, (uint64_t)v38);
      if (v43)
      {
        sub_10000478C((uint64_t)v38);
        sub_10000372C(&v42, (uint64_t)&v39);
      }
      else
      {
        sub_10000372C(v38, (uint64_t)&v39);
        sub_1000130EC((uint64_t)&v42, &qword_10017C930);
      }
      uint64_t v26 = v40;
      uint64_t v27 = v41;
      sub_1000036B0(&v39, v40);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v27 + 72))(&v42, v26, v27);
      sub_10000478C((uint64_t)&v39);
    }
    else
    {
      sub_10000469C((uint64_t)&v45, (uint64_t)&v42);
    }
    type metadata accessor for KernelCollection();
    uint64_t v28 = v5[7];
    URL.init(fileURLWithPath:)();
    uint64_t v29 = v5[20];
    uint64_t v30 = v5[21];
    sub_10000469C((uint64_t)&v42, (uint64_t)&v39);
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_100057484(v28, (uint64_t)v12, v29, v30, a1, &v39);
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_100132F10;
    *(void *)&long long v39 = v24;
    sub_1000CB938(&qword_10017C928, (void (*)(uint64_t))type metadata accessor for KernelCollection);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v34 = v33;
    *(void *)(v31 + 56) = &type metadata for String;
    *(void *)(v31 + 64) = sub_10002A1DC();
    *(void *)(v31 + 32) = v32;
    *(void *)(v31 + 40) = v34;
    sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
    uint64_t v35 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    sub_10000478C((uint64_t)&v42);
    sub_10000478C((uint64_t)&v45);
  }
  else
  {
    sub_1000130EC((uint64_t)&v39, &qword_10017C930);
    sub_10000478C((uint64_t)&v42);
    unint64_t v45 = 0;
    unint64_t v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    unint64_t v45 = 0xD00000000000001ALL;
    unint64_t v46 = 0x800000010014CAD0;
    LOBYTE(v42) = a1;
    sub_100059970();
    v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 0x7463656C6C6F6320;
    v21._object = (void *)0xEF207461206E6F69;
    String.append(_:)(v21);
    v22._uint64_t countAndFlagsBits = a2;
    v22._object = a3;
    String.append(_:)(v22);
    unint64_t v23 = v45;
    uint64_t v24 = v46;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v25 = v23;
    *(void *)(v25 + 8) = v24;
    *(_OWORD *)(v25 + 16) = 0u;
    *(_OWORD *)(v25 + 32) = 0u;
    *(_OWORD *)(v25 + 48) = 0u;
    *(void *)(v25 + 64) = 0;
    *(unsigned char *)(v25 + 72) = 10;
    swift_willThrow();
  }
  return v24;
}

uint64_t sub_1000BE030()
{
  return sub_1000BE0CC(0, 0xD00000000000002FLL, 0x800000010014CB10);
}

uint64_t sub_1000BE064()
{
  return sub_1000BE0CC(1, 0xD000000000000028, 0x800000010014CB40);
}

uint64_t sub_1000BE098()
{
  return sub_1000BE0CC(2, 0xD000000000000031, 0x800000010014CB70);
}

uint64_t sub_1000BE0CC(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_1000F11D0(a1);
  uint64_t v7 = v6;
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v8 = v5;
  *(void *)(v8 + 8) = v7;
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(void *)(v8 + 64) = 0;
  *(unsigned char *)(v8 + 72) = 6;
  return swift_willThrow();
}

uint64_t sub_1000BE154()
{
  unint64_t v0 = sub_1000F11D0(0);
  uint64_t v2 = v1;
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v3 = v0;
  *(void *)(v3 + 8) = v2;
  *(void *)(v3 + 16) = 0xD00000000000002FLL;
  *(void *)(v3 + 24) = 0x800000010014CB10;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(void *)(v3 + 64) = 0;
  *(unsigned char *)(v3 + 72) = 6;
  return swift_willThrow();
}

void *sub_1000BE1E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  sub_1000036B0(v2, v3);
  sub_10007F4B4(v3, v4);
  uint64_t v5 = v21;
  uint64_t v6 = v22;
  sub_1000036B0(v20, v21);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v5, v6);
  if (v8)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    sub_10000478C((uint64_t)v20);
    uint64_t result = sub_1000A2488(v9, v10, 0, 0);
    if (result != (void *)5) {
      return result;
    }
  }
  else
  {
    sub_10000478C((uint64_t)v20);
  }
  uint64_t v12 = *(void *)(v1 + 40);
  uint64_t v13 = *(void *)(v1 + 48);
  sub_1000036B0(v2, v12);
  sub_10007F4B4(v12, v13);
  uint64_t v14 = v21;
  uint64_t v15 = v22;
  sub_1000036B0(v20, v21);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 80))(v14, v15);
  if (!v17)
  {
    sub_10000478C((uint64_t)v20);
    return 0;
  }
  uint64_t v18 = v16;
  uint64_t v19 = v17;
  sub_10000478C((uint64_t)v20);
  uint64_t result = sub_1000A2488(v18, v19, 0, 0);
  if (result == (void *)5) {
    return 0;
  }
  return result;
}

uint64_t sub_1000BE354()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v23 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v23 - v10;
  URL.init(fileURLWithPath:)();
  uint64_t v12 = v0[14];
  v23[0] = v0[15];
  v23[1] = v12;
  URL.appendingPathComponent(_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  URL.deletingLastPathComponent()();
  uint64_t v27 = v2;
  v13(v9, v2);
  uint64_t v14 = v0[5];
  uint64_t v15 = v1[6];
  sub_1000036B0(v1 + 2, v1[5]);
  sub_1001297F4(v14, v15);
  uint64_t v16 = v25;
  uint64_t v17 = v26;
  uint64_t v18 = (uint64_t)sub_1000036B0(v24, v25);
  uint64_t v19 = v23[2];
  (*(void (**)(char *, uint64_t, void, uint64_t, uint64_t))(v17 + 48))(v11, 1, 0, v16, v17);
  if (v19)
  {
    v13(v11, v27);
    sub_10000478C((uint64_t)v24);
  }
  else
  {
    sub_10000478C((uint64_t)v24);
    Swift::String v20 = sub_1000BE1E8();
    URL.init(fileURLWithPath:)();
    sub_10003CC54((unint64_t)v20);
    sub_1000F1604((uint64_t)v20, (uint64_t)v9);
    sub_10003E8C0((unint64_t)v20);
    uint64_t v21 = v27;
    v13(v6, v27);
    uint64_t v18 = URL.path.getter();
    sub_10003E8C0((unint64_t)v20);
    v13(v9, v21);
    v13(v11, v21);
  }
  return v18;
}

void *sub_1000BE5F4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v144 = a2;
  uint64_t v143 = a1;
  uint64_t v142 = sub_100004700(&qword_10017F170);
  __chkstk_darwin(v142);
  uint64_t v141 = (uint64_t)&v140 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v151 = (char *)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v157 = (uint64_t)&v140 - v8;
  uint64_t v9 = type metadata accessor for URL();
  int64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v159 = (char *)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v161 = (uint64_t)&v140 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v148 = (char *)&v140 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v140 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v140 - v20;
  uint64_t v22 = *(void *)(v2 + 128);
  int64_t v23 = *(void *)(v22 + 16);
  uint64_t v150 = v2;
  int64_t v163 = v10;
  if (v23)
  {
    uint64_t v162 = v19;
    uint64_t v166 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100044920(0, v23, 0);
    uint64_t v24 = (void *)v166;
    uint64_t v25 = v22 + 40;
    do
    {
      swift_bridgeObjectRetain();
      URL.init(fileURLWithPath:)();
      swift_bridgeObjectRelease();
      uint64_t v166 = (uint64_t)v24;
      unint64_t v27 = v24[2];
      unint64_t v26 = v24[3];
      uint64_t v28 = v24;
      if (v27 >= v26 >> 1)
      {
        sub_100044920(v26 > 1, v27 + 1, 1);
        uint64_t v28 = (void *)v166;
      }
      v25 += 16;
      void v28[2] = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v163 + 32))((unint64_t)v28+ ((*(unsigned __int8 *)(v163 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80))+ *(void *)(v163 + 72) * v27, v21, v9);
      --v23;
      uint64_t v24 = v28;
    }
    while (v23);
    uint64_t v152 = v28;
    swift_bridgeObjectRelease();
    uint64_t v3 = v150;
    uint64_t v19 = v162;
    int64_t v10 = v163;
  }
  else
  {
    uint64_t v152 = _swiftEmptyArrayStorage;
  }
  uint64_t v29 = *(void *)(v3 + 136);
  int64_t v30 = *(void *)(v29 + 16);
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v162 = (char *)v9;
  if (v30)
  {
    uint64_t v166 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100044920(0, v30, 0);
    uint64_t v31 = (void *)v166;
    int64_t v32 = sub_10004E46C(v29);
    uint64_t v3 = v33;
    char v35 = v34 & 1;
    uint64_t v160 = v29 + 56;
    uint64_t v158 = (char *)(v10 + 32);
    do
    {
      if (v32 < 0 || v32 >= 1 << *(unsigned char *)(v29 + 32))
      {
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      if (((*(void *)(v160 + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32) & 1) == 0) {
        goto LABEL_63;
      }
      if (*(_DWORD *)(v29 + 36) != v3) {
        goto LABEL_64;
      }
      swift_bridgeObjectRetain();
      URL.init(fileURLWithPath:)();
      swift_bridgeObjectRelease();
      uint64_t v166 = (uint64_t)v31;
      int64_t v10 = (int64_t)v19;
      unint64_t v37 = v31[2];
      unint64_t v36 = v31[3];
      if (v37 >= v36 >> 1)
      {
        sub_100044920(v36 > 1, v37 + 1, 1);
        uint64_t v31 = (void *)v166;
      }
      v31[2] = v37 + 1;
      uint64_t v9 = (uint64_t)v162;
      (*(void (**)(unint64_t, int64_t, char *))(v163 + 32))((unint64_t)v31+ ((*(unsigned __int8 *)(v163 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80))+ *(void *)(v163 + 72) * v37, v10, v162);
      int64_t v38 = sub_10004E50C(v32, v3, v35 & 1, v29);
      int64_t v32 = v38;
      uint64_t v3 = v39;
      char v35 = v40 & 1;
      --v30;
      uint64_t v19 = (char *)v10;
    }
    while (v30);
    sub_10005495C(v38, v39, v40 & 1);
    swift_bridgeObjectRelease();
    uint64_t v3 = v150;
  }
  int64_t v10 = sub_100012700((uint64_t)v31);
  swift_bridgeObjectRelease();
  uint64_t v170 = (void *)v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 640);
  uint64_t v29 = (uint64_t)v151;
  if (qword_1001886E0 != -1) {
    goto LABEL_68;
  }
  while (1)
  {
    uint64_t v41 = objc_retain_x22;
    if ((dword_100199788 & ~v10) != 0)
    {
      uint64_t v42 = *(void *)(v3 + 40);
      uint64_t v43 = *(void *)(v3 + 48);
      sub_1000036B0((void *)(v3 + 16), v42);
      sub_10007F4B4(v42, v43);
      uint64_t v44 = v168;
      uint64_t v45 = v169;
      sub_1000036B0(&v166, v168);
      uint64_t v46 = *sub_1000788D8();
      swift_bridgeObjectRetain();
      unint64_t v47 = sub_100078DAC(2, 2, v46);
      v164[3] = &type metadata for KernelRequests.GetLoaded;
      v164[4] = &off_10016C348;
      v164[0] = v47;
      uint64_t v48 = sub_100004700(&qword_10017C920);
      uint64_t v49 = v153;
      sub_1000780C8(v164, v48, v44, v48, v45, (uint64_t)&v165);
      if (v49)
      {
        sub_10000478C((uint64_t)v164);
        sub_10000478C((uint64_t)&v166);
        sub_100004700((uint64_t *)&unk_10017D6E0);
        uint64_t v50 = swift_allocObject();
        *(_OWORD *)(v50 + 16) = xmmword_100132F10;
        uint64_t v166 = v49;
        swift_errorRetain();
        sub_100004700(&qword_10017EB50);
        uint64_t v51 = String.init<A>(describing:)();
        uint64_t v53 = v52;
        *(void *)(v50 + 56) = &type metadata for String;
        *(void *)(v50 + 64) = sub_10002A1DC();
        *(void *)(v50 + 32) = v51;
        *(void *)(v50 + 40) = v53;
        sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
        char v54 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        swift_errorRelease();
        uint64_t v153 = 0;
      }
      else
      {
        sub_10000478C((uint64_t)v164);
        uint64_t v55 = v165;
        sub_10000478C((uint64_t)&v166);
        uint64_t v56 = sub_1000BF794(v55);
        uint64_t v153 = 0;
        swift_bridgeObjectRelease();
        uint64_t v57 = v56[2];
        if (v57)
        {
          uint64_t v158 = *(char **)(v163 + 16);
          unint64_t v58 = (*(unsigned __int8 *)(v163 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80);
          unint64_t v147 = (unint64_t)v56;
          unint64_t v59 = (char *)v56 + v58;
          uint64_t v154 = *(void *)(v163 + 72);
          uint64_t v155 = (void *)(v163 + 48);
          char v149 = (uint64_t (**)(char *, uint64_t, uint64_t))(v163 + 32);
          uint64_t v160 = v163 + 16;
          unint64_t v60 = (void (**)(uint64_t, uint64_t))(v163 + 8);
          *(void *)&long long v156 = v163 + 56;
          unint64_t v146 = (v163 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
          uint64_t v61 = v157;
          uint64_t v62 = v148;
          uint64_t v63 = (uint64_t)v162;
          ((void (*)(uint64_t, char *, char *))v158)(v157, v59, v162);
          while (1)
          {
            uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t, char *))v156;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))v156)(v61, 0, 1, v63);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v155)(v61, 1, v63) == 1)
            {
              swift_bridgeObjectRelease();
              uint64_t v3 = v150;
              uint64_t v29 = (uint64_t)v151;
              uint64_t v9 = v63;
              uint64_t v41 = objc_retain_x22;
              goto LABEL_35;
            }
            uint64_t v69 = (*v149)(v62, v61, v63);
            __chkstk_darwin(v69);
            *(&v140 - 2) = (uint64_t)v62;
            uint64_t v70 = v152;
            swift_bridgeObjectRetain();
            uint64_t v71 = v153;
            sub_1000BFCCC((uint64_t (*)(char *))sub_1000C9170, (uint64_t)(&v140 - 4), (uint64_t)v70);
            uint64_t v153 = v71;
            BOOL v72 = sub_1000EF0B4();
            swift_bridgeObjectRelease();
            if (v72)
            {
              uint64_t v64 = v159;
              ((void (*)(char *, char *, uint64_t))v158)(v159, v62, v63);
              uint64_t v65 = v161;
              sub_10000E1B8(v161, v64);
              Swift::String v66 = *v60;
              uint64_t v67 = v65;
              uint64_t v61 = v157;
              (*v60)(v67, v63);
              v66((uint64_t)v62, v63);
            }
            else
            {
              (*v60)((uint64_t)v62, v63);
            }
            v59 += v154;
            if (!--v57) {
              break;
            }
            ((void (*)(uint64_t, char *, uint64_t))v158)(v61, v59, v63);
          }
          uint64_t v3 = v150;
          uint64_t v9 = (uint64_t)v162;
          uint64_t v41 = objc_retain_x22;
          v68(v61, 1, 1, v162);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v163 + 56))(v157, 1, 1, v9);
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v29 = (uint64_t)v151;
    }
LABEL_35:
    uint64_t v73 = sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v74 = swift_allocObject();
    long long v156 = *((_OWORD *)v41 + 241);
    uint64_t v155 = (void *)v74;
    *(_OWORD *)(v74 + 16) = v156;
    uint64_t v75 = v152;
    int64_t v76 = v152[2];
    unint64_t v77 = _swiftEmptyArrayStorage;
    if (v76)
    {
      uint64_t v154 = v73;
      v164[0] = _swiftEmptyArrayStorage;
      sub_10000C884(0, v76, 0);
      unint64_t v78 = *(char **)(v163 + 16);
      unint64_t v79 = (char *)v75
          + ((*(unsigned __int8 *)(v163 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80));
      uint64_t v157 = *(void *)(v163 + 72);
      uint64_t v158 = v78;
      uint64_t v160 = v163 + 16;
      unint64_t v80 = (void (**)(uint64_t, uint64_t))(v163 + 8);
      do
      {
        uint64_t v81 = v161;
        ((void (*)(uint64_t, char *, uint64_t))v158)(v161, v79, v9);
        uint64_t v166 = 2314;
        unint64_t v167 = 0xE200000000000000;
        v82._uint64_t countAndFlagsBits = URL.path.getter();
        String.append(_:)(v82);
        swift_bridgeObjectRelease();
        uint64_t v84 = v166;
        unint64_t v83 = v167;
        (*v80)(v81, v9);
        unint64_t v77 = (void *)v164[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10000C884(0, v77[2] + 1, 1);
          unint64_t v77 = (void *)v164[0];
        }
        unint64_t v86 = v77[2];
        unint64_t v85 = v77[3];
        if (v86 >= v85 >> 1)
        {
          sub_10000C884(v85 > 1, v86 + 1, 1);
          unint64_t v77 = (void *)v164[0];
        }
        v77[2] = v86 + 1;
        uint64_t v87 = &v77[2 * v86];
        v87[4] = v84;
        v87[5] = v83;
        v79 += v157;
        --v76;
        uint64_t v9 = (uint64_t)v162;
      }
      while (v76);
      uint64_t v3 = v150;
      uint64_t v29 = (uint64_t)v151;
    }
    uint64_t v166 = (uint64_t)v77;
    uint64_t v88 = sub_100004700((uint64_t *)&unk_10017E5D0);
    uint64_t v89 = sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
    char v149 = (uint64_t (**)(char *, uint64_t, uint64_t))v88;
    uint64_t v148 = (char *)v89;
    uint64_t v90 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v92 = v91;
    swift_bridgeObjectRelease();
    Swift::String v93 = v155;
    v155[7] = &type metadata for String;
    unint64_t v147 = sub_10002A1DC();
    v93[8] = v147;
    v93[4] = v90;
    v93[5] = v92;
    unint64_t v146 = sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
    Swift::String v94 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    uint64_t v145 = swift_allocObject();
    *(_OWORD *)(v145 + 16) = v156;
    uint64_t v95 = (uint64_t)v170;
    int64_t v10 = v170[2];
    uint64_t v96 = _swiftEmptyArrayStorage;
    if (!v10) {
      break;
    }
    v164[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10000C884(0, v10, 0);
    uint64_t v29 = sub_10004E46C(v95);
    uint64_t v3 = v97;
    uint64_t v158 = (char *)(v95 + 56);
    int v99 = v98 & 1;
    *(void *)&long long v156 = v163 + 16;
    uint64_t v155 = (void *)(v163 + 32);
    uint64_t v154 = v163 + 8;
    uint64_t v157 = v95;
    while ((v29 & 0x8000000000000000) == 0 && v29 < 1 << *(unsigned char *)(v95 + 32))
    {
      if (((*(void *)&v158[((unint64_t)v29 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v29) & 1) == 0) {
        goto LABEL_66;
      }
      if (*(_DWORD *)(v95 + 36) != v3) {
        goto LABEL_67;
      }
      LODWORD(v160) = v99;
      uint64_t v100 = *(void *)(v95 + 48);
      int64_t v101 = v163;
      uint64_t v102 = v161;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v163 + 16))(v161, v100 + *(void *)(v163 + 72) * v29, v9);
      uint64_t v103 = v9;
      uint64_t v104 = v159;
      (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v159, v102, v103);
      uint64_t v166 = 2314;
      unint64_t v167 = 0xE200000000000000;
      v105._uint64_t countAndFlagsBits = URL.path.getter();
      String.append(_:)(v105);
      swift_bridgeObjectRelease();
      uint64_t v107 = v166;
      unint64_t v106 = v167;
      (*(void (**)(char *, uint64_t))(v101 + 8))(v104, v103);
      uint64_t v96 = (void *)v164[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10000C884(0, v96[2] + 1, 1);
        uint64_t v96 = (void *)v164[0];
      }
      char v108 = v160;
      unint64_t v110 = v96[2];
      unint64_t v109 = v96[3];
      if (v110 >= v109 >> 1)
      {
        sub_10000C884(v109 > 1, v110 + 1, 1);
        uint64_t v96 = (void *)v164[0];
      }
      v96[2] = v110 + 1;
      uint64_t v111 = &v96[2 * v110];
      v111[4] = v107;
      void v111[5] = v106;
      uint64_t v95 = v157;
      int64_t v112 = sub_10004E50C(v29, v3, v108 & 1, v157);
      uint64_t v29 = v112;
      uint64_t v3 = v113;
      int v99 = v114 & 1;
      --v10;
      uint64_t v9 = (uint64_t)v162;
      if (!v10)
      {
        sub_10005495C(v112, v113, v99);
        swift_bridgeObjectRelease();
        uint64_t v3 = v150;
        uint64_t v29 = (uint64_t)v151;
        goto LABEL_55;
      }
    }
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    swift_once();
  }
LABEL_55:
  uint64_t v166 = (uint64_t)v96;
  uint64_t v115 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v117 = v116;
  swift_bridgeObjectRelease();
  unint64_t v118 = (void *)v145;
  unint64_t v119 = v147;
  *(void *)(v145 + 56) = &type metadata for String;
  v118[8] = v119;
  v118[4] = v115;
  v118[5] = v117;
  uint64_t v120 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  swift_retain();
  uint64_t v121 = v153;
  Swift::String v122 = sub_1000C8BC0((uint64_t)v152, (void *)v3);
  if (v121)
  {
    swift_release();
    long long v123 = v170;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v124 = (uint64_t)v122;
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v163 + 56))(v29, 1, 1, v9);
    uint64_t v125 = v29;
    uint64_t v126 = sub_1000C5100((uint64_t)v170);
    swift_bridgeObjectRelease();
    uint64_t v127 = sub_10002A270();
    unint64_t v128 = sub_1000F3800(v3 + 16, (uint64_t)v126, v127);
    swift_release();
    uint64_t v129 = v142;
    uint64_t v130 = *(int *)(v142 + 48);
    uint64_t v131 = v125;
    uint64_t v132 = v141;
    sub_100029900(v131, v141, (uint64_t *)&unk_10017FA60);
    *(void *)(v132 + v130) = v128;
    uint64_t v133 = sub_1000EEF98(v132, v124, v129);
    swift_bridgeObjectRelease();
    sub_1000130EC(v132, &qword_10017F170);
    if (*(void *)(v133 + 16))
    {
      sub_100004700(&qword_10017F178);
      uint64_t v134 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v134 = &_swiftEmptyDictionarySingleton;
    }
    uint64_t v166 = (uint64_t)v134;
    uint64_t v135 = swift_bridgeObjectRetain();
    sub_1000C6DD8(v135, 1, &v166);
    swift_bridgeObjectRelease();
    uint64_t v136 = v166;
    swift_retain();
    uint64_t v137 = v143;
    unint64_t v138 = v144;
    sub_1000C913C(v143, v144);
    long long v123 = sub_1000C8E64(_swiftEmptyArrayStorage, v136, v137, v138, (void *)v3);
    swift_release();
    sub_1000C9160(v137, v138);
    swift_release();
  }
  return v123;
}

void *sub_1000BF794(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)&unk_10017FA60;
  uint64_t v3 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v45 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v42 = (char *)&v41 - v10;
  uint64_t v43 = v9;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v49 = a1 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  uint64_t v14 = v13 & v11;
  uint64_t v15 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  int64_t v50 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v51 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v44 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v17 = 0;
  uint64_t v46 = _swiftEmptyArrayStorage;
  unint64_t v47 = (char *)&type metadata for Any + 8;
  uint64_t v48 = v15;
  if (v14) {
    goto LABEL_10;
  }
LABEL_16:
  int64_t v25 = v17 + 1;
  if (!__OFADD__(v17, 1))
  {
    if (v25 < v50)
    {
      uint64_t v26 = *(void *)(v49 + 8 * v25);
      int64_t v27 = v17 + 1;
      if (v26) {
        goto LABEL_31;
      }
      int64_t v27 = v17 + 2;
      if (v17 + 2 >= v50) {
        goto LABEL_41;
      }
      uint64_t v26 = *(void *)(v49 + 8 * v27);
      if (v26) {
        goto LABEL_31;
      }
      int64_t v27 = v17 + 3;
      if (v17 + 3 >= v50) {
        goto LABEL_41;
      }
      uint64_t v26 = *(void *)(v49 + 8 * v27);
      if (v26) {
        goto LABEL_31;
      }
      int64_t v27 = v17 + 4;
      if (v17 + 4 >= v50) {
        goto LABEL_41;
      }
      uint64_t v26 = *(void *)(v49 + 8 * v27);
      if (v26)
      {
LABEL_31:
        uint64_t v55 = (v26 - 1) & v26;
        for (int64_t i = v27; ; int64_t i = v17)
        {
          type metadata accessor for OSExtension(0);
          swift_bridgeObjectRetain();
          uint64_t v29 = swift_bridgeObjectRetain();
          uint64_t v30 = sub_1001146F8(v29);
          if (!v30) {
            goto LABEL_7;
          }
          uint64_t v31 = *(void *)(v30 + 16);
          int64_t v32 = (uint64_t *)sub_1000A1558();
          if (!*(void *)(v31 + 16)) {
            break;
          }
          uint64_t v33 = v6;
          char v34 = v5;
          char v35 = v2;
          uint64_t v36 = a1;
          uint64_t v37 = *v32;
          uint64_t v38 = v32[1];
          swift_bridgeObjectRetain();
          unint64_t v39 = sub_1000048E0(v37, v38);
          if (v40)
          {
            sub_1000047DC(*(void *)(v31 + 56) + 32 * v39, (uint64_t)&v53);
          }
          else
          {
            long long v53 = 0u;
            long long v54 = 0u;
          }
          swift_bridgeObjectRelease();
          a1 = v36;
          uint64_t v2 = v35;
          uint64_t v5 = v34;
          uint64_t v6 = v33;
          uint64_t v15 = v48;
          if (!*((void *)&v54 + 1)) {
            goto LABEL_6;
          }
          if (!swift_dynamicCast())
          {
            swift_release();
            goto LABEL_7;
          }
          URL.init(fileURLWithPath:)();
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v18 = 0;
LABEL_8:
          int64_t v17 = i;
          (*v15)(v5, v18, 1, v6);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((*v51)(v5, 1, v6) == 1)
          {
            uint64_t result = (void *)sub_1000130EC((uint64_t)v5, v2);
            uint64_t v14 = v55;
            if (!v55) {
              goto LABEL_16;
            }
          }
          else
          {
            uint64_t v19 = *v44;
            uint64_t v20 = v42;
            (*v44)(v42, v5, v6);
            v19(v45, v20, v6);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v46 = (void *)sub_10000C4CC(0, v46[2] + 1, 1, (unint64_t)v46);
            }
            unint64_t v22 = v46[2];
            unint64_t v21 = v46[3];
            if (v22 >= v21 >> 1) {
              uint64_t v46 = (void *)sub_10000C4CC(v21 > 1, v22 + 1, 1, (unint64_t)v46);
            }
            int64_t v23 = v45;
            uint64_t v24 = v46;
            v46[2] = v22 + 1;
            uint64_t result = (void *)((uint64_t (*)(char *, char *, uint64_t))v19)((char *)v24+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v22, v23, v6);
            uint64_t v14 = v55;
            if (!v55) {
              goto LABEL_16;
            }
          }
LABEL_10:
          uint64_t v55 = (v14 - 1) & v14;
        }
        long long v53 = 0u;
        long long v54 = 0u;
LABEL_6:
        swift_release();
        sub_1000130EC((uint64_t)&v53, &qword_10017C018);
LABEL_7:
        uint64_t v18 = 1;
        goto LABEL_8;
      }
      uint64_t v28 = v17 + 5;
      if (v17 + 5 < v50)
      {
        uint64_t v26 = *(void *)(v49 + 8 * v28);
        if (v26)
        {
          int64_t v27 = v17 + 5;
          goto LABEL_31;
        }
        while (1)
        {
          int64_t v27 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            goto LABEL_43;
          }
          if (v27 >= v50) {
            break;
          }
          uint64_t v26 = *(void *)(v49 + 8 * v27);
          ++v28;
          if (v26) {
            goto LABEL_31;
          }
        }
      }
    }
LABEL_41:
    swift_release();
    return v46;
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1000BFCCC(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v6 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v37 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v45 = (char *)&v30 - v14;
  uint64_t v46 = _swiftEmptyArrayStorage;
  uint64_t v38 = *(void *)(a3 + 16);
  if (v38)
  {
    unint64_t v15 = 0;
    uint64_t v39 = v10 + 48;
    uint64_t v44 = (void (**)(char *))(v10 + 32);
    uint64_t v40 = v10 + 56;
    uint64_t v41 = v10 + 16;
    unint64_t v32 = (v10 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v33 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v36 = v10;
    while (v15 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v17 = *(void *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, a3 + v16 + v17 * v15, v9);
      uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v18(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
        goto LABEL_17;
      }
      char v35 = v18;
      uint64_t v19 = a3;
      uint64_t v20 = v8;
      unint64_t v21 = v45;
      unint64_t v22 = *v44;
      int64_t v23 = v20;
      (*v44)(v45);
      char v24 = v42(v21);
      if (v4)
      {
        (*v33)(v45, v9);
        swift_bridgeObjectRelease();
        return swift_release();
      }
      if (v24)
      {
        ((void (*)(char *, char *, uint64_t))v22)(v37, v45, v9);
        int64_t v25 = v46;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v34 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100044920(0, v25[2] + 1, 1);
          int64_t v25 = v46;
        }
        unint64_t v28 = v25[2];
        unint64_t v27 = v25[3];
        unint64_t v29 = v28 + 1;
        if (v28 >= v27 >> 1)
        {
          unint64_t v31 = v28 + 1;
          sub_100044920(v27 > 1, v28 + 1, 1);
          unint64_t v29 = v31;
          int64_t v25 = v46;
        }
        long long v25[2] = v29;
        uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v22)((char *)v25 + v16 + v28 * v17, v37, v9);
        uint64_t v46 = v25;
        uint64_t v4 = v34;
      }
      else
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v33)(v45, v9);
      }
      a3 = v19;
      ++v15;
      uint64_t v8 = v23;
      uint64_t v10 = v36;
      if (v38 == v15)
      {
        v35(v23, 1, 1, v9);
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_17:
    swift_bridgeObjectRelease();
    sub_1000130EC((uint64_t)v8, (uint64_t *)&unk_10017FA60);
    return (uint64_t)v46;
  }
  return result;
}

uint64_t sub_1000C008C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v63 = a3;
  Swift::String v82 = a1;
  uint64_t v68 = sub_100004700(&qword_10017F188);
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v70 = (uint64_t)v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v61 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004700(&qword_10017F3B0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v66 = (uint64_t)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)v57 - v15;
  uint64_t v17 = *(int *)(v14 + 56);
  sub_10001BA68(a2, (uint64_t)v57 - v15, (uint64_t *)&unk_10017FA60);
  uint64_t v18 = *(void *)(a2 + v17);
  *(void *)&v16[v17] = v18;
  swift_bridgeObjectRetain();
  sub_1000130EC((uint64_t)v16, (uint64_t *)&unk_10017FA60);
  uint64_t v19 = *(void *)(v18 + 16);
  if (!v19) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v64 = a5 + 2;
  v57[1] = v18;
  uint64_t v20 = v18 + 32;
  unint64_t v60 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v59 = a4;
  uint64_t v58 = a2;
  while (1)
  {
    sub_10000469C(v20, (uint64_t)v79);
    if (a4 == 3) {
      break;
    }
    uint64_t v21 = v80;
    uint64_t v22 = v81;
    sub_1000036B0(v79, v80);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(v21, v22);
    unint64_t v25 = v24;
    *(void *)&long long v76 = v23;
    *((void *)&v76 + 1) = v24;
    v73[0] = v63;
    v73[1] = a4;
    sub_100097DF8();
    char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
    sub_10003C944(v23, v25);
    if (v26) {
      break;
    }
LABEL_4:
    sub_10000478C((uint64_t)v79);
    v20 += 40;
    if (!--v19) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v27 = v80;
  uint64_t v28 = v81;
  sub_1000036B0(v79, v80);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(v27, v28);
  if (v30 != 1)
  {
    sub_10003C944(v29, v30);
LABEL_16:
    uint64_t v51 = v66;
    sub_10001BA68(a2, v66, (uint64_t *)&unk_10017FA60);
    uint64_t v52 = v70 + *(int *)(v68 + 48);
    sub_100029900(v51, v70, (uint64_t *)&unk_10017FA60);
    sub_10000469C((uint64_t)v79, v52);
    long long v53 = *v82;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v53 = (void *)sub_1000C75E0(0, v53[2] + 1, 1, v53);
    }
    unint64_t v55 = v53[2];
    unint64_t v54 = v53[3];
    if (v55 >= v54 >> 1) {
      long long v53 = (void *)sub_1000C75E0(v54 > 1, v55 + 1, 1, v53);
    }
    _OWORD v53[2] = v55 + 1;
    sub_100029900(v70, (uint64_t)v53+ ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(void *)(v67 + 72) * v55, &qword_10017F188);
    void *v82 = v53;
    goto LABEL_4;
  }
  uint64_t v31 = a5[5];
  uint64_t v32 = a5[6];
  uint64_t v33 = a5;
  sub_1000036B0(v64, v31);
  sub_1001297F4(v31, v32);
  uint64_t v34 = v77;
  uint64_t v35 = v78;
  uint64_t v65 = sub_1000036B0(&v76, v77);
  uint64_t v36 = v80;
  uint64_t v37 = v81;
  sub_1000036B0(v79, v80);
  uint64_t v38 = v61;
  (*(void (**)(uint64_t, uint64_t))(v37 + 64))(v36, v37);
  uint64_t v39 = URL.path.getter();
  uint64_t v41 = v40;
  (*v60)(v38, v62);
  uint64_t v42 = v69;
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 152))(v39, v41, v34, v35);
  uint64_t v69 = v42;
  if (!v42)
  {
    uint64_t v45 = v43;
    uint64_t v46 = v44;
    swift_bridgeObjectRelease();
    if (v46)
    {
      sub_10000478C((uint64_t)&v76);
      a5 = v33;
      uint64_t v47 = v33[5];
      uint64_t v48 = v33[6];
      sub_1000036B0(v64, v47);
      sub_1000B07CC(v47, v48);
      uint64_t v49 = v74;
      uint64_t v50 = v75;
      sub_1000036B0(v73, v74);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 16))(&v71, v45, v46, v49, v50);
      swift_bridgeObjectRelease();
      if (v72)
      {
        sub_10000372C(&v71, (uint64_t)&v76);
        sub_10000478C((uint64_t)v73);
        sub_10000478C((uint64_t)v79);
        sub_10000372C(&v76, (uint64_t)v79);
      }
      else
      {
        sub_1000130EC((uint64_t)&v71, &qword_10017BC78);
        sub_10000478C((uint64_t)v73);
      }
    }
    else
    {
      sub_10000478C((uint64_t)&v76);
      a5 = v33;
    }
    a4 = v59;
    a2 = v58;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)&v76);
  return sub_10000478C((uint64_t)v79);
}

uint64_t sub_1000C06E8()
{
  uint64_t v2 = v0;
  uint64_t result = (*(uint64_t (**)(void))(*v0 + 296))();
  if (v1) {
    return result;
  }
  int64_t v4 = 0;
  uint64_t v48 = result;
  uint64_t v6 = *(void *)(result + 64);
  result += 64;
  uint64_t v5 = v6;
  uint64_t v43 = result;
  uint64_t v7 = 1 << *(unsigned char *)(result - 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v5;
  uint64_t v50 = v0 + 2;
  uint64_t v47 = &v58;
  uint64_t v49 = (long long *)&v63;
  int64_t v44 = (unint64_t)(v7 + 63) >> 6;
  int64_t v42 = v44 - 1;
  long long v46 = xmmword_100132F30;
  uint64_t v45 = v0;
  while (1)
  {
    if (v9)
    {
      unint64_t v22 = __clz(__rbit64(v9));
      uint64_t v23 = (v9 - 1) & v9;
      unint64_t v24 = v22 | (v4 << 6);
      goto LABEL_9;
    }
    int64_t v28 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v28 < v44)
    {
      unint64_t v29 = *(void *)(v43 + 8 * v28);
      if (v29) {
        goto LABEL_13;
      }
      v4 += 2;
      if (v28 + 1 >= v44)
      {
        int64_t v4 = v28;
        goto LABEL_18;
      }
      unint64_t v29 = *(void *)(v43 + 8 * v4);
      if (v29)
      {
        ++v28;
        goto LABEL_13;
      }
      if (v28 + 2 < v44) {
        break;
      }
    }
LABEL_18:
    uint64_t v23 = 0;
    uint64_t v60 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
LABEL_19:
    sub_100029900((uint64_t)&v57, (uint64_t)&v61, &qword_10017F180);
    uint64_t v30 = v62;
    if (!v62) {
      return swift_release();
    }
    unint64_t v52 = v23;
    int64_t v64 = v4;
    uint64_t v51 = v61;
    sub_10000372C(v49, (uint64_t)&v57);
    uint64_t v31 = v2[5];
    uint64_t v32 = v2[6];
    sub_1000036B0(v50, v31);
    sub_1000B07CC(v31, v32);
    uint64_t v33 = v2;
    uint64_t v34 = v55[4];
    sub_1000036B0(v55, v55[3]);
    uint64_t v36 = *((void *)&v58 + 1);
    uint64_t v35 = v59;
    sub_1000036B0(&v57, *((uint64_t *)&v58 + 1));
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v36, v35);
    (*(void (**)(long long *__return_ptr, uint64_t))(v34 + 16))(&v53, v37);
    swift_bridgeObjectRelease();
    if (v54)
    {
      sub_10000372C(&v53, (uint64_t)v56);
      uint64_t v38 = sub_10000478C((uint64_t)v55);
      uint64_t v39 = (*(uint64_t (**)(uint64_t))(*v33 + 144))(v38);
      __chkstk_darwin(v39);
      v41[2] = v33;
      void v41[3] = v56;
      type metadata accessor for RealizedInfo(0);
      sub_100004A40((void (*)(uint64_t))sub_1000C91E8, (uint64_t)v41, v39);
      uint64_t v2 = v33;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      sub_10000478C((uint64_t)v56);
      int64_t v4 = v64;
      unint64_t v9 = v52;
    }
    else
    {
      sub_1000130EC((uint64_t)&v53, &qword_10017BC78);
      sub_10000478C((uint64_t)v55);
      strcpy((char *)v56, "No bundle at ");
      HIWORD(v56[1]) = -4864;
      uint64_t v10 = *((void *)&v58 + 1);
      uint64_t v11 = v59;
      sub_1000036B0(&v57, *((uint64_t *)&v58 + 1));
      v12._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      uint64_t v13 = v56[0];
      uint64_t v14 = v56[1];
      sub_100012E3C();
      uint64_t v15 = swift_allocError();
      *(void *)uint64_t v16 = v13;
      *(void *)(v16 + 8) = v14;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(void *)(v16 + 64) = 0;
      *(unsigned char *)(v16 + 72) = 10;
      swift_willThrow();
      int64_t v4 = v64;
      unint64_t v9 = v52;
      static os_log_type_t.error.getter();
      sub_100004700((uint64_t *)&unk_10017D6E0);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = v46;
      *(void *)(v17 + 56) = &type metadata for String;
      unint64_t v18 = sub_10002A1DC();
      *(void *)(v17 + 64) = v18;
      *(void *)(v17 + 32) = v51;
      *(void *)(v17 + 40) = v30;
      v56[0] = v15;
      swift_errorRetain();
      sub_100004700(&qword_10017EB50);
      uint64_t v19 = String.init<A>(describing:)();
      *(void *)(v17 + 96) = &type metadata for String;
      *(void *)(v17 + 104) = v18;
      *(void *)(v17 + 72) = v19;
      *(void *)(v17 + 80) = v20;
      sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
      uint64_t v21 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();

      swift_errorRelease();
      uint64_t v2 = v45;
    }
    uint64_t result = sub_10000478C((uint64_t)&v57);
  }
  unint64_t v29 = *(void *)(v43 + 8 * (v28 + 2));
  if (v29)
  {
    v28 += 2;
    goto LABEL_13;
  }
  int64_t v40 = v28 + 3;
  if (v28 + 3 >= v44)
  {
    int64_t v4 = v28 + 2;
    goto LABEL_18;
  }
  unint64_t v29 = *(void *)(v43 + 8 * v40);
  if (v29)
  {
    v28 += 3;
LABEL_13:
    uint64_t v23 = (v29 - 1) & v29;
    unint64_t v24 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v4 = v28;
LABEL_9:
    uint64_t v25 = *(void *)(v48 + 56);
    char v26 = (void *)(*(void *)(v48 + 48) + 16 * v24);
    uint64_t v27 = v26[1];
    *(void *)&long long v57 = *v26;
    *((void *)&v57 + 1) = v27;
    sub_10000469C(v25 + 40 * v24, (uint64_t)v47);
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v28 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v28 >= v44)
    {
      int64_t v4 = v42;
      goto LABEL_18;
    }
    unint64_t v29 = *(void *)(v43 + 8 * v28);
    ++v40;
    if (v29) {
      goto LABEL_13;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000C0D68@<X0>(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  char v11 = sub_10002A278();
  char v12 = sub_10002A278();
  id v13 = sub_1000B3024(a2, (uint64_t)v9, v11 & 1, v12 & 1, a1);
  uint64_t result = sub_1000130EC((uint64_t)v9, (uint64_t *)&unk_10017FA60);
  if (!v3) {
    *a3 = v13;
  }
  return result;
}

uint64_t sub_1000C0E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v36 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004700(&qword_10017F188);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v40;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 376))(a1, a2);
  if (!v15)
  {
    uint64_t v31 = v14;
    uint64_t v35 = v7;
    uint64_t v17 = *(void *)(result + 16);
    if (v17)
    {
      uint64_t v34 = v5;
      uint64_t v18 = *(int *)(v11 + 48);
      uint64_t v19 = (uint64_t)v31;
      uint64_t v39 = (long long *)&v31[v18];
      uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 144);
      uint64_t v37 = *(void *)v2 + 144;
      uint64_t v38 = v20;
      unint64_t v21 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v26[1] = result;
      uint64_t v22 = result + v21;
      uint64_t v32 = v36 + 8;
      uint64_t v28 = v36 + 48;
      uint64_t v36 = *(void *)(v12 + 72);
      long long v30 = xmmword_100132F30;
      long long v27 = xmmword_100132F10;
      uint64_t v29 = v2;
      uint64_t v33 = v10;
      do
      {
        uint64_t v40 = v17;
        sub_10001BA68(v22, v19, &qword_10017F188);
        sub_100029900(v19, (uint64_t)v10, (uint64_t *)&unk_10017FA60);
        uint64_t v23 = sub_10000372C(v39, (uint64_t)v41);
        uint64_t v24 = v38(v23);
        __chkstk_darwin(v24);
        v26[-4] = v2;
        v26[-3] = v41;
        uint64_t v25 = v10;
        type metadata accessor for RealizedInfo(0);
        sub_100004A40((void (*)(uint64_t))sub_1000C9204, (uint64_t)&v26[-6], v24);
        swift_release();
        swift_release();
        sub_1000130EC((uint64_t)v10, (uint64_t *)&unk_10017FA60);
        sub_10000478C((uint64_t)v41);
        v22 += v36;
        uint64_t v17 = v40 - 1;
      }
      while (v40 != 1);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000C170C()
{
  uint64_t v76 = type metadata accessor for OSSignpostError();
  uint64_t v78 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v77 = (char *)&v62 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v62 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v62 - v10;
  uint64_t v12 = type metadata accessor for OSSignposter();
  uint64_t v13 = __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v62 - v16;
  int v18 = *(_DWORD *)(v0 + 640);
  if (qword_100188700 != -1)
  {
    uint64_t v71 = v15;
    uint64_t v80 = v14;
    swift_once();
    uint64_t v15 = v71;
    uint64_t v14 = v80;
  }
  if ((dword_100199798 & ~v18) == 0)
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v19 = 0xD000000000000096;
    *(void *)(v19 + 8) = 0x800000010014CD10;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    *(_OWORD *)(v19 + 48) = 0u;
    *(void *)(v19 + 64) = 0;
    *(unsigned char *)(v19 + 72) = 50;
    return swift_willThrow();
  }
  uint64_t v71 = v15;
  uint64_t v73 = v9;
  uint64_t v21 = v3;
  uint64_t v79 = v2;
  uint64_t v75 = v0;
  uint64_t v22 = v14;
  uint64_t v23 = sub_1000F01A8();
  uint64_t v80 = v22;
  uint64_t v24 = *(NSObject **)(v22 + 16);
  uint64_t v67 = v23;
  uint64_t v68 = v22 + 16;
  uint64_t v66 = v24;
  ((void (*)(char *))v24)(v17);
  uint64_t v25 = sub_1000A22DC();
  char v26 = *v25;
  uint64_t v65 = v25;
  char v27 = *((unsigned char *)v25 + 16);
  static OSSignpostID.exclusive.getter();
  uint64_t v28 = OSSignposter.logHandle.getter();
  LODWORD(v70) = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  uint64_t v69 = v6;
  uint64_t v74 = v12;
  if ((result & 1) == 0) {
    goto LABEL_9;
  }
  if (v27)
  {
    if ((unint64_t)v26 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v26 >> 11 == 27)
      {
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      if (v26 >> 16 <= 0x10)
      {
        char v26 = &v82;
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_33;
  }
  if (!v26)
  {
    __break(1u);
LABEL_9:

    uint64_t v29 = v21;
    long long v30 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    unint64_t v72 = (v21 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v31 = v79;
    uint64_t v32 = v73;
    goto LABEL_15;
  }
LABEL_14:
  long long v30 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  unint64_t v72 = (v21 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v33 = v73;
  uint64_t v31 = v79;
  v30(v73, v11, v79);
  uint64_t v34 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v34 = 0;
  os_signpost_id_t v35 = OSSignpostID.rawValue.getter();
  uint64_t v36 = v26;
  uint64_t v29 = v21;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, (os_signpost_type_t)v70, v35, v36, "", v34, 2u);
  swift_slowDealloc();

  uint64_t v32 = v33;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v31);
LABEL_15:
  uint64_t v70 = v30;
  v30(v32, v11, v31);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v37 = v29 + 8;
  uint64_t v38 = v39;
  v39(v11, v31);
  uint64_t v40 = v80 + 8;
  uint64_t v41 = v17;
  int64_t v42 = *(void (**)(char *, uint64_t))(v80 + 8);
  uint64_t v43 = v74;
  v42(v41, v74);
  uint64_t v44 = v75;
  uint64_t v45 = v81;
  (*(void (**)(void, uint64_t))(*(void *)v75 + 392))(0, 3);
  if (v45) {
    return swift_release();
  }
  uint64_t v63 = (void (*)(uint64_t, uint64_t))v42;
  int64_t v64 = v38;
  uint64_t v80 = v40;
  uint64_t v46 = v71;
  ((void (*)(uint64_t, uint64_t, uint64_t))v66)(v71, v67, v43);
  uint64_t v81 = *v65;
  LODWORD(v68) = *((unsigned __int8 *)v65 + 16);
  uint64_t v47 = OSSignposter.logHandle.getter();
  uint64_t v48 = v69;
  uint64_t v49 = v47;
  OSSignpostIntervalState.signpostID.getter();
  LODWORD(v67) = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {

    v64(v48, v79);
    v63(v46, v43);
LABEL_29:
    (*(void (**)(uint64_t))(*(void *)v44 + 272))(1);
    return swift_release();
  }
  uint64_t v66 = v49;
  uint64_t v50 = v64;
  if ((v68 & 1) == 0)
  {
    unint64_t v52 = v77;
    uint64_t v51 = v78;
    long long v53 = v70;
    if (v81)
    {
      uint64_t v54 = v76;
LABEL_25:
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      int v55 = (*(uint64_t (**)(char *, uint64_t))(v51 + 88))(v52, v54);
      uint64_t v62 = v37;
      if (v55 == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v56 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v54);
        uint64_t v56 = "";
      }
      long long v57 = v73;
      uint64_t v58 = v79;
      v53(v73, v48, v79);
      long long v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v59 = 0;
      os_signpost_id_t v60 = OSSignpostID.rawValue.getter();
      os_log_t v61 = v66;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v66, (os_signpost_type_t)v67, v60, v81, v56, v59, 2u);
      swift_slowDealloc();

      v50(v48, v58);
      v63(v71, v74);
      v50(v57, v58);
      uint64_t v44 = v75;
      goto LABEL_29;
    }
    goto LABEL_34;
  }
  unint64_t v52 = v77;
  uint64_t v51 = v78;
  long long v53 = v70;
  if ((unint64_t)v81 >> 32)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v54 = v76;
  if (v81 >> 11 != 27)
  {
    if (v81 >> 16 <= 0x10)
    {
      uint64_t v81 = &v83;
      goto LABEL_25;
    }
    goto LABEL_36;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000C1EE4()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 264))();
  if ((result & 1) == 0) {
    return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
  }
  return result;
}

uint64_t sub_1000C1F6C()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v90 = type metadata accessor for OSSignpostError();
  uint64_t v92 = *(const char **)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v91 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for OSSignpostID();
  uint64_t v99 = *(void *)(v98 - 8);
  uint64_t v5 = __chkstk_darwin(v98);
  uint64_t v95 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v97 = (char *)&v85 - v8;
  __chkstk_darwin(v7);
  uint64_t v96 = (char *)&v85 - v9;
  uint64_t v101 = type metadata accessor for OSSignposter();
  uint64_t v103 = *(NSObject **)(v101 - 8);
  uint64_t v10 = __chkstk_darwin(v101);
  Swift::String v94 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v100 = (char *)&v85 - v12;
  static os_log_type_t.info.getter();
  sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
  uint64_t v13 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  uint64_t v14 = (uint64_t)v3[25];
  unint64_t v15 = (unint64_t)v3[26];
  uint64_t v16 = (uint64_t *)sub_10002A5C0();
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_1000EE3FC(v17, v18);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  uint64_t v109 = v14;
  unint64_t v110 = v15;
  swift_bridgeObjectRetain();
  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  uint64_t v23 = v109;
  unint64_t v24 = v110;
  uint64_t v25 = (uint64_t)v3[5];
  uint64_t v26 = (uint64_t)v3[6];
  sub_1000036B0(v3 + 2, v25);
  sub_1000B07CC(v25, v26);
  uint64_t v28 = v107;
  uint64_t v27 = v108;
  sub_1000036B0(v106, v107);
  (*(void (**)(long long *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v27 + 16))(&v104, v23, v24, v28, v27);
  swift_bridgeObjectRelease();
  if (v105)
  {
    sub_10000372C(&v104, (uint64_t)&v109);
    uint64_t v29 = sub_10000478C((uint64_t)v106);
    uint64_t v30 = (*((uint64_t (**)(uint64_t))*v3 + 18))(v29);
    __chkstk_darwin(v30);
    *(&v85 - 2) = v3;
    *(&v85 - 1) = (char **)&v109;
    type metadata accessor for RealizedInfo(0);
    sub_100004A40((void (*)(uint64_t))sub_1000C9280, (uint64_t)(&v85 - 4), v30);
    if (v2)
    {
      sub_10000478C((uint64_t)&v109);
      return swift_release();
    }
    uint64_t v102 = 0;
    swift_release();
    swift_release();
    sub_10000478C((uint64_t)&v109);
  }
  else
  {
    uint64_t v102 = v2;
    sub_1000130EC((uint64_t)&v104, &qword_10017BC78);
    sub_10000478C((uint64_t)v106);
    sub_100004700(&qword_10017F148);
    uint64_t v32 = swift_allocObject();
    long long v89 = xmmword_100132F10;
    *(_OWORD *)(v32 + 16) = xmmword_100132F10;
    uint64_t v109 = 0;
    unint64_t v110 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    uint64_t v109 = 0x3A676E696E726157;
    unint64_t v110 = 0xE900000000000020;
    uint64_t v33 = (uint64_t *)sub_10002A5B4();
    uint64_t v35 = *v33;
    uint64_t v34 = (void *)v33[1];
    swift_bridgeObjectRetain();
    v36._uint64_t countAndFlagsBits = v35;
    v36._object = v34;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 0x746F6E2073617720;
    v37._object = (void *)0xEF21646E756F6620;
    String.append(_:)(v37);
    uint64_t v38 = v109;
    unint64_t v39 = v110;
    *(void *)(v32 + 56) = &type metadata for String;
    *(void *)(v32 + 32) = v38;
    *(void *)(v32 + 40) = v39;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = v89;
    uint64_t v42 = *v33;
    uint64_t v41 = v33[1];
    *(void *)(v40 + 56) = &type metadata for String;
    *(void *)(v40 + 64) = sub_10002A1DC();
    *(void *)(v40 + 32) = v42;
    *(void *)(v40 + 40) = v41;
    swift_bridgeObjectRetain();
    uint64_t v43 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v44 = sub_1000F01A8();
  uint64_t v45 = v103 + 2;
  Class isa = (void (*)(char *, uint64_t, uint64_t))v103[2].isa;
  isa(v100, v44, v101);
  uint64_t v47 = sub_1000A22C4();
  uint64_t v48 = *v47;
  unint64_t v85 = v47;
  char v49 = *((unsigned char *)v47 + 16);
  uint64_t v50 = v96;
  static OSSignpostID.exclusive.getter();
  uint64_t v51 = OSSignposter.logHandle.getter();
  LODWORD(v89) = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  os_log_t v88 = v45;
  uint64_t v87 = v44;
  unint64_t v86 = isa;
  Swift::String v93 = v3;
  if ((result & 1) == 0) {
    goto LABEL_10;
  }
  if (v49)
  {
    if ((unint64_t)v48 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v48 >> 11 == 27)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      if (v48 >> 16 <= 0x10)
      {
        uint64_t v48 = &v111;
        goto LABEL_15;
      }
    }
    __break(1u);
    goto LABEL_33;
  }
  if (!v48)
  {
    __break(1u);
LABEL_10:

    uint64_t v52 = v99;
    long long v53 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
    uint64_t v54 = v98;
    v53(v97, v50, v98);
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v55 = v99;
  uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
  long long v57 = v97;
  uint64_t v54 = v98;
  v56(v97, v50, v98);
  uint64_t v58 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v58 = 0;
  os_signpost_id_t v59 = OSSignpostID.rawValue.getter();
  os_signpost_id_t v60 = v48;
  uint64_t v52 = v55;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v51, (os_signpost_type_t)v89, v59, v60, "", v58, 2u);
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
  long long v53 = v56;
  v56(v57, v50, v54);
LABEL_16:
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v63 = *(char **)(v52 + 8);
  uint64_t v61 = v52 + 8;
  uint64_t v62 = v63;
  ((void (*)(char *, uint64_t))v63)(v50, v54);
  int64_t v64 = v103 + 1;
  uint64_t v65 = (void (*)(char *, uint64_t))v103[1].isa;
  uint64_t v66 = v101;
  v65(v100, v101);
  uint64_t v67 = v102;
  (*((void (**)(void, uint64_t))*v93 + 49))(0, 3);
  uint64_t v102 = v67;
  if (v67) {
    return swift_release();
  }
  uint64_t v96 = (char *)v65;
  uint64_t v100 = v62;
  *(void *)&long long v89 = v53;
  uint64_t v103 = v64;
  uint64_t v99 = v61;
  uint64_t v68 = v94;
  v86(v94, v87, v66);
  uint64_t v69 = *v85;
  uint64_t v70 = v66;
  char v71 = *((unsigned char *)v85 + 16);
  unint64_t v72 = OSSignposter.logHandle.getter();
  uint64_t v73 = v95;
  OSSignpostIntervalState.signpostID.getter();
  LODWORD(v93) = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {

    ((void (*)(char *, uint64_t))v100)(v73, v98);
    ((void (*)(char *, uint64_t))v96)(v68, v70);
    return swift_release();
  }
  os_log_t v88 = v72;
  uint64_t v74 = (void (*)(char *, uint64_t))v100;
  if (v71)
  {
    uint64_t v75 = v92;
    uint64_t v76 = v91;
    if (!((unint64_t)v69 >> 32))
    {
      uint64_t v77 = v90;
      if (v69 >> 11 == 27)
      {
LABEL_37:
        __break(1u);
        return result;
      }
      if (v69 >> 16 <= 0x10)
      {
        uint64_t v69 = &v112;
        goto LABEL_27;
      }
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v75 = v92;
  uint64_t v76 = v91;
  if (!v69)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v77 = v90;
LABEL_27:
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  if ((*((unsigned int (**)(char *, uint64_t))v75 + 11))(v76, v77) == enum case for OSSignpostError.doubleEnd(_:))
  {
    uint64_t v78 = "[Error] Interval already ended";
  }
  else
  {
    (*((void (**)(char *, uint64_t))v75 + 1))(v76, v77);
    uint64_t v78 = "";
  }
  uint64_t v92 = v78;
  uint64_t v79 = v97;
  uint64_t v80 = v73;
  uint64_t v81 = v98;
  ((void (*)(char *, char *, uint64_t))v89)(v97, v80, v98);
  char v82 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)char v82 = 0;
  os_signpost_id_t v83 = OSSignpostID.rawValue.getter();
  os_log_t v84 = v88;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v88, (os_signpost_type_t)v93, v83, v69, v92, v82, 2u);
  swift_slowDealloc();

  v74(v95, v81);
  ((void (*)(char *, uint64_t))v96)(v68, v101);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v74)(v79, v81);
}

uint64_t sub_1000C2AA4@<X0>(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  char v11 = sub_10002A278();
  id v12 = sub_1000B3024(a2, (uint64_t)v9, 1, v11 & 1, a1);
  uint64_t result = sub_1000130EC((uint64_t)v9, (uint64_t *)&unk_10017FA60);
  if (!v3) {
    *a3 = v12;
  }
  return result;
}

uint64_t sub_1000C2BC0(char a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v143 = type metadata accessor for UUID();
  uint64_t v144 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v8 = (char *)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004700(&qword_10017CBF0);
  __chkstk_darwin(v9);
  uint64_t v145 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004700(&qword_10017C918);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v132 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v132 - v19;
  switch(a1)
  {
    case 1:
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*v4 + 328))(v18);
      if (!v3) {
        goto LABEL_13;
      }
      if ((v4[20] != 0x34365F363878 || v4[21] != 0xE600000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        static os_log_type_t.error.getter();
        sub_100004700((uint64_t *)&unk_10017D6E0);
        uint64_t v64 = swift_allocObject();
        *(_OWORD *)(v64 + 16) = xmmword_100132F10;
        unint64_t v65 = sub_1000F11D0(1);
        uint64_t v67 = v66;
        *(void *)(v64 + 56) = &type metadata for String;
        *(void *)(v64 + 64) = sub_10002A1DC();
        *(void *)(v64 + 32) = v65;
        *(void *)(v64 + 40) = v67;
        sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
        unint64_t v24 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
      unint64_t v153 = 0;
      unint64_t v154 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      LOBYTE(v150[0]) = 1;
      sub_100059970();
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
      unint64_t v153 = v32;
      unint64_t v154 = v34;
      v35._object = (void *)0x800000010014D070;
      v35._uint64_t countAndFlagsBits = 0xD000000000000017;
      String.append(_:)(v35);
      unint64_t v36 = v153;
      unint64_t v37 = v154;
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v38 = v36;
      *(void *)(v38 + 8) = v37;
      *(_OWORD *)(v38 + 16) = 0u;
      *(_OWORD *)(v38 + 32) = 0u;
      *(_OWORD *)(v38 + 48) = 0u;
      *(void *)(v38 + 64) = 0;
      *(unsigned char *)(v38 + 72) = 10;
      swift_willThrow();
      return swift_errorRelease();
    case 2:
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*v4 + 336))(v18);
      if (!v3)
      {
LABEL_13:
        uint64_t v22 = v23;
        uint64_t v139 = v17;
        unint64_t v138 = v20;
        uint64_t v140 = v3;
        goto LABEL_14;
      }
      static os_log_type_t.error.getter();
      sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
      unint64_t v24 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
LABEL_6:

      return swift_errorRelease();
    case 3:
      unint64_t v153 = 0;
      unint64_t v154 = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      unint64_t v25 = sub_1000F11D0(3);
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      unint64_t v153 = v25;
      unint64_t v154 = v27;
      v28._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      v28._object = (void *)0x800000010014CDD0;
      String.append(_:)(v28);
      unint64_t v29 = v153;
      unint64_t v30 = v154;
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v31 = v29;
      *(void *)(v31 + 8) = v30;
      *(_OWORD *)(v31 + 16) = 0u;
      *(_OWORD *)(v31 + 32) = 0u;
      *(_OWORD *)(v31 + 48) = 0u;
      *(void *)(v31 + 64) = 0;
      *(unsigned char *)(v31 + 72) = 9;
      return swift_willThrow();
    default:
      uint64_t v139 = v17;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*v4 + 320))(v18);
      if (v3) {
        return result;
      }
      uint64_t v22 = result;
      unint64_t v138 = v20;
      uint64_t v140 = 0;
LABEL_14:
      sub_10000469C(v22 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data, (uint64_t)&v157);
      swift_release();
      char v146 = 0;
      uint64_t v39 = v4[5];
      uint64_t v40 = v4[6];
      uint64_t v141 = v4 + 2;
      sub_1000036B0(v4 + 2, v39);
      sub_1001297F4(v39, v40);
      uint64_t v41 = v156;
      sub_1000036B0(&v153, v155);
      uint64_t v142 = a2;
      uint64_t v42 = URL.path.getter();
      LOBYTE(v39) = (*(uint64_t (**)(uint64_t))(v41 + 136))(v42);
      swift_bridgeObjectRelease();
      sub_10000478C((uint64_t)&v153);
      if (v39)
      {
        if (v146)
        {
          uint64_t v43 = v140;
          uint64_t v44 = v142;
          uint64_t v45 = v141;
LABEL_27:
          uint64_t v85 = v4[5];
          uint64_t v86 = v4[6];
          sub_1000036B0(v45, v85);
          sub_1001297F4(v85, v86);
          uint64_t v87 = v155;
          uint64_t v88 = v156;
          sub_1000036B0(&v153, v155);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 104))(v44, v87, v88);
          if (v43)
          {
LABEL_31:
            sub_10000478C((uint64_t)&v157);
            uint64_t v109 = &v153;
            return sub_10000478C((uint64_t)v109);
          }
          sub_10000478C((uint64_t)&v153);
          goto LABEL_29;
        }
        uint64_t v137 = sub_100004700((uint64_t *)&unk_10017D6E0);
        uint64_t v46 = swift_allocObject();
        long long v136 = xmmword_100132F10;
        *(_OWORD *)(v46 + 16) = xmmword_100132F10;
        uint64_t v47 = URL.path.getter();
        uint64_t v49 = v48;
        *(void *)(v46 + 56) = &type metadata for String;
        unint64_t v135 = sub_10002A1DC();
        *(void *)(v46 + 64) = v135;
        *(void *)(v46 + 32) = v47;
        *(void *)(v46 + 40) = v49;
        uint64_t v134 = sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
        uint64_t v50 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        uint64_t v51 = v4[5];
        uint64_t v52 = v4[6];
        sub_1000036B0(v141, v51);
        sub_1001297F4(v51, v52);
        uint64_t v53 = v152;
        sub_1000036B0(v150, v151);
        uint64_t v54 = URL.path.getter();
        (*(void (**)(long long *__return_ptr, uint64_t))(v53 + 112))(&v148, v54);
        swift_bridgeObjectRelease();
        if (!v149)
        {
          sub_1000130EC((uint64_t)&v148, &qword_10017C930);
          sub_10000478C((uint64_t)v150);
          unint64_t v153 = 0;
          unint64_t v154 = 0xE000000000000000;
          _StringGuts.grow(_:)(40);
          swift_bridgeObjectRelease();
          unint64_t v153 = 0xD000000000000026;
          unint64_t v154 = 0x800000010014CEB0;
          type metadata accessor for URL();
          sub_1000CB938(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
          v68._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v68);
          swift_bridgeObjectRelease();
          unint64_t v69 = v153;
          unint64_t v70 = v154;
          sub_100012E3C();
          swift_allocError();
          *(void *)uint64_t v71 = v69;
          *(void *)(v71 + 8) = v70;
          *(_OWORD *)(v71 + 16) = 0u;
          *(_OWORD *)(v71 + 32) = 0u;
          *(_OWORD *)(v71 + 48) = 0u;
          *(void *)(v71 + 64) = 0;
          char v72 = 58;
          goto LABEL_33;
        }
        sub_10000372C(&v148, (uint64_t)&v153);
        sub_10000478C((uint64_t)v150);
        uint64_t v55 = v4[5];
        uint64_t v56 = v4[6];
        sub_1000036B0(v141, v55);
        sub_10007F4B4(v55, v56);
        uint64_t v57 = v151;
        uint64_t v58 = v152;
        sub_1000036B0(v150, v151);
        uint64_t v132 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 184))(v57, v58);
        uint64_t v60 = v59;
        uint64_t v133 = v61;
        sub_10000478C((uint64_t)v150);
        uint64_t v44 = v142;
        if (v60 == 1)
        {
          sub_100012E3C();
          uint64_t v62 = swift_allocError();
          *(void *)uint64_t v63 = 0xD000000000000027;
          *(void *)(v63 + 8) = 0x800000010014CEE0;
          *(_OWORD *)(v63 + 16) = 0u;
          *(_OWORD *)(v63 + 32) = 0u;
          *(_OWORD *)(v63 + 48) = 0u;
          *(void *)(v63 + 64) = 0;
          *(unsigned char *)(v63 + 72) = 16;
          swift_willThrow();
          uint64_t v43 = 0;
LABEL_25:
          static os_log_type_t.error.getter();
          uint64_t v76 = swift_allocObject();
          *(_OWORD *)(v76 + 16) = v136;
          v150[0] = v62;
          swift_errorRetain();
          sub_100004700(&qword_10017EB50);
          uint64_t v77 = String.init<A>(describing:)();
          unint64_t v78 = v135;
          *(void *)(v76 + 56) = &type metadata for String;
          *(void *)(v76 + 64) = v78;
          *(void *)(v76 + 32) = v77;
          *(void *)(v76 + 40) = v79;
          uint64_t v80 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();

          swift_errorRelease();
          uint64_t v45 = v141;
LABEL_26:
          uint64_t v81 = swift_allocObject();
          *(_OWORD *)(v81 + 16) = v136;
          uint64_t v82 = URL.path.getter();
          *(void *)(v81 + 56) = &type metadata for String;
          *(void *)(v81 + 64) = v78;
          *(void *)(v81 + 32) = v82;
          *(void *)(v81 + 40) = v83;
          os_log_t v84 = (void *)static OS_os_log.default.getter();
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();
          swift_bridgeObjectRelease();

          sub_10000478C((uint64_t)&v153);
          goto LABEL_27;
        }
        uint64_t v73 = v155;
        uint64_t v74 = v156;
        sub_1000036B0(&v153, v155);
        uint64_t v75 = v140;
        sub_100100F48(v132, v60, v133, v73, v74, (uint64_t)v138);
        if (v75)
        {
          sub_1000805AC(v132, v60);
          uint64_t v43 = 0;
          uint64_t v62 = v75;
          goto LABEL_25;
        }
        uint64_t v113 = v158;
        uint64_t v114 = v159;
        sub_1000036B0(&v157, v158);
        sub_100100F48(v132, v60, v133, v113, v114, (uint64_t)v139);
        uint64_t v43 = 0;
        sub_1000805AC(v132, v60);
        uint64_t v115 = *(int *)(v9 + 48);
        uint64_t v116 = v145;
        uint64_t v117 = v145 + v115;
        sub_10001BA68((uint64_t)v138, v145, &qword_10017C918);
        uint64_t v140 = v117;
        sub_10001BA68((uint64_t)v139, v117, &qword_10017C918);
        unint64_t v118 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
        uint64_t v119 = v143;
        if (v118(v116, 1, v143) == 1)
        {
          if (v118(v140, 1, v119) == 1)
          {
            sub_1000130EC(v145, &qword_10017C918);
LABEL_44:
            uint64_t v127 = swift_allocObject();
            *(_OWORD *)(v127 + 16) = v136;
            uint64_t v128 = URL.path.getter();
            unint64_t v129 = v135;
            *(void *)(v127 + 56) = &type metadata for String;
            *(void *)(v127 + 64) = v129;
            *(void *)(v127 + 32) = v128;
            *(void *)(v127 + 40) = v130;
            uint64_t v131 = (void *)static OS_os_log.default.getter();
            static os_log_type_t.default.getter();
            os_log(_:dso:log:type:_:)();
            swift_bridgeObjectRelease();

            sub_1000130EC((uint64_t)v139, &qword_10017C918);
            sub_1000130EC((uint64_t)v138, &qword_10017C918);
            goto LABEL_31;
          }
        }
        else
        {
          sub_10001BA68(v116, (uint64_t)v14, &qword_10017C918);
          if (v118(v140, 1, v119) != 1)
          {
            uint64_t v125 = v144;
            (*(void (**)(char *, uint64_t, uint64_t))(v144 + 32))(v8, v140, v119);
            sub_1000CB938(&qword_10017CBF8, (void (*)(uint64_t))&type metadata accessor for UUID);
            LODWORD(v140) = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v126 = *(void (**)(char *, uint64_t))(v125 + 8);
            v126(v8, v119);
            v126(v14, v119);
            sub_1000130EC(v116, &qword_10017C918);
            uint64_t v45 = v141;
            if (v140) {
              goto LABEL_44;
            }
LABEL_42:
            uint64_t v120 = swift_allocObject();
            *(_OWORD *)(v120 + 16) = v136;
            uint64_t v121 = URL.path.getter();
            unint64_t v122 = v135;
            *(void *)(v120 + 56) = &type metadata for String;
            *(void *)(v120 + 64) = v122;
            *(void *)(v120 + 32) = v121;
            *(void *)(v120 + 40) = v123;
            uint64_t v124 = (void *)static OS_os_log.default.getter();
            static os_log_type_t.default.getter();
            os_log(_:dso:log:type:_:)();
            swift_bridgeObjectRelease();

            sub_1000130EC((uint64_t)v139, &qword_10017C918);
            unint64_t v78 = v122;
            sub_1000130EC((uint64_t)v138, &qword_10017C918);
            goto LABEL_26;
          }
          (*(void (**)(char *, uint64_t))(v144 + 8))(v14, v119);
        }
        sub_1000130EC(v145, &qword_10017CBF0);
        uint64_t v45 = v141;
        goto LABEL_42;
      }
      uint64_t v45 = v141;
LABEL_29:
      uint64_t v89 = v4[5];
      uint64_t v90 = v4[6];
      sub_1000036B0(v45, v89);
      sub_1001297F4(v89, v90);
      uint64_t v91 = v156;
      sub_1000036B0(&v153, v155);
      uint64_t v92 = URL.path.getter();
      (*(void (**)(uint64_t))(v91 + 40))(v92);
      swift_bridgeObjectRelease();
      sub_10000478C((uint64_t)&v153);
      uint64_t v93 = v4[5];
      uint64_t v94 = v4[6];
      sub_1000036B0(v45, v93);
      sub_1001297F4(v93, v94);
      uint64_t v95 = v152;
      sub_1000036B0(v150, v151);
      uint64_t v96 = URL.path.getter();
      (*(void (**)(long long *__return_ptr, uint64_t))(v95 + 168))(&v148, v96);
      swift_bridgeObjectRelease();
      if (v149)
      {
        sub_10000372C(&v148, (uint64_t)&v153);
        sub_10000478C((uint64_t)v150);
        uint64_t v97 = v155;
        uint64_t v98 = v156;
        sub_1000036B0(&v153, v155);
        sub_10000469C((uint64_t)&v157, (uint64_t)v150);
        sub_100004700(&qword_10017F190);
        swift_dynamicCast();
        long long v99 = v148;
        long long v147 = v148;
        uint64_t v100 = *(void (**)(long long *, void *, unint64_t, uint64_t, uint64_t))(v98 + 56);
        unint64_t v101 = sub_1000C929C();
        v100(&v147, &type metadata for Data, v101, v97, v98);
        sub_100012A10(v99, *((unint64_t *)&v99 + 1));
        uint64_t v102 = v155;
        uint64_t v103 = v156;
        sub_1000036B0(&v153, v155);
        (*(void (**)(uint64_t, uint64_t))(v103 + 64))(v102, v103);
        sub_100004700((uint64_t *)&unk_10017D6E0);
        uint64_t v104 = swift_allocObject();
        *(_OWORD *)(v104 + 16) = xmmword_100132F10;
        uint64_t v105 = URL.path.getter();
        uint64_t v107 = v106;
        *(void *)(v104 + 56) = &type metadata for String;
        *(void *)(v104 + 64) = sub_10002A1DC();
        *(void *)(v104 + 32) = v105;
        *(void *)(v104 + 40) = v107;
        sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
        uint64_t v108 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        goto LABEL_31;
      }
      sub_1000130EC((uint64_t)&v148, &qword_10017F120);
      sub_10000478C((uint64_t)v150);
      unint64_t v153 = 0;
      unint64_t v154 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      unint64_t v153 = 0xD00000000000002BLL;
      unint64_t v154 = 0x800000010014CE10;
      v110._uint64_t countAndFlagsBits = URL.path.getter();
      String.append(_:)(v110);
      swift_bridgeObjectRelease();
      unint64_t v111 = v153;
      unint64_t v112 = v154;
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v71 = v111;
      *(void *)(v71 + 8) = v112;
      *(_OWORD *)(v71 + 16) = 0u;
      *(_OWORD *)(v71 + 32) = 0u;
      *(_OWORD *)(v71 + 48) = 0u;
      *(void *)(v71 + 64) = 0;
      char v72 = 19;
LABEL_33:
      *(unsigned char *)(v71 + 72) = v72;
      swift_willThrow();
      uint64_t v109 = (unint64_t *)&v157;
      return sub_10000478C((uint64_t)v109);
  }
}

uint64_t sub_1000C3FC8(uint64_t a1)
{
  uint64_t v29 = a1;
  uint64_t v33 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v33 - 8);
  uint64_t v3 = __chkstk_darwin(v33);
  uint64_t v31 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v32 = (char *)&v25 - v5;
  uint64_t v6 = sub_1000A23B8();
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 16);
  if (v9)
  {
    uint64_t v34 = v1;
    uint64_t v10 = v8 + 32;
    unint64_t v27 = (void (**)(char *, char *, uint64_t))(v2 + 32);
    Swift::String v28 = (void (**)(char *, uint64_t))(v2 + 8);
    swift_bridgeObjectRetain();
    int v36 = 0;
    unint64_t v11 = 0;
    uint64_t v26 = v9 - 1;
    long long v35 = xmmword_100132F10;
    while (2)
    {
      if (v11 >= *(void *)(v8 + 16))
      {
        __break(1u);
        JUMPOUT(0x1000C43B8);
      }
      uint64_t v18 = *(unsigned __int8 *)(v10 + v11);
      unint64_t v19 = v11 + 1;
      switch(*(unsigned char *)(v10 + v11))
      {
        case 1:
          static os_log_type_t.error.getter();
          sub_100004700((uint64_t *)&unk_10017D6E0);
          uint64_t v12 = swift_allocObject();
          *(_OWORD *)(v12 + 16) = v35;
          char v13 = 1;
          goto LABEL_4;
        case 2:
          uint64_t v20 = sub_1000A21E0();
          goto LABEL_10;
        case 3:
          static os_log_type_t.error.getter();
          sub_100004700((uint64_t *)&unk_10017D6E0);
          uint64_t v12 = swift_allocObject();
          *(_OWORD *)(v12 + 16) = v35;
          char v13 = 3;
LABEL_4:
          unint64_t v14 = sub_1000F11D0(v13);
          uint64_t v16 = v15;
          *(void *)(v12 + 56) = &type metadata for String;
          *(void *)(v12 + 64) = sub_10002A1DC();
          *(void *)(v12 + 32) = v14;
          *(void *)(v12 + 40) = v16;
          sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
          uint64_t v17 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();

          unint64_t v11 = v19;
          if (v9 != v19) {
            continue;
          }
          uint64_t result = swift_bridgeObjectRelease();
          if (v36) {
            goto LABEL_19;
          }
          return result;
        default:
          uint64_t v20 = sub_1000A21D4();
LABEL_10:
          uint64_t v21 = v20[1];
          swift_bridgeObjectRetain();
          if (v36) {
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRetain();
          URL.appendingPathComponent(_:)();
          swift_bridgeObjectRelease();
          if (v36) {
            (*v28)(v32, v33);
          }
          uint64_t v22 = v32;
          (*v27)(v32, v31, v33);
          uint64_t v23 = v34;
          (*(void (**)(uint64_t, char *))(*(void *)v30 + 424))(v18, v22);
          uint64_t v34 = v23;
          if (v23)
          {
            swift_bridgeObjectRelease();
            (*v28)(v32, v33);
            return swift_bridgeObjectRelease();
          }
          int v36 = 1;
          uint64_t v25 = v21;
          if (v26 != v11++) {
            continue;
          }
          swift_bridgeObjectRelease();
          uint64_t v25 = v21;
LABEL_19:
          (*v28)(v32, v33);
          uint64_t result = swift_bridgeObjectRelease();
          break;
      }
      break;
    }
  }
  return result;
}

BOOL sub_1000C43C8()
{
  int v1 = *(_DWORD *)(v0 + 640);
  if (qword_1001886F8 != -1) {
    swift_once();
  }
  int v2 = *(unsigned __int8 *)(v0 + 644);
  if (v2 == 2) {
    return 0;
  }
  BOOL v4 = (v2 & 1) == 0;
  return (dword_100199794 & ~v1) != 0 && v4;
}

void *sub_1000C4444()
{
  sub_10000478C((uint64_t)(v0 + 2));
  memcpy(v4, v0 + 7, 0x24DuLL);
  sub_10003E600(v4);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[84];
  swift_bridgeObjectRelease();
  sub_1000C8B34(v1);
  uint64_t v2 = v0[88];
  swift_bridgeObjectRelease();
  sub_1000C8B34(v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000C44E4()
{
  sub_1000C4444();

  return _swift_deallocClassInstance(v0, 737, 7);
}

uint64_t sub_1000C4518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    goto LABEL_13;
  }
  unint64_t v6 = v3[4];
  sub_10000483C(0, &qword_10017F128);
  if (sub_1000EF0B4()) {
    goto LABEL_13;
  }
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  unint64_t v27 = v3;
  if (v6 >> 62) {
    goto LABEL_43;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v7) {
    goto LABEL_5;
  }
  while (1)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    a2 = v26;
    uint64_t v3 = v27;
    a1 = v25;
LABEL_13:
    uint64_t v14 = v3[2];
    if (*(void *)(v14 + 16) && (sub_1000948F4(a1, a2, v14) & 1) != 0) {
      return 0;
    }
    if (*(void *)(*v3 + 16)) {
      return (sub_1000948F4(a1, a2, *v3) & 1) == 0;
    }
    uint64_t v16 = v3[1];
    if (*(void *)(v16 + 16))
    {
      char v17 = sub_1000948F4(a1, a2, v16);
      if (v17) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = 2;
      }
      if (!a3 || (v17 & 1) != 0) {
        return result;
      }
    }
    else if (!a3)
    {
      return 2;
    }
    unint64_t v18 = v3[3];
    sub_10000483C(0, &qword_10017F128);
    if (sub_1000EF0B4()) {
      return 2;
    }
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      if (!v19)
      {
LABEL_37:
        swift_bridgeObjectRelease();
        return 2;
      }
    }
    else
    {
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v19) {
        goto LABEL_37;
      }
    }
    unint64_t v6 = 4;
    while (1)
    {
      id v20 = (v18 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v18 + 8 * v6);
      uint64_t v21 = v20;
      unint64_t v22 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      unsigned int v24 = [v21 evaluateWithObject:isa];

      if (!v24) {
        goto LABEL_25;
      }
      ++v6;
      if (v22 == v19) {
        goto LABEL_37;
      }
    }
    while (1)
    {
      __break(1u);
LABEL_43:
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        break;
      }
LABEL_5:
      uint64_t v8 = 4;
      while (1)
      {
        id v9 = (v6 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v6 + 8 * v8);
        uint64_t v10 = v9;
        uint64_t v11 = v8 - 3;
        if (__OFADD__(v8 - 4, 1)) {
          break;
        }
        Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
        unsigned int v13 = [v10 evaluateWithObject:v12];

        if (!v13)
        {
LABEL_25:
          swift_bridgeObjectRelease();
          return 1;
        }
        ++v8;
        if (v11 == v7) {
          goto LABEL_12;
        }
      }
      __break(1u);
    }
  }
}

unint64_t sub_1000C4838()
{
  sub_100004700(&qword_10017F3F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001359B0;
  *(unsigned char *)(inited + 32) = 0;
  *(void *)(inited + 40) = swift_getKeyPath();
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 56) = swift_getKeyPath();
  *(unsigned char *)(inited + 64) = 2;
  *(void *)(inited + 72) = swift_getKeyPath();
  unint64_t result = sub_1000BA8C8(inited);
  qword_1001997A0 = result;
  return result;
}

uint64_t sub_1000C48D4()
{
  memcpy(v2, v0, sizeof(v2));
  return sub_1000BC964();
}

unint64_t sub_1000C4910(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(void))
{
  a2();
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_1000C4B98(a1, v6, a4);
}

unint64_t sub_1000C4994(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  sub_10001BA68(a1, (uint64_t)v8, (uint64_t *)&unk_10017FA60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    sub_1000CB938(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  Swift::Int v9 = Hasher._finalize()();
  return sub_1000C4C6C(a1, v9);
}

unint64_t sub_1000C4B98(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = ~v4;
    a3();
    do
    {
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v6;
    }
    while (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_1000C4C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v38 = a1;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v31 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100004700(&qword_10017D408);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004700((uint64_t *)&unk_10017FA60) - 8;
  uint64_t v12 = __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = v3 + 64;
  uint64_t v39 = v3;
  uint64_t v18 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v19 = a2 & ~v18;
  if ((*(void *)(v3 + 64 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
  {
    uint64_t v35 = v14;
    uint64_t v36 = ~v18;
    id v20 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v37 = *(void *)(v13 + 72);
    uint64_t v29 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    uint64_t v30 = v8;
    uint64_t v33 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v34 = v3 + 64;
    while (1)
    {
      sub_10001BA68(*(void *)(v39 + 48) + v37 * v19, (uint64_t)v16, (uint64_t *)&unk_10017FA60);
      uint64_t v21 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_10001BA68((uint64_t)v16, (uint64_t)v10, (uint64_t *)&unk_10017FA60);
      sub_10001BA68(v38, v21, (uint64_t *)&unk_10017FA60);
      unint64_t v22 = *v20;
      if ((*v20)(v10, 1, v5) == 1) {
        break;
      }
      uint64_t v23 = v35;
      sub_10001BA68((uint64_t)v10, v35, (uint64_t *)&unk_10017FA60);
      if (v22((char *)v21, 1, v5) == 1)
      {
        (*v33)(v23, v5);
        uint64_t v17 = v34;
LABEL_4:
        sub_1000130EC((uint64_t)v10, &qword_10017D408);
        sub_1000130EC((uint64_t)v16, (uint64_t *)&unk_10017FA60);
        goto LABEL_5;
      }
      unsigned int v24 = v31;
      (*v29)(v31, v21, v5);
      sub_1000CB938(&qword_10017BE98, (void (*)(uint64_t))&type metadata accessor for URL);
      int v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v25 = *v33;
      uint64_t v26 = v24;
      uint64_t v8 = v30;
      (*v33)((uint64_t)v26, v5);
      v25(v23, v5);
      sub_1000130EC((uint64_t)v10, (uint64_t *)&unk_10017FA60);
      sub_1000130EC((uint64_t)v16, (uint64_t *)&unk_10017FA60);
      uint64_t v17 = v34;
      if (v32) {
        return v19;
      }
LABEL_5:
      unint64_t v19 = (v19 + 1) & v36;
      if (((*(void *)(v17 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        return v19;
      }
    }
    if (v22((char *)v21, 1, v5) == 1)
    {
      sub_1000130EC((uint64_t)v10, (uint64_t *)&unk_10017FA60);
      sub_1000130EC((uint64_t)v16, (uint64_t *)&unk_10017FA60);
      return v19;
    }
    goto LABEL_4;
  }
  return v19;
}

uint64_t sub_1000C5094(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000C7BB0((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_1000C5234(v5);
  *a1 = v2;
  return result;
}

void *sub_1000C5100(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100004700(&qword_10017FB40);
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_1000C77BC(&v10, (char *)v6 + v5, v1, a1);
      sub_1000048D8();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C5234(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  Swift::Int v4 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_138;
    }
    if (v4) {
      return sub_1000C5908(0, v4, 1, v3);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_137;
  }
  uint64_t v91 = result;
  if (v4 <= 1)
  {
    uint64_t v93 = (char *)&_swiftEmptyArrayStorage[4];
    uint64_t v90 = _swiftEmptyArrayStorage;
    if (v4 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      uint64_t v10 = (char *)_swiftEmptyArrayStorage;
      if (v11 < 2)
      {
LABEL_114:
        swift_bridgeObjectRelease();
        v90[2] = 0;
        return swift_bridgeObjectRelease();
      }
LABEL_101:
      uint64_t v81 = *v3;
      while (1)
      {
        unint64_t v82 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_132;
        }
        if (!v81) {
          goto LABEL_145;
        }
        uint64_t v97 = (uint64_t)v10;
        uint64_t v83 = *(void *)&v10[16 * v82 + 32];
        uint64_t v84 = *(void *)&v10[16 * v11 + 24];
        uint64_t result = sub_1000C59EC((char *)(v81 + v83), (char *)(v81 + *(void *)&v10[16 * v11 + 16]), v81 + v84, v93);
        if (v2) {
          goto LABEL_114;
        }
        if (v84 < v83) {
          goto LABEL_133;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v85 = (char *)v97;
        }
        else
        {
          uint64_t result = (uint64_t)sub_100064D5C(v97);
          uint64_t v85 = (char *)result;
        }
        if (v82 >= *((void *)v85 + 2)) {
          goto LABEL_134;
        }
        uint64_t v86 = &v85[16 * v82 + 32];
        *(void *)uint64_t v86 = v83;
        *((void *)v86 + 1) = v84;
        unint64_t v87 = *((void *)v85 + 2);
        if (v11 > v87) {
          goto LABEL_135;
        }
        uint64_t result = (uint64_t)memmove(&v85[16 * v11 + 16], &v85[16 * v11 + 32], 16 * (v87 - v11));
        uint64_t v10 = v85;
        *((void *)v85 + 2) = v87 - 1;
        unint64_t v11 = v87 - 1;
        if (v87 <= 2) {
          goto LABEL_114;
        }
      }
    }
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = v7;
    uint64_t v90 = (void *)result;
    uint64_t v93 = (char *)(result + 32);
  }
  Swift::Int v8 = 0;
  uint64_t v9 = *v3;
  uint64_t v88 = v3;
  Swift::Int v89 = v4 - 2;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v92 = v4;
  while (1)
  {
    Swift::Int v12 = v8++;
    if (v8 < v4)
    {
      uint64_t v13 = v10;
      sub_1000CB980();
      uint64_t result = dispatch thunk of static Comparable.< infix(_:_:)();
      int v14 = result;
      Swift::Int v8 = v12 + 2;
      if (v12 + 2 >= v4)
      {
LABEL_21:
        uint64_t v10 = v13;
        if ((v14 & 1) == 0) {
          goto LABEL_31;
        }
      }
      else
      {
        Swift::Int v15 = v12;
        while (1)
        {
          uint64_t result = dispatch thunk of static Comparable.< infix(_:_:)();
          if ((v14 ^ result)) {
            break;
          }
          if (v89 == ++v15)
          {
            Swift::Int v8 = v92;
            goto LABEL_21;
          }
        }
        Swift::Int v8 = v15 + 2;
        uint64_t v10 = v13;
        if ((v14 & 1) == 0)
        {
LABEL_31:
          Swift::Int v4 = v92;
          goto LABEL_32;
        }
      }
      Swift::Int v4 = v92;
      if (v8 < v12) {
        goto LABEL_139;
      }
      if (v12 < v8)
      {
        Swift::Int v16 = v8 - 1;
        Swift::Int v17 = v12;
        do
        {
          if (v17 != v16)
          {
            if (!v9) {
              goto LABEL_144;
            }
            char v18 = *(unsigned char *)(v9 + v17);
            *(unsigned char *)(v9 + v17) = *(unsigned char *)(v9 + v16);
            *(unsigned char *)(v9 + v16) = v18;
          }
          BOOL v58 = ++v17 < v16--;
        }
        while (v58);
      }
    }
LABEL_32:
    if (v8 >= v4) {
      goto LABEL_47;
    }
    if (__OFSUB__(v8, v12)) {
      goto LABEL_136;
    }
    if (v8 - v12 >= v91)
    {
LABEL_47:
      uint64_t v19 = v2;
      goto LABEL_48;
    }
    if (__OFADD__(v12, v91)) {
      goto LABEL_140;
    }
    if (v12 + v91 < v4) {
      Swift::Int v4 = v12 + v91;
    }
    if (v4 < v12) {
      break;
    }
    uint64_t v19 = v2;
    if (v8 != v4)
    {
      Swift::Int v20 = v12;
      uint64_t v95 = v10;
      sub_1000CB980();
      uint64_t v21 = (char *)(v9 + v8);
      do
      {
        Swift::Int v22 = v20;
        uint64_t v23 = v21;
        do
        {
          uint64_t result = dispatch thunk of static Comparable.< infix(_:_:)();
          if ((result & 1) == 0) {
            break;
          }
          if (!v9) {
            goto LABEL_142;
          }
          char v24 = *v23;
          *uint64_t v23 = *(v23 - 1);
          *(v23 - 1) = v24;
          ++v22;
          --v23;
        }
        while (v8 != v22);
        ++v8;
        ++v21;
      }
      while (v8 != v4);
      Swift::Int v8 = v4;
      uint64_t v10 = v95;
      Swift::Int v12 = v20;
      if (v4 < v20) {
        goto LABEL_131;
      }
      goto LABEL_49;
    }
LABEL_48:
    if (v8 < v12) {
      goto LABEL_131;
    }
LABEL_49:
    uint64_t v25 = v10;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v10 = v25;
    }
    else
    {
      uint64_t result = (uint64_t)sub_100064C60(0, *((void *)v25 + 2) + 1, 1, v25);
      uint64_t v10 = (char *)result;
    }
    unint64_t v27 = *((void *)v10 + 2);
    unint64_t v26 = *((void *)v10 + 3);
    unint64_t v11 = v27 + 1;
    uint64_t v94 = v19;
    if (v27 >= v26 >> 1)
    {
      uint64_t result = (uint64_t)sub_100064C60((char *)(v26 > 1), v27 + 1, 1, v10);
      uint64_t v10 = (char *)result;
    }
    *((void *)v10 + 2) = v11;
    uint64_t v28 = v10 + 32;
    uint64_t v29 = (Swift::Int *)&v10[16 * v27 + 32];
    *uint64_t v29 = v12;
    v29[1] = v8;
    if (v27)
    {
      uint64_t v96 = v10;
      while (1)
      {
        unint64_t v30 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v35 = &v28[2 * v11];
          uint64_t v36 = *(v35 - 8);
          uint64_t v37 = *(v35 - 7);
          BOOL v41 = __OFSUB__(v37, v36);
          uint64_t v38 = v37 - v36;
          if (v41) {
            goto LABEL_120;
          }
          uint64_t v40 = *(v35 - 6);
          uint64_t v39 = *(v35 - 5);
          BOOL v41 = __OFSUB__(v39, v40);
          uint64_t v33 = v39 - v40;
          char v34 = v41;
          if (v41) {
            goto LABEL_121;
          }
          unint64_t v42 = v11 - 2;
          uint64_t v43 = &v28[2 * v11 - 4];
          uint64_t v45 = *v43;
          uint64_t v44 = v43[1];
          BOOL v41 = __OFSUB__(v44, v45);
          uint64_t v46 = v44 - v45;
          if (v41) {
            goto LABEL_122;
          }
          BOOL v41 = __OFADD__(v33, v46);
          uint64_t v47 = v33 + v46;
          if (v41) {
            goto LABEL_124;
          }
          if (v47 >= v38)
          {
            unint64_t v65 = &v28[2 * v30];
            uint64_t v67 = *v65;
            uint64_t v66 = v65[1];
            BOOL v41 = __OFSUB__(v66, v67);
            uint64_t v68 = v66 - v67;
            if (v41) {
              goto LABEL_130;
            }
            BOOL v58 = v33 < v68;
            goto LABEL_86;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v59 = *((void *)v10 + 4);
            uint64_t v60 = *((void *)v10 + 5);
            BOOL v41 = __OFSUB__(v60, v59);
            uint64_t v52 = v60 - v59;
            char v53 = v41;
            goto LABEL_80;
          }
          uint64_t v32 = *((void *)v10 + 4);
          uint64_t v31 = *((void *)v10 + 5);
          BOOL v41 = __OFSUB__(v31, v32);
          uint64_t v33 = v31 - v32;
          char v34 = v41;
        }
        if (v34) {
          goto LABEL_123;
        }
        unint64_t v42 = v11 - 2;
        uint64_t v48 = &v28[2 * v11 - 4];
        uint64_t v50 = *v48;
        uint64_t v49 = v48[1];
        BOOL v51 = __OFSUB__(v49, v50);
        uint64_t v52 = v49 - v50;
        char v53 = v51;
        if (v51) {
          goto LABEL_125;
        }
        uint64_t v54 = &v28[2 * v30];
        uint64_t v56 = *v54;
        uint64_t v55 = v54[1];
        BOOL v41 = __OFSUB__(v55, v56);
        uint64_t v57 = v55 - v56;
        if (v41) {
          goto LABEL_127;
        }
        if (__OFADD__(v52, v57)) {
          goto LABEL_129;
        }
        if (v52 + v57 >= v33)
        {
          BOOL v58 = v33 < v57;
LABEL_86:
          if (v58) {
            unint64_t v30 = v42;
          }
          goto LABEL_88;
        }
LABEL_80:
        if (v53) {
          goto LABEL_126;
        }
        uint64_t v61 = &v28[2 * v30];
        uint64_t v63 = *v61;
        uint64_t v62 = v61[1];
        BOOL v41 = __OFSUB__(v62, v63);
        uint64_t v64 = v62 - v63;
        if (v41) {
          goto LABEL_128;
        }
        if (v64 < v52) {
          goto LABEL_14;
        }
LABEL_88:
        unint64_t v69 = v30 - 1;
        if (v30 - 1 >= v11)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v9) {
          goto LABEL_143;
        }
        Swift::Int v70 = v8;
        uint64_t v71 = v9;
        char v72 = &v28[2 * v69];
        uint64_t v73 = v28;
        uint64_t v74 = *v72;
        uint64_t v75 = v73;
        unint64_t v76 = v30;
        uint64_t v77 = &v73[2 * v30];
        uint64_t v78 = v77[1];
        uint64_t v79 = v71;
        uint64_t result = sub_1000C59EC((char *)(v71 + *v72), (char *)(v71 + *v77), v71 + v78, v93);
        if (v94) {
          goto LABEL_114;
        }
        if (v78 < v74) {
          goto LABEL_117;
        }
        if (v76 > *((void *)v96 + 2)) {
          goto LABEL_118;
        }
        *char v72 = v74;
        v75[2 * v69 + 1] = v78;
        unint64_t v80 = *((void *)v96 + 2);
        if (v76 >= v80) {
          goto LABEL_119;
        }
        uint64_t v28 = v75;
        unint64_t v11 = v80 - 1;
        uint64_t result = (uint64_t)memmove(v77, v77 + 2, 16 * (v80 - 1 - v76));
        uint64_t v10 = v96;
        *((void *)v96 + 2) = v80 - 1;
        uint64_t v9 = v79;
        Swift::Int v8 = v70;
        if (v80 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_14:
    Swift::Int v4 = v92;
    uint64_t v2 = v94;
    if (v8 >= v92)
    {
      uint64_t v3 = v88;
      if (v11 < 2) {
        goto LABEL_114;
      }
      goto LABEL_101;
    }
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
  return result;
}

uint64_t sub_1000C5908(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    sub_1000CB980();
    Swift::Int v8 = (char *)(v7 + v4);
LABEL_5:
    uint64_t v9 = v6;
    uint64_t v10 = v8;
    while (1)
    {
      uint64_t result = dispatch thunk of static Comparable.< infix(_:_:)();
      if ((result & 1) == 0)
      {
LABEL_4:
        ++v4;
        ++v8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      char v11 = *v10;
      *uint64_t v10 = *(v10 - 1);
      *(v10 - 1) = v11;
      ++v9;
      --v10;
      if (v4 == v9) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C59EC(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  uint64_t v9 = a3 - (void)__src;
  if (__src - __dst < (uint64_t)(a3 - (void)__src))
  {
    if (a4 != __dst || __src <= a4) {
      memmove(a4, __dst, v8);
    }
    uint64_t v10 = &v4[v8];
    if ((unint64_t)v6 >= a3 || v8 < 1)
    {
LABEL_16:
      uint64_t v6 = v7;
      if (v7 != v4) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    sub_1000CB980();
    while ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
    {
      char v11 = v6;
      BOOL v12 = v7 == v6++;
      if (!v12) {
        goto LABEL_13;
      }
LABEL_14:
      ++v7;
      if (v4 >= v10 || (unint64_t)v6 >= a3) {
        goto LABEL_16;
      }
    }
    char v11 = v4;
    BOOL v12 = v7 == v4++;
    if (v12) {
      goto LABEL_14;
    }
LABEL_13:
    *uint64_t v7 = *v11;
    goto LABEL_14;
  }
  if (a4 != __src || a3 <= (unint64_t)a4) {
    memmove(a4, __src, a3 - (void)__src);
  }
  uint64_t v10 = &v4[v9];
  if (v7 >= v6 || v9 < 1)
  {
LABEL_38:
    if (v6 != v4) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  sub_1000CB980();
  uint64_t v13 = (char *)(a3 - 1);
  while (1)
  {
    int v14 = v6 - 1;
    Swift::Int v15 = v13 + 1;
    if (dispatch thunk of static Comparable.< infix(_:_:)())
    {
      if (v15 == v6)
      {
        BOOL v16 = v13 >= v6--;
        if (v16) {
          goto LABEL_35;
        }
        goto LABEL_36;
      }
      --v6;
LABEL_35:
      char *v13 = *v14;
      goto LABEL_36;
    }
    int v14 = v10 - 1;
    if (v15 != v10)
    {
      --v10;
      goto LABEL_35;
    }
    BOOL v16 = v13 >= v10--;
    if (v16) {
      goto LABEL_35;
    }
LABEL_36:
    if (v6 <= v7) {
      break;
    }
    --v13;
    if (v10 <= v4) {
      goto LABEL_38;
    }
  }
  if (v6 != v4)
  {
LABEL_40:
    memmove(v6, v4, v10 - v4);
    return 1;
  }
LABEL_39:
  if (v6 >= v10) {
    goto LABEL_40;
  }
  return 1;
}

void (*sub_1000C5C38(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_10002E898(v6);
  v6[10] = sub_1000C5CE4(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10002D448;
}

void (*sub_1000C5CE4(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  unint64_t v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_1000048E0(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *uint64_t v10 = v19;
        return sub_10002E848;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1000C6C20();
      goto LABEL_7;
    }
    sub_1000C60CC(v16, a4 & 1);
    unint64_t v20 = sub_1000048E0(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = v20;
      v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C5E2C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  int64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100004700(&qword_10017F178);
  uint64_t v10 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v9 + 16))
  {
    unint64_t v27 = v3;
    uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
    char v12 = (void *)(v9 + 64);
    uint64_t v13 = -1;
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    unint64_t v14 = v13 & *(void *)(v9 + 64);
    int64_t v15 = (unint64_t)(v11 + 63) >> 6;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        if (v21 >= v15) {
          goto LABEL_23;
        }
        unint64_t v22 = v12[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v15) {
            goto LABEL_23;
          }
          unint64_t v22 = v12[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v15)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v27;
                goto LABEL_30;
              }
              uint64_t v25 = 1 << *(unsigned char *)(v9 + 32);
              if (v25 >= 64) {
                bzero((void *)(v9 + 64), ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v12 = -1 << v25;
              }
              uint64_t v3 = v27;
              *(void *)(v9 + 16) = 0;
              break;
            }
            unint64_t v22 = v12[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_32;
                }
                if (v17 >= v15) {
                  goto LABEL_23;
                }
                unint64_t v22 = v12[v17];
                ++v23;
                if (v22) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_20:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = *(void *)(v9 + 48) + *(void *)(v6 + 72) * v20;
      if (a2)
      {
        sub_100029900(v24, (uint64_t)v8, (uint64_t *)&unk_10017FA60);
        uint64_t v18 = *(void *)(*(void *)(v9 + 56) + 8 * v20);
      }
      else
      {
        sub_10001BA68(v24, (uint64_t)v8, (uint64_t *)&unk_10017FA60);
        uint64_t v18 = *(void *)(*(void *)(v9 + 56) + 8 * v20);
        swift_bridgeObjectRetain();
      }
      uint64_t result = sub_1000C670C((uint64_t)v8, v18, v10);
    }
  }
  uint64_t result = swift_release();
LABEL_30:
  void *v3 = v10;
  return result;
}

uint64_t sub_1000C60CC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017F3E8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000C63E4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017F3C8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    unint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    char v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      sub_10000372C(v25, (uint64_t)v38);
    }
    else
    {
      sub_10000469C((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_10000372C(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000C670C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  int64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  sub_10001BA68(a1, (uint64_t)v13, (uint64_t *)&unk_10017FA60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    Hasher._combine(_:)(1u);
    sub_1000CB938(&qword_10017BE90, (void (*)(uint64_t))&type metadata accessor for URL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  Hasher._finalize()();
  unint64_t v14 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v14;
  uint64_t result = sub_100029900(a1, a3[6] + *(void *)(v11 + 72) * v14, (uint64_t *)&unk_10017FA60);
  *(void *)(a3[7] + 8 * v14) = a2;
  ++a3[2];
  return result;
}

void *sub_1000C69A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v26 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004700(&qword_10017F178);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v24 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v25 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v14) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v10);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v26 + 72) * v16;
    sub_10001BA68(*(void *)(v5 + 48) + v17, (uint64_t)v4, (uint64_t *)&unk_10017FA60);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    sub_100029900((uint64_t)v4, *(void *)(v7 + 48) + v17, (uint64_t *)&unk_10017FA60);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v14)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1000C6C20()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017F3E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000C6DD8(uint64_t a1, char a2, void *a3)
{
  uint64_t v7 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004700(&qword_10017F170);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v59 = a1;
  uint64_t v60 = v8;
  uint64_t v56 = v7;
  uint64_t v17 = *(int *)(v12 + 48);
  unint64_t v57 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v58 = v3;
  uint64_t v18 = a1 + v57;
  uint64_t v62 = *(void *)(v13 + 72);
  swift_bridgeObjectRetain();
  sub_10001BA68(v18, (uint64_t)v15, &qword_10017F170);
  sub_100029900((uint64_t)v15, (uint64_t)v10, (uint64_t *)&unk_10017FA60);
  uint64_t v61 = v17;
  uint64_t v19 = *(void *)&v15[v17];
  uint64_t v63 = a3;
  uint64_t v20 = *a3;
  unint64_t v22 = sub_1000C4994((uint64_t)v10);
  uint64_t v23 = *(void *)(v20 + 16);
  BOOL v24 = (v21 & 1) == 0;
  uint64_t v25 = v23 + v24;
  if (__OFADD__(v23, v24)) {
    goto LABEL_24;
  }
  char v26 = v21;
  if (*(void *)(v20 + 24) >= v25)
  {
    char v29 = v63;
    if (a2)
    {
      if (v21) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1000C69A4();
      if (v26) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v32 = (void *)*v29;
    v32[(v22 >> 6) + 8] |= 1 << v22;
    uint64_t v33 = v32[6];
    uint64_t v60 = *(void *)(v60 + 72);
    sub_100029900((uint64_t)v10, v33 + v60 * v22, (uint64_t *)&unk_10017FA60);
    *(void *)(v32[7] + 8 * v22) = v19;
    uint64_t v34 = v32[2];
    BOOL v35 = __OFADD__(v34, 1);
    uint64_t v36 = v34 + 1;
    if (v35)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v32[2] = v36;
    uint64_t v37 = v16 - 1;
    if (v16 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    uint64_t v38 = v59 + v62 + v57;
    uint64_t v39 = (uint64_t *)&unk_10017FA60;
    while (1)
    {
      sub_10001BA68(v38, (uint64_t)v15, &qword_10017F170);
      uint64_t v40 = v39;
      sub_100029900((uint64_t)v15, (uint64_t)v10, v39);
      uint64_t v41 = *(void *)&v15[v61];
      uint64_t v42 = *v63;
      unint64_t v44 = sub_1000C4994((uint64_t)v10);
      uint64_t v45 = *(void *)(v42 + 16);
      BOOL v46 = (v43 & 1) == 0;
      uint64_t v47 = v45 + v46;
      if (__OFADD__(v45, v46)) {
        break;
      }
      char v48 = v43;
      if (*(void *)(v42 + 24) < v47)
      {
        sub_1000C5E2C(v47, 1);
        unint64_t v49 = sub_1000C4994((uint64_t)v10);
        if ((v48 & 1) != (v50 & 1)) {
          goto LABEL_26;
        }
        unint64_t v44 = v49;
      }
      if (v48) {
        goto LABEL_10;
      }
      BOOL v51 = (void *)*v63;
      *(void *)(*v63 + 8 * (v44 >> 6) + 64) |= 1 << v44;
      uint64_t v39 = v40;
      sub_100029900((uint64_t)v10, v51[6] + v60 * v44, v40);
      *(void *)(v51[7] + 8 * v44) = v41;
      uint64_t v52 = v51[2];
      BOOL v35 = __OFADD__(v52, 1);
      uint64_t v53 = v52 + 1;
      if (v35) {
        goto LABEL_25;
      }
      v51[2] = v53;
      v38 += v62;
      if (!--v37) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_1000C5E2C(v25, a2 & 1);
  unint64_t v27 = sub_1000C4994((uint64_t)v10);
  if ((v26 & 1) == (v28 & 1))
  {
    unint64_t v22 = v27;
    char v29 = v63;
    if ((v26 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v31 = swift_allocError();
    swift_willThrow();
    uint64_t v66 = v31;
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000130EC((uint64_t)v10, (uint64_t *)&unk_10017FA60);
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  uint64_t v64 = 0;
  unint64_t v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v54._object = (void *)0x80000001001460E0;
  v54._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v54);
  _print_unlocked<A, B>(_:_:)();
  v55._uint64_t countAndFlagsBits = 39;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

size_t sub_1000C72F8(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000C7318(a1, a2, a3, (void *)*v3);
  size_t *v3 = result;
  return result;
}

size_t sub_1000C7318(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100004700(&qword_10017F3C0);
  uint64_t v10 = *(void *)(sub_100004700(&qword_10017F170) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  _OWORD v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_100004700(&qword_10017F170) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

char *sub_1000C74F4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017F408);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

size_t sub_1000C75E0(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100004700(&qword_10017F3B8);
  uint64_t v10 = *(void *)(sub_100004700(&qword_10017F188) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  _OWORD v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_100004700(&qword_10017F188) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

uint64_t sub_1000C77BC(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v40 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a4;
  uint64_t v15 = a4 + 56;
  uint64_t v14 = *(void *)(a4 + 56);
  uint64_t v32 = -1 << *(unsigned char *)(a4 + 32);
  if (-v32 < 64) {
    uint64_t v16 = ~(-1 << -(char)v32);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v28 = ~v32;
    *a1 = v42;
    a1[1] = v15;
    a1[2] = v28;
    a1[3] = v18;
    a1[4] = v17;
    return a3;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v36 = a3;
  int64_t v18 = 0;
  a3 = 0;
  uint64_t v19 = v40;
  uint64_t v38 = v41 + 16;
  uint64_t v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  uint64_t v37 = v41 + 48;
  BOOL v35 = (uint64_t (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v33 = v15;
  int64_t v34 = (unint64_t)(63 - v32) >> 6;
  int64_t v30 = v34 - 1;
  uint64_t v31 = a1;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v18 << 6);
  while (1)
  {
    uint64_t v25 = v41;
    uint64_t v26 = *(void *)(v41 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v10, *(void *)(v42 + 48) + v26 * v21, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v11) == 1)
    {
      uint64_t v15 = v33;
      goto LABEL_38;
    }
    ++a3;
    unint64_t v27 = *v35;
    (*v35)(v19, v10, v11);
    uint64_t result = v27(a2, v19, v11);
    if (a3 == v36)
    {
      a3 = v36;
      a1 = v31;
      uint64_t v15 = v33;
      goto LABEL_39;
    }
    a2 += v26;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    uint64_t v15 = v33;
    if (v22 >= v34) {
      goto LABEL_37;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    if (!v23)
    {
      int64_t v24 = v18 + 2;
      ++v18;
      if (v22 + 1 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * v24);
      if (v23) {
        goto LABEL_14;
      }
      int64_t v18 = v22 + 1;
      if (v22 + 2 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * (v22 + 2));
      if (v23)
      {
        v22 += 2;
      }
      else
      {
        int64_t v18 = v22 + 2;
        if (v22 + 3 >= v34) {
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v33 + 8 * (v22 + 3));
        if (!v23)
        {
          int64_t v24 = v22 + 4;
          int64_t v18 = v22 + 3;
          if (v22 + 4 < v34)
          {
            unint64_t v23 = *(void *)(v33 + 8 * v24);
            if (!v23)
            {
              while (1)
              {
                int64_t v22 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v22 >= v34)
                {
                  int64_t v18 = v30;
                  goto LABEL_37;
                }
                unint64_t v23 = *(void *)(v33 + 8 * v22);
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v22 = v24;
            goto LABEL_21;
          }
LABEL_37:
          (*v39)(v10, 1, 1, v11);
          unint64_t v17 = 0;
LABEL_38:
          sub_1000130EC((uint64_t)v10, (uint64_t *)&unk_10017FA60);
          a1 = v31;
          goto LABEL_39;
        }
        v22 += 3;
      }
    }
LABEL_21:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v18 = v22;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

char *sub_1000C7BB0(uint64_t a1)
{
  return sub_1000C74F4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000C7BC4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1751347809 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6169726176 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C656E72656BLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010014D170 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xED00007368746150 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010014D190 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010014D1B0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_1000C7E9C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004700(&qword_10017F410);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_1000BA2D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_10000478C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v38) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    LOBYTE(v38) = 1;
    swift_bridgeObjectRetain();
    uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v36 = v11;
    LOBYTE(v38) = 2;
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v35 = v15;
    uint64_t v30 = v14;
    uint64_t v33 = v13;
    uint64_t v16 = sub_100004700((uint64_t *)&unk_10017E5D0);
    char v37 = 3;
    uint64_t v17 = sub_1000190B0((unint64_t *)&qword_10017C050);
    swift_bridgeObjectRetain();
    uint64_t v31 = v17;
    uint64_t v32 = v16;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18 = v38;
    char v37 = 4;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v29 = a2;
    uint64_t v19 = v38;
    char v37 = 5;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v28 = v9;
    uint64_t v20 = v38;
    char v37 = 6;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v21 = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_10000478C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v18;
    swift_bridgeObjectRelease();
    uint64_t v23 = v35;
    swift_bridgeObjectRelease();
    uint64_t v24 = v33;
    swift_bridgeObjectRelease();
    uint64_t v25 = v36;
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v27 = v29;
    *uint64_t v29 = v28;
    v27[1] = v25;
    v27[2] = v34;
    v27[3] = v24;
    void v27[4] = v30;
    v27[5] = v23;
    v27[6] = v22;
    v27[7] = v19;
    v27[8] = v20;
    v27[9] = v21;
  }
  return result;
}

uint64_t type metadata accessor for Updatable()
{
  return sub_100004FAC();
}

uint64_t sub_1000C84A0()
{
  sub_10000478C(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000C84D8(void *a1)
{
  uint64_t v3 = v1 + 2;
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  sub_1000036B0(v3, v4);
  sub_10008B8BC(v4, v5);
  uint64_t v6 = v31;
  uint64_t v7 = v32;
  sub_1000036B0(v30, v31);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  uint64_t v9 = &_swiftEmptyDictionarySingleton;
  uint64_t v33 = &_swiftEmptyDictionarySingleton;
  uint64_t v10 = *(void *)(v8 + 16);
  if (v10)
  {
    uint64_t v25 = a1;
    uint64_t v11 = v8 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_10000469C(v11, (uint64_t)v27);
      uint64_t v12 = v28;
      uint64_t v13 = v29;
      sub_1000036B0(v27, v28);
      v26[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
      v26[1] = v14;
      sub_100004700(&qword_10017F3D0);
      sub_1000F279C((uint64_t)v26, (uint64_t)&v33, (uint64_t)&type metadata for String);
      swift_bridgeObjectRelease();
      uint64_t v15 = v28;
      uint64_t v16 = v29;
      sub_1000036B0(v27, v28);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
      uint64_t v19 = sub_1000BD564(v26, v17, v18);
      if (*v20)
      {
        uint64_t KeyPath = swift_getKeyPath();
        uint64_t v22 = sub_100004700(&qword_10017F3D8);
        uint64_t v23 = sub_1000CB938(&qword_10017F3E0, (void (*)(uint64_t))&type metadata accessor for Date);
        sub_1000EE5B4(1, KeyPath, (uint64_t)v27, v22, v23);
        swift_release();
      }
      ((void (*)(void *, void))v19)(v26, 0);
      swift_bridgeObjectRelease();
      sub_10000478C((uint64_t)v27);
      v11 += 40;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    uint64_t v9 = v33;
    a1 = v25;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_10000478C((uint64_t)v30);
  *a1 = v9;
  return result;
}

uint64_t sub_1000C8768()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[19] >= 6uLL) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[59])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (v0[70])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_10000478C((uint64_t)(v0 + 76));

  return _swift_deallocObject(v0, 648, 7);
}

uint64_t sub_1000C8928(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = (void *)(v1 + 608);
  sub_1000788D8();
  swift_bridgeObjectRetain();
  uint64_t v6 = *sub_100078A0C();
  int v7 = *(_DWORD *)(v1 + 600);
  uint64_t v8 = qword_100188698;
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_1000EF094(v6, (dword_100199764 & ~v7) == 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v10 = sub_10002A278();
  v18[5] = sub_100078DAC(4, v10, v9);
  uint64_t v11 = *(void *)(v1 + 632);
  uint64_t v12 = *(void *)(v1 + 640);
  sub_1000036B0(v5, v11);
  sub_10007F4B4(v11, v12);
  sub_100077FDC(v18, (uint64_t)&type metadata for KernelRequests.GetLoaded, (uint64_t)&off_10017D8C8, (uint64_t)&v19);
  sub_10000478C((uint64_t)v18);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3)
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = v19;
    *a1 = v19;
    static os_log_type_t.debug.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_100132F10;
    uint64_t v16 = *(void *)(v14 + 16);
    *(void *)(v15 + 56) = &type metadata for Int;
    *(void *)(v15 + 64) = &protocol witness table for Int;
    *(void *)(v15 + 32) = v16;
    sub_10000483C(0, (unint64_t *)&qword_10017D6F0);
    uint64_t v17 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000C8B34(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000C8B44@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000BD3FC(a1, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), *(void *)(v2 + 48), a2);
}

unint64_t sub_1000C8B6C()
{
  unint64_t result = qword_10017F168;
  if (!qword_10017F168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F168);
  }
  return result;
}

void *sub_1000C8BC0(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_100004700(&qword_10017F170);
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v30 = v5;
  __chkstk_darwin(v5);
  int v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    uint64_t v33 = _swiftEmptyArrayStorage;
    sub_1000C72F8(0, v8, 0);
    uint64_t v9 = v33;
    uint64_t v28 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v28 - 8);
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v26 = v10 + 16;
    unint64_t v27 = v11;
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v13 = a2[53];
    uint64_t v31 = a2[54];
    uint64_t v32 = v13;
    uint64_t v24 = *(void *)(v10 + 72);
    uint64_t v25 = a2 + 2;
    uint64_t v14 = (void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
    while (1)
    {
      uint64_t v15 = v28;
      v27(v7, v12, v28);
      char v16 = 1;
      (*v14)(v7, 0, 1, v15);
      if (URL.path.getter() != v32 || v17 != v31) {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      uint64_t v18 = sub_10002A270();
      uint64_t v19 = sub_1000F3138(v25, v12, v18, (v16 & 1) == 0);
      if (v2) {
        break;
      }
      *(void *)&v7[*(int *)(v30 + 48)] = v19;
      uint64_t v33 = v9;
      unint64_t v21 = v9[2];
      unint64_t v20 = v9[3];
      if (v21 >= v20 >> 1)
      {
        sub_1000C72F8(v20 > 1, v21 + 1, 1);
        uint64_t v9 = v33;
      }
      void v9[2] = v21 + 1;
      sub_100029900((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v21, &qword_10017F170);
      v12 += v24;
      if (!--v8) {
        return v9;
      }
    }
    sub_1000130EC((uint64_t)v7, (uint64_t *)&unk_10017FA60);
    swift_release();
  }
  return v9;
}

void *sub_1000C8E64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v29 = a3;
  uint64_t v28 = sub_100004700(&qword_10017F3B0);
  uint64_t v8 = __chkstk_darwin(v28);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v32 = a1;
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v26 = a2 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v27 = (unint64_t)(v14 + 63) >> 6;
  unint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v18 = 0;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    uint64_t v24 = *(void *)(a2 + 48);
    uint64_t v25 = sub_100004700((uint64_t *)&unk_10017FA60);
    sub_10001BA68(v24 + *(void *)(*(void *)(v25 - 8) + 72) * i, (uint64_t)v12, (uint64_t *)&unk_10017FA60);
    *(void *)&v12[*(int *)(v28 + 48)] = *(void *)(*(void *)(a2 + 56) + 8 * i);
    sub_100029900((uint64_t)v12, (uint64_t)v10, &qword_10017F3B0);
    swift_bridgeObjectRetain();
    sub_1000C008C(&v32, (uint64_t)v10, v29, v30, v31);
    if (v5)
    {
      swift_bridgeObjectRelease();
      sub_1000130EC((uint64_t)v10, &qword_10017F3B0);
      return (void *)swift_release();
    }
    unint64_t result = (void *)sub_1000130EC((uint64_t)v10, &qword_10017F3B0);
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v27) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v18);
    if (!v22) {
      break;
    }
LABEL_17:
    unint64_t v16 = (v22 - 1) & v22;
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v27) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v27) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v27) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 4;
  if (v18 + 4 >= v27)
  {
LABEL_26:
    swift_release();
    return v32;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
LABEL_16:
    int64_t v18 = v23;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v27) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000C913C(uint64_t a1, unint64_t a2)
{
  if (a2 != 3) {
    return sub_1000C914C(a1, a2);
  }
  return a1;
}

uint64_t sub_1000C914C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000C9160(uint64_t a1, unint64_t a2)
{
  if (a2 != 3) {
    return sub_10003C944(a1, a2);
  }
  return a1;
}

uint64_t sub_1000C9170()
{
  URL.path.getter();
  URL.path.getter();
  char v0 = sub_100037774();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_1000C91E8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000C0D68(a1, *(void **)(v2 + 24), a2);
}

id sub_1000C9204@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *(void **)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  char v8 = sub_10002A278();
  char v9 = sub_10002A278();
  id result = sub_1000B3024(v6, v7, v8 & 1, v9 & 1, a1);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000C9280@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000C2AA4(a1, *(void **)(v2 + 24), a2);
}

unint64_t sub_1000C929C()
{
  unint64_t result = qword_10017F198;
  if (!qword_10017F198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F198);
  }
  return result;
}

unint64_t sub_1000C92FC()
{
  unint64_t result = qword_10017F1A0;
  if (!qword_10017F1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F1A0);
  }
  return result;
}

unint64_t sub_1000C9354()
{
  unint64_t result = qword_10017F1A8;
  if (!qword_10017F1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F1A8);
  }
  return result;
}

uint64_t type metadata accessor for ExtensionManager()
{
  return self;
}

uint64_t destroy for ExtensionManager.Settings(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[17] >= 6uLL) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[57])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = a1[68];
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ExtensionManager.Settings(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  unint64_t v37 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v37 >= 5)
  {
    if (v37 == 5)
    {
      *(void *)(a1 + 136) = 5;
    }
    else
    {
      *(void *)(a1 + 136) = v37;
      swift_retain();
    }
  }
  else
  {
    *(void *)(a1 + 136) = v37;
  }
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  uint64_t v12 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v12;
  uint64_t v13 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v13;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  uint64_t v14 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v14;
  uint64_t v15 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v15;
  uint64_t v16 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v16;
  uint64_t v17 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v17;
  uint64_t v18 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v18;
  uint64_t v19 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v19;
  uint64_t v34 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v34;
  uint64_t v35 = *(void *)(a2 + 328);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = v35;
  uint64_t v20 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v20;
  uint64_t v21 = *(void *)(a2 + 360);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = v21;
  uint64_t v22 = *(void *)(a2 + 376);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = v22;
  uint64_t v23 = *(void *)(a2 + 392);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = v23;
  uint64_t v24 = *(void *)(a2 + 408);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = v24;
  uint64_t v25 = *(void *)(a2 + 424);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = v25;
  uint64_t v36 = *(void *)(a2 + 440);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = v36;
  uint64_t v38 = *(void *)(a2 + 456);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v38)
  {
    *(void *)(a1 + 448) = *(void *)(a2 + 448);
    *(void *)(a1 + 456) = v38;
    uint64_t v26 = *(void *)(a2 + 472);
    *(void *)(a1 + 464) = *(void *)(a2 + 464);
    *(void *)(a1 + 472) = v26;
    uint64_t v27 = *(void *)(a2 + 488);
    *(void *)(a1 + 480) = *(void *)(a2 + 480);
    *(void *)(a1 + 488) = v27;
    uint64_t v28 = *(void *)(a2 + 504);
    *(void *)(a1 + 496) = *(void *)(a2 + 496);
    *(void *)(a1 + 504) = v28;
    *(void *)(a1 + 512) = *(void *)(a2 + 512);
    *(void *)(a1 + 520) = *(void *)(a2 + 520);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v29 = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v29;
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    long long v30 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 464) = v30;
  }
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  uint64_t v31 = *(void *)(a2 + 544);
  swift_bridgeObjectRetain();
  if (v31)
  {
    *(void *)(a1 + 544) = v31;
    *(void *)(a1 + 552) = *(void *)(a2 + 552);
    *(void *)(a1 + 560) = *(void *)(a2 + 560);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
    *(void *)(a1 + 576) = *(void *)(a2 + 576);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v32 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v32;
    *(void *)(a1 + 576) = *(void *)(a2 + 576);
  }
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(unsigned char *)(a1 + 588) = *(unsigned char *)(a2 + 588);
  return a1;
}

uint64_t assignWithCopy for ExtensionManager.Settings(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)(a1 + 136);
  unint64_t v5 = *(void *)(a1 + 136);
  unint64_t v6 = *(void *)(a2 + 136);
  if (v5 == 5)
  {
    if (v6 < 5)
    {
LABEL_3:
      *uint64_t v4 = v6;
      goto LABEL_16;
    }
    if (v6 == 5)
    {
      uint64_t v7 = 5;
LABEL_15:
      *uint64_t v4 = v7;
      goto LABEL_16;
    }
LABEL_11:
    *uint64_t v4 = v6;
    swift_retain();
    goto LABEL_16;
  }
  if (v6 == 5)
  {
    sub_1000CA0C0(a1 + 136);
LABEL_14:
    uint64_t v7 = *(void *)(a2 + 136);
    goto LABEL_15;
  }
  if (v5 < 5)
  {
    if (v6 < 5) {
      goto LABEL_3;
    }
    goto LABEL_11;
  }
  if (v6 < 5)
  {
    swift_release();
    goto LABEL_14;
  }
  *uint64_t v4 = v6;
  swift_retain();
  swift_release();
LABEL_16:
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = (_OWORD *)(a1 + 448);
  uint64_t v9 = (_OWORD *)(a2 + 448);
  uint64_t v10 = *(void *)(a2 + 456);
  if (*(void *)(a1 + 456))
  {
    if (v10)
    {
      *(void *)(a1 + 448) = *(void *)(a2 + 448);
      *(void *)(a1 + 456) = *(void *)(a2 + 456);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 464) = *(void *)(a2 + 464);
      *(void *)(a1 + 472) = *(void *)(a2 + 472);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 480) = *(void *)(a2 + 480);
      *(void *)(a1 + 488) = *(void *)(a2 + 488);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 496) = *(void *)(a2 + 496);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 504) = *(void *)(a2 + 504);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 512) = *(void *)(a2 + 512);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 520) = *(void *)(a2 + 520);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000CA114(a1 + 448);
      *uint64_t v8 = *v9;
      long long v11 = *(_OWORD *)(a2 + 512);
      long long v13 = *(_OWORD *)(a2 + 464);
      long long v12 = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
      *(_OWORD *)(a1 + 512) = v11;
      *(_OWORD *)(a1 + 464) = v13;
      *(_OWORD *)(a1 + 480) = v12;
    }
  }
  else if (v10)
  {
    *(void *)(a1 + 448) = *(void *)(a2 + 448);
    *(void *)(a1 + 456) = *(void *)(a2 + 456);
    *(void *)(a1 + 464) = *(void *)(a2 + 464);
    *(void *)(a1 + 472) = *(void *)(a2 + 472);
    *(void *)(a1 + 480) = *(void *)(a2 + 480);
    *(void *)(a1 + 488) = *(void *)(a2 + 488);
    *(void *)(a1 + 496) = *(void *)(a2 + 496);
    *(void *)(a1 + 504) = *(void *)(a2 + 504);
    *(void *)(a1 + 512) = *(void *)(a2 + 512);
    *(void *)(a1 + 520) = *(void *)(a2 + 520);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *uint64_t v8 = *v9;
    long long v14 = *(_OWORD *)(a2 + 464);
    long long v15 = *(_OWORD *)(a2 + 480);
    long long v16 = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = v16;
    *(_OWORD *)(a1 + 464) = v14;
    *(_OWORD *)(a1 + 480) = v15;
  }
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = (_OWORD *)(a1 + 544);
  uint64_t v18 = (_OWORD *)(a2 + 544);
  uint64_t v19 = *(void *)(a2 + 544);
  if (*(void *)(a1 + 544))
  {
    if (v19)
    {
      *(void *)(a1 + 544) = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 552) = *(void *)(a2 + 552);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 560) = *(void *)(a2 + 560);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 568) = *(void *)(a2 + 568);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 576) = *(void *)(a2 + 576);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000CA13C(a1 + 544);
      uint64_t v20 = *(void *)(a2 + 576);
      long long v21 = *(_OWORD *)(a2 + 560);
      *uint64_t v17 = *v18;
      *(_OWORD *)(a1 + 560) = v21;
      *(void *)(a1 + 576) = v20;
    }
  }
  else if (v19)
  {
    *(void *)(a1 + 544) = v19;
    *(void *)(a1 + 552) = *(void *)(a2 + 552);
    *(void *)(a1 + 560) = *(void *)(a2 + 560);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
    *(void *)(a1 + 576) = *(void *)(a2 + 576);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v22 = *v18;
    long long v23 = *(_OWORD *)(a2 + 560);
    *(void *)(a1 + 576) = *(void *)(a2 + 576);
    *uint64_t v17 = v22;
    *(_OWORD *)(a1 + 560) = v23;
  }
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(unsigned char *)(a1 + 588) = *(unsigned char *)(a2 + 588);
  return a1;
}

uint64_t sub_1000CA0C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000CA114(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000CA13C(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for ExtensionManager.Settings(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x24DuLL);
}

uint64_t assignWithTake for ExtensionManager.Settings(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v8;
  swift_bridgeObjectRelease();
  uint64_t v10 = (unint64_t *)(a1 + 136);
  unint64_t v9 = *(void *)(a1 + 136);
  unint64_t v11 = *(void *)(a2 + 136);
  if (v9 == 5)
  {
    if (v11 == 5) {
      unint64_t v11 = 5;
    }
    goto LABEL_10;
  }
  if (v11 == 5)
  {
    sub_1000CA0C0(a1 + 136);
LABEL_9:
    unint64_t v11 = *(void *)(a2 + 136);
    goto LABEL_10;
  }
  if (v9 < 5)
  {
LABEL_10:
    *uint64_t v10 = v11;
    goto LABEL_11;
  }
  if (v11 < 5)
  {
    swift_release();
    goto LABEL_9;
  }
  *uint64_t v10 = v11;
  swift_release();
LABEL_11:
  uint64_t v12 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v12;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v13;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v18;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 360);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(a2 + 376);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(a2 + 392);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(a2 + 408);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(a2 + 424);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = v24;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 456))
  {
    uint64_t v25 = *(void *)(a2 + 456);
    if (v25)
    {
      *(void *)(a1 + 448) = *(void *)(a2 + 448);
      *(void *)(a1 + 456) = v25;
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(a2 + 472);
      *(void *)(a1 + 464) = *(void *)(a2 + 464);
      *(void *)(a1 + 472) = v26;
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(a2 + 488);
      *(void *)(a1 + 480) = *(void *)(a2 + 480);
      *(void *)(a1 + 488) = v27;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 496) = *(void *)(a2 + 496);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 504) = *(void *)(a2 + 504);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 512) = *(void *)(a2 + 512);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 520) = *(void *)(a2 + 520);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_1000CA114(a1 + 448);
  }
  long long v28 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v28;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  long long v29 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v29;
LABEL_16:
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 544))
  {
LABEL_20:
    long long v31 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v31;
    *(void *)(a1 + 576) = *(void *)(a2 + 576);
    goto LABEL_21;
  }
  uint64_t v30 = *(void *)(a2 + 544);
  if (!v30)
  {
    sub_1000CA13C(a1 + 544);
    goto LABEL_20;
  }
  *(void *)(a1 + 544) = v30;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  swift_bridgeObjectRelease();
LABEL_21:
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(unsigned char *)(a1 + 588) = *(unsigned char *)(a2 + 588);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtensionManager.Settings(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 589)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 588) = 0;
    *(_DWORD *)(result + 584) = 0;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 589) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 589) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings()
{
  return &type metadata for ExtensionManager.Settings;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.Flags()
{
  return &type metadata for ExtensionManager.Settings.Flags;
}

uint64_t destroy for ExtensionManager.Settings.ExtensionFilter()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ExtensionManager.Settings.ExtensionFilter(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ExtensionManager.Settings.ExtensionFilter(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ExtensionManager.Settings.ExtensionFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtensionManager.Settings.ExtensionFilter(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings.ExtensionFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.ExtensionFilter()
{
  return &type metadata for ExtensionManager.Settings.ExtensionFilter;
}

uint64_t destroy for ExtensionManager.Settings.BuildManifest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ExtensionManager.Settings.BuildManifest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ExtensionManager.Settings.BuildManifest(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ExtensionManager.Settings.BuildManifest(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for ExtensionManager.Settings.BuildManifest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtensionManager.Settings.BuildManifest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings.BuildManifest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.BuildManifest()
{
  return &type metadata for ExtensionManager.Settings.BuildManifest;
}

uint64_t sub_1000CAC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_1000CAC7C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000CAD20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 8);
      *(void *)unint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = v12;
      swift_retain();
    }
    *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  }
  return v4;
}

uint64_t sub_1000CAE40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  uint64_t result = (*(uint64_t (**)(void))v3)();
  if (*(void *)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000CAECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
    swift_retain();
  }
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  return a1;
}

uint64_t sub_1000CAF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)v8;
  if (*(void *)v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      uint64_t v11 = *(void *)(v8 + 8);
      *(void *)unint64_t v7 = v9;
      *(void *)(v7 + 8) = v11;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    goto LABEL_8;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  swift_retain();
  swift_release();
LABEL_8:
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  return a1;
}

uint64_t sub_1000CB054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
  }
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  return a1;
}

uint64_t sub_1000CB0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)v8;
  if (*(void *)v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      uint64_t v11 = *(void *)(v8 + 8);
      *(void *)unint64_t v7 = v9;
      *(void *)(v7 + 8) = v11;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    goto LABEL_8;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  swift_release();
LABEL_8:
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  return a1;
}

uint64_t sub_1000CB1CC(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000CB33CLL);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((v6 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void sub_1000CB350(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFE)
            {
              uint64_t v21 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                *uint64_t v21 = 0;
                v21[1] = 0;
                *(_DWORD *)uint64_t v21 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *uint64_t v21 = a2;
              }
            }
            else
            {
              uint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x1000CB570);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for ExtensionManager.Settings.ExtensionFilter.FilterMatch(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CB664);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.ExtensionFilter.FilterMatch()
{
  return &type metadata for ExtensionManager.Settings.ExtensionFilter.FilterMatch;
}

uint64_t getEnumTagSinglePayload for ExtensionManager.Settings.BuildManifest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ExtensionManager.Settings.BuildManifest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CB7F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.BuildManifest.CodingKeys()
{
  return &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys;
}

unint64_t sub_1000CB834()
{
  unint64_t result = qword_100188E20[0];
  if (!qword_100188E20[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100188E20);
  }
  return result;
}

unint64_t sub_1000CB88C()
{
  unint64_t result = qword_100188F30;
  if (!qword_100188F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100188F30);
  }
  return result;
}

unint64_t sub_1000CB8E4()
{
  unint64_t result = qword_100188F38[0];
  if (!qword_100188F38[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100188F38);
  }
  return result;
}

uint64_t sub_1000CB938(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000CB980()
{
  unint64_t result = qword_10017F400;
  if (!qword_10017F400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F400);
  }
  return result;
}

uint64_t sub_1000CB9D4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000C9280(a1, a2);
}

unint64_t sub_1000CB9EC()
{
  sub_10005BFC4(v0, (uint64_t)&v139);
  uint64_t v1 = 0xD000000000000015;
  switch(v147)
  {
    case 1:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000018;
      uint64_t v5 = "Deserialization failed: ";
      goto LABEL_85;
    case 2:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000022;
      uint64_t v5 = "Communicating with kernel failed: ";
      goto LABEL_85;
    case 3:
      int v2 = v140;
      unint64_t v3 = *(void *)status;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000017;
      uint64_t v5 = "Kernel request failed: ";
      goto LABEL_85;
    case 4:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000023;
      uint64_t v5 = "Launching driver extension failed: ";
      goto LABEL_85;
    case 5:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000001ALL;
      uint64_t v5 = "Loading extension failed: ";
      goto LABEL_85;
    case 6:
      uint64_t v16 = (uint64_t)v139;
      unsigned int v17 = v140;
      unint64_t v19 = *(void *)status;
      unint64_t v18 = (unint64_t)v142;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      unint64_t v148 = 0xD000000000000020;
      unint64_t v149 = 0x800000010014DBB0;
      v20._uint64_t countAndFlagsBits = v16;
      v20._object = v17;
      String.append(_:)(v20);
      uint64_t v21 = 8250;
      unint64_t v22 = 0xE200000000000000;
      goto LABEL_59;
    case 7:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000001CLL;
      uint64_t v5 = "Collection linkage invalid: ";
      goto LABEL_85;
    case 8:
      int v2 = v140;
      unint64_t v3 = *(void *)status;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      unint64_t v148 = 0xD00000000000001CLL;
      unint64_t v149 = 0x800000010014DAF0;
      v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._uint64_t countAndFlagsBits = 8236;
      v24._object = (void *)0xE200000000000000;
      String.append(_:)(v24);
      goto LABEL_87;
    case 9:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      uint64_t v25 = "Invalid argument: ";
      goto LABEL_96;
    case 10:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000010;
      uint64_t v5 = "Could not find: ";
      goto LABEL_85;
    case 11:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000023;
      uint64_t v5 = "Building kernel collection failed: ";
      goto LABEL_85;
    case 12:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000001ALL;
      uint64_t v5 = "Unable to read extension: ";
      goto LABEL_85;
    case 13:
      int v2 = v145;
      unint64_t v3 = v146;
      goto LABEL_23;
    case 14:
      int v2 = *(void **)status;
      unint64_t v3 = (unint64_t)v142;
LABEL_23:
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000020;
      uint64_t v5 = "Unable to resolve dependencies: ";
      goto LABEL_85;
    case 15:
      uint64_t v27 = (uint64_t)v139;
      uint64_t v26 = v140;
      uint64_t v28 = *(void *)status;
      long long v29 = v142;
      uint64_t v30 = v143;
      long long v31 = v144;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(76);
      v32._object = (void *)0x800000010014D700;
      v32._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v32);
      v33._uint64_t countAndFlagsBits = v27;
      v33._object = v26;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = 0xD000000000000019;
      v34._object = (void *)0x800000010014D720;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = v28;
      v35._object = v29;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v36._object = (void *)0x800000010014D740;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = v30;
      v37._object = v31;
      String.append(_:)(v37);
      unint64_t v38 = 39;
      unint64_t v39 = 0xE100000000000000;
      goto LABEL_88;
    case 16:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000001BLL;
      uint64_t v5 = "Incompatible architecture: ";
      goto LABEL_85;
    case 17:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000001DLL;
      uint64_t v5 = "Validating extension failed: ";
      goto LABEL_85;
    case 18:
      uint64_t v40 = (uint64_t)v139;
      uint64_t v41 = v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      unint64_t v148 = 0x6F69736E65747845;
      unint64_t v149 = 0xEB0000000027206ELL;
      v42._uint64_t countAndFlagsBits = v40;
      v42._object = v41;
      String.append(_:)(v42);
      v43._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v43._object = (void *)0x800000010014DA30;
      String.append(_:)(v43);
      uint64_t v44 = Array.description.getter();
      goto LABEL_49;
    case 19:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      uint64_t v25 = "Filesystem error: ";
      goto LABEL_96;
    case 20:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000001FLL;
      uint64_t v5 = "Error while managing resource: ";
      goto LABEL_85;
    case 21:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000001FLL;
      uint64_t v5 = "KcgenFlow apis sequence error: ";
      goto LABEL_85;
    case 22:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000025;
      uint64_t v5 = "Recovery environment specific error: ";
      goto LABEL_85;
    case 23:
      unint64_t v38 = (unint64_t)v139;
      unint64_t v39 = (unint64_t)v140;
      uint64_t v46 = 0x7265206D6172764ELL;
      unsigned int v47 = 980578162;
      goto LABEL_52;
    case 24:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000018;
      uint64_t v5 = "Could not parse binary: ";
      goto LABEL_85;
    case 25:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000026;
      uint64_t v5 = "Format appears to be from the future: ";
      goto LABEL_85;
    case 26:
      char v48 = v139;
      unint64_t v49 = v140;
      uint64_t v50 = v139[2];
      if (v50 == 1)
      {
        uint64_t v51 = v139[4];
        uint64_t v52 = (void *)v139[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else if (v50)
      {
        unint64_t v148 = 10;
        unint64_t v149 = 0xE100000000000000;
        swift_bridgeObjectRetain_n();
        long long v136 = v49;
        swift_bridgeObjectRetain();
        uint64_t v75 = 0;
        unint64_t v76 = (void **)(v48 + 5);
        do
        {
          uint64_t v77 = v75 + 1;
          if (__OFADD__(v75, 1))
          {
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
            JUMPOUT(0x1000CD1F8);
          }
          uint64_t v79 = (uint64_t)*(v76 - 1);
          uint64_t v78 = *v76;
          swift_bridgeObjectRetain();
          v80._uint64_t countAndFlagsBits = 10;
          v80._object = (void *)0xE100000000000000;
          Swift::Bool v81 = String.hasSuffix(_:)(v80);
          if (v81) {
            uint64_t v82 = 0;
          }
          else {
            uint64_t v82 = 10;
          }
          if (v81) {
            uint64_t v83 = (void *)0xE000000000000000;
          }
          else {
            uint64_t v83 = (void *)0xE100000000000000;
          }
          v84._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v84);
          swift_bridgeObjectRelease();
          v85._uint64_t countAndFlagsBits = 8250;
          v85._object = (void *)0xE200000000000000;
          String.append(_:)(v85);
          v86._uint64_t countAndFlagsBits = v79;
          v86._object = v78;
          String.append(_:)(v86);
          v87._uint64_t countAndFlagsBits = v82;
          v87._object = v83;
          String.append(_:)(v87);
          swift_bridgeObjectRelease();
          v88._uint64_t countAndFlagsBits = 538976288;
          v88._object = (void *)0xE400000000000000;
          String.append(_:)(v88);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ++v75;
          v76 += 2;
        }
        while (v77 != v50);
        swift_bridgeObjectRelease_n();
        uint64_t v51 = v148;
        uint64_t v52 = (void *)v149;
        unint64_t v49 = v136;
      }
      else
      {
        if (!v140[2]) {
          return 0xD000000000000033;
        }
        swift_bridgeObjectRetain();
        uint64_t v51 = 0;
        uint64_t v52 = (void *)0xE000000000000000;
      }
      if (v49[2])
      {
        int64_t v89 = 0;
        uint64_t v90 = v49 + 8;
        uint64_t v91 = 1 << *((unsigned char *)v49 + 32);
        uint64_t v92 = -1;
        if (v91 < 64) {
          uint64_t v92 = ~(-1 << v91);
        }
        unint64_t v93 = v92 & v49[8];
        int64_t v94 = (unint64_t)(v91 + 63) >> 6;
        int64_t v134 = v94;
        if (!v93) {
          goto LABEL_118;
        }
LABEL_115:
        unint64_t v95 = __clz(__rbit64(v93));
        v93 &= v93 - 1;
        for (unint64_t i = v95 | (v89 << 6); ; unint64_t i = __clz(__rbit64(v99)) + (v89 << 6))
        {
          uint64_t v97 = *(void *)(v49[7] + 8 * i);
          if (*(void *)(v97 + 16))
          {
            int64_t v135 = v89;
            unint64_t v101 = (uint64_t *)(v49[6] + 16 * i);
            uint64_t v103 = *v101;
            uint64_t v102 = (void *)v101[1];
            unint64_t v148 = v51;
            unint64_t v149 = (unint64_t)v52;
            swift_bridgeObjectRetain();
            v104._uint64_t countAndFlagsBits = v103;
            v104._object = v102;
            String.append(_:)(v104);
            unint64_t v105 = v148;
            unint64_t v106 = v149;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            unint64_t v148 = v105;
            unint64_t v149 = v106;
            swift_bridgeObjectRetain();
            v107._uint64_t countAndFlagsBits = 0x6966696365707320;
            v107._object = (void *)0xEB00000000203A63;
            String.append(_:)(v107);
            swift_bridgeObjectRelease();
            unint64_t v109 = v148;
            unint64_t v108 = v149;
            unint64_t v148 = 10;
            unint64_t v149 = 0xE100000000000000;
            uint64_t v110 = *(void *)(v97 + 16);
            if (v110)
            {
              unint64_t v132 = v109;
              uint64_t v133 = v90;
              uint64_t v137 = v49;
              swift_bridgeObjectRetain();
              uint64_t v111 = 0;
              unint64_t v112 = (void **)(v97 + 40);
              uint64_t v138 = v110;
              do
              {
                uint64_t v114 = (uint64_t)*(v112 - 1);
                uint64_t v113 = *v112;
                swift_bridgeObjectRetain();
                v115._uint64_t countAndFlagsBits = 10;
                v115._object = (void *)0xE100000000000000;
                Swift::Bool v116 = String.hasSuffix(_:)(v115);
                if (v116) {
                  uint64_t v117 = 0;
                }
                else {
                  uint64_t v117 = 10;
                }
                if (v116) {
                  unint64_t v118 = (void *)0xE000000000000000;
                }
                else {
                  unint64_t v118 = (void *)0xE100000000000000;
                }
                ++v111;
                v119._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v119);
                swift_bridgeObjectRelease();
                v120._uint64_t countAndFlagsBits = 8250;
                v120._object = (void *)0xE200000000000000;
                String.append(_:)(v120);
                v121._uint64_t countAndFlagsBits = v114;
                v121._object = v113;
                String.append(_:)(v121);
                v122._uint64_t countAndFlagsBits = v117;
                v122._object = v118;
                String.append(_:)(v122);
                swift_bridgeObjectRelease();
                v123._uint64_t countAndFlagsBits = 538976288;
                v123._object = (void *)0xE400000000000000;
                String.append(_:)(v123);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v112 += 2;
              }
              while (v138 != v111);
              swift_bridgeObjectRelease_n();
              uint64_t v125 = v148;
              uint64_t v124 = (void *)v149;
              unint64_t v49 = v137;
              uint64_t v90 = v133;
              unint64_t v109 = v132;
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v124 = (void *)0xE100000000000000;
              uint64_t v125 = 10;
            }
            unint64_t v148 = v109;
            unint64_t v149 = v108;
            swift_bridgeObjectRetain();
            v126._uint64_t countAndFlagsBits = v125;
            v126._object = v124;
            String.append(_:)(v126);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v51 = v148;
            uint64_t v52 = (void *)v149;
            int64_t v94 = v134;
            int64_t v89 = v135;
            if (v93) {
              goto LABEL_115;
            }
          }
          else if (v93)
          {
            goto LABEL_115;
          }
LABEL_118:
          int64_t v98 = v89 + 1;
          if (__OFADD__(v89, 1)) {
            goto LABEL_152;
          }
          if (v98 >= v94) {
            break;
          }
          unint64_t v99 = v90[v98];
          ++v89;
          if (!v99)
          {
            int64_t v89 = v98 + 1;
            if (v98 + 1 >= v94) {
              break;
            }
            unint64_t v99 = v90[v89];
            if (!v99)
            {
              int64_t v89 = v98 + 2;
              if (v98 + 2 >= v94) {
                break;
              }
              unint64_t v99 = v90[v89];
              if (!v99)
              {
                int64_t v100 = v98 + 3;
                if (v100 >= v94) {
                  break;
                }
                unint64_t v99 = v90[v100];
                if (!v99)
                {
                  while (1)
                  {
                    int64_t v89 = v100 + 1;
                    if (__OFADD__(v100, 1)) {
                      goto LABEL_153;
                    }
                    if (v89 >= v94) {
                      goto LABEL_145;
                    }
                    unint64_t v99 = v90[v89];
                    ++v100;
                    if (v99) {
                      goto LABEL_131;
                    }
                  }
                }
                int64_t v89 = v100;
              }
            }
          }
LABEL_131:
          unint64_t v93 = (v99 - 1) & v99;
        }
LABEL_145:
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      unint64_t v148 = 0xD00000000000002CLL;
      unint64_t v149 = 0x800000010014D9A0;
      v127._uint64_t countAndFlagsBits = v51;
      v127._object = v52;
      String.append(_:)(v127);
      swift_bridgeObjectRelease();
      return v148;
    case 27:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000001BLL;
      uint64_t v5 = "Unable to stage extension: ";
      goto LABEL_85;
    case 28:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000015;
      uint64_t v5 = "System policy error: ";
      goto LABEL_85;
    case 29:
      uint64_t v53 = (uint64_t)v139;
      Swift::String v54 = v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(91);
      v55._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v55._object = (void *)0x800000010014D840;
      String.append(_:)(v55);
      v56._uint64_t countAndFlagsBits = v53;
      v56._object = v54;
      String.append(_:)(v56);
      unint64_t v38 = 0xD00000000000003FLL;
      unint64_t v57 = " is not approved to load. Please approve using System Settings.";
      goto LABEL_43;
    case 30:
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(89);
      v58._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      v58._object = (void *)0x800000010014D7E0;
      String.append(_:)(v58);
      sub_100004700(&qword_10017F150);
      sub_10001348C(&qword_10017F158, &qword_10017F150);
      sub_100029B24();
      v59._uint64_t countAndFlagsBits = Sequence<>.joined(separator:)();
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      unint64_t v38 = 0xD00000000000003CLL;
      unint64_t v57 = " not approved to load. Please approve using System Settings.";
LABEL_43:
      unint64_t v39 = (unint64_t)(v57 - 32) | 0x8000000000000000;
      goto LABEL_88;
    case 31:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000021;
      uint64_t v5 = "Authenticating extension failed: ";
      goto LABEL_85;
    case 32:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000019;
      uint64_t v5 = "Failed to enter sandbox: ";
      goto LABEL_85;
    case 33:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000023;
      uint64_t v5 = "Failed to read configuration file: ";
      goto LABEL_85;
    case 34:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000027;
      uint64_t v5 = "Error interacting with logging system: ";
      goto LABEL_85;
    case 35:
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      unint64_t v148 = 0xD000000000000028;
      unint64_t v149 = 0x800000010014D6B0;
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_49:
      String.append(_:)(*(Swift::String *)&v44);
      swift_bridgeObjectRelease();
      return v148;
    case 36:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000025;
      uint64_t v5 = "Insufficient permissions for action: ";
      goto LABEL_85;
    case 37:
      unint64_t v38 = (unint64_t)v139;
      unint64_t v39 = (unint64_t)v140;
      uint64_t v46 = 0x2064696C61766E49;
      unsigned int v47 = 981034347;
LABEL_52:
      unint64_t v60 = v47 | 0xED00002000000000;
      goto LABEL_94;
    case 38:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000025;
      uint64_t v5 = "Error occurred unloading extensions: ";
      goto LABEL_85;
    case 39:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000023;
      uint64_t v5 = "Error occurred while using kclist: ";
      goto LABEL_85;
    case 40:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      unint64_t v61 = 0xD000000000000032;
      uint64_t v62 = "Error occured while reading kextinfo from kernel: ";
      goto LABEL_57;
    case 41:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      unint64_t v61 = 0xD000000000000033;
      uint64_t v62 = "Error occurred while dumping kernelmanagerd state: ";
LABEL_57:
      unint64_t v63 = (unint64_t)(v62 - 32) | 0x8000000000000000;
      String.append(_:)(*(Swift::String *)&v61);
      goto LABEL_87;
    case 42:
      uint64_t v64 = (uint64_t)v139;
      unint64_t v65 = v140;
      unint64_t v19 = *(void *)status;
      unint64_t v18 = (unint64_t)v142;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      unint64_t v148 = 0xD000000000000028;
      unint64_t v149 = 0x800000010014D570;
      v66._uint64_t countAndFlagsBits = v64;
      v66._object = v65;
      String.append(_:)(v66);
      uint64_t v21 = 2112039;
      unint64_t v22 = 0xE300000000000000;
LABEL_59:
      String.append(_:)(*(Swift::String *)&v21);
      unint64_t v38 = v19;
      unint64_t v39 = v18;
      goto LABEL_88;
    case 43:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000013;
      uint64_t v5 = "Boot policy error: ";
      goto LABEL_85;
    case 44:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000028;
      uint64_t v5 = "Error reading the AppleKextExcludeList: ";
      goto LABEL_85;
    case 45:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      if (status[1])
      {
        unint64_t v148 = 0;
        unint64_t v149 = 0xE000000000000000;
        _StringGuts.grow(_:)(24);
        swift_bridgeObjectRelease();
        unint64_t v4 = 0xD000000000000016;
        uint64_t v5 = "Code signature error: ";
LABEL_85:
        unint64_t v68 = (unint64_t)(v5 - 32) | 0x8000000000000000;
LABEL_86:
        unint64_t v148 = v4;
        unint64_t v149 = v68;
      }
      else
      {
        CFStringRef v70 = SecCopyErrorMessageString(status[0], 0);
        if (v70)
        {
          uint64_t v71 = (__CFString *)v70;
          unint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v74 = v73;
        }
        else
        {
          unint64_t v72 = 0xD000000000000018;
          uint64_t v74 = (void *)0x800000010014D500;
        }
        unint64_t v148 = 0;
        unint64_t v149 = 0xE000000000000000;
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease();
        unint64_t v148 = 0xD000000000000016;
        unint64_t v149 = 0x800000010014D4E0;
        v128._uint64_t countAndFlagsBits = v72;
        v128._object = v74;
        String.append(_:)(v128);
        swift_bridgeObjectRelease();
        v129._uint64_t countAndFlagsBits = 10272;
        v129._object = (void *)0xE200000000000000;
        String.append(_:)(v129);
        v130._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v130);
        swift_bridgeObjectRelease();
        v131._uint64_t countAndFlagsBits = 2112041;
        v131._object = (void *)0xE300000000000000;
        String.append(_:)(v131);
      }
      goto LABEL_87;
    case 46:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000027;
      uint64_t v5 = "Error occurred triggering Panic Medic: ";
      goto LABEL_85;
    case 47:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000001FLL;
      uint64_t v5 = "Error occurred checking UUIDs: ";
      goto LABEL_85;
    case 48:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000011;
      uint64_t v5 = "Safe boot error: ";
      goto LABEL_85;
    case 49:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000010;
      uint64_t v5 = "DarwinOS error: ";
      goto LABEL_85;
    case 50:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000010;
      uint64_t v5 = "Internal error: ";
      goto LABEL_85;
    case 51:
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      unint64_t v148 = 0xD000000000000016;
      unint64_t v149 = 0x800000010014D3D0;
      sub_100004700(&qword_10017F150);
      sub_10001348C(&qword_10017F158, &qword_10017F150);
      sub_100029B24();
      v67._uint64_t countAndFlagsBits = Sequence<>.joined(separator:)();
      String.append(_:)(v67);
      swift_bridgeObjectRelease();
      unint64_t v39 = 0x800000010014D3F0;
      unint64_t v38 = 0xD000000000000012;
      goto LABEL_88;
    case 52:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0x20534F6E6567634BLL;
      unint64_t v68 = 0xEF203A726F727265;
      goto LABEL_86;
    case 53:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000001BLL;
      uint64_t v5 = "Duplicate extension error :";
      goto LABEL_85;
    case 54:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000011;
      uint64_t v5 = "In exclude list: ";
      goto LABEL_85;
    case 55:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000027;
      uint64_t v5 = "migrateAuxKCForVolumeGroupUUID failed: ";
      goto LABEL_85;
    case 56:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000013;
      uint64_t v5 = "Unsupported Error: ";
      goto LABEL_85;
    case 57:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000016;
      uint64_t v5 = "DeveloperTools Error: ";
      goto LABEL_85;
    case 58:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0x20746573656C6946;
      unint64_t v68 = 0xEF203A726F727245;
      goto LABEL_86;
    case 59:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000017;
      uint64_t v5 = "Missing Developer Kit: ";
      goto LABEL_85;
    case 60:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000015;
      uint64_t v5 = "KDK-Installer Error: ";
      goto LABEL_85;
    case 61:
      unint64_t v38 = (unint64_t)v139;
      unint64_t v39 = (unint64_t)v140;
      uint64_t v46 = 0x72724520786F6E4BLL;
      unint64_t v60 = 0xEC000000203A726FLL;
      goto LABEL_94;
    case 62:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000018;
      uint64_t v5 = "packageInstaller Error: ";
      goto LABEL_85;
    case 63:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      uint64_t v25 = "DextRecord Error: ";
      goto LABEL_96;
    case 64:
    case 66:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000025;
      uint64_t v5 = "SysExtensionWaitForTerminationError: ";
      goto LABEL_85;
    case 65:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000002ELL;
      uint64_t v5 = "SysExtensionWaitForUninstallTerminationError: ";
      goto LABEL_85;
    case 67:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD00000000000001CLL;
      uint64_t v5 = "BuildManifestNotFoundError: ";
      goto LABEL_85;
    case 68:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000011;
      uint64_t v5 = "Invalid Request: ";
      goto LABEL_85;
    case 69:
      unint64_t v38 = (unint64_t)v139;
      unint64_t v39 = (unint64_t)v140;
      uint64_t v46 = 0x697463656E6E6F43;
      unint64_t v60 = 0xEC000000203A6E6FLL;
      goto LABEL_94;
    case 70:
      unint64_t v38 = (unint64_t)v139;
      unint64_t v39 = (unint64_t)v140;
      uint64_t v46 = 0x74754F64656D6954;
      unint64_t v60 = 0xEA0000000000203ALL;
      goto LABEL_94;
    case 71:
      unint64_t v38 = (unint64_t)v139;
      unint64_t v39 = (unint64_t)v140;
      uint64_t v46 = 0x203A79737542;
      unint64_t v60 = 0xE600000000000000;
LABEL_94:
      unint64_t v148 = v46;
      unint64_t v149 = v60;
      goto LABEL_88;
    case 72:
      int v2 = v139;
      unint64_t v3 = (unint64_t)v140;
      unint64_t v148 = 0;
      unint64_t v149 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      uint64_t v25 = "Arithmetic Error: ";
LABEL_96:
      unint64_t v148 = 0xD000000000000012;
      unint64_t v149 = (unint64_t)(v25 - 32) | 0x8000000000000000;
LABEL_87:
      unint64_t v38 = (unint64_t)v2;
      unint64_t v39 = v3;
LABEL_88:
      String.append(_:)(*(Swift::String *)&v38);
      return v148;
    case 73:
      return v1;
    default:
      unsigned int v6 = v139;
      int64_t v7 = v139[2];
      if (v7)
      {
        sub_10000C884(0, v7, 0);
        uint64_t v8 = (uint64_t)(v6 + 4);
        do
        {
          sub_10005BFC4(v8, (uint64_t)&v148);
          uint64_t v9 = sub_10009AEC8((uint64_t)&v148, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10005C020);
          uint64_t v10 = sub_1000CB9EC(v9);
          uint64_t v12 = v11;
          sub_10009AEC8((uint64_t)&v148, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10003E9C8);
          unint64_t v14 = _swiftEmptyArrayStorage[2];
          unint64_t v13 = _swiftEmptyArrayStorage[3];
          if (v14 >= v13 >> 1) {
            sub_10000C884(v13 > 1, v14 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v14 + 1;
          int v15 = &_swiftEmptyArrayStorage[2 * v14];
          v15[4] = v10;
          v15[5] = v12;
          v8 += 80;
          --v7;
        }
        while (v7);
      }
      sub_100004700((uint64_t *)&unk_10017E5D0);
      sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
      uint64_t v1 = BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      return v1;
  }
}

id sub_1000CD320()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100004700(&qword_10017C230);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100132F10;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v2;
  sub_10009AEC8(v0, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10005C020);
  unint64_t v3 = sub_1000CB9EC();
  uint64_t v5 = v4;
  sub_10009AEC8(v0, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10003E9C8);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = v5;
  sub_100016BFC(inited);
  id v6 = objc_allocWithZone((Class)NSError);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithDomain:v7 code:5 userInfo:isa];

  return v9;
}

uint64_t sub_1000CD484()
{
  return 12383;
}

uint64_t sub_1000CD494(uint64_t a1)
{
  unint64_t v2 = sub_1000D618C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CD4D0(uint64_t a1)
{
  unint64_t v2 = sub_1000D618C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CD50C(char a1)
{
  uint64_t result = 0x656C7069746C756DLL;
  switch(a1)
  {
    case 1:
      return 0x6C61697265736564;
    case 2:
      return 0xD000000000000013;
    case 3:
      return 0x65526C656E72656BLL;
    case 4:
      return 0x694B726576697264;
    case 5:
      return 0x6F69736E65747865;
    case 6:
      return 0x697463656C6C6F63;
    case 7:
      return 0xD000000000000011;
    case 8:
      return 0x656372756F736572;
    case 9:
      return 0x7A696C6169726573;
    case 10:
      return 0x4164696C61766E69;
    case 11:
      return 0x646E756F46746F6ELL;
    case 12:
      return 0xD000000000000015;
    case 13:
      return 0x6E697A696C616572;
    case 14:
      return 0xD000000000000014;
    case 15:
      return 0xD000000000000018;
    case 16:
      return 0xD000000000000013;
    case 17:
      return 0xD000000000000018;
    case 18:
      uint64_t v3 = 0x6164696C6176;
      goto LABEL_73;
    case 19:
      return 0xD000000000000011;
    case 20:
      return 0x74737973656C6966;
    case 21:
      unsigned int v4 = 1802725732;
      goto LABEL_24;
    case 22:
      unsigned int v4 = 2003790950;
LABEL_24:
      uint64_t result = v4 | 0x6563634100000000;
      break;
    case 23:
      uint64_t result = 0x797265766F636572;
      break;
    case 24:
      uint64_t result = 0x6363416D6172766ELL;
      break;
    case 25:
      uint64_t result = 0x61507972616E6962;
      break;
    case 26:
      uint64_t result = 0x6556657275747566;
      break;
    case 27:
      uint64_t result = 0x6975426568636163;
      break;
    case 28:
      uint64_t result = 0x676E6967617473;
      break;
    case 29:
      uint64_t result = 0x6F506D6574737973;
      break;
    case 30:
    case 36:
    case 41:
    case 48:
    case 57:
      uint64_t result = 0xD000000000000010;
      break;
    case 31:
      uint64_t result = 0xD000000000000018;
      break;
    case 32:
      uint64_t result = 0x69746E6568747561;
      break;
    case 33:
      uint64_t result = 0x786F62646E6173;
      break;
    case 34:
      uint64_t result = 0x72756769666E6F63;
      break;
    case 35:
      uint64_t result = 0x45676E6967676F6CLL;
      break;
    case 37:
      uint64_t result = 0xD000000000000017;
      break;
    case 38:
      uint64_t result = 0x4B64696C61766E69;
      break;
    case 39:
      uint64_t result = 0x64616F6C6E75;
      break;
    case 40:
      uint64_t result = 0x6F7272457473696CLL;
      break;
    case 42:
      uint64_t result = 0x74617473706D7564;
      break;
    case 43:
      uint64_t result = 0x65736F6E67616964;
      break;
    case 44:
      uint64_t result = 0x696C6F50746F6F62;
      break;
    case 45:
      uint64_t result = 0x6F69747065637865;
      break;
    case 46:
      uint64_t result = 0x6E67695365646F63;
      break;
    case 47:
      uint64_t result = 0xD000000000000011;
      break;
    case 49:
      uint64_t result = 0x6F42656661536E69;
      break;
    case 50:
      uint64_t result = 0x6E69777261446E69;
      break;
    case 51:
      uint64_t result = 0x6C616E7265746E69;
      break;
    case 52:
      uint64_t result = 0x7365726975716572;
      break;
    case 53:
      uint64_t result = 0x4F6E6567634B6E69;
      break;
    case 54:
      uint64_t result = 0xD000000000000012;
      break;
    case 55:
      uint64_t result = 0x64756C6378456E69;
      break;
    case 56:
      uint64_t result = 0x6F6974617267696DLL;
      break;
    case 58:
      uint64_t result = 0xD000000000000013;
      break;
    case 59:
      uint64_t result = 0x45746573656C6966;
      break;
    case 60:
      uint64_t result = 0xD000000000000013;
      break;
    case 61:
      uint64_t result = 0xD000000000000011;
      break;
    case 62:
      uint64_t result = 0xD000000000000013;
      break;
    case 63:
      uint64_t result = 0xD000000000000015;
      break;
    case 64:
      uint64_t result = 0x6F63655274786564;
      break;
    case 65:
      uint64_t result = 0xD000000000000021;
      break;
    case 66:
      uint64_t result = 0xD00000000000002ALL;
      break;
    case 67:
      uint64_t result = 0xD000000000000015;
      break;
    case 68:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 69:
      uint64_t result = 0x5264696C61766E69;
      break;
    case 70:
      uint64_t v3 = 0x63656E6E6F63;
LABEL_73:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
      break;
    case 71:
      uint64_t result = 0x74754F64656D6974;
      break;
    case 72:
      uint64_t result = 2037609826;
      break;
    case 73:
      uint64_t result = 0x74656D6874697261;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000CDE60(uint64_t a1)
{
  unint64_t v2 = sub_1000D6F00();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CDE9C(uint64_t a1)
{
  unint64_t v2 = sub_1000D6F00();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CDED8(uint64_t a1)
{
  unint64_t v2 = sub_1000D71F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CDF14(uint64_t a1)
{
  unint64_t v2 = sub_1000D71F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CDF50(uint64_t a1)
{
  unint64_t v2 = sub_1000D6B10();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CDF8C(uint64_t a1)
{
  unint64_t v2 = sub_1000D6B10();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CDFC8(uint64_t a1)
{
  unint64_t v2 = sub_1000D6330();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE004(uint64_t a1)
{
  unint64_t v2 = sub_1000D6330();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE040(uint64_t a1)
{
  unint64_t v2 = sub_1000D61E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE07C(uint64_t a1)
{
  unint64_t v2 = sub_1000D61E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE0B8()
{
  if (*v0) {
    return 0x746E656449726570;
  }
  else {
    return 12383;
  }
}

uint64_t sub_1000CE0F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D7B20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000CE11C(uint64_t a1)
{
  unint64_t v2 = sub_1000D70A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE158(uint64_t a1)
{
  unint64_t v2 = sub_1000D70A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE194()
{
  if (*v0) {
    return 12639;
  }
  else {
    return 12383;
  }
}

uint64_t sub_1000CE1B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D9E78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000CE1D8(uint64_t a1)
{
  unint64_t v2 = sub_1000D6A68();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE214(uint64_t a1)
{
  unint64_t v2 = sub_1000D6A68();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE250()
{
  return sub_1000CD50C(*v0);
}

uint64_t sub_1000CE258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D7C20(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000CE280(unsigned char *a1@<X8>)
{
  *a1 = 74;
}

uint64_t sub_1000CE28C(uint64_t a1)
{
  unint64_t v2 = sub_1000D6138();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE2C8(uint64_t a1)
{
  unint64_t v2 = sub_1000D6138();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE304(uint64_t a1)
{
  unint64_t v2 = sub_1000D782C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE340(uint64_t a1)
{
  unint64_t v2 = sub_1000D782C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE37C(uint64_t a1)
{
  unint64_t v2 = sub_1000D7880();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE3B8(uint64_t a1)
{
  unint64_t v2 = sub_1000D7880();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE3F4(uint64_t a1)
{
  unint64_t v2 = sub_1000D6E58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE430(uint64_t a1)
{
  unint64_t v2 = sub_1000D6E58();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE46C(uint64_t a1)
{
  unint64_t v2 = sub_1000D6288();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE4A8(uint64_t a1)
{
  unint64_t v2 = sub_1000D6288();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE4E4(uint64_t a1)
{
  unint64_t v2 = sub_1000D69C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE520(uint64_t a1)
{
  unint64_t v2 = sub_1000D69C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE55C()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 1953066351;
  }
}

uint64_t sub_1000CE594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D9AF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000CE5BC(uint64_t a1)
{
  unint64_t v2 = sub_1000D758C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE5F8(uint64_t a1)
{
  unint64_t v2 = sub_1000D758C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE634(uint64_t a1)
{
  unint64_t v2 = sub_1000D7A24();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE670(uint64_t a1)
{
  unint64_t v2 = sub_1000D7A24();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE6AC(uint64_t a1)
{
  unint64_t v2 = sub_1000D6678();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE6E8(uint64_t a1)
{
  unint64_t v2 = sub_1000D6678();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE724(uint64_t a1)
{
  unint64_t v2 = sub_1000D6480();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE760(uint64_t a1)
{
  unint64_t v2 = sub_1000D6480();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE79C(uint64_t a1)
{
  unint64_t v2 = sub_1000D6B64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE7D8(uint64_t a1)
{
  unint64_t v2 = sub_1000D6B64();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE814(uint64_t a1)
{
  unint64_t v2 = sub_1000D7340();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE850(uint64_t a1)
{
  unint64_t v2 = sub_1000D7340();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE88C(uint64_t a1)
{
  unint64_t v2 = sub_1000D7928();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE8C8(uint64_t a1)
{
  unint64_t v2 = sub_1000D7928();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE904(uint64_t a1)
{
  unint64_t v2 = sub_1000D6BB8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE940(uint64_t a1)
{
  unint64_t v2 = sub_1000D6BB8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE97C(uint64_t a1)
{
  unint64_t v2 = sub_1000D67C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE9B8(uint64_t a1)
{
  unint64_t v2 = sub_1000D67C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE9F4(uint64_t a1)
{
  unint64_t v2 = sub_1000D6ABC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CEA30(uint64_t a1)
{
  unint64_t v2 = sub_1000D6ABC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CEA6C(uint64_t a1)
{
  unint64_t v2 = sub_1000D78D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CEAA8(uint64_t a1)
{
  unint64_t v2 = sub_1000D78D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CEAE4(uint64_t a1)
{
  unint64_t v2 = sub_1000D6624();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CEB20(uint64_t a1)
{
  unint64_t v2 = sub_1000D6624();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CEB5C(uint64_t a1)
{
  unint64_t v2 = sub_1000D7394();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CEB98(uint64_t a1)
{
  unint64_t v2 = sub_1000D7394();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CEBD4(uint64_t a1)
{
  unint64_t v2 = sub_1000D72EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CEC10(uint64_t a1)
{
  unint64_t v2 = sub_1000D72EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CEC4C(uint64_t a1)
{
  unint64_t v2 = sub_1000D719C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CEC88(uint64_t a1)
{
  unint64_t v2 = sub_1000D719C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CECC4(uint64_t a1)
{
  unint64_t v2 = sub_1000D6918();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CED00(uint64_t a1)
{
  unint64_t v2 = sub_1000D6918();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CED3C(uint64_t a1)
{
  unint64_t v2 = sub_1000D6774();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CED78(uint64_t a1)
{
  unint64_t v2 = sub_1000D6774();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CEDB4(uint64_t a1)
{
  unint64_t v2 = sub_1000D681C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CEDF0(uint64_t a1)
{
  unint64_t v2 = sub_1000D681C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CEE2C(uint64_t a1)
{
  unint64_t v2 = sub_1000D696C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CEE68(uint64_t a1)
{
  unint64_t v2 = sub_1000D696C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CEEA4(uint64_t a1)
{
  unint64_t v2 = sub_1000D7490();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CEEE0(uint64_t a1)
{
  unint64_t v2 = sub_1000D7490();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CEF1C()
{
  uint64_t v1 = 0x5664657269736564;
  if (*v0 != 1) {
    uint64_t v1 = 0x65566C6175746361;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t sub_1000CEF94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D9BD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000CEFBC(uint64_t a1)
{
  unint64_t v2 = sub_1000D74E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CEFF8(uint64_t a1)
{
  unint64_t v2 = sub_1000D74E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF034(uint64_t a1)
{
  unint64_t v2 = sub_1000D6D5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF070(uint64_t a1)
{
  unint64_t v2 = sub_1000D6D5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF0AC(uint64_t a1)
{
  unint64_t v2 = sub_1000D68C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF0E8(uint64_t a1)
{
  unint64_t v2 = sub_1000D68C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF124(uint64_t a1)
{
  unint64_t v2 = sub_1000D7730();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF160(uint64_t a1)
{
  unint64_t v2 = sub_1000D7730();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF19C(uint64_t a1)
{
  unint64_t v2 = sub_1000D6D08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF1D8(uint64_t a1)
{
  unint64_t v2 = sub_1000D6D08();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF214(uint64_t a1)
{
  unint64_t v2 = sub_1000D73E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF250(uint64_t a1)
{
  unint64_t v2 = sub_1000D73E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF28C(uint64_t a1)
{
  unint64_t v2 = sub_1000D62DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF2C8(uint64_t a1)
{
  unint64_t v2 = sub_1000D62DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF304(uint64_t a1)
{
  unint64_t v2 = sub_1000D657C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF340(uint64_t a1)
{
  unint64_t v2 = sub_1000D657C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF37C(uint64_t a1)
{
  unint64_t v2 = sub_1000D7688();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF3B8(uint64_t a1)
{
  unint64_t v2 = sub_1000D7688();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF3F4(uint64_t a1)
{
  unint64_t v2 = sub_1000D79D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF430(uint64_t a1)
{
  unint64_t v2 = sub_1000D79D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF46C(uint64_t a1)
{
  unint64_t v2 = sub_1000D797C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF4A8(uint64_t a1)
{
  unint64_t v2 = sub_1000D797C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF4E4(uint64_t a1)
{
  unint64_t v2 = sub_1000D6528();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF520(uint64_t a1)
{
  unint64_t v2 = sub_1000D6528();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF55C(uint64_t a1)
{
  unint64_t v2 = sub_1000D6C60();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF598(uint64_t a1)
{
  unint64_t v2 = sub_1000D6C60();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF5D4(uint64_t a1)
{
  unint64_t v2 = sub_1000D6E04();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF610(uint64_t a1)
{
  unint64_t v2 = sub_1000D6E04();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF64C(uint64_t a1)
{
  unint64_t v2 = sub_1000D6720();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF688(uint64_t a1)
{
  unint64_t v2 = sub_1000D6720();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF6C4()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t sub_1000CF708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D9D7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000CF730(uint64_t a1)
{
  unint64_t v2 = sub_1000D7538();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF76C(uint64_t a1)
{
  unint64_t v2 = sub_1000D7538();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF7A8(uint64_t a1)
{
  unint64_t v2 = sub_1000D65D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF7E4(uint64_t a1)
{
  unint64_t v2 = sub_1000D65D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF820()
{
  return 0x73726F727265;
}

uint64_t sub_1000CF834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73726F727265 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1000CF8C4(uint64_t a1)
{
  unint64_t v2 = sub_1000D7A78();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF900(uint64_t a1)
{
  unint64_t v2 = sub_1000D7A78();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF93C(uint64_t a1)
{
  unint64_t v2 = sub_1000D76DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF978(uint64_t a1)
{
  unint64_t v2 = sub_1000D76DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF9B4(uint64_t a1)
{
  unint64_t v2 = sub_1000D7244();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF9F0(uint64_t a1)
{
  unint64_t v2 = sub_1000D7244();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFA2C(uint64_t a1)
{
  unint64_t v2 = sub_1000D64D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CFA68(uint64_t a1)
{
  unint64_t v2 = sub_1000D64D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFAA4(uint64_t a1)
{
  unint64_t v2 = sub_1000D7634();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CFAE0(uint64_t a1)
{
  unint64_t v2 = sub_1000D7634();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFB1C(uint64_t a1)
{
  unint64_t v2 = sub_1000D7298();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CFB58(uint64_t a1)
{
  unint64_t v2 = sub_1000D7298();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFB94(uint64_t a1)
{
  unint64_t v2 = sub_1000D6870();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CFBD0(uint64_t a1)
{
  unint64_t v2 = sub_1000D6870();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFC0C(uint64_t a1)
{
  unint64_t v2 = sub_1000D77D8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CFC48(uint64_t a1)
{
  unint64_t v2 = sub_1000D77D8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFC84(uint64_t a1)
{
  unint64_t v2 = sub_1000D6C0C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CFCC0(uint64_t a1)
{
  unint64_t v2 = sub_1000D6C0C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFCFC(uint64_t a1)
{
  unint64_t v2 = sub_1000D6EAC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CFD38(uint64_t a1)
{
  unint64_t v2 = sub_1000D6EAC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFD74(uint64_t a1)
{
  unint64_t v2 = sub_1000D7784();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CFDB0(uint64_t a1)
{
  unint64_t v2 = sub_1000D7784();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFDEC(uint64_t a1)
{
  unint64_t v2 = sub_1000D7050();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CFE28(uint64_t a1)
{
  unint64_t v2 = sub_1000D7050();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFE64(uint64_t a1)
{
  unint64_t v2 = sub_1000D6DB0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CFEA0(uint64_t a1)
{
  unint64_t v2 = sub_1000D6DB0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFEDC(uint64_t a1)
{
  unint64_t v2 = sub_1000D642C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CFF18(uint64_t a1)
{
  unint64_t v2 = sub_1000D642C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFF54(uint64_t a1)
{
  unint64_t v2 = sub_1000D63D8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CFF90(uint64_t a1)
{
  unint64_t v2 = sub_1000D63D8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CFFCC(uint64_t a1)
{
  unint64_t v2 = sub_1000D6384();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D0008(uint64_t a1)
{
  unint64_t v2 = sub_1000D6384();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D0044(uint64_t a1)
{
  unint64_t v2 = sub_1000D6FFC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D0080(uint64_t a1)
{
  unint64_t v2 = sub_1000D6FFC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D00BC(uint64_t a1)
{
  unint64_t v2 = sub_1000D6234();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D00F8(uint64_t a1)
{
  unint64_t v2 = sub_1000D6234();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D0134(uint64_t a1)
{
  unint64_t v2 = sub_1000D6A14();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D0170(uint64_t a1)
{
  unint64_t v2 = sub_1000D6A14();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D01AC(uint64_t a1)
{
  unint64_t v2 = sub_1000D6FA8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D01E8(uint64_t a1)
{
  unint64_t v2 = sub_1000D6FA8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D0224(uint64_t a1)
{
  unint64_t v2 = sub_1000D6F54();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D0260(uint64_t a1)
{
  unint64_t v2 = sub_1000D6F54();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D029C(uint64_t a1)
{
  unint64_t v2 = sub_1000D6CB4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D02D8(uint64_t a1)
{
  unint64_t v2 = sub_1000D6CB4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D0314(uint64_t a1)
{
  unint64_t v2 = sub_1000D66CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D0350(uint64_t a1)
{
  unint64_t v2 = sub_1000D66CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D038C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1000D040C(uint64_t a1)
{
  unint64_t v2 = sub_1000D743C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D0448(uint64_t a1)
{
  unint64_t v2 = sub_1000D743C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D0484(void *a1)
{
  uint64_t v368 = sub_100004700(&qword_10017F418);
  uint64_t v224 = *(void *)(v368 - 8);
  __chkstk_darwin(v368);
  v367 = (char *)&v158 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v366 = sub_100004700(&qword_10017F420);
  uint64_t v223 = *(void *)(v366 - 8);
  __chkstk_darwin(v366);
  v365 = (char *)&v158 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v364 = sub_100004700(&qword_10017F428);
  uint64_t v222 = *(void *)(v364 - 8);
  __chkstk_darwin(v364);
  v363 = (char *)&v158 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v362 = sub_100004700(&qword_10017F430);
  uint64_t v221 = *(void *)(v362 - 8);
  __chkstk_darwin(v362);
  v361 = (char *)&v158 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v360 = sub_100004700(&qword_10017F438);
  uint64_t v220 = *(void *)(v360 - 8);
  __chkstk_darwin(v360);
  v359 = (char *)&v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v358 = sub_100004700(&qword_10017F440);
  uint64_t v219 = *(void *)(v358 - 8);
  __chkstk_darwin(v358);
  unint64_t v357 = (char *)&v158 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v356 = sub_100004700(&qword_10017F448);
  uint64_t v218 = *(void *)(v356 - 8);
  __chkstk_darwin(v356);
  uint64_t v355 = (char *)&v158 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v354 = sub_100004700(&qword_10017F450);
  uint64_t v217 = *(void *)(v354 - 8);
  __chkstk_darwin(v354);
  unint64_t v353 = (char *)&v158 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v352 = sub_100004700(&qword_10017F458);
  uint64_t v216 = *(void *)(v352 - 8);
  __chkstk_darwin(v352);
  uint64_t v351 = (char *)&v158 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v350 = sub_100004700(&qword_10017F460);
  uint64_t v215 = *(void *)(v350 - 8);
  __chkstk_darwin(v350);
  long long v349 = (char *)&v158 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v348 = sub_100004700(&qword_10017F468);
  uint64_t v214 = *(void *)(v348 - 8);
  __chkstk_darwin(v348);
  long long v347 = (char *)&v158 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v346 = sub_100004700(&qword_10017F470);
  uint64_t v213 = *(void *)(v346 - 8);
  __chkstk_darwin(v346);
  v345 = (char *)&v158 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v344 = sub_100004700(&qword_10017F478);
  v212[1] = *(void *)(v344 - 8);
  __chkstk_darwin(v344);
  unint64_t v343 = (char *)&v158 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v342 = sub_100004700(&qword_10017F480);
  v212[0] = *(void *)(v342 - 8);
  __chkstk_darwin(v342);
  v341 = (char *)&v158 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v340 = sub_100004700(&qword_10017F488);
  uint64_t v211 = *(void *)(v340 - 8);
  __chkstk_darwin(v340);
  v339 = (char *)&v158 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v338 = sub_100004700(&qword_10017F490);
  uint64_t v210 = *(void *)(v338 - 8);
  __chkstk_darwin(v338);
  uint64_t v337 = (char *)&v158 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v336 = sub_100004700(&qword_10017F498);
  uint64_t v209 = *(void *)(v336 - 8);
  __chkstk_darwin(v336);
  v335 = (char *)&v158 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v334 = sub_100004700(&qword_10017F4A0);
  uint64_t v208 = *(void *)(v334 - 8);
  __chkstk_darwin(v334);
  uint64_t v333 = (char *)&v158 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v332 = sub_100004700(&qword_10017F4A8);
  uint64_t v207 = *(void *)(v332 - 8);
  __chkstk_darwin(v332);
  v331 = (char *)&v158 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v330 = sub_100004700(&qword_10017F4B0);
  uint64_t v206 = *(void *)(v330 - 8);
  __chkstk_darwin(v330);
  v329 = (char *)&v158 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v328 = sub_100004700(&qword_10017F4B8);
  v205[1] = *(void *)(v328 - 8);
  __chkstk_darwin(v328);
  v326 = (char *)&v158 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v327 = sub_100004700(&qword_10017F4C0);
  v205[0] = *(void *)(v327 - 8);
  __chkstk_darwin(v327);
  v325 = (char *)&v158 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v324 = sub_100004700(&qword_10017F4C8);
  uint64_t v204 = *(void *)(v324 - 8);
  __chkstk_darwin(v324);
  v323 = (char *)&v158 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v322 = sub_100004700(&qword_10017F4D0);
  v203[1] = *(void *)(v322 - 8);
  __chkstk_darwin(v322);
  uint64_t v321 = (char *)&v158 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v320 = sub_100004700(&qword_10017F4D8);
  v203[0] = *(void *)(v320 - 8);
  __chkstk_darwin(v320);
  v319 = (char *)&v158 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v318 = sub_100004700(&qword_10017F4E0);
  v202[1] = *(void *)(v318 - 8);
  __chkstk_darwin(v318);
  v316 = (char *)&v158 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v315 = sub_100004700(&qword_10017F4E8);
  uint64_t v201 = *(void *)(v315 - 8);
  __chkstk_darwin(v315);
  v313 = (char *)&v158 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v317 = sub_100004700(&qword_10017F4F0);
  v202[0] = *(void *)(v317 - 8);
  __chkstk_darwin(v317);
  v314 = (char *)&v158 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v312 = sub_100004700(&qword_10017F4F8);
  uint64_t v200 = *(void *)(v312 - 8);
  __chkstk_darwin(v312);
  uint64_t v310 = (char *)&v158 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v309 = sub_100004700(&qword_10017F500);
  uint64_t v198 = *(void *)(v309 - 8);
  __chkstk_darwin(v309);
  v307 = (char *)&v158 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v311 = sub_100004700(&qword_10017F508);
  uint64_t v199 = *(void *)(v311 - 8);
  __chkstk_darwin(v311);
  v308 = (char *)&v158 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v306 = sub_100004700(&qword_10017F510);
  uint64_t v197 = *(void *)(v306 - 8);
  __chkstk_darwin(v306);
  v305 = (char *)&v158 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v304 = sub_100004700(&qword_10017F518);
  v196[1] = *(void *)(v304 - 8);
  __chkstk_darwin(v304);
  uint64_t v303 = (char *)&v158 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v302 = sub_100004700(&qword_10017F520);
  v196[0] = *(void *)(v302 - 8);
  __chkstk_darwin(v302);
  v301 = (char *)&v158 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v300 = sub_100004700(&qword_10017F528);
  uint64_t v195 = *(void *)(v300 - 8);
  __chkstk_darwin(v300);
  uint64_t v299 = (char *)&v158 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v298 = sub_100004700(&qword_10017F530);
  v194[1] = *(void *)(v298 - 8);
  __chkstk_darwin(v298);
  v297 = (char *)&v158 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v296 = sub_100004700(&qword_10017F538);
  v194[0] = *(void *)(v296 - 8);
  __chkstk_darwin(v296);
  uint64_t v295 = (char *)&v158 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v294 = sub_100004700(&qword_10017F540);
  uint64_t v193 = *(void *)(v294 - 8);
  __chkstk_darwin(v294);
  v293 = (char *)&v158 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v292 = sub_100004700(&qword_10017F548);
  uint64_t v192 = *(void *)(v292 - 8);
  __chkstk_darwin(v292);
  v291 = (char *)&v158 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v290 = sub_100004700(&qword_10017F550);
  uint64_t v191 = *(void *)(v290 - 8);
  __chkstk_darwin(v290);
  v289 = (char *)&v158 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v288 = sub_100004700(&qword_10017F558);
  uint64_t v190 = *(void *)(v288 - 8);
  __chkstk_darwin(v288);
  unint64_t v287 = (char *)&v158 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v286 = sub_100004700(&qword_10017F560);
  uint64_t v189 = *(void *)(v286 - 8);
  __chkstk_darwin(v286);
  uint64_t v284 = (char *)&v158 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v285 = sub_100004700(&qword_10017F568);
  uint64_t v188 = *(void *)(v285 - 8);
  __chkstk_darwin(v285);
  uint64_t v283 = (char *)&v158 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v282 = sub_100004700(&qword_10017F570);
  uint64_t v187 = *(void *)(v282 - 8);
  __chkstk_darwin(v282);
  v280 = (char *)&v158 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v279 = sub_100004700(&qword_10017F578);
  uint64_t v185 = *(void *)(v279 - 8);
  __chkstk_darwin(v279);
  v277 = (char *)&v158 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v276 = sub_100004700(&qword_10017F580);
  uint64_t v184 = *(void *)(v276 - 8);
  __chkstk_darwin(v276);
  unint64_t v275 = (char *)&v158 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v281 = sub_100004700(&qword_10017F588);
  uint64_t v186 = *(void *)(v281 - 8);
  __chkstk_darwin(v281);
  v278 = (char *)&v158 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v274 = sub_100004700(&qword_10017F590);
  uint64_t v183 = *(void *)(v274 - 8);
  __chkstk_darwin(v274);
  Swift::String v273 = (char *)&v158 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v272 = sub_100004700(&qword_10017F598);
  uint64_t v182 = *(void *)(v272 - 8);
  __chkstk_darwin(v272);
  Swift::String v271 = (char *)&v158 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v270 = sub_100004700(&qword_10017F5A0);
  uint64_t v181 = *(void *)(v270 - 8);
  __chkstk_darwin(v270);
  v269 = (char *)&v158 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v268 = sub_100004700(&qword_10017F5A8);
  uint64_t v180 = *(void *)(v268 - 8);
  __chkstk_darwin(v268);
  v267 = (char *)&v158 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v266 = sub_100004700(&qword_10017F5B0);
  uint64_t v179 = *(void *)(v266 - 8);
  __chkstk_darwin(v266);
  int v265 = (char *)&v158 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = sub_100004700(&qword_10017F5B8);
  uint64_t v177 = *(void *)(v263 - 8);
  __chkstk_darwin(v263);
  uint64_t v262 = (char *)&v158 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v260 = sub_100004700(&qword_10017F5C0);
  uint64_t v176 = *(void *)(v260 - 8);
  __chkstk_darwin(v260);
  uint64_t v259 = (char *)&v158 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v264 = sub_100004700(&qword_10017F5C8);
  uint64_t v178 = *(void *)(v264 - 8);
  __chkstk_darwin(v264);
  v261 = (char *)&v158 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v257 = sub_100004700(&qword_10017F5D0);
  uint64_t v174 = *(void *)(v257 - 8);
  __chkstk_darwin(v257);
  uint64_t v254 = (char *)&v158 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v252 = sub_100004700(&qword_10017F5D8);
  uint64_t v172 = *(void *)(v252 - 8);
  __chkstk_darwin(v252);
  uint64_t v250 = (char *)&v158 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v258 = sub_100004700(&qword_10017F5E0);
  uint64_t v175 = *(void *)(v258 - 8);
  __chkstk_darwin(v258);
  v255 = (char *)&v158 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v251 = sub_100004700(&qword_10017F5E8);
  uint64_t v171 = *(void *)(v251 - 8);
  __chkstk_darwin(v251);
  uint64_t v249 = (char *)&v158 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v256 = sub_100004700(&qword_10017F5F0);
  uint64_t v173 = *(void *)(v256 - 8);
  __chkstk_darwin(v256);
  v253 = (char *)&v158 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v248 = sub_100004700(&qword_10017F5F8);
  uint64_t v170 = *(void *)(v248 - 8);
  __chkstk_darwin(v248);
  uint64_t v247 = (char *)&v158 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v246 = sub_100004700(&qword_10017F600);
  uint64_t v169 = *(void *)(v246 - 8);
  __chkstk_darwin(v246);
  uint64_t v245 = (char *)&v158 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v244 = sub_100004700(&qword_10017F608);
  uint64_t v168 = *(void *)(v244 - 8);
  __chkstk_darwin(v244);
  uint64_t v243 = (char *)&v158 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v242 = sub_100004700(&qword_10017F610);
  uint64_t v167 = *(void *)(v242 - 8);
  __chkstk_darwin(v242);
  v241 = (char *)&v158 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v238 = sub_100004700(&qword_10017F618);
  uint64_t v237 = *(void *)(v238 - 8);
  __chkstk_darwin(v238);
  char v236 = (char *)&v158 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v240 = sub_100004700(&qword_10017F620);
  uint64_t v166 = *(void *)(v240 - 8);
  __chkstk_darwin(v240);
  char v239 = (char *)&v158 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v234 = sub_100004700(&qword_10017F628);
  uint64_t v164 = *(void *)(v234 - 8);
  __chkstk_darwin(v234);
  os_log_type_t v232 = (char *)&v158 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = sub_100004700(&qword_10017F630);
  uint64_t v165 = *(void *)(v235 - 8);
  __chkstk_darwin(v235);
  uint64_t v233 = (char *)&v158 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v230 = sub_100004700(&qword_10017F638);
  uint64_t v162 = *(void *)(v230 - 8);
  __chkstk_darwin(v230);
  long long v228 = (char *)&v158 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v227 = sub_100004700(&qword_10017F640);
  uint64_t v161 = *(void *)(v227 - 8);
  __chkstk_darwin(v227);
  long long v226 = (char *)&v158 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v231 = sub_100004700(&qword_10017F648);
  uint64_t v163 = *(void *)(v231 - 8);
  __chkstk_darwin(v231);
  uint64_t v229 = (char *)&v158 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v225 = sub_100004700(&qword_10017F650);
  uint64_t v160 = *(void *)(v225 - 8);
  __chkstk_darwin(v225);
  uint64_t v74 = (char *)&v158 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_100004700(&qword_10017F658);
  uint64_t v159 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v77 = (char *)&v158 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_100004700(&qword_10017F660);
  uint64_t v158 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  Swift::String v80 = (char *)&v158 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v373 = sub_100004700(&qword_10017F668);
  uint64_t v369 = *(void *)(v373 - 8);
  __chkstk_darwin(v373);
  uint64_t v82 = (char *)&v158 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000036B0(a1, a1[3]);
  sub_1000D6138();
  v372 = v82;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10005BFC4(v371, (uint64_t)&v381);
  switch(v390)
  {
    case 1:
      LOBYTE(v374) = 1;
      sub_1000D7A24();
      Swift::String v87 = v372;
      uint64_t v86 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v159 + 8))(v77, v75);
      return (*(uint64_t (**)(char *, uint64_t))(v369 + 8))(v87, v86);
    case 2:
      LOBYTE(v374) = 2;
      sub_1000D79D0();
      int64_t v89 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v90 = v225;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v160 + 8))(v74, v90);
      uint64_t v91 = *(uint64_t (**)(char *, uint64_t))(v369 + 8);
      uint64_t v92 = v89;
      return v91(v92, v84);
    case 3:
      uint64_t v93 = v381;
      LOBYTE(v374) = 3;
      sub_1000D797C();
      int64_t v94 = v229;
      uint64_t v96 = v372;
      uint64_t v95 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v374 = v93;
      char v391 = 0;
      sub_100004700((uint64_t *)&unk_10017E5D0);
      sub_1000E7154(&qword_10017C038, (uint64_t *)&unk_10017E5D0);
      uint64_t v97 = v231;
      uint64_t v98 = v370;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (!v98)
      {
        LOBYTE(v374) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v163 + 8))(v94, v97);
      return (*(uint64_t (**)(char *, uint64_t))(v369 + 8))(v96, v95);
    case 4:
      LOBYTE(v374) = 4;
      sub_1000D7928();
      unint64_t v99 = v226;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v227;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v193;
      goto LABEL_95;
    case 5:
      LOBYTE(v374) = 5;
      sub_1000D78D4();
      unint64_t v99 = v228;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v230;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = v194;
      goto LABEL_95;
    case 6:
      LOBYTE(v374) = 6;
      sub_1000D7880();
      uint64_t v102 = v233;
      Swift::String v104 = v372;
      uint64_t v103 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v374) = 0;
      uint64_t v105 = v235;
      uint64_t v106 = v370;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v106)
      {
        LOBYTE(v374) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      Swift::String v107 = v196;
      goto LABEL_60;
    case 7:
      LOBYTE(v374) = 7;
      sub_1000D782C();
      unint64_t v99 = v232;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v234;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v195;
      goto LABEL_95;
    case 8:
      LOBYTE(v374) = 8;
      sub_1000D77D8();
      unint64_t v108 = v239;
      uint64_t v96 = v372;
      uint64_t v95 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v374) = 0;
      uint64_t v109 = v240;
      uint64_t v110 = v370;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v110)
      {
        LOBYTE(v374) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v166 + 8))(v108, v109);
      return (*(uint64_t (**)(char *, uint64_t))(v369 + 8))(v96, v95);
    case 9:
      LOBYTE(v374) = 10;
      sub_1000D7730();
      unint64_t v99 = v241;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v242;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v197;
      goto LABEL_95;
    case 10:
      LOBYTE(v374) = 11;
      sub_1000D76DC();
      unint64_t v99 = v243;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v244;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v198;
      goto LABEL_95;
    case 11:
      LOBYTE(v374) = 12;
      sub_1000D7688();
      unint64_t v99 = v245;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v246;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v199;
      goto LABEL_95;
    case 12:
      LOBYTE(v374) = 13;
      sub_1000D7634();
      unint64_t v99 = v247;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v248;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v200;
      goto LABEL_95;
    case 13:
      uint64_t v111 = v382;
      uint64_t v371 = v381;
      uint64_t v112 = v384;
      uint64_t v368 = v383;
      unint64_t v113 = v385;
      uint64_t v114 = v386;
      uint64_t v115 = v387;
      v367 = v388;
      uint64_t v366 = v389;
      LOBYTE(v374) = 14;
      swift_bridgeObjectRetain();
      sub_10002F064(v112, v113);
      sub_1000D758C();
      swift_bridgeObjectRetain();
      Swift::Bool v116 = v253;
      uint64_t v117 = v372;
      uint64_t v118 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v374 = v371;
      uint64_t v375 = v111;
      uint64_t v376 = v368;
      uint64_t v377 = v112;
      Swift::String v119 = v116;
      uint64_t v120 = v115;
      unint64_t v121 = v113;
      uint64_t v122 = v112;
      unint64_t v378 = v121;
      uint64_t v379 = v114;
      uint64_t v380 = v120;
      char v391 = 0;
      sub_1000D75E0();
      uint64_t v123 = v256;
      uint64_t v124 = v370;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v124)
      {
        (*(void (**)(char *, uint64_t))(v173 + 8))(v119, v123);
        (*(void (**)(char *, uint64_t))(v369 + 8))(v117, v118);
        swift_bridgeObjectRelease();
        sub_10002404C(v122, v121);
        return swift_bridgeObjectRelease();
      }
      else
      {
        LOBYTE(v374) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
        swift_bridgeObjectRelease();
        sub_10002404C(v122, v121);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v173 + 8))(v119, v123);
        return (*(uint64_t (**)(char *, uint64_t))(v369 + 8))(v372, v373);
      }
    case 14:
      LOBYTE(v374) = 15;
      sub_1000D7538();
      uint64_t v102 = v249;
      Swift::String v104 = v372;
      uint64_t v103 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v374) = 0;
      uint64_t v105 = v251;
      uint64_t v125 = v370;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v125)
      {
        LOBYTE(v374) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      Swift::String v107 = &v201;
      goto LABEL_60;
    case 15:
      uint64_t v371 = v383;
      uint64_t v126 = v386;
      LOBYTE(v374) = 16;
      sub_1000D74E4();
      Swift::String v127 = v255;
      Swift::String v129 = v372;
      uint64_t v128 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v374) = 0;
      uint64_t v130 = v258;
      uint64_t v131 = v370;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v131)
      {
        (*(void (**)(char *, uint64_t))(v175 + 8))(v127, v130);
        return (*(uint64_t (**)(char *, uint64_t))(v369 + 8))(v129, v128);
      }
      else
      {
        uint64_t v370 = v126;
        LOBYTE(v374) = 1;
        uint64_t v156 = v127;
        KeyedEncodingContainer.encode(_:forKey:)();
        LOBYTE(v374) = 2;
        KeyedEncodingContainer.encode(_:forKey:)();
        uint64_t v157 = v373;
        (*(void (**)(char *, uint64_t))(v175 + 8))(v156, v130);
        return (*(uint64_t (**)(char *, uint64_t))(v369 + 8))(v129, v157);
      }
    case 16:
      LOBYTE(v374) = 17;
      sub_1000D7490();
      unint64_t v99 = v250;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v252;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = v202;
      goto LABEL_95;
    case 17:
      LOBYTE(v374) = 18;
      sub_1000D743C();
      unint64_t v99 = v254;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v257;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = v203;
      goto LABEL_95;
    case 18:
      uint64_t v132 = v383;
      LOBYTE(v374) = 19;
      sub_1000D73E8();
      uint64_t v133 = v261;
      uint64_t v96 = v372;
      uint64_t v95 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v374) = 0;
      uint64_t v134 = v264;
      uint64_t v135 = v370;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v135)
      {
        uint64_t v374 = v132;
        char v391 = 1;
        sub_100004700((uint64_t *)&unk_10017E5D0);
        sub_1000E7154(&qword_10017C038, (uint64_t *)&unk_10017E5D0);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v178 + 8))(v133, v134);
      return (*(uint64_t (**)(char *, uint64_t))(v369 + 8))(v96, v95);
    case 19:
      LOBYTE(v374) = 20;
      sub_1000D7394();
      unint64_t v99 = v259;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v260;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v204;
      goto LABEL_95;
    case 20:
      LOBYTE(v374) = 21;
      sub_1000D7340();
      unint64_t v99 = v262;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v263;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = v205;
      goto LABEL_95;
    case 21:
      LOBYTE(v374) = 22;
      sub_1000D72EC();
      unint64_t v99 = v265;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v266;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v206;
      goto LABEL_95;
    case 22:
      LOBYTE(v374) = 23;
      sub_1000D7298();
      unint64_t v99 = v267;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v268;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v207;
      goto LABEL_95;
    case 23:
      LOBYTE(v374) = 24;
      sub_1000D7244();
      unint64_t v99 = v269;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v270;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v208;
      goto LABEL_95;
    case 24:
      LOBYTE(v374) = 25;
      sub_1000D71F0();
      unint64_t v99 = v271;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v272;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v209;
      goto LABEL_95;
    case 25:
      LOBYTE(v374) = 26;
      sub_1000D719C();
      unint64_t v99 = v273;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v274;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v210;
      goto LABEL_95;
    case 26:
      uint64_t v136 = v381;
      uint64_t v137 = v382;
      LOBYTE(v374) = 27;
      sub_1000D70A4();
      uint64_t v138 = v278;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v374 = v136;
      char v391 = 0;
      sub_100004700((uint64_t *)&unk_10017E5D0);
      sub_1000E7154(&qword_10017C038, (uint64_t *)&unk_10017E5D0);
      uint64_t v139 = v281;
      uint64_t v140 = v370;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (!v140)
      {
        uint64_t v374 = v137;
        char v391 = 1;
        sub_100004700(&qword_10017E418);
        sub_1000D70F8();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v186 + 8))(v138, v139);
      goto LABEL_96;
    case 27:
      LOBYTE(v374) = 28;
      sub_1000D7050();
      unint64_t v99 = v275;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v276;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v211;
      goto LABEL_95;
    case 28:
      LOBYTE(v374) = 29;
      sub_1000D6FFC();
      unint64_t v99 = v277;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v279;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = v212;
      goto LABEL_95;
    case 29:
      LOBYTE(v374) = 30;
      sub_1000D6FA8();
      unint64_t v99 = v280;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v282;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v213;
      goto LABEL_95;
    case 30:
      uint64_t v141 = v381;
      LOBYTE(v374) = 31;
      sub_1000D6F54();
      uint64_t v142 = v283;
      uint64_t v144 = v372;
      uint64_t v143 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v374 = v141;
      sub_100004700(&qword_10017F150);
      sub_1000E7154(&qword_10017F670, &qword_10017F150);
      uint64_t v145 = v285;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      unint64_t v146 = &v214;
      goto LABEL_73;
    case 31:
      LOBYTE(v374) = 32;
      sub_1000D6F00();
      unint64_t v99 = v284;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v286;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v215;
      goto LABEL_95;
    case 32:
      LOBYTE(v374) = 33;
      sub_1000D6EAC();
      unint64_t v99 = v287;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v288;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v216;
      goto LABEL_95;
    case 33:
      LOBYTE(v374) = 34;
      sub_1000D6E58();
      unint64_t v99 = v289;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v290;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v217;
      goto LABEL_95;
    case 34:
      LOBYTE(v374) = 35;
      sub_1000D6E04();
      unint64_t v99 = v291;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v292;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v218;
      goto LABEL_95;
    case 35:
      LOBYTE(v374) = 36;
      sub_1000D6DB0();
      uint64_t v142 = v293;
      uint64_t v144 = v372;
      uint64_t v143 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v145 = v294;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v146 = &v219;
      goto LABEL_73;
    case 36:
      LOBYTE(v374) = 37;
      sub_1000D6D5C();
      unint64_t v99 = v295;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v296;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v220;
      goto LABEL_95;
    case 37:
      LOBYTE(v374) = 38;
      sub_1000D6D08();
      unint64_t v99 = v297;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v298;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v221;
      goto LABEL_95;
    case 38:
      LOBYTE(v374) = 39;
      sub_1000D6CB4();
      unint64_t v99 = v299;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v300;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v222;
      goto LABEL_95;
    case 39:
      LOBYTE(v374) = 40;
      sub_1000D6C60();
      unint64_t v99 = v301;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v302;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v223;
      goto LABEL_95;
    case 40:
      LOBYTE(v374) = 41;
      sub_1000D6C0C();
      unint64_t v99 = v303;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v304;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v224;
      goto LABEL_95;
    case 41:
      LOBYTE(v374) = 42;
      sub_1000D6BB8();
      unint64_t v99 = v305;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v306;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v225;
      goto LABEL_95;
    case 42:
      LOBYTE(v374) = 43;
      sub_1000D6B64();
      uint64_t v102 = v308;
      Swift::String v104 = v372;
      uint64_t v103 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v374) = 0;
      uint64_t v105 = v311;
      uint64_t v147 = v370;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v147)
      {
        LOBYTE(v374) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      Swift::String v107 = &v227;
LABEL_60:
      (*(void (**)(char *, uint64_t))(*(v107 - 32) + 8))(v102, v105);
      return (*(uint64_t (**)(char *, uint64_t))(v369 + 8))(v104, v103);
    case 43:
      LOBYTE(v374) = 44;
      sub_1000D6B10();
      unint64_t v99 = v307;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v309;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v226;
      goto LABEL_95;
    case 44:
      LOBYTE(v374) = 45;
      sub_1000D6ABC();
      unint64_t v99 = v310;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v312;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v228;
      goto LABEL_95;
    case 45:
      char v148 = BYTE4(v383);
      LOBYTE(v374) = 46;
      sub_1000D6A68();
      unint64_t v149 = v314;
      Swift::String v104 = v372;
      uint64_t v103 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v374) = 0;
      uint64_t v150 = v317;
      uint64_t v151 = v370;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v151)
      {
        LOBYTE(v374) = 1;
        char v391 = v148;
        KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v202[0] + 8))(v149, v150);
      return (*(uint64_t (**)(char *, uint64_t))(v369 + 8))(v104, v103);
    case 46:
      LOBYTE(v374) = 47;
      sub_1000D6A14();
      unint64_t v99 = v313;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v315;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v229;
      goto LABEL_95;
    case 47:
      LOBYTE(v374) = 48;
      sub_1000D69C0();
      unint64_t v99 = v316;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v318;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v231;
      goto LABEL_95;
    case 48:
      LOBYTE(v374) = 49;
      sub_1000D696C();
      unint64_t v99 = v319;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v320;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v232;
      goto LABEL_95;
    case 49:
      LOBYTE(v374) = 50;
      sub_1000D6918();
      unint64_t v99 = v321;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v322;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v233;
      goto LABEL_95;
    case 50:
      LOBYTE(v374) = 51;
      sub_1000D68C4();
      unint64_t v99 = v323;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v324;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v234;
      goto LABEL_95;
    case 51:
      uint64_t v152 = v381;
      LOBYTE(v374) = 52;
      sub_1000D6870();
      uint64_t v142 = v325;
      uint64_t v144 = v372;
      uint64_t v143 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v374 = v152;
      sub_100004700(&qword_10017F150);
      sub_1000E7154(&qword_10017F670, &qword_10017F150);
      uint64_t v145 = v327;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      unint64_t v146 = &v235;
LABEL_73:
      (*(void (**)(char *, uint64_t))(*(v146 - 32) + 8))(v142, v145);
      return (*(uint64_t (**)(char *, uint64_t))(v369 + 8))(v144, v143);
    case 52:
      LOBYTE(v374) = 53;
      sub_1000D681C();
      unint64_t v99 = v326;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v328;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v236;
      goto LABEL_95;
    case 53:
      LOBYTE(v374) = 54;
      sub_1000D67C8();
      unint64_t v99 = v329;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v330;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v237;
      goto LABEL_95;
    case 54:
      LOBYTE(v374) = 55;
      sub_1000D6774();
      unint64_t v99 = v331;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v332;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v238;
      goto LABEL_95;
    case 55:
      LOBYTE(v374) = 56;
      sub_1000D6720();
      unint64_t v99 = v333;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v334;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v239;
      goto LABEL_95;
    case 56:
      LOBYTE(v374) = 57;
      sub_1000D66CC();
      unint64_t v99 = v335;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v336;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v240;
      goto LABEL_95;
    case 57:
      LOBYTE(v374) = 58;
      sub_1000D6678();
      unint64_t v99 = v337;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v338;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v241;
      goto LABEL_95;
    case 58:
      LOBYTE(v374) = 59;
      sub_1000D6624();
      unint64_t v99 = v339;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v340;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v242;
      goto LABEL_95;
    case 59:
      LOBYTE(v374) = 60;
      sub_1000D65D0();
      unint64_t v99 = v341;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v342;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v243;
      goto LABEL_95;
    case 60:
      LOBYTE(v374) = 61;
      sub_1000D657C();
      unint64_t v99 = v343;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v344;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v244;
      goto LABEL_95;
    case 61:
      LOBYTE(v374) = 62;
      sub_1000D6528();
      unint64_t v99 = v345;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v346;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v245;
      goto LABEL_95;
    case 62:
      LOBYTE(v374) = 63;
      sub_1000D64D4();
      unint64_t v99 = v347;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v348;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v246;
      goto LABEL_95;
    case 63:
      LOBYTE(v374) = 64;
      sub_1000D6480();
      unint64_t v99 = v349;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v350;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v247;
      goto LABEL_95;
    case 64:
      LOBYTE(v374) = 65;
      sub_1000D642C();
      unint64_t v99 = v351;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v352;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v248;
      goto LABEL_95;
    case 65:
      LOBYTE(v374) = 66;
      sub_1000D63D8();
      unint64_t v99 = v353;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v354;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v249;
      goto LABEL_95;
    case 66:
      LOBYTE(v374) = 67;
      sub_1000D6384();
      unint64_t v99 = v355;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v356;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v250;
      goto LABEL_95;
    case 67:
      LOBYTE(v374) = 68;
      sub_1000D6330();
      unint64_t v99 = v357;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v358;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v251;
      goto LABEL_95;
    case 68:
      LOBYTE(v374) = 69;
      sub_1000D62DC();
      unint64_t v99 = v359;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v360;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v252;
      goto LABEL_95;
    case 69:
      LOBYTE(v374) = 70;
      sub_1000D6288();
      unint64_t v99 = v361;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v362;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v253;
      goto LABEL_95;
    case 70:
      LOBYTE(v374) = 71;
      sub_1000D6234();
      unint64_t v99 = v363;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v364;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v254;
      goto LABEL_95;
    case 71:
      LOBYTE(v374) = 72;
      sub_1000D61E0();
      unint64_t v99 = v365;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v366;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = (uint64_t *)&v255;
      goto LABEL_95;
    case 72:
      LOBYTE(v374) = 73;
      sub_1000D618C();
      unint64_t v99 = v367;
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v100 = v368;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v101 = &v256;
LABEL_95:
      (*(void (**)(char *, uint64_t))(*(v101 - 32) + 8))(v99, v100);
      goto LABEL_96;
    case 73:
      LOBYTE(v374) = 9;
      sub_1000D7784();
      unint64_t v153 = v236;
      uint64_t v155 = v372;
      uint64_t v154 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v237 + 8))(v153, v238);
      return (*(uint64_t (**)(char *, uint64_t))(v369 + 8))(v155, v154);
    default:
      uint64_t v83 = v381;
      LOBYTE(v374) = 0;
      sub_1000D7A78();
      Swift::String v85 = v372;
      uint64_t v84 = v373;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v374 = v83;
      sub_100004700(&qword_10017F688);
      sub_1000E7208(&qword_10017F690, (void (*)(void))sub_1000D7ACC);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v158 + 8))(v80, v78);
LABEL_96:
      uint64_t v91 = *(uint64_t (**)(char *, uint64_t))(v369 + 8);
      uint64_t v92 = v85;
      return v91(v92, v84);
  }
}

uint64_t sub_1000D55EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000D9F3C(a1, (uint64_t)v5);
  if (!v2) {
    return sub_10005BFC4((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_1000D5634(void *a1)
{
  sub_10005BFC4(v1, (uint64_t)&v4);
  return sub_1000D0484(a1);
}

unint64_t sub_1000D5684()
{
  sub_10005BFC4(v0, (uint64_t)&v2);
  return sub_1000CB9EC();
}

uint64_t sub_1000D56BC(uint64_t a1, uint64_t a2)
{
  sub_10005BFC4(a1, (uint64_t)v10);
  sub_10005BFC4(a2, (uint64_t)&v9);
  unint64_t v3 = sub_1000CB9EC();
  uint64_t v5 = v4;
  if (v3 == sub_1000CB9EC() && v5 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000D5768(uint64_t a1, uint64_t a2)
{
  sub_10005BFC4(a1, (uint64_t)v10);
  sub_10005BFC4(a2, (uint64_t)&v9);
  unint64_t v3 = sub_1000CB9EC();
  uint64_t v5 = v4;
  if (v3 == sub_1000CB9EC() && v5 == v6) {
    char v7 = 0;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000D5814(uint64_t a1, uint64_t a2)
{
  sub_10005BFC4(a1, (uint64_t)&v10);
  sub_10005BFC4(a2, (uint64_t)v11);
  unint64_t v3 = sub_1000CB9EC();
  uint64_t v5 = v4;
  if (v3 == sub_1000CB9EC() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
    char v7 = 1;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v7 = v8 ^ 1;
  }
  return v7 & 1;
}

uint64_t sub_1000D58CC(uint64_t a1, uint64_t a2)
{
  sub_10005BFC4(a1, (uint64_t)v11);
  sub_10005BFC4(a2, (uint64_t)&v10);
  unint64_t v3 = sub_1000CB9EC();
  uint64_t v5 = v4;
  if (v3 == sub_1000CB9EC() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
    char v7 = 1;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v7 = v8 ^ 1;
  }
  return v7 & 1;
}

uint64_t sub_1000D5984(uint64_t a1, uint64_t a2)
{
  sub_10005BFC4(a1, (uint64_t)&v9);
  sub_10005BFC4(a2, (uint64_t)v10);
  unint64_t v3 = sub_1000CB9EC();
  uint64_t v5 = v4;
  if (v3 == sub_1000CB9EC() && v5 == v6) {
    char v7 = 0;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000D5A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10001BA68(a4, (uint64_t)&v20, &qword_10017F6A0);
  if (!v21) {
    goto LABEL_6;
  }
  sub_10000372C(&v20, (uint64_t)v23);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100004700(&qword_10017C230);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100132F10;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v6;
  sub_10009AEC8(a3, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10005C020);
  unint64_t v7 = sub_1000CB9EC();
  uint64_t v9 = v8;
  sub_10009AEC8(a3, (void (*)(void, void, void, void, void, void, void, void, void, char))sub_10003E9C8);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v9;
  sub_100016BFC(inited);
  id v10 = objc_allocWithZone((Class)NSError);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v13 = [v10 initWithDomain:v11 code:5 userInfo:isa];

  unint64_t v14 = (unint64_t)[v13 code];
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_5:
    __break(1u);
LABEL_6:
    sub_1000E1760((uint64_t)&v20);
    goto LABEL_7;
  }
  uint64_t v15 = v24;
  uint64_t v16 = v25;
  sub_1000036B0(v23, v24);
  sub_10007F4B4(v15, v16);
  uint64_t v17 = v21;
  uint64_t v18 = v22;
  sub_1000036B0(&v20, v21);
  LOBYTE(v17) = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 64))(v17, v18);
  sub_10000478C((uint64_t)&v20);
  if (v17)
  {
    String.utf8CString.getter();
    abort_with_reason();
    goto LABEL_5;
  }
LABEL_7:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000D5CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t))
{
  uint64_t v9 = swift_bridgeObjectRetain();
  a8(v9);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D5EB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for POSIXError();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  errno.getter();
  uint64_t result = POSIXErrorCode.init(rawValue:)();
  if ((result & 0x100000000) != 0 && (uint64_t result = POSIXErrorCode.init(rawValue:)(), (result & 0x100000000) != 0))
  {
    __break(1u);
  }
  else
  {
    v17[3] = result;
    sub_100077158((uint64_t)&_swiftEmptyArrayStorage);
    sub_100077564();
    _BridgedStoredNSError.init(_:userInfo:)();
    static os_signpost_type_t.event.getter();
    NSString v11 = (void *)*sub_1000EFA00();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_100132F10;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    id v13 = v11;
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v16 = v15;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_10002A1DC();
    *(void *)(v12 + 32) = v14;
    *(void *)(v12 + 40) = v16;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:_:_:)();

    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

unint64_t sub_1000D6138()
{
  unint64_t result = qword_100188FE0;
  if (!qword_100188FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100188FE0);
  }
  return result;
}

unint64_t sub_1000D618C()
{
  unint64_t result = qword_100188FE8;
  if (!qword_100188FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100188FE8);
  }
  return result;
}

unint64_t sub_1000D61E0()
{
  unint64_t result = qword_100188FF0;
  if (!qword_100188FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100188FF0);
  }
  return result;
}

unint64_t sub_1000D6234()
{
  unint64_t result = qword_100188FF8;
  if (!qword_100188FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100188FF8);
  }
  return result;
}

unint64_t sub_1000D6288()
{
  unint64_t result = qword_100189000;
  if (!qword_100189000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189000);
  }
  return result;
}

unint64_t sub_1000D62DC()
{
  unint64_t result = qword_100189008;
  if (!qword_100189008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189008);
  }
  return result;
}

unint64_t sub_1000D6330()
{
  unint64_t result = qword_100189010;
  if (!qword_100189010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189010);
  }
  return result;
}

unint64_t sub_1000D6384()
{
  unint64_t result = qword_100189018;
  if (!qword_100189018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189018);
  }
  return result;
}

unint64_t sub_1000D63D8()
{
  unint64_t result = qword_100189020;
  if (!qword_100189020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189020);
  }
  return result;
}

unint64_t sub_1000D642C()
{
  unint64_t result = qword_100189028;
  if (!qword_100189028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189028);
  }
  return result;
}

unint64_t sub_1000D6480()
{
  unint64_t result = qword_100189030;
  if (!qword_100189030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189030);
  }
  return result;
}

unint64_t sub_1000D64D4()
{
  unint64_t result = qword_100189038;
  if (!qword_100189038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189038);
  }
  return result;
}

unint64_t sub_1000D6528()
{
  unint64_t result = qword_100189040;
  if (!qword_100189040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189040);
  }
  return result;
}

unint64_t sub_1000D657C()
{
  unint64_t result = qword_100189048;
  if (!qword_100189048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189048);
  }
  return result;
}

unint64_t sub_1000D65D0()
{
  unint64_t result = qword_100189050;
  if (!qword_100189050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189050);
  }
  return result;
}

unint64_t sub_1000D6624()
{
  unint64_t result = qword_100189058;
  if (!qword_100189058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189058);
  }
  return result;
}

unint64_t sub_1000D6678()
{
  unint64_t result = qword_100189060;
  if (!qword_100189060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189060);
  }
  return result;
}

unint64_t sub_1000D66CC()
{
  unint64_t result = qword_100189068;
  if (!qword_100189068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189068);
  }
  return result;
}

unint64_t sub_1000D6720()
{
  unint64_t result = qword_100189070;
  if (!qword_100189070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189070);
  }
  return result;
}

unint64_t sub_1000D6774()
{
  unint64_t result = qword_100189078;
  if (!qword_100189078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189078);
  }
  return result;
}

unint64_t sub_1000D67C8()
{
  unint64_t result = qword_100189080;
  if (!qword_100189080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189080);
  }
  return result;
}

unint64_t sub_1000D681C()
{
  unint64_t result = qword_100189088;
  if (!qword_100189088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189088);
  }
  return result;
}

unint64_t sub_1000D6870()
{
  unint64_t result = qword_100189090;
  if (!qword_100189090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189090);
  }
  return result;
}

unint64_t sub_1000D68C4()
{
  unint64_t result = qword_100189098;
  if (!qword_100189098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189098);
  }
  return result;
}

unint64_t sub_1000D6918()
{
  unint64_t result = qword_1001890A0;
  if (!qword_1001890A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001890A0);
  }
  return result;
}

unint64_t sub_1000D696C()
{
  unint64_t result = qword_1001890A8;
  if (!qword_1001890A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001890A8);
  }
  return result;
}

unint64_t sub_1000D69C0()
{
  unint64_t result = qword_1001890B0;
  if (!qword_1001890B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001890B0);
  }
  return result;
}

unint64_t sub_1000D6A14()
{
  unint64_t result = qword_1001890B8;
  if (!qword_1001890B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001890B8);
  }
  return result;
}

unint64_t sub_1000D6A68()
{
  unint64_t result = qword_1001890C0;
  if (!qword_1001890C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001890C0);
  }
  return result;
}

unint64_t sub_1000D6ABC()
{
  unint64_t result = qword_1001890C8;
  if (!qword_1001890C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001890C8);
  }
  return result;
}

unint64_t sub_1000D6B10()
{
  unint64_t result = qword_1001890D0;
  if (!qword_1001890D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001890D0);
  }
  return result;
}

unint64_t sub_1000D6B64()
{
  unint64_t result = qword_1001890D8;
  if (!qword_1001890D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001890D8);
  }
  return result;
}

unint64_t sub_1000D6BB8()
{
  unint64_t result = qword_1001890E0;
  if (!qword_1001890E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001890E0);
  }
  return result;
}

unint64_t sub_1000D6C0C()
{
  unint64_t result = qword_1001890E8;
  if (!qword_1001890E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001890E8);
  }
  return result;
}

unint64_t sub_1000D6C60()
{
  unint64_t result = qword_1001890F0;
  if (!qword_1001890F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001890F0);
  }
  return result;
}

unint64_t sub_1000D6CB4()
{
  unint64_t result = qword_1001890F8;
  if (!qword_1001890F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001890F8);
  }
  return result;
}

unint64_t sub_1000D6D08()
{
  unint64_t result = qword_100189100;
  if (!qword_100189100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189100);
  }
  return result;
}

unint64_t sub_1000D6D5C()
{
  unint64_t result = qword_100189108;
  if (!qword_100189108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189108);
  }
  return result;
}

unint64_t sub_1000D6DB0()
{
  unint64_t result = qword_100189110;
  if (!qword_100189110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189110);
  }
  return result;
}

unint64_t sub_1000D6E04()
{
  unint64_t result = qword_100189118;
  if (!qword_100189118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189118);
  }
  return result;
}

unint64_t sub_1000D6E58()
{
  unint64_t result = qword_100189120;
  if (!qword_100189120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189120);
  }
  return result;
}

unint64_t sub_1000D6EAC()
{
  unint64_t result = qword_100189128;
  if (!qword_100189128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189128);
  }
  return result;
}

unint64_t sub_1000D6F00()
{
  unint64_t result = qword_100189130;
  if (!qword_100189130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189130);
  }
  return result;
}

unint64_t sub_1000D6F54()
{
  unint64_t result = qword_100189138;
  if (!qword_100189138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189138);
  }
  return result;
}

unint64_t sub_1000D6FA8()
{
  unint64_t result = qword_100189140;
  if (!qword_100189140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189140);
  }
  return result;
}

unint64_t sub_1000D6FFC()
{
  unint64_t result = qword_100189148;
  if (!qword_100189148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189148);
  }
  return result;
}

unint64_t sub_1000D7050()
{
  unint64_t result = qword_100189150;
  if (!qword_100189150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189150);
  }
  return result;
}

unint64_t sub_1000D70A4()
{
  unint64_t result = qword_100189158;
  if (!qword_100189158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189158);
  }
  return result;
}

unint64_t sub_1000D70F8()
{
  unint64_t result = qword_10017F678;
  if (!qword_10017F678)
  {
    sub_1000126B8(&qword_10017E418);
    sub_1000E7154(&qword_10017C038, (uint64_t *)&unk_10017E5D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F678);
  }
  return result;
}

unint64_t sub_1000D719C()
{
  unint64_t result = qword_100189160;
  if (!qword_100189160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189160);
  }
  return result;
}

unint64_t sub_1000D71F0()
{
  unint64_t result = qword_100189168;
  if (!qword_100189168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189168);
  }
  return result;
}

unint64_t sub_1000D7244()
{
  unint64_t result = qword_100189170;
  if (!qword_100189170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189170);
  }
  return result;
}

unint64_t sub_1000D7298()
{
  unint64_t result = qword_100189178;
  if (!qword_100189178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189178);
  }
  return result;
}

unint64_t sub_1000D72EC()
{
  unint64_t result = qword_100189180;
  if (!qword_100189180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189180);
  }
  return result;
}

unint64_t sub_1000D7340()
{
  unint64_t result = qword_100189188;
  if (!qword_100189188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189188);
  }
  return result;
}

unint64_t sub_1000D7394()
{
  unint64_t result = qword_100189190;
  if (!qword_100189190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189190);
  }
  return result;
}

unint64_t sub_1000D73E8()
{
  unint64_t result = qword_100189198;
  if (!qword_100189198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189198);
  }
  return result;
}

unint64_t sub_1000D743C()
{
  unint64_t result = qword_1001891A0;
  if (!qword_1001891A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001891A0);
  }
  return result;
}

unint64_t sub_1000D7490()
{
  unint64_t result = qword_1001891A8;
  if (!qword_1001891A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001891A8);
  }
  return result;
}

unint64_t sub_1000D74E4()
{
  unint64_t result = qword_1001891B0;
  if (!qword_1001891B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001891B0);
  }
  return result;
}

unint64_t sub_1000D7538()
{
  unint64_t result = qword_1001891B8;
  if (!qword_1001891B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001891B8);
  }
  return result;
}

unint64_t sub_1000D758C()
{
  unint64_t result = qword_1001891C0;
  if (!qword_1001891C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001891C0);
  }
  return result;
}

unint64_t sub_1000D75E0()
{
  unint64_t result = qword_10017F680;
  if (!qword_10017F680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F680);
  }
  return result;
}

unint64_t sub_1000D7634()
{
  unint64_t result = qword_1001891C8;
  if (!qword_1001891C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001891C8);
  }
  return result;
}

unint64_t sub_1000D7688()
{
  unint64_t result = qword_1001891D0;
  if (!qword_1001891D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001891D0);
  }
  return result;
}

unint64_t sub_1000D76DC()
{
  unint64_t result = qword_1001891D8;
  if (!qword_1001891D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001891D8);
  }
  return result;
}

unint64_t sub_1000D7730()
{
  unint64_t result = qword_1001891E0;
  if (!qword_1001891E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001891E0);
  }
  return result;
}

unint64_t sub_1000D7784()
{
  unint64_t result = qword_1001891E8;
  if (!qword_1001891E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001891E8);
  }
  return result;
}

unint64_t sub_1000D77D8()
{
  unint64_t result = qword_1001891F0;
  if (!qword_1001891F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001891F0);
  }
  return result;
}

unint64_t sub_1000D782C()
{
  unint64_t result = qword_1001891F8;
  if (!qword_1001891F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001891F8);
  }
  return result;
}

unint64_t sub_1000D7880()
{
  unint64_t result = qword_100189200;
  if (!qword_100189200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189200);
  }
  return result;
}

unint64_t sub_1000D78D4()
{
  unint64_t result = qword_100189208;
  if (!qword_100189208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189208);
  }
  return result;
}

unint64_t sub_1000D7928()
{
  unint64_t result = qword_100189210;
  if (!qword_100189210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189210);
  }
  return result;
}

unint64_t sub_1000D797C()
{
  unint64_t result = qword_100189218;
  if (!qword_100189218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189218);
  }
  return result;
}

unint64_t sub_1000D79D0()
{
  unint64_t result = qword_100189220;
  if (!qword_100189220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189220);
  }
  return result;
}

unint64_t sub_1000D7A24()
{
  unint64_t result = qword_100189228;
  if (!qword_100189228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100189228);
  }
  return result;
}

unint64_t sub_1000D7A78()
{
  unint64_t result = qword_100189230[0];
  if (!qword_100189230[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100189230);
  }
  return result;
}

unint64_t sub_1000D7ACC()
{
  unint64_t result = qword_10017F698;
  if (!qword_10017F698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F698);
  }
  return result;
}

uint64_t sub_1000D7B20(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E656449726570 && a2 == 0xED00007265696669)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000D7C20(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C7069746C756DLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61697265736564 && a2 == 0xEF6E6F6974617A69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010014DD20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65526C656E72656BLL && a2 == 0xED00007473657571 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x694B726576697264 && a2 == 0xEF68636E75614C74 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F69736E65747865 && a2 == 0xED000064616F4C6ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x697463656C6C6F63 && a2 == 0xEE0064616F4C6E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010014DD40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656372756F736572 && a2 == 0xEC00000064616F4CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7A696C6169726573 && a2 == 0xED00006E6F697461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x4164696C61766E69 && a2 == 0xEF746E656D756772 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x646E756F46746F6ELL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010014DD60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6E697A696C616572 && a2 == 0xE900000000000067 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000010014DD80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000010014DDA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010014DDC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000010014DDE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x69746164696C6176 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010014DE00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x74737973656C6966 && a2 == 0xEA00000000006D65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x656363416B736964 && a2 == 0xEA00000000007373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x65636341776F6C66 && a2 == 0xEA00000000007373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x797265766F636572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x6363416D6172766ELL && a2 == 0xEB00000000737365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x61507972616E6962 && a2 == 0xED0000676E697372 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0x6556657275747566 && a2 == 0xED00006E6F697372 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0x6975426568636163 && a2 == 0xED0000676E69646CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0x676E6967617473 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0x6F506D6574737973 && a2 == 0xEC0000007963696CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010014DE20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000010014DE40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0x69746E6568747561 && a2 == 0xEE006E6F69746163 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0x786F62646E6173 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else if (a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 34;
  }
  else if (a1 == 0x45676E6967676F6CLL && a2 == 0xEC000000726F7272 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 35;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010014DE60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 36;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000010014DE80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 37;
  }
  else if (a1 == 0x4B64696C61766E69 && a2 == 0xEA00000000007965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 38;
  }
  else if (a1 == 0x64616F6C6E75 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 39;
  }
  else if (a1 == 0x6F7272457473696CLL && a2 == 0xE900000000000072 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 40;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010014DEA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 41;
  }
  else if (a1 == 0x74617473706D7564 && a2 == 0xEE00726F72724565 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 42;
  }
  else if (a1 == 0x65736F6E67616964 && a2 == 0xED0000726F727245 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 43;
  }
  else if (a1 == 0x696C6F50746F6F62 && a2 == 0xEA00000000007963 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 44;
  }
  else if (a1 == 0x6F69747065637865 && a2 == 0xED00007473694C6ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 45;
  }
  else if (a1 == 0x6E67695365646F63 && a2 == 0xEB00000000676E69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 46;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010014DEC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 47;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010014DEE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 48;
  }
  else if (a1 == 0x6F42656661536E69 && a2 == 0xEA0000000000746FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 49;
  }
  else if (a1 == 0x6E69777261446E69 && a2 == 0xEA0000000000534FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 50;
  }
  else if (a1 == 0x6C616E7265746E69 && a2 == 0xED0000726F727245 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 51;
  }
  else if (a1 == 0x7365726975716572 && a2 == 0xEE00746F6F626552 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 52;
  }
  else if (a1 == 0x4F6E6567634B6E69 && a2 == 0xE900000000000053 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 53;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010014DF00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 54;
  }
  else if (a1 == 0x64756C6378456E69 && a2 == 0xED00007473694C65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 55;
  }
  else if (a1 == 0x6F6974617267696DLL && a2 == 0xEE00726F7272456ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 56;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010014DF20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 57;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010014DF40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 58;
  }
  else if (a1 == 0x45746573656C6966 && a2 == 0xEC000000726F7272 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 59;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010014DF60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 60;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010014DF80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 61;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010014DFA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 62;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010014DFC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 63;
  }
  else if (a1 == 0x6F63655274786564 && a2 == 0xEF726F7272456472 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 64;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x800000010014DFE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 65;
  }
  else if (a1 == 0xD00000000000002ALL && a2 == 0x800000010014E010 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 66;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010014E040 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 67;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000010014E060 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 68;
  }
  else if (a1 == 0x5264696C61766E69 && a2 == 0xEE00747365757165 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 69;
  }
  else if (a1 == 0x697463656E6E6F63 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 70;
  }
  else if (a1 == 0x74754F64656D6974 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 71;
  }
  else if (a1 == 2037609826 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 72;
  }
  else if (a1 == 0x74656D6874697261 && a2 == 0xEA00000000006369)
  {
    swift_bridgeObjectRelease();
    return 73;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 73;
    }
    else {
      return 74;
    }
  }
}

uint64_t sub_1000D9AF0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1953066351 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010014E080)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000D9BD0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5664657269736564 && a2 == 0xEE006E6F69737265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65566C6175746361 && a2 == 0xED00006E6F697372)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000D9D7C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010014E080)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000D9E78(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000D9F3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v788 = a2;
  uint64_t v718 = sub_100004700(&qword_10017F6B0);
  uint64_t v646 = *(void *)(v718 - 8);
  __chkstk_darwin(v718);
  v785 = (char *)&v569 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v719 = sub_100004700(&qword_10017F6B8);
  uint64_t v645 = *(void *)(v719 - 8);
  __chkstk_darwin(v719);
  uint64_t v793 = (uint64_t)&v569 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v717 = sub_100004700(&qword_10017F6C0);
  uint64_t v644 = *(void *)(v717 - 8);
  __chkstk_darwin(v717);
  v786 = (char *)&v569 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v716 = sub_100004700(&qword_10017F6C8);
  uint64_t v643 = *(void *)(v716 - 8);
  __chkstk_darwin(v716);
  v792 = (char *)&v569 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v715 = sub_100004700(&qword_10017F6D0);
  uint64_t v642 = *(void *)(v715 - 8);
  __chkstk_darwin(v715);
  v784 = (char *)&v569 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v714 = sub_100004700(&qword_10017F6D8);
  uint64_t v641 = *(void *)(v714 - 8);
  __chkstk_darwin(v714);
  v783 = (char *)&v569 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v713 = sub_100004700(&qword_10017F6E0);
  uint64_t v640 = *(void *)(v713 - 8);
  __chkstk_darwin(v713);
  v782 = (char *)&v569 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v712 = sub_100004700(&qword_10017F6E8);
  uint64_t v639 = *(void *)(v712 - 8);
  __chkstk_darwin(v712);
  v781 = (char *)&v569 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v711 = sub_100004700(&qword_10017F6F0);
  uint64_t v638 = *(void *)(v711 - 8);
  __chkstk_darwin(v711);
  v780 = (char *)&v569 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v710 = sub_100004700(&qword_10017F6F8);
  uint64_t v637 = *(void *)(v710 - 8);
  __chkstk_darwin(v710);
  v779 = (char *)&v569 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v709 = sub_100004700(&qword_10017F700);
  uint64_t v636 = *(void *)(v709 - 8);
  __chkstk_darwin(v709);
  v778 = (char *)&v569 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v708 = sub_100004700(&qword_10017F708);
  uint64_t v635 = *(void *)(v708 - 8);
  __chkstk_darwin(v708);
  v777 = (char *)&v569 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v707 = sub_100004700(&qword_10017F710);
  uint64_t v634 = *(void *)(v707 - 8);
  __chkstk_darwin(v707);
  v776 = (char *)&v569 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v706 = sub_100004700(&qword_10017F718);
  uint64_t v633 = *(void *)(v706 - 8);
  __chkstk_darwin(v706);
  v775 = (char *)&v569 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v705 = sub_100004700(&qword_10017F720);
  uint64_t v632 = *(void *)(v705 - 8);
  __chkstk_darwin(v705);
  v774 = (char *)&v569 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v704 = sub_100004700(&qword_10017F728);
  uint64_t v631 = *(void *)(v704 - 8);
  __chkstk_darwin(v704);
  v773 = (char *)&v569 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v703 = sub_100004700(&qword_10017F730);
  uint64_t v630 = *(void *)(v703 - 8);
  __chkstk_darwin(v703);
  v772 = (char *)&v569 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v702 = sub_100004700(&qword_10017F738);
  uint64_t v629 = *(void *)(v702 - 8);
  __chkstk_darwin(v702);
  v771 = (char *)&v569 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v701 = sub_100004700(&qword_10017F740);
  uint64_t v628 = *(void *)(v701 - 8);
  __chkstk_darwin(v701);
  v770 = (char *)&v569 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v700 = sub_100004700(&qword_10017F748);
  uint64_t v627 = *(void *)(v700 - 8);
  __chkstk_darwin(v700);
  v769 = (char *)&v569 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v699 = sub_100004700(&qword_10017F750);
  uint64_t v626 = *(void *)(v699 - 8);
  __chkstk_darwin(v699);
  v768 = (char *)&v569 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v698 = sub_100004700(&qword_10017F758);
  uint64_t v625 = *(void *)(v698 - 8);
  __chkstk_darwin(v698);
  v767 = (char *)&v569 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v697 = sub_100004700(&qword_10017F760);
  uint64_t v624 = *(void *)(v697 - 8);
  __chkstk_darwin(v697);
  v766 = (char *)&v569 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v696 = sub_100004700(&qword_10017F768);
  uint64_t v623 = *(void *)(v696 - 8);
  __chkstk_darwin(v696);
  v765 = (char *)&v569 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v695 = sub_100004700(&qword_10017F770);
  uint64_t v622 = *(void *)(v695 - 8);
  __chkstk_darwin(v695);
  v764 = (char *)&v569 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v694 = sub_100004700(&qword_10017F778);
  uint64_t v621 = *(void *)(v694 - 8);
  __chkstk_darwin(v694);
  v763 = (char *)&v569 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v692 = sub_100004700(&qword_10017F780);
  uint64_t v619 = *(void *)(v692 - 8);
  __chkstk_darwin(v692);
  v761 = (char *)&v569 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v693 = sub_100004700(&qword_10017F788);
  uint64_t v620 = *(void *)(v693 - 8);
  __chkstk_darwin(v693);
  v762 = (char *)&v569 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v691 = sub_100004700(&qword_10017F790);
  uint64_t v618 = *(void *)(v691 - 8);
  __chkstk_darwin(v691);
  v760 = (char *)&v569 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v689 = sub_100004700(&qword_10017F798);
  uint64_t v617 = *(void *)(v689 - 8);
  __chkstk_darwin(v689);
  v758 = (char *)&v569 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v690 = sub_100004700(&qword_10017F7A0);
  uint64_t v616 = *(void *)(v690 - 8);
  __chkstk_darwin(v690);
  v759 = (char *)&v569 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v688 = sub_100004700(&qword_10017F7A8);
  uint64_t v615 = *(void *)(v688 - 8);
  __chkstk_darwin(v688);
  v757 = (char *)&v569 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v687 = sub_100004700(&qword_10017F7B0);
  uint64_t v614 = *(void *)(v687 - 8);
  __chkstk_darwin(v687);
  v756 = (char *)&v569 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v686 = sub_100004700(&qword_10017F7B8);
  uint64_t v613 = *(void *)(v686 - 8);
  __chkstk_darwin(v686);
  v755 = (char *)&v569 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v685 = sub_100004700(&qword_10017F7C0);
  uint64_t v612 = *(void *)(v685 - 8);
  __chkstk_darwin(v685);
  v754 = (char *)&v569 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v684 = sub_100004700(&qword_10017F7C8);
  uint64_t v611 = *(void *)(v684 - 8);
  __chkstk_darwin(v684);
  v753 = (char *)&v569 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v683 = sub_100004700(&qword_10017F7D0);
  uint64_t v610 = *(void *)(v683 - 8);
  __chkstk_darwin(v683);
  v752 = (char *)&v569 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v682 = sub_100004700(&qword_10017F7D8);
  uint64_t v609 = *(void *)(v682 - 8);
  __chkstk_darwin(v682);
  v751 = (char *)&v569 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v681 = sub_100004700(&qword_10017F7E0);
  uint64_t v608 = *(void *)(v681 - 8);
  __chkstk_darwin(v681);
  v750 = (char *)&v569 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v680 = sub_100004700(&qword_10017F7E8);
  uint64_t v607 = *(void *)(v680 - 8);
  __chkstk_darwin(v680);
  v749 = (char *)&v569 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v679 = sub_100004700(&qword_10017F7F0);
  uint64_t v606 = *(void *)(v679 - 8);
  __chkstk_darwin(v679);
  v748 = (char *)&v569 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v678 = sub_100004700(&qword_10017F7F8);
  uint64_t v605 = *(void *)(v678 - 8);
  __chkstk_darwin(v678);
  v747 = (char *)&v569 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v677 = sub_100004700(&qword_10017F800);
  uint64_t v604 = *(void *)(v677 - 8);
  __chkstk_darwin(v677);
  v746 = (char *)&v569 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v676 = sub_100004700(&qword_10017F808);
  uint64_t v602 = *(void *)(v676 - 8);
  __chkstk_darwin(v676);
  v745 = (char *)&v569 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v674 = sub_100004700(&qword_10017F810);
  uint64_t v601 = *(void *)(v674 - 8);
  __chkstk_darwin(v674);
  v743 = (char *)&v569 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v673 = sub_100004700(&qword_10017F818);
  uint64_t v600 = *(void *)(v673 - 8);
  __chkstk_darwin(v673);
  v742 = (char *)&v569 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v675 = sub_100004700(&qword_10017F820);
  uint64_t v603 = *(void *)(v675 - 8);
  __chkstk_darwin(v675);
  v744 = (char *)&v569 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v672 = sub_100004700(&qword_10017F828);
  uint64_t v599 = *(void *)(v672 - 8);
  __chkstk_darwin(v672);
  v741 = (char *)&v569 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v671 = sub_100004700(&qword_10017F830);
  uint64_t v598 = *(void *)(v671 - 8);
  __chkstk_darwin(v671);
  v740 = (char *)&v569 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v670 = sub_100004700(&qword_10017F838);
  uint64_t v597 = *(void *)(v670 - 8);
  __chkstk_darwin(v670);
  v739 = (char *)&v569 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v669 = sub_100004700(&qword_10017F840);
  uint64_t v596 = *(void *)(v669 - 8);
  __chkstk_darwin(v669);
  v738 = (char *)&v569 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v668 = sub_100004700(&qword_10017F848);
  uint64_t v595 = *(void *)(v668 - 8);
  __chkstk_darwin(v668);
  v737 = (char *)&v569 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v666 = sub_100004700(&qword_10017F850);
  uint64_t v593 = *(void *)(v666 - 8);
  __chkstk_darwin(v666);
  v736 = (char *)&v569 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v665 = sub_100004700(&qword_10017F858);
  uint64_t v592 = *(void *)(v665 - 8);
  __chkstk_darwin(v665);
  v735 = (char *)&v569 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v667 = sub_100004700(&qword_10017F860);
  uint64_t v594 = *(void *)(v667 - 8);
  __chkstk_darwin(v667);
  v787 = (char *)&v569 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v664 = sub_100004700(&qword_10017F868);
  uint64_t v590 = *(void *)(v664 - 8);
  __chkstk_darwin(v664);
  v734 = (char *)&v569 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v660 = sub_100004700(&qword_10017F870);
  uint64_t v589 = *(void *)(v660 - 8);
  __chkstk_darwin(v660);
  v733 = (char *)&v569 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v662 = sub_100004700(&qword_10017F878);
  uint64_t v591 = *(void *)(v662 - 8);
  __chkstk_darwin(v662);
  v791 = (char *)&v569 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v663 = sub_100004700(&qword_10017F880);
  uint64_t v587 = *(void *)(v663 - 8);
  __chkstk_darwin(v663);
  v732 = (char *)&v569 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v720 = sub_100004700(&qword_10017F888);
  uint64_t v588 = *(void *)(v720 - 8);
  __chkstk_darwin(v720);
  v790 = (char *)&v569 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v661 = sub_100004700(&qword_10017F890);
  uint64_t v586 = *(void *)(v661 - 8);
  __chkstk_darwin(v661);
  v789 = (char *)&v569 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v659 = sub_100004700(&qword_10017F898);
  uint64_t v585 = *(void *)(v659 - 8);
  __chkstk_darwin(v659);
  v731 = (char *)&v569 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v658 = sub_100004700(&qword_10017F8A0);
  uint64_t v584 = *(void *)(v658 - 8);
  __chkstk_darwin(v658);
  v730 = (char *)&v569 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v657 = sub_100004700(&qword_10017F8A8);
  uint64_t v583 = *(void *)(v657 - 8);
  __chkstk_darwin(v657);
  v729 = (char *)&v569 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v655 = sub_100004700(&qword_10017F8B0);
  uint64_t v654 = *(void *)(v655 - 8);
  __chkstk_darwin(v655);
  v727 = (char *)&v569 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v656 = sub_100004700(&qword_10017F8B8);
  uint64_t v582 = *(void *)(v656 - 8);
  __chkstk_darwin(v656);
  v728 = (char *)&v569 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v652 = sub_100004700(&qword_10017F8C0);
  uint64_t v581 = *(void *)(v652 - 8);
  __chkstk_darwin(v652);
  v725 = (char *)&v569 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v653 = sub_100004700(&qword_10017F8C8);
  uint64_t v580 = *(void *)(v653 - 8);
  __chkstk_darwin(v653);
  v726 = (char *)&v569 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v650 = sub_100004700(&qword_10017F8D0);
  uint64_t v579 = *(void *)(v650 - 8);
  __chkstk_darwin(v650);
  v723 = (char *)&v569 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v649 = sub_100004700(&qword_10017F8D8);
  uint64_t v577 = *(void *)(v649 - 8);
  __chkstk_darwin(v649);
  v722 = (char *)&v569 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v651 = sub_100004700(&qword_10017F8E0);
  uint64_t v578 = *(void *)(v651 - 8);
  __chkstk_darwin(v651);
  v724 = (char *)&v569 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v648 = sub_100004700(&qword_10017F8E8);
  uint64_t v576 = *(void *)(v648 - 8);
  __chkstk_darwin(v648);
  v721 = (char *)&v569 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v647 = sub_100004700(&qword_10017F8F0);
  uint64_t v575 = *(void *)(v647 - 8);
  __chkstk_darwin(v647);
  uint64_t v76 = (char *)&v569 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100004700(&qword_10017F8F8);
  uint64_t v574 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v79 = (char *)&v569 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100004700(&qword_10017F900);
  uint64_t v81 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v83 = (char *)&v569 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = a1[3];
  v794 = a1;
  sub_1000036B0(a1, v84);
  sub_1000D6138();
  uint64_t v85 = v795;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v85) {
    return sub_10000478C((uint64_t)v794);
  }
  v571 = v79;
  v572 = v76;
  uint64_t v570 = v77;
  Swift::String v87 = v789;
  uint64_t v86 = v790;
  int64_t v89 = v791;
  Swift::String v88 = v792;
  uint64_t v90 = v793;
  uint64_t v573 = 0;
  uint64_t v795 = v81;
  uint64_t v91 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v92 = (char *)v91;
  if (*(void *)(v91 + 16) != 1 || *(unsigned char *)(v91 + 32) == 74)
  {
    uint64_t v98 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v100 = v99;
    sub_100004700(&qword_10017D620);
    *uint64_t v100 = &type metadata for KMError;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v98 - 8) + 104))(v100, enum case for DecodingError.typeMismatch(_:), v98);
    swift_willThrow();
LABEL_8:
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v795 + 8))(v83, v80);
    return sub_10000478C((uint64_t)v794);
  }
  switch(*(unsigned char *)(v91 + 32))
  {
    case 1:
      LOBYTE(v796) = 1;
      sub_1000D7A24();
      uint64_t v102 = v572;
      uint64_t v103 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v103) {
        goto LABEL_8;
      }
      uint64_t v104 = v647;
      uint64_t v105 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v106 = v795;
      v751 = (char *)v105;
      v767 = v465;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v575 + 8))(v102, v104);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 1;
      goto LABEL_158;
    case 2:
      LOBYTE(v796) = 2;
      sub_1000D79D0();
      Swift::String v107 = v721;
      uint64_t v108 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v108) {
        goto LABEL_8;
      }
      uint64_t v109 = v648;
      uint64_t v96 = 0;
      v751 = (char *)KeyedDecodingContainer.decode(_:forKey:)();
      v767 = v466;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v576 + 8))(v107, v109);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v795 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 2;
      goto LABEL_158;
    case 3:
      LOBYTE(v796) = 3;
      sub_1000D797C();
      uint64_t v110 = v724;
      uint64_t v111 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v111) {
        goto LABEL_8;
      }
      sub_100004700((uint64_t *)&unk_10017E5D0);
      LOBYTE(v804) = 0;
      sub_1000E7154((unint64_t *)&qword_10017C050, (uint64_t *)&unk_10017E5D0);
      uint64_t v112 = v651;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v113 = v795;
      v467 = v796;
      LOBYTE(v804) = 1;
      uint64_t v468 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v458 = 0;
      v751 = v467;
      v767 = (char *)v468;
      uint64_t v573 = 0;
      v558 = v110;
      uint64_t v457 = v559;
      (*(void (**)(char *, uint64_t))(v578 + 8))(v558, v112);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v113 + 8))(v83, v80);
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v96 = 0;
      uint64_t v462 = 0;
      char v463 = 3;
      goto LABEL_158;
    case 4:
      LOBYTE(v796) = 4;
      sub_1000D7928();
      uint64_t v114 = v722;
      uint64_t v115 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v115) {
        goto LABEL_8;
      }
      uint64_t v116 = v649;
      uint64_t v117 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v118 = v795;
      v751 = (char *)v117;
      v767 = v469;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v577 + 8))(v114, v116);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v118 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 4;
      goto LABEL_158;
    case 5:
      LOBYTE(v796) = 5;
      sub_1000D78D4();
      Swift::String v119 = v723;
      uint64_t v120 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v120) {
        goto LABEL_8;
      }
      uint64_t v121 = v650;
      uint64_t v122 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v123 = v795;
      v751 = (char *)v122;
      v767 = v470;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v579 + 8))(v119, v121);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v123 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 5;
      goto LABEL_158;
    case 6:
      LOBYTE(v796) = 6;
      sub_1000D7880();
      uint64_t v124 = v726;
      uint64_t v125 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v125) {
        goto LABEL_8;
      }
      LOBYTE(v796) = 0;
      uint64_t v126 = v653;
      uint64_t v127 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v128 = v795;
      v471 = (char *)v127;
      v473 = v472;
      LOBYTE(v796) = 1;
      uint64_t v474 = KeyedDecodingContainer.decode(_:forKey:)();
      v475 = v124;
      uint64_t v573 = 0;
      uint64_t v458 = v476;
      v751 = v471;
      v767 = v473;
      uint64_t v477 = v126;
      uint64_t v457 = v474;
      (*(void (**)(char *, uint64_t))(v580 + 8))(v475, v477);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v128 + 8))(v83, v80);
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v96 = 0;
      uint64_t v462 = 0;
      char v463 = 6;
      goto LABEL_158;
    case 7:
      LOBYTE(v796) = 7;
      sub_1000D782C();
      Swift::String v129 = v725;
      uint64_t v130 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v130) {
        goto LABEL_8;
      }
      uint64_t v131 = v652;
      uint64_t v132 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v133 = v795;
      v751 = (char *)v132;
      v767 = v478;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v581 + 8))(v129, v131);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v133 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 7;
      goto LABEL_158;
    case 8:
      LOBYTE(v796) = 8;
      sub_1000D77D8();
      uint64_t v134 = v728;
      uint64_t v135 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v135) {
        goto LABEL_8;
      }
      LOBYTE(v796) = 0;
      uint64_t v136 = v656;
      unsigned int v137 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v138 = v795;
      unsigned int v479 = v137;
      LOBYTE(v796) = 1;
      uint64_t v96 = 0;
      v767 = (char *)KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v573 = 0;
      uint64_t v457 = v480;
      (*(void (**)(char *, uint64_t))(v582 + 8))(v134, v136);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v138 + 8))(v83, v80);
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 8;
      goto LABEL_156;
    case 9:
      LOBYTE(v796) = 9;
      sub_1000D7784();
      uint64_t v139 = v727;
      uint64_t v140 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v96 = v140;
      if (v140) {
        goto LABEL_8;
      }
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v654 + 8))(v139, v655);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v795 + 8))(v83, v80);
      v751 = 0;
      v767 = 0;
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 73;
      goto LABEL_158;
    case 0xA:
      LOBYTE(v796) = 10;
      sub_1000D7730();
      uint64_t v141 = v729;
      uint64_t v142 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v142) {
        goto LABEL_8;
      }
      uint64_t v143 = v657;
      uint64_t v144 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v145 = v795;
      v751 = (char *)v144;
      v767 = v481;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v583 + 8))(v141, v143);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v145 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 9;
      goto LABEL_158;
    case 0xB:
      LOBYTE(v796) = 11;
      sub_1000D76DC();
      unint64_t v146 = v730;
      uint64_t v147 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v147) {
        goto LABEL_8;
      }
      uint64_t v148 = v658;
      uint64_t v149 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v150 = v795;
      v751 = (char *)v149;
      v767 = v482;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v584 + 8))(v146, v148);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v150 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 10;
      goto LABEL_158;
    case 0xC:
      LOBYTE(v796) = 12;
      sub_1000D7688();
      uint64_t v151 = v731;
      uint64_t v152 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v152) {
        goto LABEL_8;
      }
      uint64_t v153 = v659;
      uint64_t v154 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v155 = v795;
      v751 = (char *)v154;
      v767 = v483;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v585 + 8))(v151, v153);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v155 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 11;
      goto LABEL_158;
    case 0xD:
      LOBYTE(v796) = 13;
      sub_1000D7634();
      uint64_t v156 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v156) {
        goto LABEL_8;
      }
      uint64_t v157 = v661;
      uint64_t v158 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v159 = v795;
      v751 = (char *)v158;
      v767 = v484;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v586 + 8))(v87, v157);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v159 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 12;
      goto LABEL_158;
    case 0xE:
      LOBYTE(v796) = 14;
      sub_1000D758C();
      uint64_t v160 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v160) {
        goto LABEL_8;
      }
      LOBYTE(v804) = 0;
      sub_1000E71B4();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v161 = v795;
      v792 = v92;
      uint64_t v793 = (uint64_t)v83;
      v751 = v796;
      v767 = v797;
      uint64_t v458 = v799;
      v789 = v798;
      v485 = v86;
      uint64_t v459 = v800;
      uint64_t v460 = v801;
      uint64_t v461 = v802;
      LOBYTE(v804) = 1;
      uint64_t v486 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v573 = 0;
      uint64_t v96 = v486;
      uint64_t v462 = v560;
      (*(void (**)(char *, uint64_t))(v588 + 8))(v485, v720);
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v793, v80);
      char v463 = 13;
      goto LABEL_160;
    case 0xF:
      LOBYTE(v796) = 15;
      sub_1000D7538();
      uint64_t v162 = v732;
      uint64_t v163 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v163) {
        goto LABEL_8;
      }
      LOBYTE(v796) = 0;
      uint64_t v164 = v663;
      uint64_t v165 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v166 = v795;
      v487 = (char *)v165;
      v489 = v488;
      LOBYTE(v796) = 1;
      uint64_t v490 = KeyedDecodingContainer.decode(_:forKey:)();
      v491 = v162;
      uint64_t v573 = 0;
      uint64_t v458 = v492;
      v751 = v487;
      v767 = v489;
      uint64_t v493 = v164;
      uint64_t v457 = v490;
      (*(void (**)(char *, uint64_t))(v587 + 8))(v491, v493);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v166 + 8))(v83, v80);
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v96 = 0;
      uint64_t v462 = 0;
      char v463 = 14;
      goto LABEL_158;
    case 0x10:
      LOBYTE(v796) = 16;
      sub_1000D74E4();
      uint64_t v167 = v89;
      uint64_t v168 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v168) {
        goto LABEL_8;
      }
      LOBYTE(v796) = 0;
      uint64_t v169 = v662;
      uint64_t v170 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v171 = v795;
      v494 = (char *)v170;
      v767 = v495;
      LOBYTE(v796) = 1;
      v496 = v167;
      uint64_t v497 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v458 = v561;
      v789 = (char *)v497;
      v751 = v494;
      LOBYTE(v796) = 2;
      uint64_t v562 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v573 = 0;
      uint64_t v459 = v562;
      uint64_t v460 = v568;
      (*(void (**)(char *, uint64_t))(v591 + 8))(v496, v169);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v171 + 8))(v83, v80);
      uint64_t v461 = 0;
      uint64_t v96 = 0;
      uint64_t v462 = 0;
      char v463 = 15;
LABEL_160:
      uint64_t v565 = (uint64_t)v794;
      uint64_t v566 = v788;
      uint64_t v457 = (uint64_t)v789;
      goto LABEL_159;
    case 0x11:
      LOBYTE(v796) = 17;
      sub_1000D7490();
      uint64_t v172 = v733;
      uint64_t v173 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v173) {
        goto LABEL_8;
      }
      uint64_t v174 = v660;
      uint64_t v175 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v176 = v795;
      v751 = (char *)v175;
      v767 = v498;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v589 + 8))(v172, v174);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v176 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 16;
      goto LABEL_158;
    case 0x12:
      LOBYTE(v796) = 18;
      sub_1000D743C();
      uint64_t v177 = v734;
      uint64_t v178 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v178) {
        goto LABEL_8;
      }
      uint64_t v179 = v664;
      uint64_t v180 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v181 = v795;
      v751 = (char *)v180;
      v767 = v499;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v590 + 8))(v177, v179);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v181 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 17;
      goto LABEL_158;
    case 0x13:
      LOBYTE(v796) = 19;
      sub_1000D73E8();
      uint64_t v182 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v182) {
        goto LABEL_8;
      }
      LOBYTE(v796) = 0;
      uint64_t v183 = v667;
      uint64_t v184 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v185 = v795;
      v500 = (char *)v184;
      v767 = v501;
      sub_100004700((uint64_t *)&unk_10017E5D0);
      LOBYTE(v804) = 1;
      v502 = v787;
      sub_1000E7154((unint64_t *)&qword_10017C050, (uint64_t *)&unk_10017E5D0);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v460 = 0;
      v751 = v500;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v594 + 8))(v502, v183);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v185 + 8))(v83, v80);
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v461 = 0;
      uint64_t v96 = 0;
      uint64_t v462 = 0;
      uint64_t v457 = (uint64_t)v796;
      char v463 = 18;
      goto LABEL_158;
    case 0x14:
      LOBYTE(v796) = 20;
      sub_1000D7394();
      uint64_t v186 = v735;
      uint64_t v187 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v187) {
        goto LABEL_8;
      }
      uint64_t v188 = v665;
      uint64_t v189 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v190 = v795;
      v751 = (char *)v189;
      v767 = v503;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v592 + 8))(v186, v188);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v190 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 19;
      goto LABEL_158;
    case 0x15:
      LOBYTE(v796) = 21;
      sub_1000D7340();
      uint64_t v191 = v736;
      uint64_t v192 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v192) {
        goto LABEL_8;
      }
      uint64_t v193 = v666;
      uint64_t v194 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v195 = v795;
      v751 = (char *)v194;
      v767 = v504;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v593 + 8))(v191, v193);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 20;
      goto LABEL_158;
    case 0x16:
      LOBYTE(v796) = 22;
      sub_1000D72EC();
      v196 = v737;
      uint64_t v197 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v197) {
        goto LABEL_8;
      }
      uint64_t v198 = v668;
      uint64_t v199 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v200 = v795;
      v751 = (char *)v199;
      v767 = v505;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v595 + 8))(v196, v198);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v200 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 21;
      goto LABEL_158;
    case 0x17:
      LOBYTE(v796) = 23;
      sub_1000D7298();
      uint64_t v201 = v738;
      uint64_t v202 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v202) {
        goto LABEL_8;
      }
      uint64_t v203 = v669;
      uint64_t v204 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v205 = v795;
      v751 = (char *)v204;
      v767 = v506;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v596 + 8))(v201, v203);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v205 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 22;
      goto LABEL_158;
    case 0x18:
      LOBYTE(v796) = 24;
      sub_1000D7244();
      uint64_t v206 = v739;
      uint64_t v207 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v207) {
        goto LABEL_8;
      }
      uint64_t v208 = v670;
      uint64_t v209 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v210 = v795;
      v751 = (char *)v209;
      v767 = v507;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v597 + 8))(v206, v208);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v210 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 23;
      goto LABEL_158;
    case 0x19:
      LOBYTE(v796) = 25;
      sub_1000D71F0();
      uint64_t v211 = v740;
      uint64_t v212 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v212) {
        goto LABEL_8;
      }
      uint64_t v213 = v671;
      uint64_t v214 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v215 = v795;
      v751 = (char *)v214;
      v767 = v508;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v598 + 8))(v211, v213);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v215 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 24;
      goto LABEL_158;
    case 0x1A:
      LOBYTE(v796) = 26;
      sub_1000D719C();
      uint64_t v216 = v741;
      uint64_t v217 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v217) {
        goto LABEL_8;
      }
      uint64_t v218 = v672;
      uint64_t v219 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v220 = v795;
      v751 = (char *)v219;
      v767 = v509;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v599 + 8))(v216, v218);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v220 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 25;
      goto LABEL_158;
    case 0x1B:
      LOBYTE(v796) = 27;
      sub_1000D70A4();
      uint64_t v221 = v744;
      uint64_t v222 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v222) {
        goto LABEL_8;
      }
      sub_100004700((uint64_t *)&unk_10017E5D0);
      LOBYTE(v804) = 0;
      sub_1000E7154((unint64_t *)&qword_10017C050, (uint64_t *)&unk_10017E5D0);
      uint64_t v223 = v675;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v224 = v795;
      v510 = v796;
      sub_100004700(&qword_10017E418);
      char v803 = 1;
      sub_1000900AC();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v96 = 0;
      v751 = v510;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v603 + 8))(v221, v223);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v224 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      v767 = v804;
      char v463 = 26;
      goto LABEL_158;
    case 0x1C:
      LOBYTE(v796) = 28;
      sub_1000D7050();
      uint64_t v225 = v742;
      uint64_t v226 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v226) {
        goto LABEL_8;
      }
      uint64_t v227 = v673;
      uint64_t v228 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v229 = v795;
      v751 = (char *)v228;
      v767 = v511;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v600 + 8))(v225, v227);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v229 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 27;
      goto LABEL_158;
    case 0x1D:
      LOBYTE(v796) = 29;
      sub_1000D6FFC();
      uint64_t v230 = v743;
      uint64_t v231 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v231) {
        goto LABEL_8;
      }
      uint64_t v232 = v674;
      uint64_t v233 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v234 = v795;
      v751 = (char *)v233;
      v767 = v512;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v601 + 8))(v230, v232);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v234 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 28;
      goto LABEL_158;
    case 0x1E:
      LOBYTE(v796) = 30;
      sub_1000D6FA8();
      uint64_t v235 = v745;
      uint64_t v236 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v236) {
        goto LABEL_8;
      }
      uint64_t v237 = v676;
      uint64_t v238 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v239 = v795;
      v751 = (char *)v238;
      v767 = v513;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v602 + 8))(v235, v237);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v239 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 29;
      goto LABEL_158;
    case 0x1F:
      LOBYTE(v796) = 31;
      sub_1000D6F54();
      uint64_t v240 = v746;
      uint64_t v241 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v241) {
        goto LABEL_8;
      }
      sub_100004700(&qword_10017F150);
      sub_1000E7154(&qword_10017F908, &qword_10017F150);
      uint64_t v242 = v677;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v243 = v795;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v604 + 8))(v240, v242);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v243 + 8))(v83, v80);
      v767 = 0;
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      v751 = v796;
      char v463 = 30;
      goto LABEL_158;
    case 0x20:
      LOBYTE(v796) = 32;
      sub_1000D6F00();
      uint64_t v244 = v747;
      uint64_t v245 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v245) {
        goto LABEL_8;
      }
      uint64_t v246 = v678;
      uint64_t v247 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v248 = v795;
      v751 = (char *)v247;
      v767 = v514;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v605 + 8))(v244, v246);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v248 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 31;
      goto LABEL_158;
    case 0x21:
      LOBYTE(v796) = 33;
      sub_1000D6EAC();
      uint64_t v249 = v748;
      uint64_t v250 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v250) {
        goto LABEL_8;
      }
      uint64_t v251 = v679;
      uint64_t v252 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v253 = v795;
      v751 = (char *)v252;
      v767 = v515;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v606 + 8))(v249, v251);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v253 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 32;
      goto LABEL_158;
    case 0x22:
      LOBYTE(v796) = 34;
      sub_1000D6E58();
      uint64_t v254 = v749;
      uint64_t v255 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v255) {
        goto LABEL_8;
      }
      uint64_t v256 = v680;
      uint64_t v257 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v258 = v795;
      v751 = (char *)v257;
      v767 = v516;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v607 + 8))(v254, v256);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v258 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 33;
      goto LABEL_158;
    case 0x23:
      LOBYTE(v796) = 35;
      sub_1000D6E04();
      uint64_t v259 = v750;
      uint64_t v260 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v260) {
        goto LABEL_8;
      }
      uint64_t v261 = v681;
      uint64_t v262 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v263 = v795;
      v751 = (char *)v262;
      v767 = v517;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v608 + 8))(v259, v261);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v263 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 34;
      goto LABEL_158;
    case 0x24:
      LOBYTE(v796) = 36;
      sub_1000D6DB0();
      uint64_t v264 = v751;
      uint64_t v265 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v265) {
        goto LABEL_8;
      }
      uint64_t v266 = v682;
      unsigned int v267 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v268 = v795;
      unsigned int v479 = v267;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v609 + 8))(v264, v266);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v268 + 8))(v83, v80);
      v767 = 0;
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 35;
LABEL_156:
      unint64_t v464 = v479;
      goto LABEL_157;
    case 0x25:
      LOBYTE(v796) = 37;
      sub_1000D6D5C();
      v269 = v752;
      uint64_t v270 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v270) {
        goto LABEL_8;
      }
      uint64_t v271 = v683;
      uint64_t v272 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v273 = v795;
      v751 = (char *)v272;
      v767 = v518;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v610 + 8))(v269, v271);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v273 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 36;
      goto LABEL_158;
    case 0x26:
      LOBYTE(v796) = 38;
      sub_1000D6D08();
      uint64_t v274 = v753;
      uint64_t v275 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v275) {
        goto LABEL_8;
      }
      uint64_t v276 = v684;
      uint64_t v277 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v278 = v795;
      v751 = (char *)v277;
      v767 = v519;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v611 + 8))(v274, v276);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v278 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 37;
      goto LABEL_158;
    case 0x27:
      LOBYTE(v796) = 39;
      sub_1000D6CB4();
      uint64_t v279 = v754;
      uint64_t v280 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v280) {
        goto LABEL_8;
      }
      uint64_t v281 = v685;
      uint64_t v282 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v283 = v795;
      v751 = (char *)v282;
      v767 = v520;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v612 + 8))(v279, v281);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v283 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 38;
      goto LABEL_158;
    case 0x28:
      LOBYTE(v796) = 40;
      sub_1000D6C60();
      uint64_t v284 = v755;
      uint64_t v285 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v285) {
        goto LABEL_8;
      }
      uint64_t v286 = v686;
      uint64_t v287 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v288 = v795;
      v751 = (char *)v287;
      v767 = v521;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v613 + 8))(v284, v286);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v288 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 39;
      goto LABEL_158;
    case 0x29:
      LOBYTE(v796) = 41;
      sub_1000D6C0C();
      v289 = v756;
      uint64_t v290 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v290) {
        goto LABEL_8;
      }
      uint64_t v291 = v687;
      uint64_t v292 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v293 = v795;
      v751 = (char *)v292;
      v767 = v522;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v614 + 8))(v289, v291);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v293 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 40;
      goto LABEL_158;
    case 0x2A:
      LOBYTE(v796) = 42;
      sub_1000D6BB8();
      uint64_t v294 = v757;
      uint64_t v295 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v295) {
        goto LABEL_8;
      }
      uint64_t v296 = v688;
      uint64_t v297 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v298 = v795;
      v751 = (char *)v297;
      v767 = v523;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v615 + 8))(v294, v296);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v298 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 41;
      goto LABEL_158;
    case 0x2B:
      LOBYTE(v796) = 43;
      sub_1000D6B64();
      uint64_t v299 = v759;
      uint64_t v300 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v300) {
        goto LABEL_8;
      }
      LOBYTE(v796) = 0;
      uint64_t v301 = v690;
      uint64_t v302 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v303 = v795;
      v524 = (char *)v302;
      v526 = v525;
      LOBYTE(v796) = 1;
      uint64_t v527 = KeyedDecodingContainer.decode(_:forKey:)();
      v528 = v299;
      uint64_t v573 = 0;
      uint64_t v458 = v563;
      v751 = v524;
      v767 = v526;
      uint64_t v564 = v301;
      uint64_t v457 = v527;
      (*(void (**)(char *, uint64_t))(v616 + 8))(v528, v564);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v303 + 8))(v83, v80);
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v96 = 0;
      uint64_t v462 = 0;
      char v463 = 42;
      goto LABEL_158;
    case 0x2C:
      LOBYTE(v796) = 44;
      sub_1000D6B10();
      uint64_t v304 = v758;
      uint64_t v305 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v305) {
        goto LABEL_8;
      }
      uint64_t v306 = v689;
      uint64_t v307 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v308 = v795;
      v751 = (char *)v307;
      v767 = v529;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v617 + 8))(v304, v306);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v308 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 43;
      goto LABEL_158;
    case 0x2D:
      LOBYTE(v796) = 45;
      sub_1000D6ABC();
      uint64_t v309 = v760;
      uint64_t v310 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v310) {
        goto LABEL_8;
      }
      uint64_t v311 = v691;
      uint64_t v312 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v313 = v795;
      v751 = (char *)v312;
      v767 = v530;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v618 + 8))(v309, v311);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v313 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 44;
      goto LABEL_158;
    case 0x2E:
      LOBYTE(v796) = 46;
      sub_1000D6A68();
      v314 = v762;
      uint64_t v315 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v315) {
        goto LABEL_8;
      }
      LOBYTE(v796) = 0;
      uint64_t v316 = v693;
      uint64_t v317 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v318 = v795;
      v319 = (char *)v317;
      uint64_t v321 = v320;
      LOBYTE(v796) = 1;
      uint64_t v322 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v96 = 0;
      v751 = v319;
      v767 = v321;
      uint64_t v573 = 0;
      v557 = *(void (**)(char *, uint64_t))(v620 + 8);
      uint64_t v793 = v322;
      v557(v314, v316);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v318 + 8))(v83, v80);
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      uint64_t v457 = v793 & 0x1FFFFFFFFLL;
      char v463 = 45;
      goto LABEL_158;
    case 0x2F:
      LOBYTE(v796) = 47;
      sub_1000D6A14();
      v323 = v761;
      uint64_t v324 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v324) {
        goto LABEL_8;
      }
      uint64_t v325 = v692;
      uint64_t v326 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v327 = v795;
      v751 = (char *)v326;
      v767 = v531;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v619 + 8))(v323, v325);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v327 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 46;
      goto LABEL_158;
    case 0x30:
      LOBYTE(v796) = 48;
      sub_1000D69C0();
      uint64_t v328 = v763;
      uint64_t v329 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v329) {
        goto LABEL_8;
      }
      uint64_t v330 = v694;
      uint64_t v331 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v332 = v795;
      v751 = (char *)v331;
      v767 = v532;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v621 + 8))(v328, v330);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v332 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 47;
      goto LABEL_158;
    case 0x31:
      LOBYTE(v796) = 49;
      sub_1000D696C();
      uint64_t v333 = v764;
      uint64_t v334 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v334) {
        goto LABEL_8;
      }
      uint64_t v335 = v695;
      uint64_t v336 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v337 = v795;
      v751 = (char *)v336;
      v767 = v533;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v622 + 8))(v333, v335);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v337 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 48;
      goto LABEL_158;
    case 0x32:
      LOBYTE(v796) = 50;
      sub_1000D6918();
      uint64_t v338 = v765;
      uint64_t v339 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v339) {
        goto LABEL_8;
      }
      uint64_t v340 = v696;
      uint64_t v341 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v342 = v795;
      v751 = (char *)v341;
      v767 = v534;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v623 + 8))(v338, v340);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v342 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 49;
      goto LABEL_158;
    case 0x33:
      LOBYTE(v796) = 51;
      sub_1000D68C4();
      unint64_t v343 = v766;
      uint64_t v344 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v344) {
        goto LABEL_8;
      }
      uint64_t v345 = v697;
      uint64_t v346 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v347 = v795;
      v751 = (char *)v346;
      v767 = v535;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v624 + 8))(v343, v345);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v347 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 50;
      goto LABEL_158;
    case 0x34:
      LOBYTE(v796) = 52;
      sub_1000D6870();
      uint64_t v348 = v767;
      uint64_t v349 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v349) {
        goto LABEL_8;
      }
      sub_100004700(&qword_10017F150);
      sub_1000E7154(&qword_10017F908, &qword_10017F150);
      uint64_t v350 = v698;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v351 = v795;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v625 + 8))(v348, v350);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v351 + 8))(v83, v80);
      v767 = 0;
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      v751 = v796;
      char v463 = 51;
      goto LABEL_158;
    case 0x35:
      LOBYTE(v796) = 53;
      sub_1000D681C();
      uint64_t v352 = v768;
      uint64_t v353 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v353) {
        goto LABEL_8;
      }
      uint64_t v354 = v699;
      uint64_t v355 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v356 = v795;
      v751 = (char *)v355;
      v767 = v536;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v626 + 8))(v352, v354);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v356 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 52;
      goto LABEL_158;
    case 0x36:
      LOBYTE(v796) = 54;
      sub_1000D67C8();
      unint64_t v357 = v769;
      uint64_t v358 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v358) {
        goto LABEL_8;
      }
      uint64_t v359 = v700;
      uint64_t v360 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v361 = v795;
      v751 = (char *)v360;
      v767 = v537;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v627 + 8))(v357, v359);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v361 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 53;
      goto LABEL_158;
    case 0x37:
      LOBYTE(v796) = 55;
      sub_1000D6774();
      uint64_t v362 = v770;
      uint64_t v363 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v363) {
        goto LABEL_8;
      }
      uint64_t v364 = v701;
      uint64_t v365 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v366 = v795;
      v751 = (char *)v365;
      v767 = v538;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v628 + 8))(v362, v364);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v366 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 54;
      goto LABEL_158;
    case 0x38:
      LOBYTE(v796) = 56;
      sub_1000D6720();
      v367 = v771;
      uint64_t v368 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v368) {
        goto LABEL_8;
      }
      uint64_t v369 = v702;
      uint64_t v370 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v371 = v795;
      v751 = (char *)v370;
      v767 = v539;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v629 + 8))(v367, v369);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v371 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 55;
      goto LABEL_158;
    case 0x39:
      LOBYTE(v796) = 57;
      sub_1000D66CC();
      v372 = v772;
      uint64_t v373 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v373) {
        goto LABEL_8;
      }
      uint64_t v374 = v703;
      uint64_t v375 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v376 = v795;
      v751 = (char *)v375;
      v767 = v540;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v630 + 8))(v372, v374);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v376 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 56;
      goto LABEL_158;
    case 0x3A:
      LOBYTE(v796) = 58;
      sub_1000D6678();
      uint64_t v377 = v773;
      uint64_t v378 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v378) {
        goto LABEL_8;
      }
      uint64_t v379 = v704;
      uint64_t v380 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v381 = v795;
      v751 = (char *)v380;
      v767 = v541;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v631 + 8))(v377, v379);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v381 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 57;
      goto LABEL_158;
    case 0x3B:
      LOBYTE(v796) = 59;
      sub_1000D6624();
      uint64_t v382 = v774;
      uint64_t v383 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v383) {
        goto LABEL_8;
      }
      uint64_t v384 = v705;
      uint64_t v385 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v386 = v795;
      v751 = (char *)v385;
      v767 = v542;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v632 + 8))(v382, v384);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v386 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 58;
      goto LABEL_158;
    case 0x3C:
      LOBYTE(v796) = 60;
      sub_1000D65D0();
      uint64_t v387 = v775;
      uint64_t v388 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v388) {
        goto LABEL_8;
      }
      uint64_t v389 = v706;
      uint64_t v390 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v391 = v795;
      v751 = (char *)v390;
      v767 = v543;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v633 + 8))(v387, v389);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v391 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 59;
      goto LABEL_158;
    case 0x3D:
      LOBYTE(v796) = 61;
      sub_1000D657C();
      v392 = v776;
      uint64_t v393 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v393) {
        goto LABEL_8;
      }
      uint64_t v394 = v707;
      uint64_t v395 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v396 = v795;
      v751 = (char *)v395;
      v767 = v544;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v634 + 8))(v392, v394);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v396 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 60;
      goto LABEL_158;
    case 0x3E:
      LOBYTE(v796) = 62;
      sub_1000D6528();
      v397 = v777;
      uint64_t v398 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v398) {
        goto LABEL_8;
      }
      uint64_t v399 = v708;
      uint64_t v400 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v401 = v795;
      v751 = (char *)v400;
      v767 = v545;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v635 + 8))(v397, v399);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v401 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 61;
      goto LABEL_158;
    case 0x3F:
      LOBYTE(v796) = 63;
      sub_1000D64D4();
      v402 = v778;
      uint64_t v403 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v403) {
        goto LABEL_8;
      }
      uint64_t v404 = v709;
      uint64_t v405 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v406 = v795;
      v751 = (char *)v405;
      v767 = v546;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v636 + 8))(v402, v404);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v406 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 62;
      goto LABEL_158;
    case 0x40:
      LOBYTE(v796) = 64;
      sub_1000D6480();
      v407 = v779;
      uint64_t v408 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v408) {
        goto LABEL_8;
      }
      uint64_t v409 = v710;
      uint64_t v410 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v411 = v795;
      v751 = (char *)v410;
      v767 = v547;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v637 + 8))(v407, v409);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v411 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 63;
      goto LABEL_158;
    case 0x41:
      LOBYTE(v796) = 65;
      sub_1000D642C();
      v412 = v780;
      uint64_t v413 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v413) {
        goto LABEL_8;
      }
      uint64_t v414 = v711;
      uint64_t v415 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v416 = v795;
      v751 = (char *)v415;
      v767 = v548;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v638 + 8))(v412, v414);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v416 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 64;
      goto LABEL_158;
    case 0x42:
      LOBYTE(v796) = 66;
      sub_1000D63D8();
      v417 = v781;
      uint64_t v418 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v418) {
        goto LABEL_8;
      }
      uint64_t v419 = v712;
      uint64_t v420 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v421 = v795;
      v751 = (char *)v420;
      v767 = v549;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v639 + 8))(v417, v419);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v421 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 65;
      goto LABEL_158;
    case 0x43:
      LOBYTE(v796) = 67;
      sub_1000D6384();
      v422 = v782;
      uint64_t v423 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v423) {
        goto LABEL_8;
      }
      uint64_t v424 = v713;
      uint64_t v425 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v426 = v795;
      v751 = (char *)v425;
      v767 = v550;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v640 + 8))(v422, v424);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v426 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 66;
      goto LABEL_158;
    case 0x44:
      LOBYTE(v796) = 68;
      sub_1000D6330();
      v427 = v783;
      uint64_t v428 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v428) {
        goto LABEL_8;
      }
      uint64_t v429 = v714;
      uint64_t v430 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v431 = v795;
      v751 = (char *)v430;
      v767 = v551;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v641 + 8))(v427, v429);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v431 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 67;
      goto LABEL_158;
    case 0x45:
      LOBYTE(v796) = 69;
      sub_1000D62DC();
      v432 = v784;
      uint64_t v433 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v433) {
        goto LABEL_8;
      }
      uint64_t v434 = v715;
      uint64_t v435 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v436 = v795;
      v751 = (char *)v435;
      v767 = v552;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v642 + 8))(v432, v434);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v436 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 68;
      goto LABEL_158;
    case 0x46:
      LOBYTE(v796) = 70;
      sub_1000D6288();
      v437 = v88;
      uint64_t v438 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v438) {
        goto LABEL_8;
      }
      uint64_t v439 = v716;
      uint64_t v440 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v441 = v795;
      v751 = (char *)v440;
      v767 = v553;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v643 + 8))(v437, v439);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v441 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 69;
      goto LABEL_158;
    case 0x47:
      LOBYTE(v796) = 71;
      sub_1000D6234();
      v442 = v786;
      uint64_t v443 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v443) {
        goto LABEL_8;
      }
      uint64_t v444 = v717;
      uint64_t v445 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v446 = v795;
      v751 = (char *)v445;
      v767 = v554;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v644 + 8))(v442, v444);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v446 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 70;
      goto LABEL_158;
    case 0x48:
      LOBYTE(v796) = 72;
      sub_1000D61E0();
      uint64_t v447 = v90;
      uint64_t v448 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v448) {
        goto LABEL_8;
      }
      uint64_t v449 = v719;
      uint64_t v450 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v451 = v795;
      v751 = (char *)v450;
      v767 = v555;
      uint64_t v573 = 0;
      (*(void (**)(uint64_t, uint64_t))(v645 + 8))(v447, v449);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v451 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 71;
      goto LABEL_158;
    case 0x49:
      LOBYTE(v796) = 73;
      sub_1000D618C();
      v452 = v785;
      uint64_t v453 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v453) {
        goto LABEL_8;
      }
      uint64_t v454 = v718;
      uint64_t v455 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v456 = v795;
      uint64_t v96 = 0;
      v751 = (char *)v455;
      v767 = v556;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v646 + 8))(v452, v454);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v456 + 8))(v83, v80);
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 72;
      goto LABEL_158;
    default:
      LOBYTE(v796) = 0;
      sub_1000D7A78();
      uint64_t v93 = v571;
      uint64_t v94 = v573;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v94) {
        goto LABEL_8;
      }
      sub_100004700(&qword_10017F688);
      sub_1000E7208(&qword_10017F918, (void (*)(void))sub_1000E7278);
      uint64_t v95 = v570;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v96 = 0;
      uint64_t v97 = v795;
      uint64_t v573 = 0;
      (*(void (**)(char *, uint64_t))(v574 + 8))(v93, v95);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v83, v80);
      v767 = 0;
      uint64_t v457 = 0;
      uint64_t v458 = 0;
      uint64_t v459 = 0;
      uint64_t v460 = 0;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      char v463 = 0;
      unint64_t v464 = (unint64_t)v796;
LABEL_157:
      v751 = (char *)v464;
LABEL_158:
      uint64_t v565 = (uint64_t)v794;
      uint64_t v566 = v788;
LABEL_159:
      uint64_t result = sub_10000478C(v565);
      v567 = v767;
      *(void *)uint64_t v566 = v751;
      *(void *)(v566 + 8) = v567;
      *(void *)(v566 + 16) = v457;
      *(void *)(v566 + 24) = v458;
      *(void *)(v566 + 32) = v459;
      *(void *)(v566 + 40) = v460;
      *(void *)(v566 + 48) = v461;
      *(void *)(v566 + 56) = v96;
      *(void *)(v566 + 64) = v462;
      *(unsigned char *)(v566 + 72) = v463;
      break;
  }
  return result;
}

uint64_t sub_1000E1760(uint64_t a1)
{
  uint64_t v2 = sub_100004700(&qword_10017F6A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000E17C4()
{
  unint64_t result = qword_10017F6A8;
  if (!qword_10017F6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F6A8);
  }
  return result;
}

uint64_t destroy for KMError(uint64_t a1)
{
  return sub_10003E9C8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
}

uint64_t initializeWithCopy for KMError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  sub_10005C020(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(unsigned char *)(a2 + 72));
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 72) = v13;
  return a1;
}

uint64_t assignWithCopy for KMError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  sub_10005C020(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(unsigned char *)(a2 + 72));
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  unint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  char v21 = *(unsigned char *)(a1 + 72);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 72) = v23;
  sub_10003E9C8(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

__n128 initializeWithTake for KMError(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for KMError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  char v4 = *(unsigned char *)(a2 + 72);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  char v14 = *(unsigned char *)(a1 + 72);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(void *)(a1 + 64) = v3;
  *(unsigned char *)(a1 + 72) = v4;
  sub_10003E9C8(v5, v7, v6, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for KMError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xB7 && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 183);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 0x49) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KMError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB6)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 - 183;
    if (a3 >= 0xB7) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xB7) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 72) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000E1B18(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 72) <= 0x48u) {
    return *(unsigned __int8 *)(a1 + 72);
  }
  else {
    return (*(_DWORD *)a1 + 73);
  }
}

uint64_t sub_1000E1B30(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x49)
  {
    *(void *)__n128 result = a2 - 73;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    LOBYTE(a2) = 73;
  }
  *(unsigned char *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for KMError()
{
  return &type metadata for KMError;
}

uint64_t getEnumTagSinglePayload for KMError.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xB7) {
    goto LABEL_17;
  }
  if (a2 + 73 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 73) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 73;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 73;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 73;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x4A;
  int v8 = v6 - 74;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KMError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 73 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 73) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xB7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xB6)
  {
    unsigned int v6 = ((a2 - 183) >> 8) + 1;
    *__n128 result = a2 + 73;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E1CC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 73;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KMError.CodingKeys()
{
  return &type metadata for KMError.CodingKeys;
}

ValueMetadata *type metadata accessor for KMError.MultipleCodingKeys()
{
  return &type metadata for KMError.MultipleCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DeserializationCodingKeys()
{
  return &type metadata for KMError.DeserializationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KernelCommunicationCodingKeys()
{
  return &type metadata for KMError.KernelCommunicationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KernelRequestCodingKeys()
{
  return &type metadata for KMError.KernelRequestCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DriverKitLaunchCodingKeys()
{
  return &type metadata for KMError.DriverKitLaunchCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ExtensionLoadCodingKeys()
{
  return &type metadata for KMError.ExtensionLoadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.CollectionLoadCodingKeys()
{
  return &type metadata for KMError.CollectionLoadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.CollectionLinkageCodingKeys()
{
  return &type metadata for KMError.CollectionLinkageCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ResourceLoadCodingKeys()
{
  return &type metadata for KMError.ResourceLoadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SerializationCodingKeys()
{
  return &type metadata for KMError.SerializationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InvalidArgumentCodingKeys()
{
  return &type metadata for KMError.InvalidArgumentCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.NotFoundCodingKeys()
{
  return &type metadata for KMError.NotFoundCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KernelCollectionBuildCodingKeys()
{
  return &type metadata for KMError.KernelCollectionBuildCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.RealizingCodingKeys()
{
  return &type metadata for KMError.RealizingCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DependencyResolutionCodingKeys()
{
  return &type metadata for KMError.DependencyResolutionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.MissingDependencyRequestCodingKeys()
{
  return &type metadata for KMError.MissingDependencyRequestCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KMError.IncompatibleVersionCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E1ED4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KMError.IncompatibleVersionCodingKeys()
{
  return &type metadata for KMError.IncompatibleVersionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.IncompatibleArchitectureCodingKeys()
{
  return &type metadata for KMError.IncompatibleArchitectureCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ValidationCodingKeys()
{
  return &type metadata for KMError.ValidationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InvalidPropertiesCodingKeys()
{
  return &type metadata for KMError.InvalidPropertiesCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.FilesystemCodingKeys()
{
  return &type metadata for KMError.FilesystemCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DiskAccessCodingKeys()
{
  return &type metadata for KMError.DiskAccessCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.FlowAccessCodingKeys()
{
  return &type metadata for KMError.FlowAccessCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.RecoveryCodingKeys()
{
  return &type metadata for KMError.RecoveryCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.NvramAccessCodingKeys()
{
  return &type metadata for KMError.NvramAccessCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.BinaryParsingCodingKeys()
{
  return &type metadata for KMError.BinaryParsingCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.FutureVersionCodingKeys()
{
  return &type metadata for KMError.FutureVersionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.CacheBuildingCodingKeys()
{
  return &type metadata for KMError.CacheBuildingCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.StagingCodingKeys()
{
  return &type metadata for KMError.StagingCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SystemPolicyCodingKeys()
{
  return &type metadata for KMError.SystemPolicyCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.UnapprovedToLoadCodingKeys()
{
  return &type metadata for KMError.UnapprovedToLoadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.UnapprovedToLoadMultipleCodingKeys()
{
  return &type metadata for KMError.UnapprovedToLoadMultipleCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.AuthenticationCodingKeys()
{
  return &type metadata for KMError.AuthenticationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SandboxCodingKeys()
{
  return &type metadata for KMError.SandboxCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ConfigurationCodingKeys()
{
  return &type metadata for KMError.ConfigurationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.LoggingErrorCodingKeys()
{
  return &type metadata for KMError.LoggingErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SubprocessFailedCodingKeys()
{
  return &type metadata for KMError.SubprocessFailedCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InsufficientPermissionsCodingKeys()
{
  return &type metadata for KMError.InsufficientPermissionsCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InvalidKeyCodingKeys()
{
  return &type metadata for KMError.InvalidKeyCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.UnloadCodingKeys()
{
  return &type metadata for KMError.UnloadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ListErrorCodingKeys()
{
  return &type metadata for KMError.ListErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.RunninglistErrorCodingKeys()
{
  return &type metadata for KMError.RunninglistErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DumpstateErrorCodingKeys()
{
  return &type metadata for KMError.DumpstateErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DiagnoseErrorCodingKeys()
{
  return &type metadata for KMError.DiagnoseErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.BootPolicyCodingKeys()
{
  return &type metadata for KMError.BootPolicyCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ExceptionListCodingKeys()
{
  return &type metadata for KMError.ExceptionListCodingKeys;
}

unsigned char *_s10driverkitd7KMErrorO23KernelRequestCodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E21A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KMError.CodeSigningCodingKeys()
{
  return &type metadata for KMError.CodeSigningCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.TriggerPanicMedicCodingKeys()
{
  return &type metadata for KMError.TriggerPanicMedicCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ConsistencyCheckCodingKeys()
{
  return &type metadata for KMError.ConsistencyCheckCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InSafeBootCodingKeys()
{
  return &type metadata for KMError.InSafeBootCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InDarwinOSCodingKeys()
{
  return &type metadata for KMError.InDarwinOSCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InternalErrorCodingKeys()
{
  return &type metadata for KMError.InternalErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.RequiresRebootCodingKeys()
{
  return &type metadata for KMError.RequiresRebootCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InKcgenOSCodingKeys()
{
  return &type metadata for KMError.InKcgenOSCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DuplicateExtensionCodingKeys()
{
  return &type metadata for KMError.DuplicateExtensionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InExcludeListCodingKeys()
{
  return &type metadata for KMError.InExcludeListCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.MigrationErrorCodingKeys()
{
  return &type metadata for KMError.MigrationErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.UnsupportedErrorCodingKeys()
{
  return &type metadata for KMError.UnsupportedErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DeveloperToolsErrorCodingKeys()
{
  return &type metadata for KMError.DeveloperToolsErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.FilesetErrorCodingKeys()
{
  return &type metadata for KMError.FilesetErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.MissingDeveloperKitCodingKeys()
{
  return &type metadata for KMError.MissingDeveloperKitCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KdkInstallerErrorCodingKeys()
{
  return &type metadata for KMError.KdkInstallerErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KnoxDownloaderErrorCodingKeys()
{
  return &type metadata for KMError.KnoxDownloaderErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.PackageInstallerErrorCodingKeys()
{
  return &type metadata for KMError.PackageInstallerErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DextRecordErrorCodingKeys()
{
  return &type metadata for KMError.DextRecordErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SystemExtensionWaitForTerminationCodingKeys()
{
  return &type metadata for KMError.SystemExtensionWaitForTerminationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys()
{
  return &type metadata for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SystemExtensionsErrorCodingKeys()
{
  return &type metadata for KMError.SystemExtensionsErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.BuildManifestNotFoundErrorCodingKeys()
{
  return &type metadata for KMError.BuildManifestNotFoundErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InvalidRequestCodingKeys()
{
  return &type metadata for KMError.InvalidRequestCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ConnectionCodingKeys()
{
  return &type metadata for KMError.ConnectionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.TimedOutCodingKeys()
{
  return &type metadata for KMError.TimedOutCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.BusyCodingKeys()
{
  return &type metadata for KMError.BusyCodingKeys;
}

unsigned char *_s10driverkitd7KMErrorO18MultipleCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000E241CLL);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for KMError.ArithmeticCodingKeys()
{
  return &type metadata for KMError.ArithmeticCodingKeys;
}

unint64_t sub_1000E2458()
{
  unint64_t result = qword_100189640[0];
  if (!qword_100189640[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100189640);
  }
  return result;
}

unint64_t sub_1000E24B0()
{
  unint64_t result = qword_100189850[0];
  if (!qword_100189850[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100189850);
  }
  return result;
}

unint64_t sub_1000E2508()
{
  unint64_t result = qword_100189A60[0];
  if (!qword_100189A60[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100189A60);
  }
  return result;
}

unint64_t sub_1000E2560()
{
  unint64_t result = qword_100189C70[0];
  if (!qword_100189C70[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100189C70);
  }
  return result;
}

unint64_t sub_1000E25B8()
{
  unint64_t result = qword_100189E80[0];
  if (!qword_100189E80[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100189E80);
  }
  return result;
}

unint64_t sub_1000E2610()
{
  unint64_t result = qword_10018A090[0];
  if (!qword_10018A090[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018A090);
  }
  return result;
}

unint64_t sub_1000E2668()
{
  unint64_t result = qword_10018A2A0[0];
  if (!qword_10018A2A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018A2A0);
  }
  return result;
}

unint64_t sub_1000E26C0()
{
  unint64_t result = qword_10018A4B0[0];
  if (!qword_10018A4B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018A4B0);
  }
  return result;
}

unint64_t sub_1000E2718()
{
  unint64_t result = qword_10018A6C0[0];
  if (!qword_10018A6C0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018A6C0);
  }
  return result;
}

unint64_t sub_1000E2770()
{
  unint64_t result = qword_10018A8D0[0];
  if (!qword_10018A8D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018A8D0);
  }
  return result;
}

unint64_t sub_1000E27C8()
{
  unint64_t result = qword_10018AAE0[0];
  if (!qword_10018AAE0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018AAE0);
  }
  return result;
}

unint64_t sub_1000E2820()
{
  unint64_t result = qword_10018ACF0[0];
  if (!qword_10018ACF0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018ACF0);
  }
  return result;
}

unint64_t sub_1000E2878()
{
  unint64_t result = qword_10018AF00[0];
  if (!qword_10018AF00[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018AF00);
  }
  return result;
}

unint64_t sub_1000E28D0()
{
  unint64_t result = qword_10018B110[0];
  if (!qword_10018B110[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018B110);
  }
  return result;
}

unint64_t sub_1000E2928()
{
  unint64_t result = qword_10018B320[0];
  if (!qword_10018B320[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018B320);
  }
  return result;
}

unint64_t sub_1000E2980()
{
  unint64_t result = qword_10018B530[0];
  if (!qword_10018B530[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018B530);
  }
  return result;
}

unint64_t sub_1000E29D8()
{
  unint64_t result = qword_10018B740[0];
  if (!qword_10018B740[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018B740);
  }
  return result;
}

unint64_t sub_1000E2A30()
{
  unint64_t result = qword_10018B950[0];
  if (!qword_10018B950[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018B950);
  }
  return result;
}

unint64_t sub_1000E2A88()
{
  unint64_t result = qword_10018BB60[0];
  if (!qword_10018BB60[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018BB60);
  }
  return result;
}

unint64_t sub_1000E2AE0()
{
  unint64_t result = qword_10018BD70[0];
  if (!qword_10018BD70[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018BD70);
  }
  return result;
}

unint64_t sub_1000E2B38()
{
  unint64_t result = qword_10018BF80[0];
  if (!qword_10018BF80[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018BF80);
  }
  return result;
}

unint64_t sub_1000E2B90()
{
  unint64_t result = qword_10018C190[0];
  if (!qword_10018C190[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018C190);
  }
  return result;
}

unint64_t sub_1000E2BE8()
{
  unint64_t result = qword_10018C3A0[0];
  if (!qword_10018C3A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018C3A0);
  }
  return result;
}

unint64_t sub_1000E2C40()
{
  unint64_t result = qword_10018C5B0[0];
  if (!qword_10018C5B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018C5B0);
  }
  return result;
}

unint64_t sub_1000E2C98()
{
  unint64_t result = qword_10018C7C0[0];
  if (!qword_10018C7C0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018C7C0);
  }
  return result;
}

unint64_t sub_1000E2CF0()
{
  unint64_t result = qword_10018C9D0[0];
  if (!qword_10018C9D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018C9D0);
  }
  return result;
}

unint64_t sub_1000E2D48()
{
  unint64_t result = qword_10018CBE0[0];
  if (!qword_10018CBE0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018CBE0);
  }
  return result;
}

unint64_t sub_1000E2DA0()
{
  unint64_t result = qword_10018CDF0;
  if (!qword_10018CDF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10018CDF0);
  }
  return result;
}

unint64_t sub_1000E2DF8()
{
  unint64_t result = qword_10018D000[0];
  if (!qword_10018D000[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018D000);
  }
  return result;
}

unint64_t sub_1000E2E50()
{
  unint64_t result = qword_10018D210[0];
  if (!qword_10018D210[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018D210);
  }
  return result;
}

unint64_t sub_1000E2EA8()
{
  unint64_t result = qword_10018D420[0];
  if (!qword_10018D420[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018D420);
  }
  return result;
}

unint64_t sub_1000E2F00()
{
  unint64_t result = qword_10018D630[0];
  if (!qword_10018D630[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018D630);
  }
  return result;
}

unint64_t sub_1000E2F58()
{
  unint64_t result = qword_10018D840[0];
  if (!qword_10018D840[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018D840);
  }
  return result;
}

unint64_t sub_1000E2FB0()
{
  unint64_t result = qword_10018DA50[0];
  if (!qword_10018DA50[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018DA50);
  }
  return result;
}

unint64_t sub_1000E3008()
{
  unint64_t result = qword_10018DC60[0];
  if (!qword_10018DC60[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018DC60);
  }
  return result;
}

unint64_t sub_1000E3060()
{
  unint64_t result = qword_10018DE70[0];
  if (!qword_10018DE70[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018DE70);
  }
  return result;
}

unint64_t sub_1000E30B8()
{
  unint64_t result = qword_10018E080[0];
  if (!qword_10018E080[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018E080);
  }
  return result;
}

unint64_t sub_1000E3110()
{
  unint64_t result = qword_10018E290[0];
  if (!qword_10018E290[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018E290);
  }
  return result;
}

unint64_t sub_1000E3168()
{
  unint64_t result = qword_10018E4A0[0];
  if (!qword_10018E4A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018E4A0);
  }
  return result;
}

unint64_t sub_1000E31C0()
{
  unint64_t result = qword_10018E6B0[0];
  if (!qword_10018E6B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018E6B0);
  }
  return result;
}

unint64_t sub_1000E3218()
{
  unint64_t result = qword_10018E8C0[0];
  if (!qword_10018E8C0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018E8C0);
  }
  return result;
}

unint64_t sub_1000E3270()
{
  unint64_t result = qword_10018EAD0[0];
  if (!qword_10018EAD0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018EAD0);
  }
  return result;
}

unint64_t sub_1000E32C8()
{
  unint64_t result = qword_10018ECE0[0];
  if (!qword_10018ECE0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018ECE0);
  }
  return result;
}

unint64_t sub_1000E3320()
{
  unint64_t result = qword_10018EEF0[0];
  if (!qword_10018EEF0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018EEF0);
  }
  return result;
}

unint64_t sub_1000E3378()
{
  unint64_t result = qword_10018F100[0];
  if (!qword_10018F100[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018F100);
  }
  return result;
}

unint64_t sub_1000E33D0()
{
  unint64_t result = qword_10018F310[0];
  if (!qword_10018F310[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018F310);
  }
  return result;
}

unint64_t sub_1000E3428()
{
  unint64_t result = qword_10018F520[0];
  if (!qword_10018F520[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018F520);
  }
  return result;
}

unint64_t sub_1000E3480()
{
  unint64_t result = qword_10018F730[0];
  if (!qword_10018F730[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018F730);
  }
  return result;
}

unint64_t sub_1000E34D8()
{
  unint64_t result = qword_10018F940[0];
  if (!qword_10018F940[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018F940);
  }
  return result;
}

unint64_t sub_1000E3530()
{
  unint64_t result = qword_10018FB50[0];
  if (!qword_10018FB50[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018FB50);
  }
  return result;
}

unint64_t sub_1000E3588()
{
  unint64_t result = qword_10018FD60[0];
  if (!qword_10018FD60[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018FD60);
  }
  return result;
}

unint64_t sub_1000E35E0()
{
  unint64_t result = qword_10018FF70[0];
  if (!qword_10018FF70[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10018FF70);
  }
  return result;
}

unint64_t sub_1000E3638()
{
  unint64_t result = qword_100190180[0];
  if (!qword_100190180[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100190180);
  }
  return result;
}

unint64_t sub_1000E3690()
{
  unint64_t result = qword_100190390[0];
  if (!qword_100190390[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100190390);
  }
  return result;
}

unint64_t sub_1000E36E8()
{
  unint64_t result = qword_1001905A0[0];
  if (!qword_1001905A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001905A0);
  }
  return result;
}

unint64_t sub_1000E3740()
{
  unint64_t result = qword_1001907B0[0];
  if (!qword_1001907B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001907B0);
  }
  return result;
}

unint64_t sub_1000E3798()
{
  unint64_t result = qword_1001909C0[0];
  if (!qword_1001909C0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001909C0);
  }
  return result;
}

unint64_t sub_1000E37F0()
{
  unint64_t result = qword_100190BD0[0];
  if (!qword_100190BD0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100190BD0);
  }
  return result;
}

unint64_t sub_1000E3848()
{
  unint64_t result = qword_100190DE0[0];
  if (!qword_100190DE0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100190DE0);
  }
  return result;
}

unint64_t sub_1000E38A0()
{
  unint64_t result = qword_100190FF0[0];
  if (!qword_100190FF0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100190FF0);
  }
  return result;
}

unint64_t sub_1000E38F8()
{
  unint64_t result = qword_100191200[0];
  if (!qword_100191200[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100191200);
  }
  return result;
}

unint64_t sub_1000E3950()
{
  unint64_t result = qword_100191410[0];
  if (!qword_100191410[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100191410);
  }
  return result;
}

unint64_t sub_1000E39A8()
{
  unint64_t result = qword_100191620[0];
  if (!qword_100191620[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100191620);
  }
  return result;
}

unint64_t sub_1000E3A00()
{
  unint64_t result = qword_100191830[0];
  if (!qword_100191830[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100191830);
  }
  return result;
}

unint64_t sub_1000E3A58()
{
  unint64_t result = qword_100191B40[0];
  if (!qword_100191B40[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100191B40);
  }
  return result;
}

unint64_t sub_1000E3AB0()
{
  unint64_t result = qword_100191D50[0];
  if (!qword_100191D50[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100191D50);
  }
  return result;
}

unint64_t sub_1000E3B08()
{
  unint64_t result = qword_100191F60[0];
  if (!qword_100191F60[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100191F60);
  }
  return result;
}

unint64_t sub_1000E3B60()
{
  unint64_t result = qword_100192170[0];
  if (!qword_100192170[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100192170);
  }
  return result;
}

unint64_t sub_1000E3BB8()
{
  unint64_t result = qword_100192380[0];
  if (!qword_100192380[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100192380);
  }
  return result;
}

unint64_t sub_1000E3C10()
{
  unint64_t result = qword_100192590[0];
  if (!qword_100192590[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100192590);
  }
  return result;
}

unint64_t sub_1000E3C68()
{
  unint64_t result = qword_1001927A0[0];
  if (!qword_1001927A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001927A0);
  }
  return result;
}

unint64_t sub_1000E3CC0()
{
  unint64_t result = qword_1001929B0[0];
  if (!qword_1001929B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001929B0);
  }
  return result;
}

unint64_t sub_1000E3D18()
{
  unint64_t result = qword_100192BC0[0];
  if (!qword_100192BC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100192BC0);
  }
  return result;
}

unint64_t sub_1000E3D70()
{
  unint64_t result = qword_100192DD0[0];
  if (!qword_100192DD0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100192DD0);
  }
  return result;
}

unint64_t sub_1000E3DC8()
{
  unint64_t result = qword_100192EE0;
  if (!qword_100192EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100192EE0);
  }
  return result;
}

unint64_t sub_1000E3E20()
{
  unint64_t result = qword_100192EE8[0];
  if (!qword_100192EE8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100192EE8);
  }
  return result;
}

unint64_t sub_1000E3E78()
{
  unint64_t result = qword_100192F70;
  if (!qword_100192F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100192F70);
  }
  return result;
}

unint64_t sub_1000E3ED0()
{
  unint64_t result = qword_100192F78;
  if (!qword_100192F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100192F78);
  }
  return result;
}

unint64_t sub_1000E3F28()
{
  unint64_t result = qword_100193000;
  if (!qword_100193000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193000);
  }
  return result;
}

unint64_t sub_1000E3F80()
{
  unint64_t result = qword_100193008[0];
  if (!qword_100193008[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193008);
  }
  return result;
}

unint64_t sub_1000E3FD8()
{
  unint64_t result = qword_100193090;
  if (!qword_100193090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193090);
  }
  return result;
}

unint64_t sub_1000E4030()
{
  unint64_t result = qword_100193098[0];
  if (!qword_100193098[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193098);
  }
  return result;
}

unint64_t sub_1000E4088()
{
  unint64_t result = qword_100193120;
  if (!qword_100193120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193120);
  }
  return result;
}

unint64_t sub_1000E40E0()
{
  unint64_t result = qword_100193128[0];
  if (!qword_100193128[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193128);
  }
  return result;
}

unint64_t sub_1000E4138()
{
  unint64_t result = qword_1001931B0;
  if (!qword_1001931B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001931B0);
  }
  return result;
}

unint64_t sub_1000E4190()
{
  unint64_t result = qword_1001931B8[0];
  if (!qword_1001931B8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001931B8);
  }
  return result;
}

unint64_t sub_1000E41E8()
{
  unint64_t result = qword_100193240;
  if (!qword_100193240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193240);
  }
  return result;
}

unint64_t sub_1000E4240()
{
  unint64_t result = qword_100193248[0];
  if (!qword_100193248[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193248);
  }
  return result;
}

unint64_t sub_1000E4298()
{
  unint64_t result = qword_1001932D0;
  if (!qword_1001932D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001932D0);
  }
  return result;
}

unint64_t sub_1000E42F0()
{
  unint64_t result = qword_1001932D8[0];
  if (!qword_1001932D8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001932D8);
  }
  return result;
}

unint64_t sub_1000E4348()
{
  unint64_t result = qword_100193360;
  if (!qword_100193360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193360);
  }
  return result;
}

unint64_t sub_1000E43A0()
{
  unint64_t result = qword_100193368[0];
  if (!qword_100193368[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193368);
  }
  return result;
}

unint64_t sub_1000E43F8()
{
  unint64_t result = qword_1001933F0;
  if (!qword_1001933F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001933F0);
  }
  return result;
}

unint64_t sub_1000E4450()
{
  unint64_t result = qword_1001933F8[0];
  if (!qword_1001933F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001933F8);
  }
  return result;
}

unint64_t sub_1000E44A8()
{
  unint64_t result = qword_100193480;
  if (!qword_100193480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193480);
  }
  return result;
}

unint64_t sub_1000E4500()
{
  unint64_t result = qword_100193488[0];
  if (!qword_100193488[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193488);
  }
  return result;
}

unint64_t sub_1000E4558()
{
  unint64_t result = qword_100193510;
  if (!qword_100193510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193510);
  }
  return result;
}

unint64_t sub_1000E45B0()
{
  unint64_t result = qword_100193518[0];
  if (!qword_100193518[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193518);
  }
  return result;
}

unint64_t sub_1000E4608()
{
  unint64_t result = qword_1001935A0;
  if (!qword_1001935A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001935A0);
  }
  return result;
}

unint64_t sub_1000E4660()
{
  unint64_t result = qword_1001935A8[0];
  if (!qword_1001935A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001935A8);
  }
  return result;
}

unint64_t sub_1000E46B8()
{
  unint64_t result = qword_100193630;
  if (!qword_100193630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193630);
  }
  return result;
}

unint64_t sub_1000E4710()
{
  unint64_t result = qword_100193638[0];
  if (!qword_100193638[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193638);
  }
  return result;
}

unint64_t sub_1000E4768()
{
  unint64_t result = qword_1001936C0;
  if (!qword_1001936C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001936C0);
  }
  return result;
}

unint64_t sub_1000E47C0()
{
  unint64_t result = qword_1001936C8[0];
  if (!qword_1001936C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001936C8);
  }
  return result;
}

unint64_t sub_1000E4818()
{
  unint64_t result = qword_100193750;
  if (!qword_100193750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193750);
  }
  return result;
}

unint64_t sub_1000E4870()
{
  unint64_t result = qword_100193758[0];
  if (!qword_100193758[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193758);
  }
  return result;
}

unint64_t sub_1000E48C8()
{
  unint64_t result = qword_1001937E0;
  if (!qword_1001937E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001937E0);
  }
  return result;
}

unint64_t sub_1000E4920()
{
  unint64_t result = qword_1001937E8[0];
  if (!qword_1001937E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001937E8);
  }
  return result;
}

unint64_t sub_1000E4978()
{
  unint64_t result = qword_100193870;
  if (!qword_100193870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193870);
  }
  return result;
}

unint64_t sub_1000E49D0()
{
  unint64_t result = qword_100193878;
  if (!qword_100193878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193878);
  }
  return result;
}

unint64_t sub_1000E4A28()
{
  unint64_t result = qword_100193900;
  if (!qword_100193900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193900);
  }
  return result;
}

unint64_t sub_1000E4A80()
{
  unint64_t result = qword_100193908[0];
  if (!qword_100193908[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193908);
  }
  return result;
}

unint64_t sub_1000E4AD8()
{
  unint64_t result = qword_100193990;
  if (!qword_100193990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193990);
  }
  return result;
}

unint64_t sub_1000E4B30()
{
  unint64_t result = qword_100193998[0];
  if (!qword_100193998[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193998);
  }
  return result;
}

unint64_t sub_1000E4B88()
{
  unint64_t result = qword_100193A20;
  if (!qword_100193A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193A20);
  }
  return result;
}

unint64_t sub_1000E4BE0()
{
  unint64_t result = qword_100193A28[0];
  if (!qword_100193A28[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193A28);
  }
  return result;
}

unint64_t sub_1000E4C38()
{
  unint64_t result = qword_100193AB0;
  if (!qword_100193AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193AB0);
  }
  return result;
}

unint64_t sub_1000E4C90()
{
  unint64_t result = qword_100193AB8[0];
  if (!qword_100193AB8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193AB8);
  }
  return result;
}

unint64_t sub_1000E4CE8()
{
  unint64_t result = qword_100193B40;
  if (!qword_100193B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193B40);
  }
  return result;
}

unint64_t sub_1000E4D40()
{
  unint64_t result = qword_100193B48[0];
  if (!qword_100193B48[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193B48);
  }
  return result;
}

unint64_t sub_1000E4D98()
{
  unint64_t result = qword_100193BD0;
  if (!qword_100193BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193BD0);
  }
  return result;
}

unint64_t sub_1000E4DF0()
{
  unint64_t result = qword_100193BD8[0];
  if (!qword_100193BD8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193BD8);
  }
  return result;
}

unint64_t sub_1000E4E48()
{
  unint64_t result = qword_100193C60;
  if (!qword_100193C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193C60);
  }
  return result;
}

unint64_t sub_1000E4EA0()
{
  unint64_t result = qword_100193C68[0];
  if (!qword_100193C68[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193C68);
  }
  return result;
}

unint64_t sub_1000E4EF8()
{
  unint64_t result = qword_100193CF0;
  if (!qword_100193CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193CF0);
  }
  return result;
}

unint64_t sub_1000E4F50()
{
  unint64_t result = qword_100193CF8[0];
  if (!qword_100193CF8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193CF8);
  }
  return result;
}

unint64_t sub_1000E4FA8()
{
  unint64_t result = qword_100193D80;
  if (!qword_100193D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193D80);
  }
  return result;
}

unint64_t sub_1000E5000()
{
  unint64_t result = qword_100193D88[0];
  if (!qword_100193D88[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193D88);
  }
  return result;
}

unint64_t sub_1000E5058()
{
  unint64_t result = qword_100193E10;
  if (!qword_100193E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193E10);
  }
  return result;
}

unint64_t sub_1000E50B0()
{
  unint64_t result = qword_100193E18[0];
  if (!qword_100193E18[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193E18);
  }
  return result;
}

unint64_t sub_1000E5108()
{
  unint64_t result = qword_100193EA0;
  if (!qword_100193EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193EA0);
  }
  return result;
}

unint64_t sub_1000E5160()
{
  unint64_t result = qword_100193EA8[0];
  if (!qword_100193EA8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193EA8);
  }
  return result;
}

unint64_t sub_1000E51B8()
{
  unint64_t result = qword_100193F30;
  if (!qword_100193F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193F30);
  }
  return result;
}

unint64_t sub_1000E5210()
{
  unint64_t result = qword_100193F38[0];
  if (!qword_100193F38[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193F38);
  }
  return result;
}

unint64_t sub_1000E5268()
{
  unint64_t result = qword_100193FC0;
  if (!qword_100193FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100193FC0);
  }
  return result;
}

unint64_t sub_1000E52C0()
{
  unint64_t result = qword_100193FC8[0];
  if (!qword_100193FC8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100193FC8);
  }
  return result;
}

unint64_t sub_1000E5318()
{
  unint64_t result = qword_100194050;
  if (!qword_100194050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194050);
  }
  return result;
}

unint64_t sub_1000E5370()
{
  unint64_t result = qword_100194058[0];
  if (!qword_100194058[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194058);
  }
  return result;
}

unint64_t sub_1000E53C8()
{
  unint64_t result = qword_1001940E0;
  if (!qword_1001940E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001940E0);
  }
  return result;
}

unint64_t sub_1000E5420()
{
  unint64_t result = qword_1001940E8[0];
  if (!qword_1001940E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001940E8);
  }
  return result;
}

unint64_t sub_1000E5478()
{
  unint64_t result = qword_100194170;
  if (!qword_100194170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194170);
  }
  return result;
}

unint64_t sub_1000E54D0()
{
  unint64_t result = qword_100194178;
  if (!qword_100194178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194178);
  }
  return result;
}

unint64_t sub_1000E5528()
{
  unint64_t result = qword_100194200;
  if (!qword_100194200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194200);
  }
  return result;
}

unint64_t sub_1000E5580()
{
  unint64_t result = qword_100194208[0];
  if (!qword_100194208[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194208);
  }
  return result;
}

unint64_t sub_1000E55D8()
{
  unint64_t result = qword_100194290;
  if (!qword_100194290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194290);
  }
  return result;
}

unint64_t sub_1000E5630()
{
  unint64_t result = qword_100194298[0];
  if (!qword_100194298[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194298);
  }
  return result;
}

unint64_t sub_1000E5688()
{
  unint64_t result = qword_100194320;
  if (!qword_100194320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194320);
  }
  return result;
}

unint64_t sub_1000E56E0()
{
  unint64_t result = qword_100194328[0];
  if (!qword_100194328[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194328);
  }
  return result;
}

unint64_t sub_1000E5738()
{
  unint64_t result = qword_1001943B0;
  if (!qword_1001943B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001943B0);
  }
  return result;
}

unint64_t sub_1000E5790()
{
  unint64_t result = qword_1001943B8[0];
  if (!qword_1001943B8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001943B8);
  }
  return result;
}

unint64_t sub_1000E57E8()
{
  unint64_t result = qword_100194440;
  if (!qword_100194440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194440);
  }
  return result;
}

unint64_t sub_1000E5840()
{
  unint64_t result = qword_100194448[0];
  if (!qword_100194448[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194448);
  }
  return result;
}

unint64_t sub_1000E5898()
{
  unint64_t result = qword_1001944D0;
  if (!qword_1001944D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001944D0);
  }
  return result;
}

unint64_t sub_1000E58F0()
{
  unint64_t result = qword_1001944D8[0];
  if (!qword_1001944D8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001944D8);
  }
  return result;
}

unint64_t sub_1000E5948()
{
  unint64_t result = qword_100194560;
  if (!qword_100194560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194560);
  }
  return result;
}

unint64_t sub_1000E59A0()
{
  unint64_t result = qword_100194568[0];
  if (!qword_100194568[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194568);
  }
  return result;
}

unint64_t sub_1000E59F8()
{
  unint64_t result = qword_1001945F0;
  if (!qword_1001945F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001945F0);
  }
  return result;
}

unint64_t sub_1000E5A50()
{
  unint64_t result = qword_1001945F8[0];
  if (!qword_1001945F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001945F8);
  }
  return result;
}

unint64_t sub_1000E5AA8()
{
  unint64_t result = qword_100194680;
  if (!qword_100194680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194680);
  }
  return result;
}

unint64_t sub_1000E5B00()
{
  unint64_t result = qword_100194688[0];
  if (!qword_100194688[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194688);
  }
  return result;
}

unint64_t sub_1000E5B58()
{
  unint64_t result = qword_100194710;
  if (!qword_100194710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194710);
  }
  return result;
}

unint64_t sub_1000E5BB0()
{
  unint64_t result = qword_100194718[0];
  if (!qword_100194718[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194718);
  }
  return result;
}

unint64_t sub_1000E5C08()
{
  unint64_t result = qword_1001947A0;
  if (!qword_1001947A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001947A0);
  }
  return result;
}

unint64_t sub_1000E5C60()
{
  unint64_t result = qword_1001947A8[0];
  if (!qword_1001947A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001947A8);
  }
  return result;
}

unint64_t sub_1000E5CB8()
{
  unint64_t result = qword_100194830;
  if (!qword_100194830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194830);
  }
  return result;
}

unint64_t sub_1000E5D10()
{
  unint64_t result = qword_100194838[0];
  if (!qword_100194838[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194838);
  }
  return result;
}

unint64_t sub_1000E5D68()
{
  unint64_t result = qword_1001948C0;
  if (!qword_1001948C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001948C0);
  }
  return result;
}

unint64_t sub_1000E5DC0()
{
  unint64_t result = qword_1001948C8[0];
  if (!qword_1001948C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001948C8);
  }
  return result;
}

unint64_t sub_1000E5E18()
{
  unint64_t result = qword_100194950;
  if (!qword_100194950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194950);
  }
  return result;
}

unint64_t sub_1000E5E70()
{
  unint64_t result = qword_100194958[0];
  if (!qword_100194958[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194958);
  }
  return result;
}

unint64_t sub_1000E5EC8()
{
  unint64_t result = qword_1001949E0;
  if (!qword_1001949E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001949E0);
  }
  return result;
}

unint64_t sub_1000E5F20()
{
  unint64_t result = qword_1001949E8[0];
  if (!qword_1001949E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001949E8);
  }
  return result;
}

unint64_t sub_1000E5F78()
{
  unint64_t result = qword_100194A70;
  if (!qword_100194A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194A70);
  }
  return result;
}

unint64_t sub_1000E5FD0()
{
  unint64_t result = qword_100194A78;
  if (!qword_100194A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194A78);
  }
  return result;
}

unint64_t sub_1000E6028()
{
  unint64_t result = qword_100194B00;
  if (!qword_100194B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194B00);
  }
  return result;
}

unint64_t sub_1000E6080()
{
  unint64_t result = qword_100194B08[0];
  if (!qword_100194B08[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194B08);
  }
  return result;
}

unint64_t sub_1000E60D8()
{
  unint64_t result = qword_100194B90;
  if (!qword_100194B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194B90);
  }
  return result;
}

unint64_t sub_1000E6130()
{
  unint64_t result = qword_100194B98[0];
  if (!qword_100194B98[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194B98);
  }
  return result;
}

unint64_t sub_1000E6188()
{
  unint64_t result = qword_100194C20;
  if (!qword_100194C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194C20);
  }
  return result;
}

unint64_t sub_1000E61E0()
{
  unint64_t result = qword_100194C28[0];
  if (!qword_100194C28[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194C28);
  }
  return result;
}

unint64_t sub_1000E6238()
{
  unint64_t result = qword_100194CB0;
  if (!qword_100194CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194CB0);
  }
  return result;
}

unint64_t sub_1000E6290()
{
  unint64_t result = qword_100194CB8[0];
  if (!qword_100194CB8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194CB8);
  }
  return result;
}

unint64_t sub_1000E62E8()
{
  unint64_t result = qword_100194D40;
  if (!qword_100194D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194D40);
  }
  return result;
}

unint64_t sub_1000E6340()
{
  unint64_t result = qword_100194D48[0];
  if (!qword_100194D48[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194D48);
  }
  return result;
}

unint64_t sub_1000E6398()
{
  unint64_t result = qword_100194DD0;
  if (!qword_100194DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194DD0);
  }
  return result;
}

unint64_t sub_1000E63F0()
{
  unint64_t result = qword_100194DD8[0];
  if (!qword_100194DD8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194DD8);
  }
  return result;
}

unint64_t sub_1000E6448()
{
  unint64_t result = qword_100194E60;
  if (!qword_100194E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194E60);
  }
  return result;
}

unint64_t sub_1000E64A0()
{
  unint64_t result = qword_100194E68[0];
  if (!qword_100194E68[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194E68);
  }
  return result;
}

unint64_t sub_1000E64F8()
{
  unint64_t result = qword_100194EF0;
  if (!qword_100194EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194EF0);
  }
  return result;
}

unint64_t sub_1000E6550()
{
  unint64_t result = qword_100194EF8[0];
  if (!qword_100194EF8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194EF8);
  }
  return result;
}

unint64_t sub_1000E65A8()
{
  unint64_t result = qword_100194F80;
  if (!qword_100194F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100194F80);
  }
  return result;
}

unint64_t sub_1000E6600()
{
  unint64_t result = qword_100194F88[0];
  if (!qword_100194F88[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100194F88);
  }
  return result;
}

unint64_t sub_1000E6658()
{
  unint64_t result = qword_100195010;
  if (!qword_100195010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100195010);
  }
  return result;
}

unint64_t sub_1000E66B0()
{
  unint64_t result = qword_100195018[0];
  if (!qword_100195018[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100195018);
  }
  return result;
}

unint64_t sub_1000E6708()
{
  unint64_t result = qword_1001950A0;
  if (!qword_1001950A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001950A0);
  }
  return result;
}

unint64_t sub_1000E6760()
{
  unint64_t result = qword_1001950A8[0];
  if (!qword_1001950A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001950A8);
  }
  return result;
}

unint64_t sub_1000E67B8()
{
  unint64_t result = qword_100195130;
  if (!qword_100195130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100195130);
  }
  return result;
}

unint64_t sub_1000E6810()
{
  unint64_t result = qword_100195138[0];
  if (!qword_100195138[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100195138);
  }
  return result;
}

unint64_t sub_1000E6868()
{
  unint64_t result = qword_1001951C0;
  if (!qword_1001951C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001951C0);
  }
  return result;
}

unint64_t sub_1000E68C0()
{
  unint64_t result = qword_1001951C8[0];
  if (!qword_1001951C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001951C8);
  }
  return result;
}

unint64_t sub_1000E6918()
{
  unint64_t result = qword_100195250;
  if (!qword_100195250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100195250);
  }
  return result;
}

unint64_t sub_1000E6970()
{
  unint64_t result = qword_100195258[0];
  if (!qword_100195258[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100195258);
  }
  return result;
}

unint64_t sub_1000E69C8()
{
  unint64_t result = qword_1001952E0;
  if (!qword_1001952E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001952E0);
  }
  return result;
}

unint64_t sub_1000E6A20()
{
  unint64_t result = qword_1001952E8[0];
  if (!qword_1001952E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001952E8);
  }
  return result;
}

unint64_t sub_1000E6A78()
{
  unint64_t result = qword_100195370;
  if (!qword_100195370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100195370);
  }
  return result;
}

unint64_t sub_1000E6AD0()
{
  unint64_t result = qword_100195378;
  if (!qword_100195378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100195378);
  }
  return result;
}

unint64_t sub_1000E6B28()
{
  unint64_t result = qword_100195400;
  if (!qword_100195400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100195400);
  }
  return result;
}

unint64_t sub_1000E6B80()
{
  unint64_t result = qword_100195408[0];
  if (!qword_100195408[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100195408);
  }
  return result;
}

unint64_t sub_1000E6BD8()
{
  unint64_t result = qword_100195490;
  if (!qword_100195490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100195490);
  }
  return result;
}

unint64_t sub_1000E6C30()
{
  unint64_t result = qword_100195498[0];
  if (!qword_100195498[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100195498);
  }
  return result;
}

unint64_t sub_1000E6C88()
{
  unint64_t result = qword_100195520;
  if (!qword_100195520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100195520);
  }
  return result;
}

unint64_t sub_1000E6CE0()
{
  unint64_t result = qword_100195528[0];
  if (!qword_100195528[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100195528);
  }
  return result;
}

unint64_t sub_1000E6D38()
{
  unint64_t result = qword_1001955B0;
  if (!qword_1001955B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001955B0);
  }
  return result;
}

unint64_t sub_1000E6D90()
{
  unint64_t result = qword_1001955B8[0];
  if (!qword_1001955B8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001955B8);
  }
  return result;
}

unint64_t sub_1000E6DE8()
{
  unint64_t result = qword_100195640;
  if (!qword_100195640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100195640);
  }
  return result;
}

unint64_t sub_1000E6E40()
{
  unint64_t result = qword_100195648[0];
  if (!qword_100195648[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100195648);
  }
  return result;
}

unint64_t sub_1000E6E98()
{
  unint64_t result = qword_1001956D0;
  if (!qword_1001956D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001956D0);
  }
  return result;
}

unint64_t sub_1000E6EF0()
{
  unint64_t result = qword_1001956D8[0];
  if (!qword_1001956D8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001956D8);
  }
  return result;
}

unint64_t sub_1000E6F48()
{
  unint64_t result = qword_100195760;
  if (!qword_100195760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100195760);
  }
  return result;
}

unint64_t sub_1000E6FA0()
{
  unint64_t result = qword_100195768[0];
  if (!qword_100195768[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100195768);
  }
  return result;
}

unint64_t sub_1000E6FF8()
{
  unint64_t result = qword_1001957F0;
  if (!qword_1001957F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001957F0);
  }
  return result;
}

unint64_t sub_1000E7050()
{
  unint64_t result = qword_1001957F8[0];
  if (!qword_1001957F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001957F8);
  }
  return result;
}

unint64_t sub_1000E70A8()
{
  unint64_t result = qword_100195880;
  if (!qword_100195880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100195880);
  }
  return result;
}

unint64_t sub_1000E7100()
{
  unint64_t result = qword_100195888[0];
  if (!qword_100195888[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100195888);
  }
  return result;
}

uint64_t sub_1000E7154(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000126B8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000E71B4()
{
  unint64_t result = qword_10017F910;
  if (!qword_10017F910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F910);
  }
  return result;
}

uint64_t sub_1000E7208(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000126B8(&qword_10017F688);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000E7278()
{
  unint64_t result = qword_10017F920;
  if (!qword_10017F920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F920);
  }
  return result;
}

void *sub_1000E72D4(void *a1, void *a2, unint64_t a3, void *a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (*v20)(void **__return_ptr);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void **__return_ptr, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  Swift::String v71;
  Swift::String v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  char v100;
  void (*v101)(void **__return_ptr, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  void (*v113)(void **__return_ptr, uint64_t, uint64_t);
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  long long v118;
  void *v119;
  int v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  void *v127;
  _OWORD v128[2];
  long long v129;
  long long v130;
  uint64_t v131;
  void *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;

  uint64_t v123 = a7;
  uint64_t v124 = a8;
  uint64_t v122 = a6;
  uint64_t v120 = a5;
  Swift::String v119 = a4;
  uint64_t v121 = a3;
  uint64_t v127 = a2;
  uint64_t v126 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v126 - 8);
  uint64_t v11 = __chkstk_darwin(v126);
  uint64_t v13 = (char *)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v125 = (char *)&v108 - v14;
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v15 = swift_allocObject();
  uint64_t v118 = xmmword_100132F10;
  *(_OWORD *)(v15 + 16) = xmmword_100132F10;
  uint64_t v132 = a1;
  type metadata accessor for DriverExtension(0);
  sub_1000E81F0();
  uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10002A1DC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  sub_10002A230();
  uint64_t v19 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  uint64_t v20 = *(void (**)(void **__return_ptr))(*a1 + 112);
  v20(&v132);
  char v21 = v134;
  if (!v134)
  {
    sub_1000130EC((uint64_t)&v132, &qword_10017BC78);
LABEL_13:
    uint64_t v132 = 0;
    uint64_t v133 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    uint64_t v65 = swift_bridgeObjectRelease();
    *(void *)&Swift::String v129 = 0xD000000000000010;
    *((void *)&v129 + 1) = 0x800000010014E0D0;
    ((void (*)(void **__return_ptr, uint64_t))v20)(&v132, v65);
    uint64_t v66 = v134;
    if (v134)
    {
      uint64_t v67 = v135;
      sub_1000036B0(&v132, v134);
      uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 24))(v66, v67);
      uint64_t v70 = v69;
      sub_10000478C((uint64_t)&v132);
      if (v70)
      {
LABEL_18:
        v71._uint64_t countAndFlagsBits = v68;
        v71._object = v70;
        String.append(_:)(v71);
        swift_bridgeObjectRelease();
        v72._uint64_t countAndFlagsBits = 0xD000000000000018;
        v72._object = (void *)0x800000010014E0F0;
        String.append(_:)(v72);
        uint64_t v74 = *((void *)&v129 + 1);
        uint64_t v73 = (void *)v129;
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v75 = v73;
        *(void *)(v75 + 8) = v74;
        *(_OWORD *)(v75 + 16) = 0u;
        *(_OWORD *)(v75 + 32) = 0u;
        *(_OWORD *)(v75 + 48) = 0u;
        *(void *)(v75 + 64) = 0;
        *(unsigned char *)(v75 + 72) = 4;
        swift_willThrow();
        return v73;
      }
    }
    else
    {
      sub_1000130EC((uint64_t)&v132, &qword_10017BC78);
    }
    swift_bridgeObjectRelease();
    uint64_t v70 = (void *)0xE600000000000000;
    uint64_t v68 = 0x296C6C756E28;
    goto LABEL_18;
  }
  uint64_t v22 = v135;
  sub_1000036B0(&v132, v134);
  (*(void (**)(uint64_t, uint64_t))(v22 + 56))(v21, v22);
  uint64_t v24 = v23;
  sub_10000478C((uint64_t)&v132);
  if (!v24) {
    goto LABEL_13;
  }
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  URL.absoluteURL.getter();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v112 = v10 + 8;
  uint64_t v111 = v25;
  v25(v13, v126);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = v118;
  *(void *)(v26 + 56) = &type metadata for UInt64;
  *(void *)(v26 + 64) = &protocol witness table for UInt64;
  *(void *)(v26 + 32) = v119;
  uint64_t v27 = String.init(format:_:)();
  uint64_t v114 = v27;
  uint64_t v29 = v28;
  sub_100004700((uint64_t *)&unk_10017DE60);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_100136120;
  *(void *)(v30 + 32) = URL.path.getter();
  *(void *)(v30 + 40) = v31;
  uint64_t v32 = v121;
  *(void *)(v30 + 48) = v127;
  *(void *)(v30 + 56) = v32;
  *(void *)(v30 + 64) = v27;
  *(void *)(v30 + 72) = v29;
  uint64_t v33 = (void *)(*a1 + 144);
  *(void *)&uint64_t v118 = *v33;
  uint64_t v34 = (uint64_t (*)(uint64_t))v118;
  Swift::String v119 = v33;
  swift_bridgeObjectRetain();
  uint64_t v35 = swift_bridgeObjectRetain();
  *(void *)(v30 + 80) = v34(v35);
  *(void *)(v30 + 88) = v36;
  uint64_t v37 = *(void (**)(void **__return_ptr, uint64_t, uint64_t))(a9 + 8);
  uint64_t v38 = v124;
  uint64_t v110 = a9 + 8;
  uint64_t v113 = v37;
  v37(&v132, v124, a9);
  uint64_t v39 = v134;
  uint64_t v40 = v135;
  sub_1000036B0(&v132, v134);
  sub_10007F4B4(v39, v40);
  uint64_t v41 = *((void *)&v130 + 1);
  uint64_t v42 = v131;
  sub_1000036B0(&v129, *((uint64_t *)&v130 + 1));
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 120))(v41, v42);
  sub_10000478C((uint64_t)&v129);
  sub_10000478C((uint64_t)&v132);
  uint64_t v44 = 0xD000000000000013;
  if ((v43 & 1) == 0) {
    uint64_t v44 = 0x6C7070612E6D6F63;
  }
  uint64_t v116 = v44;
  uint64_t v45 = 0x800000010014E210;
  if ((v43 & 1) == 0) {
    uint64_t v45 = 0xEE00747865642E65;
  }
  uint64_t v115 = v45;
  sub_100004700(&qword_10017C230);
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_10013DB30;
  *(void *)(v46 + 32) = 0x646567616E614D5FLL;
  *(void *)(v46 + 40) = 0xEA00000000007942;
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 32);
  uint64_t v109 = a9;
  *(void *)(v46 + 48) = v47(v38, a9);
  *(void *)(v46 + 56) = v48;
  *(void *)(v46 + 72) = &type metadata for String;
  *(void *)(v46 + 80) = 0x6C6562614CLL;
  *(void *)(v46 + 88) = 0xE500000000000000;
  uint64_t v132 = v127;
  uint64_t v133 = v32;
  swift_bridgeObjectRetain();
  v49._uint64_t countAndFlagsBits = 45;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  v50._uint64_t countAndFlagsBits = v114;
  v50._object = v29;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  uint64_t v51 = v133;
  *(void *)(v46 + 96) = v132;
  *(void *)(v46 + 104) = v51;
  *(void *)(v46 + 120) = &type metadata for String;
  *(void *)(v46 + 128) = 0xD000000000000010;
  *(void *)(v46 + 136) = 0x800000010014E110;
  uint64_t v52 = sub_100004700((uint64_t *)&unk_10017E5D0);
  *(void *)(v46 + 144) = v30;
  *(void *)(v46 + 168) = v52;
  *(void *)(v46 + 176) = 0x54737365636F7250;
  *(void *)(v46 + 184) = 0xEB00000000657079;
  *(void *)(v46 + 192) = 0x726576697244;
  *(void *)(v46 + 200) = 0xE600000000000000;
  *(void *)(v46 + 216) = &type metadata for String;
  *(void *)(v46 + 224) = 0x616F4C74416E7552;
  *(void *)(v46 + 232) = 0xE900000000000064;
  *(unsigned char *)(v46 + 240) = 1;
  *(void *)(v46 + 264) = &type metadata for Bool;
  strcpy((char *)(v46 + 272), "LaunchOnlyOnce");
  *(unsigned char *)(v46 + 287) = -18;
  *(unsigned char *)(v46 + 288) = 1;
  *(void *)(v46 + 312) = &type metadata for Bool;
  *(void *)(v46 + 320) = 0x656D614E72657355;
  *(void *)(v46 + 328) = 0xE800000000000000;
  *(void *)(v46 + 336) = 0x6B7265766972645FLL;
  *(void *)(v46 + 344) = 0xEA00000000007469;
  *(void *)(v46 + 360) = &type metadata for String;
  *(void *)(v46 + 368) = 0xD000000000000012;
  *(void *)(v46 + 376) = 0x800000010014E130;
  *(unsigned char *)(v46 + 384) = v120 & 1;
  *(void *)(v46 + 408) = &type metadata for Bool;
  *(void *)(v46 + 416) = 0xD000000000000016;
  *(void *)(v46 + 424) = 0x800000010014E150;
  *(void *)(v46 + 432) = 0x6D6574737953;
  *(void *)(v46 + 440) = 0xE600000000000000;
  *(void *)(v46 + 456) = &type metadata for String;
  *(void *)(v46 + 464) = 0xD000000000000012;
  *(void *)(v46 + 472) = 0x800000010014AA60;
  *(void *)(v46 + 480) = ((uint64_t (*)(void))v118)();
  *(void *)(v46 + 488) = v53;
  *(void *)(v46 + 504) = &type metadata for String;
  strcpy((char *)(v46 + 512), "SandboxProfile");
  *(unsigned char *)(v46 + 527) = -18;
  *(void *)(v46 + 552) = &type metadata for String;
  *(void *)(v46 + 528) = v116;
  *(void *)(v46 + 536) = v115;
  *(void *)(v46 + 560) = 0xD000000000000012;
  *(void *)(v46 + 568) = 0x800000010014E170;
  *(void *)(v46 + 600) = &type metadata for Bool;
  *(unsigned char *)(v46 + 576) = 1;
  *(void *)(v46 + 608) = 0xD00000000000001BLL;
  *(void *)(v46 + 616) = 0x800000010014E190;
  *(void *)(v46 + 648) = &type metadata for String;
  *(void *)(v46 + 624) = v127;
  *(void *)(v46 + 632) = v32;
  *(void *)(v46 + 656) = 0xD000000000000010;
  *(void *)(v46 + 664) = 0x8000000100147460;
  *(void *)(v46 + 696) = &type metadata for UInt32;
  *(_DWORD *)(v46 + 672) = v122;
  swift_bridgeObjectRetain();
  uint64_t v54 = sub_100016BFC(v46);
  sub_10001BA68(v123, (uint64_t)&v129, &qword_10017C010);
  if (*((void *)&v130 + 1))
  {
    sub_10000372C(&v129, (uint64_t)&v132);
    uint64_t v55 = v134;
    uint64_t v56 = v135;
    sub_1000036B0(&v132, v134);
    uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 16))(v55, v56);
    uint64_t v58 = sub_1000E835C(v57);
    swift_bridgeObjectRelease();
    if ((v58 & 1) == 0)
    {
      uint64_t v76 = v117;
      uint64_t v77 = v111;
      uint64_t v78 = v109;
      goto LABEL_37;
    }
    uint64_t v59 = a1[2];
    uint64_t v60 = (uint64_t *)sub_1000A14E0();
    if (*(void *)(v59 + 16))
    {
      uint64_t v61 = *v60;
      uint64_t v62 = v60[1];
      swift_bridgeObjectRetain();
      uint64_t v63 = sub_1000048E0(v61, v62);
      if (v64)
      {
        sub_1000047DC(*(void *)(v59 + 56) + 32 * v63, (uint64_t)&v129);
      }
      else
      {
        Swift::String v129 = 0u;
        uint64_t v130 = 0u;
      }
      uint64_t v76 = v117;
      uint64_t v77 = v111;
      uint64_t v78 = v109;
      swift_bridgeObjectRelease();
      if (*((void *)&v130 + 1))
      {
        uint64_t v79 = sub_100004700(&qword_10017C8B8);
        if (swift_dynamicCast())
        {
          *((void *)&v130 + 1) = v79;
          *(void *)&Swift::String v129 = *(void *)&v128[0];
          sub_10001889C(&v129, v128);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v136 = v54;
          sub_100018144(v128, 0xD000000000000014, 0x800000010014A800, isUniquelyReferenced_nonNull_native);
          uint64_t v54 = v136;
          swift_bridgeObjectRelease();
        }
        goto LABEL_27;
      }
    }
    else
    {
      Swift::String v129 = 0u;
      uint64_t v130 = 0u;
      uint64_t v76 = v117;
      uint64_t v77 = v111;
      uint64_t v78 = v109;
    }
    sub_1000130EC((uint64_t)&v129, &qword_10017C018);
LABEL_27:
    uint64_t v81 = (uint64_t *)sub_1000A14EC();
    if (*(void *)(v59 + 16))
    {
      uint64_t v82 = *v81;
      uint64_t v83 = v81[1];
      swift_bridgeObjectRetain();
      uint64_t v84 = sub_1000048E0(v82, v83);
      if (v85)
      {
        sub_1000047DC(*(void *)(v59 + 56) + 32 * v84, (uint64_t)&v129);
      }
      else
      {
        Swift::String v129 = 0u;
        uint64_t v130 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v130 + 1))
      {
        if swift_dynamicCast() && (v128[0])
        {
          uint64_t v86 = sub_1000E8248((uint64_t)&off_100171E88);
          Swift::String v87 = sub_100004700(&qword_10017F930);
          *((void *)&v130 + 1) = v87;
          *(void *)&Swift::String v129 = v86;
          sub_10001889C(&v129, v128);
          Swift::String v88 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v136 = v54;
          sub_100018144(v128, 0xD000000000000012, 0x800000010014E1D0, v88);
          int64_t v89 = v136;
          swift_bridgeObjectRelease();
          uint64_t v90 = sub_1000E8248((uint64_t)&off_100171EC0);
          *((void *)&v130 + 1) = v87;
          *(void *)&Swift::String v129 = v90;
          sub_10001889C(&v129, v128);
          uint64_t v91 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v136 = v89;
          sub_100018144(v128, 0xD000000000000012, 0x800000010014E1F0, v91);
          uint64_t v54 = v136;
          swift_bridgeObjectRelease();
        }
        goto LABEL_37;
      }
    }
    else
    {
      Swift::String v129 = 0u;
      uint64_t v130 = 0u;
    }
    sub_1000130EC((uint64_t)&v129, &qword_10017C018);
LABEL_37:
    uint64_t v92 = v134;
    uint64_t v93 = v135;
    sub_1000036B0(&v132, v134);
    uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 16))(v92, v93);
    uint64_t v95 = (uint64_t *)sub_1000A21A4();
    if (*(void *)(v94 + 16))
    {
      uint64_t v97 = *v95;
      uint64_t v96 = v95[1];
      swift_bridgeObjectRetain();
      uint64_t v98 = sub_1000048E0(v97, v96);
      if (v99)
      {
        sub_1000047DC(*(void *)(v94 + 56) + 32 * v98, (uint64_t)&v129);
      }
      else
      {
        Swift::String v129 = 0u;
        uint64_t v130 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      Swift::String v129 = 0u;
      uint64_t v130 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v130 + 1))
    {
      if swift_dynamicCast() && (v128[0])
      {
        *((void *)&v130 + 1) = &type metadata for Bool;
        LOBYTE(v129) = 1;
        sub_10001889C(&v129, v128);
        uint64_t v100 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v136 = v54;
        sub_100018144(v128, 0xD000000000000017, 0x800000010014E1B0, v100);
        uint64_t v54 = v136;
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_1000130EC((uint64_t)&v129, &qword_10017C018);
    }
    unint64_t v101 = v113;
    sub_10000478C((uint64_t)&v132);
    v101(&v132, v124, v78);
    goto LABEL_49;
  }
  sub_1000130EC((uint64_t)&v129, &qword_10017C010);
  uint64_t v76 = v117;
  uint64_t v77 = v111;
  v113(&v132, v124, v109);
LABEL_49:
  uint64_t v102 = v134;
  uint64_t v103 = v135;
  sub_1000036B0(&v132, v134);
  sub_1000770EC(v102, v103);
  uint64_t v104 = *((void *)&v130 + 1);
  uint64_t v105 = v131;
  uint64_t v73 = sub_1000036B0(&v129, *((uint64_t *)&v130 + 1));
  uint64_t v106 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v105 + 8))(v54, v104, v105);
  if (!v76) {
    uint64_t v73 = (void *)v106;
  }
  v77(v125, v126);
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)&v129);
  sub_10000478C((uint64_t)&v132);
  return v73;
}

unint64_t sub_1000E81F0()
{
  unint64_t result = qword_10017F928;
  if (!qword_10017F928)
  {
    type metadata accessor for DriverExtension(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F928);
  }
  return result;
}

unint64_t sub_1000E8248(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017F938);
  int v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned int v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000048E0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E835C(uint64_t a1)
{
  int v2 = (uint64_t *)sub_1000A2168();
  if (!*(void *)(a1 + 16))
  {
    long long v24 = 0u;
    long long v25 = 0u;
    goto LABEL_9;
  }
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1000048E0(v4, v3);
  if ((v6 & 1) == 0)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_1000047DC(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v24);
  swift_bridgeObjectRelease();
  if (!*((void *)&v25 + 1))
  {
LABEL_9:
    sub_1000130EC((uint64_t)&v24, &qword_10017C018);
    goto LABEL_10;
  }
  if swift_dynamicCast() && (v23) {
    return 1;
  }
LABEL_10:
  uint64_t v7 = (uint64_t *)sub_1000A2174();
  if (!*(void *)(a1 + 16))
  {
    long long v24 = 0u;
    long long v25 = 0u;
LABEL_19:
    sub_1000130EC((uint64_t)&v24, &qword_10017C018);
    goto LABEL_20;
  }
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1000048E0(v9, v8);
  if (v11)
  {
    sub_1000047DC(*(void *)(a1 + 56) + 32 * v10, (uint64_t)&v24);
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v25 + 1)) {
    goto LABEL_19;
  }
  if (swift_dynamicCast() & 1) != 0 && (v23) {
    return 1;
  }
LABEL_20:
  BOOL v12 = (uint64_t *)sub_1000A2180();
  if (!*(void *)(a1 + 16))
  {
    long long v24 = 0u;
    long long v25 = 0u;
LABEL_29:
    sub_1000130EC((uint64_t)&v24, &qword_10017C018);
    goto LABEL_30;
  }
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_1000048E0(v14, v13);
  if (v16)
  {
    sub_1000047DC(*(void *)(a1 + 56) + 32 * v15, (uint64_t)&v24);
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v25 + 1)) {
    goto LABEL_29;
  }
  if (swift_dynamicCast() & 1) != 0 && (v23) {
    return 1;
  }
LABEL_30:
  uint64_t v18 = (uint64_t *)sub_1000A218C();
  if (!*(void *)(a1 + 16))
  {
    long long v24 = 0u;
    long long v25 = 0u;
LABEL_38:
    sub_1000130EC((uint64_t)&v24, &qword_10017C018);
    return 0;
  }
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_1000048E0(v20, v19);
  if (v22)
  {
    sub_1000047DC(*(void *)(a1 + 56) + 32 * v21, (uint64_t)&v24);
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v25 + 1)) {
    goto LABEL_38;
  }
  if (swift_dynamicCast()) {
    return v23;
  }
  return 0;
}

uint64_t sub_1000E8624(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void (*v19)(unint64_t *__return_ptr);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(long long *__return_ptr, uint64_t, uint64_t);
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  void v123[3];
  uint64_t v124;
  uint64_t v125;
  long long v126;
  uint64_t v127;
  uint64_t v128;
  long long v129;
  long long v130;
  uint64_t v131;
  void v132[3];
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;

  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100132F10;
  uint64_t v135 = (unint64_t)a1;
  type metadata accessor for DriverExtension(0);
  sub_1000E81F0();
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v17 = v16;
  *(void *)(v14 + 56) = &type metadata for String;
  uint64_t v114 = sub_10002A1DC();
  *(void *)(v14 + 64) = v114;
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v17;
  sub_10002A230();
  uint64_t v18 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  uint64_t v19 = *(void (**)(unint64_t *__return_ptr))(*a1 + 112);
  v19(&v135);
  uint64_t v20 = v137;
  if (v137)
  {
    unint64_t v21 = v138;
    sub_1000036B0(&v135, v137);
    char v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 56))(v20, v21);
    long long v24 = v23;
    long long v25 = sub_10000478C((uint64_t)&v135);
    if (v24)
    {
      uint64_t v110 = v22;
      uint64_t v111 = a1;
      uint64_t v112 = v24;
      uint64_t v113 = a8;
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_100132F10;
      *(void *)(v26 + 56) = &type metadata for UInt64;
      *(void *)(v26 + 64) = &protocol witness table for UInt64;
      *(void *)(v26 + 32) = a4;
      uint64_t v27 = String.init(format:_:)();
      uint64_t v29 = v28;
      uint64_t v30 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a11 + 8);
      v30((long long *)v132, a10, a11);
      uint64_t v31 = v133;
      uint64_t v32 = v134;
      sub_1000036B0(v132, v133);
      sub_100013FF8(v31, v32);
      uint64_t v33 = *((void *)&v130 + 1);
      uint64_t v34 = v131;
      sub_1000036B0(&v129, *((uint64_t *)&v130 + 1));
      (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 8))(&v135, a2, a3, v27, v29, v113, a9, v33, v34);
      if (v119)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_5:
        sub_10000478C((uint64_t)&v129);
        return sub_10000478C((uint64_t)v132);
      }
      uint64_t v45 = a11;
      uint64_t v109 = v29;
      uint64_t v46 = v30;
      sub_10000478C((uint64_t)&v129);
      sub_10000478C((uint64_t)v132);
      uint64_t v47 = sub_100033A20((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v48 = 32;
      if ((a5 & 1) == 0) {
        uint64_t v48 = 0;
      }
      uint64_t v117 = v48;
      sub_10001BA68(a7, (uint64_t)&v129, &qword_10017C010);
      uint64_t v120 = v47;
      if (!*((void *)&v130 + 1))
      {
        sub_1000130EC((uint64_t)&v129, &qword_10017C010);
        uint64_t v58 = v112;
LABEL_51:
        v46(&v129, a10, v45);
        uint64_t v77 = *((void *)&v130 + 1);
        uint64_t v78 = v131;
        sub_1000036B0(&v129, *((uint64_t *)&v130 + 1));
        sub_100013FF8(v77, v78);
        uint64_t v79 = v127;
        uint64_t v80 = v128;
        sub_1000036B0(&v126, v127);
        (*(void (**)(void *__return_ptr, unint64_t *, uint64_t, uint64_t))(v80 + 16))(v132, &v135, v79, v80);
        sub_10000478C((uint64_t)&v126);
        sub_10000478C((uint64_t)&v129);
        uint64_t v82 = v133;
        uint64_t v83 = v134;
        sub_10000464C((uint64_t)v132, v133);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 16))(v110, v58, v82, v83);
        uint64_t v84 = v133;
        uint64_t v85 = v134;
        sub_10000464C((uint64_t)v132, v133);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 40))(v117, v84, v85);
        sub_100004700((uint64_t *)&unk_10017DE60);
        uint64_t v86 = swift_allocObject();
        *(_OWORD *)(v86 + 16) = xmmword_1001359B0;
        *(void *)(v86 + 32) = a2;
        *(void *)(v86 + 40) = a3;
        *(void *)(v86 + 48) = v27;
        *(void *)(v86 + 56) = v109;
        Swift::String v87 = *(uint64_t (**)(uint64_t))(*v111 + 144);
        Swift::String v88 = swift_bridgeObjectRetain();
        *(void *)(v86 + 64) = v87(v88);
        *(void *)(v86 + 72) = v89;
        uint64_t v90 = v133;
        uint64_t v91 = v134;
        sub_10000464C((uint64_t)v132, v133);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 64))(v86, v90, v91);
        uint64_t v92 = sub_10009BF00(v120);
        swift_bridgeObjectRelease();
        uint64_t v93 = v133;
        uint64_t v94 = v134;
        sub_10000464C((uint64_t)v132, v133);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v94 + 88))(v92, v93, v94);
        uint64_t v95 = v133;
        uint64_t v96 = v134;
        sub_10000464C((uint64_t)v132, v133);
        uint64_t v97 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v96 + 112))(a6, v95, v96);
        uint64_t v98 = v87(v97);
        uint64_t v100 = v99;
        unint64_t v101 = v133;
        uint64_t v102 = v134;
        sub_10000464C((uint64_t)v132, v133);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v102 + 136))(v98, v100, v101, v102);
        v46(&v126, a10, a11);
        uint64_t v103 = v127;
        uint64_t v104 = v128;
        sub_1000036B0(&v126, v127);
        sub_100013FF8(v103, v104);
        uint64_t v105 = v124;
        uint64_t v106 = v125;
        sub_1000036B0(v123, v124);
        (*(void (**)(long long *__return_ptr, void *, uint64_t, uint64_t))(v106 + 24))(&v129, v132, v105, v106);
        sub_10000478C((uint64_t)v123);
        sub_10000478C((uint64_t)&v126);
        Swift::String v107 = *((void *)&v130 + 1);
        uint64_t v108 = v131;
        sub_1000036B0(&v129, *((uint64_t *)&v130 + 1));
        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v107, v108);
        sub_10000478C((uint64_t)&v135);
        goto LABEL_5;
      }
      sub_10000372C(&v129, (uint64_t)v132);
      uint64_t v49 = v133;
      uint64_t v50 = v134;
      sub_1000036B0(v132, v133);
      uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 16))(v49, v50);
      LOBYTE(v49) = sub_1000E835C(v51);
      swift_bridgeObjectRelease();
      if ((v49 & 1) == 0) {
        goto LABEL_39;
      }
      uint64_t v52 = v111[2];
      uint64_t v53 = (uint64_t *)sub_1000A14E0();
      if (*(void *)(v52 + 16))
      {
        uint64_t v54 = *v53;
        uint64_t v55 = v53[1];
        swift_bridgeObjectRetain();
        uint64_t v56 = sub_1000048E0(v54, v55);
        if (v57)
        {
          sub_1000047DC(*(void *)(v52 + 56) + 32 * v56, (uint64_t)&v129);
        }
        else
        {
          Swift::String v129 = 0u;
          uint64_t v130 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v130 + 1))
        {
          sub_100004700(&qword_10017C8B8);
          if (swift_dynamicCast())
          {
            swift_bridgeObjectRelease();
            uint64_t v120 = v126;
          }
          goto LABEL_28;
        }
      }
      else
      {
        Swift::String v129 = 0u;
        uint64_t v130 = 0u;
      }
      sub_1000130EC((uint64_t)&v129, &qword_10017C018);
LABEL_28:
      uint64_t v59 = (uint64_t *)sub_1000A14EC();
      if (*(void *)(v52 + 16))
      {
        uint64_t v60 = *v59;
        uint64_t v61 = v59[1];
        swift_bridgeObjectRetain();
        uint64_t v62 = sub_1000048E0(v60, v61);
        if (v63)
        {
          sub_1000047DC(*(void *)(v52 + 56) + 32 * v62, (uint64_t)&v129);
        }
        else
        {
          Swift::String v129 = 0u;
          uint64_t v130 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v130 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v64 = v117;
            if ((_BYTE)v126) {
              uint64_t v64 = v117 | 0x40;
            }
            uint64_t v117 = v64;
          }
          goto LABEL_39;
        }
      }
      else
      {
        Swift::String v129 = 0u;
        uint64_t v130 = 0u;
      }
      sub_1000130EC((uint64_t)&v129, &qword_10017C018);
LABEL_39:
      uint64_t v65 = v133;
      uint64_t v66 = v134;
      sub_1000036B0(v132, v133);
      uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 16))(v65, v66);
      uint64_t v68 = (uint64_t *)sub_1000A21A4();
      if (*(void *)(v67 + 16))
      {
        uint64_t v69 = *v68;
        uint64_t v70 = v68[1];
        swift_bridgeObjectRetain();
        uint64_t v71 = sub_1000048E0(v69, v70);
        if (v72)
        {
          sub_1000047DC(*(void *)(v67 + 56) + 32 * v71, (uint64_t)&v129);
        }
        else
        {
          Swift::String v129 = 0u;
          uint64_t v130 = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        Swift::String v129 = 0u;
        uint64_t v130 = 0u;
      }
      uint64_t v45 = a11;
      uint64_t v58 = v112;
      swift_bridgeObjectRelease();
      if (*((void *)&v130 + 1))
      {
        if (swift_dynamicCast())
        {
          if (v126)
          {
            static os_log_type_t.info.getter();
            uint64_t v73 = swift_allocObject();
            *(_OWORD *)(v73 + 16) = xmmword_100132F30;
            *(void *)&Swift::String v129 = v111;
            uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v73 + 56) = &type metadata for String;
            *(void *)(v73 + 64) = v114;
            *(void *)(v73 + 32) = v74;
            *(void *)(v73 + 40) = v75;
            *(void *)(v73 + 96) = &type metadata for String;
            *(void *)(v73 + 104) = v114;
            *(void *)(v73 + 72) = v113;
            *(void *)(v73 + 80) = a9;
            swift_bridgeObjectRetain();
            uint64_t v76 = (void *)static OS_os_log.default.getter();
            uint64_t v45 = a11;
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();
          }
        }
      }
      else
      {
        sub_1000130EC((uint64_t)&v129, &qword_10017C018);
      }
      sub_10000478C((uint64_t)v132);
      goto LABEL_51;
    }
  }
  else
  {
    long long v25 = sub_1000130EC((uint64_t)&v135, &qword_10017BC78);
  }
  ((void (*)(unint64_t *__return_ptr, uint64_t))v19)(&v135, v25);
  uint64_t v35 = v137;
  if (!v137)
  {
    sub_1000130EC((uint64_t)&v135, &qword_10017BC78);
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v39 = (void *)0xE300000000000000;
    uint64_t v37 = 4079420;
    goto LABEL_12;
  }
  uint64_t v36 = v138;
  sub_1000036B0(&v135, v137);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 24))(v35, v36);
  uint64_t v39 = v38;
  sub_10000478C((uint64_t)&v135);
  if (!v39) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v135 = 0;
  uint64_t v136 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  uint64_t v135 = 0xD000000000000010;
  uint64_t v136 = 0x800000010014E0D0;
  v40._uint64_t countAndFlagsBits = v37;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._uint64_t countAndFlagsBits = 0xD000000000000017;
  v41._object = (void *)0x800000010014E270;
  String.append(_:)(v41);
  uint64_t v42 = v135;
  uint64_t v43 = v136;
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v44 = v42;
  *(void *)(v44 + 8) = v43;
  *(_OWORD *)(v44 + 16) = 0u;
  *(_OWORD *)(v44 + 32) = 0u;
  *(_OWORD *)(v44 + 48) = 0u;
  *(void *)(v44 + 64) = 0;
  *(unsigned char *)(v44 + 72) = 4;
  return swift_willThrow();
}

void *DriverKitDaemonXPC.serverName.unsafeMutableAddressor()
{
  return &static DriverKitDaemonXPC.serverName;
}

unint64_t static DriverKitDaemonXPC.serverName.getter()
{
  return 0xD000000000000022;
}

void *DriverKitDaemonXPC.NotificationType.approvalsChanged.unsafeMutableAddressor()
{
  return &static DriverKitDaemonXPC.NotificationType.approvalsChanged;
}

unint64_t static DriverKitDaemonXPC.NotificationType.approvalsChanged.getter()
{
  return 0xD00000000000002BLL;
}

ValueMetadata *type metadata accessor for DriverKitDaemonXPC()
{
  return &type metadata for DriverKitDaemonXPC;
}

ValueMetadata *type metadata accessor for DriverKitDaemonXPC.NotificationType()
{
  return &type metadata for DriverKitDaemonXPC.NotificationType;
}

uint64_t sub_1000E9274(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sub_100017D7C((void *)v2, (void *)v3);
  }
}

uint64_t sub_1000E92A0()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_10009AF20(v0, qword_100195918);
  sub_100097870(v0, (uint64_t)qword_100195918);
  return OSSignposter.init()();
}

uint64_t sub_1000E92EC()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  sub_10009AF20(v0, qword_100195938);
  sub_100097870(v0, (uint64_t)qword_100195938);
  if (qword_100195910 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for OSSignposter();
  sub_100097870(v1, (uint64_t)qword_100195918);
  OSSignposter.logHandle.getter();
  return OSSignpostID.init(log:)();
}

uint64_t sub_1000E9388()
{
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

BOOL sub_1000E93C0(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 16) == *(void *)(*(void *)a2 + 16);
}

Swift::Int sub_1000E93DC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v1 + 16));
  return Hasher._finalize()();
}

void sub_1000E9424()
{
  Hasher._combine(_:)(*(void *)(*(void *)v0 + 16));
}

Swift::Int sub_1000E9454()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(*(void *)v0 + 16));
  return Hasher._finalize()();
}

uint64_t sub_1000E9498()
{
  return String.init<A>(describing:)();
}

uint64_t sub_1000E94E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    swift_getObjectType();
    BOOL v12 = (void *)(v10 + 32);
    while (*v12 != a1)
    {
      v12 += 2;
      if (!--v11) {
        goto LABEL_5;
      }
    }
    swift_unknownObjectRetain();
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v36 = 0xD000000000000019;
    unint64_t v37 = 0x800000010014E430;
    v28._uint64_t countAndFlagsBits = sub_1000E9498();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 544175136;
    v29._object = (void *)0xE400000000000000;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = sub_1000E9498();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    while (1)
    {
LABEL_14:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
LABEL_5:
  swift_bridgeObjectRelease();
  uint64_t ObjectType = swift_getObjectType();
  if (a1 == v5) {
    goto LABEL_14;
  }
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  sub_100090AA8();
  char v16 = static NSObject.== infix(_:_:)();

  if ((v16 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v17 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(a4 + 32);
  swift_unknownObjectRetain();
  uint64_t v18 = (void (*)(unint64_t *, void))v17(&v36, a3, a4);
  uint64_t v20 = v19;
  unint64_t v21 = *v19;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v20 = v21;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v21 = sub_1000EBDC0(0, *((void *)v21 + 2) + 1, 1, v21);
    *uint64_t v20 = v21;
  }
  unint64_t v24 = *((void *)v21 + 2);
  unint64_t v23 = *((void *)v21 + 3);
  if (v24 >= v23 >> 1)
  {
    unint64_t v21 = sub_1000EBDC0((char *)(v23 > 1), v24 + 1, 1, v21);
    *uint64_t v20 = v21;
  }
  *((void *)v21 + 2) = v24 + 1;
  long long v25 = &v21[16 * v24];
  *((void *)v25 + 4) = a1;
  *((void *)v25 + 5) = a2;
  v18(&v36, 0);
  unint64_t v26 = sub_1000E98D8(a4);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v26)
  {
    unint64_t v36 = 0;
    unint64_t v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(69);
    v31._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v31._object = (void *)0x800000010014E3E0;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = sub_1000E9498();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 544175136;
    v33._object = (void *)0xE400000000000000;
    String.append(_:)(v33);
    v34._uint64_t countAndFlagsBits = sub_1000E9498();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = 0x6373627573207327;
    v35._object = (void *)0xEE00737265626972;
    String.append(_:)(v35);
    goto LABEL_14;
  }
  return result;
}

unint64_t sub_1000E98D8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = &_swiftEmptySetSingleton;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &_swiftEmptySetSingleton;
  type metadata accessor for StateManagerWrapper();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v2;
  *(void *)(v7 + 24) = a1;
  swift_unknownObjectRetain();
  LOBYTE(v2) = sub_1000E9A20(v7, v5, v6, v4);
  swift_release();
  if (v2)
  {
    swift_beginAccess();
    unint64_t v8 = swift_bridgeObjectRetain();
    unint64_t v9 = sub_1000E9E60(v8);
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    unint64_t v9 = 0;
  }
  swift_release();
  return v9;
}

uint64_t sub_1000E9A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t v7 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  BOOL v8 = sub_1000E9D60(a1, v7);
  swift_bridgeObjectRelease();
  if (!v8)
  {
    swift_beginAccess();
    uint64_t v9 = *(void *)(a3 + 16);
    swift_bridgeObjectRetain();
    BOOL v10 = sub_1000E9D60(a1, v9);
    swift_bridgeObjectRelease();
    if (v10) {
      return 0;
    }
    swift_beginAccess();
    swift_retain();
    sub_1000EBED0(&v23, a1);
    swift_endAccess();
    swift_release();
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);
    sub_1000ECEDC();
    uint64_t v14 = *(void *)(v22 + 16);
    if (v14)
    {
      type metadata accessor for StateManagerWrapper();
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = *(_OWORD *)(v22 + 32);
      swift_unknownObjectRetain_n();
      char v16 = sub_1000E9A20(v15, a2, a3, a4);
      swift_release();
      swift_unknownObjectRelease();
      if ((v16 & 1) == 0)
      {
LABEL_10:
        swift_release();
        return 0;
      }
      uint64_t v17 = 0;
      uint64_t v18 = v14 - 1;
      while (v18 != v17)
      {
        if ((unint64_t)(v17 + 1) >= *(void *)(v22 + 16))
        {
          __break(1u);
          goto LABEL_16;
        }
        uint64_t v19 = swift_allocObject();
        *(_OWORD *)(v19 + 16) = *(_OWORD *)(v22 + 16 * v17 + 48);
        swift_unknownObjectRetain_n();
        char v20 = sub_1000E9A20(v19, a2, a3, a4);
        swift_release();
        swift_unknownObjectRelease();
        ++v17;
        if ((v20 & 1) == 0) {
          goto LABEL_10;
        }
      }
    }
    swift_release();
    swift_beginAccess();
    sub_1000EC118(a1);
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    swift_retain();
    sub_1000EBED0(&v23, a1);
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(a4 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a4 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
LABEL_16:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  return 1;
}

BOOL sub_1000E9D60(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_retain();
    char v4 = __CocoaSet.contains(_:)();
    swift_release();
    return v4 & 1;
  }
  else if (*(void *)(a2 + 16) {
         && (Hasher.init(_seed:)(),
  }
             Swift::UInt v6 = *(void *)(a1 + 16),
             Hasher._combine(_:)(v6),
             Swift::Int v7 = Hasher._finalize()(),
             uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
             unint64_t v9 = v7 & ~v8,
             ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v10 = ~v8;
    do
    {
      uint64_t v11 = *(void *)(*(void *)(*(void *)(a2 + 48) + 8 * v9) + 16);
      BOOL result = v11 == v6;
      if (v11 == v6) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    return 0;
  }
  return result;
}

unint64_t sub_1000E9E60(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0) {
    goto LABEL_39;
  }
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  unint64_t v14 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    unint64_t v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v13 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1) {
      __break(1u);
    }
    unint64_t v4 = v13 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3) {
      return v2;
    }
    unint64_t v5 = 0;
    while (1)
    {
      unint64_t v6 = v5 + 1;
      unint64_t v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1)) {
        break;
      }
      if (v5 != v1)
      {
        uint64_t v7 = v14;
        if ((v14 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
          unint64_t v8 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v8) {
            goto LABEL_34;
          }
          uint64_t v9 = *(void *)(v14 + 8 * v5 + 32);
          swift_retain();
          if ((v1 & 0x8000000000000000) != 0) {
            goto LABEL_35;
          }
          if (v1 >= v8) {
            goto LABEL_37;
          }
          uint64_t v10 = *(void *)(v14 + 32 + 8 * v1);
          swift_retain();
        }
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v14 & 0x8000000000000000) != 0
          || (v14 & 0x4000000000000000) != 0)
        {
          uint64_t v7 = sub_10006556C(v14);
          unint64_t v14 = v7;
        }
        swift_release();
        *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20) = v10;
        specialized Array._endMutation()();
        uint64_t v11 = v14;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v14 & 0x8000000000000000) != 0
          || (v14 & 0x4000000000000000) != 0)
        {
          uint64_t v11 = sub_10006556C(v14);
          unint64_t v14 = v11;
        }
        if ((v1 & 0x8000000000000000) != 0) {
          goto LABEL_36;
        }
        if (v1 >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_38;
        }
        swift_release();
        *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 8 * v1 + 0x20) = v9;
        specialized Array._endMutation()();
      }
      unint64_t v5 = v6;
      if (v4 == v6) {
        return v14;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t v2 = (uint64_t)sub_1000ED060(v1);
    unint64_t v14 = v2;
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
  }
}

unint64_t sub_1000EA080(uint64_t a1, char *a2, NSObject *a3, NSObject *a4)
{
  os_log_t v195 = a3;
  uint64_t v167 = a2;
  uint64_t v186 = a1;
  uint64_t v153 = type metadata accessor for OSSignpostError();
  uint64_t v161 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v160 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v181 - 8);
  uint64_t v8 = __chkstk_darwin(v181);
  uint64_t v10 = (char *)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v171 = (char *)&v152 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v169 = (char *)&v152 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v172 = (char *)&v152 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  Swift::UInt v19 = (Swift::UInt)&v152 - v18;
  __chkstk_darwin(v17);
  uint64_t v194 = (char *)&v152 - v20;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v192 = *(void *)(v21 - 8);
  uint64_t v193 = v21;
  __chkstk_darwin(v21);
  uint64_t v191 = (char *)&v152 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = type metadata accessor for OSSignpostID();
  uint64_t v165 = *(void *)(v163 - 8);
  uint64_t v23 = __chkstk_darwin(v163);
  uint64_t v159 = (char *)&v152 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v162 = (char *)&v152 - v26;
  __chkstk_darwin(v25);
  Swift::String v28 = (char *)&v152 - v27;
  uint64_t v29 = type metadata accessor for OSSignposter();
  uint64_t v197 = *(char **)(v29 - 8);
  uint64_t v198 = v29;
  __chkstk_darwin(v29);
  Swift::String v31 = (char *)&v152 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DispatchPredicate();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  Swift::String v35 = (void (**)(char *, char *, uint64_t))((char *)&v152 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  Class isa = (uint64_t (*)(os_log_t, NSObject *))a4[1].isa;
  os_log_t v37 = v195;
  os_log_t v195 = a4;
  unint64_t v196 = v4;
  *Swift::String v35 = isa(v37, a4);
  (*(void (**)(void *, void, uint64_t))(v33 + 104))(v35, enum case for DispatchPredicate.onQueue(_:), v32);
  char v38 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v33 + 8))(v35, v32);
  if ((v38 & 1) == 0) {
    goto LABEL_85;
  }
  if (qword_100195910 != -1) {
LABEL_86:
  }
    swift_once();
  Swift::UInt v175 = v19;
  uint64_t v158 = v10;
  uint64_t v164 = v7;
  uint64_t v39 = sub_100097870(v198, (uint64_t)qword_100195918);
  uint64_t v40 = (void (*)(char *))*((void *)v197 + 2);
  uint64_t v155 = v39;
  v40(v31);
  uint64_t v41 = v163;
  uint64_t v42 = v165;
  if (qword_100195930 != -1) {
    swift_once();
  }
  uint64_t v43 = sub_100097870(v41, (uint64_t)qword_100195938);
  Swift::UInt v19 = *(void *)(v42 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v28, v43, v41);
  uint64_t v44 = OSSignposter.logHandle.getter();
  os_signpost_type_t v45 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v46 = v162;
    ((void (*)(char *, char *, uint64_t))v19)(v162, v28, v41);
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v47 = 0;
    os_signpost_id_t v48 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v44, v45, v48, "State refresh", "", v47, 2u);
    swift_slowDealloc();

    uint64_t v49 = v46;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v46, v41);
  }
  else
  {

    uint64_t v49 = v162;
  }
  uint64_t v50 = v181;
  uint64_t v157 = v42 + 16;
  ((void (*)(char *, char *, uint64_t))v19)(v49, v28, v41);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v156 = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t))(v42 + 8);
  uint64_t v51 = v42 + 8;
  uint64_t v52 = v53;
  v53(v28, v41);
  (*((void (**)(char *, uint64_t))v197 + 1))(v31, v198);
  uint64_t v54 = v191;
  UUID.init()();
  uint64_t v185 = UUID.uuidString.getter();
  uint64_t v10 = v55;
  (*(void (**)(char *, uint64_t))(v192 + 8))(v54, v193);
  unint64_t result = sub_1000E98D8((uint64_t)v195);
  unint64_t v177 = result;
  if (result)
  {
    unint64_t v203 = (unint64_t)&_swiftEmptySetSingleton;
    uint64_t v57 = sub_1000EFD2C();
    Swift::UInt v58 = v164;
    uint64_t v59 = *(char **)(v164 + 16);
    uint64_t v192 = v57;
    uint64_t v193 = v164 + 16;
    uint64_t v191 = v59;
    ((void (*)(char *))v59)(v194);
    swift_bridgeObjectRetain_n();
    Swift::String v28 = v167;
    swift_bridgeObjectRetain_n();
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.default.getter();
    BOOL v62 = os_log_type_enabled(v60, v61);
    uint64_t v165 = v51;
    uint64_t v152 = (void (*)(char *, char *, uint64_t))v19;
    uint64_t v154 = v52;
    if (v62)
    {
      uint64_t v63 = swift_slowAlloc();
      uint64_t v200 = swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v202 = sub_100003F90(v185, (unint64_t)v10, &v200);
      Swift::UInt v19 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v63 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v202 = sub_100003F90(v186, (unint64_t)v28, &v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "State refresh (id: %s, reason: %s): starting", (uint8_t *)v63, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v190 = *(void (**)(char *, uint64_t))(v58 + 8);
    v190(v194, v50);
    uint64_t v64 = v171;
    unint64_t v65 = (unint64_t)v10;
    uint64_t v7 = type metadata accessor for StateManagerWrapper();
    uint64_t v66 = swift_allocObject();
    os_log_t v67 = v195;
    *(void *)(v66 + 16) = v196;
    *(void *)(v66 + 24) = v67;
    swift_unknownObjectRetain();
    sub_1000EBED0(&v200, v66);
    swift_release();
    uint64_t v174 = v177 & 0xFFFFFFFFFFFFFF8;
    if (v177 >> 62)
    {
      swift_bridgeObjectRetain();
      Swift::String v31 = (char *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v31) {
        goto LABEL_14;
      }
    }
    else
    {
      Swift::String v31 = *(char **)((v177 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v31)
      {
LABEL_14:
        uint64_t v69 = 0;
        unint64_t v179 = v177 & 0xC000000000000001;
        unint64_t v173 = v177 + 32;
        uint64_t v189 = v164 + 8;
        uint64_t v168 = &v201;
        *(void *)&long long v68 = 136315650;
        long long v170 = v68;
        uint64_t v166 = (char *)&type metadata for Any + 8;
        *(void *)&long long v68 = 136315906;
        long long v180 = v68;
        uint64_t v194 = v10;
        uint64_t v198 = v7;
        uint64_t v178 = v31;
        while (1)
        {
          if (v179)
          {
            Swift::UInt v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            BOOL v70 = __OFADD__(v69++, 1);
            if (v70) {
              goto LABEL_83;
            }
          }
          else
          {
            if ((unint64_t)v69 >= *(void *)(v174 + 16)) {
              goto LABEL_84;
            }
            Swift::UInt v19 = *(void *)(v173 + 8 * (void)v69);
            swift_retain();
            BOOL v70 = __OFADD__(v69++, 1);
            if (v70) {
              goto LABEL_83;
            }
          }
          unint64_t v71 = v203;
          if ((v203 & 0xC000000000000001) != 0) {
            break;
          }
          if (*(void *)(v203 + 16))
          {
            uint64_t v182 = v69;
            Hasher.init(_seed:)();
            Swift::UInt v72 = v19;
            Swift::UInt v19 = *(void *)(v19 + 16);
            Hasher._combine(_:)(v19);
            Swift::Int v81 = Hasher._finalize()();
            uint64_t v82 = -1 << *(unsigned char *)(v71 + 32);
            unint64_t v83 = v81 & ~v82;
            if ((*(void *)(v71 + 56 + ((v83 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v83))
            {
              uint64_t v84 = ~v82;
              while (*(void *)(*(void *)(*(void *)(v71 + 48) + 8 * v83) + 16) != v19)
              {
                unint64_t v83 = (v83 + 1) & v84;
                if (((*(void *)(v71 + 56 + ((v83 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v83) & 1) == 0) {
                  goto LABEL_15;
                }
              }
LABEL_25:
              Swift::UInt v19 = v72;
              uint64_t v10 = *(char **)(v72 + 16);
              unint64_t v196 = *(void *)(v72 + 24);
              Swift::UInt v74 = v175;
              ((void (*)(Swift::UInt, uint64_t, uint64_t))v191)(v175, v192, v50);
              swift_unknownObjectRetain_n();
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              uint64_t v75 = Logger.logObject.getter();
              os_log_type_t v76 = static os_log_type_t.default.getter();
              BOOL v77 = os_log_type_enabled(v75, v76);
              Swift::UInt v176 = v19;
              if (v77)
              {
                Swift::UInt v19 = swift_slowAlloc();
                uint64_t v200 = swift_slowAlloc();
                *(_DWORD *)Swift::UInt v19 = v170;
                swift_bridgeObjectRetain();
                *(void *)(v19 + 4) = sub_100003F90(v185, (unint64_t)v194, &v200);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v19 + 12) = 2080;
                swift_bridgeObjectRetain();
                *(void *)(v19 + 14) = sub_100003F90(v186, (unint64_t)v28, &v200);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v19 + 22) = 2080;
                swift_getObjectType();
                uint64_t v78 = sub_1000E9498();
                *(void *)(v19 + 24) = sub_100003F90(v78, v79, &v200);
                swift_unknownObjectRelease_n();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v75, v76, "State refresh (id: %s, reason: %s): Notifying %s of state update", (uint8_t *)v19, 0x20u);
                swift_arrayDestroy();
                unint64_t v65 = (unint64_t)v194;
                swift_slowDealloc();
                swift_slowDealloc();

                Swift::UInt v80 = v74;
                uint64_t v7 = v198;
              }
              else
              {

                swift_unknownObjectRelease_n();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                Swift::UInt v80 = v74;
              }
              v190((char *)v80, v50);
              uint64_t ObjectType = swift_getObjectType();
              uint64_t v86 = *(uint64_t (**)(void))(v196 + 40);
              uint64_t v187 = ObjectType;
              uint64_t v87 = v86();
              if (!v87)
              {
                ((void (*)(char *, uint64_t, uint64_t))v191)(v64, v192, v50);
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain_n();
                swift_unknownObjectRetain_n();
                Swift::String v107 = Logger.logObject.getter();
                os_log_type_t v108 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v107, v108))
                {
                  Swift::UInt v19 = swift_slowAlloc();
                  uint64_t v200 = swift_slowAlloc();
                  *(_DWORD *)Swift::UInt v19 = v170;
                  swift_bridgeObjectRetain();
                  *(void *)(v19 + 4) = sub_100003F90(v185, (unint64_t)v194, &v200);
                  swift_bridgeObjectRelease_n();
                  *(_WORD *)(v19 + 12) = 2080;
                  swift_bridgeObjectRetain();
                  *(void *)(v19 + 14) = sub_100003F90(v186, (unint64_t)v28, &v200);
                  swift_bridgeObjectRelease_n();
                  *(_WORD *)(v19 + 22) = 2080;
                  uint64_t v109 = sub_1000E9498();
                  *(void *)(v19 + 24) = sub_100003F90(v109, v110, &v200);
                  swift_unknownObjectRelease_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v107, v108, "State refresh (id: %s, reason: %s): %s did not update state", (uint8_t *)v19, 0x20u);
                  swift_arrayDestroy();
                  unint64_t v65 = (unint64_t)v194;
                  swift_slowDealloc();
                  swift_slowDealloc();
                  swift_unknownObjectRelease();
                  swift_release();
                }
                else
                {

                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();
                  swift_release();
                  swift_unknownObjectRelease_n();
                }
                v190(v64, v50);
                goto LABEL_16;
              }
              uint64_t v88 = v87;
              int64_t v89 = v172;
              ((void (*)(char *, uint64_t, uint64_t))v191)(v172, v192, v50);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              swift_unknownObjectRetain_n();
              swift_bridgeObjectRetain();
              uint64_t v90 = Logger.logObject.getter();
              int v91 = static os_log_type_t.default.getter();
              BOOL v92 = os_log_type_enabled(v90, (os_log_type_t)v91);
              uint64_t v197 = v10;
              if (v92)
              {
                LODWORD(v188) = v91;
                os_log_t v195 = v90;
                uint64_t v93 = swift_slowAlloc();
                uint64_t v184 = swift_slowAlloc();
                uint64_t v202 = v184;
                *(_DWORD *)uint64_t v93 = v180;
                swift_bridgeObjectRetain();
                uint64_t v200 = sub_100003F90(v185, v65, &v202);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v93 + 12) = 2080;
                swift_bridgeObjectRetain();
                uint64_t v200 = sub_100003F90(v186, (unint64_t)v28, &v202);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v93 + 22) = 2080;
                uint64_t v94 = sub_1000E9498();
                uint64_t v200 = sub_100003F90(v94, v95, &v202);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_unknownObjectRelease_n();
                swift_bridgeObjectRelease();
                *(_WORD *)(v93 + 32) = 2080;
                int64_t v96 = *(void *)(v88 + 16);
                if (v96)
                {
                  uint64_t v199 = _swiftEmptyArrayStorage;
                  sub_10000C884(0, v96, 0);
                  uint64_t v97 = v199;
                  uint64_t v98 = (void **)(v88 + 40);
                  do
                  {
                    uint64_t v99 = (uint64_t)*(v98 - 1);
                    uint64_t v100 = *v98;
                    uint64_t v200 = 538976288;
                    unint64_t v201 = 0xE400000000000000;
                    swift_bridgeObjectRetain();
                    v101._uint64_t countAndFlagsBits = v99;
                    v101._object = v100;
                    String.append(_:)(v101);
                    swift_bridgeObjectRelease();
                    uint64_t v103 = v200;
                    unint64_t v102 = v201;
                    uint64_t v199 = v97;
                    unint64_t v105 = v97[2];
                    unint64_t v104 = v97[3];
                    if (v105 >= v104 >> 1)
                    {
                      sub_10000C884(v104 > 1, v105 + 1, 1);
                      uint64_t v97 = v199;
                    }
                    v98 += 2;
                    v97[2] = v105 + 1;
                    uint64_t v106 = &v97[2 * v105];
                    v106[4] = v103;
                    v106[5] = v102;
                    --v96;
                  }
                  while (v96);
                  uint64_t v50 = v181;
                  int64_t v89 = v172;
                }
                else
                {
                  uint64_t v97 = _swiftEmptyArrayStorage;
                }
                uint64_t v200 = (uint64_t)v97;
                sub_100004700((uint64_t *)&unk_10017E5D0);
                sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
                uint64_t v111 = BidirectionalCollection<>.joined(separator:)();
                unint64_t v113 = v112;
                swift_bridgeObjectRelease();
                uint64_t v200 = sub_100003F90(v111, v113, &v202);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                os_log_t v114 = v195;
                _os_log_impl((void *)&_mh_execute_header, v195, (os_log_type_t)v188, "State refresh (id: %s, reason: %s): %s updated state:\n%s", (uint8_t *)v93, 0x2Au);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                v190(v89, v50);
                Swift::String v28 = v167;
                uint64_t v10 = v169;
                uint64_t v7 = v198;
              }
              else
              {

                swift_bridgeObjectRelease_n();
                swift_unknownObjectRelease_n();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                v190(v89, v50);
                uint64_t v10 = v169;
              }
              uint64_t v115 = (*(uint64_t (**)(uint64_t))(v196 + 16))(v187);
              Swift::UInt v19 = *(void *)(v115 + 16);
              if (v19)
              {
                uint64_t v200 = (uint64_t)_swiftEmptyArrayStorage;
                specialized ContiguousArray.reserveCapacity(_:)();
                uint64_t v116 = 0;
                do
                {
                  uint64_t v117 = v116 + 1;
                  *(_OWORD *)(swift_allocObject() + 16) = *(_OWORD *)(v115 + 16 * v116 + 32);
                  swift_unknownObjectRetain();
                  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized ContiguousArray._endMutation()();
                  uint64_t v116 = v117;
                }
                while (v19 != v117);
                unint64_t v118 = v200;
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_bridgeObjectRelease();
                unint64_t v118 = (unint64_t)_swiftEmptyArrayStorage;
              }
              Swift::String v31 = v197;
              if (!(v118 >> 62))
              {
                Swift::String v119 = *(NSObject **)((v118 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v119) {
                  goto LABEL_58;
                }
                goto LABEL_80;
              }
              swift_bridgeObjectRetain();
              Swift::String v31 = v197;
              Swift::String v119 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v119)
              {
LABEL_80:
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v64 = v171;
                unint64_t v65 = (unint64_t)v194;
                goto LABEL_16;
              }
LABEL_58:
              Swift::UInt v19 = 0;
              unint64_t v196 = v118 & 0xC000000000000001;
              uint64_t v184 = v118 & 0xFFFFFFFFFFFFFF8;
              unint64_t v183 = v118 + 32;
              unint64_t v188 = v118;
              os_log_t v195 = v119;
              while (2)
              {
                if (v196)
                {
                  uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                  BOOL v70 = __OFADD__(v19++, 1);
                  if (v70) {
                    goto LABEL_81;
                  }
                }
                else
                {
                  if (v19 >= *(void *)(v184 + 16)) {
                    goto LABEL_82;
                  }
                  uint64_t v7 = *(void *)(v183 + 8 * v19);
                  swift_retain();
                  BOOL v70 = __OFADD__(v19++, 1);
                  if (v70)
                  {
LABEL_81:
                    __break(1u);
LABEL_82:
                    __break(1u);
LABEL_83:
                    __break(1u);
LABEL_84:
                    __break(1u);
LABEL_85:
                    __break(1u);
                    goto LABEL_86;
                  }
                }
                unint64_t v120 = v203;
                if ((v203 & 0xC000000000000001) != 0)
                {
                  swift_bridgeObjectRetain();
                  swift_retain();
                  char v121 = __CocoaSet.contains(_:)();
                  swift_bridgeObjectRelease();
                  swift_release();
                  if ((v121 & 1) == 0)
                  {
LABEL_75:
                    ((void (*)(char *, uint64_t, uint64_t))v191)(v10, v192, v50);
                    unint64_t v127 = (unint64_t)v194;
                    swift_bridgeObjectRetain_n();
                    swift_bridgeObjectRetain_n();
                    swift_unknownObjectRetain_n();
                    swift_retain_n();
                    uint64_t v128 = Logger.logObject.getter();
                    Swift::String v129 = v10;
                    os_log_type_t v130 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v128, v130))
                    {
                      uint64_t v131 = swift_slowAlloc();
                      uint64_t v200 = swift_slowAlloc();
                      *(_DWORD *)uint64_t v131 = v180;
                      swift_bridgeObjectRetain();
                      *(void *)(v131 + 4) = sub_100003F90(v185, v127, &v200);
                      swift_bridgeObjectRelease_n();
                      *(_WORD *)(v131 + 12) = 2080;
                      swift_bridgeObjectRetain();
                      *(void *)(v131 + 14) = sub_100003F90(v186, (unint64_t)v28, &v200);
                      swift_bridgeObjectRelease_n();
                      *(_WORD *)(v131 + 22) = 2080;
                      uint64_t v132 = sub_1000E9498();
                      *(void *)(v131 + 24) = sub_100003F90(v132, v133, &v200);
                      swift_unknownObjectRelease_n();
                      swift_bridgeObjectRelease();
                      *(_WORD *)(v131 + 32) = 2080;
                      Swift::String v31 = v197;
                      swift_getObjectType();
                      uint64_t v134 = sub_1000E9498();
                      *(void *)(v131 + 34) = sub_100003F90(v134, v135, &v200);
                      swift_release_n();
                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v128, v130, "State refresh (id: %s, reason: %s): %s updated state, will notify subscriber: %s", (uint8_t *)v131, 0x2Au);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      uint64_t v50 = v181;
                      swift_slowDealloc();
                    }
                    else
                    {

                      swift_release_n();
                      swift_unknownObjectRelease_n();
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease_n();
                    }
                    v190(v129, v50);
                    uint64_t v10 = v129;
                    sub_1000EBED0(&v200, v7);
                    swift_release();
LABEL_60:
                    uint64_t v7 = v198;
                    if ((os_log_t)v19 == v195) {
                      goto LABEL_80;
                    }
                    continue;
                  }
                }
                else
                {
                  if (!*(void *)(v203 + 16)) {
                    goto LABEL_75;
                  }
                  Hasher.init(_seed:)();
                  Swift::UInt v122 = *(void *)(v7 + 16);
                  Hasher._combine(_:)(v122);
                  Swift::Int v123 = Hasher._finalize()();
                  uint64_t v124 = -1 << *(unsigned char *)(v120 + 32);
                  unint64_t v125 = v123 & ~v124;
                  if (((*(void *)(v120 + 56 + ((v125 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v125) & 1) == 0) {
                    goto LABEL_75;
                  }
                  uint64_t v126 = ~v124;
                  while (*(void *)(*(void *)(*(void *)(v120 + 48) + 8 * v125) + 16) != v122)
                  {
                    unint64_t v125 = (v125 + 1) & v126;
                    if (((*(void *)(v120 + 56 + ((v125 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v125) & 1) == 0) {
                      goto LABEL_75;
                    }
                  }
                }
                break;
              }
              swift_release();
              goto LABEL_60;
            }
LABEL_15:
            swift_release();
LABEL_16:
            Swift::String v31 = v178;
            uint64_t v69 = v182;
            if (v182 == v178) {
              goto LABEL_88;
            }
          }
          else
          {
            swift_release();
            Swift::String v31 = v178;
            if (v69 == v178) {
              goto LABEL_88;
            }
          }
        }
        uint64_t v182 = v69;
        swift_bridgeObjectRetain();
        Swift::UInt v72 = v19;
        char v73 = __CocoaSet.contains(_:)();
        swift_bridgeObjectRelease();
        if (v73) {
          goto LABEL_25;
        }
        goto LABEL_15;
      }
    }
LABEL_88:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v136 = v158;
    ((void (*)(char *, uint64_t, uint64_t))v191)(v158, v192, v50);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unsigned int v137 = Logger.logObject.getter();
    os_log_type_t v138 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v137, v138))
    {
      uint64_t v139 = swift_slowAlloc();
      uint64_t v200 = swift_slowAlloc();
      *(_DWORD *)uint64_t v139 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v202 = sub_100003F90(v185, v65, &v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v139 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v202 = sub_100003F90(v186, (unint64_t)v28, &v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v137, v138, "State refresh (id: %s, reason: %s): completed", (uint8_t *)v139, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    v190(v136, v50);
    uint64_t v140 = v161;
    uint64_t v141 = v160;
    uint64_t v142 = v159;
    uint64_t v143 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v144 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v145 = v153;
      if ((*(unsigned int (**)(char *, uint64_t))(v140 + 88))(v141, v153) == enum case for OSSignpostError.doubleEnd(_:))
      {
        unint64_t v146 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v140 + 8))(v141, v145);
        unint64_t v146 = "";
      }
      uint64_t v147 = v162;
      uint64_t v148 = v163;
      v152(v162, v142, v163);
      uint64_t v149 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v149 = 0;
      os_signpost_id_t v150 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v143, v144, v150, "State refresh", v146, v149, 2u);
      swift_slowDealloc();

      uint64_t v151 = v154;
      v154(v142, v148);
      swift_release();
      return v151(v147, v148);
    }
    else
    {

      v154(v142, v163);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1000EBDC0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100004700(&qword_10017F9E8);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000ED978(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EBED0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for StateManagerWrapper();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v19;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v17 = sub_1000ECC34(v7, result + 1);
    Swift::Int v21 = v17;
    if (*(void *)(v17 + 24) <= *(void *)(v17 + 16))
    {
      swift_retain();
      sub_1000EC7DC();
      uint64_t v18 = v21;
    }
    else
    {
      uint64_t v18 = v17;
      swift_retain();
    }
    sub_1000ECE38(a2, v18);
    uint64_t *v3 = v18;
    goto LABEL_18;
  }
  Hasher.init(_seed:)();
  Swift::UInt v10 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v10);
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_11:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    Swift::Int v16 = swift_retain();
    sub_1000ED158(v16, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v20;
LABEL_18:
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v14 = ~v12;
  while (*(void *)(*(void *)(*(void *)(v6 + 48) + 8 * v13) + 16) != v10)
  {
    unint64_t v13 = (v13 + 1) & v14;
    if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v13);
  swift_retain();
  return 0;
}

unint64_t sub_1000EC118(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v2;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    char v6 = __CocoaSet.contains(_:)();
    swift_release();
    if (v6)
    {
      unint64_t v7 = sub_1000EC29C(v5, a1);
      swift_bridgeObjectRelease();
      return v7;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  Hasher.init(_seed:)();
  Swift::UInt v8 = *(void *)(a1 + 16);
  Hasher._combine(_:)(v8);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  uint64_t v12 = ~v10;
  while (*(void *)(*(void *)(*(void *)(v4 + 48) + 8 * v11) + 16) != v8)
  {
    unint64_t v11 = (v11 + 1) & v12;
    if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
      return 0;
    }
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *v2;
  uint64_t v16 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000EC3AC();
    uint64_t v15 = v16;
  }
  unint64_t v7 = *(void *)(*(void *)(v15 + 48) + 8 * v11);
  sub_1000ECA88(v11);
  *uint64_t v2 = v16;
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t sub_1000EC29C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v5 = __CocoaSet.count.getter();
  uint64_t v6 = swift_unknownObjectRetain();
  Swift::Int v7 = sub_1000ECC34(v6, v5);
  Swift::Int v16 = v7;
  Hasher.init(_seed:)();
  Swift::UInt v8 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v8);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t result = v9 & ~v10;
  Swift::Int v12 = v7 + 56;
  if ((*(void *)(v7 + 56 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v13 = ~v10;
    uint64_t v14 = *(void *)(v7 + 48);
    while (1)
    {
      uint64_t v15 = *(void *)(v14 + 8 * result);
      if (*(void *)(v15 + 16) == v8) {
        break;
      }
      unint64_t result = (result + 1) & v13;
      if (((*(void *)(v12 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0)
      {
        __break(1u);
        break;
      }
    }
    unint64_t result = sub_1000ECA88(result);
    if (v8 == *(void *)(v15 + 16))
    {
      Swift::Int *v3 = v16;
      return v15;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1000EC3AC()
{
  unint64_t v1 = v0;
  sub_100004700(&qword_10017F9E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000EC558()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100004700(&qword_10017F9E0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*(void *)(v18 + 16));
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
    uint64_t result = swift_retain();
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000EC7DC()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100004700(&qword_10017F9E0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                unint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*(void *)(v18 + 16));
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

unint64_t sub_1000ECA88(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*(void *)(v10 + 16));
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          unint64_t v13 = (void *)(v12 + 8 * v2);
          unint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            void *v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

Swift::Int sub_1000ECC34(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100004700(&qword_10017F9E0);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for StateManagerWrapper();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1000EC7DC();
          uint64_t v2 = v14;
        }
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*(void *)(v13 + 16));
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

unint64_t sub_1000ECE38(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(a1 + 16));
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void sub_1000ECEDC()
{
  unint64_t v1 = *(void **)v0;
  unint64_t v2 = *(void *)(*(void *)v0 + 16);
  unint64_t v3 = v2 - 2;
  if (v2 >= 2)
  {
    unint64_t v4 = 0;
    while (1)
    {
      swift_stdlib_random();
      uint64_t v6 = (0 * (unsigned __int128)v2) >> 64;
      if (v2)
      {
        if (-(uint64_t)v2 % v2)
        {
          while (1)
            swift_stdlib_random();
        }
      }
      unint64_t v8 = v4 + v6;
      if (__OFADD__(v4, v6)) {
        break;
      }
      if (v4 != v8)
      {
        unint64_t v9 = v1[2];
        if (v4 >= v9) {
          goto LABEL_18;
        }
        if (v8 >= v9) {
          goto LABEL_19;
        }
        long long v10 = *(_OWORD *)&v1[2 * v4 + 4];
        long long v11 = *(_OWORD *)&v1[2 * v8 + 4];
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v1 = (void *)sub_1000ED964(v1);
        }
        if (v4 >= v1[2]) {
          goto LABEL_20;
        }
        *(_OWORD *)&v1[2 * v4 + 4] = v11;
        swift_unknownObjectRelease();
        if (v8 >= v1[2]) {
          goto LABEL_21;
        }
        *(_OWORD *)&v1[2 * v8 + 4] = v10;
        swift_unknownObjectRelease();
        *(void *)uint64_t v0 = v1;
      }
      --v2;
      if (v4++ == v3) {
        return;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
}

void *sub_1000ED060(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      unint64_t v3 = &_swiftEmptyArrayStorage;
    }
    else
    {
      sub_100004700(&qword_10017FB70);
      unint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1000ED744((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return &_swiftEmptyArrayStorage;
    }
  }
  return v3;
}

Swift::Int sub_1000ED158(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000EC7DC();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)sub_1000EC3AC();
      goto LABEL_12;
    }
    sub_1000EC558();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Swift::UInt v9 = *(void *)(v5 + 16);
  Hasher._combine(_:)(v9);
  unint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    unint64_t result = type metadata accessor for StateManagerWrapper();
    while (*(void *)(*(void *)(*(void *)(v8 + 48) + 8 * a2) + 16) != v9)
    {
      a2 = (a2 + 1) & v11;
      if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_12;
      }
    }
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (!v14)
  {
    *(void *)(v12 + 16) = v15;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000ED2A8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017F9E8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = &_swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100004700(&qword_10017F9F0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*sub_1000ED434(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000ED4E4(v6, a2, a3);
  return sub_1000ED49C;
}

void sub_1000ED49C(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_1000ED4E4(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    uint64_t *v3 = v4;
    return sub_1000ED564;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000ED564()
{
  return swift_release();
}

uint64_t type metadata accessor for StateManagerWrapper()
{
  return self;
}

void *assignWithCopy for StateUpdateResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for StateUpdateResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StateUpdateResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for StateUpdateResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StateUpdateResult()
{
  return &type metadata for StateUpdateResult;
}

unint64_t sub_1000ED6B8()
{
  unint64_t result = qword_1001959D0[0];
  if (!qword_1001959D0[0])
  {
    type metadata accessor for StateManagerWrapper();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001959D0);
  }
  return result;
}

uint64_t sub_1000ED70C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000ED744(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10001348C((unint64_t *)&unk_10017FA00, &qword_10017F9F8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100004700(&qword_10017F9F8);
          uint64_t v12 = sub_1000ED434(v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for StateManagerWrapper();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000ED964(void *a1)
{
  return sub_1000ED2A8(0, a1[2], 0, a1);
}

uint64_t sub_1000ED978(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100004700(&qword_10017F9F0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000EDA88(uint64_t a1)
{
  return sub_1000EDAA0(a1, (uint64_t (*)(void))&mach_error_string);
}

uint64_t sub_1000EDAA0(uint64_t a1, uint64_t (*a2)(void))
{
  if (a2()) {
    return String.init(cString:)();
  }
  else {
    return 0x6E776F6E6B6E7528;
  }
}

void *sub_1000EDAE4(uint64_t a1, unint64_t a2)
{
  sub_100012DE4(a1, a2);
  uint64_t v4 = sub_1000F73DC(a1, a2);
  sub_100012A10(a1, a2);
  return v4;
}

uint64_t sub_1000EDB34(uint64_t a1, unint64_t a2)
{
  return sub_1000EDB58(a1, a2, COERCE_DOUBLE(0x2000000000), 32, (uint64_t (*)(uint64_t, unint64_t, uint64_t))&CC_SHA256);
}

uint64_t sub_1000EDB58(uint64_t a1, unint64_t a2, double a3, uint64_t a4, uint64_t (*a5)(uint64_t, unint64_t, uint64_t))
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  double v10 = a3;
  uint64_t v11 = __DataStorage.init(length:)();
  sub_1000F5D38((int *)&v10, 0);
  v11 |= 0x4000000000000000uLL;
  sub_100012DE4(a1, a2);
  sub_1000F776C((uint64_t *)&v10, a1, a2, a5);
  sub_100012A10(a1, a2);
  return *(void *)&v10;
}

uint64_t sub_1000EDC20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t (*a5)(uint64_t, unint64_t, uint64_t)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = a6;
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      uint64_t v19 = a6;
      sub_100012DE4(a3, a4);
      uint64_t v18 = sub_1000F75F8((int)a3, a3 >> 32, a4 & 0x3FFFFFFFFFFFFFFFLL, a3, a4, a1, a2, a5);
      if (v6) {
        goto LABEL_14;
      }
      uint64_t v16 = v18;
      goto LABEL_11;
    case 2uLL:
      uint64_t v19 = a6;
      uint64_t v14 = *(void *)(a3 + 16);
      uint64_t v13 = *(void *)(a3 + 24);
      sub_100012DE4(a3, a4);
      swift_retain();
      swift_retain();
      uint64_t v15 = sub_1000F75F8(v14, v13, a4 & 0x3FFFFFFFFFFFFFFFLL, a3, a4, a1, a2, a5);
      if (v6) {
        goto LABEL_15;
      }
      uint64_t v16 = v15;
      swift_release();
      swift_release();
LABEL_11:
      uint64_t result = sub_100012A10(a3, a4);
      uint64_t v7 = v19;
      break;
    case 3uLL:
      memset(v20, 0, 14);
      goto LABEL_6;
    default:
      v20[0] = a3;
      LOWORD(v20[1]) = a4;
      BYTE2(v20[1]) = BYTE2(a4);
      BYTE3(v20[1]) = BYTE3(a4);
      BYTE4(v20[1]) = BYTE4(a4);
      BYTE5(v20[1]) = BYTE5(a4);
LABEL_6:
      sub_1000EDE9C((uint64_t)v20, a3, a4, a1, a5, &v21);
      if (v6)
      {
LABEL_14:
        sub_100012A10(a3, a4);
        __break(1u);
LABEL_15:
        sub_100012A10(a3, a4);
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x1000EDE8CLL);
      }
      uint64_t result = sub_100012A10(a3, a4);
      uint64_t v16 = v21;
      break;
  }
  *uint64_t v7 = v16;
  return result;
}

uint64_t sub_1000EDE9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, unint64_t, uint64_t)@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v8 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_11;
      }
      unint64_t v8 = HIDWORD(a2) - (int)a2;
LABEL_6:
      if ((v8 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_10;
      }
      if (HIDWORD(v8))
      {
LABEL_10:
        __break(1u);
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x1000EDF3CLL);
      }
LABEL_8:
      uint64_t result = a5(a1, v8, a4);
      *a6 = result;
      return result;
    case 2uLL:
      uint64_t v11 = a2 + 16;
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(v11 + 8);
      unint64_t v8 = v9 - v10;
      if (!__OFSUB__(v9, v10)) {
        goto LABEL_6;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_8;
    default:
      unint64_t v8 = BYTE6(a3);
      goto LABEL_8;
  }
}

id sub_1000EDF4C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [v0 UTF8String];
  id v2 = v0;
  return v1;
}

uint64_t sub_1000EDF8C(Swift::Int count)
{
  v2._uint64_t countAndFlagsBits = 9;
  v2._object = (void *)0xE100000000000000;
  Swift::String v3 = String.init(repeating:count:)(v2, count);
  uint64_t countAndFlagsBits = v3._countAndFlagsBits;
  String.append(_:)(v3);
  sub_100029B24();
  uint64_t v5 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t sub_1000EE07C(uint64_t a1, uint64_t a2)
{
  return sub_1000EE0A0(COERCE_DOUBLE(0x2000000000), a1, a2, 32, (uint64_t (*)(uint64_t, unint64_t, uint64_t))&CC_SHA256);
}

uint64_t sub_1000EE0A0(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v7 = type metadata accessor for String.Encoding();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v11 = String.data(using:allowLossyConversion:)();
  unint64_t v13 = v12;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v13 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    uint64_t v15 = __DataStorage.init(length:)();
    double v17 = a1;
    uint64_t v18 = v15;
    sub_1000F5D38((int *)&v17, 0);
    v18 |= 0x4000000000000000uLL;
    sub_100012DE4(v11, v13);
    sub_1000F776C((uint64_t *)&v17, v11, v13, a5);
    sub_10002404C(v11, v13);
    sub_10002404C(v11, v13);
    return *(void *)&v17;
  }
  return result;
}

uint64_t sub_1000EE240(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 == 47 && a2 == 0xE100000000000000) {
    goto LABEL_10;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000EE37C(v3, a2);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_10;
  }
  if (v4 != 47 || v6 != 0xE100000000000000)
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_9;
    }
LABEL_10:
    swift_bridgeObjectRetain();
    return v3;
  }
  swift_bridgeObjectRelease();
LABEL_9:
  swift_bridgeObjectRetain();
  sub_1000F7B54(1);
  swift_bridgeObjectRelease();
  uint64_t v3 = static String._fromSubstring(_:)();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000EE37C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.subscript.getter();
}

uint64_t sub_1000EE3FC(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000EE520(a1, a2);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_7;
  }
  if (v4 != 47 || v6 != 0xE100000000000000)
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_6;
    }
LABEL_7:
    swift_bridgeObjectRetain();
    return a1;
  }
  swift_bridgeObjectRelease();
LABEL_6:
  unint64_t v8 = String.index(_:offsetBy:)();
  swift_bridgeObjectRetain();
  sub_1000EE568(v8, a1, a2);
  swift_bridgeObjectRelease();
  a1 = static String._fromSubstring(_:)();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000EE520(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

unint64_t sub_1000EE568(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EE5B4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[2] = a5;
  v6[3] = a2;
  return sub_1000EE770(a1 & 1, a3, (uint64_t)sub_1000F7C20, (uint64_t)v6, a4);
}

uint64_t sub_1000EE600(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(class metadata base offset for KeyPath + *a3 + 8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  char v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v13 - v8;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  char v10 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v7, v3);
  v11(v9, v3);
  return v10 & 1;
}

uint64_t sub_1000EE770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  char v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
  {
    __chkstk_darwin(v8);
    *(&v16 - 4) = v6;
    *(&v16 - 3) = v13;
    *(&v16 - 2) = v14;
    sub_1000EE8F8();
    if (v15) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1000EE8F8();
    if (v11)
    {
LABEL_3:
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
      return Array.append(_:)();
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  return Array.insert(_:at:)();
}

uint64_t sub_1000EE8F8()
{
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Collection.firstIndex(where:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1000EE9A8(void *a1, uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v38 = a2;
  uint64_t v39 = a3;
  uint64_t v7 = *a1;
  uint64_t v43 = a1;
  uint64_t v8 = *(void *)(v7 + class metadata base offset for KeyPath + 8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(a1);
  os_log_t v37 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v32 - v13;
  uint64_t v16 = *v15;
  uint64_t v33 = *(void *)(*v15 - 8);
  uint64_t v17 = __chkstk_darwin(v12);
  uint64_t v42 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v32 - v19;
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  uint64_t v49 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v21 = static Array._allocateUninitialized(_:)();
  uint64_t v48 = v21;
  uint64_t result = Array.endIndex.getter();
  uint64_t v44 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (v44)
    {
      uint64_t v23 = 0;
      os_signpost_type_t v45 = (void (**)(char *, uint64_t))(v33 + 8);
      uint64_t v32 = v33 + 24;
      uint64_t v40 = (void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v41 = a4;
      uint64_t v34 = (void (**)(char *, char *, uint64_t))(v33 + 16);
      Swift::String v35 = (void (**)(char *, char *, uint64_t))(v9 + 16);
      uint64_t v36 = a5;
      do
      {
        Array.subscript.getter();
        swift_getAtKeyPath();
        Dictionary.subscript.getter();
        if (v47)
        {
          (*v35)(v37, v14, v8);
          swift_bridgeObjectRetain();
          uint64_t v24 = Array.endIndex.getter();
          swift_bridgeObjectRelease();
          unint64_t v46 = v24;
          char v47 = 0;
          type metadata accessor for Dictionary();
          Dictionary.subscript.setter();
          (*v34)(v42, v20, v16);
          type metadata accessor for Array();
          Array.append(_:)();
          (*v40)(v14, v8);
          (*v45)(v20, v16);
        }
        else
        {
          unint64_t v25 = v46;
          uint64_t v26 = v42;
          Array.subscript.getter();
          char v27 = v38(v20, v26);
          Swift::String v28 = *v45;
          (*v45)(v26, v16);
          if (v27)
          {
            type metadata accessor for Array();
            Array._makeMutableAndUnique()();
            uint64_t v29 = v48;
            sub_1000F6070(v25, v48);
            char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
            uint64_t v31 = v29 & 0xFFFFFFFFFFFFFF8;
            if ((isClassOrObjCExistentialType & 1) == 0) {
              uint64_t v31 = v29;
            }
            (*(void (**)(unint64_t, char *, uint64_t))(v33 + 24))(v31+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v25, v20, v16);
          }
          (*v40)(v14, v8);
          v28(v20, v16);
        }
        ++v23;
      }
      while (v44 != v23);
      uint64_t v21 = v48;
    }
    swift_bridgeObjectRelease();
    return v21;
  }
  return result;
}

uint64_t sub_1000EEE74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    sub_10001889C((_OWORD *)a1, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1000F6520(v14, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000130EC(a1, &qword_10017C018);
    unint64_t v7 = sub_1000AD438(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_1000F66C4();
        uint64_t v11 = v13;
      }
      sub_10001889C((_OWORD *)(*(void *)(v11 + 56) + 32 * v9), v14);
      sub_1000F6388(v9, v11);
      uint64_t *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return sub_1000130EC((uint64_t)v14, &qword_10017C018);
  }
}

uint64_t sub_1000EEF88()
{
  return static Array.+ infix(_:_:)();
}

uint64_t sub_1000EEF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000F6000(a3, a3);
  uint64_t v5 = *(void *)(a3 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, a1, a3);
  type metadata accessor for Array();
  uint64_t v7 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1000EF094(uint64_t a1, char a2)
{
  if (a2) {
    return static Array.+ infix(_:_:)();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

BOOL sub_1000EF0B4()
{
  return Array.count.getter() == 0;
}

uint64_t sub_1000EF0D4(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = a4;
  uint64_t v8 = v6;
  return sub_1000EE770(a1 & 1, a2, (uint64_t)sub_1000F7C58, (uint64_t)&v5, a3);
}

uint64_t sub_1000EF120@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100004700(&qword_10017C918);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - v10;
  unint64_t v12 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v13) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      uint64_t v13 = (int)v13;
LABEL_6:
      if (v13 != 16)
      {
LABEL_14:
        sub_100012A10(a1, a2);
        goto LABEL_23;
      }
      if (!v12)
      {
        UUID.init(uuid:)();
        uint64_t v19 = type metadata accessor for UUID();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v11, 0, 1, v19);
        goto LABEL_21;
      }
      if (v12 != 1)
      {
        uint64_t v20 = *(void *)(a1 + 16);
        uint64_t v21 = *(void *)(a1 + 24);
        swift_retain();
        swift_retain();
        uint64_t v22 = __DataStorage._bytes.getter();
        if (v22)
        {
          uint64_t v23 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v23)) {
            goto LABEL_31;
          }
          v22 += v20 - v23;
        }
        if (!__OFSUB__(v21, v20))
        {
          __DataStorage._length.getter();
          sub_1000EF4FC(v22, (uint64_t)v11);
          swift_release();
          swift_release();
          goto LABEL_21;
        }
        goto LABEL_29;
      }
      if ((int)a1 > a1 >> 32)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
      }
      sub_100012DE4(a1, a2);
      uint64_t v17 = __DataStorage._bytes.getter();
      if (v17)
      {
        uint64_t v18 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)a1, v18))
        {
          v17 += (int)a1 - v18;
          goto LABEL_13;
        }
        goto LABEL_30;
      }
LABEL_13:
      __DataStorage._length.getter();
      sub_1000EF4FC(v17, (uint64_t)v11);
      sub_100012A10(a1, a2);
LABEL_21:
      sub_100012A10(a1, a2);
      sub_100057AD8((uint64_t)v11, (uint64_t)v9);
      uint64_t v24 = type metadata accessor for UUID();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v9, 1, v24) != 1)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(a3, v9, v24);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(a3, 0, 1, v24);
      }
      sub_1000130EC((uint64_t)v9, &qword_10017C918);
LABEL_23:
      uint64_t v26 = type metadata accessor for UUID();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a3, 1, 1, v26);
    case 2uLL:
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 24);
      BOOL v16 = __OFSUB__(v14, v15);
      uint64_t v13 = v14 - v15;
      if (!v16) {
        goto LABEL_6;
      }
      goto LABEL_27;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v13 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1000EF4FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    UUID.init(uuid:)();
    uint64_t v3 = type metadata accessor for UUID();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
    uint64_t v5 = v3;
    uint64_t v6 = a2;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    uint64_t v5 = v8;
    uint64_t v6 = a2;
    uint64_t v7 = 1;
  }

  return v4(v6, v7, 1, v5);
}

uint64_t sub_1000EF5D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100004700(&qword_10017C918);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 == 15) {
    goto LABEL_4;
  }
  sub_1000EF120(a1, a2, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_1000130EC((uint64_t)v8, &qword_10017C918);
LABEL_4:
    uint64_t v11 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a3, 1, 1, v11);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a3, 0, 1, v9);
}

uint64_t sub_1000EF75C()
{
  uint64_t __src = UUID.uuid.getter();
  char v10 = v0;
  char v11 = v1;
  char v12 = v2;
  char v13 = v3;
  char v14 = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  return sub_1000F7E70(&__src, 16);
}

uint64_t sub_1000EF82C()
{
  sub_10002A230();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_1001997A8 = result;
  return result;
}

uint64_t *sub_1000EF898()
{
  if (qword_100195AE8 != -1) {
    swift_once();
  }
  return &qword_1001997A8;
}

uint64_t sub_1000EF8E4()
{
  sub_10002A230();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_1001997B0 = result;
  return result;
}

uint64_t *sub_1000EF94C()
{
  if (qword_100195AF0 != -1) {
    swift_once();
  }
  return &qword_1001997B0;
}

uint64_t sub_1000EF998()
{
  sub_10002A230();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_1001997B8 = result;
  return result;
}

uint64_t *sub_1000EFA00()
{
  if (qword_100195AF8 != -1) {
    swift_once();
  }
  return &qword_1001997B8;
}

uint64_t sub_1000EFA4C()
{
  sub_10002A230();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_1001997C0 = result;
  return result;
}

uint64_t *sub_1000EFAA8()
{
  if (qword_100195B08 != -1) {
    swift_once();
  }
  return &qword_1001997C0;
}

uint64_t sub_1000EFAF4()
{
  sub_10002A230();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_1001997C8 = result;
  return result;
}

uint64_t *sub_1000EFB58()
{
  if (qword_100195B18 != -1) {
    swift_once();
  }
  return &qword_1001997C8;
}

uint64_t sub_1000EFBA4()
{
  sub_10002A230();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_1001997D0 = result;
  return result;
}

uint64_t *sub_1000EFC0C()
{
  if (qword_100195B20 != -1) {
    swift_once();
  }
  return &qword_1001997D0;
}

uint64_t sub_1000EFC58()
{
  sub_10002A230();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_1001997D8 = result;
  return result;
}

uint64_t *sub_1000EFCB4()
{
  if (qword_100195B28 != -1) {
    swift_once();
  }
  return &qword_1001997D8;
}

uint64_t sub_1000EFD00(uint64_t a1)
{
  return sub_1000F0068(a1, qword_1001997E0);
}

uint64_t sub_1000EFD2C()
{
  return sub_1000F01E0(&qword_100195B30, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)qword_1001997E0);
}

uint64_t sub_1000EFD64(uint64_t a1)
{
  return sub_1000F0068(a1, qword_1001997F8);
}

uint64_t sub_1000EFD88()
{
  return sub_1000F01E0(&qword_100195B38, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)qword_1001997F8);
}

uint64_t sub_1000EFDC0(uint64_t a1)
{
  return sub_1000F0068(a1, qword_100199810);
}

uint64_t sub_1000EFDE4()
{
  return sub_1000F01E0(&qword_100195B40, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)qword_100199810);
}

uint64_t sub_1000EFE1C(uint64_t a1)
{
  return sub_1000F0068(a1, qword_100199828);
}

uint64_t sub_1000EFE40()
{
  return sub_1000F01E0(&qword_100195B48, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)qword_100199828);
}

uint64_t sub_1000EFE78(uint64_t a1)
{
  return sub_1000F0068(a1, qword_100199840);
}

uint64_t sub_1000EFE9C()
{
  return sub_1000F01E0(&qword_100195B50, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)qword_100199840);
}

uint64_t sub_1000EFED4(uint64_t a1)
{
  return sub_1000F0068(a1, qword_100199858);
}

uint64_t sub_1000EFEF8()
{
  return sub_1000F01E0(&qword_100195B58, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)qword_100199858);
}

uint64_t sub_1000EFF30(uint64_t a1)
{
  return sub_1000F0068(a1, qword_100199870);
}

uint64_t sub_1000EFF54()
{
  return sub_1000F01E0(&qword_100195B60, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)qword_100199870);
}

uint64_t sub_1000EFF8C(uint64_t a1)
{
  return sub_1000F0068(a1, qword_100199888);
}

uint64_t sub_1000EFFB0()
{
  return sub_1000F01E0(&qword_100195B68, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)qword_100199888);
}

uint64_t sub_1000EFFE8(uint64_t a1)
{
  return sub_1000F0068(a1, qword_1001998A0);
}

uint64_t sub_1000F000C()
{
  return sub_1000F01E0(&qword_100195B70, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)qword_1001998A0);
}

uint64_t sub_1000F0044(uint64_t a1)
{
  return sub_1000F0068(a1, qword_1001998B8);
}

uint64_t sub_1000F0068(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10009AF20(v3, a2);
  sub_100097870(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000F00E4()
{
  return sub_1000F01E0(&qword_100195B78, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)qword_1001998B8);
}

uint64_t sub_1000F011C()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_10009AF20(v0, qword_1001998D0);
  sub_100097870(v0, (uint64_t)qword_1001998D0);
  if (qword_100195B28 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1001997D8;
  return OSSignposter.init(logHandle:)();
}

uint64_t sub_1000F01A8()
{
  return sub_1000F01E0(&qword_100195B80, (uint64_t (*)(void))&type metadata accessor for OSSignposter, (uint64_t)qword_1001998D0);
}

uint64_t sub_1000F01E0(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);

  return sub_100097870(v5, a3);
}

uint64_t sub_1000F023C@<X0>(const char *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1000F0244(a1, a2, a3);
}

uint64_t sub_1000F0244@<X0>(const char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  CFStringRef errorString = 0;
  IOCFUnserialize(a1, kCFAllocatorDefault, 0, &errorString);
  uint64_t v5 = (__CFString *)errorString;
  if (errorString)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    static os_log_type_t.error.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100132F10;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_10002A1DC();
    *(void *)(v9 + 32) = v6;
    *(void *)(v9 + 40) = v8;
    sub_10002A230();
    char v10 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
  }
  else
  {
    sub_100004700((uint64_t *)&unk_10017FA20);
    int v12 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v12 ^ 1u, 1, a2);
  }
}

uint64_t sub_1000F0410()
{
  return Data.withUnsafeBytes<A>(_:)();
}

void *sub_1000F048C(uint64_t a1)
{
  sub_1000047DC(a1, (uint64_t)v5);
  swift_dynamicCast();
  type metadata accessor for Optional();
  id v1 = (const void *)Optional._bridgeToObjectiveC()();
  swift_unknownObjectRelease();
  char v2 = IOCFSerialize(v1, 0);
  swift_unknownObjectRelease();
  if (v2)
  {
    id v3 = v2;
    char v2 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v2;
}

uint64_t sub_1000F0560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v13[4] = a3;
  v13[1] = a5;
  v13[0] = *(void *)(a4 + 8);
  v13[2] = a2;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  char v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9);
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
    if (result > a1)
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      v13[5] = a1;
      sub_1000F7FE8();
      dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      return dispatch thunk of OptionSet.init(rawValue:)();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F07BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) + 16);
  uint64_t v6 = *(void *)(a2 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v60 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness);
  Swift::UInt v58 = (char *)&v49 - v7;
  uint64_t v8 = swift_checkMetadataState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v50 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v53 = (char *)&v49 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v52 = (char *)&v49 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v49 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v55 = a1;
  uint64_t v56 = v3;
  uint64_t v22 = v21;
  uint64_t v54 = v6;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v23 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v24 = v9 + 8;
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  os_log_type_t v61 = v20;
  uint64_t result = v25(v20, v22);
  if (v23 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v23)
    {
      uint64_t v27 = 0;
      uint64_t v49 = (void (**)(char *, char *, uint64_t))(v9 + 16);
      BOOL v62 = (char *)_swiftEmptyArrayStorage;
      uint64_t v51 = v23;
      while (1)
      {
        uint64_t v29 = v61;
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        uint64_t v30 = v22;
        uint64_t v31 = v25;
        uint64_t v32 = v24;
        uint64_t v33 = v18;
        uint64_t v34 = v53;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        uint64_t v63 = v27;
        uint64_t v64 = v27;
        sub_1000F7FE8();
        Swift::String v35 = v52;
        dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
        uint64_t v36 = v34;
        uint64_t v18 = v33;
        uint64_t v24 = v32;
        uint64_t v25 = v31;
        uint64_t v22 = v30;
        v25(v36, v30);
        dispatch thunk of static BinaryInteger.& infix(_:_:)();
        v25(v35, v30);
        v25(v29, v30);
        if (dispatch thunk of static BinaryInteger.isSigned.getter())
        {
          if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64) {
            goto LABEL_14;
          }
        }
        else
        {
          char v37 = dispatch thunk of static BinaryInteger.isSigned.getter();
          uint64_t v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if (v37)
          {
            if (v38 <= 64)
            {
              dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
              uint64_t v39 = v61;
              dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
              char v40 = dispatch thunk of static Comparable.>= infix(_:_:)();
              v25(v39, v22);
              uint64_t v41 = v50;
              (*v49)(v50, v18, v22);
              if ((v40 & 1) == 0)
              {
                v25(v41, v22);
                v25(v18, v22);
LABEL_18:
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  BOOL v62 = sub_1000F5DCC(0, *((void *)v62 + 2) + 1, 1, v62);
                }
                unint64_t v46 = *((void *)v62 + 2);
                unint64_t v45 = *((void *)v62 + 3);
                if (v46 >= v45 >> 1) {
                  BOOL v62 = sub_1000F5DCC((char *)(v45 > 1), v46 + 1, 1, v62);
                }
                char v47 = v62;
                uint64_t v28 = v63;
                *((void *)v62 + 2) = v46 + 1;
                *(void *)&v47[8 * v46 + 32] = v28;
                goto LABEL_5;
              }
              uint64_t v42 = dispatch thunk of BinaryInteger._lowWord.getter();
              v25(v41, v22);
              goto LABEL_15;
            }
          }
          else if (v38 < 64)
          {
LABEL_14:
            uint64_t v42 = dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_15:
            v25(v18, v22);
            if (v42) {
              goto LABEL_18;
            }
            goto LABEL_4;
          }
        }
        uint64_t v64 = 0;
        uint64_t v43 = v61;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
        v25(v43, v22);
        v25(v18, v22);
        if ((v44 & 1) == 0) {
          goto LABEL_18;
        }
LABEL_4:
        uint64_t v28 = v63;
LABEL_5:
        uint64_t v27 = v28 + 1;
        if (v51 == v27) {
          goto LABEL_25;
        }
      }
    }
    BOOL v62 = (char *)_swiftEmptyArrayStorage;
LABEL_25:
    uint64_t v48 = Array.description.getter();
    swift_bridgeObjectRelease();
    return v48;
  }
  return result;
}

uint64_t sub_1000F0DEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v12 = v11 + 16;
  uint64_t v13 = v14;
  if (v15)
  {
    v17[0] = v13;
    v17[1] = v12;
    v13((char *)v17 - v10, v9, a2);
    ((void (*)(char *, uint64_t, uint64_t))v17[0])(v8, a1, a2);
    return dispatch thunk of SetAlgebra.union(_:)();
  }
  else
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(a3, v9, a2);
  }
}

uint64_t sub_1000F0F54(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F0F88(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a2)
  {
    int v4 = a3;
    unint64_t v5 = HIDWORD(a3);
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_100132F30;
    *(void *)(v6 + 56) = &type metadata for Int32;
    *(void *)(v6 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v6 + 32) = v4;
    *(void *)(v6 + 96) = &type metadata for Int32;
    *(void *)(v6 + 104) = &protocol witness table for Int32;
    *(_DWORD *)(v6 + 72) = v5;
    a1 = String.init(format:_:)();
  }
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000F1040(uint64_t a1)
{
  *(void *)type = 0;
  uint64_t v2 = String.utf8CString.getter();
  macho_cpu_type_for_arch_name((const char *)(v2 + 32), &type[1], type);
  swift_release();
  return a1;
}

const char *sub_1000F10D4(cpu_type_t a1, cpu_subtype_t a2)
{
  uint64_t result = macho_arch_name_for_cpu_type(a1, a2);
  if (result) {
    return (const char *)String.init(cString:)();
  }
  return result;
}

void sub_1000F1118()
{
  qword_1001998E8 = (uint64_t)&off_100172038;
}

uint64_t sub_1000F1130(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  sub_100029B94();
  uint64_t v3 = 0;
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    if (v2 == ++v3) {
      return 0;
    }
  }
  return v3;
}

unint64_t sub_1000F11D0(char a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_1000F1254(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000F7C84(*a1, *a2);
}

BOOL sub_1000F1260(unsigned __int8 *a1)
{
  return sub_1000F126C(*a1);
}

BOOL sub_1000F126C(uint64_t a1)
{
  if (qword_100195B88 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(qword_1001998E8 + 16);
  if (!v2) {
    return 1;
  }
  sub_100029B94();
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    if (v2 == ++v3)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = qword_1001998E8;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1000F1130(a1, v5);
  char v8 = v7;
  swift_bridgeObjectRelease();
  return (v8 & 1) == 0 && v3 >= v6;
}

BOOL sub_1000F1394(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000F13A0(*a1, *a2);
}

BOOL sub_1000F13A0(uint64_t a1, uint64_t a2)
{
  if (qword_100195B88 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(qword_1001998E8 + 16);
  if (!v3) {
    return 1;
  }
  sub_100029B94();
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    if (v3 == ++v4)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = qword_1001998E8;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1000F1130(a2, v6);
  char v9 = v8;
  swift_bridgeObjectRelease();
  return (v9 & 1) == 0 && v4 >= v7;
}

BOOL sub_1000F14C8(unsigned __int8 *a1)
{
  return sub_1000F14D4(*a1);
}

BOOL sub_1000F14D4(uint64_t a1)
{
  if (qword_100195B88 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(qword_1001998E8 + 16);
  if (!v2) {
    return 0;
  }
  sub_100029B94();
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    if (v2 == ++v3)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = qword_1001998E8;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1000F1130(a1, v5);
  char v8 = v7;
  swift_bridgeObjectRelease();
  return (v8 & 1) != 0 || v3 < v6;
}

unint64_t sub_1000F15FC()
{
  return sub_1000F11D0(*v0);
}

uint64_t sub_1000F1604@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1 == 5)
  {
LABEL_6:
    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
    return v6(a2, v2, v5);
  }
  if (!sub_1000A2748(a1) && v4 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  URL.appendingPathExtension(_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F16F8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  if (URL.isFileURL.getter())
  {
    URL.path.getter();
    swift_bridgeObjectRetain();
    v8._uint64_t countAndFlagsBits = a1;
    v8._object = a2;
    Swift::Bool v9 = String.hasPrefix(_:)(v8);
    swift_bridgeObjectRelease();
    if (v9)
    {
      uint64_t v10 = String.count.getter();
      sub_1000F18A0(v10);
    }
    swift_bridgeObjectRetain();
    v11._uint64_t countAndFlagsBits = 47;
    v11._object = (void *)0xE100000000000000;
    Swift::Bool v12 = String.hasPrefix(_:)(v11);
    swift_bridgeObjectRelease();
    if (v12)
    {
      URL.hasDirectoryPath.getter();
      URL.init(fileURLWithPath:isDirectory:)();
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = type metadata accessor for URL();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(a3, v4, v16);
    }
  }
  else
  {
    uint64_t v14 = type metadata accessor for URL();
    char v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
    return v15(a3, v3, v14);
  }
}

uint64_t sub_1000F18A0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t result = String.index(_:offsetBy:limitedBy:)();
      if ((v1 & 1) == 0)
      {
        uint64_t v2 = result;
        unint64_t result = 15;
        uint64_t v1 = v2;
        return String.removeSubrange(_:)(result, v1);
      }
    }
    __break(1u);
    return String.removeSubrange(_:)(result, v1);
  }
  return result;
}

uint64_t sub_1000F1928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  Swift::String v8 = (char *)_swiftEmptyArrayStorage;
  unint64_t v46 = (char *)_swiftEmptyArrayStorage;
  if (a2)
  {
    swift_bridgeObjectRetain();
    Swift::String v8 = sub_10000C3BC(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v12 = *((void *)v8 + 2);
    unint64_t v11 = *((void *)v8 + 3);
    if (v12 >= v11 >> 1) {
      Swift::String v8 = sub_10000C3BC((char *)(v11 > 1), v12 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v12 + 1;
    uint64_t v13 = &v8[16 * v12];
    *((void *)v13 + 4) = a1;
    *((void *)v13 + 5) = a2;
    unint64_t v46 = v8;
    uint64_t v5 = v45;
  }
  uint64_t v14 = *(void *)(a3 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v43 = a4;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v8 = sub_10000C3BC(0, *((void *)v8 + 2) + 1, 1, v8);
    }
    char v15 = (uint64_t *)(a3 + 40);
    do
    {
      uint64_t v17 = *(v15 - 1);
      uint64_t v16 = *v15;
      unint64_t v18 = *((void *)v8 + 2);
      unint64_t v19 = *((void *)v8 + 3);
      swift_bridgeObjectRetain();
      if (v18 >= v19 >> 1) {
        Swift::String v8 = sub_10000C3BC((char *)(v19 > 1), v18 + 1, 1, v8);
      }
      v15 += 2;
      *((void *)v8 + 2) = v18 + 1;
      uint64_t v20 = &v8[16 * v18];
      *((void *)v20 + 4) = v17;
      *((void *)v20 + 5) = v16;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    unint64_t v46 = v8;
    uint64_t v5 = v45;
    a4 = v43;
  }
  uint64_t v21 = *(void *)(a4 + 16);
  if (v21)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v8 = sub_10000C3BC(0, *((void *)v8 + 2) + 1, 1, v8);
    }
    uint64_t v22 = (uint64_t *)(a4 + 40);
    do
    {
      uint64_t v24 = *(v22 - 1);
      uint64_t v23 = *v22;
      unint64_t v25 = *((void *)v8 + 2);
      unint64_t v26 = *((void *)v8 + 3);
      swift_bridgeObjectRetain();
      if (v25 >= v26 >> 1) {
        Swift::String v8 = sub_10000C3BC((char *)(v26 > 1), v25 + 1, 1, v8);
      }
      v22 += 2;
      *((void *)v8 + 2) = v25 + 1;
      uint64_t v27 = &v8[16 * v25];
      *((void *)v27 + 4) = v24;
      *((void *)v27 + 5) = v23;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    unint64_t v46 = v8;
    uint64_t v5 = v45;
  }
  if (!*((void *)v8 + 2) || (sub_1000F1DB0(&v46), (uint64_t v28 = *((void *)v46 + 2)) == 0))
  {
LABEL_37:
    swift_bridgeObjectRelease();
    uint64_t v38 = type metadata accessor for URL();
    uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16);
    return v39(a5, v5, v38);
  }
  uint64_t v29 = (void **)(v46 + 40);
  while (1)
  {
    uint64_t v31 = (uint64_t)*(v29 - 1);
    uint64_t v30 = *v29;
    BOOL v32 = v31 == 47 && v30 == (void *)0xE100000000000000;
    if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_25;
    }
    swift_bridgeObjectRetain();
    URL.path.getter();
    v33._uint64_t countAndFlagsBits = v31;
    v33._object = v30;
    Swift::Bool v34 = String.hasPrefix(_:)(v33);
    swift_bridgeObjectRelease();
    if (v34) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_25:
    v29 += 2;
    if (!--v28) {
      goto LABEL_37;
    }
  }
  swift_bridgeObjectRelease();
  URL.path.getter();
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_1000EE37C(v31, (unint64_t)v30);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if (v37)
    {
      if (v35 == 47 && v37 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
      char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v41)
      {
LABEL_41:
        swift_bridgeObjectRetain();
        sub_1000F7B54(1);
        swift_bridgeObjectRelease();
        static String._fromSubstring(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
  }
  uint64_t v42 = String.count.getter();
  swift_bridgeObjectRelease();
  sub_1000F18A0(v42);
  URL.init(fileURLWithPath:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F1DB0(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000F6888((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_1000F689C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1000F1E20()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v0 = OSKextParseVersionString();
  swift_release();
  return v0 & ~(v0 >> 63);
}

uint64_t sub_1000F1E70(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v2 = OSKextParseVersionString();
  swift_release();
  if (v2 <= 0) {
    return 0;
  }
  return v2;
}

void *sub_1000F1ED4()
{
  return &unk_10013DC94;
}

void *sub_1000F1EE0()
{
  return &unk_10013DC98;
}

uint64_t sub_1000F1EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - v12;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a4);
  if (*(void *)(v14 + 16) && (unint64_t v15 = sub_1000AD438(a1), (v16 & 1) != 0)) {
    sub_1000047DC(*(void *)(v14 + 56) + 32 * v15, (uint64_t)v24);
  }
  else {
    memset(v24, 0, sizeof(v24));
  }
  swift_bridgeObjectRelease();
  sub_100004700(&qword_10017C018);
  char v17 = swift_dynamicCast();
  unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);
  if (v17)
  {
    uint64_t v19 = *(void *)(a3 - 8);
    v18(v13, 0, 1, a3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a5, v13, a3);
  }
  else
  {
    v18(v13, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *(void *)&v24[0] = 0;
    *((void *)&v24[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    *(void *)&v24[0] = 0xD000000000000016;
    *((void *)&v24[0] + 1) = 0x800000010014E5D0;
    v23[1] = a1;
    swift_getMetatypeMetadata();
    v21._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x800000010014E5F0;
    v22._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v22);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F219C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1000F803C(a1, a2, a3, a4, a5);
  char v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8);

  return v7(a1, a4);
}

void (*sub_1000F2208(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x40uLL);
  *a1 = v11;
  v11[3] = a5;
  v11[4] = v5;
  v11[1] = a3;
  v11[2] = a4;
  void *v11 = a2;
  uint64_t v12 = *(void *)(a4 - 8);
  v11[5] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v11[6] = malloc(v13);
  uint64_t v14 = malloc(v13);
  v11[7] = v14;
  sub_1000F1EEC(a2, a3, a4, a5, (uint64_t)v14);
  return sub_1000F2300;
}

void sub_1000F2300(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  uint64_t v5 = (*a1)[5];
  uint64_t v6 = (*a1)[2];
  uint64_t v7 = (*a1)[3];
  uint64_t v9 = **a1;
  uint64_t v8 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))((*a1)[6], v4, v6);
    sub_1000F803C((uint64_t)v3, v9, v8, v6, v7);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v5 + 8);
    v10(v3, v6);
    v10(v4, v6);
  }
  else
  {
    sub_1000F803C((*a1)[7], v9, v8, v6, v7);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v6);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t sub_1000F2410(uint64_t a1)
{
  uint64_t v2 = sub_1000A12A0();
  if (!*(void *)(a1 + 16))
  {
    long long v11 = 0u;
    long long v12 = 0u;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1000048E0(v4, v3);
  if ((v6 & 1) == 0)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1000047DC(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_11:
    sub_1000130EC((uint64_t)&v11, &qword_10017C018);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v7 = v9;
  if (v9 == 1415071051 && v10 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v9 == 1415071044 && v10 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v7;
}

uint64_t sub_1000F25A4(uint64_t a1, void *a2)
{
  uint64_t result = 1954047332;
  if (!a2) {
    return 1954047339;
  }
  if (a2 != (void *)1)
  {
    if (a2 == (void *)2)
    {
      strcpy((char *)v11, "(missing ");
      WORD1(v11[1]) = 0;
      HIDWORD(v11[1]) = -385875968;
      unint64_t v5 = sub_1000A12A0();
      uint64_t v6 = *v5;
      uint64_t v7 = (void *)v5[1];
      swift_bridgeObjectRetain();
      v8._uint64_t countAndFlagsBits = v6;
      v8._object = v7;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)v11, "Unsupported (");
      HIWORD(v11[1]) = -4864;
      v9._uint64_t countAndFlagsBits = a1;
      v9._object = a2;
      String.append(_:)(v9);
    }
    v10._uint64_t countAndFlagsBits = 41;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    return v11[0];
  }
  return result;
}

uint64_t sub_1000F26AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      return !a4;
    case 1:
      return a4 == 1;
    case 2:
      return a4 == 2;
  }
  if (a4 < 3) {
    return 0;
  }
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_1000F271C(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  switch(v3)
  {
    case 0:
      return !v4;
    case 1:
      return v4 == 1;
    case 2:
      return v4 == 2;
  }
  if (v4 < 3) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000F2794()
{
  return sub_1000F25A4(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t sub_1000F279C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Array();
  Dictionary.subscript.getter();
  uint64_t v8 = v11;
  uint64_t result = swift_bridgeObjectRelease();
  if (!v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
    uint64_t v11 = static Array._allocateUninitialized(_:)();
    type metadata accessor for Dictionary();
    return Dictionary.subscript.setter();
  }
  return result;
}

uint64_t sub_1000F28F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  long long v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Set();
  Dictionary.subscript.getter();
  size_t v13 = v18;
  uint64_t result = swift_bridgeObjectRelease();
  if (!v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
    uint64_t v15 = static Array._allocateUninitialized(_:)();
    if (Array._getCount()()) {
      char v16 = (void *)sub_1000F824C(v15, a4, a6);
    }
    else {
      char v16 = &_swiftEmptySetSingleton;
    }
    swift_bridgeObjectRelease();
    unint64_t v18 = v16;
    type metadata accessor for Dictionary();
    return Dictionary.subscript.setter();
  }
  return result;
}

uint64_t sub_1000F2A84(unint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  sub_1000036B0(a2, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(v5, v6);
  uint64_t v9 = v8;
  if (v8 && a1 != 5)
  {
    sub_10003CC54(a1);
    uint64_t v10 = sub_1000A264C(a1);
    long long v12 = v11;
    swift_bridgeObjectRetain();
    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v14 = a3[3];
    uint64_t v15 = a3[4];
    sub_1000036B0(a3, v14);
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v15 + 136))(v7, v9, 0, v14, v15);
    sub_10003E8B0(a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1000F2BC4(void *a1, void *a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_1000036B0(a1, v3);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = sub_1000A243C();
    uint64_t v8 = *v7;
    uint64_t v9 = *(void *)(*v7 + 16);
    if (v9)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = 0;
      uint64_t v11 = v9 - 1;
      do
      {
        unint64_t v12 = *(void *)(v8 + 8 * v10 + 32);
        sub_10003CC54(v12);
        uint64_t v13 = sub_1000A264C(v12);
        uint64_t v15 = v14;
        swift_bridgeObjectRetain();
        v16._uint64_t countAndFlagsBits = v13;
        v16._object = v15;
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        uint64_t v17 = a2[3];
        uint64_t v18 = a2[4];
        sub_1000036B0(a2, v17);
        LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v18 + 136))(v21, v6, 0, v17, v18);
        sub_10003E8C0(v12);
        swift_bridgeObjectRelease();
        if (v9) {
          break;
        }
      }
      while (v11 != v10++);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  return v9 & 1;
}

void *sub_1000F2D3C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v34 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_1000036B0(a1, v12);
  sub_1000B07CC(v12, v13);
  uint64_t v15 = v40;
  uint64_t v14 = v41;
  sub_1000036B0(v39, v40);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v14 + 24))(&v37, a2, v15, v14);
  if (!v38)
  {
    sub_1000130EC((uint64_t)&v37, &qword_10017BC78);
    sub_10000478C((uint64_t)v39);
    return _swiftEmptyArrayStorage;
  }
  sub_10000372C(&v37, (uint64_t)v42);
  sub_10000478C((uint64_t)v39);
  sub_100004700(&qword_10017FA70);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100132F10;
  sub_10000469C((uint64_t)v42, v16 + 32);
  *(void *)&long long v37 = v16;
  char v36 = 0;
  BOOL v17 = a3 < 1;
  uint64_t v18 = a3 - 1;
  if (v17)
  {
LABEL_12:
    Swift::String v22 = (void *)v37;
    sub_10000478C((uint64_t)v42);
    return v22;
  }
  uint64_t v19 = v43;
  uint64_t v20 = v44;
  sub_1000036B0(v42, v43);
  (*(void (**)(uint64_t, uint64_t))(v20 + 80))(v19, v20);
  uint64_t v21 = v34;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v8, 1, v9) == 1)
  {
    sub_1000130EC((uint64_t)v8, (uint64_t *)&unk_10017FA60);
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v11, v8, v9);
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_1000036B0(a1, v23);
  sub_1001297F4(v23, v24);
  uint64_t v25 = v41;
  unint64_t v26 = sub_1000036B0(v39, v40);
  uint64_t v27 = URL.path.getter();
  Swift::String v22 = v26;
  LOBYTE(v23) = (*(uint64_t (**)(uint64_t))(v25 + 136))(v27);
  swift_bridgeObjectRelease();
  if ((v23 & 1) == 0)
  {
    sub_10000478C((uint64_t)v39);
    goto LABEL_11;
  }
  char v28 = v36;
  sub_10000478C((uint64_t)v39);
  if ((v28 & 1) == 0)
  {
LABEL_11:
    (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v9);
    goto LABEL_12;
  }
  uint64_t v29 = v35;
  uint64_t v30 = (void *)sub_1000F3138(a1, v11, v18, 1);
  uint64_t v31 = (void (**)(char *, uint64_t))(v34 + 8);
  if (!v29)
  {
    sub_1000F3700(v30);
    (*v31)(v11, v9);
    goto LABEL_12;
  }
  (*v31)(v11, v9);
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)v42);
  return v22;
}

uint64_t sub_1000F3138(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v67) = a4;
  uint64_t v8 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v8 - 8);
  os_log_type_t v61 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v59 = *(void *)(v10 - 8);
  uint64_t v60 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  BOOL v62 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v63 = (char *)v49 - v13;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_1000036B0(a1, v14);
  sub_1001297F4(v14, v15);
  uint64_t v16 = v66;
  sub_1000036B0(v64, v65);
  uint64_t v17 = URL.path.getter();
  LOBYTE(v14) = (*(uint64_t (**)(uint64_t))(v16 + 136))(v17);
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)v64);
  uint64_t v18 = _swiftEmptyArrayStorage;
  if ((v14 & 1) == 0) {
    return (uint64_t)v18;
  }
  uint64_t v20 = a1[3];
  uint64_t v19 = a1[4];
  sub_1000036B0(a1, v20);
  if (v67)
  {
    sub_1001297F4(v20, v19);
    uint64_t v21 = v65;
    uint64_t v22 = v66;
    sub_1000036B0(v64, v65);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(v22 + 24))(a2, _swiftEmptyArrayStorage, 1, v21, v22);
  }
  else
  {
    sub_1001297F4(v20, v19);
    uint64_t v24 = v65;
    uint64_t v25 = v66;
    sub_1000036B0(v64, v65);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, void *, void, uint64_t, uint64_t))(v25 + 32))(a2, _swiftEmptyArrayStorage, 0, v24, v25);
  }
  uint64_t v26 = v23;
  uint64_t result = sub_10000478C((uint64_t)v64);
  if (v4) {
    return (uint64_t)v18;
  }
  uint64_t v28 = (uint64_t)v61;
  uint64_t v29 = v59;
  v64[0] = _swiftEmptyArrayStorage;
  uint64_t v58 = *(void *)(v26 + 16);
  uint64_t v52 = a3;
  uint64_t v53 = 0;
  uint64_t v51 = a1;
  if (!v58)
  {
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56);
    uint64_t v31 = v60;
LABEL_26:
    v34(v28, 1, 1, v31);
LABEL_27:
    uint64_t v45 = v52;
    unint64_t v46 = v51;
    swift_bridgeObjectRelease();
    uint64_t v47 = sub_1000130EC(v28, (uint64_t *)&unk_10017FA60);
    uint64_t v48 = v64[0];
    __chkstk_darwin(v47);
    v49[-2] = v46;
    v49[-1] = v45;
    uint64_t v18 = sub_1000F3844((void (*)(uint64_t *__return_ptr, char *))sub_1000F8608, (uint64_t)&v49[-4], v48);
    swift_release();
    return (uint64_t)v18;
  }
  unint64_t v30 = 0;
  uint64_t v54 = v26;
  uint64_t v55 = v59 + 48;
  os_log_t v67 = (void (**)(char *, uint64_t, uint64_t))(v59 + 32);
  uint64_t v56 = v59 + 56;
  uint64_t v57 = v59 + 16;
  v49[1] = (v59 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  uint64_t v50 = (uint64_t (**)(char *, uint64_t))(v59 + 8);
  uint64_t v31 = v60;
  while (v30 < *(void *)(v26 + 16))
  {
    unint64_t v32 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    uint64_t v33 = *(void *)(v29 + 72);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v29 + 16))(v28, v26 + v32 + v33 * v30, v31);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56);
    v34(v28, 0, 1, v31);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v28, 1, v31) == 1) {
      goto LABEL_27;
    }
    uint64_t v35 = *v67;
    (*v67)(v63, v28, v31);
    uint64_t v36 = URL.pathExtension.getter();
    uint64_t v38 = v37;
    uint64_t v39 = sub_100115070();
    if (v36 == *(void *)v39 && v38 == *((void *)v39 + 1)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (uint64_t v40 = sub_100115C94(), v36 == *(void *)v40) && v38 == *((void *)v40 + 1))
    {
      swift_bridgeObjectRelease();
LABEL_16:
      v35(v62, (uint64_t)v63, v31);
      uint64_t v41 = v64[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100044920(0, *(void *)(v41 + 16) + 1, 1);
        uint64_t v41 = v64[0];
      }
      unint64_t v43 = *(void *)(v41 + 16);
      unint64_t v42 = *(void *)(v41 + 24);
      uint64_t v26 = v54;
      if (v43 >= v42 >> 1)
      {
        sub_100044920(v42 > 1, v43 + 1, 1);
        uint64_t v26 = v54;
        uint64_t v41 = v64[0];
      }
      *(void *)(v41 + 16) = v43 + 1;
      uint64_t v31 = v60;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v35)(v41 + v32 + v43 * v33, v62, v60);
      v64[0] = v41;
      uint64_t v29 = v59;
      goto LABEL_21;
    }
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v44) {
      goto LABEL_16;
    }
    uint64_t result = (*v50)(v63, v31);
    uint64_t v26 = v54;
LABEL_21:
    ++v30;
    uint64_t v28 = (uint64_t)v61;
    if (v58 == v30) {
      goto LABEL_26;
    }
  }
  __break(1u);
  return result;
}

void *sub_1000F3700(void *result)
{
  uint64_t v2 = result[2];
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = sub_1000F5EC8(result, v10, 1, v3);
  uint64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_100004700(&qword_10017FB48);
  uint64_t result = (void *)swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = v3[2];
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    v3[2] = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void *sub_1000F3800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[2] = a1;
  v4[3] = a3;
  return sub_1000F3844((void (*)(uint64_t *__return_ptr, char *))sub_1000F8608, (uint64_t)v4, a2);
}

void *sub_1000F3844(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  void (*v42)(uint64_t *__return_ptr, char *);
  uint64_t v43;
  void *v44;
  uint64_t v45;

  uint64_t v4 = v3;
  uint64_t v41 = a2;
  unint64_t v42 = a1;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a3 + 16);
  if (v13)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v14 = v7 + 16;
    uint64_t v40 = v15;
    uint64_t v16 = a3 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v34 = *(void *)(v14 + 56);
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v37 = (void (**)(char *, uint64_t))(v14 - 8);
    uint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
    v32[1] = a3;
    swift_bridgeObjectRetain();
    char v44 = _swiftEmptyArrayStorage;
    uint64_t v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 40);
    v32[0] = (v14 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v35 = v12;
    while (1)
    {
      unint64_t v43 = v13;
      v40(v12, v16, v6);
      uint64_t v17 = *v39;
      (*v39)(v12, 0, 1, v6);
      if ((*v38)(v12, 1, v6) == 1) {
        break;
      }
      (*v36)(v9, v12, v6);
      v42(&v45, v9);
      if (v4)
      {
        (*v37)(v9, v6);
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      uint64_t v33 = v17;
      uint64_t v18 = v9;
      uint64_t v19 = v6;
      (*v37)(v9, v6);
      uint64_t v20 = v45;
      uint64_t v21 = *(void *)(v45 + 16);
      uint64_t result = v44;
      int64_t v23 = v44[2];
      int64_t v24 = v23 + v21;
      if (__OFADD__(v23, v21))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }
      uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
      uint64_t v25 = v44;
      if (!result || v24 > v44[3] >> 1)
      {
        if (v23 <= v24) {
          int64_t v26 = v23 + v21;
        }
        else {
          int64_t v26 = v23;
        }
        uint64_t result = sub_1000F5EC8(result, v26, 1, v44);
        uint64_t v25 = result;
      }
      uint64_t v27 = *(void *)(v20 + 16);
      char v44 = v25;
      if (v27)
      {
        if ((v25[3] >> 1) - v25[2] < v21) {
          goto LABEL_26;
        }
        sub_100004700(&qword_10017FB48);
        uint64_t result = (void *)swift_arrayInitWithCopy();
        if (v21)
        {
          uint64_t v28 = v44[2];
          BOOL v29 = __OFADD__(v28, v21);
          uint64_t v30 = v28 + v21;
          if (v29) {
            goto LABEL_27;
          }
          v44[2] = v30;
        }
      }
      else if (v21)
      {
        goto LABEL_25;
      }
      swift_bridgeObjectRelease();
      v16 += v34;
      uint64_t v13 = v43 - 1;
      uint64_t v4 = 0;
      uint64_t v6 = v19;
      uint64_t v12 = v35;
      uint64_t v9 = v18;
      if (v43 == 1)
      {
        v33(v35, 1, 1, v19);
        break;
      }
    }
  }
  else
  {
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    char v44 = _swiftEmptyArrayStorage;
    v31(v12, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  return v44;
}

uint64_t sub_1000F3C14(void *a1, uint64_t a2)
{
  sub_1000F3CD8((uint64_t)&type metadata for Int8, *(void *)(*(void *)(*(void *)(*a1 + class metadata base offset for PartialKeyPath) - 8) + 64), (uint64_t)sub_1000F8654, (uint64_t)a1, a2, *(void *)(*a1 + class metadata base offset for PartialKeyPath), (uint64_t)&type metadata for Int8, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for Never, v3);
  return v4;
}

uint64_t sub_1000F3CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13 = *(void *)(a8 - 8);
  uint64_t v14 = __chkstk_darwin(a5);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v17(v14, v16);
  if (v11) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a11, v16, a8);
  }
  return result;
}

uint64_t sub_1000F3DA8(uint64_t a1)
{
  sub_1000047DC(a1, (uint64_t)v14);
  if (!swift_dynamicCast())
  {
    if (swift_dynamicCast())
    {
      uint64_t v13 = v11;
      sub_1000F7FE8();
      uint64_t v3 = BinaryInteger.description.getter();
LABEL_7:
      uint64_t v2 = v3;
      goto LABEL_15;
    }
    if (!swift_dynamicCast())
    {
      sub_100004700(&qword_10017FA78);
      if (swift_dynamicCast())
      {
        uint64_t v11 = 91;
        unint64_t v12 = 0xE100000000000000;
        sub_1000F407C(v13);
        swift_bridgeObjectRelease();
        sub_100004700((uint64_t *)&unk_10017E5D0);
        sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
        uint64_t v4 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v6 = v5;
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_100004700((uint64_t *)&unk_10017FA80);
        if (!swift_dynamicCast())
        {
          sub_1000047DC(a1, (uint64_t)&v11);
          uint64_t v3 = String.init<A>(describing:)();
          goto LABEL_7;
        }
        sub_1000F4158(v13);
        swift_bridgeObjectRelease();
        sub_100004700((uint64_t *)&unk_10017E5D0);
        sub_10001348C((unint64_t *)&qword_10017FA90, (uint64_t *)&unk_10017E5D0);
        uint64_t v4 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v6 = v7;
        swift_bridgeObjectRelease();
        uint64_t v11 = 91;
        unint64_t v12 = 0xE100000000000000;
      }
      v8._uint64_t countAndFlagsBits = v4;
      v8._object = v6;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 93;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
    }
    uint64_t v2 = v11;
    goto LABEL_15;
  }
  if ((_BYTE)v11) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
LABEL_15:
  sub_10000478C((uint64_t)v14);
  return v2;
}

void *sub_1000F407C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000C884(0, v1, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      uint64_t v4 = sub_1000F3DA8(v3);
      uint64_t v6 = v5;
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_10000C884(v7 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      Swift::String v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      void v9[5] = v6;
      v3 += 32;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000F4158(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (!v1) {
    return (uint64_t)v2;
  }
  uint64_t v3 = a1;
  uint64_t v37 = _swiftEmptyArrayStorage;
  sub_10000C884(0, v1, 0);
  uint64_t result = sub_100010EA4(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  uint64_t v28 = v3 + 64;
  uint64_t v25 = v3 + 80;
  int64_t v26 = v1;
  uint64_t v29 = v3;
  int v27 = v5;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v3 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_26;
    }
    uint64_t v12 = *(void *)(v3 + 56);
    uint64_t v13 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    sub_1000047DC(v12 + 32 * v6, (uint64_t)v36);
    v35[0] = v15;
    v35[1] = v14;
    *(void *)&long long v33 = v15;
    *((void *)&v33 + 1) = v14;
    sub_1000047DC((uint64_t)v36, (uint64_t)v34);
    long long v31 = v33;
    v32[0] = v34[0];
    v32[1] = v34[1];
    swift_bridgeObjectRetain_n();
    sub_1000130EC((uint64_t)v35, &qword_10017BC60);
    long long v30 = v31;
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = 8250;
    v16._object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = sub_1000F3DA8(v32);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    sub_1000130EC((uint64_t)&v31, &qword_10017BC60);
    uint64_t v2 = v37;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10000C884(0, v2[2] + 1, 1);
      uint64_t v2 = v37;
    }
    unint64_t v19 = v2[2];
    unint64_t v18 = v2[3];
    if (v19 >= v18 >> 1)
    {
      uint64_t result = sub_10000C884(v18 > 1, v19 + 1, 1);
      uint64_t v2 = v37;
    }
    v2[2] = v19 + 1;
    *(_OWORD *)&v2[2 * v19 + 4] = v30;
    uint64_t v3 = v29;
    int64_t v9 = 1 << *(unsigned char *)(v29 + 32);
    if (v6 >= v9) {
      goto LABEL_27;
    }
    uint64_t v8 = v28;
    uint64_t v20 = *(void *)(v28 + 8 * v11);
    if ((v20 & (1 << v6)) == 0) {
      goto LABEL_28;
    }
    int v5 = v27;
    if (*(_DWORD *)(v29 + 36) != v27) {
      goto LABEL_29;
    }
    unint64_t v21 = v20 & (-2 << (v6 & 0x3F));
    if (v21)
    {
      int64_t v9 = __clz(__rbit64(v21)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v26;
    }
    else
    {
      unint64_t v22 = v11 + 1;
      unint64_t v23 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v26;
      if (v11 + 1 < v23)
      {
        unint64_t v24 = *(void *)(v28 + 8 * v22);
        if (v24)
        {
LABEL_22:
          int64_t v9 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v11)
          {
            unint64_t v24 = *(void *)(v25 + 8 * v11++);
            if (v24)
            {
              unint64_t v22 = v11 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v7;
    uint64_t v6 = v9;
    if (v7 == v10) {
      return (uint64_t)v2;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000F4440@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 120);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_1000F44E4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 120);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*sub_1000F4590())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000F45F8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 80);
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  long long v31 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v28 - v10;
  uint64_t v13 = v12[3];
  uint64_t v14 = v12[4];
  sub_1000036B0(v12, v13);
  sub_1001297F4(v13, v14);
  uint64_t v15 = v35;
  uint64_t v16 = v36;
  sub_1000036B0(&v33, v35);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void *, void, uint64_t, uint64_t))(v16 + 16))(a1, a2, 0, v15, v16);
  unint64_t v19 = v18;
  sub_10000478C((uint64_t)&v33);
  if (v19 >> 60 == 15)
  {
    unint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    unint64_t v33 = 0xD000000000000015;
    unint64_t v34 = 0x800000010014E610;
    v20._uint64_t countAndFlagsBits = a1;
    v20._object = a2;
    String.append(_:)(v20);
    uint64_t v21 = v33;
    unint64_t v22 = v34;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v23 = v21;
    *(void *)(v23 + 8) = v22;
    *(_OWORD *)(v23 + 16) = 0u;
    *(_OWORD *)(v23 + 32) = 0u;
    *(_OWORD *)(v23 + 48) = 0u;
    *(void *)(v23 + 64) = 0;
    *(unsigned char *)(v23 + 72) = 10;
    swift_willThrow();
  }
  else
  {
    uint64_t v28 = a1;
    uint64_t v29 = a2;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    uint64_t v21 = PropertyListDecoder.init()();
    unint64_t v24 = v32;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    if (v24)
    {
      swift_release();
      sub_10002404C(v17, v19);
    }
    else
    {
      uint64_t v25 = v30;
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v31, v11, v7);
      sub_10000469C(a3, (uint64_t)&v33);
      unint64_t v32 = *(uint64_t (**)(void, void, void, void))(v37 + 160);
      int64_t v26 = v29;
      swift_bridgeObjectRetain();
      uint64_t v21 = v32(v28, v26, v31, &v33);
      swift_release();
      sub_10002404C(v17, v19);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v7);
    }
  }
  return v21;
}

char *sub_1000F4900(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v8 = (char *)swift_allocObject();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(*(void *)v8 + 80) - 8) + 32))(&v8[*(void *)(*(void *)v8 + 120)], a3);
  *((void *)v8 + 2) = a1;
  *((void *)v8 + 3) = a2;
  sub_10000372C(a4, (uint64_t)(v8 + 32));
  return v8;
}

uint64_t sub_1000F49C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v49 = *v1;
  unint64_t v51 = *(void *)(v49 + 80);
  uint64_t v47 = *(void *)(v51 - 8);
  __chkstk_darwin(a1);
  uint64_t v50 = (uint64_t)&v41 - v3;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - v9;
  unint64_t v11 = (void *)v2[3];
  uint64_t v46 = v2[2];
  uint64_t v48 = v11;
  URL.init(fileURLWithPath:)();
  URL.deletingLastPathComponent()();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v12 = v5 + 8;
  uint64_t v13 = v14;
  v14(v8, v4);
  uint64_t v15 = v2[7];
  uint64_t v16 = v2[8];
  sub_1000036B0(v2 + 4, v15);
  sub_1001297F4(v15, v16);
  uint64_t v18 = v54;
  uint64_t v17 = v55;
  sub_1000036B0(&v52, v54);
  uint64_t v19 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 64))(v10, v18, v17);
  if (v19)
  {
    v13(v10, v4);
    return sub_10000478C((uint64_t)&v52);
  }
  else
  {
    unint64_t v42 = v2 + 4;
    unint64_t v43 = v10;
    uint64_t v21 = v48;
    char v44 = v13;
    uint64_t v45 = v12;
    uint64_t v56 = v4;
    sub_10000478C((uint64_t)&v52);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v22 = PropertyListEncoder.init()();
    uint64_t v23 = dispatch thunk of PropertyListEncoder.outputFormat.setter();
    uint64_t v24 = v50;
    (*(void (**)(uint64_t))(*v2 + 128))(v23);
    unint64_t v25 = v51;
    uint64_t v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v28 = v27;
    uint64_t v49 = v22;
    (*(void (**)(uint64_t, unint64_t))(v47 + 8))(v24, v25);
    uint64_t v29 = v2[7];
    uint64_t v30 = v2[8];
    sub_1000036B0(v42, v29);
    sub_1001297F4(v29, v30);
    uint64_t v31 = v54;
    uint64_t v32 = v55;
    sub_1000036B0(&v52, v54);
    unint64_t v33 = *(uint64_t (**)(uint64_t, void *, uint64_t, unint64_t, void, uint64_t, uint64_t))(v32 + 40);
    sub_100012DE4(v26, v28);
    LOBYTE(v31) = v33(v46, v21, v26, v28, 0, v31, v32);
    uint64_t v50 = v26;
    unint64_t v51 = v28;
    sub_100012A10(v26, v28);
    sub_10000478C((uint64_t)&v52);
    uint64_t v34 = v56;
    uint64_t v35 = (uint64_t (*)(char *, uint64_t))v44;
    uint64_t v36 = v43;
    if (v31)
    {
      v44(v43, v56);
      sub_100012A10(v50, v51);
      return swift_release();
    }
    else
    {
      unint64_t v52 = 0;
      unint64_t v53 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      unint64_t v52 = 0xD00000000000001FLL;
      unint64_t v53 = 0x800000010014E630;
      swift_bridgeObjectRetain();
      v37._uint64_t countAndFlagsBits = v46;
      v37._object = v21;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      unint64_t v38 = v52;
      unint64_t v39 = v53;
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v40 = v38;
      *(void *)(v40 + 8) = v39;
      *(_OWORD *)(v40 + 16) = 0u;
      *(_OWORD *)(v40 + 32) = 0u;
      *(_OWORD *)(v40 + 48) = 0u;
      *(void *)(v40 + 64) = 0;
      *(unsigned char *)(v40 + 72) = 20;
      swift_willThrow();
      swift_release();
      sub_100012A10(v50, v51);
      return v35(v36, v34);
    }
  }
}

uint64_t sub_1000F4EA4()
{
  int64_t v1 = v0;
  uint64_t v2 = v0 + 4;
  uint64_t v3 = v0[7];
  uint64_t v4 = v1[8];
  sub_1000036B0(v2, v3);
  sub_1001297F4(v3, v4);
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  sub_1000036B0(v14, v15);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v6 + 136))(v7, v8, 0, v5, v6);
  uint64_t result = sub_10000478C((uint64_t)v14);
  if (v3)
  {
    uint64_t v10 = v1[7];
    uint64_t v11 = v1[8];
    sub_1000036B0(v2, v10);
    sub_1001297F4(v10, v11);
    uint64_t v12 = v15;
    uint64_t v13 = v16;
    sub_1000036B0(v14, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 96))(v7, v8, v12, v13);
    return sub_10000478C((uint64_t)v14);
  }
  return result;
}

uint64_t *sub_1000F4FDC()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease();
  sub_10000478C((uint64_t)(v0 + 4));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 120));
  return v0;
}

uint64_t sub_1000F5064()
{
  sub_1000F4FDC();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000F50BC()
{
  xpc_object_t v0 = xpc_array_create(0, 0);
  xpc_type_t type = xpc_get_type(v0);
  uint64_t result = swift_unknownObjectRelease();
  qword_1001998F0 = (uint64_t)type;
  return result;
}

uint64_t sub_1000F5100()
{
  xpc_object_t v0 = xpc_BOOL_create(0);
  xpc_type_t type = xpc_get_type(v0);
  uint64_t result = swift_unknownObjectRelease();
  qword_1001998F8 = (uint64_t)type;
  return result;
}

uint64_t sub_1000F5140()
{
  xpc_object_t v0 = xpc_dictionary_create(0, 0, 0);
  xpc_type_t type = xpc_get_type(v0);
  uint64_t result = swift_unknownObjectRelease();
  qword_100199900 = (uint64_t)type;
  return result;
}

uint64_t sub_1000F5188()
{
  xpc_object_t v0 = xpc_string_create("");
  xpc_type_t type = xpc_get_type(v0);
  uint64_t result = swift_unknownObjectRelease();
  qword_100199908 = (uint64_t)type;
  return result;
}

BOOL sub_1000F51CC(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  return sub_1000F7598(a1, v1, ObjectType, &qword_100195BA0, (xpc_type_t *)&qword_100199900);
}

BOOL sub_1000F5224(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for XPCUtil();
  return sub_1000F7598(v1, v3, a1, &qword_100195BA0, (xpc_type_t *)&qword_100199900);
}

xpc_object_t sub_1000F527C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for XPCUtil();
  if (!sub_1000F7598(v3, v5, a3, &qword_100195BA0, (xpc_type_t *)&qword_100199900)) {
    return 0;
  }
  uint64_t v6 = String.utf8CString.getter();
  xpc_object_t v7 = xpc_dictionary_get_value(v3, (const char *)(v6 + 32));
  swift_release();
  return v7;
}

const char *sub_1000F5320()
{
  uint64_t result = xpc_dictionary_get_string(v0, _xpc_error_key_description);
  if (result) {
    return (const char *)String.init(cString:)();
  }
  return result;
}

const char *sub_1000F535C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for XPCUtil();
  if (!sub_1000F7598(v1, v3, a1, &qword_100195BA8, (xpc_type_t *)&qword_100199908)) {
    return 0;
  }
  uint64_t result = xpc_string_get_string_ptr(v1);
  if (result) {
    return (const char *)String.init(cString:)();
  }
  return result;
}

uint64_t sub_1000F53D0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for XPCUtil();
  if (!sub_1000F7598(v1, v3, a1, &qword_100195B90, (xpc_type_t *)&qword_1001998F0)) {
    return 0;
  }
  char v13 = 1;
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &v13;
  *(void *)(v4 + 24) = &v12;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1000F86D4;
  *(void *)(v5 + 24) = v4;
  v11[4] = sub_1000F87BC;
  v11[5] = v5;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  void v11[2] = sub_1000F55A4;
  v11[3] = &unk_1001720B0;
  uint64_t v6 = _Block_copy(v11);
  swift_retain();
  swift_release();
  xpc_array_apply(v1, v6);
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v9 = v12;
    if (v13 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = v9;
    }
    else
    {
      uint64_t v10 = 0;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F55A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

BOOL sub_1000F55FC(void *a1)
{
  return sub_1000F562C(a1, (uint64_t (*)(void))sub_1000A2324);
}

BOOL sub_1000F5614(void *a1)
{
  return sub_1000F562C(a1, (uint64_t (*)(void))sub_1000A2330);
}

BOOL sub_1000F562C(void *a1, uint64_t (*a2)(void))
{
  uint64_t v4 = type metadata accessor for XPCUtil();
  uint64_t ObjectType = swift_getObjectType();
  if (!sub_1000F7598(a1, v4, ObjectType, &qword_100195BA0, (xpc_type_t *)&qword_100199900)) {
    goto LABEL_19;
  }
  char v6 = (uint64_t *)sub_1000A233C();
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  swift_bridgeObjectRetain();
  xpc_object_t v9 = sub_1000F527C(v7, v8, ObjectType);
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v10 = swift_getObjectType();
  uint64_t v11 = sub_1000F535C(v10);
  if (!v12) {
    goto LABEL_18;
  }
  char v13 = v11;
  uint64_t v14 = v12;
  uint64_t v15 = (const char **)a2();
  if (v13 == *v15 && v14 == v15[1])
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_18:
    swift_unknownObjectRelease();
LABEL_19:
    swift_unknownObjectRelease();
    return 0;
  }
LABEL_8:
  uint64_t v17 = (uint64_t *)sub_1000A2348();
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  swift_bridgeObjectRetain();
  xpc_object_t v20 = sub_1000F527C(v18, v19, ObjectType);
  swift_bridgeObjectRelease();
  if (!v20) {
    goto LABEL_18;
  }
  uint64_t v21 = swift_getObjectType();
  if (!sub_1000F7598(v20, v4, v21, &qword_100195BA0, (xpc_type_t *)&qword_100199900)) {
    goto LABEL_17;
  }
  uint64_t v22 = (uint64_t *)sub_1000A2354();
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  swift_bridgeObjectRetain();
  xpc_object_t v25 = sub_1000F527C(v23, v24, v21);
  swift_bridgeObjectRelease();
  if (!v25) {
    goto LABEL_17;
  }
  uint64_t v26 = swift_getObjectType();
  if (!sub_1000F7598(v25, v4, v26, &qword_100195B98, (xpc_type_t *)&qword_1001998F8))
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  BOOL value = xpc_BOOL_get_value(v25);
  unint64_t v28 = (uint64_t *)sub_1000A2360();
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  swift_bridgeObjectRetain();
  xpc_object_t v31 = sub_1000F527C(v29, v30, v21);
  swift_bridgeObjectRelease();
  if (!v31)
  {
    swift_unknownObjectRelease();
LABEL_17:
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  uint64_t v32 = swift_getObjectType();
  if (!sub_1000F7598(v31, v4, v32, &qword_100195B90, (xpc_type_t *)&qword_1001998F0))
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_17;
  }
  uint64_t v33 = sub_1000F53D0(v32);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v33 && value;
}

uint64_t sub_1000F5960()
{
  return kIOMainPortDefault;
}

uint64_t sub_1000F5970(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  String.utf8CString.getter();
  os_transaction_create();
  uint64_t v4 = swift_release();
  a3(v4);

  return swift_unknownObjectRelease();
}

uint64_t sub_1000F59D4()
{
  if (qword_100195BB0 != -1) {
    swift_once();
  }
  return byte_100195BB8;
}

char *sub_1000F5A20()
{
  uint64_t v0 = type metadata accessor for POSIXError();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v10 = 0;
  uint64_t v4 = String.utf8CString.getter();
  int v5 = sysctlbyname((const char *)(v4 + 32), 0, &v10, 0, 0);
  swift_release();
  if (v5)
  {
    sub_1000D5EB4((uint64_t)v3);
    POSIXError._nsError.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    swift_willThrow();
  }
  else
  {
    char v6 = (void *)swift_slowAlloc();
    uint64_t v7 = String.utf8CString.getter();
    int v8 = sysctlbyname((const char *)(v7 + 32), v6, &v10, 0, 0);
    swift_release();
    if (v8)
    {
      sub_1000D5EB4((uint64_t)v3);
      POSIXError._nsError.getter();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      swift_willThrow();
    }
    else
    {
      uint64_t v3 = (char *)String.init(cString:)();
    }
    swift_slowDealloc();
  }
  return v3;
}

uint64_t sub_1000F5C34()
{
  uint64_t v0 = (uint64_t *)sub_1000A224C();
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  swift_bridgeObjectRetain();
  sub_1000A1A3C();
  swift_bridgeObjectRetain();
  sub_1000F5A20();
  swift_bridgeObjectRelease();
  sub_100029B24();
  uint64_t v3 = (void *)StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_1000391C4(v2, v1, v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  byte_100195BB8 = v4 & 1;
  return result;
}

void sub_1000F5D38(int *a1, int a2)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }

  memset((void *)(v7 + v9), a2, v12);
}

char *sub_1000F5DCC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017DCB8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  char v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1000F5EC8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017FA70);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100004700(&qword_10017FB48);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1000F6000(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    return sub_100004700(&qword_10017FB70);
  }
  else
  {
    return type metadata accessor for _ContiguousArrayStorage(0, a2);
  }
}

uint64_t sub_1000F6070(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1000F60C4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700((uint64_t *)&unk_10017FB50);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    xpc_object_t v31 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_34;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_34;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_41;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v30;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v13) {
                  goto LABEL_34;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2) {
        sub_10001889C(v22, v32);
      }
      else {
        sub_1000047DC((uint64_t)v22, (uint64_t)v32);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      uint64_t result = (uint64_t)sub_10001889C(v32, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_1000F6388(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(a2 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            unint64_t v15 = (void *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1) {
              *unint64_t v15 = *v11;
            }
            uint64_t v16 = *(void *)(a2 + 56);
            unint64_t v17 = (_OWORD *)(v16 + 32 * v3);
            int64_t v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 2))
            {
              long long v9 = v18[1];
              *unint64_t v17 = *v18;
              v17[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  uint64_t *v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_1000F6520(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1000AD438(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1000F66C4();
      goto LABEL_7;
    }
    sub_1000F60C4(v13, a3 & 1);
    unint64_t v19 = sub_1000AD438(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    unint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_10000478C((uint64_t)v17);
    return sub_10001889C(a1, v17);
  }
LABEL_13:

  return sub_1000F665C(v10, a2, a1, v16);
}

_OWORD *sub_1000F665C(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_10001889C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

void *sub_1000F66C4()
{
  uint64_t v1 = v0;
  sub_100004700((uint64_t *)&unk_10017FB50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_1000047DC(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = sub_10001889C(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_1000F6888(uint64_t a1)
{
  return sub_10000C3BC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000F689C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_133;
    }
    if (v3) {
      return sub_1000F6FF8(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_132;
  }
  Swift::Int v100 = v3;
  uint64_t v97 = result;
  uint64_t v102 = v1;
  uint64_t v93 = a1;
  if (v3 > 1)
  {
    uint64_t v6 = v5 >> 1;
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = v6;
    Swift::Int v3 = v100;
    int64_t v96 = (void *)result;
    Swift::String v101 = (char *)(result + 32);
LABEL_13:
    Swift::Int v8 = 0;
    uint64_t v9 = *a1;
    uint64_t v94 = *a1 + 24;
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v103 = *a1;
    while (1)
    {
      Swift::Int v12 = v8++;
      Swift::Int v99 = v12;
      if (v8 < v3)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v13 = String.count.getter();
        uint64_t v14 = String.count.getter();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        Swift::Int v8 = v12 + 2;
        if (v12 + 2 < v3)
        {
          uint64_t v15 = v94 + 16 * v12;
          while (1)
          {
            v15 += 16;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v16 = String.count.getter();
            uint64_t v17 = String.count.getter();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v14 < v13 == v17 >= v16) {
              break;
            }
            ++v8;
            Swift::Int v3 = v100;
            if (v100 == v8)
            {
              Swift::Int v8 = v100;
              goto LABEL_23;
            }
          }
          Swift::Int v3 = v100;
        }
LABEL_23:
        uint64_t v9 = v103;
        if (v14 < v13)
        {
          if (v8 < v12) {
            goto LABEL_134;
          }
          if (v12 < v8)
          {
            uint64_t v18 = 16 * v8;
            uint64_t v19 = 16 * v12;
            Swift::Int v20 = v8;
            Swift::Int v21 = v12;
            do
            {
              if (v21 != --v20)
              {
                if (!v103) {
                  goto LABEL_139;
                }
                uint64_t v22 = v103 + v18;
                uint64_t v23 = *(void *)(v103 + v19);
                uint64_t v24 = *(void *)(v103 + v19 + 8);
                *(_OWORD *)(v103 + v19) = *(_OWORD *)(v103 + v18 - 16);
                *(void *)(v22 - 16) = v23;
                *(void *)(v22 - 8) = v24;
              }
              ++v21;
              v18 -= 16;
              v19 += 16;
            }
            while (v21 < v20);
          }
        }
      }
      if (v8 < v3)
      {
        if (__OFSUB__(v8, v12)) {
          goto LABEL_131;
        }
        if (v8 - v12 < v97)
        {
          Swift::Int v25 = v12 + v97;
          if (__OFADD__(v12, v97)) {
            goto LABEL_135;
          }
          if (v25 >= v3) {
            Swift::Int v25 = v3;
          }
          if (v25 < v12)
          {
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
            return result;
          }
          if (v8 != v25)
          {
            unint64_t v95 = v10;
            char v26 = (void *)(v9 + 16 * v8);
            Swift::Int v98 = v25;
            do
            {
              unint64_t v27 = v26;
              do
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v28 = String.count.getter();
                uint64_t v29 = String.count.getter();
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                if (v29 >= v28) {
                  break;
                }
                if (!v103) {
                  goto LABEL_137;
                }
                uint64_t v30 = *v27;
                uint64_t v31 = v27[1];
                *(_OWORD *)unint64_t v27 = *((_OWORD *)v27 - 1);
                *(v27 - 1) = v31;
                *(v27 - 2) = v30;
                v27 -= 2;
                ++v12;
              }
              while (v8 != v12);
              ++v8;
              v26 += 2;
              Swift::Int v12 = v99;
            }
            while (v8 != v98);
            Swift::Int v8 = v98;
            uint64_t v10 = v95;
          }
        }
      }
      if (v8 < v12) {
        goto LABEL_126;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100064C60(0, *((void *)v10 + 2) + 1, 1, v10);
        uint64_t v10 = (char *)result;
      }
      unint64_t v33 = *((void *)v10 + 2);
      unint64_t v32 = *((void *)v10 + 3);
      unint64_t v11 = v33 + 1;
      uint64_t v9 = v103;
      if (v33 >= v32 >> 1)
      {
        uint64_t result = (uint64_t)sub_100064C60((char *)(v32 > 1), v33 + 1, 1, v10);
        uint64_t v9 = v103;
        uint64_t v10 = (char *)result;
      }
      *((void *)v10 + 2) = v11;
      uint64_t v34 = v10 + 32;
      uint64_t v35 = (Swift::Int *)&v10[16 * v33 + 32];
      *uint64_t v35 = v12;
      v35[1] = v8;
      if (v33)
      {
        while (1)
        {
          unint64_t v36 = v11 - 1;
          if (v11 >= 4)
          {
            uint64_t v41 = &v34[16 * v11];
            uint64_t v42 = *((void *)v41 - 8);
            uint64_t v43 = *((void *)v41 - 7);
            BOOL v47 = __OFSUB__(v43, v42);
            uint64_t v44 = v43 - v42;
            if (v47) {
              goto LABEL_115;
            }
            uint64_t v46 = *((void *)v41 - 6);
            uint64_t v45 = *((void *)v41 - 5);
            BOOL v47 = __OFSUB__(v45, v46);
            uint64_t v39 = v45 - v46;
            char v40 = v47;
            if (v47) {
              goto LABEL_116;
            }
            unint64_t v48 = v11 - 2;
            uint64_t v49 = &v34[16 * v11 - 32];
            uint64_t v51 = *(void *)v49;
            uint64_t v50 = *((void *)v49 + 1);
            BOOL v47 = __OFSUB__(v50, v51);
            uint64_t v52 = v50 - v51;
            if (v47) {
              goto LABEL_117;
            }
            BOOL v47 = __OFADD__(v39, v52);
            uint64_t v53 = v39 + v52;
            if (v47) {
              goto LABEL_119;
            }
            if (v53 >= v44)
            {
              unint64_t v71 = &v34[16 * v36];
              uint64_t v73 = *(void *)v71;
              uint64_t v72 = *((void *)v71 + 1);
              BOOL v47 = __OFSUB__(v72, v73);
              uint64_t v74 = v72 - v73;
              if (v47) {
                goto LABEL_125;
              }
              BOOL v64 = v39 < v74;
              goto LABEL_84;
            }
          }
          else
          {
            if (v11 != 3)
            {
              uint64_t v65 = *((void *)v10 + 4);
              uint64_t v66 = *((void *)v10 + 5);
              BOOL v47 = __OFSUB__(v66, v65);
              uint64_t v58 = v66 - v65;
              char v59 = v47;
              goto LABEL_78;
            }
            uint64_t v38 = *((void *)v10 + 4);
            uint64_t v37 = *((void *)v10 + 5);
            BOOL v47 = __OFSUB__(v37, v38);
            uint64_t v39 = v37 - v38;
            char v40 = v47;
          }
          if (v40) {
            goto LABEL_118;
          }
          unint64_t v48 = v11 - 2;
          uint64_t v54 = &v34[16 * v11 - 32];
          uint64_t v56 = *(void *)v54;
          uint64_t v55 = *((void *)v54 + 1);
          BOOL v57 = __OFSUB__(v55, v56);
          uint64_t v58 = v55 - v56;
          char v59 = v57;
          if (v57) {
            goto LABEL_120;
          }
          uint64_t v60 = &v34[16 * v36];
          uint64_t v62 = *(void *)v60;
          uint64_t v61 = *((void *)v60 + 1);
          BOOL v47 = __OFSUB__(v61, v62);
          uint64_t v63 = v61 - v62;
          if (v47) {
            goto LABEL_122;
          }
          if (__OFADD__(v58, v63)) {
            goto LABEL_124;
          }
          if (v58 + v63 >= v39)
          {
            BOOL v64 = v39 < v63;
LABEL_84:
            if (v64) {
              unint64_t v36 = v48;
            }
            goto LABEL_86;
          }
LABEL_78:
          if (v59) {
            goto LABEL_121;
          }
          os_log_t v67 = &v34[16 * v36];
          uint64_t v69 = *(void *)v67;
          uint64_t v68 = *((void *)v67 + 1);
          BOOL v47 = __OFSUB__(v68, v69);
          uint64_t v70 = v68 - v69;
          if (v47) {
            goto LABEL_123;
          }
          if (v70 < v58) {
            goto LABEL_15;
          }
LABEL_86:
          unint64_t v75 = v36 - 1;
          if (v36 - 1 >= v11)
          {
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
            goto LABEL_136;
          }
          if (!v9) {
            goto LABEL_138;
          }
          Swift::Int v76 = v8;
          BOOL v77 = (unint64_t *)v10;
          uint64_t v78 = v34;
          unint64_t v79 = &v34[16 * v75];
          uint64_t v80 = *(void *)v79;
          Swift::Int v81 = v78;
          unint64_t v82 = v36;
          unint64_t v83 = &v78[16 * v36];
          uint64_t v84 = *((void *)v83 + 1);
          uint64_t result = sub_1000F7100((char *)(v9 + 16 * *(void *)v79), (char *)(v9 + 16 * *(void *)v83), v9 + 16 * v84, v101);
          if (v102)
          {
LABEL_94:
            swift_bridgeObjectRelease();
            v96[2] = 0;
            return swift_bridgeObjectRelease();
          }
          if (v84 < v80) {
            goto LABEL_112;
          }
          if (v82 > v77[2]) {
            goto LABEL_113;
          }
          unint64_t v85 = v82;
          *(void *)unint64_t v79 = v80;
          *(void *)&v81[16 * v75 + 8] = v84;
          unint64_t v86 = v77[2];
          if (v82 >= v86) {
            goto LABEL_114;
          }
          uint64_t v34 = v81;
          uint64_t v10 = (char *)v77;
          uint64_t v102 = 0;
          unint64_t v11 = v86 - 1;
          uint64_t result = (uint64_t)memmove(v83, v83 + 16, 16 * (v86 - 1 - v85));
          v77[2] = v86 - 1;
          uint64_t v9 = v103;
          Swift::Int v8 = v76;
          if (v86 <= 2) {
            goto LABEL_15;
          }
        }
      }
      unint64_t v11 = 1;
LABEL_15:
      Swift::Int v3 = v100;
      if (v8 >= v100)
      {
        unint64_t v7 = v96;
        goto LABEL_97;
      }
    }
  }
  unint64_t v7 = &_swiftEmptyArrayStorage;
  Swift::String v101 = (char *)&_swiftEmptyArrayStorage + 32;
  if (v3 == 1)
  {
    int64_t v96 = &_swiftEmptyArrayStorage;
    goto LABEL_13;
  }
  unint64_t v11 = *((void *)&_swiftEmptyArrayStorage + 2);
  uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
LABEL_97:
  int64_t v96 = v7;
  if (v11 >= 2)
  {
    uint64_t v87 = *v93;
    do
    {
      unint64_t v88 = v11 - 2;
      if (v11 < 2) {
        goto LABEL_127;
      }
      if (!v87) {
        goto LABEL_140;
      }
      uint64_t v89 = *(void *)&v10[16 * v88 + 32];
      uint64_t v90 = *(void *)&v10[16 * v11 + 24];
      uint64_t result = sub_1000F7100((char *)(v87 + 16 * v89), (char *)(v87 + 16 * *(void *)&v10[16 * v11 + 16]), v87 + 16 * v90, v101);
      if (v102) {
        goto LABEL_94;
      }
      if (v90 < v89) {
        goto LABEL_128;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100064D5C((uint64_t)v10);
        uint64_t v10 = (char *)result;
      }
      if (v88 >= *((void *)v10 + 2)) {
        goto LABEL_129;
      }
      int v91 = &v10[16 * v88 + 32];
      *(void *)int v91 = v89;
      *((void *)v91 + 1) = v90;
      unint64_t v92 = *((void *)v10 + 2);
      if (v11 > v92) {
        goto LABEL_130;
      }
      uint64_t result = (uint64_t)memmove(&v10[16 * v11 + 16], &v10[16 * v11 + 32], 16 * (v92 - v11));
      *((void *)v10 + 2) = v92 - 1;
      unint64_t v11 = v92 - 1;
    }
    while (v92 > 2);
  }
  swift_bridgeObjectRelease();
  v96[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F6FF8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v13 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = (void *)(*a4 + 16 * a3);
LABEL_5:
    uint64_t v7 = v13;
    uint64_t v14 = v6;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = String.count.getter();
      uint64_t v9 = String.count.getter();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v9 >= v8)
      {
LABEL_4:
        ++v4;
        uint64_t v6 = v14 + 2;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      uint64_t v10 = *v6;
      uint64_t v11 = v6[1];
      *(_OWORD *)uint64_t v6 = *((_OWORD *)v6 - 1);
      *(v6 - 1) = v11;
      *(v6 - 2) = v10;
      v6 -= 2;
      if (v4 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F7100(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 15;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 15;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 4;
  if (v10 >= v12 >> 4)
  {
    uint64_t v15 = a4;
    if (a4 != __src || &__src[16 * v13] <= a4) {
      memmove(a4, __src, 16 * v13);
    }
    if (v7 >= v6 || v11 < 16)
    {
      uint64_t v14 = &v15[16 * v13];
      goto LABEL_43;
    }
    Swift::Int v21 = (char *)(a3 - 16);
    uint64_t v14 = &a4[16 * v13];
    uint64_t v28 = v7;
    while (1)
    {
      uint64_t v29 = v21 + 16;
      uint64_t v22 = v6 - 16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v23 = String.count.getter();
      uint64_t v24 = String.count.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v24 >= v23)
      {
        unint64_t v25 = (unint64_t)v28;
        uint64_t v22 = v14 - 16;
        if (v29 != v14)
        {
          v14 -= 16;
          goto LABEL_37;
        }
        BOOL v26 = v21 >= v14;
        v14 -= 16;
        uint64_t v15 = a4;
        if (v26) {
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v25 = (unint64_t)v28;
        if (v29 != v6)
        {
          v6 -= 16;
LABEL_37:
          uint64_t v15 = a4;
LABEL_38:
          *(_OWORD *)Swift::Int v21 = *(_OWORD *)v22;
          goto LABEL_39;
        }
        BOOL v26 = v21 >= v6;
        v6 -= 16;
        uint64_t v15 = a4;
        if (v26) {
          goto LABEL_38;
        }
      }
LABEL_39:
      if ((unint64_t)v6 > v25)
      {
        v21 -= 16;
        if (v14 > v15) {
          continue;
        }
      }
      goto LABEL_43;
    }
  }
  if (a4 != __dst || &__dst[16 * v10] <= a4) {
    memmove(a4, __dst, 16 * v10);
  }
  uint64_t v14 = &a4[16 * v10];
  uint64_t v15 = a4;
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      uint64_t v16 = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v17 = String.count.getter();
      uint64_t v18 = String.count.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18 >= v17) {
        break;
      }
      uint64_t v19 = v6;
      v6 += 16;
      if (v7 != v16) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
      if (v15 >= v14 || (unint64_t)v6 >= a3) {
        goto LABEL_18;
      }
    }
    uint64_t v19 = v15;
    BOOL v20 = v7 == v15;
    v15 += 16;
    if (v20) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v19;
    goto LABEL_16;
  }
LABEL_18:
  uint64_t v6 = v7;
LABEL_43:
  if (v6 != v15 || v6 >= &v15[(v14 - v15 + (v14 - v15 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0]) {
    memmove(v6, v15, 16 * ((v14 - v15) / 16));
  }
  return 1;
}

void *sub_1000F73DC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          sub_100004700(&qword_10017BC48);
          int64_t v8 = (void *)swift_allocObject();
          size_t v12 = j__malloc_size(v8);
          v8[2] = v9;
          v8[3] = 2 * v12 - 64;
        }
        sub_100012DE4(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        sub_100012A10(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x1000F7588);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

BOOL sub_1000F7598(void *a1, uint64_t a2, uint64_t a3, void *a4, xpc_type_t *a5)
{
  xpc_type_t type = xpc_get_type(a1);
  if (*a4 != -1) {
    swift_once();
  }
  return type == *a5;
}

uint64_t sub_1000F75F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, unint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v16 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v16 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  uint64_t result = sub_1000EDE9C(v16, a4, a5, a6, a8, &v17);
  if (!v8) {
    return v17;
  }
  return result;
}

uint64_t sub_1000F76B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t, unint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v13 = result;
  uint64_t result = __DataStorage._offset.getter();
  uint64_t v14 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v15 = __OFSUB__(a2, a1);
  uint64_t v16 = a2 - a1;
  if (v15)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v17 = __DataStorage._length.getter();
  if (v17 >= v16) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = v17;
  }
  uint64_t result = sub_1000EDC20(v13 + v14, v13 + v14 + v18, a4, a5, a6, &v19);
  if (!v6) {
    return v19;
  }
  return result;
}

uint64_t sub_1000F776C(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      uint64_t v13 = v6 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_10013DC80;
      sub_100012DE4(a2, a3);
      sub_100012DE4(a2, a3);
      uint64_t v14 = v7 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_16;
      }
      if (v14 < (int)v7) {
        goto LABEL_20;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v7, __DataStorage._offset.getter())) {
        goto LABEL_21;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v18 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v13 = v18;
LABEL_16:
      if (v14 < (int)v7)
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
      sub_100012DE4(a2, a3);
      uint64_t v5 = sub_1000F76B0((int)v7, v7 >> 32, v13, a2, a3, a4);
      sub_100012A10(a2, a3);
      sub_100012A10(a2, a3);
      sub_100012A10(a2, a3);
      *a1 = v7;
      a1[1] = v13 | 0x4000000000000000;
      return v5;
    case 2uLL:
      *(void *)&long long v21 = *a1;
      *((void *)&v21 + 1) = v6 & 0x3FFFFFFFFFFFFFFFLL;
      sub_100012DE4(a2, a3);
      sub_100012DE4(a2, a3);
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v15 = *((void *)&v21 + 1);
      uint64_t v16 = *(void *)(v21 + 16);
      uint64_t v5 = *(void *)(v21 + 24);
      sub_100012DE4(a2, a3);
      uint64_t v17 = sub_1000F76B0(v16, v5, *((uint64_t *)&v21 + 1), a2, a3, a4);
      if (!v4) {
        uint64_t v5 = v17;
      }
      sub_100012A10(a2, a3);
      sub_100012A10(a2, a3);
      sub_100012A10(a2, a3);
      *a1 = v21;
      a1[1] = v15 | 0x8000000000000000;
      return v5;
    case 3uLL:
      *(void *)((char *)&v21 + 7) = 0;
      *(void *)&long long v21 = 0;
      sub_1000EDC20((uint64_t)&v21, (uint64_t)&v21, a2, a3, a4, &v22);
      if (!v4) {
        return v22;
      }
      return v5;
    default:
      *(void *)&long long v21 = *a1;
      WORD4(v21) = v6;
      BYTE10(v21) = BYTE2(v6);
      BYTE11(v21) = BYTE3(v6);
      BYTE12(v21) = BYTE4(v6);
      BYTE13(v21) = BYTE5(v6);
      BYTE14(v21) = BYTE6(v6);
      sub_1000EDC20((uint64_t)&v21, (uint64_t)&v21 + BYTE6(v6), a2, a3, a4, &v22);
      if (!v4) {
        uint64_t v5 = v22;
      }
      unint64_t v12 = DWORD2(v21) | ((unint64_t)BYTE12(v21) << 32) | ((unint64_t)BYTE13(v21) << 40) | ((unint64_t)BYTE14(v21) << 48);
      *a1 = v21;
      a1[1] = v12;
      return v5;
  }
}

uint64_t sub_1000F7B54(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = result;
  uint64_t result = String.count.getter();
  if (__OFSUB__(result, v1))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  String.index(_:offsetBy:limitedBy:)();

  return String.subscript.getter();
}

uint64_t sub_1000F7C20(uint64_t a1, uint64_t a2)
{
  return sub_1000EE600(a1, a2, *(void **)(v2 + 24));
}

BOOL sub_1000F7C28()
{
  return ((*(uint64_t (**)(void))(v0 + 24))() & 1) == 0;
}

uint64_t sub_1000F7C58()
{
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

BOOL sub_1000F7C84(uint64_t a1, uint64_t a2)
{
  if (qword_100195B88 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(qword_1001998E8 + 16);
  if (!v3) {
    return 0;
  }
  sub_100029B94();
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    if (v3 == ++v4)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = qword_1001998E8;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1000F1130(a2, v6);
  char v9 = v8;
  swift_bridgeObjectRelease();
  return (v9 & 1) != 0 || v4 < v7;
}

uint64_t sub_1000F7DAC(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1000F7E70(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_1000F7DAC(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_1000F7F24@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2[2];
  if (!a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, 1, 1);
  }
  uint64_t v4 = v2[3];
  switch((unint64_t)v2[4] >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(v4), v4)) {
        return sub_1000F0244(a1, v2[2], a2);
      }
      __break(1u);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, 1, 1);
    case 2uLL:
      if (__OFSUB__(*(void *)(v4 + 24), *(void *)(v4 + 16)))
      {
        __break(1u);
        JUMPOUT(0x1000F7FD8);
      }
      return result;
    default:
      return sub_1000F0244(a1, v2[2], a2);
  }
  return sub_1000F0244(a1, v2[2], a2);
}

unint64_t sub_1000F7FE8()
{
  unint64_t result = qword_10017FA40;
  if (!qword_10017FA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FA40);
  }
  return result;
}

uint64_t sub_1000F803C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  if (!*(void *)(v10 + 16) || (unint64_t v11 = sub_1000AD438(a2), (v12 & 1) == 0))
  {
    long long v22 = 0u;
    long long v23 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  sub_1000047DC(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v22);
  swift_bridgeObjectRelease();
  if (!*((void *)&v23 + 1))
  {
LABEL_6:
    sub_1000130EC((uint64_t)&v22, &qword_10017C018);
    goto LABEL_7;
  }
  sub_1000130EC((uint64_t)&v22, &qword_10017C018);
  static os_log_type_t.error.getter();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100132F10;
  uint64_t v14 = ObjectIdentifier.debugDescription.getter();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10002A1DC();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  sub_10002A230();
  uint64_t v17 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

LABEL_7:
  *((void *)&v23 + 1) = a4;
  uint64_t v18 = sub_1000045E8((uint64_t *)&v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v18, a1, a4);
  uint64_t v19 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a5 + 24))(v21, a3, a5);
  sub_1000EEE74((uint64_t)&v22, a2);
  return v19(v21, 0);
}

uint64_t sub_1000F824C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  char v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v50 = (char *)&v38 - v11;
  uint64_t v39 = v12;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v38 - v13;
  if (Array.count.getter())
  {
    type metadata accessor for _SetStorage();
    uint64_t v15 = (unsigned char *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v15 = &_swiftEmptySetSingleton;
  }
  Swift::Int v43 = Array._getCount()();
  if (!v43) {
    return (uint64_t)v15;
  }
  uint64_t v16 = 0;
  unint64_t v48 = (void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
  uint64_t v49 = v15 + 56;
  uint64_t v45 = v6 + 32;
  BOOL v47 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v40 = v6;
  uint64_t v41 = v5;
  uint64_t v42 = v14;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      uint64_t v18 = *(void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
      v18(v14, (uint64_t *)(v5+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v16), a2);
      BOOL v19 = __OFADD__(v16, 1);
      uint64_t v20 = v16 + 1;
      if (v19) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
      if (v39 != 8) {
        goto LABEL_23;
      }
      uint64_t v51 = result;
      uint64_t v18 = *v48;
      (*v48)(v14, &v51, a2);
      swift_unknownObjectRelease();
      BOOL v19 = __OFADD__(v16, 1);
      uint64_t v20 = v16 + 1;
      if (v19)
      {
LABEL_20:
        __break(1u);
        return (uint64_t)v15;
      }
    }
    uint64_t v46 = v20;
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v44(v50, v14, a2);
    uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
    long long v22 = v15;
    uint64_t v23 = -1 << v15[32];
    unint64_t v24 = v21 & ~v23;
    unint64_t v25 = v24 >> 6;
    uint64_t v26 = *(void *)&v49[8 * (v24 >> 6)];
    uint64_t v27 = 1 << v24;
    uint64_t v28 = *(void *)(v6 + 72);
    if (((1 << v24) & v26) != 0)
    {
      uint64_t v29 = ~v23;
      do
      {
        v18(v9, (uint64_t *)(v22[6] + v28 * v24), a2);
        uint64_t v30 = a3;
        char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v32 = *v47;
        (*v47)(v9, a2);
        if (v31)
        {
          v32(v50, a2);
          a3 = v30;
          uint64_t v6 = v40;
          uint64_t v5 = v41;
          uint64_t v15 = v22;
          goto LABEL_7;
        }
        unint64_t v24 = (v24 + 1) & v29;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = *(void *)&v49[8 * (v24 >> 6)];
        uint64_t v27 = 1 << v24;
        a3 = v30;
      }
      while ((v26 & (1 << v24)) != 0);
      uint64_t v6 = v40;
      uint64_t v5 = v41;
    }
    unint64_t v33 = v50;
    *(void *)&v49[8 * v25] = v27 | v26;
    unint64_t v34 = v22[6] + v28 * v24;
    uint64_t v15 = v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v44)(v34, v33, a2);
    uint64_t v36 = v22[2];
    BOOL v19 = __OFADD__(v36, 1);
    uint64_t v37 = v36 + 1;
    if (v19) {
      break;
    }
    _OWORD v22[2] = v37;
LABEL_7:
    uint64_t v14 = v42;
    uint64_t v16 = v46;
    if (v46 == v43) {
      return (uint64_t)v15;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

void *sub_1000F8608@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000F8620(a1, a2);
}

void *sub_1000F8620@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000F2D3C(*(void **)(v2 + 16), a1, *(void *)(v2 + 24));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000F8654@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = String.init(cString:)();
    *a1 = result;
    a1[1] = v4;
  }
  return result;
}

uint64_t type metadata accessor for XPCUtil()
{
  return self;
}

uint64_t sub_1000F86C4()
{
  return _swift_deallocObject(v0, 32, 7);
}

BOOL sub_1000F86D4()
{
  uint64_t v1 = *(unsigned char **)(v0 + 16);
  uint64_t v2 = *(char ***)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = sub_1000F535C(ObjectType);
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = v4;
    uint64_t v8 = *v2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v8 = sub_10000C3BC(0, *((void *)v8 + 2) + 1, 1, v8);
      *uint64_t v2 = v8;
    }
    unint64_t v11 = *((void *)v8 + 2);
    unint64_t v10 = *((void *)v8 + 3);
    if (v11 >= v10 >> 1)
    {
      uint64_t v8 = sub_10000C3BC((char *)(v10 > 1), v11 + 1, 1, v8);
      *uint64_t v2 = v8;
    }
    *((void *)v8 + 2) = v11 + 1;
    uint64_t v12 = &v8[16 * v11];
    *((void *)v12 + 4) = v7;
    *((void *)v12 + 5) = v6;
  }
  else
  {
    *uint64_t v1 = 0;
  }
  return v6 != 0;
}

uint64_t sub_1000F87AC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F87BC()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1000F87E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000F87F8()
{
  return swift_release();
}

uint64_t sub_1000F8800()
{
  return swift_getWitnessTable();
}

unsigned char *sub_1000F8820(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F88ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t _s18OrderSpecificationOMa()
{
  return sub_100004FAC();
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

ValueMetadata *type metadata accessor for Signposters()
{
  return &type metadata for Signposters;
}

ValueMetadata *type metadata accessor for IOKitSerialization()
{
  return &type metadata for IOKitSerialization;
}

void *sub_1000F8960(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ArchInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

void *assignWithTake for ArchInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchInfo()
{
  return &type metadata for ArchInfo;
}

unint64_t destroy for PackageType(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s10driverkitd11PackageTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for PackageType(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PackageType(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PackageType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PackageType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PackageType()
{
  return &type metadata for PackageType;
}

uint64_t sub_1000F8D24()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for PropertyListManager()
{
  return sub_100004FAC();
}

uint64_t initializeBufferWithCopyOfBuffer for RegisteredApplicationNotification(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithTake for RegisteredApplicationNotification(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RegisteredApplicationNotification()
{
  return &type metadata for RegisteredApplicationNotification;
}

uint64_t destroy for processResults()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for processResults(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for processResults(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for processResults(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for processResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for processResults(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 36)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for processResults(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for processResults()
{
  return &type metadata for processResults;
}

uint64_t _s10driverkitd33RegisteredApplicationNotificationVwca_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for UnregisteredApplicationNotification()
{
  return &type metadata for UnregisteredApplicationNotification;
}

BOOL sub_1000F90C4(uint64_t a1)
{
  return ((*(uint64_t (**)(uint64_t, void))(v1 + 24))(a1, *(void *)(v1 + 40)) & 1) == 0;
}

uint64_t sub_1000F9110(uint64_t a1, unint64_t a2)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t v2 = a1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000F9158(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  if (!v3) {
    return v4 == 0;
  }
  if (v3 == 1) {
    return v4 == 1;
  }
  if (v4 < 2) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int sub_1000F91BC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(0);
      String.hash(into:)();
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 2;
  }
  else
  {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1000F923C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (!v1)
  {
    Swift::UInt v2 = 1;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    Swift::UInt v2 = 2;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  Hasher._combine(_:)(0);

  String.hash(into:)();
}

Swift::Int sub_1000F92C4()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(0);
      String.hash(into:)();
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 2;
  }
  else
  {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000F9340()
{
  uint64_t v1 = v0[1];
  if (!v1) {
    return 0x656C70706140;
  }
  if (v1 == 1) {
    return 0x656E6F6E40;
  }
  uint64_t v3 = *v0;
  String.append(_:)(*(Swift::String *)(&v1 - 1));
  v4._uint64_t countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x286D61657440;
}

__n128 sub_1000F93D0@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000F93DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_100012DE4(v2, v3);
}

Swift::Int sub_1000F93E8()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  sub_100012DE4(v1, v2);
  Data.hash(into:)();
  sub_100012A10(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000F944C()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  sub_100012DE4(v2, v1);
  Data.hash(into:)();

  return sub_100012A10(v2, v1);
}

Swift::Int sub_1000F94AC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  sub_100012DE4(v1, v2);
  Data.hash(into:)();
  sub_100012A10(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000F950C(uint64_t a1, uint64_t a2)
{
  return sub_1000F9520(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t sub_1000F9520(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2 >> 62;
  uint64_t v9 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100012DE4(a1, a2);
LABEL_7:
      unint64_t v12 = a4 >> 62;
      switch(a4 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_62;
          }
          if (v9 == HIDWORD(a3) - a3) {
            goto LABEL_17;
          }
          goto LABEL_26;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v15 = __OFSUB__(v13, v14);
          uint64_t v16 = v13 - v14;
          if (v15) {
            goto LABEL_61;
          }
          if (v9 != v16) {
            goto LABEL_26;
          }
LABEL_17:
          if (v9 >= 1)
          {
            switch((int)v4)
            {
              case 1:
                if (a1 >> 32 < (int)a1) {
                  goto LABEL_63;
                }
                sub_100012DE4(a3, a4);
                sub_100012DE4(a3, a4);
                char v22 = sub_100023AD4((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
LABEL_39:
                sub_100012A10(a1, a2);
                sub_100012A10(a3, a4);
                sub_100012A10(a3, a4);
                return v22 & 1;
              case 2:
                uint64_t v23 = *(void *)(a1 + 16);
                uint64_t v24 = *(void *)(a1 + 24);
                sub_100012DE4(a3, a4);
                sub_100012DE4(a3, a4);
                swift_retain();
                swift_retain();
                char v22 = sub_100023AD4(v23, v24, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                swift_release();
                swift_release();
                goto LABEL_39;
              case 3:
                memset(__s1, 0, 14);
                if (!v12) {
                  goto LABEL_40;
                }
                if (v12 != 1)
                {
                  uint64_t v31 = *(void *)(a3 + 16);
                  uint64_t v32 = *(void *)(a3 + 24);
                  sub_100012DE4(a3, a4);
                  sub_100012DE4(a3, a4);
                  swift_retain();
                  swift_retain();
                  unint64_t v33 = (char *)__DataStorage._bytes.getter();
                  if (v33)
                  {
                    uint64_t v34 = __DataStorage._offset.getter();
                    if (__OFSUB__(v31, v34))
                    {
LABEL_69:
                      __break(1u);
LABEL_70:
                      __break(1u);
                    }
                    v33 += v31 - v34;
                  }
                  BOOL v15 = __OFSUB__(v32, v31);
                  int64_t v35 = v32 - v31;
                  if (!v15)
                  {
                    uint64_t v36 = __DataStorage._length.getter();
                    if (!v33)
                    {
                      sub_100012A10(a3, a4);
                      __break(1u);
LABEL_48:
                      uint64_t v37 = *(void *)(a3 + 16);
                      uint64_t v38 = *(void *)(a3 + 24);
                      sub_100012DE4(a3, a4);
                      sub_100012DE4(a3, a4);
                      swift_retain();
                      swift_retain();
                      unint64_t v33 = (char *)__DataStorage._bytes.getter();
                      if (v33)
                      {
                        uint64_t v39 = __DataStorage._offset.getter();
                        if (__OFSUB__(v37, v39)) {
                          goto LABEL_70;
                        }
                        v33 += v37 - v39;
                      }
                      BOOL v15 = __OFSUB__(v38, v37);
                      int64_t v35 = v38 - v37;
                      if (v15) {
                        goto LABEL_67;
                      }
                      uint64_t v36 = __DataStorage._length.getter();
                      if (!v33)
                      {
LABEL_73:
                        sub_100012A10(a3, a4);
                        __break(1u);
                        sub_100012A10(a3, a4);
                        swift_release();
                        swift_release();
                        __break(1u);
                        sub_100012A10(a3, a4);
                        __break(1u);
                        JUMPOUT(0x1000F9B1CLL);
                      }
                    }
                    if (v36 >= v35) {
                      size_t v40 = v35;
                    }
                    else {
                      size_t v40 = v36;
                    }
                    int v30 = memcmp(__s1, v33, v40);
                    swift_release();
                    swift_release();
                    goto LABEL_57;
                  }
LABEL_66:
                  __break(1u);
LABEL_67:
                  __break(1u);
LABEL_68:
                  __break(1u);
                  goto LABEL_69;
                }
                uint64_t v17 = (a3 >> 32) - (int)a3;
                if (a3 >> 32 >= (int)a3)
                {
                  sub_100012DE4(a3, a4);
                  sub_100012DE4(a3, a4);
                  uint64_t v25 = __DataStorage._bytes.getter();
                  if (v25)
                  {
                    uint64_t v19 = v25;
                    uint64_t v26 = __DataStorage._offset.getter();
                    uint64_t v21 = (int)a3 - v26;
                    if (!__OFSUB__((int)a3, v26)) {
                      goto LABEL_34;
                    }
                    goto LABEL_68;
                  }
                  goto LABEL_72;
                }
                break;
              default:
                __s1[0] = a1;
                LOWORD(__s1[1]) = a2;
                BYTE2(__s1[1]) = BYTE2(a2);
                BYTE3(__s1[1]) = BYTE3(a2);
                BYTE4(__s1[1]) = BYTE4(a2);
                BYTE5(__s1[1]) = BYTE5(a2);
                if (!v12)
                {
LABEL_40:
                  uint64_t __s2 = a3;
                  __int16 v43 = a4;
                  char v44 = BYTE2(a4);
                  char v45 = BYTE3(a4);
                  char v46 = BYTE4(a4);
                  char v47 = BYTE5(a4);
                  sub_100012DE4(a3, a4);
                  sub_100012DE4(a3, a4);
                  p_s2 = &__s2;
                  size_t v29 = BYTE6(a4);
LABEL_41:
                  int v30 = memcmp(__s1, p_s2, v29);
LABEL_57:
                  sub_100012A10(a1, a2);
                  sub_100012A10(a3, a4);
                  sub_100012A10(a3, a4);
                  char v22 = v30 == 0;
                  return v22 & 1;
                }
                if (v12 != 1) {
                  goto LABEL_48;
                }
                uint64_t v17 = (a3 >> 32) - (int)a3;
                if (a3 >> 32 < (int)a3) {
                  goto LABEL_64;
                }
                sub_100012DE4(a3, a4);
                sub_100012DE4(a3, a4);
                uint64_t v18 = __DataStorage._bytes.getter();
                if (!v18)
                {
                  __DataStorage._length.getter();
                  sub_100012A10(a3, a4);
                  __break(1u);
LABEL_72:
                  __DataStorage._length.getter();
                  sub_100012A10(a3, a4);
                  __break(1u);
                  goto LABEL_73;
                }
                uint64_t v19 = v18;
                uint64_t v20 = __DataStorage._offset.getter();
                uint64_t v21 = (int)a3 - v20;
                if (!__OFSUB__((int)a3, v20))
                {
LABEL_34:
                  uint64_t v27 = __DataStorage._length.getter();
                  p_s2 = (uint64_t *)(v19 + v21);
                  if (v27 >= v17) {
                    size_t v29 = v17;
                  }
                  else {
                    size_t v29 = v27;
                  }
                  goto LABEL_41;
                }
                __break(1u);
LABEL_26:
                sub_100012A10(a1, a2);
                char v22 = 0;
                return v22 & 1;
            }
LABEL_65:
            __break(1u);
            goto LABEL_66;
          }
LABEL_27:
          sub_100012A10(a1, a2);
          char v22 = 1;
          return v22 & 1;
        case 3uLL:
          if (!v9) {
            goto LABEL_27;
          }
          goto LABEL_26;
        default:
          if (v9 != BYTE6(a4)) {
            goto LABEL_26;
          }
          goto LABEL_17;
      }
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_60;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_1000F9B4C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_100014B14(a1, a2);
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  if (v4 >> 60 == 15) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000F9BA0()
{
  return sub_100014690(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_1000F9BA8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(uint64_t (**)(void))(a2 + 16);
  uint64_t v5 = *(void *)(v4() + 16);
  swift_bridgeObjectRelease();
  unint64_t v6 = 0xE000000000000000;
  if (v5)
  {
    unint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    uint64_t v36 = 0x656C7469746E6520;
    unint64_t v37 = 0xEF203A73746E656DLL;
    uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
    uint64_t v35 = sub_100004700((uint64_t *)&unk_10017FA80);
    uint64_t v33 = v7;
    uint64_t v8 = sub_1000F3DA8((uint64_t)&v33);
    uint64_t v10 = v9;
    sub_10000478C((uint64_t)&v33);
    v11._uint64_t countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = v36;
    unint64_t v6 = v37;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  if (v14)
  {
    unint64_t v15 = v14;
    if (v14 == 1)
    {
      unint64_t v16 = 0xE500000000000000;
      uint64_t v17 = 0x656E6F6E40;
    }
    else
    {
      uint64_t v18 = v13;
      uint64_t v33 = 0x286D61657440;
      unint64_t v34 = 0xE600000000000000;
      String.append(_:)(*(Swift::String *)&v13);
      v19._uint64_t countAndFlagsBits = 41;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      sub_100018888(v18, v15);
      uint64_t v17 = v33;
      unint64_t v16 = v34;
    }
  }
  else
  {
    unint64_t v16 = 0xE600000000000000;
    uint64_t v17 = 0x656C70706140;
  }
  uint64_t v33 = v17;
  unint64_t v34 = v16;
  v20._uint64_t countAndFlagsBits = 10272;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  unint64_t v23 = v22;
  uint64_t v24 = sub_100014690(v21, v22);
  uint64_t v26 = v25;
  sub_100012A10(v21, v23);
  v27._uint64_t countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 41;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  uint64_t v29 = v33;
  unint64_t v30 = v34;
  uint64_t v33 = v12;
  unint64_t v34 = v6;
  uint64_t v36 = v29;
  unint64_t v37 = v30;
  swift_bridgeObjectRetain();
  uint64_t v36 = String.init<A>(_:)();
  unint64_t v37 = v31;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v36;
}

uint64_t sub_1000F9E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(a4 + 16))(a1, a2, 0, 0, a3, a4);
}

uint64_t sub_1000F9E74(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v14)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  void *v31;
  uint64_t result;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t (**v47)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  long long v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  void v67[9];
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;

  if (a3 == 3)
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000041;
    *(void *)(v8 + 8) = 0x800000010014E990;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(void *)(v8 + 64) = 0;
    *(unsigned char *)(v8 + 72) = 9;
    swift_willThrow();
    return v9 & 1;
  }
  uint64_t v65 = a5;
  uint64_t v66 = (void *)a1;
  unint64_t v14 = *(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16);
  v14(&v69, a2, a3, 0, 0, a6, a7);
  if (!v7)
  {
    sub_100029900((uint64_t)&v69, (uint64_t)v66, &qword_10017C010);
    char v9 = 1;
    return v9 & 1;
  }
  unint64_t v79 = v7;
  swift_errorRetain();
  unint64_t v15 = sub_100004700(&qword_10017EB50);
  if (!swift_dynamicCast())
  {
LABEL_9:
    swift_errorRelease();
    return v9 & 1;
  }
  if (v78 != 45)
  {
    sub_10003E9C8(v69, v70, v71, v72, v73, v74, v75, v76, v77, v78);
    goto LABEL_9;
  }
  uint64_t v50 = v15;
  uint64_t v58 = v69;
  uint64_t v63 = v76;
  uint64_t v62 = v75;
  uint64_t v61 = v74;
  uint64_t v60 = v73;
  char v59 = v72;
  BOOL v57 = v71;
  uint64_t v56 = v70;
  uint64_t v52 = v77;
  swift_errorRelease();
  uint64_t v54 = static os_log_type_t.info.getter();
  uint64_t v55 = sub_100004700((uint64_t *)&unk_10017D6E0);
  unint64_t v16 = swift_allocObject();
  uint64_t v49 = xmmword_100132F30;
  *(_OWORD *)(v16 + 16) = xmmword_100132F30;
  uint64_t v17 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a2 + 200);
  unint64_t v48 = *v17;
  char v47 = v17;
  unint64_t v22 = v48(v16, v18, v19, v20, v21);
  uint64_t v53 = v23;
  *(void *)(v16 + 56) = &type metadata for String;
  BOOL v64 = sub_10002A1DC();
  *(void *)(v16 + 64) = v64;
  uint64_t v24 = v53;
  *(void *)(v16 + 32) = v22;
  *(void *)(v16 + 40) = v24;
  v67[0] = v58;
  v67[1] = v56;
  v67[2] = v57;
  v67[3] = v59;
  v67[4] = v60;
  v67[5] = v61;
  v67[6] = v62;
  v67[7] = v63;
  uint64_t v53 = a4;
  v67[8] = v52;
  uint64_t v68 = 45;
  sub_100092FD8();
  uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v51 = v26;
  sub_10003E9C8(v58, v56, v57, v59, v60, v61, v62, v63, v52, 45);
  Swift::String v27 = v64;
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v27;
  Swift::String v28 = v51;
  *(void *)(v16 + 72) = v25;
  *(void *)(v16 + 80) = v28;
  uint64_t v63 = sub_10002A230();
  uint64_t v29 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  v14(v67, a2, 3, v53, v65, a6, a7);
  unint64_t v30 = v64;
  unint64_t v31 = v66;
  sub_100029900((uint64_t)v67, (uint64_t)v66, &qword_10017C010);
  LODWORD(v65) = static os_log_type_t.info.getter();
  __n128 result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_100132F10;
  uint64_t v33 = v31[3];
  if (v33)
  {
    unint64_t v34 = (void *)result;
    uint64_t v35 = v31[4];
    uint64_t v36 = sub_1000036B0(v31, v31[3]);
    unint64_t v37 = *(void *)(v33 - 8);
    __chkstk_darwin(v36);
    uint64_t v39 = (char *)&v47 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v37 + 16))(v39);
    size_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 32))(v33, v35);
    uint64_t v42 = v41;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v33);
    __int16 v43 = sub_100014690(v40, v42);
    char v45 = v44;
    sub_100012A10(v40, v42);
    v34[7] = &type metadata for String;
    v34[8] = v30;
    v34[4] = v43;
    v34[5] = v45;
    char v46 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    swift_errorRelease();
    char v9 = 0;
    return v9 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FA56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  *(void *)(v18 + 32) = a3;
  *(void *)(v18 + 40) = a4;
  *(void *)(v18 + 48) = a5;
  *(void *)(v18 + 56) = a6;
  *(void *)(v18 + 64) = a7;
  *(void *)(v18 + 72) = a8;
  *(_OWORD *)(v18 + 80) = a9;
  *(void *)(v18 + 96) = a10;
  sub_100029900(a11, v18 + OBJC_IVAR____TtC10driverkitd19RealCodeSigningInfo_signingTime, &qword_10017C008);
  return v18;
}

uint64_t sub_1000FA630()
{
  swift_bridgeObjectRelease();
  sub_100018888(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_100012A10(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000130EC(v0 + OBJC_IVAR____TtC10driverkitd19RealCodeSigningInfo_signingTime, &qword_10017C008);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000FA6CC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  sub_1000FD444(v1, *(void *)(*(void *)v0 + 32));
  return v1;
}

uint64_t sub_1000FA704()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  sub_100012DE4(v1, *(void *)(*(void *)v0 + 48));
  return v1;
}

uint64_t sub_1000FA73C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000FA770()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000FA7A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000FA7D8@<X0>(uint64_t a1@<X8>)
{
  return sub_10001BA68(*v1 + OBJC_IVAR____TtC10driverkitd19RealCodeSigningInfo_signingTime, a1, &qword_10017C008);
}

uint64_t sub_1000FA80C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1000F9BA8(a1, WitnessTable);
}

uint64_t sub_1000FA860@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_10001BA68(v1 + 16, a1, &qword_10017F6A0);
}

uint64_t sub_1000FA8B4(uint64_t a1)
{
  swift_beginAccess();
  sub_1000FD458(a1, v1 + 16);
  return swift_endAccess();
}

unint64_t sub_1000FA908(const __SecCode *a1, int a2)
{
  uint64_t v3 = v2;
  int v78 = a2;
  uint64_t v5 = sub_100004700(&qword_10017C008);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v80 = (uint64_t)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v79 = (char *)&v73 - v8;
  uint64_t v9 = sub_100004700((uint64_t *)&unk_10017FA60);
  __chkstk_darwin(v9 - 8);
  Swift::String v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v81 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  CFDictionaryRef information = 0;
  unint64_t v15 = SecCodeCopySigningInformation(a1, 6u, &information);
  if (v15) {
    goto LABEL_7;
  }
  CFDictionaryRef v16 = information;
  if (!information
    || (*(void *)&long long v86 = 0,
        type metadata accessor for CFString(),
        sub_1000FDDB8(&qword_10017FB80, (void (*)(uint64_t))type metadata accessor for CFString),
        CFDictionaryRef v17 = v16,
        static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(),
        v17,
        (unint64_t v18 = v86) == 0))
  {
LABEL_7:
    unint64_t v15 = v15;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v22 = 0xD000000000000022;
    *(void *)(v22 + 8) = 0x800000010014EB60;
    *(void *)(v22 + 16) = v15;
LABEL_18:
    *(_OWORD *)(v22 + 24) = 0u;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *(unsigned char *)(v22 + 72) = 45;
    swift_willThrow();
LABEL_19:

    return v15;
  }
  if (!*(void *)(v86 + 16))
  {
    long long v86 = 0u;
    long long v87 = 0u;
LABEL_15:
    swift_bridgeObjectRelease();
    sub_1000130EC((uint64_t)&v86, &qword_10017C018);
LABEL_17:
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v22 = 0xD00000000000002CLL;
    *(void *)(v22 + 8) = 0x800000010014EB90;
    *(void *)(v22 + 16) = &_mh_execute_header;
    goto LABEL_18;
  }
  Swift::String v19 = (id)kSecCodeInfoUnique;
  unint64_t v15 = v18;
  unint64_t v20 = sub_1000FD518((uint64_t)v19);
  if (v21)
  {
    sub_1000047DC(*(void *)(v18 + 56) + 32 * v20, (uint64_t)&v86);
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
  }

  uint64_t v23 = v81;
  if (!*((void *)&v87 + 1)) {
    goto LABEL_15;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v24 = v82;
  uint64_t v25 = *(void *)(v18 + 16);
  unint64_t v77 = v83;
  if (v25)
  {
    uint64_t v26 = v82;
    sub_100012DE4(v82, v83);
    Swift::String v27 = (id)kSecCodeInfoMainExecutable;
    unint64_t v28 = sub_1000FD518((uint64_t)v27);
    if (v29)
    {
      sub_1000047DC(*(void *)(v18 + 56) + 32 * v28, (uint64_t)&v86);
    }
    else
    {
      long long v86 = 0u;
      long long v87 = 0u;
    }

    uint64_t v24 = v26;
    uint64_t v23 = v81;
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
    sub_100012DE4(v82, v83);
  }
  if (!*((void *)&v87 + 1))
  {
    sub_1000130EC((uint64_t)&v86, &qword_10017C018);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v11, 1, 1, v12);
    goto LABEL_30;
  }
  int v31 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v11, v31 ^ 1u, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v12) == 1)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    sub_1000130EC((uint64_t)v11, (uint64_t *)&unk_10017FA60);
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v35 = 0xD000000000000035;
    *(void *)(v35 + 8) = 0x800000010014EBC0;
    *(void *)(v35 + 16) = &_mh_execute_header;
    *(_OWORD *)(v35 + 24) = 0u;
    *(_OWORD *)(v35 + 40) = 0u;
    *(_OWORD *)(v35 + 56) = 0u;
    *(unsigned char *)(v35 + 72) = 45;
    swift_willThrow();
    unint64_t v15 = v77;
    sub_100012A10(v24, v77);
    sub_100012A10(v24, v15);
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v14, v11, v12);
  if (!*(void *)(v18 + 16))
  {
    long long v86 = 0u;
    long long v87 = 0u;
LABEL_37:
    swift_bridgeObjectRelease();
    sub_1000130EC((uint64_t)&v86, &qword_10017C018);
LABEL_39:
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v40 = 0xD000000000000038;
    *(void *)(v40 + 8) = 0x800000010014EC00;
    *(void *)(v40 + 16) = &_mh_execute_header;
    *(_OWORD *)(v40 + 24) = 0u;
    *(_OWORD *)(v40 + 40) = 0u;
    *(_OWORD *)(v40 + 56) = 0u;
    *(unsigned char *)(v40 + 72) = 45;
    swift_willThrow();
    unint64_t v15 = v77;
    sub_100012A10(v24, v77);
    sub_100012A10(v24, v15);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v12);
    goto LABEL_19;
  }
  uint64_t v32 = (id)kSecCodeInfoIdentifier;
  unint64_t v33 = sub_1000FD518((uint64_t)v32);
  if (v34)
  {
    sub_1000047DC(*(void *)(v18 + 56) + 32 * v33, (uint64_t)&v86);
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
  }

  if (!*((void *)&v87 + 1)) {
    goto LABEL_37;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  uint64_t v76 = v82;
  uint64_t v74 = v24;
  unint64_t v75 = v83;
  (*(void (**)(long long *__return_ptr))(*(void *)v3 + 88))(&v86);
  uint64_t v36 = *((void *)&v87 + 1);
  if (*((void *)&v87 + 1))
  {
    uint64_t v37 = v88;
    sub_1000036B0(&v86, *((uint64_t *)&v87 + 1));
    sub_1001297F4(v36, v37);
    sub_1000130EC((uint64_t)&v86, &qword_10017F6A0);
    uint64_t v38 = v84;
    uint64_t v39 = v85;
    sub_1000036B0(&v82, v84);
    LOBYTE(v36) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 208))(v14, v38, v39);
    sub_10000478C((uint64_t)&v82);
  }
  else
  {
    sub_1000130EC((uint64_t)&v86, &qword_10017F6A0);
  }
  uint64_t v41 = (uint64_t *)sub_1000A20F0();
  uint64_t v42 = *v41;
  __int16 v43 = (void *)v41[1];
  swift_bridgeObjectRetain();
  v44._uint64_t countAndFlagsBits = v42;
  v44._object = v43;
  Swift::Bool v45 = String.hasPrefix(_:)(v44);
  swift_bridgeObjectRelease();
  if (v45 && (v36 & 1) != 0)
  {
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_100132F10;
    *(void *)(v46 + 56) = &type metadata for String;
    *(void *)(v46 + 64) = sub_10002A1DC();
    unint64_t v47 = v75;
    *(void *)(v46 + 32) = v76;
    *(void *)(v46 + 40) = v47;
    sub_10002A230();
    swift_bridgeObjectRetain();
    unint64_t v48 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

LABEL_46:
    uint64_t v53 = 0;
    unint64_t v54 = 0;
    goto LABEL_57;
  }
  if (v78 == 3) {
    goto LABEL_56;
  }
  uint64_t v50 = *v41;
  uint64_t v49 = (void *)v41[1];
  swift_bridgeObjectRetain();
  v51._uint64_t countAndFlagsBits = v50;
  v51._object = v49;
  Swift::Bool v52 = String.hasPrefix(_:)(v51);
  swift_bridgeObjectRelease();
  if (v52) {
    goto LABEL_46;
  }
  if (!*(void *)(v18 + 16))
  {
    long long v86 = 0u;
    long long v87 = 0u;
LABEL_55:
    sub_1000130EC((uint64_t)&v86, &qword_10017C018);
    goto LABEL_56;
  }
  uint64_t v55 = (id)kSecCodeInfoTeamIdentifier;
  unint64_t v56 = sub_1000FD518((uint64_t)v55);
  if (v57)
  {
    sub_1000047DC(*(void *)(v18 + 56) + 32 * v56, (uint64_t)&v86);
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
  }

  if (!*((void *)&v87 + 1)) {
    goto LABEL_55;
  }
  if (swift_dynamicCast())
  {
    uint64_t v53 = v82;
    unint64_t v54 = v83;
    goto LABEL_57;
  }
LABEL_56:
  static os_log_type_t.info.getter();
  sub_10002A230();
  uint64_t v58 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  uint64_t v53 = 0;
  unint64_t v54 = 1;
LABEL_57:
  if (!*(void *)(v18 + 16))
  {
    long long v86 = 0u;
    long long v87 = 0u;
LABEL_65:
    sub_1000130EC((uint64_t)&v86, &qword_10017C018);
    goto LABEL_66;
  }
  char v59 = (id)kSecCodeInfoEntitlementsDict;
  unint64_t v60 = sub_1000FD518((uint64_t)v59);
  if (v61)
  {
    sub_1000047DC(*(void *)(v18 + 56) + 32 * v60, (uint64_t)&v86);
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
  }

  if (!*((void *)&v87 + 1)) {
    goto LABEL_65;
  }
  sub_100004700((uint64_t *)&unk_10017FA80);
  if (!swift_dynamicCast())
  {
LABEL_66:
    unint64_t v62 = sub_100016BFC((uint64_t)_swiftEmptyArrayStorage);
    goto LABEL_67;
  }
  unint64_t v62 = v82;
LABEL_67:
  if (*(void *)(v18 + 16))
  {
    unint64_t v63 = sub_1000FD518((uint64_t)(id)kSecCodeInfoTimestamp);
    if (v64)
    {
      sub_1000047DC(*(void *)(v18 + 56) + 32 * v63, (uint64_t)&v86);
    }
    else
    {
      long long v86 = 0u;
      long long v87 = 0u;
    }
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
    CFStringRef v65 = (id)kSecCodeInfoTimestamp;
  }
  swift_bridgeObjectRelease();
  sub_100012A10(v74, v77);

  (*(void (**)(char *, uint64_t))(v81 + 8))(v14, v12);
  if (*((void *)&v87 + 1))
  {
    uint64_t v66 = type metadata accessor for Date();
    uint64_t v67 = (uint64_t)v79;
    int v68 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v67, v68 ^ 1u, 1, v66);
  }
  else
  {
    sub_1000130EC((uint64_t)&v86, &qword_10017C018);
    uint64_t v69 = type metadata accessor for Date();
    uint64_t v67 = (uint64_t)v79;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v79, 1, 1, v69);
  }
  uint64_t v70 = v80;
  sub_10001BA68(v67, v80, &qword_10017C008);
  type metadata accessor for RealCodeSigningInfo();
  unint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v62;
  *(void *)(v15 + 24) = v53;
  uint64_t v71 = v74;
  *(void *)(v15 + 32) = v54;
  *(void *)(v15 + 40) = v71;
  uint64_t v72 = v76;
  *(void *)(v15 + 48) = v77;
  *(void *)(v15 + 56) = v72;
  *(void *)(v15 + 64) = v75;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  sub_100029900(v70, v15 + OBJC_IVAR____TtC10driverkitd19RealCodeSigningInfo_signingTime, &qword_10017C008);
  sub_1000130EC(v67, &qword_10017C008);

  return v15;
}

unint64_t sub_1000FB584(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017FD78);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    id v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000FD518((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v7;
    uint64_t v10 = (void *)(v2[7] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000FB69C@<X0>(__SecRequirement *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  return sub_1000FB6D4(a1, a2, a3, a4, 0, a5);
}

uint64_t sub_1000FB6B8@<X0>(__SecRequirement *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  return sub_1000FB6D4(a1, a2, a3, a4, 1, a5);
}

uint64_t sub_1000FB6D4@<X0>(__SecRequirement *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t *a6@<X8>)
{
  void (*v23)(SecStaticCodeRef *__return_ptr);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  char *v46;
  NSURL *v47;
  CFURLRef v48;
  CFURLRef v49;
  uint64_t v50;
  uint64_t inited;
  uint64_t v52;
  CFStringRef v53;
  CFDictionaryRef isa;
  unsigned int v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  NSURL *v61;
  CFURLRef v62;
  CFURLRef v63;
  char *v64;
  const __SecCode *v65;
  int v66;
  uint64_t (*v67)(void);
  const __SecCode *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  Swift::String v73;
  long long v74;
  uint64_t v75;
  int v76;
  const __SecCode *v77;
  SecCSFlags v78;
  const __SecCode *v79;
  __CFString *v80;
  unsigned int v81;
  __SecRequirement *v82;
  SecCSFlags v83;
  int v84;
  OSStatus v85;
  unsigned int v86;
  Swift::String v87;
  long long v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  __CFString *v92;
  unsigned int v93;
  OSStatus v94;
  Swift::String v95;
  long long v96;
  unsigned int v97;
  Swift::String v98;
  long long v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  Swift::String v106;
  Swift::String v107;
  Swift::String v108;
  long long v109;
  uint64_t v110;
  void (*v111)(long long *__return_ptr);
  uint64_t v112;
  __SecRequirement *v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  __SecRequirement *v122;
  SecRequirementRef v123[3];
  uint64_t v124;
  uint64_t v125;
  SecStaticCodeRef v126[3];
  uint64_t v127;
  uint64_t v128;
  long long v129;
  long long v130;
  uint64_t v131;
  void v132[3];
  uint64_t v133;
  uint64_t v134;
  void v135[5];

  os_log_t v114 = a6;
  uint64_t v7 = v6;
  unint64_t v118 = a3;
  Swift::String v119 = a4;
  uint64_t v117 = a2;
  char v121 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  unint64_t v120 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100004700((uint64_t *)&unk_10017FA60);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  unint64_t v15 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  unint64_t v18 = (char *)&v110 - v17;
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 112))(v135, v16);
  sub_10001BA68((uint64_t)v135, (uint64_t)v132, &qword_10017BC78);
  uint64_t v19 = v133;
  uint64_t v20 = sub_1000130EC((uint64_t)v132, &qword_10017BC78);
  if (v19 || (a5 & 1) == 0) {
    goto LABEL_18;
  }
  char v21 = *(void (**)(uint64_t))(*(void *)a1 + 264);
  unint64_t v113 = a1;
  v21(v20);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v22(v18, 1, v121) != 1)
  {
    unint64_t v112 = v10;
    uint64_t v23 = *(void (**)(SecStaticCodeRef *__return_ptr))(*(void *)v6 + 88);
    uint64_t v24 = *(void *)v6 + 88;
    uint64_t v116 = v6;
    v23(v126);
    uint64_t v25 = v127;
    if (v127)
    {
      unint64_t v110 = v24;
      uint64_t v111 = (void (*)(long long *__return_ptr))v23;
      uint64_t v26 = v128;
      sub_1000036B0(v126, v127);
      sub_1000B07CC(v25, v26);
      sub_1000130EC((uint64_t)v126, &qword_10017F6A0);
      unint64_t v28 = v124;
      Swift::String v27 = v125;
      sub_1000036B0(v123, v124);
      sub_10001BA68((uint64_t)v18, (uint64_t)v15, (uint64_t *)&unk_10017FA60);
      char v29 = v121;
      if (v22(v15, 1, v121) == 1)
      {
        __break(1u);
        JUMPOUT(0x1000FC7E0);
      }
      (*(void (**)(long long *__return_ptr, char *, uint64_t, uint64_t))(v27 + 24))(&v129, v15, v28, v27);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v15, v29);
      sub_10000478C((uint64_t)v123);
      a1 = v113;
      if (*((void *)&v130 + 1))
      {
        sub_10000372C(&v129, (uint64_t)v132);
        unint64_t v30 = v133;
        int v31 = v134;
        sub_1000036B0(v132, v133);
        uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 56))(v30, v31);
        if (v33)
        {
          char v34 = v32;
          uint64_t v35 = v33;
          uint64_t v7 = v116;
          v111(&v129);
          uint64_t v36 = *((void *)&v130 + 1);
          if (*((void *)&v130 + 1))
          {
            uint64_t v37 = v131;
            sub_1000036B0(&v129, *((uint64_t *)&v130 + 1));
            sub_1001297F4(v36, v37);
            sub_1000130EC((uint64_t)&v129, &qword_10017F6A0);
            uint64_t v38 = v127;
            uint64_t v39 = v128;
            sub_1000036B0(v126, v127);
            uint64_t v40 = v38;
            uint64_t v7 = v116;
            uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v39 + 136))(v34, v35, 0, v40, v39);
            swift_bridgeObjectRelease();
            sub_10000478C((uint64_t)v126);
            sub_1000130EC((uint64_t)v18, (uint64_t *)&unk_10017FA60);
            uint64_t v10 = v112;
            if (v41)
            {
              sub_1000130EC((uint64_t)v135, &qword_10017BC78);
              sub_10000469C((uint64_t)v132, (uint64_t)v135);
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            sub_1000130EC((uint64_t)&v129, &qword_10017F6A0);
            sub_1000130EC((uint64_t)v18, (uint64_t *)&unk_10017FA60);
            uint64_t v10 = v112;
          }
          sub_10000478C((uint64_t)v132);
          goto LABEL_18;
        }
        sub_1000130EC((uint64_t)v18, (uint64_t *)&unk_10017FA60);
        sub_10000478C((uint64_t)v132);
        goto LABEL_14;
      }
    }
    else
    {
      sub_1000130EC((uint64_t)v126, &qword_10017F6A0);
      Swift::String v129 = 0u;
      os_log_type_t v130 = 0u;
      uint64_t v131 = 0;
      a1 = v113;
    }
    sub_1000130EC((uint64_t)v18, (uint64_t *)&unk_10017FA60);
    sub_1000130EC((uint64_t)&v129, &qword_10017BC78);
LABEL_14:
    uint64_t v7 = v116;
    uint64_t v10 = v112;
    goto LABEL_18;
  }
  sub_1000130EC((uint64_t)v18, (uint64_t *)&unk_10017FA60);
  a1 = v113;
LABEL_18:
  sub_10001BA68((uint64_t)v135, (uint64_t)&v129, &qword_10017BC78);
  if (!*((void *)&v130 + 1))
  {
    sub_1000130EC((uint64_t)&v129, &qword_10017BC78);
    sub_100012E3C();
    swift_allocError();
    *(void *)unint64_t v56 = 0xD00000000000003DLL;
    *(void *)(v56 + 8) = 0x800000010014F000;
    *(_OWORD *)(v56 + 16) = 0u;
    *(_OWORD *)(v56 + 32) = 0u;
    *(_OWORD *)(v56 + 48) = 0u;
    *(void *)(v56 + 64) = 0;
    *(unsigned char *)(v56 + 72) = 9;
    swift_willThrow();
    return sub_1000130EC((uint64_t)v135, &qword_10017BC78);
  }
  uint64_t v116 = v7;
  sub_10000372C(&v129, (uint64_t)v132);
  v126[0] = 0;
  uint64_t v42 = v119;
  if (v119)
  {
    __int16 v43 = v133;
    Swift::String v44 = v134;
    sub_1000036B0(v132, v133);
    Swift::Bool v45 = *(void (**)(uint64_t, uint64_t))(v44 + 64);
    swift_bridgeObjectRetain();
    uint64_t v46 = v120;
    v45(v43, v44);
    URL._bridgeToObjectiveC()(v47);
    uint64_t v49 = v48;
    uint64_t v50 = v121;
    unint64_t v113 = *(__SecRequirement **)(v10 + 8);
    ((void (*)(char *, uint64_t))v113)(v46, v121);
    sub_100004700(&qword_10017FB78);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100132F10;
    Swift::Bool v52 = v118;
    *(void *)(inited + 32) = kSecCodeAttributeArchitecture;
    *(void *)(inited + 40) = v52;
    *(void *)(inited + 48) = v42;
    uint64_t v53 = (id)kSecCodeAttributeArchitecture;
    sub_1000FB584(inited);
    type metadata accessor for CFString();
    sub_1000FDDB8(&qword_10017FB80, (void (*)(uint64_t))type metadata accessor for CFString);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v55 = SecStaticCodeCreateWithPathAndAttributes(v49, 0, isa, v126);

    if (v55)
    {
LABEL_28:
      *(void *)&Swift::String v129 = 0;
      *((void *)&v129 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      *(void *)&Swift::String v129 = 0xD000000000000025;
      *((void *)&v129 + 1) = 0x800000010014F040;
      uint64_t v69 = v50;
      uint64_t v70 = v133;
      uint64_t v71 = v134;
      sub_1000036B0(v132, v133);
      uint64_t v72 = v120;
      (*(void (**)(uint64_t, uint64_t))(v71 + 64))(v70, v71);
      sub_1000FDDB8(&qword_10017BC98, (void (*)(uint64_t))&type metadata accessor for URL);
      v73._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v73);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v113)(v72, v69);
      uint64_t v74 = v129;
      sub_100012E3C();
      swift_allocError();
      *(_OWORD *)unint64_t v75 = v74;
      *(void *)(v75 + 16) = v55;
LABEL_29:
      *(_OWORD *)(v75 + 24) = 0u;
      *(_OWORD *)(v75 + 40) = 0u;
      *(_OWORD *)(v75 + 56) = 0u;
      *(unsigned char *)(v75 + 72) = 45;
      swift_willThrow();
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v58 = v133;
    char v59 = v134;
    sub_1000036B0(v132, v133);
    unint64_t v60 = v120;
    (*(void (**)(uint64_t, uint64_t))(v59 + 64))(v58, v59);
    URL._bridgeToObjectiveC()(v61);
    unint64_t v63 = v62;
    char v64 = v60;
    uint64_t v50 = v121;
    unint64_t v113 = *(__SecRequirement **)(v10 + 8);
    ((void (*)(char *, uint64_t))v113)(v64, v121);
    uint64_t v55 = SecStaticCodeCreateWithPath(v63, 0, v126);

    if (v55) {
      goto LABEL_28;
    }
  }
  CFStringRef v65 = v126[0];
  if (!v126[0]) {
    goto LABEL_28;
  }
  uint64_t v66 = v117;
  switch((char)v117)
  {
    case 1:
      int v68 = v126[0];
      uint64_t v76 = *(_DWORD *)sub_1000A3CDC() | 0x20000000;
      if (!v119) {
        v76 |= *(_DWORD *)sub_1000A3CE8();
      }
      unint64_t v77 = v68;
      int v78 = v76;
      goto LABEL_43;
    case 2:
      unint64_t v79 = v126[0];
      goto LABEL_71;
    case 3:
      sub_100012E3C();
      swift_allocError();
      *(void *)unint64_t v75 = 0xD00000000000002ALL;
      *(void *)(v75 + 8) = 0x800000010014F0C0;
      *(void *)(v75 + 16) = &_mh_execute_header;
      goto LABEL_29;
    case 4:
      v123[0] = 0;
      int v68 = v126[0];
      uint64_t v80 = (__CFString *)String._bridgeToObjectiveC()();
      uint64_t v81 = SecRequirementCreateWithString(v80, 0, v123);

      if (v81 || !v123[0])
      {
        sub_100012E3C();
        swift_allocError();
        *(void *)int v91 = 0xD000000000000020;
        *(void *)(v91 + 8) = 0x800000010014F090;
        *(void *)(v91 + 16) = v81;
        goto LABEL_62;
      }
      unint64_t v82 = v123[0];
      unint64_t v83 = *(_DWORD *)sub_1000A3CD0();
      uint64_t v84 = *(_DWORD *)sub_1000A3CF4();
      if (v83)
      {
        if ((v84 & ~v83) == 0) {
          goto LABEL_51;
        }
      }
      else if (!v84)
      {
        unint64_t v83 = 0x20000000;
        goto LABEL_65;
      }
      v83 |= v84;
LABEL_51:
      if ((v83 & 0x20000000) == 0) {
        v83 |= 0x20000000u;
      }
LABEL_65:
      if (!v119) {
        v83 |= *(_DWORD *)sub_1000A3CE8();
      }
      uint64_t v94 = SecStaticCodeCheckValidity(v68, v83, v82);
      if (v94) {
        goto LABEL_68;
      }

      goto LABEL_71;
    case 5:
      unint64_t v77 = v126[0];
      int v68 = v77;
      int v78 = 536870918;
LABEL_43:
      uint64_t v85 = SecStaticCodeCheckValidity(v77, v78, 0);
      if (!v85) {
        goto LABEL_71;
      }
      long long v86 = v85;
      *(void *)&Swift::String v129 = 0;
      *((void *)&v129 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      *(void *)&Swift::String v129 = 0xD00000000000001DLL;
      *((void *)&v129 + 1) = 0x800000010014F070;
      v123[0] = a1;
      type metadata accessor for OSExtension(0);
      sub_1000FDDB8((unint64_t *)&qword_10017BC90, (void (*)(uint64_t))type metadata accessor for OSExtension);
      v87._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v87);
      swift_bridgeObjectRelease();
      uint64_t v88 = v129;
      sub_100012E3C();
      swift_allocError();
      *(_OWORD *)uint64_t v89 = v88;
      *(void *)(v89 + 16) = v86;
      *(_OWORD *)(v89 + 24) = 0u;
      *(_OWORD *)(v89 + 40) = 0u;
      *(_OWORD *)(v89 + 56) = 0u;
      uint64_t v90 = 45;
      goto LABEL_45;
    default:
      uint64_t v67 = *(uint64_t (**)(void))(*(void *)a1 + 208);
      int v68 = v126[0];
      if (v67()) {
        goto LABEL_57;
      }
      type metadata accessor for KernelExtension(0);
      if (swift_dynamicCastClass()) {
        goto LABEL_57;
      }
      type metadata accessor for DriverExtension(0);
      if (!swift_dynamicCastClass())
      {
        *(void *)&Swift::String v129 = 0;
        *((void *)&v129 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(59);
        v106._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        v106._object = (void *)0x800000010014F0F0;
        String.append(_:)(v106);
        v123[0] = a1;
        type metadata accessor for OSExtension(0);
        sub_1000FDDB8((unint64_t *)&qword_10017BC90, (void (*)(uint64_t))type metadata accessor for OSExtension);
        v107._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v107);
        swift_bridgeObjectRelease();
        v108._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
        v108._object = (void *)0x800000010014F110;
        String.append(_:)(v108);
        uint64_t v109 = v129;
        sub_100012E3C();
        swift_allocError();
        *(_OWORD *)uint64_t v89 = v109;
        *(_OWORD *)(v89 + 16) = 0u;
        *(_OWORD *)(v89 + 32) = 0u;
        *(_OWORD *)(v89 + 48) = 0u;
        *(void *)(v89 + 64) = 0;
        uint64_t v90 = 9;
LABEL_45:
        *(unsigned char *)(v89 + 72) = v90;
        swift_willThrow();

        goto LABEL_30;
      }
      if (qword_100195FC8 != -1) {
        swift_once();
      }
      swift_bridgeObjectRetain();
LABEL_57:
      v123[0] = 0;
      unint64_t v92 = (__CFString *)String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v93 = SecRequirementCreateWithString(v92, 0, v123);

      if (v93 || !v123[0])
      {
        *(void *)&Swift::String v129 = 0;
        *((void *)&v129 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease();
        *(void *)&Swift::String v129 = 0xD000000000000024;
        *((void *)&v129 + 1) = 0x800000010014F130;
        Swift::UInt v122 = a1;
        type metadata accessor for OSExtension(0);
        sub_1000FDDB8((unint64_t *)&qword_10017BC90, (void (*)(uint64_t))type metadata accessor for OSExtension);
        v95._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v95);
        swift_bridgeObjectRelease();
        int64_t v96 = v129;
        sub_100012E3C();
        swift_allocError();
        *(_OWORD *)int v91 = v96;
        *(void *)(v91 + 16) = v93;
LABEL_62:
        *(_OWORD *)(v91 + 24) = 0u;
        *(_OWORD *)(v91 + 40) = 0u;
        *(_OWORD *)(v91 + 56) = 0u;
        *(unsigned char *)(v91 + 72) = 45;
        swift_willThrow();
        goto LABEL_69;
      }
      unint64_t v82 = v123[0];
      uint64_t v94 = SecStaticCodeCheckValidity(v68, 0x40000011u, v82);
      if (v94)
      {
LABEL_68:
        uint64_t v97 = v94;
        *(void *)&Swift::String v129 = 0;
        *((void *)&v129 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        *(void *)&Swift::String v129 = 0xD00000000000001DLL;
        *((void *)&v129 + 1) = 0x800000010014F070;
        Swift::UInt v122 = a1;
        type metadata accessor for OSExtension(0);
        sub_1000FDDB8((unint64_t *)&qword_10017BC90, (void (*)(uint64_t))type metadata accessor for OSExtension);
        v98._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v98);
        swift_bridgeObjectRelease();
        Swift::Int v99 = v129;
        sub_100012E3C();
        swift_allocError();
        *(_OWORD *)Swift::Int v100 = v99;
        *(void *)(v100 + 16) = v97;
        *(_OWORD *)(v100 + 24) = 0u;
        *(_OWORD *)(v100 + 40) = 0u;
        *(_OWORD *)(v100 + 56) = 0u;
        *(unsigned char *)(v100 + 72) = 45;
        swift_willThrow();

LABEL_69:
        sub_1000130EC((uint64_t)v135, &qword_10017BC78);

        goto LABEL_31;
      }

      uint64_t v66 = v117;
LABEL_71:
      Swift::String v101 = v115;
      uint64_t v102 = sub_1000FA908(v65, v66);
      if (v101)
      {
        sub_1000130EC((uint64_t)v135, &qword_10017BC78);

        goto LABEL_31;
      }
      uint64_t v103 = v102;
      unint64_t v104 = type metadata accessor for RealCodeSigningInfo();
      unint64_t v105 = v114;
      v114[3] = v104;
      v105[4] = sub_1000FDDB8(&qword_10017FD80, (void (*)(uint64_t))type metadata accessor for RealCodeSigningInfo);

      *unint64_t v105 = v103;
LABEL_30:
      sub_1000130EC((uint64_t)v135, &qword_10017BC78);
LABEL_31:

      return sub_10000478C((uint64_t)v132);
  }
}

uint64_t sub_1000FC7F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)a1 + 144))(v8);
  uint64_t v11 = (uint64_t *)sub_1000A20F0();
  uint64_t v12 = *v11;
  uint64_t v13 = (void *)v11[1];
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = v12;
  v14._object = v13;
  Swift::Bool v15 = String.hasPrefix(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_bridgeObjectRelease();
  if (v15) {
    return 1;
  }
  (*(void (**)(SecRequirementRef *__return_ptr, uint64_t))(*(void *)a1 + 112))(requirement, v16);
  if (!*((void *)&v53 + 1))
  {
    sub_1000130EC((uint64_t)requirement, &qword_10017BC78);
    return 0;
  }
  sub_10000372C((long long *)requirement, (uint64_t)v54);
  SecStaticCodeRef staticCode = 0;
  uint64_t v18 = v55;
  uint64_t v19 = v56;
  sub_1000036B0(v54, v55);
  (*(void (**)(uint64_t, uint64_t))(v19 + 64))(v18, v19);
  URL._bridgeToObjectiveC()(v20);
  CFURLRef v22 = v21;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_100004700(&qword_10017FB78);
  uint64_t inited = swift_initStackObject();
  long long v48 = xmmword_100132F10;
  *(_OWORD *)(inited + 16) = xmmword_100132F10;
  *(void *)(inited + 32) = kSecCodeAttributeArchitecture;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = a3;
  CFStringRef v24 = (id)kSecCodeAttributeArchitecture;
  swift_bridgeObjectRetain();
  sub_1000FB584(inited);
  type metadata accessor for CFString();
  sub_1000FDDB8(&qword_10017FB80, (void (*)(uint64_t))type metadata accessor for CFString);
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v26 = SecStaticCodeCreateWithPathAndAttributes(v22, 0, isa, &staticCode);

  SecStaticCodeRef v27 = staticCode;
  if (v26) {
    goto LABEL_5;
  }
  if (!staticCode) {
    goto LABEL_11;
  }
  CFDictionaryRef information = 0;
  unint64_t v28 = staticCode;
  OSStatus v29 = SecCodeCopySigningInformation(v28, 2u, &information);
  CFDictionaryRef v30 = information;
  if (v29) {
    goto LABEL_9;
  }
  if (!information) {
    goto LABEL_10;
  }
  requirement[0] = 0;
  CFDictionaryRef v30 = information;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  SecRequirementRef v31 = requirement[0];
  if (!requirement[0])
  {
LABEL_9:

LABEL_10:
    goto LABEL_11;
  }
  if (*((void *)requirement[0] + 2))
  {
    uint64_t v32 = (id)kSecCodeInfoIdentifier;
    unint64_t v33 = sub_1000FD518((uint64_t)v32);
    if (v34)
    {
      sub_1000047DC(*((void *)v31 + 7) + 32 * v33, (uint64_t)requirement);
    }
    else
    {
      *(_OWORD *)requirement = 0u;
      long long v53 = 0u;
    }
  }
  else
  {
    *(_OWORD *)requirement = 0u;
    long long v53 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v53 + 1))
  {

    sub_1000130EC((uint64_t)requirement, &qword_10017C018);
    sub_10000478C((uint64_t)v54);
    return 2;
  }
  sub_1000130EC((uint64_t)requirement, &qword_10017C018);
  requirement[0] = 0;
  uint64_t v35 = (__CFString *)String._bridgeToObjectiveC()();
  OSStatus v36 = SecRequirementCreateWithString(v35, 0, requirement);

  SecRequirementRef v37 = requirement[0];
  if (v36 || !requirement[0])
  {
    static os_log_type_t.error.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = v48;
    *(void *)(v39 + 56) = &type metadata for Int32;
    *(void *)(v39 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v39 + 32) = v36;
    sub_10002A230();
    uint64_t v40 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
LABEL_29:

    SecStaticCodeRef v27 = staticCode;
LABEL_5:

LABEL_11:
    sub_10000478C((uint64_t)v54);
    return 0;
  }
  uint64_t v38 = requirement[0];
  if (SecStaticCodeCheckValidity(v28, 0x20000000u, v38))
  {

    sub_10000478C((uint64_t)v54);
    return 3;
  }
  SecRequirementRef v49 = 0;
  uint64_t v41 = (__CFString *)String._bridgeToObjectiveC()();
  OSStatus v42 = SecRequirementCreateWithString(v41, 0, &v49);

  SecRequirementRef v43 = v49;
  if (v42 || !v49)
  {
    static os_log_type_t.error.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = v48;
    *(void *)(v46 + 56) = &type metadata for Int32;
    *(void *)(v46 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v46 + 32) = v42;
    sub_10002A230();
    unint64_t v47 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  Swift::String v44 = v49;
  OSStatus v45 = SecStaticCodeCheckValidity(v28, 0x20000000u, v44);

  sub_10000478C((uint64_t)v54);
  if (v45) {
    return 3;
  }
  else {
    return 5;
  }
}

uint64_t sub_1000FCE7C()
{
  sub_1000130EC(v0 + 16, &qword_10017F6A0);

  return _swift_deallocClassInstance(v0, 56, 7);
}

double sub_1000FCEBC()
{
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  return result;
}

uint64_t sub_1000FCEEC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t sub_1000FCF30()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t sub_1000FCF74()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t sub_1000FCFB8(uint64_t a1)
{
  uint64_t v3 = *v1;
  v7[3] = type metadata accessor for RealCodeSigningResolver();
  v7[4] = &off_100172548;
  v7[0] = v3;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  sub_10000464C(a1, v4);
  swift_retain();
  sub_1000FD1E4((uint64_t)v7, v4, v5);
  sub_10000469C(a1, (uint64_t)v7);
  return (*(uint64_t (**)(void *))(*(void *)v3 + 96))(v7);
}

uint64_t sub_1000FD070(uint64_t a1)
{
  uint64_t v2 = v1;
  v7[3] = type metadata accessor for RealCodeSigningResolver();
  v7[4] = &off_100172548;
  v7[0] = v1;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  sub_10000464C(a1, v4);
  swift_retain();
  sub_1000FD1E4((uint64_t)v7, v4, v5);
  sub_10000469C(a1, (uint64_t)v7);
  return (*(uint64_t (**)(void *))(*(void *)v2 + 96))(v7);
}

void sub_1000FD128()
{
  _StringGuts.grow(_:)(761);
  v0._object = (void *)0x800000010014ED10;
  v0._uint64_t countAndFlagsBits = 0xD0000000000002EFLL;
  String.append(_:)(v0);
  uint64_t v1 = (uint64_t *)sub_1000A215C();
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)v1[1];
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x737473697865205DLL;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  qword_100199910 = 0;
  *(void *)algn_100199918 = 0xE000000000000000;
}

uint64_t sub_1000FD1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000469C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100004700(&qword_10017FB88);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_10000478C(a1);
}

uint64_t sub_1000FD260(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017FB88);
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32);

  return v5(v4, v4, a1);
}

uint64_t sub_1000FD2CC()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_1000FD318()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_1000FD370()
{
  return Hasher._finalize()();
}

uint64_t sub_1000FD3D8()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_1000FD444(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000FD458(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017F6A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CFString()
{
  if (!qword_10017FD60)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10017FD60);
    }
  }
}

unint64_t sub_1000FD518(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString();
  sub_1000FDDB8(&qword_10017FD70, (void (*)(uint64_t))type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1000FDC5C(a1, v2);
}

uint64_t type metadata accessor for RealCodeSigningResolver()
{
  return self;
}

unint64_t sub_1000FD5F4()
{
  unint64_t result = qword_10017FB90;
  if (!qword_10017FB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FB90);
  }
  return result;
}

unint64_t sub_1000FD650()
{
  unint64_t result = qword_10017FB98;
  if (!qword_10017FB98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FB98);
  }
  return result;
}

unint64_t sub_1000FD6A8()
{
  unint64_t result = qword_10017FBA0;
  if (!qword_10017FBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FBA0);
  }
  return result;
}

uint64_t sub_1000FD6FC(uint64_t a1)
{
  uint64_t result = sub_1000FDDB8(&qword_10017FBA8, (void (*)(uint64_t))type metadata accessor for RealCodeSigningInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for RealCodeSigningInfo()
{
  uint64_t result = qword_100196650;
  if (!qword_100196650) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CodeSigningTeam(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CodeSigningTeam(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodeSigningTeam()
{
  return &type metadata for CodeSigningTeam;
}

uint64_t *initializeBufferWithCopyOfBuffer for CodeSigningHash(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100012DE4(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for CodeSigningHash(uint64_t a1)
{
  return sub_100012A10(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for CodeSigningHash(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100012DE4(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100012A10(v5, v6);
  return a1;
}

uint64_t *assignWithTake for CodeSigningHash(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100012A10(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodeSigningHash(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CodeSigningHash(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodeSigningHash()
{
  return &type metadata for CodeSigningHash;
}

ValueMetadata *type metadata accessor for CodeSignatureType()
{
  return &type metadata for CodeSignatureType;
}

unsigned char *_s10driverkitd17CodeSignatureTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FDAC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignatureResolutionStrategy()
{
  return &type metadata for SignatureResolutionStrategy;
}

uint64_t sub_1000FDAFC()
{
  return type metadata accessor for RealCodeSigningInfo();
}

void sub_1000FDB04()
{
  sub_10001A460();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1000FDBCC()
{
  return sub_1000FDDB8(&qword_10017FB80, (void (*)(uint64_t))type metadata accessor for CFString);
}

uint64_t sub_1000FDC14()
{
  return sub_1000FDDB8(&qword_10017FD68, (void (*)(uint64_t))type metadata accessor for CFString);
}

unint64_t sub_1000FDC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString();
    unsigned int v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_1000FDDB8(&qword_10017FD70, (void (*)(uint64_t))type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_1000FDDB8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1000FDE04()
{
  return &unk_1001727E0;
}

void *sub_1000FDE10()
{
  return &unk_1001727F0;
}

void *sub_1000FDE1C()
{
  return &unk_100172800;
}

uint64_t sub_1000FDE28(uint64_t a1)
{
  uint64_t v19 = a1;
  uint64_t v1 = sub_1000FE160((uint64_t)sub_1000FE090, (uint64_t)v18, (uint64_t)&off_100172820);
  if (*(void *)(v1 + 16) == 1)
  {
    uint64_t v2 = *(unsigned __int8 *)(v1 + 32);
    swift_bridgeObjectRelease();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_100132F10;
    char v20 = v2;
    sub_100004700(&qword_10017FD88);
    uint64_t v4 = String.init<A>(describing:)();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = sub_10002A1DC();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    sub_10002A230();
    id v7 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
  else
  {
    static os_log_type_t.error.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_100132F10;
    uint64_t v9 = Array.description.getter();
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    *(void *)(v8 + 56) = &type metadata for String;
    unint64_t v12 = sub_10002A1DC();
    *(void *)(v8 + 64) = v12;
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    sub_10002A230();
    uint64_t v13 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_100132F10;
    uint64_t v15 = StaticString.description.getter();
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = v12;
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v16;
    id v7 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRelease();

  return v2;
}

uint64_t sub_1000FE090(char *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  char v3 = *a1;
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  sub_1000036B0(v2, v4);
  sub_1000408BC(v4, v5);
  uint64_t v6 = v13;
  uint64_t v7 = v14;
  sub_1000036B0(v12, v13);
  uint64_t v10 = &type metadata for KextsOutOfOSImageFeatureFlags;
  uint64_t v11 = &off_100172870;
  v9[0] = v3;
  LOBYTE(v4) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v6, v7);
  sub_10000478C((uint64_t)v9);
  sub_10000478C((uint64_t)v12);
  return v4 & 1;
}

uint64_t sub_1000FE160(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t (*)(char *))result;
    unint64_t v7 = 0;
    uint64_t v8 = _swiftEmptyArrayStorage;
    unint64_t v12 = (uint64_t (*)(char *))result;
    while (v7 < *(void *)(a3 + 16))
    {
      char v11 = *(unsigned char *)(a3 + v7 + 32);
      char v13 = v11;
      uint64_t result = v6(&v13);
      if (v3)
      {
        swift_release();
        goto LABEL_14;
      }
      if (result)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = v8;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1000FE748(0, v8[2] + 1, 1);
          uint64_t v8 = v14;
        }
        unint64_t v10 = v8[2];
        unint64_t v9 = v8[3];
        if (v10 >= v9 >> 1)
        {
          uint64_t result = (uint64_t)sub_1000FE748((char *)(v9 > 1), v10 + 1, 1);
          uint64_t v8 = v14;
        }
        v8[2] = v10 + 1;
        *((unsigned char *)v8 + v10 + 32) = v11;
        uint64_t v6 = v12;
      }
      if (v5 == ++v7) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_14:
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  return result;
}

const char *sub_1000FE2A8()
{
  return "KextsOutOfOSImage";
}

const char *sub_1000FE2BC()
{
  if (*v0) {
    return "kextsInKDK";
  }
  else {
    return "kextsOutOfOS";
  }
}

void sub_1000FE2EC(void *a1@<X8>)
{
  *a1 = &off_100172848;
}

uint64_t sub_1000FE2FC()
{
  v0._uint64_t countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

void *sub_1000FE390()
{
  return &unk_100172810;
}

unint64_t sub_1000FE39C()
{
  return 0xD000000000000015;
}

unint64_t sub_1000FE3D4()
{
  unint64_t result = qword_10017FD90;
  if (!qword_10017FD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FD90);
  }
  return result;
}

unint64_t sub_1000FE42C()
{
  unint64_t result = qword_10017FD98;
  if (!qword_10017FD98)
  {
    sub_1000126B8(&qword_10017FDA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FD98);
  }
  return result;
}

ValueMetadata *type metadata accessor for DriverKitDaemonPaths()
{
  return &type metadata for DriverKitDaemonPaths;
}

unsigned char *storeEnumTagSinglePayload for KextsOutOfOSImageFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FE564);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KextsOutOfOSImageFeatureFlags()
{
  return &type metadata for KextsOutOfOSImageFeatureFlags;
}

ValueMetadata *type metadata accessor for ThirdPartyDriverKeys()
{
  return &type metadata for ThirdPartyDriverKeys;
}

void *initializeWithCopy for SupportsThirdPartyDriversDeviceProperty(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SupportsThirdPartyDriversDeviceProperty(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SupportsThirdPartyDriversDeviceProperty(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for SupportsThirdPartyDriversDeviceProperty(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SupportsThirdPartyDriversDeviceProperty(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SupportsThirdPartyDriversDeviceProperty(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SupportsThirdPartyDriversDeviceProperty()
{
  return &type metadata for SupportsThirdPartyDriversDeviceProperty;
}

char *sub_1000FE748(char *a1, int64_t a2, char a3)
{
  __n128 result = sub_1000FE768(a1, a2, a3, *v3);
  void *v3 = result;
  return result;
}

char *sub_1000FE768(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017FDA8);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    unint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

uint64_t sub_1000FE854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int sub_1000FE874()
{
  return Hasher._finalize()();
}

uint64_t sub_1000FE8C0()
{
  return String.hash(into:)();
}

Swift::Int sub_1000FE8C8()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000FE910()
{
  return Hasher._finalize()();
}

uint64_t sub_1000FE998()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000FEA1C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000FEAA0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t sub_1000FEB44(unint64_t a1, unint64_t a2)
{
  switch(a1 >> 62)
  {
    case 1uLL:
      if (a2 >> 62 != 1) {
        goto LABEL_37;
      }
      if (*(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x10) != *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10)
        || *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) != *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18))
      {
        goto LABEL_13;
      }
      goto LABEL_28;
    case 2uLL:
      if (a2 >> 62 != 2) {
        goto LABEL_37;
      }
      uint64_t v6 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v5 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      unint64_t v7 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v9 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v8 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      unint64_t v10 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x30);
      if (*(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x10) != *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10)
        || *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) != *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18))
      {
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v12 & 1) == 0) {
          return result;
        }
      }
      BOOL v13 = v6 == v9 && v5 == v8;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        sub_100059928(v7);
        swift_bridgeObjectRetain();
        sub_100059928(v10);
        char v14 = sub_1000FEB44(v7, v10);
        swift_bridgeObjectRelease();
        sub_10005994C(v10);
        swift_bridgeObjectRelease();
        sub_10005994C(v7);
        if (v14) {
          goto LABEL_28;
        }
      }
LABEL_37:
      uint64_t result = 0;
      break;
    case 3uLL:
      *((void *)&v15 + 1) = a1;
      *(void *)&long long v15 = a1 + 0x4000000000000000;
      switch((unint64_t)(v15 >> 3))
      {
        case 1uLL:
          if (a2 != 0xC000000000000008) {
            goto LABEL_37;
          }
          goto LABEL_28;
        case 2uLL:
          if (a2 != 0xC000000000000010) {
            goto LABEL_37;
          }
          goto LABEL_28;
        case 3uLL:
          if (a2 != 0xC000000000000018) {
            goto LABEL_37;
          }
          goto LABEL_28;
        case 4uLL:
          if (a2 != 0xC000000000000020) {
            goto LABEL_37;
          }
          goto LABEL_28;
        default:
          if (a2 == 0xC000000000000000) {
            goto LABEL_28;
          }
          goto LABEL_37;
      }
    default:
      if (a2 >> 62) {
        goto LABEL_37;
      }
      if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24))
      {
LABEL_28:
        uint64_t result = 1;
      }
      else
      {
LABEL_13:
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      break;
  }
  return result;
}

void sub_1000FEDA0(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      Swift::UInt v3 = 6;
      goto LABEL_4;
    case 2uLL:
      unint64_t v4 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x30);
      Hasher._combine(_:)(7uLL);
      swift_bridgeObjectRetain();
      sub_100059928(v4);
      String.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      sub_100059928(v4);
      sub_1000FEDA0(a1, v4);
      sub_10005994C(v4);
      swift_bridgeObjectRelease();
      sub_10005994C(v4);
      break;
    case 3uLL:
      *((void *)&v5 + 1) = a2;
      *(void *)&long long v5 = a2 + 0x4000000000000000;
      switch((unint64_t)(v5 >> 3))
      {
        case 1uLL:
          Swift::UInt v6 = 1;
          break;
        case 2uLL:
          Swift::UInt v6 = 2;
          break;
        case 3uLL:
          Swift::UInt v6 = 3;
          break;
        case 4uLL:
          Swift::UInt v6 = 4;
          break;
        default:
          Swift::UInt v6 = 0;
          break;
      }
      Hasher._combine(_:)(v6);
      break;
    default:
      Swift::UInt v3 = 5;
LABEL_4:
      Hasher._combine(_:)(v3);
      String.hash(into:)();
      break;
  }
}

uint64_t sub_1000FEF5C(unint64_t *a1, unint64_t *a2)
{
  return sub_1000FEB44(*a1, *a2);
}

Swift::Int sub_1000FEF68()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000FEDA0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1000FEFB0(uint64_t a1)
{
  sub_1000FEDA0(a1, *v1);
}

Swift::Int sub_1000FEFB8()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000FEDA0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000FEFFC(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a2[2];
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }

  return sub_1000FEB44(v2, v3);
}

Swift::Int sub_1000FF070()
{
  unint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_100059928(v1);
  sub_1000FEDA0((uint64_t)v3, v1);
  sub_10005994C(v1);
  return Hasher._finalize()();
}

unint64_t sub_1000FF0F4(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_100059928(v3);
  sub_1000FEDA0(a1, v3);

  return sub_10005994C(v3);
}

Swift::Int sub_1000FF16C()
{
  unint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_100059928(v1);
  sub_1000FEDA0((uint64_t)v3, v1);
  sub_10005994C(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000FF1EC(unint64_t a1)
{
  if ((a1 & 0x3FF) != 0)
  {
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v1._uint64_t countAndFlagsBits = 46;
    v1._object = (void *)0xE100000000000000;
    String.append(_:)(v1);
    v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    v3._uint64_t countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = 46;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 46;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
  }
  else if (((a1 >> 10) & 0x3FF) != 0)
  {
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v8._uint64_t countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 46;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
  }
  else if (((a1 >> 20) & 0x3FF) != 0)
  {
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v13._uint64_t countAndFlagsBits = 46;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 46;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
  }
  else
  {
    if (((a1 >> 30) & 0x3FF) == 0) {
      return dispatch thunk of CustomStringConvertible.description.getter();
    }
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v16._uint64_t countAndFlagsBits = 46;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
  }
  v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return v19;
}

unint64_t sub_1000FF4E8(unint64_t a1, unint64_t a2)
{
  return sub_1000FF508(a1, a2);
}

unint64_t sub_1000FF508(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 - a1;
  if (a2 < a1)
  {
    _StringGuts.grow(_:)(51);
    v3._object = (void *)0x800000010014F370;
    v3._uint64_t countAndFlagsBits = 0xD000000000000029;
    String.append(_:)(v3);
    _print_unlocked<A, B>(_:_:)();
    v4._uint64_t countAndFlagsBits = 0x206D6F726620;
    v4._object = (void *)0xE600000000000000;
    String.append(_:)(v4);
    _print_unlocked<A, B>(_:_:)();
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0xE000000000000000;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(void *)(v5 + 64) = 0;
    *(unsigned char *)(v5 + 72) = 72;
    swift_willThrow();
  }
  return v2;
}

Swift::Int sub_1000FF640()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000FF688()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000FF6B4()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000FF6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  sub_100004700(&qword_10017FDB0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100132F10;
  *(void *)(v17 + 32) = a1;
  *(void *)(v17 + 40) = a2;
  *(void *)(v17 + 48) = a3;
  *(void *)(v17 + 56) = a4;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(a11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = v18(v17, a5, a6, a7, a8, a9 & 1, a10, a11);
  swift_bridgeObjectRelease();
  if (!v26)
  {
    sub_1000FF84C(v19, (uint64_t)v23);
    swift_bridgeObjectRelease();
    if (v24)
    {
      uint64_t v17 = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return v17;
}

uint64_t sub_1000FF84C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100010EA4(a1);
  if (v6) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  else
  {
    Swift::String v7 = sub_10010DC38(v13, result, v5, 0, a1);
    uint64_t v8 = v13[0];
    unint64_t v9 = v13[1];
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v10;
    *(void *)(a2 + 16) = v11;
    *(void *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v8;
    *(void *)(a2 + 40) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10002F064(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_10002404C(v8, v9);
  }
  return result;
}

uint64_t sub_1000FF95C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100010EA4(a1);
  if (v6) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    v8[0] = sub_10010DCF0((uint64_t)v9, result, v5, 0, a1);
    v8[1] = v7;
    *(void *)a2 = v8[0];
    *(void *)(a2 + 8) = v7;
    sub_10001BA68((uint64_t)v9, a2 + 16, &qword_10017D1E8);
    swift_bridgeObjectRetain();
    return sub_1000130EC((uint64_t)v8, &qword_10017FE60);
  }
  return result;
}

uint64_t sub_1000FFA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000FF6F8(a1, a2, a3, a4, a5, a6, a7, 0, 1, a8, a9);
}

double sub_1000FFA64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_100004700((uint64_t *)&unk_10017DE60);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100132F10;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  swift_bridgeObjectRetain();
  Swift::Int v16 = sub_10010F05C(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  unint64_t v17 = sub_1000FFBD4(v16, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease();
  if (!v26)
  {
    sub_1000FF95C(v17, (uint64_t)v22);
    swift_bridgeObjectRelease();
    if (v23)
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = v25;
      sub_10000372C(&v24, (uint64_t)v21);
      sub_10000372C(v21, a8);
      *(void *)(a8 + 40) = v19;
    }
    else
    {
      sub_1000130EC((uint64_t)v22, &qword_10017FDB8);
      double result = 0.0;
      *(_OWORD *)(a8 + 16) = 0u;
      *(_OWORD *)(a8 + 32) = 0u;
      *(_OWORD *)a8 = 0u;
    }
  }
  return result;
}

unint64_t sub_1000FFBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(a1);
  Swift::String v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1000FFF40((uint64_t)_swiftEmptyArrayStorage);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v7, a5);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  Swift::Int v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a5;
  *((void *)v16 + 3) = a6;
  *((void *)v16 + 4) = a1;
  *((void *)v16 + 5) = v14;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], v13, a5);
  unint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t), char *, uint64_t, unint64_t))(a6 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v18 = v25;
  v17(v22, v23, v24, sub_10010F304, v16, a5, a6);
  swift_release();
  if (v18)
  {
    swift_release();
  }
  else
  {
    swift_beginAccess();
    uint64_t v19 = swift_bridgeObjectRetain();
    a6 = sub_100100288(v19);
    swift_release();
    swift_bridgeObjectRelease();
  }
  return a6;
}

unint64_t sub_1000FFDEC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    Swift::String v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017FE20);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  Swift::String v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v20 = v2 + 64;
  swift_retain();
  int v5 = (unsigned char *)(a1 + 80);
  while (1)
  {
    uint64_t v6 = *((void *)v5 - 6);
    uint64_t v7 = *((void *)v5 - 5);
    uint64_t v8 = *((void *)v5 - 4);
    uint64_t v9 = *((void *)v5 - 3);
    uint64_t v11 = *((void *)v5 - 2);
    uint64_t v10 = *((void *)v5 - 1);
    char v12 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10010B1F0(v6, v7, v8, v9);
    if (v14) {
      break;
    }
    *(void *)(v20 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v15 = (uint64_t *)(v3[6] + 32 * result);
    *unint64_t v15 = v6;
    v15[1] = v7;
    void v15[2] = v8;
    v15[3] = v9;
    uint64_t v16 = v3[7] + 24 * result;
    *(void *)uint64_t v16 = v11;
    *(void *)(v16 + 8) = v10;
    *(unsigned char *)(v16 + 16) = v12;
    uint64_t v17 = v3[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v3[2] = v19;
    v5 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000FFF40(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017FE50);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  uint64_t v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10001BA68(v4, (uint64_t)&v16, &qword_10017FE58);
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    unint64_t result = sub_1000048E0(v16, v17);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    uint64_t v10 = (_OWORD *)(v2[7] + 48 * result);
    long long v11 = v18;
    long long v12 = v20;
    v10[1] = v19;
    v10[2] = v12;
    *uint64_t v10 = v11;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 64;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10010008C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004700(&qword_10017FE30);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000048E0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001001A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    long long v6 = *(_OWORD *)(a1 + 16);
    v10[0] = *(_OWORD *)a1;
    v10[1] = v6;
    v10[2] = *(_OWORD *)(a1 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_10010C2B8(v10, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000130EC(a1, &qword_10017FE48);
    sub_10010B3B0(a2, a3, v10);
    swift_bridgeObjectRelease();
    return sub_1000130EC((uint64_t)v10, &qword_10017FE48);
  }
}

unint64_t sub_100100288(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100004700(&qword_10017FE38);
    Swift::UInt64 v1 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    Swift::UInt64 v1 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v26 = a1 + 64;
  uint64_t v2 = -1 << *(unsigned char *)(a1 + 32);
  if (-v2 < 64) {
    uint64_t v3 = ~(-1 << -(char)v2);
  }
  else {
    uint64_t v3 = -1;
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(63 - v2) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v4) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v9 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v9 >= v25) {
    goto LABEL_32;
  }
  unint64_t v10 = *(void *)(v26 + 8 * v9);
  int64_t v11 = i + 1;
  if (!v10)
  {
    int64_t v11 = i + 2;
    if (i + 2 >= v25) {
      goto LABEL_32;
    }
    unint64_t v10 = *(void *)(v26 + 8 * v11);
    if (!v10)
    {
      int64_t v11 = i + 3;
      if (i + 3 >= v25) {
        goto LABEL_32;
      }
      unint64_t v10 = *(void *)(v26 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = i + 4;
        if (i + 4 >= v25) {
          goto LABEL_32;
        }
        unint64_t v10 = *(void *)(v26 + 8 * v11);
        if (!v10)
        {
          int64_t v12 = i + 5;
          if (i + 5 < v25)
          {
            unint64_t v10 = *(void *)(v26 + 8 * v12);
            if (v10)
            {
              int64_t v11 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v11 = v12 + 1;
              if (__OFADD__(v12, 1)) {
                goto LABEL_36;
              }
              if (v11 >= v25) {
                break;
              }
              unint64_t v10 = *(void *)(v26 + 8 * v11);
              ++v12;
              if (v10) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1000048D8();
          return (unint64_t)v1;
        }
      }
    }
  }
LABEL_26:
  unint64_t v4 = (v10 - 1) & v10;
  unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
  for (i = v11; ; unint64_t v8 = v7 | (i << 6))
  {
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    sub_10001BA68(*(void *)(a1 + 56) + 48 * v8, (uint64_t)&v38, &qword_10017FE40);
    uint64_t v36 = v15;
    uint64_t v37 = v14;
    *(void *)&long long v29 = v15;
    *((void *)&v29 + 1) = v14;
    swift_bridgeObjectRetain();
    sub_100004700(&qword_10017FE40);
    sub_100004700(&qword_10017D1E8);
    swift_dynamicCast();
    long long v16 = v29;
    long long v33 = v30;
    long long v34 = v31;
    long long v35 = v32;
    long long v29 = v30;
    long long v30 = v31;
    long long v31 = v32;
    unint64_t result = sub_1000048E0(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      long long v6 = (_OWORD *)(v1[6] + 16 * result);
      swift_bridgeObjectRelease();
      *long long v6 = v16;
      unint64_t result = sub_10003EBF4((uint64_t)&v29, v1[7] + 48 * v17, &qword_10017D1E8);
      if (!v4) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v1[2] >= v1[3]) {
      break;
    }
    *(void *)((char *)v1 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v1[6] + 16 * result) = v16;
    long long v19 = (_OWORD *)(v1[7] + 48 * result);
    long long v20 = v29;
    long long v21 = v31;
    v19[1] = v30;
    v19[2] = v21;
    _OWORD *v19 = v20;
    uint64_t v22 = v1[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_34;
    }
    v1[2] = v24;
    if (!v4) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v7 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1001005E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (*(uint64_t (**)(void))(a5 + 8))();
  uint64_t v9 = v5;
  if (v5) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = result;
  }
  if (v5) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = v7;
  }
  if (!v5)
  {
    switch(v11 >> 62)
    {
      case 1uLL:
        if (v10 >> 32 < (int)v10) {
          __break(1u);
        }
        sub_100012DE4(v10, v11);
        unint64_t v13 = (unint64_t)sub_10010FBDC((int)v10, v10 >> 32, v11 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(void *__return_ptr, void, void))sub_10010082C, 0);
        sub_100012A10(v10, v11);
        break;
      case 2uLL:
        uint64_t v14 = *(void *)(v10 + 16);
        int64_t v15 = *(void *)(v10 + 24);
        swift_retain();
        swift_retain();
        unint64_t v13 = (unint64_t)sub_10010FBDC(v14, v15, v11 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(void *__return_ptr, void, void))sub_10010082C, 0);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v16, 0, 14);
        int64_t v12 = (char *)v16;
        goto LABEL_14;
      default:
        v16[0] = v10;
        LOWORD(v16[1]) = v11;
        BYTE2(v16[1]) = BYTE2(v11);
        BYTE3(v16[1]) = BYTE3(v11);
        BYTE4(v16[1]) = BYTE4(v11);
        BYTE5(v16[1]) = BYTE5(v11);
        int64_t v12 = (char *)v16 + BYTE6(v11);
LABEL_14:
        unint64_t v13 = (unint64_t)sub_10010251C((int *)v16, (uint64_t)v12);
        break;
    }
    uint64_t result = sub_100012A10(v10, v11);
    if (!v9) {
      return v13 | ((HIDWORD(v13) & 1) << 32);
    }
  }
  return result;
}

_DWORD *sub_10010082C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 4);
  int v5 = *(_DWORD *)(a1 + 8);
  int v6 = *(_DWORD *)sub_1000A2084();
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t result = sub_1000A2090();
  BOOL v10 = v4 != 16777228 || (v7 & ~*result) != 2;
  char v11 = (v6 & v5) == 0 || v10;
  if (v11)
  {
    unsigned int v12 = 0;
  }
  else
  {
    unsigned int v13 = *(_DWORD *)(a1 + 8);
    int v14 = *(_DWORD *)sub_1000A209C();
    uint64_t result = sub_1000A20A8();
    uint64_t v15 = *(void *)result;
    unsigned int v16 = (v14 & v13) >> *(void *)result;
    if (*(void *)result >= 0x20uLL) {
      unsigned int v16 = 0;
    }
    int v17 = (v14 & v13) << -(char)v15;
    if ((unint64_t)v15 <= 0xFFFFFFFFFFFFFFE0) {
      int v17 = 0;
    }
    if (v15 < 0) {
      unsigned int v12 = v17;
    }
    else {
      unsigned int v12 = v16;
    }
    if ((unint64_t)(*(void *)result - 33) < 0xFFFFFFFFFFFFFFBFLL) {
      unsigned int v12 = 0;
    }
  }
  *(_DWORD *)a2 = v12;
  *(unsigned char *)(a2 + 4) = v11;
  return result;
}

uint64_t sub_100100904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  sub_100004700(&qword_10017FDC0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100132F10;
  *(void *)(inited + 32) = sub_1000F0F54(a1);
  *(void *)(inited + 40) = v7;
  sub_1000A202C();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v40 = a1;
  uint64_t v9 = sub_10011028C(v8, a1);
  uint64_t v10 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v11 = sub_100100E08(v9);
  swift_bridgeObjectRelease();
  uint64_t v44 = inited;
  sub_10010D58C(v11);
  uint64_t v12 = *(void *)(inited + 16);
  if (!v12)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v37 = 0xD000000000000015;
    *(void *)(v37 + 8) = 0x800000010014F3A0;
    *(_OWORD *)(v37 + 16) = 0u;
    *(_OWORD *)(v37 + 32) = 0u;
    *(_OWORD *)(v37 + 48) = 0u;
    *(void *)(v37 + 64) = 0;
    *(unsigned char *)(v37 + 72) = 16;
    return swift_willThrow();
  }
  unsigned int v13 = (void *)(inited + 40);
  while (!*v13)
  {
LABEL_3:
    v13 += 2;
    if (!--v12) {
      goto LABEL_21;
    }
  }
  uint64_t v14 = *(v13 - 1);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000F1040(v14);
  uint64_t v17 = v16;
  unint64_t v43 = v18;
  uint64_t v19 = sub_1000F0F54(v15);
  uint64_t v21 = v20;
  uint64_t v22 = sub_1000F0F54(v40);
  if (!v21)
  {
    if (!v23) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (!v23)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v19 == v22 && v21 == v23)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v25 & 1) == 0)
  {
LABEL_15:
    static os_log_type_t.info.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_100132F10;
    uint64_t v27 = sub_1000F0F88(v15, v17, v43);
    uint64_t v28 = v15;
    uint64_t v30 = v29;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = sub_10002A1DC();
    *(void *)(v26 + 32) = v27;
    *(void *)(v26 + 40) = v30;
    uint64_t v15 = v28;
    sub_10002A230();
    long long v31 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
LABEL_17:
  sub_100100F48(v15, v17, v43, a2, a3, a4);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_errorRetain();
  sub_100004700(&qword_10017EB50);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  if (v53 == 16)
  {
    sub_10003E9C8(v44, v45, v46, v47, v48, v49, v50, v51, v52, 16);
    swift_errorRelease();
    static os_log_type_t.info.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_100132F10;
    uint64_t v33 = sub_1000F0F88(v15, v17, v43);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    *(void *)(v32 + 56) = &type metadata for String;
    *(void *)(v32 + 64) = sub_10002A1DC();
    *(void *)(v32 + 32) = v33;
    *(void *)(v32 + 40) = v35;
    sub_10002A230();
    uint64_t v36 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    swift_errorRelease();
    uint64_t v10 = 0;
    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  sub_10003E9C8(v44, v45, v46, v47, v48, v49, v50, v51, v52, v53);
  swift_bridgeObjectRelease();
  return swift_errorRelease();
}

void *sub_100100E08(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10010D9B8(0, v1, 0);
    uint64_t v3 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      sub_100004700(&qword_10017D498);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_10010D9B8(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1) {
        sub_10010D9B8((void *)(v4 > 1), v5 + 1, 1);
      }
      v3 += 16;
      _swiftEmptyArrayStorage[2] = v5 + 1;
      int v6 = &_swiftEmptyArrayStorage[2 * v5];
      void v6[4] = v8;
      _OWORD v6[5] = v9;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100100F48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_100004700(&qword_10017C918);
  uint64_t v10 = swift_allocBox();
  uint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(_DWORD *, uint64_t, uint64_t, unint64_t), uint64_t, uint64_t, uint64_t))(a5 + 24);
  swift_retain();
  v14(a1, a2, a3, sub_100110468, v10, a4, a5);
  if (v18) {
    return swift_release_n();
  }
  swift_release();
  swift_beginAccess();
  sub_10001BA68(v12, a6, &qword_10017C918);
  return swift_release();
}

uint64_t sub_100101098(_DWORD *a1, unint64_t a2)
{
  uint64_t v4 = sub_100004700(&qword_10017C918);
  __chkstk_darwin(v4 - 8);
  int v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = swift_projectBox();
  if (*a1 != 27) {
    return 2;
  }
  if ((unint64_t)a1 + a1[1] > a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = v7;
  UUID.init(uuid:)();
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  sub_10003EBF4((uint64_t)v6, v9, &qword_10017C918);
  return 0;
}

uint64_t sub_1001011F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  uint64_t v10 = v9 + 16;
  *(unsigned char *)(v9 + 24) = 1;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a5 + 24);
  swift_retain();
  v11(a1, a2, a3, sub_1001104A8, v9, a4, a5);
  swift_release();
  if (!v14)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(v9 + 16);
  }
  swift_release();
  return v10;
}

void *sub_100101304(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, unint64_t a7)
{
  char v9 = a5 & 1;
  uint64_t v10 = sub_1000A1C04();
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v14 = v10[2];
  uint64_t v13 = v10[3];
  sub_100004700(&qword_10017FDB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100132F10;
  *(void *)(inited + 32) = v12;
  *(void *)(inited + 40) = v11;
  *(void *)(inited + 48) = v14;
  *(void *)(inited + 56) = v13;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = sub_100107644(inited, a1, a2, a3, a4, v9, a6, a7);
  if (v40)
  {
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_errorRelease();
LABEL_3:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v17 = 0xD000000000000030;
    *(void *)(v17 + 8) = 0x800000010014F410;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(void *)(v17 + 64) = 0;
    *(unsigned char *)(v17 + 72) = 24;
    return (void *)swift_willThrow();
  }
  uint64_t v19 = v16;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_1000FF84C(v19, (uint64_t)&v42);
  swift_bridgeObjectRelease();
  if (!*((void *)&v42 + 1)) {
    goto LABEL_3;
  }
  uint64_t v21 = v44;
  unint64_t v20 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20 >> 60 == 15) {
    goto LABEL_4;
  }
  uint64_t v22 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v42 = 0;
  id v24 = [v22 propertyListWithData:isa options:0 format:0 error:&v42];

  if (!v24)
  {
    id v31 = (id)v42;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    goto LABEL_13;
  }
  id v25 = (id)v42;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100004700((uint64_t *)&unk_10017FA80);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v32 = 0xD00000000000002ELL;
    *(void *)(v32 + 8) = 0x800000010014F450;
LABEL_25:
    *(_OWORD *)(v32 + 16) = 0u;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(void *)(v32 + 64) = 0;
    *(unsigned char *)(v32 + 72) = 24;
    swift_willThrow();
    return (void *)sub_10002404C(v21, v20);
  }
  uint64_t v26 = (uint64_t *)sub_1000A20B4();
  if (*(void *)(v41 + 16))
  {
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    swift_bridgeObjectRetain();
    unint64_t v29 = sub_1000048E0(v27, v28);
    if (v30)
    {
      sub_1000047DC(*(void *)(v41 + 56) + 32 * v29, (uint64_t)&v42);
    }
    else
    {
      long long v42 = 0u;
      long long v43 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v42 = 0u;
    long long v43 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v43 + 1))
  {
    sub_1000130EC((uint64_t)&v42, &qword_10017C018);
    goto LABEL_24;
  }
  sub_100004700(&qword_10017C7D0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_24:
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v32 = 0xD00000000000002BLL;
    *(void *)(v32 + 8) = 0x800000010014F480;
    goto LABEL_25;
  }
  uint64_t v33 = v41;
  *(void *)&long long v42 = _swiftEmptyArrayStorage;
  uint64_t v34 = *(void *)(v41 + 16);
  if (v34)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v34; ++i)
    {
      uint64_t v41 = *(void *)(v33 + 8 * i + 32);
      swift_bridgeObjectRetain();
      sub_100101810((uint64_t)&v42, &v41);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    sub_10002404C(v21, v20);
    swift_bridgeObjectRelease();
    return (void *)v42;
  }
  else
  {
    sub_10002404C(v21, v20);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
}

uint64_t sub_100101810(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_1000A11D8();
  if (!*(void *)(v4 + 16))
  {
    long long v21 = 0u;
    long long v22 = 0u;
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000048E0(v6, v7);
  if ((v9 & 1) == 0)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1000047DC(*(void *)(v4 + 56) + 32 * v8, (uint64_t)&v21);
  swift_bridgeObjectRelease();
  if (!*((void *)&v22 + 1))
  {
LABEL_10:
    sub_1000130EC((uint64_t)&v21, &qword_10017C018);
    goto LABEL_11;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD00000000000002BLL;
    uint64_t v16 = "Wrong type for symbol set bundle identifier";
LABEL_12:
    *(void *)(v15 + 8) = (unint64_t)(v16 - 32) | 0x8000000000000000;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(void *)(v15 + 64) = 0;
    *(unsigned char *)(v15 + 72) = 24;
    return swift_willThrow();
  }
  uint64_t v10 = (uint64_t *)sub_1000A20C0();
  if (!*(void *)(v4 + 16))
  {
    long long v21 = 0u;
    long long v22 = 0u;
LABEL_20:
    swift_bridgeObjectRelease();
    sub_1000130EC((uint64_t)&v21, &qword_10017C018);
LABEL_22:
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000019;
    uint64_t v16 = "Wrong type for symbol set";
    goto LABEL_12;
  }
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_1000048E0(v11, v12);
  if (v14)
  {
    sub_1000047DC(*(void *)(v4 + 56) + 32 * v13, (uint64_t)&v21);
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v22 + 1)) {
    goto LABEL_20;
  }
  sub_100004700(&qword_10017C7D0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_10010EB10(v19, v19, v20);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  if (!v3) {
    return sub_10010D688((uint64_t)v18);
  }
  return result;
}

uint64_t sub_100101A94(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v60 = a7;
  uint64_t v8 = v7;
  uint64_t v9 = a6;
  uint64_t v55 = a5;
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  uint64_t v11 = a1;
  uint64_t v54 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  uint64_t v53 = v12;
  uint64_t v66 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  unint64_t v14 = sub_10010008C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v58 = v13;
  *(void *)(v13 + 16) = v14;
  uint64_t v51 = v13 + 16;
  uint64_t v15 = swift_allocObject();
  uint64_t v63 = v8;
  uint64_t v64 = v15;
  *(void *)(v15 + 16) = &_swiftEmptySetSingleton;
  uint64_t v61 = v11;
  uint64_t v62 = a4;
  if (v11 && (unint64_t v16 = *(void *)(v11 + 16)) != 0)
  {
    uint64_t v48 = v9;
    unint64_t v17 = v16;
    uint64_t result = swift_bridgeObjectRetain();
    LODWORD(v52) = 0;
    unint64_t v19 = 0;
    uint64_t v20 = -(uint64_t)v17;
    uint64_t v49 = v11 + 40;
    unint64_t v50 = v17;
LABEL_4:
    unint64_t v21 = v50;
    if (v19 > v50) {
      unint64_t v21 = v19;
    }
    uint64_t v22 = -(uint64_t)v21;
    uint64_t v23 = (Swift::Int *)(v49 + 16 * v19++);
    while (v22 + v19 != 1)
    {
      Swift::Int v25 = *(v23 - 1);
      Swift::Int v24 = *v23;
      swift_bridgeObjectRetain();
      sub_1000A20FC();
      swift_bridgeObjectRetain();
      char v26 = sub_100037774();
      swift_bridgeObjectRelease();
      if (v26)
      {
        uint64_t result = swift_bridgeObjectRelease();
        if ((v52 & 1) == 0)
        {
          uint64_t v27 = (Swift::Int *)sub_1000A2114();
          Swift::Int v28 = *v27;
          Swift::Int v29 = v27[1];
          swift_bridgeObjectRetain();
          sub_1000848E0(&v65, v28, v29);
          uint64_t result = swift_bridgeObjectRelease();
        }
        LODWORD(v52) = 1;
        if (!(v20 + v19))
        {
LABEL_14:
          uint64_t v11 = v61;
          swift_bridgeObjectRelease();
          uint64_t v9 = v48;
          a4 = v62;
          uint64_t v8 = v63;
          goto LABEL_15;
        }
        goto LABEL_4;
      }
      sub_1000848E0(&v65, v25, v24);
      uint64_t result = swift_bridgeObjectRelease();
      ++v19;
      v23 += 2;
      if (v20 + v19 == 1) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    unint64_t v52 = HIDWORD(a4);
    uint64_t v30 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v66, v8, v9);
    unint64_t v31 = (*(unsigned __int8 *)(v30 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    unint64_t v32 = (v53 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = (char *)swift_allocObject();
    uint64_t v35 = v60;
    *((void *)v34 + 2) = v9;
    *((void *)v34 + 3) = v35;
    *((void *)v34 + 4) = v11;
    *((void *)v34 + 5) = v64;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v34[v31], v66, v9);
    uint64_t v37 = v57;
    uint64_t v36 = v58;
    *(void *)&v34[v32] = v58;
    uint64_t v38 = &v34[v33];
    uint64_t v39 = v55;
    uint64_t v40 = v56;
    *(void *)uint64_t v38 = v56;
    *((void *)v38 + 1) = v37;
    uint64_t v41 = v62;
    int v42 = v52;
    *((_DWORD *)v38 + 4) = v62;
    *((_DWORD *)v38 + 5) = v42;
    *(void *)&v34[(v33 + 31) & 0xFFFFFFFFFFFFFFF8] = v39;
    uint64_t v43 = v36;
    uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t), char *, uint64_t, uint64_t))(v35 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v45 = v37;
    uint64_t v46 = v59;
    v44(v40, v45, v41, sub_100110624, v34, v9, v35);
    swift_release();
    if (!v46)
    {
      swift_beginAccess();
      uint64_t v34 = *(char **)(v43 + 16);
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_release();
    return (uint64_t)v34;
  }
  return result;
}

uint64_t sub_100101E88(int *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v10 = a4;
  uint64_t v12 = a1;
  uint64_t v13 = a2 - (void)a1;
  if (a1) {
    BOOL v14 = v13 < 32;
  }
  else {
    BOOL v14 = 1;
  }
  char v15 = v14;
  if (v14)
  {
    char v50 = v15;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v17 = 0xD000000000000033;
    *(void *)(v17 + 8) = 0x800000010014FDD0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(void *)(v17 + 64) = 0;
    *(unsigned char *)(v17 + 72) = 24;
    swift_willThrow();
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if (!swift_dynamicCast()) {
      goto LABEL_40;
    }
    uint64_t v51 = a4;
    uint64_t v52 = a5;
    swift_errorRelease();
    sub_10005C020(v58, v59, v60, v61, v62, v63, v64, v65, v66, v67);
    uint64_t v18 = sub_1000A0BB4(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v20 = v18[2];
    unint64_t v19 = v18[3];
    if (v20 >= v19 >> 1) {
      uint64_t v18 = sub_1000A0BB4((void *)(v19 > 1), v20 + 1, 1, v18);
    }
    void v18[2] = v20 + 1;
    uint64_t v54 = v18;
    unint64_t v21 = &v18[10 * v20];
    v21[4] = v58;
    v21[5] = v59;
    v21[6] = v60;
    v21[7] = v61;
    v21[8] = v62;
    v21[9] = v63;
    v21[10] = v64;
    v21[11] = v65;
    v21[12] = v66;
    *((unsigned char *)v21 + 104) = v67;
    sub_10003E9C8(v58, v59, v60, v61, v62, v63, v64, v65, v66, v67);
    swift_errorRelease();
    if (!v12 || v13 < 28)
    {
      swift_allocError();
      uint64_t v12 = 0;
      *(void *)uint64_t v31 = 0xD000000000000033;
      unint64_t v33 = 0x800000010014FE10;
      int v32 = 255;
      a5 = v52;
      uint64_t v7 = a7;
      uint64_t v10 = v51;
      goto LABEL_31;
    }
    uint64_t v22 = 0;
    int v23 = 255;
    a5 = v52;
    Swift::Int v24 = v54;
    uint64_t v7 = a7;
    uint64_t v10 = v51;
    char v15 = v50;
    goto LABEL_21;
  }
  int v25 = *a1;
  Swift::Int v24 = _swiftEmptyArrayStorage;
  if (*a1 == -805638658 || v25 == -17958193)
  {
    int v23 = 0;
    uint64_t v22 = a1;
LABEL_21:
    int v25 = *v12;
    goto LABEL_22;
  }
  uint64_t v22 = 0;
  char v15 = 1;
  int v23 = 255;
LABEL_22:
  if (v25 != -822415874 && v25 != -17958194)
  {
    uint64_t v12 = v22;
    if (v23 != 255)
    {
LABEL_37:
      char v27 = 0;
      goto LABEL_38;
    }
LABEL_27:
    unint64_t v28 = v24[2];
    if (v28 <= 1)
    {
      if (v28 == 1)
      {
        uint64_t v39 = v24[4];
        uint64_t v40 = v24[5];
        uint64_t v41 = v24[6];
        uint64_t v42 = v24[7];
        unint64_t v43 = v24[8];
        uint64_t v44 = v24[9];
        uint64_t v45 = v24[10];
        uint64_t v46 = v24[11];
        uint64_t v55 = v24[12];
        char v57 = *((unsigned char *)v24 + 104);
        sub_10005C020(v39, v40, v41, v42, v43, v44, v45, v46, v55, v57);
        swift_bridgeObjectRelease();
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v47 = v39;
        *(void *)(v47 + 8) = v40;
        *(void *)(v47 + 16) = v41;
        *(void *)(v47 + 24) = v42;
        *(void *)(v47 + 32) = v43;
        *(void *)(v47 + 40) = v44;
        *(void *)(v47 + 48) = v45;
        *(void *)(v47 + 56) = v46;
        *(void *)(v47 + 64) = v55;
        *(unsigned char *)(v47 + 72) = v57;
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v48 = 0xD000000000000040;
      *(void *)(v48 + 8) = 0x800000010014FE50;
      *(_OWORD *)(v48 + 16) = 0u;
      *(_OWORD *)(v48 + 32) = 0u;
      *(_OWORD *)(v48 + 48) = 0u;
      *(void *)(v48 + 64) = 0;
      *(unsigned char *)(v48 + 72) = 50;
    }
    else
    {
      Swift::Int v29 = v24;
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v30 = v29;
      *(_OWORD *)(v30 + 8) = 0u;
      *(_OWORD *)(v30 + 24) = 0u;
      *(_OWORD *)(v30 + 40) = 0u;
      *(_OWORD *)(v30 + 56) = 0u;
      *(unsigned char *)(v30 + 72) = 0;
    }
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  if ((v15 & 1) == 0)
  {
    uint64_t v54 = v24;
    sub_100012E3C();
    swift_allocError();
    int v32 = 0;
    *(void *)uint64_t v31 = 0xD00000000000002BLL;
    unint64_t v33 = 0x800000010014FEA0;
    uint64_t v12 = v22;
LABEL_31:
    *(void *)(v31 + 8) = v33;
    *(_OWORD *)(v31 + 16) = 0u;
    *(_OWORD *)(v31 + 32) = 0u;
    *(_OWORD *)(v31 + 48) = 0u;
    *(void *)(v31 + 64) = 0;
    *(unsigned char *)(v31 + 72) = 24;
    swift_willThrow();
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      sub_10005C020(v58, v59, v60, v61, v62, v63, v64, v65, v66, v67);
      uint64_t v53 = a3;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v34 = v54;
      }
      else {
        uint64_t v34 = sub_1000A0BB4(0, v54[2] + 1, 1, v54);
      }
      unint64_t v36 = v34[2];
      unint64_t v35 = v34[3];
      if (v36 >= v35 >> 1) {
        uint64_t v34 = sub_1000A0BB4((void *)(v35 > 1), v36 + 1, 1, v34);
      }
      _OWORD v34[2] = v36 + 1;
      uint64_t v37 = &v34[10 * v36];
      v37[4] = v58;
      v37[5] = v59;
      v37[6] = v60;
      v37[7] = v61;
      v37[8] = v62;
      v37[9] = v63;
      v37[10] = v64;
      v37[11] = v65;
      v37[12] = v66;
      *((unsigned char *)v37 + 104) = v67;
      uint64_t v38 = v34;
      sub_10003E9C8(v58, v59, v60, v61, v62, v63, v64, v65, v66, v67);
      swift_errorRelease();
      Swift::Int v24 = v38;
      a3 = v53;
      if (v32 != 255) {
        goto LABEL_37;
      }
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
LABEL_40:
    swift_errorRelease();
    return swift_bridgeObjectRelease();
  }
  char v27 = 1;
LABEL_38:
  swift_bridgeObjectRelease();
  sub_1001079E8((uint64_t)v12, v27, a3, v10, a5, a6 & 1, v7);
  return swift_bridgeObjectRelease();
}

_DWORD *sub_10010251C(int *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2 - (void)a1;
  if (a1) {
    BOOL v5 = v4 < 32;
  }
  else {
    BOOL v5 = 1;
  }
  char v6 = v5;
  if (v5)
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v7 = 0xD000000000000033;
    *(void *)(v7 + 8) = 0x800000010014FDD0;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(void *)(v7 + 64) = 0;
    *(unsigned char *)(v7 + 72) = 24;
    swift_willThrow();
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if (!swift_dynamicCast()) {
      return (_DWORD *)swift_errorRelease();
    }
    swift_errorRelease();
    sub_10005C020(v43, v44, v45, v46, v47, v48, v49, v50, v51, v52);
    uint64_t v8 = sub_1000A0BB4(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v10 = v8[2];
    unint64_t v9 = v8[3];
    uint64_t v40 = v8;
    if (v10 >= v9 >> 1) {
      uint64_t v40 = sub_1000A0BB4((void *)(v9 > 1), v10 + 1, 1, v8);
    }
    _OWORD v40[2] = v10 + 1;
    uint64_t v11 = &v40[10 * v10];
    v11[4] = v43;
    v11[5] = v44;
    void v11[6] = v45;
    v11[7] = v46;
    v11[8] = v47;
    v11[9] = v48;
    v11[10] = v49;
    v11[11] = v50;
    v11[12] = v51;
    *((unsigned char *)v11 + 104) = v52;
    sub_10003E9C8(v43, v44, v45, v46, v47, v48, v49, v50, v51, v52);
    swift_errorRelease();
    if (!v3 || v4 < 28)
    {
      swift_allocError();
      uint64_t v12 = 0;
      *(void *)uint64_t v18 = 0xD000000000000033;
      unint64_t v20 = 0x800000010014FE10;
      int v19 = 255;
      char v15 = v40;
LABEL_27:
      *(void *)(v18 + 8) = v20;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_OWORD *)(v18 + 48) = 0u;
      *(void *)(v18 + 64) = 0;
      *(unsigned char *)(v18 + 72) = 24;
      swift_willThrow();
      swift_errorRetain();
      sub_100004700(&qword_10017EB50);
      if (swift_dynamicCast())
      {
        swift_errorRelease();
        sub_10005C020(v43, v44, v45, v46, v47, v48, v49, v50, v51, v52);
        uint64_t v41 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v15 = sub_1000A0BB4(0, v15[2] + 1, 1, v15);
        }
        unint64_t v22 = v15[2];
        unint64_t v21 = v15[3];
        int v23 = v15;
        if (v22 >= v21 >> 1) {
          int v23 = sub_1000A0BB4((void *)(v21 > 1), v22 + 1, 1, v15);
        }
        void v23[2] = v22 + 1;
        char v15 = v23;
        Swift::Int v24 = &v23[10 * v22];
        v24[4] = v43;
        v24[5] = v44;
        v24[6] = v45;
        v24[7] = v46;
        v24[8] = v47;
        v24[9] = v48;
        v24[10] = v49;
        v24[11] = v50;
        v24[12] = v51;
        *((unsigned char *)v24 + 104) = v52;
        sub_10003E9C8(v43, v44, v45, v46, v47, v48, v49, v50, v51, v52);
        swift_errorRelease();
        uint64_t v13 = 0;
        uint64_t v12 = v41;
        int v14 = v19;
        goto LABEL_33;
      }
      swift_bridgeObjectRelease();
      return (_DWORD *)swift_errorRelease();
    }
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v14 = 255;
    char v15 = v40;
    goto LABEL_21;
  }
  uint64_t v13 = v2;
  int v16 = *a1;
  char v15 = _swiftEmptyArrayStorage;
  if (*a1 == -805638658 || v16 == -17958193)
  {
    int v14 = 0;
    uint64_t v12 = a1;
LABEL_21:
    int v16 = *v3;
    goto LABEL_22;
  }
  uint64_t v12 = 0;
  char v6 = 1;
  int v14 = 255;
LABEL_22:
  if (v16 == -822415874 || v16 == -17958194)
  {
    if (v6) {
      goto LABEL_37;
    }
    sub_100012E3C();
    swift_allocError();
    int v19 = 0;
    *(void *)uint64_t v18 = 0xD00000000000002BLL;
    unint64_t v20 = 0x800000010014FEA0;
    goto LABEL_27;
  }
LABEL_33:
  if (v14 == 255)
  {
    unint64_t v25 = v15[2];
    if (v25 <= 1)
    {
      if (v25 == 1)
      {
        unint64_t v28 = v15;
        uint64_t v29 = v15[4];
        uint64_t v30 = v28[5];
        uint64_t v31 = v28[6];
        uint64_t v32 = v28[7];
        unint64_t v33 = v28[8];
        uint64_t v34 = v28[9];
        uint64_t v35 = v28[10];
        uint64_t v36 = v28[11];
        uint64_t v39 = v28[12];
        char v42 = *((unsigned char *)v28 + 104);
        sub_10005C020(v29, v30, v31, v32, v33, v34, v35, v36, v39, v42);
        swift_bridgeObjectRelease();
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v37 = v29;
        *(void *)(v37 + 8) = v30;
        *(void *)(v37 + 16) = v31;
        *(void *)(v37 + 24) = v32;
        *(void *)(v37 + 32) = v33;
        *(void *)(v37 + 40) = v34;
        *(void *)(v37 + 48) = v35;
        *(void *)(v37 + 56) = v36;
        *(void *)(v37 + 64) = v39;
        char v38 = v42;
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v37 = 0xD000000000000040;
        *(void *)(v37 + 8) = 0x800000010014FE50;
        *(_OWORD *)(v37 + 16) = 0u;
        *(_OWORD *)(v37 + 32) = 0u;
        *(_OWORD *)(v37 + 48) = 0u;
        *(void *)(v37 + 64) = 0;
        char v38 = 50;
      }
      *(unsigned char *)(v37 + 72) = v38;
    }
    else
    {
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v26 = v15;
      *(_OWORD *)(v26 + 8) = 0u;
      *(_OWORD *)(v26 + 24) = 0u;
      *(_OWORD *)(v26 + 40) = 0u;
      *(_OWORD *)(v26 + 56) = 0u;
      *(unsigned char *)(v26 + 72) = 0;
    }
    return (_DWORD *)swift_willThrow();
  }
  uint64_t v3 = v12;
LABEL_37:
  swift_bridgeObjectRelease();
  uint64_t result = sub_10010082C((uint64_t)v3, (uint64_t)&v53);
  if (!v13) {
    return (_DWORD *)(v53 | ((unint64_t)v54 << 32));
  }
  return result;
}

uint64_t sub_100102B30(int *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  unint64_t v9 = a8;
  uint64_t v12 = a4;
  uint64_t v13 = a1;
  uint64_t v14 = a2 - (void)a1;
  if (a1) {
    BOOL v15 = v14 < 32;
  }
  else {
    BOOL v15 = 1;
  }
  char v16 = v15;
  if (v15)
  {
    char v69 = v16;
    uint64_t v19 = (uint64_t)&type metadata for KMError;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v20 = 0xD000000000000033;
    *(void *)(v20 + 8) = 0x800000010014FDD0;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(void *)(v20 + 64) = 0;
    *(unsigned char *)(v20 + 72) = 24;
    swift_willThrow();
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if (!swift_dynamicCast())
    {
      swift_errorRelease();
      swift_release();
      uint64_t v30 = a7;
      unint64_t v31 = a8;
      goto LABEL_47;
    }
    uint64_t v51 = a4;
    swift_errorRelease();
    sub_10005C020(v59, v60, v61, v62, v63, v64, v65, v66, v67, v68);
    unint64_t v21 = sub_1000A0BB4(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v23 = v21[2];
    unint64_t v22 = v21[3];
    uint64_t v19 = v23 + 1;
    if (v23 >= v22 >> 1) {
      unint64_t v21 = sub_1000A0BB4((void *)(v22 > 1), v23 + 1, 1, v21);
    }
    v21[2] = v19;
    uint64_t v55 = v21;
    Swift::Int v24 = &v21[10 * v23];
    v24[4] = v59;
    v24[5] = v60;
    v24[6] = v61;
    v24[7] = v62;
    v24[8] = v63;
    v24[9] = v64;
    v24[10] = v65;
    v24[11] = v66;
    v24[12] = v67;
    *((unsigned char *)v24 + 104) = v68;
    sub_10003E9C8(v59, v60, v61, v62, v63, v64, v65, v66, v67, v68);
    swift_errorRelease();
    if (!v13 || v14 < 28)
    {
      swift_allocError();
      uint64_t v13 = 0;
      *(void *)uint64_t v34 = 0xD000000000000033;
      unint64_t v36 = 0x800000010014FE10;
      int v35 = 255;
      unint64_t v9 = a8;
      uint64_t v12 = v51;
      goto LABEL_32;
    }
    uint64_t v19 = 0;
    uint64_t v25 = 0;
    int v26 = 255;
    unint64_t v9 = a8;
    uint64_t v12 = v51;
    char v27 = v55;
    char v16 = v69;
    goto LABEL_21;
  }
  uint64_t v25 = v8;
  int v28 = *a1;
  char v27 = _swiftEmptyArrayStorage;
  if (*a1 == -805638658 || v28 == -17958193)
  {
    int v26 = 0;
    uint64_t v19 = (uint64_t)a1;
LABEL_21:
    int v28 = *v13;
    goto LABEL_23;
  }
  uint64_t v19 = 0;
  char v16 = 1;
  int v26 = 255;
LABEL_23:
  if (v28 == -822415874 || v28 == -17958194)
  {
    if (v16)
    {
      uint64_t v19 = 1;
      goto LABEL_39;
    }
    uint64_t v55 = v27;
    sub_100012E3C();
    swift_allocError();
    int v35 = 0;
    *(void *)uint64_t v34 = 0xD00000000000002BLL;
    unint64_t v36 = 0x800000010014FEA0;
    uint64_t v13 = (int *)v19;
LABEL_32:
    *(void *)(v34 + 8) = v36;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(void *)(v34 + 64) = 0;
    *(unsigned char *)(v34 + 72) = 24;
    swift_willThrow();
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      swift_errorRelease();
      goto LABEL_46;
    }
    swift_errorRelease();
    sub_10005C020(v59, v60, v61, v62, v63, v64, v65, v66, v67, v68);
    unint64_t v53 = v9;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v37 = v55;
    }
    else {
      uint64_t v37 = sub_1000A0BB4(0, v55[2] + 1, 1, v55);
    }
    unint64_t v39 = v37[2];
    unint64_t v38 = v37[3];
    if (v39 >= v38 >> 1) {
      uint64_t v37 = sub_1000A0BB4((void *)(v38 > 1), v39 + 1, 1, v37);
    }
    v37[2] = v39 + 1;
    uint64_t v40 = &v37[10 * v39];
    v40[4] = v59;
    v40[5] = v60;
    v40[6] = v61;
    v40[7] = v62;
    v40[8] = v63;
    v40[9] = v64;
    v40[10] = v65;
    v40[11] = v66;
    v40[12] = v67;
    *((unsigned char *)v40 + 104) = v68;
    uint64_t v19 = (uint64_t)v37;
    sub_10003E9C8(v59, v60, v61, v62, v63, v64, v65, v66, v67, v68);
    swift_errorRelease();
    char v27 = (void *)v19;
    uint64_t v25 = 0;
    unint64_t v9 = v53;
    if (v35 != 255) {
      goto LABEL_38;
    }
    goto LABEL_28;
  }
  uint64_t v13 = (int *)v19;
  if (v26 == 255)
  {
LABEL_28:
    unint64_t v32 = v27[2];
    if (v32 > 1)
    {
      uint64_t v19 = (uint64_t)v27;
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v33 = v19;
      *(_OWORD *)(v33 + 8) = 0u;
      *(_OWORD *)(v33 + 24) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(unsigned char *)(v33 + 72) = 0;
LABEL_45:
      swift_willThrow();
      goto LABEL_46;
    }
    if (v32 != 1)
    {
      swift_bridgeObjectRelease();
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v49 = 0xD000000000000040;
      *(void *)(v49 + 8) = 0x800000010014FE50;
      *(_OWORD *)(v49 + 16) = 0u;
      *(_OWORD *)(v49 + 32) = 0u;
      *(_OWORD *)(v49 + 48) = 0u;
      *(void *)(v49 + 64) = 0;
      *(unsigned char *)(v49 + 72) = 50;
      goto LABEL_45;
    }
    uint64_t v19 = v27[4];
    uint64_t v41 = v27[5];
    uint64_t v52 = a7;
    unint64_t v54 = v9;
    uint64_t v42 = v27[6];
    uint64_t v43 = v27[7];
    unint64_t v44 = v27[8];
    uint64_t v45 = v27[9];
    uint64_t v46 = v27[10];
    uint64_t v47 = v27[11];
    uint64_t v56 = v27[12];
    char v58 = *((unsigned char *)v27 + 104);
    sub_10005C020(v19, v41, v42, v43, v44, v45, v46, v47, v56, v58);
    swift_bridgeObjectRelease();
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v48 = v19;
    *(void *)(v48 + 8) = v41;
    *(void *)(v48 + 16) = v42;
    *(void *)(v48 + 24) = v43;
    *(void *)(v48 + 32) = v44;
    *(void *)(v48 + 40) = v45;
    *(void *)(v48 + 48) = v46;
    *(void *)(v48 + 56) = v47;
    *(void *)(v48 + 64) = v56;
    *(unsigned char *)(v48 + 72) = v58;
    swift_willThrow();
    swift_release();
    uint64_t v30 = v52;
    unint64_t v31 = v54;
LABEL_47:
    sub_100012A10(v30, v31);
    return v19;
  }
LABEL_38:
  uint64_t v19 = 0;
LABEL_39:
  swift_bridgeObjectRelease();
  sub_1001046FC((uint64_t)v13, v19, a3, v12, a5, a7, v9, &v70);
  if (v25)
  {
LABEL_46:
    swift_release();
    uint64_t v30 = a7;
    unint64_t v31 = v9;
    goto LABEL_47;
  }
  swift_release();
  uint64_t v19 = v70;
  sub_100012A10(a7, v9);
  return v19;
}

uint64_t sub_100103218(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v7 = a6;
  unint64_t v8 = a5;
  uint64_t v11 = a1;
  uint64_t v12 = a2 - (void)a1;
  if (a1) {
    BOOL v13 = v12 < 32;
  }
  else {
    BOOL v13 = 1;
  }
  char v14 = v13;
  if (v13)
  {
    sub_100012E3C();
    uint64_t v16 = swift_allocError();
    *(void *)uint64_t v17 = 0xD000000000000033;
    *(void *)(v17 + 8) = 0x800000010014FDD0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(void *)(v17 + 64) = 0;
    *(unsigned char *)(v17 + 72) = 24;
    swift_willThrow();
    uint64_t v68 = v16;
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if (!swift_dynamicCast())
    {
LABEL_40:
      swift_errorRelease();
      return swift_bridgeObjectRelease();
    }
    swift_errorRelease();
    sub_10005C020(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66);
    uint64_t v18 = sub_1000A0BB4(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v20 = v18[2];
    unint64_t v19 = v18[3];
    if (v20 >= v19 >> 1) {
      uint64_t v18 = sub_1000A0BB4((void *)(v19 > 1), v20 + 1, 1, v18);
    }
    void v18[2] = v20 + 1;
    unint64_t v53 = v18;
    unint64_t v21 = &v18[10 * v20];
    v21[4] = v57;
    v21[5] = v58;
    v21[6] = v59;
    v21[7] = v60;
    v21[8] = v61;
    v21[9] = v62;
    v21[10] = v63;
    v21[11] = v64;
    v21[12] = v65;
    *((unsigned char *)v21 + 104) = v66;
    sub_10003E9C8(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66);
    swift_errorRelease();
    if (!v11 || v12 < 28)
    {
      uint64_t v29 = swift_allocError();
      unint64_t v22 = 0;
      *(void *)uint64_t v28 = 0xD000000000000033;
      unint64_t v31 = 0x800000010014FE10;
      int v30 = 255;
      unint64_t v8 = a5;
      uint64_t v7 = a6;
      goto LABEL_27;
    }
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = 255;
    unint64_t v8 = a5;
    uint64_t v25 = v53;
    uint64_t v7 = a6;
  }
  else
  {
    uint64_t v23 = v6;
    int v26 = *a1;
    uint64_t v25 = _swiftEmptyArrayStorage;
    if (*a1 != -805638658 && v26 != -17958193)
    {
      unint64_t v22 = 0;
      char v14 = 1;
      int v24 = 255;
      goto LABEL_22;
    }
    int v24 = 0;
    unint64_t v22 = a1;
  }
  int v26 = *v11;
LABEL_22:
  if (v26 != -822415874 && v26 != -17958194) {
    goto LABEL_33;
  }
  if (v14) {
    goto LABEL_37;
  }
  unint64_t v53 = v25;
  sub_100012E3C();
  uint64_t v29 = swift_allocError();
  int v30 = 0;
  *(void *)uint64_t v28 = 0xD00000000000002BLL;
  unint64_t v31 = 0x800000010014FEA0;
LABEL_27:
  *(void *)(v28 + 8) = v31;
  *(_OWORD *)(v28 + 16) = 0u;
  *(_OWORD *)(v28 + 32) = 0u;
  *(_OWORD *)(v28 + 48) = 0u;
  *(void *)(v28 + 64) = 0;
  *(unsigned char *)(v28 + 72) = 24;
  swift_willThrow();
  uint64_t v68 = v29;
  swift_errorRetain();
  sub_100004700(&qword_10017EB50);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  uint64_t v51 = v22;
  swift_errorRelease();
  sub_10005C020(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66);
  uint64_t v52 = a4;
  if (swift_isUniquelyReferenced_nonNull_native()) {
    unint64_t v32 = v53;
  }
  else {
    unint64_t v32 = sub_1000A0BB4(0, v53[2] + 1, 1, v53);
  }
  unint64_t v34 = v32[2];
  unint64_t v33 = v32[3];
  if (v34 >= v33 >> 1) {
    unint64_t v32 = sub_1000A0BB4((void *)(v33 > 1), v34 + 1, 1, v32);
  }
  _OWORD v32[2] = v34 + 1;
  int v35 = &v32[10 * v34];
  v35[4] = v57;
  v35[5] = v58;
  v35[6] = v59;
  v35[7] = v60;
  v35[8] = v61;
  v35[9] = v62;
  v35[10] = v63;
  v35[11] = v64;
  v35[12] = v65;
  *((unsigned char *)v35 + 104) = v66;
  unint64_t v36 = v32;
  sub_10003E9C8(v57, v58, v59, v60, v61, v62, v63, v64, v65, v66);
  swift_errorRelease();
  uint64_t v25 = v36;
  uint64_t v23 = 0;
  a4 = v52;
  unint64_t v22 = v51;
  int v24 = v30;
LABEL_33:
  if (v24 != 255)
  {
    uint64_t v11 = v22;
LABEL_37:
    swift_bridgeObjectRelease();
    sub_100105EF4((uint64_t)v11, a3, a4, v8, v7, (uint64_t)&v67);
    if (!v23)
    {
      swift_bridgeObjectRelease();
      return v67;
    }
    return swift_bridgeObjectRelease();
  }
  unint64_t v37 = v25[2];
  if (v37 > 1)
  {
    unint64_t v38 = v25;
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v39 = v38;
    *(_OWORD *)(v39 + 8) = 0u;
    *(_OWORD *)(v39 + 24) = 0u;
    *(_OWORD *)(v39 + 40) = 0u;
    *(_OWORD *)(v39 + 56) = 0u;
    *(unsigned char *)(v39 + 72) = 0;
LABEL_44:
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  if (v37 != 1)
  {
    swift_bridgeObjectRelease();
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v50 = 0xD000000000000040;
    *(void *)(v50 + 8) = 0x800000010014FE50;
    *(_OWORD *)(v50 + 16) = 0u;
    *(_OWORD *)(v50 + 32) = 0u;
    *(_OWORD *)(v50 + 48) = 0u;
    *(void *)(v50 + 64) = 0;
    *(unsigned char *)(v50 + 72) = 50;
    goto LABEL_44;
  }
  uint64_t v41 = v25[4];
  uint64_t v42 = v25[5];
  uint64_t v43 = v25[6];
  uint64_t v44 = v25[7];
  unint64_t v45 = v25[8];
  uint64_t v46 = v25[9];
  uint64_t v47 = v25[10];
  uint64_t v48 = v25[11];
  uint64_t v54 = v25[12];
  char v56 = *((unsigned char *)v25 + 104);
  sub_10005C020(v41, v42, v43, v44, v45, v46, v47, v48, v54, v56);
  swift_bridgeObjectRelease();
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v49 = v41;
  *(void *)(v49 + 8) = v42;
  *(void *)(v49 + 16) = v43;
  *(void *)(v49 + 24) = v44;
  *(void *)(v49 + 32) = v45;
  *(void *)(v49 + 40) = v46;
  *(void *)(v49 + 48) = v47;
  *(void *)(v49 + 56) = v48;
  *(void *)(v49 + 64) = v54;
  *(unsigned char *)(v49 + 72) = v56;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001038A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        goto LABEL_13;
      }
      sub_100012DE4(a2, a3);
      uint64_t result = sub_10010CBE4((int)a2, a2 >> 32, a2, a3, a1, a4);
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 24);
      sub_100012DE4(a2, a3);
      swift_retain();
      swift_retain();
      sub_10010CBE4(v9, v10, a2, a3, a1, a4);
      swift_release();
      return swift_release();
    case 3uLL:
      memset(v11, 0, 14);
      goto LABEL_10;
    default:
      v11[0] = a2;
      LOWORD(v11[1]) = a3;
      BYTE2(v11[1]) = BYTE2(a3);
      BYTE3(v11[1]) = BYTE3(a3);
      BYTE4(v11[1]) = BYTE4(a3);
      BYTE5(v11[1]) = BYTE5(a3);
LABEL_10:
      sub_100103ADC((uint64_t)v11, a2, a3, a1, a4);
      sub_100012A10(a2, a3);
      uint64_t result = sub_100012A10(a2, a3);
      break;
  }
  return result;
}

uint64_t sub_100103ADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Data.Deallocator();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  BOOL v13 = (void (**)())((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  if (!a1) {
    goto LABEL_15;
  }
  Class isa = v14.super.isa;
  uint64_t v16 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v16) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_13;
      }
      uint64_t v16 = (int)v16;
LABEL_7:
      uint64_t v20 = v16 - a4;
      if (__OFSUB__(v16, a4))
      {
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x100103D54);
      }
      uint64_t v21 = a1 + a4;
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = isa;
      int *v13 = sub_1001115A0;
      v13[1] = (void (*)())v22;
      (*(void (**)(void (**)(), void, uint64_t))(v11 + 104))(v13, enum case for Data.Deallocator.custom(_:), v10);
      Data.Deallocator._deallocator.getter();
      if (v20)
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_retain();
        uint64_t v23 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
        uint64_t v24 = sub_10010E7B8(v23, v20);
        unint64_t v26 = v25;
        swift_release();
      }
      else
      {
        char v27 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
        v27(v21, 0);
        swift_release();
        swift_release();
        uint64_t v24 = 0;
        unint64_t v26 = 0xC000000000000000;
      }
      uint64_t result = (*(uint64_t (**)(void (**)(), uint64_t))(v11 + 8))(v13, v10);
      a5[3] = (uint64_t)&type metadata for Data;
      a5[4] = (uint64_t)&off_100172AE0;
      *a5 = v24;
      a5[1] = v26;
      return result;
    case 2uLL:
      uint64_t v18 = *(void *)(a2 + 16);
      uint64_t v17 = *(void *)(a2 + 24);
      BOOL v19 = __OFSUB__(v17, v18);
      uint64_t v16 = v17 - v18;
      if (!v19) {
        goto LABEL_7;
      }
      goto LABEL_14;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v16 = BYTE6(a3);
      goto LABEL_7;
  }
}

unint64_t sub_100103D64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v11 = a3;
  uint64_t v12 = a2;
  unint64_t result = sub_1001060F8(a1, a2, a3, a6, a7);
  if (!v7)
  {
    unint64_t v16 = v15;
    uint64_t v45 = a1;
    uint64_t v46 = a4;
    uint64_t v51 = 0;
    memset(v50, 0, sizeof(v50));
    uint64_t v17 = result;
    switch(v15 >> 62)
    {
      case 1uLL:
        uint64_t v43 = (uint64_t)result >> 32;
        if ((uint64_t)result >> 32 < (int)result) {
          __break(1u);
        }
        uint64_t v41 = v15 & 0x3FFFFFFFFFFFFFFFLL;
        swift_retain();
        sub_100012DE4(a6, a7);
        sub_100012DE4(a6, a7);
        sub_100012DE4(v17, v16);
        int v22 = sub_10010FB0C((int)v17, v43, v41, v17, v16, (uint64_t *)v50, a4, a5, a6, a7);
        goto LABEL_11;
      case 2uLL:
        uint64_t v23 = *(void *)(result + 16);
        uint64_t v44 = *(void *)(result + 24);
        swift_retain();
        sub_100012DE4(a6, a7);
        sub_100012DE4(a6, a7);
        sub_100012DE4(v17, v16);
        swift_retain();
        swift_retain();
        int v22 = sub_10010FB0C(v23, v44, v16 & 0x3FFFFFFFFFFFFFFFLL, v17, v16, (uint64_t *)v50, v46, a5, a6, a7);
        swift_release();
        goto LABEL_10;
      case 3uLL:
        *(void *)((char *)&v49 + 6) = 0;
        *(void *)&long long v49 = 0;
        swift_retain();
        sub_100012DE4(a6, a7);
        memset(v48, 0, 14);
        swift_retain();
        sub_100012DE4(a6, a7);
        swift_retain();
        sub_100012DE4(a6, a7);
        int v22 = sub_100102B30((int *)v48, (uint64_t)v48, (uint64_t *)v50, a4, a5, (uint64_t)&v49, a6, a7);
        sub_100012A10(v17, v16);
LABEL_10:
        swift_release();
LABEL_11:
        sub_100012A10(a6, a7);
        break;
      default:
        uint64_t v31 = v12;
        unint64_t v32 = v11;
        *(void *)&long long v49 = result;
        unint64_t v18 = result >> 8;
        unint64_t v19 = result >> 16;
        unint64_t v20 = result >> 24;
        unint64_t v21 = HIDWORD(result);
        unint64_t v35 = result >> 40;
        unint64_t v34 = HIWORD(result);
        unint64_t v33 = HIBYTE(result);
        WORD4(v49) = v15;
        unint64_t v36 = v15 >> 16;
        unint64_t v37 = v15 >> 8;
        unint64_t v42 = v15 >> 24;
        BYTE10(v49) = BYTE2(v15);
        BYTE11(v49) = BYTE3(v15);
        unint64_t v38 = v15 >> 40;
        unint64_t v39 = HIDWORD(v15);
        BYTE12(v49) = BYTE4(v15);
        unint64_t v40 = HIWORD(v15);
        BYTE13(v49) = BYTE5(v15);
        swift_retain();
        sub_100012DE4(a6, a7);
        LOBYTE(v48[0]) = v17;
        BYTE1(v48[0]) = v18;
        BYTE2(v48[0]) = v19;
        BYTE3(v48[0]) = v20;
        BYTE4(v48[0]) = v21;
        BYTE5(v48[0]) = v35;
        BYTE6(v48[0]) = v34;
        HIBYTE(v48[0]) = v33;
        LOBYTE(v48[1]) = v16;
        BYTE1(v48[1]) = v37;
        BYTE2(v48[1]) = v36;
        BYTE3(v48[1]) = v42;
        BYTE4(v48[1]) = v39;
        BYTE5(v48[1]) = v38;
        swift_retain();
        sub_100012DE4(a6, a7);
        swift_retain();
        sub_100012DE4(a6, a7);
        int v22 = sub_100102B30((int *)v48, (uint64_t)v48 + v40, (uint64_t *)v50, v46, a5, (uint64_t)&v49, a6, a7);
        sub_100012A10(v17, v16);
        swift_release();
        sub_100012A10(a6, a7);
        uint64_t v12 = v31;
        unint64_t v11 = v32;
        break;
    }
    sub_100012A10(v17, v16);
    swift_release();
    sub_100012A10(a6, a7);
    if (v22 == -1)
    {
      *(void *)&long long v49 = 0;
      *((void *)&v49 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v27._object = (void *)0x800000010014F590;
      v27._uint64_t countAndFlagsBits = 0xD000000000000038;
      String.append(_:)(v27);
      v28._uint64_t countAndFlagsBits = sub_1000F0F88(v45, v12, v11);
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      long long v29 = v49;
      sub_100012E3C();
      swift_allocError();
      *(_OWORD *)uint64_t v30 = v29;
      *(_OWORD *)(v30 + 16) = 0u;
      *(_OWORD *)(v30 + 32) = 0u;
      *(_OWORD *)(v30 + 48) = 0u;
      *(void *)(v30 + 64) = 0;
      *(unsigned char *)(v30 + 72) = 24;
      swift_willThrow();
      sub_100012A10(v17, v16);
      uint64_t v24 = *(void *)&v50[0];
    }
    else
    {
      uint64_t v25 = *(void *)&v50[0];
      if (*(void *)&v50[0])
      {
        uint64_t v26 = v51;
        swift_retain();
        swift_errorRetain();
        swift_release();
        swift_errorRelease();
        if (v26)
        {
          swift_errorRetain();
          swift_willThrow();
          sub_100012A10(v17, v16);
          return sub_10011093C(v25);
        }
      }
      sub_100012A10(v17, v16);
      uint64_t v24 = v25;
    }
    return sub_10011093C(v24);
  }
  return result;
}

uint64_t sub_100104398(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (!a1) {
LABEL_13:
  }
    __break(1u);
  uint64_t v17 = __chkstk_darwin(a1);
  long long v38[2] = v18;
  v38[3] = v19;
  v38[4] = v20;
  v38[5] = v17;
  v38[6] = v22;
  v38[7] = v23;
  unint64_t v39 = v24;
  uint64_t v40 = v25;
  switch(v21 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
        goto LABEL_13;
      }
      v38[8] = a3 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      sub_100012DE4(a7, a8);
      sub_100012DE4(a2, a3);
      unsigned int v33 = sub_10010F48C((int)a2, a2 >> 32, a3 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(void *__return_ptr, void, void))sub_100111558, (unint64_t)v38);
      uint64_t v34 = v8;
      sub_100012A10(a2, a3);
LABEL_10:
      swift_release();
      if (!v34) {
LABEL_7:
      }
        *unint64_t v39 = v33;
      return sub_100012A10(a7, a8);
    case 2uLL:
      uint64_t v35 = *(void *)(a2 + 16);
      int64_t v36 = *(void *)(a2 + 24);
      swift_retain();
      sub_100012DE4(a7, a8);
      swift_retain();
      swift_retain();
      unsigned int v33 = sub_10010F48C(v35, v36, a3 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(void *__return_ptr, void, void))sub_100111558, (unint64_t)v38);
      swift_release();
      swift_release();
      swift_release();
      if (!v8) {
        goto LABEL_7;
      }
      return sub_100012A10(a7, a8);
    case 3uLL:
      memset(v41, 0, 14);
      swift_retain();
      sub_100012DE4(a7, a8);
      swift_retain();
      sub_100012DE4(a7, a8);
      uint64_t v26 = (char *)v41;
      Swift::String v27 = a4;
      uint64_t v28 = a5;
      uint64_t v29 = a6;
      uint64_t v30 = a1;
      uint64_t v31 = a7;
      unint64_t v32 = a8;
      goto LABEL_9;
    default:
      v41[0] = a2;
      LOWORD(v41[1]) = a3;
      BYTE2(v41[1]) = BYTE2(a3);
      BYTE3(v41[1]) = BYTE3(a3);
      BYTE4(v41[1]) = BYTE4(a3);
      BYTE5(v41[1]) = BYTE5(a3);
      swift_retain();
      sub_100012DE4(a7, a8);
      swift_retain();
      sub_100012DE4(a7, a8);
      uint64_t v26 = (char *)v41 + BYTE6(a3);
      Swift::String v27 = a4;
      uint64_t v28 = a5;
      uint64_t v29 = a6;
      uint64_t v30 = a1;
      uint64_t v31 = a7;
      unint64_t v32 = a8;
LABEL_9:
      unsigned int v33 = sub_100102B30((int *)v41, (uint64_t)v26, v27, v28, v29, v30, v31, v32);
      uint64_t v34 = v8;
      goto LABEL_10;
  }
}

uint64_t sub_1001046FC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, unint64_t a7@<X7>, _DWORD *a8@<X8>)
{
  uint64_t v12 = *a3;
  *a3 = a4;
  a3[1] = a5;
  a3[2] = a1;
  a3[3] = a2 & 1;
  a3[4] = 0;
  swift_retain();
  sub_10011093C(v12);
  if (*a3)
  {
    switch(a7 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(a6), a6)) {
          goto LABEL_6;
        }
        __break(1u);
LABEL_8:
        __break(1u);
        break;
      case 2uLL:
        if (!__OFSUB__(*(void *)(a6 + 24), *(void *)(a6 + 16))) {
          goto LABEL_6;
        }
        goto LABEL_8;
      default:
LABEL_6:
        uint64_t result = macho_scan_load_commands();
        *a8 = result;
        return result;
    }
  }
  __break(1u);
  JUMPOUT(0x100104810);
}

uint64_t sub_100104820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001109D4(a1, a2, a4);
}

uint64_t sub_100104828(uint64_t a1, uint64_t (*a2)(void *))
{
  if (*(_DWORD *)a1 != 25) {
    return 2;
  }
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v5 = sub_1000F3C14(KeyPath, a1);
  uint64_t v7 = v6;
  swift_release();
  if (!String.count.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = 0xE600000000000000;
    uint64_t v5 = 0x3E656E6F6E3CLL;
  }
  sub_1001242F4(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 24), v5, v7, v10);
  uint64_t v8 = a2(v10);
  sub_10011152C((uint64_t)v10);
  return v8;
}

uint64_t sub_10010491C(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_100012DE4(a1, a2);
      uint64_t v3 = sub_100110B58((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2);
      goto LABEL_6;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      sub_100012DE4(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v3 = sub_100110B58(v7, v8, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2);
      swift_release();
      swift_release();
LABEL_6:
      sub_100012A10(a1, a2);
      return v3;
    case 3uLL:
      memset(v11, 0, 14);
      uint64_t v6 = (char *)v11;
      goto LABEL_8;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      BYTE5(v11[1]) = BYTE5(a2);
      uint64_t v6 = (char *)v11 + BYTE6(a2);
LABEL_8:
      sub_100104B3C((uint64_t)v11, (uint64_t)v6, a1, a2, &v10);
      sub_100012A10(a1, a2);
      if (!v2) {
        return v10;
      }
      return v3;
  }
}

uint64_t sub_100104B3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  if (!a1 || (unint64_t v7 = a2 - a1, a2 - a1 < 4))
  {
    sub_100012E3C();
    swift_allocError();
    uint64_t v9 = "Binary not large enough to accommodate magic";
    unint64_t v10 = 0xD00000000000002CLL;
LABEL_4:
    *(void *)uint64_t v8 = v10;
    *(void *)(v8 + 8) = (unint64_t)(v9 - 32) | 0x8000000000000000;
LABEL_5:
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(void *)(v8 + 64) = 0;
    *(unsigned char *)(v8 + 72) = 24;
    return swift_willThrow();
  }
  int v12 = *(_DWORD *)a1;
  if (*(int *)a1 <= -822415875)
  {
    if (v12 > -889275715)
    {
      if (v12 != -889275714)
      {
        int v13 = -889275713;
LABEL_15:
        if (v12 == v13)
        {
          if (v7 >= 8)
          {
            long long v86 = (char **)a5;
            uint32_t nfat_arch = *(_DWORD *)(a1 + 4);
            fat_header.magic = *(_DWORD *)a1;
            fat_header.uint32_t nfat_arch = nfat_arch;
            if (v12 == -1078264118)
            {
              j__swap_fat_header(&fat_header, NX_LittleEndian);
              uint32_t nfat_arch = fat_header.nfat_arch;
            }
            uint64_t v16 = nfat_arch;
            if (v7 >= ((32 * nfat_arch) | 8uLL))
            {
              size_t v17 = 32 * nfat_arch;
              uint64_t v18 = (fat_arch_64 *)swift_slowAlloc();
              uint64_t v19 = v18;
              if (v16) {
                memcpy(v18, (const void *)(a1 + 8), v17);
              }
              if (v12 == -1078264118) {
                j__swap_fat_arch_64(v19, v16, NX_LittleEndian);
              }
              uint64_t v20 = (char *)_swiftEmptyArrayStorage;
              if (v16)
              {
                p_cpuxpc_type_t type = &v19->cputype;
                uint64_t v22 = &v19[v16];
                do
                {
                  uint64_t v25 = j__NXGetArchInfoFromCpuType(*p_cputype, p_cputype[1]);
                  if (v25 && v25->name)
                  {
                    uint64_t v26 = String.init(cString:)();
                    uint64_t v28 = v27;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v20 = sub_10000C3BC(0, *((void *)v20 + 2) + 1, 1, v20);
                    }
                    unint64_t v30 = *((void *)v20 + 2);
                    unint64_t v29 = *((void *)v20 + 3);
                    unint64_t v31 = v30 + 1;
                    if (v30 >= v29 >> 1)
                    {
                      uint64_t v40 = sub_10000C3BC((char *)(v29 > 1), v30 + 1, 1, v20);
                      unint64_t v31 = v30 + 1;
                      uint64_t v20 = v40;
                    }
                    *((void *)v20 + 2) = v31;
                    unint64_t v32 = &v20[16 * v30];
                    *((void *)v32 + 4) = v26;
                    uint64_t v24 = v32 + 32;
                  }
                  else
                  {
                    *(void *)&mh.magic = 0x286E776F6E6B6E55;
                    *(void *)&mh.cpusubxpc_type_t type = 0xE800000000000000;
                    v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v33);
                    swift_bridgeObjectRelease();
                    v34._uint64_t countAndFlagsBits = 44;
                    v34._object = (void *)0xE100000000000000;
                    String.append(_:)(v34);
                    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v35);
                    swift_bridgeObjectRelease();
                    v36._uint64_t countAndFlagsBits = 41;
                    v36._object = (void *)0xE100000000000000;
                    String.append(_:)(v36);
                    uint64_t v37 = *(void *)&mh.magic;
                    uint64_t v28 = *(void *)&mh.cpusubtype;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v20 = sub_10000C3BC(0, *((void *)v20 + 2) + 1, 1, v20);
                    }
                    unint64_t v39 = *((void *)v20 + 2);
                    unint64_t v38 = *((void *)v20 + 3);
                    if (v39 >= v38 >> 1) {
                      uint64_t v20 = sub_10000C3BC((char *)(v38 > 1), v39 + 1, 1, v20);
                    }
                    *((void *)v20 + 2) = v39 + 1;
                    uint64_t v23 = &v20[16 * v39];
                    *((void *)v23 + 4) = v37;
                    uint64_t v24 = v23 + 32;
                  }
                  *((void *)v24 + 1) = v28;
                  p_cputype += 8;
                }
                while (p_cputype != (cpu_type_t *)v22);
              }
LABEL_96:
              uint64_t result = swift_slowDealloc();
              *long long v86 = v20;
              return result;
            }
            goto LABEL_52;
          }
          goto LABEL_45;
        }
LABEL_48:
        sub_100012E3C();
        swift_allocError();
        uint64_t v9 = "Binary does not have valid magic";
        unint64_t v10 = 0xD000000000000020;
        goto LABEL_4;
      }
    }
    else if (v12 != -1095041334)
    {
      int v13 = -1078264118;
      goto LABEL_15;
    }
    if (v7 >= 8)
    {
      uint32_t v43 = *(_DWORD *)(a1 + 4);
      fat_header.magic = *(_DWORD *)a1;
      fat_header.uint32_t nfat_arch = v43;
      if (v12 == -1095041334)
      {
        j__swap_fat_header(&fat_header, NX_LittleEndian);
        uint32_t v43 = fat_header.nfat_arch;
      }
      uint32_t v44 = v43;
      size_t v45 = 20 * v43;
      if (v7 >= v45 + 8)
      {
        long long v86 = (char **)a5;
        uint64_t v64 = (fat_arch *)swift_slowAlloc();
        uint64_t v65 = v64;
        if (v44) {
          memcpy(v64, (const void *)(a1 + 8), v45);
        }
        if (v12 == -1095041334) {
          j__swap_fat_arch(v65, v44, NX_LittleEndian);
        }
        if (v44)
        {
          char v66 = &v65[v44];
          uint64_t v20 = (char *)_swiftEmptyArrayStorage;
          uint64_t v67 = &v65->cputype;
          do
          {
            unsigned int v70 = j__NXGetArchInfoFromCpuType(*v67, v67[1]);
            if (v70 && v70->name)
            {
              uint64_t v71 = String.init(cString:)();
              uint64_t v73 = v72;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v20 = sub_10000C3BC(0, *((void *)v20 + 2) + 1, 1, v20);
              }
              unint64_t v75 = *((void *)v20 + 2);
              unint64_t v74 = *((void *)v20 + 3);
              unint64_t v76 = v75 + 1;
              if (v75 >= v74 >> 1)
              {
                uint64_t v85 = sub_10000C3BC((char *)(v74 > 1), v75 + 1, 1, v20);
                unint64_t v76 = v75 + 1;
                uint64_t v20 = v85;
              }
              *((void *)v20 + 2) = v76;
              unint64_t v77 = &v20[16 * v75];
              *((void *)v77 + 4) = v71;
              char v69 = v77 + 32;
            }
            else
            {
              *(void *)&mh.magic = 0x286E776F6E6B6E55;
              *(void *)&mh.cpusubxpc_type_t type = 0xE800000000000000;
              v78._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v78);
              swift_bridgeObjectRelease();
              v79._uint64_t countAndFlagsBits = 44;
              v79._object = (void *)0xE100000000000000;
              String.append(_:)(v79);
              v80._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v80);
              swift_bridgeObjectRelease();
              v81._uint64_t countAndFlagsBits = 41;
              v81._object = (void *)0xE100000000000000;
              String.append(_:)(v81);
              uint64_t v82 = *(void *)&mh.magic;
              uint64_t v73 = *(void *)&mh.cpusubtype;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v20 = sub_10000C3BC(0, *((void *)v20 + 2) + 1, 1, v20);
              }
              unint64_t v84 = *((void *)v20 + 2);
              unint64_t v83 = *((void *)v20 + 3);
              if (v84 >= v83 >> 1) {
                uint64_t v20 = sub_10000C3BC((char *)(v83 > 1), v84 + 1, 1, v20);
              }
              *((void *)v20 + 2) = v84 + 1;
              uint64_t v68 = &v20[16 * v84];
              *((void *)v68 + 4) = v82;
              char v69 = v68 + 32;
            }
            *((void *)v69 + 1) = v73;
            v67 += 5;
          }
          while (v67 != (cpu_type_t *)v66);
        }
        else
        {
          uint64_t v20 = (char *)_swiftEmptyArrayStorage;
        }
        goto LABEL_96;
      }
LABEL_52:
      sub_100012E3C();
      swift_allocError();
      uint64_t v9 = "Binary not large enough to accomodate fat arch headers";
      unint64_t v10 = 0xD000000000000036;
      goto LABEL_4;
    }
LABEL_45:
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000030;
    *(void *)(v8 + 8) = 0x8000000100150200;
    goto LABEL_5;
  }
  if (v12 > -17958195)
  {
    if (v12 != -17958194)
    {
      int v14 = -17958193;
      goto LABEL_41;
    }
LABEL_46:
    switch(a4 >> 62)
    {
      case 1uLL:
        LODWORD(v42) = HIDWORD(a3) - a3;
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_99;
        }
        uint64_t v42 = (int)v42;
LABEL_63:
        if (v42 < 28)
        {
LABEL_64:
          sub_100012E3C();
          swift_allocError();
          uint64_t v9 = "Binary not large enough to accomodate 32-bit header";
          unint64_t v10 = 0xD000000000000033;
          goto LABEL_4;
        }
        mh.magic = *(_DWORD *)a1;
        long long v50 = *(_OWORD *)(a1 + 4);
        *(_OWORD *)&mh.cpuxpc_type_t type = v50;
        *(void *)&mh.sizeofcmds = *(void *)(a1 + 20);
        if (v12 == -822415874)
        {
          j__swap_mach_header((mach_header *)&mh, NX_LittleEndian);
          goto LABEL_67;
        }
LABEL_68:
        cpuxpc_type_t type = v50;
        cpusubxpc_type_t type = DWORD1(v50);
        break;
      case 2uLL:
        uint64_t v52 = *(void *)(a3 + 16);
        uint64_t v51 = *(void *)(a3 + 24);
        BOOL v48 = __OFSUB__(v51, v52);
        uint64_t v42 = v51 - v52;
        if (!v48) {
          goto LABEL_63;
        }
        goto LABEL_100;
      case 3uLL:
        goto LABEL_64;
      default:
        uint64_t v42 = BYTE6(a4);
        goto LABEL_63;
    }
    goto LABEL_69;
  }
  if (v12 == -822415874) {
    goto LABEL_46;
  }
  int v14 = -805638658;
LABEL_41:
  if (v12 != v14) {
    goto LABEL_48;
  }
  switch(a4 >> 62)
  {
    case 1uLL:
      LODWORD(v41) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3))
      {
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
      }
      uint64_t v41 = (int)v41;
LABEL_56:
      if (v41 < 32)
      {
LABEL_57:
        sub_100012E3C();
        swift_allocError();
        uint64_t v9 = "Binary not large enough to accomodate 64-bit header";
        unint64_t v10 = 0xD000000000000033;
        goto LABEL_4;
      }
      uint32_t v49 = *(_DWORD *)(a1 + 28);
      mh.magic = *(_DWORD *)a1;
      long long v50 = *(_OWORD *)(a1 + 4);
      *(_OWORD *)&mh.cpuxpc_type_t type = v50;
      *(void *)&mh.sizeofcmds = *(void *)(a1 + 20);
      mh.reserved = v49;
      if (v12 != -805638658) {
        goto LABEL_68;
      }
      j__swap_mach_header_64(&mh, NX_LittleEndian);
      break;
    case 2uLL:
      uint64_t v47 = *(void *)(a3 + 16);
      uint64_t v46 = *(void *)(a3 + 24);
      BOOL v48 = __OFSUB__(v46, v47);
      uint64_t v41 = v46 - v47;
      if (!v48) {
        goto LABEL_56;
      }
      goto LABEL_98;
    case 3uLL:
      goto LABEL_57;
    default:
      uint64_t v41 = BYTE6(a4);
      goto LABEL_56;
  }
LABEL_67:
  cpuxpc_type_t type = mh.cputype;
  cpusubxpc_type_t type = mh.cpusubtype;
LABEL_69:
  uint64_t v55 = j__NXGetArchInfoFromCpuType(cputype, cpusubtype);
  if (v55 && v55->name) {
    uint64_t v56 = String.init(cString:)();
  }
  else {
    uint64_t v56 = sub_100110A84();
  }
  uint64_t v58 = v56;
  uint64_t v59 = v57;
  uint64_t result = (uint64_t)sub_10000C3BC(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  uint64_t v60 = result;
  unint64_t v62 = *(void *)(result + 16);
  unint64_t v61 = *(void *)(result + 24);
  if (v62 >= v61 >> 1)
  {
    uint64_t result = (uint64_t)sub_10000C3BC((char *)(v61 > 1), v62 + 1, 1, (char *)result);
    uint64_t v60 = result;
  }
  *(void *)(v60 + 16) = v62 + 1;
  unint64_t v63 = v60 + 16 * v62;
  *(void *)(v63 + 32) = v58;
  *(void *)(v63 + 40) = v59;
  *a5 = v60;
  return result;
}

uint64_t sub_1001054C4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v8 = a2 >> 62;
  uint64_t v13 = a3;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      uint64_t v16 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v16 < 28)
      {
LABEL_7:
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v19 = 0xD00000000000002ELL;
        *(void *)(v19 + 8) = 0x800000010014F5D0;
        *(_OWORD *)(v19 + 16) = 0u;
        *(_OWORD *)(v19 + 32) = 0u;
        *(_OWORD *)(v19 + 48) = 0u;
        *(void *)(v19 + 64) = 0;
        *(unsigned char *)(v19 + 72) = 24;
        swift_willThrow();
        return v13;
      }
      if (v8)
      {
        if (v8 != 1)
        {
          uint64_t v22 = *(void *)(a1 + 24);
          uint64_t v24 = *(void *)(a1 + 16);
          sub_100012DE4(a6, a7);
          swift_bridgeObjectRetain();
          sub_100012DE4(a1, a2);
          swift_retain();
          swift_retain();
          uint64_t v13 = sub_10010E6E4(v24, v22, a2 & 0x3FFFFFFFFFFFFFFFLL, a6, a7, v16, a3, a4, a5, a1, a2);
          swift_release();
          swift_release();
LABEL_17:
          sub_100012A10(a6, a7);
          swift_bridgeObjectRelease();
          sub_100012A10(a1, a2);
          return v13;
        }
        uint64_t v13 = a1 >> 32;
        if (a1 >> 32 >= (int)a1)
        {
          uint64_t v23 = a2 & 0x3FFFFFFFFFFFFFFFLL;
          sub_100012DE4(a6, a7);
          swift_bridgeObjectRetain();
          sub_100012DE4(a1, a2);
          uint64_t v21 = sub_10010E6E4((int)a1, a1 >> 32, v23, a6, a7, v16, a3, a4, a5, a1, a2);
          if (!v7) {
            uint64_t v13 = v21;
          }
          goto LABEL_17;
        }
LABEL_20:
        __break(1u);
      }
      LOWORD(v27) = a1;
      BYTE2(v27) = BYTE2(a1);
      HIBYTE(v27) = BYTE3(a1);
      char v28 = BYTE4(a1);
      char v29 = BYTE5(a1);
      char v30 = BYTE6(a1);
      char v31 = HIBYTE(a1);
      __int16 v32 = a2;
      char v33 = BYTE2(a2);
      char v34 = BYTE3(a2);
      char v35 = BYTE4(a2);
      char v36 = BYTE5(a2);
      sub_100012DE4(a6, a7);
      swift_bridgeObjectRetain();
      sub_10010586C(&v27, v16, v13, a4, a5, a1, a2, &v26);
      sub_100012A10(a6, a7);
      swift_bridgeObjectRelease();
      sub_100012A10(a1, a2);
      if (!v7) {
        return v26;
      }
      return v13;
    case 2uLL:
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v17 = *(void *)(a1 + 24);
      uint64_t v16 = v17 - v18;
      if (!__OFSUB__(v17, v18)) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v16 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10010586C@<X0>(uint32_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  uint64_t v9 = a8;
  if (!a1)
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v27 = 0xD000000000000019;
    *(void *)(v27 + 8) = 0x80000001001500C0;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(void *)(v27 + 64) = 0;
    *(unsigned char *)(v27 + 72) = 24;
    return swift_willThrow();
  }
  uint64_t v10 = v8;
  uint32_t magic = *a1;
  uint32_t v15 = a1[1];
  fat_header.uint32_t magic = magic;
  fat_header.uint32_t nfat_arch = v15;
  if (magic == -1095041334 || magic == -889275714)
  {
    uint64_t v64 = a4;
    uint64_t v65 = (uint64_t *)HIDWORD(a5);
    uint64_t v63 = a3;
    char v66 = a8;
    static os_log_type_t.info.getter();
    sub_10002A230();
    uint64_t v17 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v18 = bswap32(v15);
    uint64_t result = sub_10010DD88(v18, a2);
    if (v8) {
      return result;
    }
    uint64_t v20 = (fat_arch *)swift_slowAlloc();
    uint64_t v21 = v20;
    if (v15) {
      memcpy(v20, a1 + 2, 20 * v18);
    }
    uint64_t v22 = v66;
    if (magic == -1095041334)
    {
      static os_log_type_t.info.getter();
      uint64_t v23 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      j__swap_fat_header(&fat_header, NX_LittleEndian);
      j__swap_fat_arch(v21, v18, NX_LittleEndian);
      uint32_t magic = fat_header.magic;
    }
    if (magic == -889275714)
    {
      uint64_t v24 = j__NXFindBestFatArch(a5, (cpu_subtype_t)v65, v21, v18);
      if (v24)
      {
        uint64_t v25 = *(void *)&v24->offset;
        *(void *)&long long v26 = v25;
        *((void *)&v26 + 1) = HIDWORD(v25);
        *char v66 = v26;
        *((unsigned char *)v22 + 16) = 0;
        return swift_slowDealloc();
      }
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      strcpy((char *)v67, "Cannot find ");
      BYTE5(v67[1]) = 0;
      HIWORD(v67[1]) = -5120;
      v56._uint64_t countAndFlagsBits = sub_1000F0F88(v63, v64, a5);
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      v57._uint64_t countAndFlagsBits = 0x20746166206E6920;
      v57._object = (void *)0xEE007972616E6962;
      String.append(_:)(v57);
      uint64_t v58 = v67[1];
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v41 = v67[0];
      *(void *)(v41 + 8) = v58;
      *(_OWORD *)(v41 + 16) = 0u;
      *(_OWORD *)(v41 + 32) = 0u;
      *(_OWORD *)(v41 + 48) = 0u;
      *(void *)(v41 + 64) = 0;
      char v42 = 16;
    }
    else
    {
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v41 = 0xD000000000000022;
      *(void *)(v41 + 8) = 0x80000001001500F0;
      *(_OWORD *)(v41 + 16) = 0u;
      *(_OWORD *)(v41 + 32) = 0u;
      *(_OWORD *)(v41 + 48) = 0u;
      *(void *)(v41 + 64) = 0;
      char v42 = 24;
    }
    *(unsigned char *)(v41 + 72) = v42;
    swift_willThrow();
    return swift_slowDealloc();
  }
  __chkstk_darwin(a1);
  v59[2] = v30;
  v59[3] = v31;
  int v60 = a5;
  int v61 = v33;
  uint64_t v62 = a2;
  switch(v32 >> 62)
  {
    case 1uLL:
      uint64_t v65 = &v63;
      char v66 = v9;
      if (a6 >> 32 < (int)a6) {
        __break(1u);
      }
      swift_bridgeObjectRetain();
      sub_100012DE4(a6, a7);
      uint64_t v43 = sub_10010E050((int)a6, a6 >> 32, a7 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(void *__return_ptr, void, void))sub_10011150C, (unint64_t)v59);
      if (!v8)
      {
        uint64_t v36 = v43;
        uint64_t v38 = v44;
        char v40 = v45;
        sub_100012A10(a6, a7);
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      sub_100012A10(a6, a7);
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 2uLL:
      uint64_t v65 = &v63;
      char v66 = v9;
      uint64_t v46 = *(void *)(a6 + 16);
      int64_t v47 = *(void *)(a6 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v48 = sub_10010E050(v46, v47, a7 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(void *__return_ptr, void, void))sub_10011150C, (unint64_t)v59);
      if (!v10)
      {
        uint64_t v36 = v48;
        uint64_t v38 = v49;
        char v40 = v50;
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t result = swift_release();
LABEL_33:
        uint64_t v9 = v66;
        goto LABEL_34;
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      *(void *)((char *)v67 + 6) = 0;
      v67[0] = 0;
      uint64_t v51 = v31;
      uint64_t v52 = v30;
      swift_bridgeObjectRetain_n();
      uint64_t v53 = sub_100103218((int *)v67, (uint64_t)v67, v52, v51, a5, a2);
      if (!v8)
      {
        uint64_t v36 = v53;
        uint64_t v38 = v54;
        char v40 = v55;
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_34;
      }
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      v67[0] = a6;
      LOWORD(v67[1]) = a7;
      BYTE2(v67[1]) = BYTE2(a7);
      BYTE3(v67[1]) = BYTE3(a7);
      BYTE4(v67[1]) = BYTE4(a7);
      BYTE5(v67[1]) = BYTE5(a7);
      uint64_t v34 = v31;
      uint64_t v35 = v30;
      swift_bridgeObjectRetain_n();
      uint64_t v36 = sub_100103218((int *)v67, (uint64_t)v67 + BYTE6(a7), v35, v34, a5, a2);
      uint64_t v38 = v37;
      char v40 = v39;
      uint64_t result = swift_bridgeObjectRelease();
      if (!v8)
      {
LABEL_34:
        *(void *)uint64_t v9 = v36;
        *((void *)v9 + 1) = v38;
        *((unsigned char *)v9 + 16) = v40 & 1;
      }
      break;
  }
  return result;
}

uint64_t sub_100105EF4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  cpu_type_t v12 = *(_DWORD *)(result + 4);
  unsigned int v11 = *(_DWORD *)(result + 8);
  if ((*(_DWORD *)result | 0x1000000) == 0xCFFAEDFE)
  {
    if (v12 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t result = sub_1001116BC(*(_DWORD *)(result + 4));
      if ((result & 0x80000000) == 0)
      {
        if ((v11 & 0x80000000) == 0)
        {
          cpu_type_t v12 = result;
          uint64_t result = sub_1001116BC(v11);
          if ((result & 0x80000000) == 0)
          {
            unsigned int v11 = result;
            goto LABEL_7;
          }
LABEL_16:
          __break(1u);
          return result;
        }
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_7:
  if (v12 == a4)
  {
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = a5;
    *(unsigned char *)(a6 + 16) = 1;
  }
  else
  {
    uint64_t v13 = sub_1000F10D4(v12, v11);
    if (v14 == 1
      || (uint64_t v15 = (uint64_t)v13, v16 = v14, v17 = sub_1000F0F54((uint64_t)v13), v19 = v18, sub_1000805AC(v15, v16), !v19))
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = (void *)0xE700000000000000;
      uint64_t v17 = 0x6E776F6E6B6E75;
    }
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    strcpy((char *)v25, "Binary is for ");
    HIBYTE(v25[1]) = -18;
    v20._uint64_t countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._object = (void *)0x8000000100150140;
    v21._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v21);
    v22._uint64_t countAndFlagsBits = sub_1000F0F88(a2, a3, a4);
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    uint64_t v23 = v25[1];
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v24 = v25[0];
    *(void *)(v24 + 8) = v23;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(void *)(v24 + 64) = 0;
    *(unsigned char *)(v24 + 72) = 16;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1001060F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = a2;
  uint64_t v10 = sub_1001054C4(a4, a5, a1, a2, a3, a4, a5);
  if (v5) {
    return v8;
  }
  uint64_t v13 = v11;
  char v14 = v12;
  switch(a5 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a4), a4)) {
        goto LABEL_30;
      }
      uint64_t v15 = HIDWORD(a4) - (int)a4;
LABEL_7:
      if (v10 >= v15) {
        goto LABEL_11;
      }
      if (v10 > 0xFFFFFFFFLL)
      {
        __break(1u);
LABEL_10:
        uint64_t v15 = 0;
        if ((v10 & 0x8000000000000000) == 0)
        {
LABEL_11:
          uint64_t v48 = 0;
          unint64_t v49 = 0xE000000000000000;
          _StringGuts.grow(_:)(93);
          v18._uint64_t countAndFlagsBits = 0xD000000000000039;
          v18._object = (void *)0x800000010014F600;
          String.append(_:)(v18);
          uint64_t v51 = v8;
          swift_bridgeObjectRetain();
          sub_100004700(&qword_10017D498);
          v19._uint64_t countAndFlagsBits = String.init<A>(describing:)();
          String.append(_:)(v19);
          swift_bridgeObjectRelease();
          v20._object = (void *)0x800000010014F640;
          v20._uint64_t countAndFlagsBits = 0xD000000000000010;
          String.append(_:)(v20);
          v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v21);
          swift_bridgeObjectRelease();
          v22._uint64_t countAndFlagsBits = 0x207972616E694220;
          v22._object = (void *)0xEE00203A657A6953;
          String.append(_:)(v22);
          uint64_t v50 = v15;
LABEL_12:
          uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_18:
          String.append(_:)(*(Swift::String *)&v23);
          swift_bridgeObjectRelease();
          uint64_t v8 = v49;
          sub_100012E3C();
          swift_allocError();
          *(void *)uint64_t v31 = v48;
          *(void *)(v31 + 8) = v8;
          *(_OWORD *)(v31 + 16) = 0u;
          *(_OWORD *)(v31 + 32) = 0u;
          *(_OWORD *)(v31 + 48) = 0u;
          *(void *)(v31 + 64) = 0;
          *(unsigned char *)(v31 + 72) = 24;
          swift_willThrow();
          return v8;
        }
      }
      if ((v10 | v11) < 0)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      if (v11 > 0xFFFFFFFFLL) {
        goto LABEL_29;
      }
      int v25 = v10 + v11;
      if (__CFADD__(v10, v11))
      {
        uint64_t v48 = 0;
        unint64_t v49 = 0xE000000000000000;
        _StringGuts.grow(_:)(95);
        v26._uint64_t countAndFlagsBits = 0xD000000000000037;
        v26._object = (void *)0x800000010014F730;
        String.append(_:)(v26);
        v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v28._object = (void *)0x800000010014F770;
        v28._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v28);
        v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._uint64_t countAndFlagsBits = 0xD000000000000012;
        v30._object = (void *)0x800000010014F790;
        String.append(_:)(v30);
        uint64_t v50 = a1;
        uint64_t v51 = v8;
        swift_bridgeObjectRetain();
        sub_100004700(&qword_10017D498);
        uint64_t v23 = String.init<A>(describing:)();
        goto LABEL_18;
      }
      BOOL v33 = v25 != 0;
      unint64_t v34 = (v25 - 1);
      if (!v33)
      {
        uint64_t v48 = 0;
        unint64_t v49 = 0xE000000000000000;
        _StringGuts.grow(_:)(131);
        v35._uint64_t countAndFlagsBits = 0xD000000000000061;
        v35._object = (void *)0x800000010014F6C0;
        String.append(_:)(v35);
        uint64_t v51 = v8;
        swift_bridgeObjectRetain();
        sub_100004700(&qword_10017D498);
        v36._uint64_t countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        v37._object = (void *)0x800000010014F640;
        v37._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v37);
        v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v38);
        swift_bridgeObjectRelease();
        v39._uint64_t countAndFlagsBits = 0x73206563696C5320;
        v39._object = (void *)0xEC00000020657A69;
        String.append(_:)(v39);
        uint64_t v50 = v13;
        goto LABEL_12;
      }
      if (v15 < 0) {
        goto LABEL_32;
      }
      if (v15 <= v34)
      {
        uint64_t v48 = 0;
        unint64_t v49 = 0xE000000000000000;
        _StringGuts.grow(_:)(110);
        v43._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
        v43._object = (void *)0x800000010014F660;
        String.append(_:)(v43);
        uint64_t v51 = v8;
        swift_bridgeObjectRetain();
        sub_100004700(&qword_10017D498);
        v44._uint64_t countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v45._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        v45._object = (void *)0x800000010014F6A0;
        String.append(_:)(v45);
        v46._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._uint64_t countAndFlagsBits = 0x207972616E694220;
        v47._object = (void *)0xEE00203A657A6953;
        String.append(_:)(v47);
        uint64_t v50 = v15;
        goto LABEL_12;
      }
      if (v34 < v10)
      {
LABEL_33:
        __break(1u);
        JUMPOUT(0x10010673CLL);
      }
      uint64_t v40 = sub_10010674C(v10 | ((unint64_t)v34 << 32), a4, a5);
      uint64_t v8 = v40;
      unint64_t v42 = v41;
      if ((v14 & 1) == 0)
      {
        sub_100106850(v40, v41, &v48);
        sub_100012A10(v8, v42);
        sub_100004700(&qword_10017F190);
        swift_dynamicCast();
        return v50;
      }
      return v8;
    case 2uLL:
      uint64_t v17 = *(void *)(a4 + 16);
      uint64_t v16 = *(void *)(a4 + 24);
      uint64_t v15 = v16 - v17;
      if (!__OFSUB__(v16, v17)) {
        goto LABEL_7;
      }
      goto LABEL_31;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v15 = BYTE6(a5);
      goto LABEL_7;
  }
}

uint64_t sub_10010674C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3 >> 62;
  unint64_t v4 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      unint64_t v4 = (int)a2;
      goto LABEL_6;
    case 2uLL:
      unint64_t v4 = *(void *)(a2 + 16);
LABEL_6:
      if ((v4 & 0x8000000000000000) == 0) {
        goto LABEL_23;
      }
      __break(1u);
LABEL_8:
      unint64_t v5 = a2 >> 32;
LABEL_10:
      if ((v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_18;
      }
      unint64_t v3 = HIDWORD(v5);
      if (HIDWORD(v5))
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      while (2)
      {
        if (v5 < v4)
        {
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
        if (HIDWORD(a1) < v4)
        {
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        if (HIDWORD(a1) >= v5)
        {
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        if (a1 > (unint64_t)(HIDWORD(a1) + 1))
        {
LABEL_22:
          __break(1u);
LABEL_23:
          if (HIDWORD(v4))
          {
            __break(1u);
            JUMPOUT(0x100106830);
          }
LABEL_2:
          LODWORD(v5) = 0;
          switch((int)v3)
          {
            case 0:
              LODWORD(v5) = BYTE6(a3);
              continue;
            case 1:
              goto LABEL_8;
            case 2:
              unint64_t v5 = *(void *)(a2 + 24);
              goto LABEL_10;
            case 3:
              continue;
            default:
              JUMPOUT(0);
          }
        }
        return Data._Representation.subscript.getter();
      }
    default:
      goto LABEL_2;
  }
}

uint64_t sub_100106850@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (&_compression_stream_identify_algorithm)
  {
    switch(a2 >> 62)
    {
      case 1uLL:
        if (a1 >> 32 < (int)a1) {
          __break(1u);
        }
        sub_100012DE4(a1, a2);
        uint64_t result = sub_10010CB3C((int)a1, a1 >> 32, a1, a2, a3);
        break;
      case 2uLL:
        uint64_t v8 = *(void *)(a1 + 16);
        uint64_t v9 = *(void *)(a1 + 24);
        sub_100012DE4(a1, a2);
        swift_retain();
        swift_retain();
        sub_10010CB3C(v8, v9, a1, a2, a3);
        swift_release();
        uint64_t result = swift_release();
        break;
      case 3uLL:
        memset(v10, 0, 14);
        goto LABEL_13;
      default:
        v10[0] = a1;
        LOWORD(v10[1]) = a2;
        BYTE2(v10[1]) = BYTE2(a2);
        BYTE3(v10[1]) = BYTE3(a2);
        BYTE4(v10[1]) = BYTE4(a2);
        BYTE5(v10[1]) = BYTE5(a2);
LABEL_13:
        sub_100107DF4((const uint8_t *)v10, a1, a2, a3);
        sub_100012A10(a1, a2);
        uint64_t result = sub_100012A10(a1, a2);
        break;
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    sub_10002A230();
    uint64_t v6 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    a3[3] = (uint64_t)&type metadata for Data;
    a3[4] = (uint64_t)&off_100172AE0;
    *a3 = a1;
    a3[1] = a2;
    return sub_100012DE4(a1, a2);
  }
  return result;
}

uint64_t sub_100106B20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v18 = sub_1001060F8(a1, a2, a3, a9, a10);
  if (!v10)
  {
    uint64_t v30 = a4;
    char v21 = a5 & 1;
    unint64_t v22 = v19 >> 62;
    switch(v19 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(v18), v18)) {
          goto LABEL_7;
        }
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        return result;
      case 2uLL:
        if (!__OFSUB__(*(void *)(v18 + 24), *(void *)(v18 + 16))) {
          goto LABEL_7;
        }
        goto LABEL_24;
      default:
LABEL_7:
        uint64_t v29 = v18;
        unint64_t v23 = v19;
        uint64_t v24 = sub_1000A2114();
        if (a7
          && (*v24 == a6 ? (BOOL v25 = v24[1] == a7) : (BOOL v25 = 0),
              v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          a6 = (uint64_t)sub_100101304(a1, a2, a3, v30, v21, a9, a10);
          sub_100012A10(v29, v23);
        }
        else
        {
          switch((int)v22)
          {
            case 1:
              if (v29 >> 32 < (int)v29) {
                goto LABEL_25;
              }
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              sub_100012DE4(v29, v23);
              a6 = sub_10010EF84((int)v29, v29 >> 32, v23 & 0x3FFFFFFFFFFFFFFFLL, a1, a2, a3);
              sub_100012A10(v29, v23);
              sub_100012A10(v29, v23);
              swift_bridgeObjectRelease();
LABEL_22:
              swift_bridgeObjectRelease_n();
              break;
            case 2:
              uint64_t v28 = a1;
              uint64_t v26 = *(void *)(v29 + 16);
              uint64_t v27 = *(void *)(v29 + 24);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              swift_retain();
              swift_retain();
              a6 = sub_10010EF84(v26, v27, v23 & 0x3FFFFFFFFFFFFFFFLL, v28, a2, a3);
              swift_release();
              swift_release();
              sub_100012A10(v29, v23);
              swift_bridgeObjectRelease();
              goto LABEL_22;
            case 3:
              memset(v32, 0, 14);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              sub_100107048((uint64_t)v32, a1, a2, a3);
              sub_100012A10(v29, v23);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              goto LABEL_21;
            default:
              v32[0] = v29;
              LOWORD(v32[1]) = v23;
              BYTE2(v32[1]) = BYTE2(v23);
              BYTE3(v32[1]) = BYTE3(v23);
              BYTE4(v32[1]) = BYTE4(v23);
              BYTE5(v32[1]) = BYTE5(v23);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              sub_100107048((uint64_t)v32, a1, a2, a3);
              sub_100012A10(v29, v23);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
LABEL_21:
              a6 = v31;
              break;
          }
          swift_bridgeObjectRelease();
        }
        break;
    }
  }
  return a6;
}

uint64_t sub_100107048(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a1)
  {
    uint64_t v16 = 0;
    macho_find_symtab();
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD000000000000020;
    unint64_t v15 = 0x800000010014FEF0;
    uint64_t v7 = a2;
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD00000000000001CLL;
    unint64_t v15 = 0x800000010014FED0;
    uint64_t v7 = a2;
  }
  v8._uint64_t countAndFlagsBits = sub_1000F0F88(v7, a3, a4);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 11817;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  unint64_t v10 = v15;
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v11 = v14;
  *(void *)(v11 + 8) = v10;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(void *)(v11 + 64) = 0;
  *(unsigned char *)(v11 + 72) = 24;
  return swift_willThrow();
}

uint64_t sub_100107644(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6, uint64_t a7, unint64_t a8)
{
  uint64_t v12 = sub_1001060F8(a2, a3, a4, a7, a8);
  if (!v8)
  {
    uint64_t v15 = v12;
    unint64_t v16 = v13;
    uint64_t v17 = v14;
    int v18 = a6 & 1;
    unint64_t v30 = sub_1000FFDEC((uint64_t)_swiftEmptyArrayStorage);
    __chkstk_darwin(v30);
    void v26[2] = a1;
    v26[3] = &v30;
    void v26[4] = a5;
    BOOL v27 = v18 != 0;
    uint64_t v28 = v17;
    switch(v16 >> 62)
    {
      case 1uLL:
        if (v15 >> 32 < (int)v15) {
          __break(1u);
        }
        swift_bridgeObjectRetain_n();
        sub_100012DE4(v15, v16);
        sub_10010CC9C((int)v15, v15 >> 32, (void *)(v16 & 0x3FFFFFFFFFFFFFFFLL), (uint64_t (*)(void, void))sub_100110C0C, (unint64_t)v26, v20);
        sub_100012A10(v15, v16);
        goto LABEL_10;
      case 2uLL:
        uint64_t v21 = *(void *)(v15 + 16);
        int64_t v22 = *(void *)(v15 + 24);
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_retain();
        sub_10010CC9C(v21, v22, (void *)(v16 & 0x3FFFFFFFFFFFFFFFLL), (uint64_t (*)(void, void))sub_100110C0C, (unint64_t)v26, v23);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_11;
      case 3uLL:
        memset(v29, 0, 14);
        swift_bridgeObjectRetain_n();
        unint64_t v19 = (char *)v29;
        goto LABEL_8;
      default:
        v29[0] = v15;
        LOWORD(v29[1]) = v16;
        BYTE2(v29[1]) = BYTE2(v16);
        BYTE3(v29[1]) = BYTE3(v16);
        BYTE4(v29[1]) = BYTE4(v16);
        BYTE5(v29[1]) = BYTE5(v16);
        swift_bridgeObjectRetain_n();
        unint64_t v19 = (char *)v29 + BYTE6(v16);
LABEL_8:
        sub_100101E88((int *)v29, (uint64_t)v19, a1, (uint64_t *)&v30, a5, v18, v17);
LABEL_10:
        swift_bridgeObjectRelease();
LABEL_11:
        swift_bridgeObjectRelease();
        sub_100012DE4(v15, v16);
        uint64_t v25 = swift_bridgeObjectRetain();
        a1 = sub_10010E8A0(v25);
        sub_100012A10(v15, v16);
        sub_100012A10(v15, v16);
        swift_bridgeObjectRelease_n();
        break;
    }
  }
  return a1;
}

uint64_t sub_1001079E8(uint64_t result, char a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a3 + 16);
  if (!v7) {
    return result;
  }
  if (a6) {
    a5 = 0;
  }
  uint64_t v48 = a5;
  swift_bridgeObjectRetain();
  uint64_t v11 = (uint64_t *)(a3 + 56);
  do
  {
    unint64_t v13 = a4;
    uint64_t v14 = *(v11 - 2);
    uint64_t v15 = *(v11 - 1);
    uint64_t v16 = *v11;
    uint64_t v52 = *(v11 - 3);
    String.utf8CString.getter();
    String.utf8CString.getter();
    uint64_t v53 = v14;
    swift_bridgeObjectRetain();
    uint64_t v54 = v16;
    swift_bridgeObjectRetain();
    if (a2)
    {
      uint64_t section_by_name = macho_get_section_by_name();
      swift_release();
      swift_release();
      a4 = v13;
      if (section_by_name)
      {
        uint64_t v18 = v48;
        if (v48 < 0) {
          goto LABEL_42;
        }
        uint64_t v20 = v15;
        uint64_t v21 = (unsigned int *)(section_by_name + 40);
        uint64_t v19 = *(unsigned int *)(section_by_name + 36);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t section_by_name_64 = macho_get_section_by_name_64();
      swift_release();
      swift_release();
      a4 = v13;
      if (section_by_name_64)
      {
        uint64_t v18 = v48;
        if (v48 < 0) {
          goto LABEL_43;
        }
        uint64_t v19 = *(void *)(section_by_name_64 + 40);
        if (v19 < 0) {
          goto LABEL_44;
        }
        uint64_t v20 = v15;
        uint64_t v21 = (unsigned int *)(section_by_name_64 + 48);
LABEL_17:
        uint64_t v23 = *v21 - v18;
        uint64_t v24 = a7 + v23;
        if (__OFADD__(a7, v23))
        {
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        uint64_t v51 = v7;
        uint64_t v25 = v24 + v19;
        if (__OFADD__(v24, v19)) {
          goto LABEL_40;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v27 = *a4;
        char v55 = (void *)*a4;
        *a4 = 0x8000000000000000;
        unint64_t v29 = sub_10010B1F0(v52, v53, v20, v54);
        uint64_t v30 = *(void *)(v27 + 16);
        BOOL v31 = (v28 & 1) == 0;
        uint64_t v32 = v30 + v31;
        if (__OFADD__(v30, v31)) {
          goto LABEL_41;
        }
        char v33 = v28;
        if (*(void *)(v27 + 24) >= v32)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_10010C968();
          }
          uint64_t v34 = v53;
          Swift::String v37 = v55;
          if ((v33 & 1) == 0)
          {
LABEL_31:
            v37[(v29 >> 6) + 8] |= 1 << v29;
            Swift::String v43 = (uint64_t *)(v37[6] + 32 * v29);
            *Swift::String v43 = v52;
            v43[1] = v34;
            v43[2] = v20;
            v43[3] = v54;
            uint64_t v44 = v37[7] + 24 * v29;
            *(void *)uint64_t v44 = v24;
            *(void *)(v44 + 8) = v25;
            *(unsigned char *)(v44 + 16) = 0;
            uint64_t v45 = v37[2];
            BOOL v46 = __OFADD__(v45, 1);
            uint64_t v47 = v45 + 1;
            if (v46) {
              goto LABEL_45;
            }
            v37[2] = v47;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_7;
          }
        }
        else
        {
          sub_10010BB20(v32, isUniquelyReferenced_nonNull_native);
          uint64_t v34 = v53;
          unint64_t v35 = sub_10010B1F0(v52, v53, v20, v54);
          if ((v33 & 1) != (v36 & 1)) {
            goto LABEL_46;
          }
          unint64_t v29 = v35;
          Swift::String v37 = v55;
          if ((v33 & 1) == 0) {
            goto LABEL_31;
          }
        }
        uint64_t v12 = v37[7] + 24 * v29;
        *(void *)uint64_t v12 = v24;
        *(void *)(v12 + 8) = v25;
        *(unsigned char *)(v12 + 16) = 0;
LABEL_7:
        *a4 = (uint64_t)v37;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v7 = v51;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRetain();
    unint64_t v38 = sub_10010B1F0(v52, v14, v15, v54);
    char v40 = v39;
    swift_bridgeObjectRelease();
    if (v40)
    {
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v42 = *a4;
      uint64_t v56 = *a4;
      *a4 = 0x8000000000000000;
      if ((v41 & 1) == 0)
      {
        sub_10010C968();
        uint64_t v42 = v56;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10010C084(v38, v42);
      *a4 = v42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_8:
    v11 += 4;
    --v7;
  }
  while (v7);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100107DF4@<X0>(const uint8_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Data.Deallocator();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v69 = a1;
  if (!a1)
  {
    static os_log_type_t.error.getter();
    sub_10002A230();
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    a4[3] = (uint64_t)&type metadata for Data;
    a4[4] = (uint64_t)&off_100172AE0;
    *a4 = a2;
    a4[1] = a3;
    return sub_100012DE4(a2, a3);
  }
  int v61 = v11;
  switch(a3 >> 62)
  {
    case 1uLL:
      if ((int)a2 > a2 >> 32) {
        goto LABEL_51;
      }
      sub_100012DE4(a2, a3);
      if (!__DataStorage._bytes.getter())
      {
        __DataStorage._length.getter();
        sub_100012A10(a2, a3);
LABEL_44:
        int v14 = 0;
LABEL_45:
        static os_log_type_t.info.getter();
        sub_100004700((uint64_t *)&unk_10017D6E0);
        uint64_t v54 = swift_allocObject();
        *(_OWORD *)(v54 + 16) = xmmword_100132F10;
        *(void *)(v54 + 56) = &type metadata for Int32;
        *(void *)(v54 + 64) = &protocol witness table for Int32;
        *(_DWORD *)(v54 + 32) = v14;
        sub_10002A230();
        char v55 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        a4[3] = (uint64_t)&type metadata for Data;
        a4[4] = (uint64_t)&off_100172AE0;
        *a4 = a2;
        a4[1] = a3;
        return sub_100012DE4(a2, a3);
      }
      if (__OFSUB__((int)a2, __DataStorage._offset.getter())) {
        goto LABEL_54;
      }
      __DataStorage._length.getter();
      int v14 = compression_stream_identify_algorithm();
      sub_100012A10(a2, a3);
      if (v14 < 1) {
        goto LABEL_45;
      }
LABEL_21:
      uint64_t v57 = v9;
      uint64_t v58 = v8;
      static os_log_type_t.info.getter();
      uint64_t v67 = sub_100004700((uint64_t *)&unk_10017D6E0);
      uint64_t v19 = swift_allocObject();
      long long v56 = xmmword_100132F10;
      *(_OWORD *)(v19 + 16) = xmmword_100132F10;
      compression_algorithm v20 = v14;
      uint64_t v21 = compression_algorithm.description.getter(v14);
      uint64_t v23 = v22;
      *(void *)(v19 + 56) = &type metadata for String;
      *(void *)(v19 + 64) = sub_10002A1DC();
      *(void *)(v19 + 32) = v21;
      *(void *)(v19 + 40) = v23;
      sub_10002A230();
      uint64_t v24 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();

      compression_algorithm v25 = v20;
      compression_decode_scratch_buffer_size(v20);
      uint64_t v68 = (void *)swift_slowAlloc();
      unint64_t v26 = a3 >> 62;
      int64_t v27 = 0;
      size_t v64 = BYTE6(a3);
      switch(a3 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(a2), a2)) {
            goto LABEL_55;
          }
          int64_t v27 = HIDWORD(a2) - (int)a2;
LABEL_26:
          unint64_t v59 = a3;
          int v60 = a4;
          swift_slowAlloc();
          uint64_t v30 = 0;
          uint64_t v65 = a2;
          BOOL v31 = __OFSUB__(HIDWORD(a2), a2);
          BOOL v63 = v31;
          size_t v62 = HIDWORD(a2) - (int)a2;
          long long v66 = xmmword_100132F30;
          break;
        case 2uLL:
          uint64_t v29 = *(void *)(a2 + 16);
          uint64_t v28 = *(void *)(a2 + 24);
          int64_t v27 = v28 - v29;
          if (!__OFSUB__(v28, v29)) {
            goto LABEL_26;
          }
          goto LABEL_56;
        case 3uLL:
          goto LABEL_26;
        default:
          int64_t v27 = v64;
          goto LABEL_26;
      }
      while (2)
      {
        if ((unint64_t)(v27 - 0x2000000000000000) >> 62 != 3)
        {
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
        }
        v27 *= 4;
        swift_slowDealloc();
        static os_log_type_t.info.getter();
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = v66;
        *(void *)(v32 + 56) = &type metadata for Int;
        *(void *)(v32 + 64) = &protocol witness table for Int;
        *(void *)(v32 + 32) = v27;
        *(void *)(v32 + 96) = &type metadata for Int;
        *(void *)(v32 + 104) = &protocol witness table for Int;
        *(void *)(v32 + 72) = v30;
        char v33 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        size_t v35 = 0;
        switch(v26)
        {
          case 1uLL:
            size_t v35 = v62;
            if (v63) {
              goto LABEL_49;
            }
            goto LABEL_36;
          case 2uLL:
            uint64_t v37 = *(void *)(v65 + 16);
            uint64_t v36 = *(void *)(v65 + 24);
            size_t v35 = v36 - v37;
            if (!__OFSUB__(v36, v37)) {
              goto LABEL_36;
            }
            goto LABEL_50;
          case 3uLL:
            goto LABEL_36;
          default:
            size_t v35 = v64;
LABEL_36:
            int64_t v38 = compression_decode_buffer(v34, v27, v69, v35, v68, v25);
            if (v38)
            {
              if (__OFADD__(v30, 1)) {
                goto LABEL_48;
              }
              uint64_t v39 = v38;
              ++v30;
              if (v38 < v27)
              {
                static os_log_type_t.info.getter();
                uint64_t v40 = swift_allocObject();
                *(_OWORD *)(v40 + 16) = v56;
                *(void *)(v40 + 56) = &type metadata for Int;
                *(void *)(v40 + 64) = &protocol witness table for Int;
                *(void *)(v40 + 32) = v39;
                char v41 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();
                swift_bridgeObjectRelease();

                uint64_t v43 = v57;
                uint64_t v42 = v58;
                uint64_t v44 = v61;
                (*(void (**)(char *, void, uint64_t))(v57 + 104))(v61, enum case for Data.Deallocator.free(_:), v58);
                Data.Deallocator._deallocator.getter();
                type metadata accessor for __DataStorage();
                swift_allocObject();
                swift_retain();
                uint64_t v45 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                uint64_t v46 = sub_10010E7B8(v45, v39);
                uint64_t v48 = v47;
                swift_release();
                (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
                unint64_t v49 = v60;
                v60[3] = (uint64_t)&type metadata for Data;
                v49[4] = (uint64_t)&off_100172AE0;
                *unint64_t v49 = v46;
                v49[1] = v48;
                return swift_slowDealloc();
              }
              continue;
            }
            static os_log_type_t.error.getter();
            uint64_t v50 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();

            unint64_t v51 = v59;
            uint64_t v52 = v60;
            v60[3] = (uint64_t)&type metadata for Data;
            v52[4] = (uint64_t)&off_100172AE0;
            uint64_t v53 = v65;
            *uint64_t v52 = v65;
            v52[1] = v51;
            sub_100012DE4(v53, v51);
            return swift_slowDealloc();
        }
      }
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = __DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_15;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_53;
      }
      v17 += v15 - v18;
LABEL_15:
      if (__OFSUB__(v16, v15)) {
        goto LABEL_52;
      }
      __DataStorage._length.getter();
      if (v17)
      {
        int v14 = compression_stream_identify_algorithm();
        swift_release();
        swift_release();
        if (v14 < 1) {
          goto LABEL_45;
        }
        goto LABEL_21;
      }
      swift_release();
      swift_release();
      goto LABEL_44;
    case 3uLL:
      memset(v70, 0, 14);
      goto LABEL_20;
    default:
      v70[0] = a2;
      LOWORD(v70[1]) = a3;
      BYTE2(v70[1]) = BYTE2(a3);
      BYTE3(v70[1]) = BYTE3(a3);
      BYTE4(v70[1]) = BYTE4(a3);
      BYTE5(v70[1]) = BYTE5(a3);
LABEL_20:
      int v14 = compression_stream_identify_algorithm();
      if (v14 >= 1) {
        goto LABEL_21;
      }
      goto LABEL_45;
  }
}

uint64_t compression_algorithm.description.getter(int a1)
{
  uint64_t result = 0x6573667A6CLL;
  if (a1 > 2208)
  {
    if (a1 == 2209 || a1 == 2305) {
      return result;
    }
    if (a1 == 2304) {
      return 1853258348;
    }
LABEL_11:
    v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    return 0x2065646F6328;
  }
  if ((a1 - 256) < 2) {
    return 3439212;
  }
  if (a1 != 2049 && a1 != 2193) {
    goto LABEL_11;
  }
  return result;
}

void sub_100108788(compression_algorithm a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (&_compression_stream_identify_algorithm)
  {
    compression_encode_scratch_buffer_size(a1);
    uint64_t v8 = (void *)swift_slowAlloc();
    static os_log_type_t.info.getter();
    sub_100004700((uint64_t *)&unk_10017D6E0);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100132F10;
    uint64_t v10 = compression_algorithm.description.getter(a1);
    uint64_t v12 = v11;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_10002A1DC();
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v12;
    sub_10002A230();
    unint64_t v13 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    switch(a3 >> 62)
    {
      case 1uLL:
        if (a2 >> 32 < (int)a2) {
          __break(1u);
        }
        sub_100012DE4(a2, a3);
        sub_10010D338((int)a2, a2 >> 32, a2, a3, v8, a1, a4);
        break;
      case 2uLL:
        uint64_t v15 = *(void *)(a2 + 16);
        uint64_t v16 = *(void *)(a2 + 24);
        sub_100012DE4(a2, a3);
        swift_retain();
        swift_retain();
        sub_10010D338(v15, v16, a2, a3, v8, a1, a4);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v17, 0, 14);
        goto LABEL_9;
      default:
        v17[0] = a2;
        LOWORD(v17[1]) = a3;
        BYTE2(v17[1]) = BYTE2(a3);
        BYTE3(v17[1]) = BYTE3(a3);
        BYTE4(v17[1]) = BYTE4(a3);
        BYTE5(v17[1]) = BYTE5(a3);
LABEL_9:
        sub_100108ABC((const uint8_t *)v17, a2, a3, v8, a1, a4);
        sub_100012A10(a2, a3);
        sub_100012A10(a2, a3);
        break;
    }
    swift_slowDealloc();
  }
  else
  {
    static os_log_type_t.error.getter();
    sub_10002A230();
    int v14 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    *(void *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
}

double sub_100108ABC@<D0>(const uint8_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, compression_algorithm a5@<W4>, uint64_t a6@<X8>)
{
  if (a1)
  {
    unint64_t v9 = a3 >> 62;
    int64_t v10 = 0;
    unint64_t v11 = HIDWORD(a2);
    size_t v34 = BYTE6(a3);
    switch(a3 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(a2), a2)) {
          goto LABEL_32;
        }
        int64_t v10 = HIDWORD(a2) - (int)a2;
LABEL_10:
        swift_slowAlloc();
        sub_10002A230();
        uint64_t v16 = 0;
        BOOL v17 = __OFSUB__(v11, a2);
        BOOL v33 = v17;
        break;
      case 2uLL:
        uint64_t v15 = *(void *)(a2 + 16);
        uint64_t v14 = *(void *)(a2 + 24);
        int64_t v10 = v14 - v15;
        if (!__OFSUB__(v14, v15)) {
          goto LABEL_10;
        }
        goto LABEL_33;
      case 3uLL:
        goto LABEL_10;
      default:
        int64_t v10 = BYTE6(a3);
        goto LABEL_10;
    }
    while (2)
    {
      swift_slowDealloc();
      static os_log_type_t.info.getter();
      sub_100004700((uint64_t *)&unk_10017D6E0);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_100132F30;
      *(void *)(v18 + 56) = &type metadata for Int;
      *(void *)(v18 + 64) = &protocol witness table for Int;
      *(void *)(v18 + 32) = v10;
      *(void *)(v18 + 96) = &type metadata for Int;
      *(void *)(v18 + 104) = &protocol witness table for Int;
      *(void *)(v18 + 72) = v16;
      uint64_t v19 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();

      compression_algorithm v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = v20;
      size_t v22 = 0;
      switch((int)v9)
      {
        case 1:
          size_t v22 = (int)v11 - (int)a2;
          if (v33) {
            goto LABEL_30;
          }
          goto LABEL_19;
        case 2:
          uint64_t v24 = *(void *)(a2 + 16);
          uint64_t v23 = *(void *)(a2 + 24);
          size_t v22 = v23 - v24;
          if (!__OFSUB__(v23, v24)) {
            goto LABEL_19;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_19;
        default:
          size_t v22 = v34;
LABEL_19:
          int64_t v25 = compression_encode_buffer(v20, v10, a1, v22, a4, a5);
          if (!v25)
          {
            static os_log_type_t.error.getter();
            uint64_t v32 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();

            *(void *)(a6 + 32) = 0;
            double result = 0.0;
            *(_OWORD *)a6 = 0u;
            *(_OWORD *)(a6 + 16) = 0u;
            return result;
          }
          if (v10 + 0x4000000000000000 < 0)
          {
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
            JUMPOUT(0x100108ED4);
          }
          if (__OFADD__(v16, 1)) {
            goto LABEL_29;
          }
          uint64_t v26 = v25;
          ++v16;
          BOOL v27 = v25 < v10;
          v10 *= 2;
          if (!v27) {
            continue;
          }
          static os_log_type_t.info.getter();
          uint64_t v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = xmmword_100132F10;
          *(void *)(v28 + 56) = &type metadata for Int;
          *(void *)(v28 + 64) = &protocol witness table for Int;
          *(void *)(v28 + 32) = v26;
          uint64_t v29 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();

          uint64_t v30 = sub_1000F7E70(v21, v26);
          *(void *)(a6 + 24) = &type metadata for Data;
          *(void *)(a6 + 32) = &off_100172AE0;
          *(void *)a6 = v30;
          *(void *)(a6 + 8) = v31;
          swift_slowDealloc();
          break;
      }
      break;
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    sub_10002A230();
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    *(void *)(a6 + 24) = &type metadata for Data;
    *(void *)(a6 + 32) = &off_100172AE0;
    *(void *)a6 = a2;
    *(void *)(a6 + 8) = a3;
    sub_100012DE4(a2, a3);
  }
  return result;
}

void sub_100108EF4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (sub_100110C48())
  {
    switch(a2 >> 62)
    {
      case 1uLL:
        if (a1 >> 32 < (int)a1) {
          __break(1u);
        }
        sub_100012DE4(a1, a2);
        sub_10010D3F8((int)a1, a1 >> 32, a1, a2, a3);
        break;
      case 2uLL:
        uint64_t v7 = *(void *)(a1 + 16);
        uint64_t v8 = *(void *)(a1 + 24);
        sub_100012DE4(a1, a2);
        swift_retain();
        swift_retain();
        sub_10010D3F8(v7, v8, a1, a2, a3);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v9, 0, 14);
        goto LABEL_11;
      default:
        v9[0] = a1;
        LOWORD(v9[1]) = a2;
        BYTE2(v9[1]) = BYTE2(a2);
        BYTE3(v9[1]) = BYTE3(a2);
        BYTE4(v9[1]) = BYTE4(a2);
        BYTE5(v9[1]) = BYTE5(a2);
LABEL_11:
        sub_100109170((uint64_t)v9, a1, a2, a3);
        sub_100012A10(a1, a2);
        sub_100012A10(a1, a2);
        break;
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    sub_10002A230();
    uint64_t v6 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

void sub_100109170(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v29 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  unint64_t v5 = a3 >> 62;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long __src = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  unsigned __int8 v6 = BYTE6(a3);
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
      }
      uint64_t v9 = HIDWORD(a2) - (int)a2;
LABEL_6:
      Img4DecodeInitPayload(a1, v9, (uint64_t)&v29);
      unint64_t v13 = objc_retain_x22;
      if (v12)
      {
        int v14 = v12;
        static os_log_type_t.info.getter();
        sub_100004700((uint64_t *)&unk_10017D6E0);
        uint64_t v15 = swift_allocObject();
        *(_OWORD *)(v15 + 16) = xmmword_100132F10;
        *(void *)(v15 + 56) = &type metadata for Int32;
        *(void *)(v15 + 64) = &protocol witness table for Int32;
        *(_DWORD *)(v15 + 32) = v14;
        sub_10002A230();
        uint64_t v16 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        uint64_t v17 = 0;
        unint64_t v13 = objc_retain_x22;
        switch((int)v5)
        {
          case 0:
            uint64_t v17 = v6;
            goto LABEL_12;
          case 1:
            if (__OFSUB__(HIDWORD(a2), a2)) {
              goto LABEL_19;
            }
            uint64_t v17 = HIDWORD(a2) - (int)a2;
LABEL_12:
            Img4DecodeInit(a1, v17, (uint64_t)&v29);
            if (!v20) {
              goto LABEL_14;
            }
            int v21 = v20;
            static os_log_type_t.error.getter();
            uint64_t v22 = swift_allocObject();
            *(_OWORD *)(v22 + 16) = xmmword_100132F10;
            *(void *)(v22 + 56) = &type metadata for Int32;
            *(void *)(v22 + 64) = &protocol witness table for Int32;
            *(_DWORD *)(v22 + 32) = v21;
            uint64_t v23 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();

            *(void *)(a4 + 32) = 0;
            *(_OWORD *)a4 = 0u;
            *(_OWORD *)(a4 + 16) = 0u;
            break;
          case 2:
            uint64_t v19 = *(void *)(a2 + 16);
            uint64_t v18 = *(void *)(a2 + 24);
            uint64_t v17 = v18 - v19;
            if (!__OFSUB__(v18, v19)) {
              goto LABEL_12;
            }
            goto LABEL_20;
          case 3:
            goto LABEL_12;
          default:
            JUMPOUT(0);
        }
      }
      else
      {
LABEL_14:
        static os_log_type_t.info.getter();
        sub_100004700((uint64_t *)&unk_10017D6E0);
        uint64_t v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = *((_OWORD *)v13 + 241);
        uint64_t v25 = *((void *)&__src + 1);
        *(void *)(v24 + 56) = &type metadata for Int;
        *(void *)(v24 + 64) = &protocol witness table for Int;
        *(void *)(v24 + 32) = v25;
        sub_10002A230();
        uint64_t v26 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        if (!(void)__src)
        {
          __break(1u);
          JUMPOUT(0x100109508);
        }
        uint64_t v27 = sub_1000F7E70((unsigned char *)__src, v25);
        *(void *)(a4 + 24) = &type metadata for Data;
        *(void *)(a4 + 32) = &off_100172AE0;
        *(void *)a4 = v27;
        *(void *)(a4 + 8) = v28;
      }
      return;
    case 2uLL:
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_18;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v9 = BYTE6(a3);
      goto LABEL_6;
  }
}

uint64_t sub_100109528@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result = sub_100110C48();
  if (result)
  {
    switch(a6 >> 62)
    {
      case 1uLL:
        if (a5 >> 32 < (int)a5) {
          __break(1u);
        }
        sub_100012DE4(a5, a6);
        sub_10002F064(a3, a4);
        sub_1000C914C(a1, a2);
        sub_10002F064(a3, a4);
        sub_100012DE4(a5, a6);
        sub_1000C914C(a1, a2);
        sub_10002F064(a3, a4);
        sub_10010D4A0((int)a5, a5 >> 32, a1, a2, a5, a6, a3, a7, a4);
        sub_10002404C(a3, a4);
        goto LABEL_11;
      case 2uLL:
        uint64_t v15 = *(void *)(a5 + 16);
        uint64_t v16 = *(void *)(a5 + 24);
        sub_100012DE4(a5, a6);
        sub_10002F064(a3, a4);
        sub_1000C914C(a1, a2);
        sub_10002F064(a3, a4);
        sub_100012DE4(a5, a6);
        sub_1000C914C(a1, a2);
        sub_10002F064(a3, a4);
        swift_retain();
        swift_retain();
        sub_10010D4A0(v15, v16, a1, a2, a5, a6, a3, a7, a4);
        swift_release();
        swift_release();
        goto LABEL_8;
      case 3uLL:
        memset(v17, 0, 14);
        goto LABEL_7;
      default:
        v17[0] = a5;
        LOWORD(v17[1]) = a6;
        BYTE2(v17[1]) = BYTE2(a6);
        BYTE3(v17[1]) = BYTE3(a6);
        BYTE4(v17[1]) = BYTE4(a6);
        BYTE5(v17[1]) = BYTE5(a6);
LABEL_7:
        sub_1000C914C(a1, a2);
        sub_10002F064(a3, a4);
        sub_10002F064(a3, a4);
        sub_1001098C8(v17, a1, a2, a5, a6, a3, a4, a7);
        sub_100012A10(a5, a6);
LABEL_8:
        sub_10002404C(a3, a4);
LABEL_11:
        sub_10003C944(a1, a2);
        sub_100012A10(a5, a6);
        uint64_t result = sub_10002404C(a3, a4);
        break;
    }
  }
  else
  {
    *(void *)(a7 + 32) = 0;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
  }
  return result;
}

void sub_1001098C8(const void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  long long v43 = a1;
  uint64_t v15 = type metadata accessor for Data.Deallocator();
  uint64_t v41 = *(void *)(v15 - 8);
  uint64_t v42 = v15;
  __chkstk_darwin(v15);
  long long v40 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v44 = 0;
  uint64_t v45 = 0;
  LODWORD(v17) = 0;
  switch(a5 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a4), a4)) {
        goto LABEL_31;
      }
      unint64_t v17 = HIDWORD(a4) - (int)a4;
LABEL_6:
      if ((v17 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_28;
      }
      if (HIDWORD(v17))
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
      }
LABEL_8:
      sub_1000C914C(a2, a3);
      if (a7 >> 60 != 15)
      {
        int v21 = sub_1000EDAE4(a6, a7);
        LODWORD(v20) = 0;
        switch(a7 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(a6), a6)) {
              goto LABEL_33;
            }
            unint64_t v20 = HIDWORD(a6) - (int)a6;
LABEL_15:
            if ((v20 & 0x8000000000000000) != 0) {
              goto LABEL_29;
            }
            if (!HIDWORD(v20)) {
              goto LABEL_17;
            }
            goto LABEL_30;
          case 2uLL:
            uint64_t v23 = *(void *)(a6 + 16);
            uint64_t v22 = *(void *)(a6 + 24);
            unint64_t v20 = v22 - v23;
            if (!__OFSUB__(v22, v23)) {
              goto LABEL_15;
            }
            goto LABEL_34;
          case 3uLL:
            goto LABEL_17;
          default:
            LODWORD(v20) = BYTE6(a7);
            goto LABEL_17;
        }
      }
      LODWORD(v20) = 0;
      int v21 = 0;
LABEL_17:
      uint64_t v24 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      if (v21) {
        uint64_t v25 = v21 + 4;
      }
      else {
        uint64_t v25 = 0;
      }
      int v26 = Img4EncodeCreatePayload((const char *)(v24 + 32), "KernelManagement_executables-463.40.2", v43, v17, v25, v20, &v45, &v44);
      swift_release();
      swift_bridgeObjectRelease();
      if (v26 == 100 && (uint64_t v27 = v45) != 0)
      {
        uint64_t v28 = v44;
        long long v30 = v40;
        uint64_t v29 = v41;
        uint64_t v31 = v42;
        (*(void (**)(char *, void, uint64_t))(v41 + 104))(v40, enum case for Data.Deallocator.free(_:), v42);
        Data.Deallocator._deallocator.getter();
        if (v28)
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          swift_retain();
          uint64_t v32 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
          uint64_t v33 = sub_10010E7B8(v32, v28);
          unint64_t v35 = v34;
          swift_release();
        }
        else
        {
          int64_t v38 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
          v38(v27, 0);
          swift_release();
          swift_release();
          uint64_t v33 = 0;
          unint64_t v35 = 0xC000000000000000;
        }
        (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
        *(void *)(a8 + 24) = &type metadata for Data;
        *(void *)(a8 + 32) = &off_100172AE0;
        *(void *)a8 = v33;
        *(void *)(a8 + 8) = v35;
      }
      else
      {
        static os_log_type_t.error.getter();
        sub_100004700((uint64_t *)&unk_10017D6E0);
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_100132F10;
        *(void *)(v36 + 56) = &type metadata for Int32;
        *(void *)(v36 + 64) = &protocol witness table for Int32;
        *(_DWORD *)(v36 + 32) = v26;
        sub_10002A230();
        long long v37 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        *(void *)(a8 + 32) = 0;
        *(_OWORD *)a8 = 0u;
        *(_OWORD *)(a8 + 16) = 0u;
      }
      return;
    case 2uLL:
      uint64_t v19 = *(void *)(a4 + 16);
      uint64_t v18 = *(void *)(a4 + 24);
      unint64_t v17 = v18 - v19;
      if (!__OFSUB__(v18, v19)) {
        goto LABEL_6;
      }
      goto LABEL_32;
    case 3uLL:
      goto LABEL_8;
    default:
      LODWORD(v17) = BYTE6(a5);
      goto LABEL_8;
  }
}

BOOL sub_100109D64(uint64_t a1, unint64_t a2)
{
  if (sub_100110C48())
  {
    switch(a2 >> 62)
    {
      case 1uLL:
        if (a1 >> 32 < (int)a1) {
          __break(1u);
        }
        sub_100012DE4(a1, a2);
        char v10 = sub_100110C74((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2);
        if (v2) {
          goto LABEL_16;
        }
        BOOL v3 = v10;
        goto LABEL_13;
      case 2uLL:
        uint64_t v7 = *(void *)(a1 + 16);
        uint64_t v8 = *(void *)(a1 + 24);
        sub_100012DE4(a1, a2);
        swift_retain();
        swift_retain();
        char v9 = sub_100110C74(v7, v8, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2);
        if (v2) {
          goto LABEL_17;
        }
        BOOL v3 = v9;
        swift_release();
        swift_release();
LABEL_13:
        sub_100012A10(a1, a2);
        break;
      case 3uLL:
        memset(v13, 0, 14);
        goto LABEL_8;
      default:
        v13[0] = a1;
        LOWORD(v13[1]) = a2;
        BYTE2(v13[1]) = BYTE2(a2);
        BYTE3(v13[1]) = BYTE3(a2);
        BYTE4(v13[1]) = BYTE4(a2);
        BYTE5(v13[1]) = BYTE5(a2);
LABEL_8:
        sub_100109FFC((uint64_t)v13, a1, a2, &v12);
        if (v2)
        {
LABEL_16:
          sub_100012A10(a1, a2);
          __break(1u);
LABEL_17:
          sub_100012A10(a1, a2);
          swift_release();
          swift_release();
          __break(1u);
          JUMPOUT(0x100109FECLL);
        }
        sub_100012A10(a1, a2);
        BOOL v3 = v12;
        break;
    }
  }
  else
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v6 = 0xD000000000000039;
    *(void *)(v6 + 8) = 0x800000010014F890;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(void *)(v6 + 64) = 0;
    *(unsigned char *)(v6 + 72) = 10;
    swift_willThrow();
  }
  return v3;
}

void sub_100109FFC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, BOOL *a4@<X8>)
{
  __int16 v11 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v6 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_8:
        __break(1u);
      }
      uint64_t v6 = HIDWORD(a2) - (int)a2;
LABEL_6:
      Img4DecodeInitPayload(a1, v6, (uint64_t)&v11);
      *a4 = v10 == 0;
      return;
    case 2uLL:
      uint64_t v9 = a2 + 16;
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(v9 + 8);
      uint64_t v6 = v7 - v8;
      if (!__OFSUB__(v7, v8)) {
        goto LABEL_6;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v6 = BYTE6(a3);
      goto LABEL_6;
  }
}

uint64_t sub_10010A138(uint64_t a1, unint64_t a2)
{
  if (!&_compression_stream_identify_algorithm)
  {
    static os_log_type_t.error.getter();
    sub_10002A230();
    unint64_t v4 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v5 = 0xD00000000000003CLL;
    *(void *)(v5 + 8) = 0x800000010014F900;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(void *)(v5 + 64) = 0;
    *(unsigned char *)(v5 + 72) = 10;
    swift_willThrow();
    return v6 & 1;
  }
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 > a1 >> 32)
      {
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      sub_100012DE4(a1, a2);
      if (!__DataStorage._bytes.getter())
      {
        __DataStorage._length.getter();
        sub_100012A10(a1, a2);
LABEL_20:
        char v6 = 0;
        return v6 & 1;
      }
      if (__OFSUB__((int)a1, __DataStorage._offset.getter()))
      {
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
      }
      __DataStorage._length.getter();
      int v7 = compression_stream_identify_algorithm();
      sub_100012A10(a1, a2);
      if (v7 <= 0) {
        goto LABEL_20;
      }
LABEL_17:
      char v6 = 1;
      return v6 & 1;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_12;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__(v8, v11)) {
        goto LABEL_25;
      }
      v10 += v8 - v11;
LABEL_12:
      if (__OFSUB__(v9, v8)) {
        goto LABEL_23;
      }
      __DataStorage._length.getter();
      if (v10)
      {
        int v12 = compression_stream_identify_algorithm();
        swift_release();
        swift_release();
        if (v12 > 0) {
          goto LABEL_17;
        }
      }
      else
      {
        swift_release();
        swift_release();
      }
      goto LABEL_20;
    default:
      if ((int)compression_stream_identify_algorithm() > 0) {
        goto LABEL_17;
      }
      goto LABEL_20;
  }
}

void sub_10010A428(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, char a4@<W5>, unint64_t a5@<X6>, char a6@<W7>, uint64_t *a7@<X8>, uint64_t a8)
{
  if (!sub_100110D18())
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v18 = 0xD000000000000019;
    *(void *)(v18 + 8) = 0x800000010014F940;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(void *)(v18 + 64) = 0;
    *(unsigned char *)(v18 + 72) = 10;
    swift_willThrow();
    return;
  }
  id v68 = 0;
  char v69 = 0;
  if ((a4 & 1) == 0)
  {
    unint64_t v62 = 0xF000000000000000;
    uint64_t v63 = 0;
    goto LABEL_14;
  }
  if (a6)
  {
    sub_100012E3C();
    swift_allocError();
    long long v32 = "Could not encode compression info: Payload is compressed but cannot find uncompressed length";
    unint64_t v33 = 0xD00000000000005CLL;
  }
  else
  {
    if ((a8 & 0x100000000) == 0)
    {
      if ((a5 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (!HIDWORD(a5))
      {
        if (sub_1001114B8())
        {
          long long v66 = 0;
          unsigned int v65 = 0;
          long long v14 = (uint64_t *)DEREncoderCreate(0);
          if (v14)
          {
            if (a8 == 2193)
            {
              long long v15 = v14;
              if (DEREncoderAddUInt32(v14, 0, 2u, 1u)
                || DEREncoderAddUInt32(v15, 0, 2u, a5))
              {
                DEREncoderDestroy((void **)v15);
                static os_log_type_t.error.getter();
                sub_100004700((uint64_t *)&unk_10017D6E0);
                uint64_t v16 = swift_allocObject();
                *(_OWORD *)(v16 + 16) = xmmword_100132F10;
                *(void *)(v16 + 56) = &type metadata for UInt32;
                *(void *)(v16 + 64) = &protocol witness table for UInt32;
                *(_DWORD *)(v16 + 32) = 3;
                sub_10002A230();
                long long v17 = (void *)static OS_os_log.default.getter();
              }
              else
              {
                if (!DEREncoderCreateEncodedBuffer((uint64_t **)v15, &v66, &v65))
                {
                  uint64_t v58 = v65;
                  if (v65)
                  {
                    unint64_t v59 = v66;
                    if (v66)
                    {
                      DEREncoderDestroy((void **)v15);
                      uint64_t v60 = sub_1000F7E70(v59, v58);
                      unint64_t v62 = v61;
                      uint64_t v63 = v60;
                      if (v61 >> 60 == 15) {
                        goto LABEL_34;
                      }
LABEL_14:
                      NSString v19 = String._bridgeToObjectiveC()();
                      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
                      unsigned int PayloadPropertiesData = AMAuthInstallApImg4GetPayloadPropertiesData();

                      if (PayloadPropertiesData || (long long v34 = v69) == 0)
                      {
                        long long v66 = 0;
                        unint64_t v67 = 0xE000000000000000;
                        _StringGuts.grow(_:)(59);
                        v22._uint64_t countAndFlagsBits = 0xD000000000000039;
                        v22._object = (void *)0x800000010014F960;
                        String.append(_:)(v22);
                        unsigned int v65 = PayloadPropertiesData;
                        v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                        String.append(_:)(v23);
                        swift_bridgeObjectRelease();
                        long long v24 = v66;
                        unint64_t v25 = v67;
                        sub_100012E3C();
                        swift_allocError();
                        *(void *)uint64_t v26 = v24;
                        *(void *)(v26 + 8) = v25;
                        *(_OWORD *)(v26 + 16) = 0u;
                        *(_OWORD *)(v26 + 32) = 0u;
                        *(_OWORD *)(v26 + 48) = 0u;
                        *(void *)(v26 + 64) = 0;
                        *(unsigned char *)(v26 + 72) = 31;
                        swift_bridgeObjectRetain();
                        swift_willThrow();
                        swift_bridgeObjectRetain();
                        static os_log_type_t.error.getter();
                        sub_100004700((uint64_t *)&unk_10017D6E0);
                        uint64_t v27 = swift_allocObject();
                        *(_OWORD *)(v27 + 16) = xmmword_100132F10;
                        *(void *)(v27 + 56) = &type metadata for String;
                        *(void *)(v27 + 64) = sub_10002A1DC();
                        *(void *)(v27 + 32) = v24;
                        *(void *)(v27 + 40) = v25;
                        sub_10002A230();
                        long long v28 = (void *)static OS_os_log.default.getter();
                        os_log(_:dso:log:_:_:)();
                        swift_bridgeObjectRelease();

                        unint64_t v30 = v62;
                        uint64_t v29 = v63;
                      }
                      else
                      {
                        sub_1000C914C(a1, a2);
                        v35.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
                        if (a3 >> 60 == 15) {
                          Class v36 = 0;
                        }
                        else {
                          Class v36 = Data._bridgeToObjectiveC()().super.isa;
                        }
                        if (v62 >> 60 == 15)
                        {
                          Class v38 = 0;
                        }
                        else
                        {
                          sub_100012DE4(v63, v62);
                          Class v38 = Data._bridgeToObjectiveC()().super.isa;
                          sub_10002404C(v63, v62);
                        }
                        String.utf8CString.getter();
                        id v39 = v34;
                        swift_bridgeObjectRelease();
                        unsigned int PayloadWithProperties = AMAuthInstallApImg4CreatePayloadWithProperties();

                        swift_release();
                        if (!PayloadWithProperties && v68)
                        {
                          id v48 = v68;
                          uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v51 = v50;

                          a7[3] = (uint64_t)&type metadata for Data;
                          a7[4] = (uint64_t)&off_100172AE0;

                          sub_10002404C(v63, v62);
                          *a7 = v49;
                          a7[1] = v51;
                          return;
                        }
                        long long v66 = 0;
                        unint64_t v67 = 0xE000000000000000;
                        _StringGuts.grow(_:)(65);
                        v41._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
                        v41._object = (void *)0x800000010014F9A0;
                        String.append(_:)(v41);
                        unsigned int v65 = PayloadWithProperties;
                        v42._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                        String.append(_:)(v42);
                        swift_bridgeObjectRelease();
                        long long v43 = v66;
                        unint64_t v44 = v67;
                        sub_100012E3C();
                        swift_allocError();
                        *(void *)uint64_t v45 = v43;
                        *(void *)(v45 + 8) = v44;
                        *(_OWORD *)(v45 + 16) = 0u;
                        *(_OWORD *)(v45 + 32) = 0u;
                        *(_OWORD *)(v45 + 48) = 0u;
                        *(void *)(v45 + 64) = 0;
                        *(unsigned char *)(v45 + 72) = 31;
                        swift_bridgeObjectRetain();
                        swift_willThrow();

                        swift_bridgeObjectRetain();
                        static os_log_type_t.error.getter();
                        sub_100004700((uint64_t *)&unk_10017D6E0);
                        uint64_t v46 = swift_allocObject();
                        *(_OWORD *)(v46 + 16) = xmmword_100132F10;
                        *(void *)(v46 + 56) = &type metadata for String;
                        *(void *)(v46 + 64) = sub_10002A1DC();
                        *(void *)(v46 + 32) = v43;
                        *(void *)(v46 + 40) = v44;
                        sub_10002A230();
                        long long v47 = (void *)static OS_os_log.default.getter();
                        os_log(_:dso:log:_:_:)();
                        swift_bridgeObjectRelease();

                        uint64_t v29 = v63;
                        unint64_t v30 = v62;
                      }
                      sub_10002404C(v29, v30);
                      swift_bridgeObjectRelease();
                      return;
                    }
                  }
                }
                DEREncoderDestroy((void **)v15);
                static os_log_type_t.error.getter();
                sub_100004700((uint64_t *)&unk_10017D6E0);
                uint64_t v57 = swift_allocObject();
                *(_OWORD *)(v57 + 16) = xmmword_100132F10;
                *(void *)(v57 + 56) = &type metadata for UInt32;
                *(void *)(v57 + 64) = &protocol witness table for UInt32;
                *(_DWORD *)(v57 + 32) = 3;
                sub_10002A230();
                long long v17 = (void *)static OS_os_log.default.getter();
              }
            }
            else
            {
              static os_log_type_t.error.getter();
              sub_100004700((uint64_t *)&unk_10017D6E0);
              uint64_t v53 = swift_allocObject();
              *(_OWORD *)(v53 + 16) = xmmword_100132F10;
              *(void *)(v53 + 56) = &type metadata for UInt32;
              *(void *)(v53 + 64) = &protocol witness table for UInt32;
              *(_DWORD *)(v53 + 32) = a8;
              sub_10002A230();
              long long v17 = (void *)static OS_os_log.default.getter();
            }
          }
          else
          {
            static os_log_type_t.error.getter();
            sub_100004700((uint64_t *)&unk_10017D6E0);
            uint64_t v52 = swift_allocObject();
            *(_OWORD *)(v52 + 16) = xmmword_100132F10;
            *(void *)(v52 + 56) = &type metadata for UInt32;
            *(void *)(v52 + 64) = &protocol witness table for UInt32;
            *(_DWORD *)(v52 + 32) = 2;
            sub_10002A230();
            long long v17 = (void *)static OS_os_log.default.getter();
          }
          os_log(_:dso:log:_:_:)();

          swift_bridgeObjectRelease();
        }
LABEL_34:
        sub_100012E3C();
        swift_allocError();
        unint64_t v33 = 0xD000000000000049;
        unint64_t v37 = 0x800000010014FAA0;
        *(void *)uint64_t v54 = 0xD000000000000049;
        *(void *)(v54 + 8) = 0x800000010014FAA0;
        *(_OWORD *)(v54 + 16) = 0u;
        *(_OWORD *)(v54 + 32) = 0u;
        *(_OWORD *)(v54 + 48) = 0u;
        *(void *)(v54 + 64) = 0;
        *(unsigned char *)(v54 + 72) = 50;
        goto LABEL_35;
      }
      __break(1u);
    }
    sub_100012E3C();
    swift_allocError();
    long long v32 = "Could not encode compression info: Payload is compressed but cannot find algorithm info";
    unint64_t v33 = 0xD000000000000057;
  }
  unint64_t v37 = (unint64_t)(v32 - 32) | 0x8000000000000000;
  *(void *)uint64_t v31 = v33;
  *(void *)(v31 + 8) = v37;
  *(_OWORD *)(v31 + 16) = 0u;
  *(_OWORD *)(v31 + 32) = 0u;
  *(_OWORD *)(v31 + 48) = 0u;
  *(void *)(v31 + 64) = 0;
  *(unsigned char *)(v31 + 72) = 10;
LABEL_35:
  swift_willThrow();
  static os_log_type_t.error.getter();
  sub_100004700((uint64_t *)&unk_10017D6E0);
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_100132F10;
  *(void *)(v55 + 56) = &type metadata for String;
  *(void *)(v55 + 64) = sub_10002A1DC();
  *(void *)(v55 + 32) = v33;
  *(void *)(v55 + 40) = v37;
  sub_10002A230();
  long long v56 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
}

uint64_t sub_10010AEF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_1001060F8(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_10010AF1C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  return sub_100107644(a1, a2, a3, a4, a5, a6 & 1, *(void *)v6, *(void *)(v6 + 8));
}

unint64_t sub_10010AF3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100103D64(a1, a2, a3, a4, a5, *(void *)v5, *(void *)(v5 + 8));
}

uint64_t sub_10010AF58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *v5;
  unint64_t v11 = v5[1];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a4;
  *(void *)(v13 + 24) = a5;
  swift_retain();
  sub_100103D64(a1, a2, a3, (uint64_t)sub_1001116E4, v13, v12, v11);
  return swift_release();
}

uint64_t sub_10010B018(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100106B20(a1, a2, a3, a4, a5 & 1, a6, a7, a8, *(void *)v8, *(void *)(v8 + 8));
}

uint64_t sub_10010B044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_100124478(a1, a2, a3, a4, a5);
  if (v5) {
    return v7;
  }
  return result;
}

uint64_t sub_10010B068@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1001038A0(a1, *(void *)v2, *(void *)(v2 + 8), a2);
}

void sub_10010B070(compression_algorithm a1@<W0>, uint64_t a2@<X8>)
{
  sub_100108788(a1, *(void *)v2, *(void *)(v2 + 8), a2);
}

uint64_t sub_10010B078@<X0>(uint64_t *a1@<X8>)
{
  return sub_100106850(*(void *)v1, *(void *)(v1 + 8), a1);
}

void sub_10010B080(uint64_t a1@<X8>)
{
  sub_100108EF4(*(void *)v1, *(void *)(v1 + 8), a1);
}

uint64_t sub_10010B088@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100109528(a1, a2, a3, a4, *(void *)v5, *(void *)(v5 + 8), a5);
}

BOOL sub_10010B090()
{
  return sub_100109D64(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_10010B0B0()
{
  return sub_10010A138(*(void *)v0, *(void *)(v0 + 8)) & 1;
}

uint64_t sub_10010B0D0()
{
  return sub_10010491C(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_10010B0EC(uint64_t a1, uint64_t a2)
{
  return sub_10010DD88(a1, a2);
}

uint64_t sub_10010B104(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  return sub_1001252C8(a1, a2, a3, a4, a5, a6);
}

void sub_10010B138(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, char a4@<W5>, unint64_t a5@<X6>, char a6@<W7>, uint64_t *a7@<X8>, unint64_t a8)
{
}

uint64_t sub_10010B178()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t result = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      BOOL v4 = __OFSUB__(HIDWORD(v1), v1);
      int v5 = HIDWORD(v1) - v1;
      if (v4)
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x10010B1D8);
      }
      return v5;
    case 2uLL:
      uint64_t v8 = v1 + 16;
      uint64_t v6 = *(void *)(v1 + 16);
      uint64_t v7 = *(void *)(v8 + 8);
      uint64_t result = v7 - v6;
      if (!__OFSUB__(v7, v6)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(v2);
  }
}

uint64_t sub_10010B1E8()
{
  return compression_algorithm.description.getter(*v0);
}

unint64_t sub_10010B1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();

  return sub_10010B2B0(a1, a2, a3, a4, v8);
}

unint64_t sub_10010B2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      long long v15 = (void *)(v14 + 32 * v8);
      uint64_t v16 = v15[2];
      uint64_t v17 = v15[3];
      BOOL v18 = *v15 == a1 && v15[1] == a2;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v19 = v16 == a3 && v17 == a4;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v8 = (v8 + 1) & v13;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

double sub_10010B3B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  BOOL v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000048E0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v15 = *v4;
    *BOOL v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10010C5B4();
      uint64_t v11 = v15;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = (_OWORD *)(*(void *)(v11 + 56) + 48 * v8);
    long long v13 = v12[1];
    *a3 = *v12;
    a3[1] = v13;
    a3[2] = v12[2];
    sub_10010BE98(v8, v11);
    *BOOL v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

uint64_t sub_10010B4C4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017FE50);
  char v41 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v39) {
      break;
    }
    Swift::String v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v40 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v39) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v40 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_34:
          swift_release();
          if ((v41 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v40 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v39) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v40 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_22:
    unint64_t v25 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    long long v28 = (long long *)(*(void *)(v5 + 56) + 48 * v20);
    if (v41)
    {
      long long v29 = *v28;
      long long v30 = v28[2];
      long long v43 = v28[1];
      long long v44 = v30;
      long long v42 = v29;
    }
    else
    {
      sub_10001BA68((uint64_t)v28, (uint64_t)&v42, &qword_10017FE40);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *uint64_t v15 = v27;
    v15[1] = v26;
    uint64_t v16 = (_OWORD *)(*(void *)(v7 + 56) + 48 * v14);
    long long v17 = v42;
    long long v18 = v44;
    v16[1] = v43;
    void v16[2] = v18;
    _OWORD *v16 = v17;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v22 = (void *)(v5 + 64);
  if ((v41 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v22, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *Swift::String v22 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10010B808(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017FE30);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    Swift::String v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    long long v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    long long v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *Swift::String v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10010BB20(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100004700(&qword_10017FE20);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v38 = v2;
  int64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39) {
      break;
    }
    unint64_t v23 = v40;
    unint64_t v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v39) {
        goto LABEL_33;
      }
      unint64_t v24 = v40[v13];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v38;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            unint64_t v24 = v40[v13];
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 32 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v34 = v30[2];
    uint64_t v33 = v30[3];
    uint64_t v35 = *(void *)(v5 + 56) + 24 * v21;
    long long v43 = *(_OWORD *)v35;
    char v36 = *(unsigned char *)(v35 + 16);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    long long v18 = (void *)(*(void *)(v7 + 48) + 32 * v17);
    void *v18 = v32;
    v18[1] = v31;
    void v18[2] = v34;
    v18[3] = v33;
    uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
    *(_OWORD *)uint64_t v19 = v43;
    *(unsigned char *)(v19 + 16) = v36;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  unint64_t v23 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_10010BE98(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          unint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = (long long *)(v16 + 48 * v3);
          long long v18 = (long long *)(v16 + 48 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 3))
          {
            long long v9 = *v18;
            long long v10 = v18[2];
            v17[1] = v18[1];
            void v17[2] = v10;
            *unint64_t v17 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  uint64_t *v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10010C084(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 32 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 32 * v6);
          if (v3 != v6 || v13 >= v14 + 2)
          {
            long long v15 = v14[1];
            _OWORD *v13 = *v14;
            v13[1] = v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 24 * v3;
          long long v18 = (long long *)(v16 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v17 >= (unint64_t)v18 + 24 || (v19 = v3 == v6, int64_t v3 = v6, !v19))
          {
            long long v9 = *v18;
            *(void *)(v17 + 16) = *((void *)v18 + 2);
            *(_OWORD *)unint64_t v17 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10010C2B8(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000048E0(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10010C5B4();
LABEL_7:
    long long v18 = (void *)*v5;
    if (v16) {
      return sub_10003EBF4((uint64_t)a1, v18[7] + 48 * v12, &qword_10017FE40);
    }
    goto LABEL_11;
  }
  sub_10010B4C4(v15, a4 & 1);
  unint64_t v20 = sub_1000048E0(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v20;
  long long v18 = (void *)*v5;
  if (v16) {
    return sub_10003EBF4((uint64_t)a1, v18[7] + 48 * v12, &qword_10017FE40);
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v22 = a2;
  v22[1] = a3;
  uint64_t v23 = (_OWORD *)(v18[7] + 48 * v12);
  long long v24 = *a1;
  long long v25 = a1[2];
  v23[1] = a1[1];
  void v23[2] = v25;
  *uint64_t v23 = v24;
  uint64_t v26 = v18[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v28;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10010C444(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000048E0(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10010C7B0();
LABEL_7:
    long long v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10010B808(v15, a4 & 1);
  unint64_t v21 = sub_1000048E0(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  long long v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v26;

  return swift_bridgeObjectRetain();
}

void *sub_10010C5B4()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017FE50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v28 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = 48 * v15;
    sub_10001BA68(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v29, &qword_10017FE40);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v18;
    v21[1] = v19;
    char v22 = (_OWORD *)(*(void *)(v4 + 56) + v20);
    long long v24 = v29[1];
    long long v23 = v29[2];
    *char v22 = v29[0];
    v22[1] = v24;
    _OWORD v22[2] = v23;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v28;
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10010C7B0()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017FE30);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10010C968()
{
  uint64_t v1 = v0;
  sub_100004700(&qword_10017FE20);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 32 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = v17[3];
    uint64_t v22 = 24 * v15;
    uint64_t v23 = *(void *)(v2 + 56) + v22;
    char v24 = *(unsigned char *)(v23 + 16);
    int64_t v25 = (void *)(*(void *)(v4 + 48) + v16);
    long long v26 = *(_OWORD *)v23;
    void *v25 = v19;
    v25[1] = v18;
    void v25[2] = v20;
    v25[3] = v21;
    uint64_t v27 = *(void *)(v4 + 56) + v22;
    *(_OWORD *)uint64_t v27 = v26;
    *(unsigned char *)(v27 + 16) = v24;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10010CB3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = (const uint8_t *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v11 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_100107DF4(v11, a3, a4, a5);
    return sub_100012A10(a3, a4);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10010CBE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v13 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v13 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_100103ADC(v13, a3, a4, a5, a6);
    return sub_100012A10(a3, a4);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10010CC9C@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(void, void)@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8 = v6;
  uint64_t v15 = __DataStorage._bytes.getter();
  if (!v15)
  {
    unint64_t v7 = 0;
    BOOL v19 = __OFSUB__(a2, a1);
    uint64_t v20 = a2 - a1;
    if (!v19) {
      goto LABEL_4;
    }
    goto LABEL_23;
  }
  uint64_t v17 = v15;
  uint64_t v18 = __DataStorage._offset.getter();
  unint64_t v16 = a1 - v18;
  if (!__OFSUB__(a1, v18))
  {
    unint64_t v7 = (char *)(v17 + v16);
    BOOL v19 = __OFSUB__(a2, a1);
    uint64_t v20 = a2 - a1;
    if (!v19)
    {
LABEL_4:
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        uint64_t v22 = v20;
      }
      else {
        uint64_t v22 = v21;
      }
      uint64_t v23 = &v7[v22];
      if (!v7) {
        uint64_t v23 = 0;
      }
      uint64_t v17 = v23 - v7;
      BOOL v24 = v23 - v7 < 32 || v7 == 0;
      if (v24)
      {
        char v57 = 1;
        sub_100012E3C();
        swift_allocError();
        *(void *)uint64_t v25 = 0xD000000000000033;
        *(void *)(v25 + 8) = 0x800000010014FDD0;
        *(_OWORD *)(v25 + 16) = 0u;
        *(_OWORD *)(v25 + 32) = 0u;
        *(_OWORD *)(v25 + 48) = 0u;
        *(void *)(v25 + 64) = 0;
        *(unsigned char *)(v25 + 72) = 24;
        swift_willThrow();
        swift_errorRetain();
        sub_100004700(&qword_10017EB50);
        if ((swift_dynamicCast() & 1) == 0) {
          return swift_errorRelease();
        }
        uint64_t v60 = a4;
        swift_errorRelease();
        a6 = v67;
        a4 = (uint64_t (*)(void, void))v68;
        a3 = (void *)v69;
        uint64_t v8 = v70;
        LOBYTE(a1) = v71;
        uint64_t v55 = v63;
        uint64_t v56 = v62;
        uint64_t v53 = v65;
        uint64_t v54 = v64;
        unint64_t v52 = v66;
        sub_10005C020(v62, v63, v64, v65, v66, v67, v68, v69, v70, v71);
        long long v26 = sub_1000A0BB4(0, 1, 1, _swiftEmptyArrayStorage);
        a5 = v26[2];
        unint64_t v16 = v26[3];
        uint64_t v58 = v26;
        a2 = a5 + 1;
        if (a5 < v16 >> 1) {
          goto LABEL_15;
        }
        goto LABEL_50;
      }
      int v29 = 0;
      LODWORD(v16) = *(_DWORD *)v7;
      a3 = _swiftEmptyArrayStorage;
      if (*(_DWORD *)v7 == -805638658 || v16 == -17958193)
      {
        int64_t v28 = v7;
        goto LABEL_25;
      }
LABEL_24:
      int64_t v28 = 0;
      LOBYTE(v24) = 1;
      int v29 = 255;
      goto LABEL_25;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  __break(1u);
LABEL_50:
  uint64_t v58 = sub_1000A0BB4((void *)(v16 > 1), a2, 1, v58);
LABEL_15:
  v58[2] = a2;
  uint64_t v27 = &v58[10 * a5];
  void v27[4] = v56;
  v27[5] = v55;
  v27[6] = v54;
  v27[7] = v53;
  v27[8] = v52;
  v27[9] = a6;
  v27[10] = a4;
  v27[11] = a3;
  v27[12] = v8;
  *((unsigned char *)v27 + 104) = a1;
  sub_10003E9C8(v56, v55, v54, v53, v52, a6, (uint64_t)a4, (uint64_t)a3, v8, a1);
  swift_errorRelease();
  if (!v7 || v17 < 28)
  {
    swift_allocError();
    int64_t v28 = 0;
    *(void *)uint64_t v31 = 0xD000000000000033;
    unint64_t v33 = 0x800000010014FE10;
    int v32 = 255;
    a4 = v60;
    a3 = v58;
LABEL_31:
    *(void *)(v31 + 8) = v33;
    *(_OWORD *)(v31 + 16) = 0u;
    *(_OWORD *)(v31 + 32) = 0u;
    *(_OWORD *)(v31 + 48) = 0u;
    *(void *)(v31 + 64) = 0;
    *(unsigned char *)(v31 + 72) = 24;
    swift_willThrow();
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      sub_10005C020(v62, v63, v64, v65, v66, v67, v68, v69, v70, v71);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a3 = sub_1000A0BB4(0, a3[2] + 1, 1, a3);
      }
      unint64_t v35 = a3[2];
      unint64_t v34 = a3[3];
      char v36 = a3;
      if (v35 >= v34 >> 1) {
        char v36 = sub_1000A0BB4((void *)(v34 > 1), v35 + 1, 1, a3);
      }
      v36[2] = v35 + 1;
      a3 = v36;
      uint64_t v37 = &v36[10 * v35];
      v37[4] = v62;
      v37[5] = v63;
      v37[6] = v64;
      v37[7] = v65;
      v37[8] = v66;
      v37[9] = v67;
      v37[10] = v68;
      v37[11] = v69;
      v37[12] = v70;
      *((unsigned char *)v37 + 104) = v71;
      sub_10003E9C8(v62, v63, v64, v65, v66, v67, v68, v69, v70, v71);
      swift_errorRelease();
      int v29 = v32;
      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  int64_t v28 = 0;
  LODWORD(v16) = *(_DWORD *)v7;
  int v29 = 255;
  a4 = v60;
  a3 = v58;
  LOBYTE(v24) = v57;
LABEL_25:
  if (v16 == -17958194 || v16 == -822415874)
  {
    if (v24)
    {
      uint64_t v30 = 1;
LABEL_41:
      swift_bridgeObjectRelease();
      return a4(v7, v30);
    }
    sub_100012E3C();
    swift_allocError();
    int v32 = 0;
    *(void *)uint64_t v31 = 0xD00000000000002BLL;
    unint64_t v33 = 0x800000010014FEA0;
    goto LABEL_31;
  }
LABEL_37:
  if (v29 != 255)
  {
    uint64_t v30 = 0;
    unint64_t v7 = v28;
    goto LABEL_41;
  }
  unint64_t v38 = a3[2];
  if (v38 < 2)
  {
    if (v38 == 1)
    {
      char v41 = a3;
      uint64_t v42 = a3[4];
      uint64_t v43 = a3[5];
      uint64_t v44 = v41[6];
      uint64_t v45 = v41[7];
      unint64_t v46 = v41[8];
      uint64_t v47 = v41[9];
      uint64_t v48 = v41[10];
      uint64_t v49 = v41[11];
      uint64_t v59 = v41[12];
      char v61 = *((unsigned char *)v41 + 104);
      sub_10005C020(v42, v43, v44, v45, v46, v47, v48, v49, v59, v61);
      swift_bridgeObjectRelease();
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v50 = v42;
      *(void *)(v50 + 8) = v43;
      *(void *)(v50 + 16) = v44;
      *(void *)(v50 + 24) = v45;
      *(void *)(v50 + 32) = v46;
      *(void *)(v50 + 40) = v47;
      *(void *)(v50 + 48) = v48;
      *(void *)(v50 + 56) = v49;
      *(void *)(v50 + 64) = v59;
      char v51 = v61;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v50 = 0xD000000000000040;
      *(void *)(v50 + 8) = 0x800000010014FE50;
      *(_OWORD *)(v50 + 16) = 0u;
      *(_OWORD *)(v50 + 32) = 0u;
      *(_OWORD *)(v50 + 48) = 0u;
      *(void *)(v50 + 64) = 0;
      char v51 = 50;
    }
    *(unsigned char *)(v50 + 72) = v51;
  }
  else
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v39 = a3;
    *(_OWORD *)(v39 + 8) = 0u;
    *(_OWORD *)(v39 + 24) = 0u;
    *(_OWORD *)(v39 + 40) = 0u;
    *(_OWORD *)(v39 + 56) = 0u;
    *(unsigned char *)(v39 + 72) = 0;
  }
  return swift_willThrow();
}

uint64_t sub_10010D338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X3>, unint64_t a4@<X4>, void *a5@<X5>, compression_algorithm a6@<W6>, uint64_t a7@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  unint64_t v14 = (const uint8_t *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v14 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_100108ABC(v14, a3, a4, a5, a6, a7);
    return sub_100012A10(a3, a4);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10010D3F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v11 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_100109170(v11, a3, a4, a5);
    return sub_100012A10(a3, a4);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10010D4A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, unint64_t a9)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v17 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v17 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1001098C8(v17, a3, a4, a5, a6, a7, a9, a8);
    sub_10003C944(a3, a4);
    sub_100012A10(a5, a6);
    return sub_10002404C(a7, a9);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

void *sub_10010D58C(void *result)
{
  uint64_t v2 = result[2];
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = sub_10010D778(result, v10, 1, v3);
  uint64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_100004700(&qword_10017D498);
  uint64_t result = (void *)swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = v3[2];
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    v3[2] = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10010D688(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_10010D89C((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void *sub_10010D778(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017FDC0);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100004700(&qword_10017D498);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10010D89C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017FE28);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_10010D9B8(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10010D9F8(a1, a2, a3, *v3);
  void *v3 = result;
  return result;
}

char *sub_10010D9D8(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10010DB1C(a1, a2, a3, *v3);
  void *v3 = result;
  return result;
}

void *sub_10010D9F8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017FDC0);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100004700(&qword_10017D498);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_10010DB1C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100004700(&qword_10017FE28);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t *sub_10010DC38(uint64_t *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 32 * a2);
    unint64_t v6 = (uint64_t *)(*(void *)(a5 + 56) + 16 * a2);
    uint64_t v7 = *v6;
    unint64_t v8 = v6[1];
    *uint64_t result = *v6;
    result[1] = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10002F064(v7, v8);
    return (uint64_t *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10010DCF0(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    sub_10001BA68(*(void *)(a5 + 56) + 48 * a2, result, &qword_10017D1E8);
    swift_bridgeObjectRetain();
    return v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10010DD88(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 20 * result;
  if ((unsigned __int128)(result * (__int128)20) >> 64 == (20 * result) >> 63)
  {
    if (__OFADD__(v2, 8))
    {
      _StringGuts.grow(_:)(77);
      v6._uint64_t countAndFlagsBits = 0x6372615F7461666ELL;
      v6._object = (void *)0xEC000000203D2068;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._object = (void *)0x800000010014F500;
      v8._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
      String.append(_:)(v8);
    }
    else
    {
      if (v2 + 8 <= a2) {
        return result;
      }
      _StringGuts.grow(_:)(81);
      v9._uint64_t countAndFlagsBits = 0x73207972616E6942;
      v9._object = (void *)0xED0000203A657A69;
      String.append(_:)(v9);
      v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = 0xD000000000000040;
      v11._object = (void *)0x800000010014F4B0;
      String.append(_:)(v11);
    }
  }
  else
  {
    _StringGuts.grow(_:)(82);
    v3._uint64_t countAndFlagsBits = 0x6372615F7461666ELL;
    v3._object = (void *)0xEC000000203D2068;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = 0xD000000000000042;
    v5._object = (void *)0x800000010014F540;
    String.append(_:)(v5);
  }
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v13 = 0;
  *(void *)(v13 + 8) = 0xE000000000000000;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(void *)(v13 + 64) = 0;
  *(unsigned char *)(v13 + 72) = 24;
  return swift_willThrow();
}

uint64_t sub_10010E050(uint64_t a1, int64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, void, void), unint64_t a5)
{
  void (*v62)(void *__return_ptr, void, void);
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;

  uint64_t v8 = v5;
  uint64_t v15 = (char *)__DataStorage._bytes.getter();
  if (v15)
  {
    uint64_t v16 = __DataStorage._offset.getter();
    unint64_t v14 = a1 - v16;
    if (__OFSUB__(a1, v16))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      uint64_t v60 = sub_1000A0BB4((void *)(v14 > 1), a2, 1, v60);
      goto LABEL_16;
    }
    v15 += v14;
  }
  BOOL v17 = __OFSUB__(a2, a1);
  a2 -= a1;
  if (v17)
  {
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v18 = __DataStorage._length.getter();
  if (v18 >= a2) {
    int64_t v19 = a2;
  }
  else {
    int64_t v19 = v18;
  }
  uint64_t v20 = &v15[v19];
  if (!v15) {
    uint64_t v20 = 0;
  }
  uint64_t v6 = v20 - v15;
  BOOL v21 = v20 - v15 < 32 || v15 == 0;
  if (!v21)
  {
    int v28 = 0;
    int v27 = *(_DWORD *)v15;
    int v29 = _swiftEmptyArrayStorage;
    if (*(_DWORD *)v15 == -805638658 || v27 == -17958193)
    {
      long long v26 = v15;
    }
    else
    {
      long long v26 = 0;
      BOOL v21 = 1;
      int v28 = 255;
    }
    goto LABEL_23;
  }
  sub_100012E3C();
  uint64_t v22 = swift_allocError();
  *(void *)uint64_t v23 = 0xD000000000000033;
  *(void *)(v23 + 8) = 0x800000010014FDD0;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(void *)(v23 + 64) = 0;
  *(unsigned char *)(v23 + 72) = 24;
  swift_willThrow();
  unint64_t v75 = v22;
  swift_errorRetain();
  sub_100004700(&qword_10017EB50);
  if (!swift_dynamicCast()) {
    goto LABEL_42;
  }
  BOOL v54 = v21;
  uint64_t v62 = a4;
  swift_errorRelease();
  uint64_t v7 = v69;
  a4 = (void (*)(void *__return_ptr, void, void))v70;
  a3 = v71;
  uint64_t v8 = v72;
  LOBYTE(a1) = v73;
  uint64_t v58 = v65;
  uint64_t v59 = v64;
  uint64_t v56 = v67;
  uint64_t v57 = v66;
  unint64_t v55 = v68;
  sub_10005C020(v64, v65, v66, v67, v68, v69, v70, v71, v72, v73);
  BOOL v24 = sub_1000A0BB4(0, 1, 1, _swiftEmptyArrayStorage);
  a5 = v24[2];
  unint64_t v14 = v24[3];
  uint64_t v60 = v24;
  a2 = a5 + 1;
  if (a5 >= v14 >> 1) {
    goto LABEL_51;
  }
LABEL_16:
  v60[2] = a2;
  uint64_t v25 = &v60[10 * a5];
  v25[4] = v59;
  v25[5] = v58;
  v25[6] = v57;
  v25[7] = v56;
  v25[8] = v55;
  v25[9] = v7;
  v25[10] = a4;
  v25[11] = a3;
  v25[12] = v8;
  *((unsigned char *)v25 + 104) = a1;
  sub_10003E9C8(v59, v58, v57, v56, v55, v7, (uint64_t)a4, a3, v8, a1);
  swift_errorRelease();
  if (!v15 || v6 < 28)
  {
    uint64_t v34 = swift_allocError();
    uint64_t v15 = 0;
    *(void *)uint64_t v33 = 0xD000000000000033;
    unint64_t v36 = 0x800000010014FE10;
    int v35 = 255;
    a4 = v62;
    int v29 = v60;
LABEL_32:
    *(void *)(v33 + 8) = v36;
    *(_OWORD *)(v33 + 16) = 0u;
    *(_OWORD *)(v33 + 32) = 0u;
    *(_OWORD *)(v33 + 48) = 0u;
    *(void *)(v33 + 64) = 0;
    *(unsigned char *)(v33 + 72) = 24;
    swift_willThrow();
    unint64_t v75 = v34;
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      sub_10005C020(v64, v65, v66, v67, v68, v69, v70, v71, v72, v73);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v29 = sub_1000A0BB4(0, v29[2] + 1, 1, v29);
      }
      unint64_t v38 = v29[2];
      unint64_t v37 = v29[3];
      uint64_t v39 = v29;
      if (v38 >= v37 >> 1) {
        uint64_t v39 = sub_1000A0BB4((void *)(v37 > 1), v38 + 1, 1, v29);
      }
      v39[2] = v38 + 1;
      int v29 = v39;
      uint64_t v40 = &v39[10 * v38];
      v40[4] = v64;
      v40[5] = v65;
      v40[6] = v66;
      v40[7] = v67;
      v40[8] = v68;
      v40[9] = v69;
      v40[10] = v70;
      v40[11] = v71;
      v40[12] = v72;
      *((unsigned char *)v40 + 104) = v73;
      sub_10003E9C8(v64, v65, v66, v67, v68, v69, v70, v71, v72, v73);
      swift_errorRelease();
      uint64_t v8 = 0;
      if (v35 != 255) {
        goto LABEL_38;
      }
      goto LABEL_28;
    }
    swift_bridgeObjectRelease();
LABEL_42:
    swift_errorRelease();
    return v41;
  }
  long long v26 = 0;
  uint64_t v8 = 0;
  int v27 = *(_DWORD *)v15;
  int v28 = 255;
  a4 = v62;
  int v29 = v60;
  BOOL v21 = v54;
LABEL_23:
  if (v27 == -822415874 || v27 == -17958194)
  {
    if (v21)
    {
      uint64_t v30 = 1;
      goto LABEL_39;
    }
    sub_100012E3C();
    uint64_t v34 = swift_allocError();
    int v35 = 0;
    *(void *)uint64_t v33 = 0xD00000000000002BLL;
    unint64_t v36 = 0x800000010014FEA0;
    uint64_t v15 = v26;
    goto LABEL_32;
  }
  uint64_t v15 = v26;
  if (v28 != 255)
  {
LABEL_38:
    uint64_t v30 = 0;
LABEL_39:
    swift_bridgeObjectRelease();
    a4(&v74, v15, v30);
    if (!v8) {
      return v74;
    }
    return v41;
  }
LABEL_28:
  unint64_t v31 = v29[2];
  if (v31 <= 1)
  {
    if (v31 == 1)
    {
      uint64_t v42 = v29;
      uint64_t v43 = v29[4];
      uint64_t v44 = v29[5];
      uint64_t v45 = v42[6];
      uint64_t v46 = v42[7];
      unint64_t v47 = v42[8];
      uint64_t v48 = v42[9];
      uint64_t v49 = v42[10];
      uint64_t v50 = v42[11];
      uint64_t v61 = v42[12];
      uint64_t v63 = *((unsigned char *)v42 + 104);
      sub_10005C020(v43, v44, v45, v46, v47, v48, v49, v50, v61, v63);
      swift_bridgeObjectRelease();
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v51 = v43;
      *(void *)(v51 + 8) = v44;
      *(void *)(v51 + 16) = v45;
      *(void *)(v51 + 24) = v46;
      *(void *)(v51 + 32) = v47;
      *(void *)(v51 + 40) = v48;
      *(void *)(v51 + 48) = v49;
      *(void *)(v51 + 56) = v50;
      *(void *)(v51 + 64) = v61;
      char v52 = v63;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v51 = 0xD000000000000040;
      *(void *)(v51 + 8) = 0x800000010014FE50;
      *(_OWORD *)(v51 + 16) = 0u;
      *(_OWORD *)(v51 + 32) = 0u;
      *(_OWORD *)(v51 + 48) = 0u;
      *(void *)(v51 + 64) = 0;
      char v52 = 50;
    }
    *(unsigned char *)(v51 + 72) = v52;
  }
  else
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v32 = v29;
    *(_OWORD *)(v32 + 8) = 0u;
    *(_OWORD *)(v32 + 24) = 0u;
    *(_OWORD *)(v32 + 40) = 0u;
    *(_OWORD *)(v32 + 56) = 0u;
    *(unsigned char *)(v32 + 72) = 0;
  }
  swift_willThrow();
  return v41;
}

uint64_t sub_10010E6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v18 = (uint32_t *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    uint64_t v18 = (uint32_t *)((char *)v18 + a1 - result);
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  uint64_t result = sub_10010586C(v18, a6, a7, a8, a9, a10, a11, &v19);
  if (!v11) {
    return v19;
  }
  return result;
}

uint64_t sub_10010E7B8(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    type metadata accessor for Data.RangeReference();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    Swift::String v4 = (unsigned char *)__DataStorage._bytes.getter();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = __DataStorage._length.getter();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      uint64_t v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v3 = sub_1000F7DAC(v4, v8);
      swift_release();
      return v3;
    }
    uint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10010E8A0(uint64_t a1)
{
  sub_100004700(&qword_10017FE18);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v27 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v28 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = result + 64;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  uint64_t v11 = (v8 - 1) & v8;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 32 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = v16[3];
    int64_t v30 = v4;
    unint64_t v29 = v11;
    if (*(unsigned char *)(*(void *)(a1 + 56) + 24 * i + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = 0;
      unint64_t v21 = 0xF000000000000000;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = Data._Representation.subscript.getter();
    }
    *(void *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v22 = (void *)(v3[6] + 32 * i);
    *uint64_t v22 = v17;
    v22[1] = v18;
    _OWORD v22[2] = v19;
    v22[3] = v20;
    uint64_t v23 = (uint64_t *)(v3[7] + 16 * i);
    *uint64_t v23 = result;
    v23[1] = v21;
    uint64_t v24 = v3[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v3[2] = v26;
    int64_t v4 = v30;
    unint64_t v8 = v29;
    if (v29) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_27;
    }
    if (v13 >= v28) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v28) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v28) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v11 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v28) {
    return (uint64_t)v3;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v28) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10010EB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  int64_t v4 = _swiftEmptyArrayStorage;
  if (!v3) {
    return v4;
  }
  unint64_t v47 = _swiftEmptyArrayStorage;
  sub_10010D9D8(0, v3, 0);
  int64_t v4 = _swiftEmptyArrayStorage;
  uint64_t v7 = (uint64_t *)(a1 + 32);
  uint64_t v40 = a3;
  while (1)
  {
    uint64_t v8 = *v7;
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t *)sub_1000A20CC();
    if (!*(void *)(v8 + 16))
    {
      long long v45 = 0u;
      long long v46 = 0u;
LABEL_12:
      sub_1000130EC((uint64_t)&v45, &qword_10017C018);
      goto LABEL_13;
    }
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_1000048E0(v10, v11);
    if ((v13 & 1) == 0)
    {
      long long v45 = 0u;
      long long v46 = 0u;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_1000047DC(*(void *)(v8 + 56) + 32 * v12, (uint64_t)&v45);
    swift_bridgeObjectRelease();
    if (!*((void *)&v46 + 1)) {
      goto LABEL_12;
    }
    if (swift_dynamicCast())
    {
      uint64_t v15 = v43;
      uint64_t v14 = v44;
      uint64_t v16 = (uint64_t *)sub_1000A20E4();
      if (*(void *)(v8 + 16))
      {
        uint64_t v17 = *v16;
        uint64_t v18 = v16[1];
        swift_bridgeObjectRetain();
        unint64_t v19 = sub_1000048E0(v17, v18);
        if (v20)
        {
          sub_1000047DC(*(void *)(v8 + 56) + 32 * v19, (uint64_t)&v45);
        }
        else
        {
          long long v45 = 0u;
          long long v46 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v46 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v31 = swift_allocObject();
            *(void *)(v31 + 16) = a2;
            *(void *)(v31 + 24) = v40;
            uint64_t v32 = swift_allocObject();
            *(void *)(v32 + 16) = a2;
            *(void *)(v32 + 24) = v40;
            *(void *)(v31 + 32) = v43;
            *(void *)(v31 + 40) = v44;
            unint64_t v27 = v31 | 0x8000000000000000;
            *(void *)(v31 + 48) = v32;
            swift_bridgeObjectRetain();
            goto LABEL_20;
          }
          goto LABEL_31;
        }
      }
      else
      {
        long long v45 = 0u;
        long long v46 = 0u;
      }
      sub_1000130EC((uint64_t)&v45, &qword_10017C018);
LABEL_31:
      unint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = a2;
      *(void *)(v27 + 24) = a3;
      goto LABEL_20;
    }
LABEL_13:
    unint64_t v21 = (uint64_t *)sub_1000A20D8();
    if (!*(void *)(v8 + 16)) {
      break;
    }
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    swift_bridgeObjectRetain();
    unint64_t v24 = sub_1000048E0(v22, v23);
    if (v25)
    {
      sub_1000047DC(*(void *)(v8 + 56) + 32 * v24, (uint64_t)&v45);
    }
    else
    {
      long long v45 = 0u;
      long long v46 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v46 + 1)) {
      goto LABEL_33;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_34;
    }
    uint64_t v15 = v43;
    uint64_t v14 = v44;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = a2;
    *(void *)(v26 + 24) = a3;
    unint64_t v27 = v26 | 0x4000000000000000;
LABEL_20:
    swift_bridgeObjectRetain();
    if (v42) {
      goto LABEL_35;
    }
    swift_bridgeObjectRelease();
    unint64_t v47 = v4;
    unint64_t v29 = v4[2];
    unint64_t v28 = v4[3];
    if (v29 >= v28 >> 1)
    {
      sub_10010D9D8((char *)(v28 > 1), v29 + 1, 1);
      int64_t v4 = v47;
    }
    v4[2] = v29 + 1;
    int64_t v30 = &v4[3 * v29];
    v30[4] = v15;
    v30[5] = v14;
    v30[6] = v27;
    ++v7;
    --v3;
    a3 = v40;
    if (!v3) {
      return v4;
    }
  }
  long long v45 = 0u;
  long long v46 = 0u;
LABEL_33:
  sub_1000130EC((uint64_t)&v45, &qword_10017C018);
LABEL_34:
  *(void *)&long long v45 = 0;
  *((void *)&v45 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  *(void *)&long long v45 = 0xD000000000000025;
  *((void *)&v45 + 1) = 0x8000000100150290;
  swift_bridgeObjectRetain();
  uint64_t v33 = Dictionary.description.getter();
  int v35 = v34;
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = v33;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  long long v37 = v45;
  sub_100012E3C();
  swift_allocError();
  *(_OWORD *)uint64_t v38 = v37;
  *(_OWORD *)(v38 + 16) = 0u;
  *(_OWORD *)(v38 + 32) = 0u;
  *(_OWORD *)(v38 + 48) = 0u;
  *(void *)(v38 + 64) = 0;
  *(unsigned char *)(v38 + 72) = 24;
  swift_willThrow();
LABEL_35:
  swift_release();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10010EF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v12 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v12 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  uint64_t result = sub_100107048(v12, a4, a5, a6);
  if (!v13) {
    return v14;
  }
  return result;
}

Swift::Int sub_10010F05C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100004700(&qword_10017DE58);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          unint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      unint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *unint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_10010F200()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010F238()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10010F304(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4[2];
  if (*(_DWORD *)a1 != -2147483595) {
    return 2;
  }
  if (a1 + (unint64_t)*(unsigned int *)(a1 + 4) > a4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = v4[4];
  uint64_t v14 = v4[3];
  uint64_t v8 = v4[5] + 16;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = String.init(cString:)();
  uint64_t v12 = v11;
  uint64_t v16 = v7;
  if (sub_1000948F4(v10, v11, v7))
  {
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 56))(v15, v9, v5);
    v15[5] = v9;
    swift_beginAccess();
    sub_1001001A8((uint64_t)v15, v10, v12);
    swift_endAccess();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = *(void *)(v16 + 16);
  swift_beginAccess();
  return 2 * (v13 != *(void *)(*(void *)v8 + 16));
}

void *sub_10010F48C(uint64_t a1, int64_t a2, uint64_t a3, void *(*a4)(void *__return_ptr, void, void), unint64_t a5)
{
  void *(*v58)(void *__return_ptr, void, void);
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  BOOL v70;
  uint64_t v71;

  uint64_t v8 = v5;
  uint64_t v15 = (char *)__DataStorage._bytes.getter();
  if (v15)
  {
    uint64_t v16 = __DataStorage._offset.getter();
    unint64_t v14 = a1 - v16;
    if (__OFSUB__(a1, v16))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      uint64_t v56 = sub_1000A0BB4((void *)(v14 > 1), a2, 1, v56);
      goto LABEL_16;
    }
    v15 += v14;
  }
  BOOL v17 = __OFSUB__(a2, a1);
  a2 -= a1;
  if (v17)
  {
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v18 = __DataStorage._length.getter();
  if (v18 >= a2) {
    int64_t v19 = a2;
  }
  else {
    int64_t v19 = v18;
  }
  char v20 = &v15[v19];
  if (!v15) {
    char v20 = 0;
  }
  uint64_t v6 = v20 - v15;
  BOOL v21 = v20 - v15 < 32 || v15 == 0;
  if (!v21)
  {
    int v27 = 0;
    int v26 = *(_DWORD *)v15;
    unint64_t v28 = _swiftEmptyArrayStorage;
    if (*(_DWORD *)v15 == -805638658 || v26 == -17958193)
    {
      uint64_t v25 = v15;
    }
    else
    {
      uint64_t v25 = 0;
      BOOL v21 = 1;
      int v27 = 255;
    }
    goto LABEL_23;
  }
  sub_100012E3C();
  swift_allocError();
  *(void *)uint64_t v22 = 0xD000000000000033;
  *(void *)(v22 + 8) = 0x800000010014FDD0;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(void *)(v22 + 64) = 0;
  *(unsigned char *)(v22 + 72) = 24;
  swift_willThrow();
  swift_errorRetain();
  sub_100004700(&qword_10017EB50);
  if (!swift_dynamicCast()) {
    return (void *)swift_errorRelease();
  }
  uint64_t v70 = v21;
  uint64_t v58 = a4;
  swift_errorRelease();
  uint64_t v7 = v65;
  a4 = (void *(*)(void *__return_ptr, void, void))v66;
  a3 = v67;
  uint64_t v8 = v68;
  LOBYTE(a1) = v69;
  uint64_t v54 = v61;
  uint64_t v55 = v60;
  uint64_t v52 = v63;
  uint64_t v53 = v62;
  unint64_t v51 = v64;
  sub_10005C020(v60, v61, v62, v63, v64, v65, v66, v67, v68, v69);
  BOOL v23 = sub_1000A0BB4(0, 1, 1, _swiftEmptyArrayStorage);
  a5 = v23[2];
  unint64_t v14 = v23[3];
  uint64_t v56 = v23;
  a2 = a5 + 1;
  if (a5 >= v14 >> 1) {
    goto LABEL_51;
  }
LABEL_16:
  v56[2] = a2;
  uint64_t v24 = &v56[10 * a5];
  v24[4] = v55;
  v24[5] = v54;
  v24[6] = v53;
  v24[7] = v52;
  v24[8] = v51;
  v24[9] = v7;
  v24[10] = a4;
  v24[11] = a3;
  v24[12] = v8;
  *((unsigned char *)v24 + 104) = a1;
  sub_10003E9C8(v55, v54, v53, v52, v51, v7, (uint64_t)a4, a3, v8, a1);
  swift_errorRelease();
  if (!v15 || v6 < 28)
  {
    swift_allocError();
    uint64_t v15 = 0;
    *(void *)uint64_t v32 = 0xD000000000000033;
    unint64_t v34 = 0x800000010014FE10;
    int v33 = 255;
    a4 = v58;
    unint64_t v28 = v56;
LABEL_32:
    *(void *)(v32 + 8) = v34;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(void *)(v32 + 64) = 0;
    *(unsigned char *)(v32 + 72) = 24;
    swift_willThrow();
    swift_errorRetain();
    sub_100004700(&qword_10017EB50);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      sub_10005C020(v60, v61, v62, v63, v64, v65, v66, v67, v68, v69);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v28 = sub_1000A0BB4(0, v28[2] + 1, 1, v28);
      }
      unint64_t v36 = v28[2];
      unint64_t v35 = v28[3];
      long long v37 = v28;
      if (v36 >= v35 >> 1) {
        long long v37 = sub_1000A0BB4((void *)(v35 > 1), v36 + 1, 1, v28);
      }
      v37[2] = v36 + 1;
      unint64_t v28 = v37;
      uint64_t v38 = &v37[10 * v36];
      v38[4] = v60;
      v38[5] = v61;
      v38[6] = v62;
      v38[7] = v63;
      v38[8] = v64;
      void v38[9] = v65;
      v38[10] = v66;
      v38[11] = v67;
      v38[12] = v68;
      *((unsigned char *)v38 + 104) = v69;
      sub_10003E9C8(v60, v61, v62, v63, v64, v65, v66, v67, v68, v69);
      swift_errorRelease();
      uint64_t v8 = 0;
      if (v33 != 255) {
        goto LABEL_38;
      }
      goto LABEL_28;
    }
    swift_bridgeObjectRelease();
    return (void *)swift_errorRelease();
  }
  uint64_t v25 = 0;
  uint64_t v8 = 0;
  int v26 = *(_DWORD *)v15;
  int v27 = 255;
  a4 = v58;
  unint64_t v28 = v56;
  BOOL v21 = v70;
LABEL_23:
  if (v26 == -822415874 || v26 == -17958194)
  {
    if (v21)
    {
      uint64_t v29 = 1;
      goto LABEL_39;
    }
    sub_100012E3C();
    swift_allocError();
    int v33 = 0;
    *(void *)uint64_t v32 = 0xD00000000000002BLL;
    unint64_t v34 = 0x800000010014FEA0;
    uint64_t v15 = v25;
    goto LABEL_32;
  }
  uint64_t v15 = v25;
  if (v27 != 255)
  {
LABEL_38:
    uint64_t v29 = 0;
LABEL_39:
    swift_bridgeObjectRelease();
    Swift::Int result = a4(&v71, v15, v29);
    if (!v8) {
      return (void *)v71;
    }
    return result;
  }
LABEL_28:
  unint64_t v30 = v28[2];
  if (v30 <= 1)
  {
    if (v30 == 1)
    {
      uint64_t v40 = v28;
      uint64_t v41 = v28[4];
      uint64_t v42 = v28[5];
      uint64_t v43 = v40[6];
      uint64_t v44 = v40[7];
      unint64_t v45 = v40[8];
      uint64_t v46 = v40[9];
      uint64_t v47 = v40[10];
      uint64_t v48 = v40[11];
      uint64_t v57 = v40[12];
      uint64_t v59 = *((unsigned char *)v40 + 104);
      sub_10005C020(v41, v42, v43, v44, v45, v46, v47, v48, v57, v59);
      swift_bridgeObjectRelease();
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v49 = v41;
      *(void *)(v49 + 8) = v42;
      *(void *)(v49 + 16) = v43;
      *(void *)(v49 + 24) = v44;
      *(void *)(v49 + 32) = v45;
      *(void *)(v49 + 40) = v46;
      *(void *)(v49 + 48) = v47;
      *(void *)(v49 + 56) = v48;
      *(void *)(v49 + 64) = v57;
      char v50 = v59;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_100012E3C();
      swift_allocError();
      *(void *)uint64_t v49 = 0xD000000000000040;
      *(void *)(v49 + 8) = 0x800000010014FE50;
      *(_OWORD *)(v49 + 16) = 0u;
      *(_OWORD *)(v49 + 32) = 0u;
      *(_OWORD *)(v49 + 48) = 0u;
      *(void *)(v49 + 64) = 0;
      char v50 = 50;
    }
    *(unsigned char *)(v49 + 72) = v50;
  }
  else
  {
    sub_100012E3C();
    swift_allocError();
    *(void *)uint64_t v31 = v28;
    *(_OWORD *)(v31 + 8) = 0u;
    *(_OWORD *)(v31 + 24) = 0u;
    *(_OWORD *)(v31 + 40) = 0u;
    *(_OWORD *)(v31 + 56) = 0u;
    *(unsigned char *)(v31 + 72) = 0;
  }
  return (void *)swift_willThrow();
}

uint64_t sub_10010FB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v18 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v18 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  uint64_t result = sub_100104398(v18, a4, a5, a6, a7, a8, a9, a10);
  if (!v19) {
    return v20;
  }
  return result;
}

void *sub_10010FBDC(uint64_t a1, int64_t a2, uint64_t a3, void *(*a4)(void *__return_ptr, void, void), unint64_t a5)
{
  void *(*v62)(void *__return_ptr, void, void);
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;

  uint64_t v8 = v5;
  uint64_t v15 = (char *)__DataStorage._bytes.getter();
  if (v15)
  {
    uint64_t v16 = __DataStorage._offset.getter();
    unint64_t v14 = a1 - v16;
    if (__OFSUB__(a1, v16))
    {
LABEL_53:
      __break(1u);
LABEL_54:
      uint64_t v60 = sub_1000A0BB4((void *)(v14 > 1), a2, 1, v60);
      goto LABEL_16;
    }
    v15 += v14;
  }
  BOOL v17 = __OFSUB__(a2, a1);
  a2 -= a1;
  if (v17)
  {
    __break(1u);
    goto LABEL_53;
  }
  uint64_t v18 = __DataStorage._length.getter();
  if (v18 >= a2) {
    int64_t v19 = a2;
  }
  else {
    int64_t v19 = v18;
  }
  unsigned int v20 = &v15[v19];
  if (!v15) {
    unsigned int v20 = 0;
  }
  uint64_t v6 = v20 - v15;
  BOOL v21 = v20 - v15 < 32 || v15 == 0;
  if (!v21)
  {
    int v28 = 0;
    int v27 = *(_DWORD *)v15;
    uint64_t v29 = _swiftEmptyArrayStorage;
    if (*(_DWORD *)v15 == -805638658 || v27 == -17958193)
    {
      int v26 = v15;
    }
    else
    {
      int v26 = 0;
      LOBYTE(v21) = 1;
      int v28 = 255;
    }
    goto LABEL_23;
  }
  sub_100012E3C();
  uint64_t v22 = swift_allocError();
  *(void *)uint64_t v23 = 0xD000000000000033;
  *(void *)(v23 + 8) = 0x800000010014FDD0;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(void *)(v23 + 64) = 0;
  *(unsigned char *)(v23 + 72) = 24;
  swift_willThrow();
  swift_errorRetain();
  sub_100004700(&qword_10017EB50);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_42;
  }
  char v54 = 1;
  uint64_t v62 = a4;
  swift_errorRelease();
  uint64_t v7 = v69;
  a4 = (void *(*)(void *__return_ptr, void, void))v70;
  a3 = v71;
  uint64_t v8 = v72;
  LOBYTE(a1) = v73;
  uint64_t v58 = v65;
  uint64_t v59 = v64;
  uint64_t v56 = v67;
  uint64_t v57 = v66;
  unint64_t v55 = v68;
  sub_10005C020(v64, v65, v66, v67, v68, v69, v70, v71, v72, v73);
  uint64_t v24 = sub_1000A0BB4(0, 1, 1, _swiftEmptyArrayStorage);
  a5 = v24[2];
  unint64_t v14 = v24[3];
  uint64_t v60 = v24;
  a2 = a5 + 1;
  if (a5 >= v14 >> 1) {
    goto LABEL_54;
  }
LABEL_16:
  v60[2] = a2;
  uint64_t v25 = &v60[10 * a5];
  v25[4] = v59;
  v25[5] = v58;
  v25[6] = v57;
  v25[7] = v56;
  v25[8] = v55;
  v25[9] = v7;
  v25[10] = a4;
  v25[11] = a3;
  v25[12] = v8;
  *((unsigned char *)v25 + 104) = a1;
  sub_10003E9C8(v59, v58, v57, v56, v55, v7, (uint64_t)a4, a3, v8, a1);
  swift_errorRelease();
  if (!v15 || v6 < 28)
  {
    uint64_t v22 = swift_allocError();
    int v26 = 0;
    *(void *)uint64_t v31 = 0xD000000000000033;
    unint64_t v33 = 0x800000010014FE10;
    int v32 = 255;
    a4 = v62;
    uint64_t v29 = v60;
    goto LABEL_29;
  }
  int v26 = 0;
  uint64_t v8 = 0;
  int v27 = *(_DWORD *)v15;
  int v28 = 255;
  a4 = v62;
  uint64_t v29 = v60;
  LOBYTE(v21) = v54;
LABEL_23:
  if (v27 != -17958194 && v27 != -822415874) {
    goto LABEL_35;
  }
  if (v21)
  {
    uint64_t v30 = 1;
LABEL_39:
    swift_bridgeObjectRelease();
    uint64_t result = a4(&v74, v15, v30);
    if (v8) {
      return result;
    }
    unint64_t v42 = v74 | ((unint64_t)BYTE4(v74) << 32);
    return (void *)(v42 | ((HIDWORD(v42) & 1) << 32));
  }
  sub_100012E3C();
  uint64_t v22 = swift_allocError();
  int v32 = 0;
  *(void *)uint64_t v31 = 0xD00000000000002BLL;
  unint64_t v33 = 0x800000010014FEA0;
LABEL_29:
  *(void *)(v31 + 8) = v33;
  *(_OWORD *)(v31 + 16) = 0u;
  *(_OWORD *)(v31 + 32) = 0u;
  *(_OWORD *)(v31 + 48) = 0u;
  *(void *)(v31 + 64) = 0;
  *(unsigned char *)(v31 + 72) = 24;
  swift_willThrow();
  swift_errorRetain();
  sub_100004700(&qword_10017EB50);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
LABEL_42:
    uint64_t result = (void *)swift_errorRelease();
    if (v22) {
      return result;
    }
    return (void *)(v42 | ((HIDWORD(v42) & 1) << 32));
  }
  swift_errorRelease();
  sub_10005C020(v64, v65, v66, v67, v68, v69, v70, v71, v72, v73);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v29 = sub_1000A0BB4(0, v29[2] + 1, 1, v29);
  }
  unint64_t v35 = v29[2];
  unint64_t v34 = v29[3];
  unint64_t v36 = v29;
  if (v35 >= v34 >> 1) {
    unint64_t v36 = sub_1000A0BB4((void *)(v34 > 1), v35 + 1, 1, v29);
  }
  v36[2] = v35 + 1;
  uint64_t v29 = v36;
  long long v37 = &v36[10 * v35];
  v37[4] = v64;
  v37[5] = v65;
  v37[6] = v66;
  v37[7] = v67;
  v37[8] = v68;
  v37[9] = v69;
  v37[10] = v70;
  v37[11] = v71;
  v37[12] = v72;
  *((unsigned char *)v37 + 104) = v73;
  sub_10003E9C8(v64, v65, v66, v67, v68, v69, v70, v71, v72, v73);
  swift_errorRelease();
  uint64_t v8 = 0;
  int v28 = v32;
LABEL_35:
  if (v28 != 255)
  {
    uint64_t v30 = 0;
    uint64_t v15 = v26;
    goto LABEL_39;
  }
  unint64_t v38 = v29[2];
  if (v38 <= 1)
  {
    if (v38 == 1)
    {
      uint64_t v43 = v29;
      uint64_t v44 = v29[4];
      uint64_t v45 = v29[5];
      uint64_t v46 = v43[6];
      uint64_t v47 = v43[7];
      unint64_t v48 = v43[8];
      uint64_t v49 = v43[9];
      uint64_t v50 = v43[10];
      uint64_t v51 = v43[11];
      uint64_t v61 = v43[12];
      uint64_t v63 = *((unsigned char *)v43 + 104);
      sub_10005C020(v44, v45, v46, v47, v48, v49, v50, v51, v61, v63);
      swift_bridgeObjectRelease();
      sub_100012E3C();
      uint64_t v39 = swift_allocError();
      *(void *)uint64_t v52 = v44;
      *(void *)(v52 + 8) = v45;
      *(void *)(v52 + 16) = v46;
      *(void *)(v52 + 24) = v47;
      *(void *)(v52 + 32) = v48;
      *(void *)(v52 + 40) = v49;
      *(void *)(v52 + 48) = v50;
      *(void *)(v52 + 56) = v51;
      *(void *)(v52 + 64) = v61;
      char v53 = v63;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_100012E3C();
      uint64_t v39 = swift_allocError();
      *(void *)uint64_t v52 = 0xD000000000000040;
      *(void *)(v52 + 8) = 0x800000010014FE50;
      *(_OWORD *)(v52 + 16) = 0u;
      *(_OWORD *)(v52 + 32) = 0u;
      *(_OWORD *)(v52 + 48) = 0u;
      *(void *)(v52 + 64) = 0;
      char v53 = 50;
    }
    *(unsigned char *)(v52 + 72) = v53;
  }
  else
  {
    sub_100012E3C();
    uint64_t v39 = swift_allocError();
    *(void *)uint64_t v40 = v29;
    *(_OWORD *)(v40 + 8) = 0u;
    *(_OWORD *)(v40 + 24) = 0u;
    *(_OWORD *)(v40 + 40) = 0u;
    *(_OWORD *)(v40 + 56) = 0u;
    *(unsigned char *)(v40 + 72) = 0;
  }
  uint64_t result = (void *)swift_willThrow();
  if (!v39) {
    return (void *)(v42 | ((HIDWORD(v42) & 1) << 32));
  }
  return result;
}

uint64_t sub_10011028C(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 40;
  uint64_t v6 = -(uint64_t)v2;
  uint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v20 = result + 40;
  unint64_t v21 = *(void *)(result + 16);
  do
  {
    uint64_t v22 = v7;
    if (v4 <= v2) {
      unint64_t v8 = v2;
    }
    else {
      unint64_t v8 = v4;
    }
    uint64_t v9 = -(uint64_t)v8;
    for (unint64_t i = (uint64_t *)(v5 + 16 * v4++); ; i += 2)
    {
      if (v9 + v4 == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v12 = *(i - 1);
      uint64_t v11 = *i;
      swift_bridgeObjectRetain_n();
      uint64_t v13 = sub_1000F0F54(a2);
      if (!v14) {
        break;
      }
      if (v12 == v13 && v14 == v11)
      {
        swift_bridgeObjectRelease_n();
        uint64_t result = swift_bridgeObjectRelease();
      }
      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0) {
          goto LABEL_18;
        }
        uint64_t result = swift_bridgeObjectRelease();
      }
      ++v4;
      if (v6 + v4 == 1) {
        return (uint64_t)v22;
      }
    }
    swift_bridgeObjectRelease();
LABEL_18:
    uint64_t v7 = v22;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10000C884(0, v22[2] + 1, 1);
      uint64_t v7 = v22;
    }
    unint64_t v18 = v7[2];
    unint64_t v17 = v7[3];
    if (v18 >= v17 >> 1)
    {
      uint64_t result = sub_10000C884(v17 > 1, v18 + 1, 1);
      uint64_t v7 = v22;
    }
    v7[2] = v18 + 1;
    int64_t v19 = &v7[2 * v18];
    v19[4] = v12;
    v19[5] = v11;
    uint64_t v5 = v20;
    unint64_t v2 = v21;
  }
  while (v6 + v4);
  return (uint64_t)v7;
}

uint64_t sub_100110468(_DWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100101098(a1, a4);
}

uint64_t sub_100110498()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001104A8(uint64_t a1)
{
  if (*(_DWORD *)a1 != 42) {
    return 2;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  swift_beginAccess();
  uint64_t result = 0;
  *(void *)(v1 + 16) = v2;
  *(unsigned char *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_100110510()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100110624(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = v4[2];
  uint64_t v7 = v4[3];
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  if (*(_DWORD *)a1 != -2147483595) {
    return 2;
  }
  if (a1 + (unint64_t)*(unsigned int *)(a1 + 4) > a4) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v12 = (v10 + ((v9 + 48) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = v4[4];
  uint64_t v28 = *(void *)((char *)v4 + v12);
  uint64_t v33 = *(void *)((char *)v4 + v13);
  uint64_t v31 = *(void *)((char *)v4 + v13 + 16);
  uint64_t v32 = *(void *)((char *)v4 + v13 + 8);
  uint64_t v34 = *(void *)((char *)v4 + ((v13 + 31) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v15 = v4[5] + 16;
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v39 = String.init(cString:)();
  uint64_t v17 = v16;
  uint64_t v29 = v14;
  if (v14
    && (swift_beginAccess(),
        uint64_t v18 = v15,
        uint64_t v19 = *(void *)v15,
        swift_bridgeObjectRetain(),
        char v20 = sub_1000948F4(v39, v17, v19),
        uint64_t v15 = v18,
        swift_bridgeObjectRelease(),
        (v20 & 1) == 0))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 56))(v36, v30, v6, v7);
    uint64_t v21 = v37;
    uint64_t v22 = v38;
    sub_1000036B0(v36, v37);
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 40);
    swift_bridgeObjectRetain();
    uint64_t v24 = v23(v33, v32, v31, v30, 0, v39, v17, v34, v21, v22);
    if (v5)
    {
      swift_bridgeObjectRelease_n();
      return sub_10000478C((uint64_t)v36);
    }
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v35 = *(void *)(v28 + 16);
    *(void *)(v28 + 16) = 0x8000000000000000;
    sub_10010C444(v25, v39, v17, isUniquelyReferenced_nonNull_native);
    *(void *)(v28 + 16) = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (v29)
    {
      swift_beginAccess();
      uint64_t v27 = *(void *)(*(void *)v15 + 16);
      swift_beginAccess();
      if (v27 == *(void *)(*(void *)(v28 + 16) + 16))
      {
        sub_10000478C((uint64_t)v36);
        return 0;
      }
    }
    sub_10000478C((uint64_t)v36);
  }
  return 2;
}

uint64_t sub_10011093C(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100110980()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001109B8(uint64_t a1)
{
  return sub_100104828(a1, *(uint64_t (**)(void *))(v1 + 16));
}

uint64_t sub_1001109D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))a3;
    uint64_t v7 = *(void *)(a3 + 16);
    uint64_t v8 = *(unsigned __int8 *)(a3 + 24);
    swift_retain();
    uint64_t v3 = v6(a1, v7, v8, a2);
    swift_release();
  }
  return v3;
}

uint64_t sub_100110A84()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 44;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0x286E776F6E6B6E55;
}

uint64_t sub_100110B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t result = sub_100104B3C(v11, v17, a4, a5, &v18);
  if (!v5) {
    return v18;
  }
  return result;
}

uint64_t sub_100110C0C(uint64_t a1, char a2)
{
  return sub_1001079E8(a1, a2 & 1, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), *(void *)(v2 + 48));
}

BOOL sub_100110C48()
{
  if (Img4DecodeInitPayload) {
    BOOL v0 = Img4DecodeInit == 0;
  }
  else {
    BOOL v0 = 1;
  }
  return !v0 && Img4EncodeCreatePayload != 0;
}

uint64_t sub_100110C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_100109FFC(v11, a4, a5, &v13);
  if (!v5) {
    return v13;
  }
  return v12;
}

uint64_t sub_100110D18()
{
  if (&AMAuthInstallApSetParameters) {
    BOOL v0 = &AMAuthInstallBundleCopyBuildIdentityForVariant == 0;
  }
  else {
    BOOL v0 = 1;
  }
  unsigned int v2 = !v0 && &AMAuthInstallCreate != 0;
  if (&_AMAuthInstallApImg4CreatePayloadWithProperties) {
    BOOL v3 = &_AMAuthInstallApImg4GetPayloadPropertiesData == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  else {
    return v2;
  }
}

unint64_t sub_100110D64()
{
  unint64_t result = qword_10017FDC8;
  if (!qword_10017FDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FDC8);
  }
  return result;
}

unint64_t sub_100110DBC()
{
  unint64_t result = qword_10017FDD0;
  if (!qword_10017FDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FDD0);
  }
  return result;
}

unint64_t sub_100110E1C()
{
  unint64_t result = qword_10017FDD8;
  if (!qword_10017FDD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FDD8);
  }
  return result;
}

unint64_t sub_100110E74()
{
  unint64_t result = qword_10017FDE0;
  if (!qword_10017FDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FDE0);
  }
  return result;
}

unint64_t sub_100110ECC()
{
  unint64_t result = qword_10017FDE8;
  if (!qword_10017FDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FDE8);
  }
  return result;
}

unint64_t sub_100110F24()
{
  unint64_t result = qword_10017FDF0;
  if (!qword_10017FDF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FDF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MachOSegmentName()
{
  return &type metadata for MachOSegmentName;
}

ValueMetadata *type metadata accessor for MachOSectionName()
{
  return &type metadata for MachOSectionName;
}

unint64_t destroy for MachOSymbol(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(a1 + 16);

  return sub_10005994C(v2);
}

void *_s10driverkitd11MachOSymbolVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  unint64_t v4 = a2[2];
  swift_bridgeObjectRetain();
  sub_100059928(v4);
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for MachOSymbol(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = a2[2];
  sub_100059928(v4);
  unint64_t v5 = a1[2];
  a1[2] = v4;
  sub_10005994C(v5);
  return a1;
}

void *assignWithTake for MachOSymbol(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  unint64_t v5 = a1[2];
  a1[2] = a2[2];
  sub_10005994C(v5);
  return a1;
}

ValueMetadata *type metadata accessor for MachOSymbol()
{
  return &type metadata for MachOSymbol;
}

unint64_t *initializeBufferWithCopyOfBuffer for MachOSymbol.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_100059928(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for MachOSymbol.Kind(unint64_t *a1)
{
  return sub_10005994C(*a1);
}

unint64_t *assignWithCopy for MachOSymbol.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_100059928(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_10005994C(v4);
  return a1;
}

unint64_t *assignWithTake for MachOSymbol.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_10005994C(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MachOSymbol.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MachOSymbol.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)unint64_t result = a2 - 125;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_100111230(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 == 3) {
    return (*a1 >> 3) + 3;
  }
  else {
    return v1;
  }
}

void *sub_10011124C(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_10011125C(unint64_t *result, uint64_t a2)
{
  if (a2 < 3)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 3);
    unint64_t v3 = 0xC000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for MachOSymbol.Kind()
{
  return &type metadata for MachOSymbol.Kind;
}

ValueMetadata *type metadata accessor for MachOSourceVersion()
{
  return &type metadata for MachOSourceVersion;
}

ValueMetadata *type metadata accessor for Img4PayloadType()
{
  return &type metadata for Img4PayloadType;
}

ValueMetadata *type metadata accessor for FilesetOffset()
{
  return &type metadata for FilesetOffset;
}

ValueMetadata *type metadata accessor for MachOFileSize()
{
  return &type metadata for MachOFileSize;
}

ValueMetadata *type metadata accessor for MachOAddress()
{
  return &type metadata for MachOAddress;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyMachHeader(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AnyMachHeader(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyMachHeader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100111388(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100111390(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AnyMachHeader()
{
  return &type metadata for AnyMachHeader;
}

__n128 sub_1001113AC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1001113C0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1001113E0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 28) = v3;
  return result;
}

void type metadata accessor for mach_header(uint64_t a1)
{
}

__n128 sub_100111424(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100111430(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100111450(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for mach_header_64(uint64_t a1)
{
}

void type metadata accessor for compression_algorithm(uint64_t a1)
{
}

void type metadata accessor for macho_seek_result(uint64_t a1)
{
}

BOOL sub_1001114B8()
{
  if (DEREncoderCreate) {
    BOOL v0 = DEREncoderAddUInt32 == 0;
  }
  else {
    BOOL v0 = 1;
  }
  return !v0;
}

uint64_t sub_1001114D8(unsigned int *a1)
{
  return *a1;
}

BOOL sub_1001114E0(int a1)
{
  return (a1 & 0xFEFFFFFF) == -822415874;
}

unint64_t sub_1001114F8(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return sub_10005994C(result);
  }
  return result;
}

uint64_t sub_10011150C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100105EF4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t sub_10011152C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100111558@<X0>(uint64_t a1@<X0>, char a2@<W1>, _DWORD *a3@<X8>)
{
  return sub_1001046FC(a1, a2 & 1, *(uint64_t **)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 48), *(void *)(v3 + 56), a3);
}

uint64_t sub_100111590()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001115A0()
{
}

uint64_t sub_1001115A8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001115E0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10005994C(*(void *)(v0 + 48));

  return _swift_deallocObject(v0, 56, 7);
}

__n128 sub_100111628(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10011164C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10011166C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 72) = v3;
  return result;
}

void type metadata accessor for segment_command_64(uint64_t a1)
{
}

uint64_t sub_1001116BC(unsigned int a1)
{
  return bswap32(a1);
}

uint64_t sub_1001116E4(uint64_t a1)
{
  return sub_1001109B8(a1);
}

uint64_t sub_100111708()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x536E6F6973726576;
      break;
    case 2:
      uint64_t result = 0x747365676964;
      break;
    case 3:
      uint64_t result = 0x6150656C646E7562;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001117AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001173D4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001117D4(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1001117E0(uint64_t a1)
{
  unint64_t v2 = sub_100117380();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10011181C(uint64_t a1)
{
  unint64_t v2 = sub_100117380();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100111858(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004700(&qword_10017FE70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000036B0(a1, a1[3]);
  sub_100117380();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + 32);
    v10[15] = 2;
    sub_10001C508();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_100111A20@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1001175C0(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_100111A64(void *a1)
{
  return sub_100111858(a1);
}

uint64_t sub_100111A7C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  _OWORD v7[2] = a1[2];
  v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  void v8[2] = a2[2];
  v8[3] = v5;
  return sub_1001172B4(v7, v8) & 1;
}

Swift::Int sub_100111AC8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_100012DE4(v1, v2);
  Data.hash(into:)();
  sub_100012A10(v1, v2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100111BB8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_100012DE4(v1, v2);
  Data.hash(into:)();
  sub_100012A10(v1, v2);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100111C9C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_100012DE4(v1, v2);
  Data.hash(into:)();
  sub_100012A10(v1, v2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100111D88()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = (void *)v0[3];
  uint64_t v3 = v0[6];
  long long v4 = (void *)v0[7];
  uint64_t v10 = *v0;
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = 30240;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v1;
  v6._object = v2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 544106784;
  v7._object = (void *)0xE400000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v3;
  v8._object = v4;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100111E38()
{
  long long v8 = *v0;
  long long v9 = *v0;
  sub_100073520((uint64_t)&v9);
  v1._uint64_t countAndFlagsBits = 30240;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  sub_100117948();
  v2._uint64_t countAndFlagsBits = BinaryInteger.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 544106784;
  v3._object = (void *)0xE400000000000000;
  String.append(_:)(v3);
  if (*((void *)v0 + 6))
  {
    uint64_t v4 = *((void *)v0 + 5);
    Swift::String v5 = (void *)*((void *)v0 + 6);
  }
  else
  {
    Swift::String v5 = (void *)0xE300000000000000;
    uint64_t v4 = 4144959;
  }
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_100111F10()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v0[2]);
  unint64_t v1 = v0[4];
  if (v1 >> 60 != 15)
  {
    uint64_t v2 = v0[3];
    Hasher._combine(_:)(1u);
    sub_100012DE4(v2, v1);
    Data.hash(into:)();
    sub_10002404C(v2, v1);
    if (v0[6]) {
      goto LABEL_3;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  if (!v0[6]) {
    goto LABEL_7;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  swift_bridgeObjectRelease();
}

uint64_t sub_100112014()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6F6973726576;
      break;
    case 2:
      uint64_t result = 0x747365676964;
      break;
    case 3:
      uint64_t result = 0x6150656C646E7562;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001120AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100117BC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001120D4(uint64_t a1)
{
  unint64_t v2 = sub_100117B08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100112110(uint64_t a1)
{
  unint64_t v2 = sub_100117B08();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10011214C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004700(&qword_10017FE80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000036B0(a1, a1[3]);
  sub_100117B08();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100117B5C(v3 + 24, (uint64_t)v12);
    sub_100117B5C((uint64_t)v12, (uint64_t)v11);
    v10[15] = 2;
    sub_10001C508();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_100112324@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100117D8C(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100112374(void *a1)
{
  return sub_10011214C(a1);
}

uint64_t sub_1001123B8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_10011799C(v5, v7) & 1;
}

Swift::Int sub_100112414()
{
  return Hasher._finalize()();
}

Swift::Int sub_100112458()
{
  return Hasher._finalize()();
}

uint64_t sub_100112498@<X0>(uint64_t a1@<X8>)
{
  sub_10003FDC8(v1 + 24, (uint64_t)v4);
  if (!v5) {
    return sub_10000372C(v4, a1);
  }
  uint64_t result = sub_10003FE80((uint64_t)v4);
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1001124F8()
{
  sub_10003FDC8(v0 + 24, (uint64_t)v2);
  if (v3 == 1) {
    return v2[0];
  }
  sub_10003FE80((uint64_t)v2);
  return 0;
}

uint64_t sub_100112540()
{
  sub_10003FDC8(v0 + 24, (uint64_t)v2);
  if (v2[40] == 2) {
    return v2[0];
  }
  sub_10003FE80((uint64_t)v2);
  return 4;
}

BOOL sub_100112588()
{
  sub_10003FDC8(v0 + 24, (uint64_t)v3);
  int v1 = v4;
  if (v4 != 2) {
    sub_10003FE80((uint64_t)v3);
  }
  return v1 == 2;
}

unint64_t sub_1001125D4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v2 = sub_1000A11D8();
  if (!*(void *)(v1 + 16))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    goto LABEL_8;
  }
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1000048E0(v4, v3);
  if ((v6 & 1) == 0)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_1000047DC(*(void *)(v1 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  if (!*((void *)&v10 + 1))
  {
LABEL_8:
    sub_1000130EC((uint64_t)&v9, &qword_10017C018);
    return 0xD000000000000014;
  }
  if (swift_dynamicCast()) {
    return v8;
  }
  return 0xD000000000000014;
}

uint64_t sub_1001126C0@<X0>(uint64_t a1@<X8>)
{
  sub_10003FDC8(v1 + 24, (uint64_t)v14);
  if (v15)
  {
    if (v15 == 1)
    {
      uint64_t v3 = *(void *)&v14[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
      uint64_t v4 = type metadata accessor for URL();
      uint64_t v5 = *(void *)(v4 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v3, v4);
      swift_release();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
    }
    else
    {
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 1, 1, v10);
      return sub_10003FE80((uint64_t)v14);
    }
  }
  else
  {
    sub_10000372C(v14, (uint64_t)v11);
    uint64_t v7 = v12;
    uint64_t v8 = v13;
    sub_1000036B0(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 0, 1, v9);
    return sub_10000478C((uint64_t)v11);
  }
}

uint64_t sub_100112894@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL;
  swift_beginAccess();
  return sub_100118098(v3, a1);
}

uint64_t sub_1001128E8(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL;
  swift_beginAccess();
  sub_100048398(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_100112944())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1001129A0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v2 = sub_1000A13D4();
  if (!*(void *)(v1 + 16))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    goto LABEL_8;
  }
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1000048E0(v4, v3);
  if ((v6 & 1) == 0)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_1000047DC(*(void *)(v1 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  if (!*((void *)&v10 + 1))
  {
LABEL_8:
    sub_1000130EC((uint64_t)&v9, &qword_10017C018);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v8;
  }
  return 0;
}

uint64_t sub_100112A7C()
{
  (*(void (**)(void))(*(void *)v0 + 184))();
  if (!v1) {
    return 0;
  }
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v3 = OSKextParseVersionCFString();

  return v3;
}

uint64_t sub_100112AF0()
{
  type metadata accessor for KernelExtension(0);
  if (swift_dynamicCastClass())
  {
    uint64_t v1 = 1954047307;
  }
  else
  {
    type metadata accessor for DriverExtension(0);
    uint64_t v2 = swift_dynamicCastClass();
    uint64_t v1 = 4144959;
    if (v2) {
      uint64_t v1 = 1954047300;
    }
  }
  uint64_t v13 = v1;
  v3._uint64_t countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v0 + 144))();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 30240;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v0 + 184))();
  if (v7)
  {
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0x293F3F3F28;
    unint64_t v8 = 0xE500000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 544106784;
  v10._object = (void *)0xE400000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = sub_100116ABC();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v13;
}

BOOL sub_100112C64()
{
  (*(void (**)(void))(*(void *)v0 + 144))();
  uint64_t v1 = (uint64_t *)sub_1000A20F0();
  uint64_t v2 = *v1;
  Swift::String v3 = (void *)v1[1];
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  Swift::Bool v5 = String.hasPrefix(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100112CF0()
{
  (*(void (**)(void *__return_ptr))(*(void *)v0 + 112))(v6);
  uint64_t v1 = v7;
  if (v7)
  {
    uint64_t v2 = v8;
    sub_1000036B0(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
    uint64_t v4 = v3;
    sub_10000478C((uint64_t)v6);
    if (v4)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    sub_1000130EC((uint64_t)v6, &qword_10017BC78);
  }
  return 1;
}

uint64_t sub_100112DB0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  sub_10002F064(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t sub_100112E0C(uint64_t a1, uint64_t a2)
{
  Swift::Bool v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest);
  swift_beginAccess();
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  uint64_t *v5 = a1;
  v5[1] = a2;
  return sub_10002404C(v6, v7);
}

uint64_t (*sub_100112E6C())()
{
  return j__swift_endAccess;
}

uint64_t sub_100112EC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100004700(&qword_10017C918);
  __chkstk_darwin(v3 - 8);
  Swift::Bool v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + 16);
  unint64_t v7 = (uint64_t *)sub_1000A148C();
  if (!*(void *)(v6 + 16))
  {
    long long v19 = 0u;
    long long v20 = 0u;
    goto LABEL_9;
  }
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1000048E0(v9, v8);
  if ((v11 & 1) == 0)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_1000047DC(*(void *)(v6 + 56) + 32 * v10, (uint64_t)&v19);
  swift_bridgeObjectRelease();
  if (!*((void *)&v20 + 1))
  {
LABEL_9:
    uint64_t v14 = &qword_10017C018;
    char v15 = (char *)&v19;
LABEL_10:
    sub_1000130EC((uint64_t)v15, v14);
    goto LABEL_11;
  }
  if (swift_dynamicCast())
  {
    sub_1000EF120(v18[0], v18[1], (uint64_t)v5);
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v5, 1, v12) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v5, v12);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
    }
    uint64_t v14 = &qword_10017C918;
    char v15 = v5;
    goto LABEL_10;
  }
LABEL_11:
  uint64_t v16 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 1, 1, v16);
}

uint64_t sub_1001130E8@<X0>(uint64_t a1@<X8>)
{
  return sub_100113118((uint64_t (*)(void))sub_1000A1374, a1);
}

uint64_t sub_100113100@<X0>(uint64_t a1@<X8>)
{
  return sub_100113118((uint64_t (*)(void))sub_1000A1558, a1);
}

uint64_t sub_100113118@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  Swift::Bool v5 = (uint64_t *)a1();
  if (!*(void *)(v4 + 16))
  {
    long long v13 = 0u;
    long long v14 = 0u;
    goto LABEL_8;
  }
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000048E0(v7, v6);
  if ((v9 & 1) == 0)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_1000047DC(*(void *)(v4 + 56) + 32 * v8, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  if (!*((void *)&v14 + 1))
  {
LABEL_8:
    sub_1000130EC((uint64_t)&v13, &qword_10017C018);
    goto LABEL_9;
  }
  if (swift_dynamicCast())
  {
    URL.init(fileURLWithPath:isDirectory:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a2, 0, 1, v10);
  }
LABEL_9:
  uint64_t v12 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 1, 1, v12);
}