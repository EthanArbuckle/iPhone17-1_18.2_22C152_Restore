uint64_t Init_NVMeCTL()
{
  if (&_NewNVMeCTLFirst) {
    return NewNVMeCTLFirst();
  }
  else {
    return 0;
  }
}

uint64_t Free_NVMeCTL()
{
  if (&_DeleteNVMeCTL) {
    return DeleteNVMeCTL();
  }
  return result;
}

uint64_t Do_NVMeCTL_WL_Sweep()
{
  __chkstk_darwin();
  if (!&_NVMeCTLGetANS2Sweep) {
    return 7;
  }
  v4 = v2;
  v5 = v1;
  v6 = v0;
  statvfs("/", &v15);
  unint64_t v7 = v15.f_bsize * v15.f_bfree;
  if (!(v7 >> 25))
  {
    fprintf(__stderrp, "Not enough disk space: Req %llu, Free %llu\n", 0x2000000, v15.f_bsize * v15.f_bfree);
    return 5;
  }
  v8 = fopen(v4, "w");
  if (!v8)
  {
    fprintf(__stderrp, "Error opening file - %s\n", v4);
    return 7;
  }
  v9 = v8;
  long long v10 = v6[1];
  long long v16 = *v6;
  v17[0] = v10;
  *(_OWORD *)((char *)v17 + 12) = *(long long *)((char *)v6 + 28);
  NVMeCTLGetANS2Sweep();
  if (v13 || v12 || !__size)
  {
    fprintf(__stderrp, "Error performing sweep on channel %d, die %d \n", *((_DWORD *)v6 + 1), *((_DWORD *)v6 + 2));
    fprintf(__stderrp, "plane %d, block %d, wl %d\n", *((_DWORD *)v6 + 3), *((_DWORD *)v6 + 4), *((_DWORD *)v6 + 5));
    uint64_t v3 = 2;
  }
  else if (fwrite(v5, __size, 1uLL, v9))
  {
    uint64_t v3 = 0;
  }
  else
  {
    fprintf(__stderrp, "Could not write sweep data into file. Free Space %llu\n", v7);
    uint64_t v3 = 5;
  }
  fclose(v9);
  return v3;
}

uint64_t Send_ASF_Tunnel()
{
  if (!&_NVMeCTLTunnel) {
    return 0xFFFFFFFFLL;
  }
  NVMeCTLTunnel();
  return v1;
}

void sub_10000305C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5 = (objc_class *)objc_opt_class();
  v6 = NSStringFromClass(v5);
  unint64_t v7 = [[ASPCarryLog_XpcActivityMgr alloc] initWithXpcActivity:v3];
  if (*(unsigned char *)(a1 + 40)) {
    v8 = [[ASPCarryLog_PersistentStateMgr alloc] initWithIdentifier:v6];
  }
  else {
    v8 = 0;
  }
  v9 = objc_alloc_init(NANDTelemetry_PrivacyMgr);
  id v10 = [objc_alloc(*(Class *)(a1 + 32)) initWithXpcActivityMgr:v7 persistentStateMgr:v8 privacyMgr:v9];
  v11 = v10;
  if (v10)
  {
    int v12 = [v10 privacyMgr];
    unsigned int v13 = [v12 allowTelemetry];

    if (v13)
    {
      v14 = (void *)oslog;
      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = v6;
        long long v16 = v14;
        int v26 = 136315138;
        id v27 = [v15 UTF8String];
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s activity starts...", (uint8_t *)&v26, 0xCu);
      }
      [v11 runActivity];
      unsigned int v17 = [(ASPCarryLog_XpcActivityMgr *)v7 isActivityDeferred];
      v18 = (void *)oslog;
      BOOL v19 = os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT);
      if (v17)
      {
        if (v19)
        {
          id v20 = v6;
          v21 = v18;
          id v22 = [v20 UTF8String];
          int v26 = 136315138;
          id v27 = v22;
          v23 = "%s activity deferred...";
LABEL_14:
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v26, 0xCu);
        }
      }
      else if (v19)
      {
        id v24 = v6;
        v21 = v18;
        id v25 = [v24 UTF8String];
        int v26 = 136315138;
        id v27 = v25;
        v23 = "%s activity complete.";
        goto LABEL_14;
      }
    }
    else
    {
      [v11 cleanUpForTelemetryDisable];
    }
  }
}

void checkInNandTelemetry_nandActivities(void *a1)
{
  id v2 = a1;
  +[NANDTelemetry_Base registerActivityWithIdentifier:XpcCriteria:ActivityQ:PersistentState:](NANDTelemetry_NandCoreAnalyticsDaily, "registerActivityWithIdentifier:XpcCriteria:ActivityQ:PersistentState:", "com.apple.nand.nandtelemetry_cadaily", 0);
  if (os_variant_has_internal_content())
  {
    xpc_object_t v1 = xpc_dictionary_create(0, 0, 0);
    +[NANDTelemetry_NandGBBSweepDaily setGBBXpcCritiria:v1];
    +[NANDTelemetry_Base registerActivityWithIdentifier:"com.apple.nand.automaticgbbsweep" XpcCriteria:v1 ActivityQ:v2 PersistentState:1];
  }
}

id checkInNandTelemetry_nonNandActivities(uint64_t a1)
{
  return +[NANDTelemetry_Base registerActivityWithIdentifier:"com.apple.nand.nandtelemetry_appspace" XpcCriteria:0 ActivityQ:a1 PersistentState:1];
}

uint64_t iolog_hwlogger_to_legacy_format_conversion(FILE *a1, FILE *a2, int a3)
{
  v6 = malloc_type_malloc(0x8000uLL, 0x9BD27704uLL);
  unint64_t v7 = malloc_type_malloc(0x80000uLL, 0x3E7A48C7uLL);
  v28 = v7;
  if (!v7)
  {
    uint64_t v22 = 0;
    if (!v6) {
      return v22;
    }
    goto LABEL_41;
  }
  v8 = v7;
  bzero(v7, 0x80000uLL);
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  memset_pattern16(&v27, &unk_10008A240, 0x400uLL);
  if (v6)
  {
    long long v24 = 0uLL;
    if (fread(&v24, 0x10uLL, 1uLL, a2) == 1 && (v24 & 0x3FFFF) == 0x5E)
    {
      if (a3) {
        *(void *)((char *)&v24 + 4) = 245;
      }
      fwrite(&v24, 0x10uLL, 1uLL, a1);
      size_t v9 = fread(v6, 0x10uLL, 0x800uLL, a2);
      if (v9)
      {
        size_t v10 = v9;
        while (1)
        {
          v11 = (uint64_t *)v6;
          do
          {
            uint64_t v12 = *v11;
            if (*v11 != 0xDEADBEEFDEADBEEFLL && v12 != 0)
            {
              unsigned int v14 = v12 >> 27;
              if (v12 >> 27 == 3)
              {
                if ((v12 & 0xFF00000000) != 0xD00000000) {
                  goto LABEL_23;
                }
                unsigned int v15 = BYTE5(v12);
                uint64_t v16 = *v11 & 0x7FFFFFF;
              }
              else
              {
                if (v14 != 2)
                {
                  if (v14 != 1) {
                    goto LABEL_15;
                  }
LABEL_23:
                  sub_100003828((unsigned int *)v25, (uint64_t)v11, a1);
                  goto LABEL_15;
                }
                unsigned int v15 = BYTE4(v12);
                LODWORD(v16) = v12 & 0x7FFFFFF;
              }
              sub_100003B18((uint64_t)v25, v15, v16, a1);
            }
LABEL_15:
            v11 += 2;
            --v10;
          }
          while (v10);
          size_t v17 = fread(v6, 0x10uLL, 0x800uLL, a2);
          size_t v10 = v17;
          if (!v17)
          {
            v8 = v28;
            break;
          }
        }
      }
      for (uint64_t i = 72; i != 1096; i += 4)
      {
        uint64_t v19 = *(unsigned int *)((char *)v25 + i);
        if (!(v19 >> 15))
        {
          v8[4 * v19] |= 0xFFFFF0u;
          *(_DWORD *)((char *)v25 + i) = 0x8000;
        }
      }
      memset((char *)v25 + 8, 0, 32);
      uint64_t v20 = 40;
      v21.i64[0] = 0x300000003;
      v21.i64[1] = 0x300000003;
      do
      {
        *(int8x16_t *)((char *)v25 + v20) = vbicq_s8(v21, (int8x16_t)vceqzq_s32(*(int32x4_t *)((char *)v25 + v20)));
        v20 += 16;
      }
      while (v20 != 72);
      sub_1000036D8((uint64_t)v25, a1);
      v8 = v28;
      uint64_t v22 = 1;
      if (!v28) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    free(v8);
  }
  else
  {
    uint64_t v22 = 0;
    v6 = v8;
  }
LABEL_41:
  free(v6);
  return v22;
}

void sub_1000036D8(uint64_t a1, FILE *__stream)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  uint64_t v3 = a1 + 4 * v2;
  int v5 = *(_DWORD *)(v3 + 40);
  v4 = (_DWORD *)(v3 + 40);
  if (v5 == 3)
  {
    do
    {
      if (v2 <= 7 && !*(_DWORD *)(a1 + 4 * v2 + 8))
      {
        unsigned int v8 = v2 << 12;
        size_t v9 = (void *)(*(void *)(a1 + 1096) + 16 * v8);
        if (*(_DWORD *)a1 < (v8 | 0xFFF) && *(_DWORD *)a1 > v8) {
          size_t v11 = 16 * (*(_DWORD *)a1 - v8);
        }
        else {
          size_t v11 = 0x10000;
        }
        fwrite(v9, v11, 1uLL, __stream);
        bzero(v9, v11);
        _DWORD *v4 = 0;
        LODWORD(v2) = *(_DWORD *)(a1 + 4);
      }
      if (v2 == 7) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = (v2 + 1);
      }
      *(_DWORD *)(a1 + 4) = v2;
      uint64_t v12 = a1 + 4 * v2;
      int v13 = *(_DWORD *)(v12 + 40);
      v4 = (_DWORD *)(v12 + 40);
    }
    while (v13 == 3);
  }
}

BOOL iolog_is_from_hwlogger(FILE *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  fseek(a1, 0, 0);
  size_t v2 = fread(v4, 0x10uLL, 1uLL, a1);
  BOOL result = 0;
  if (v2 == 1) {
    return (v4[0] & 0x3FFFF) == 0x5E && HIWORD(v4[0]) != 0;
  }
  return result;
}

void sub_100003828(unsigned int *a1, uint64_t a2, FILE *__stream)
{
  if (*(_DWORD *)a2 >> 27 == 1)
  {
    int v3 = *(unsigned __int8 *)(a2 + 5);
    if (v3 == 2) {
      int v4 = 1;
    }
    else {
      int v4 = 15;
    }
    if (v3 == 1) {
      int v5 = 2;
    }
    else {
      int v5 = v4;
    }
    if (v5 == 15) {
      return;
    }
    BOOL v6 = 0;
    int v7 = *(unsigned __int8 *)(a2 + 4);
    unsigned int v8 = *(unsigned __int8 *)(a2 + 6);
    uint64_t v9 = *(void *)(a2 + 8);
    unsigned int v10 = v5 & 0xF8FFFFFF | (((v8 >> 4) & 7) << 24);
    int v11 = (BYTE5(v9) | (v8 << 23) & 0x40000000 | ((v8 & 0xF) << 24)) + 1;
  }
  else
  {
    int v12 = *(unsigned __int8 *)(a2 + 4);
    *(void *)v36 = *(void *)(a2 + 5);
    *(_DWORD *)&v36[7] = *(_DWORD *)(a2 + 12);
    if (v12 == 14)
    {
      int v11 = 0;
      unsigned int v10 = (*(unsigned __int16 *)v36 << 8) & 0xFC0000 | (16 * (*(_WORD *)v36 & 0x3FF)) | (v36[2] << 24) | 0xE;
      LODWORD(v9) = *(_DWORD *)&v36[3];
      uint64_t v13 = *(unsigned int *)&v36[7];
      goto LABEL_21;
    }
    int v7 = v36[0];
    int v14 = v12 & 0xF;
    unsigned int v10 = (v12 | (*(_DWORD *)&v36[1] << 20)) & 0x700000F;
    int v11 = (*(_DWORD *)&v36[1] << 23) & 0x40000000 | ((v36[1] & 0xF) << 24) | HIBYTE(*(void *)&v36[1]) | (*(unsigned __int16 *)&v36[9] << 8);
    BOOL v6 = v14 == 3;
    uint64_t v9 = *(void *)&v36[1] >> 8;
  }
  uint64_t v13 = 16 * (*(_DWORD *)a2 & 0x7FFFFFFu);
  unsigned int v15 = &a1[v7];
  unsigned int v18 = v15[18];
  uint64_t v16 = v15 + 18;
  uint64_t v17 = v18;
  if (v6 && v17 < 0x8000)
  {
    uint64_t v19 = *((void *)a1 + 137);
    int v20 = *(_DWORD *)(v19 + 16 * v17);
    if ((v20 & 0xF) == 3) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (!(v17 >> 15))
  {
    uint64_t v19 = *((void *)a1 + 137);
    int v20 = *(_DWORD *)(v19 + 16 * v17);
LABEL_20:
    *(_DWORD *)(v19 + 16 * v17) = v20 | 0xFFFFF0;
    unint64_t v22 = *a1;
    --a1[(v17 >> 12) + 2];
    *uint64_t v16 = v22;
    ++*(unsigned int *)((char *)a1 + ((v22 >> 10) & 0x3FFFFC) + 8);
    goto LABEL_21;
  }
  unint64_t v21 = *a1;
  *uint64_t v16 = v21;
  ++*(unsigned int *)((char *)a1 + ((v21 >> 10) & 0x3FFFFC) + 8);
LABEL_21:
  uint64_t v23 = *((void *)a1 + 137) + 16 * *a1;
  *(_DWORD *)uint64_t v23 = v10;
  *(void *)(v23 + 4) = v9 | (unint64_t)(v13 << 32);
  *(_DWORD *)(v23 + 12) = v11;
  unint64_t v24 = *a1;
  if ((v24 & 0xFFF) == 0) {
    *(unsigned int *)((char *)a1 + ((v24 >> 10) & 0x3FFFFC) + 40) = 1;
  }
  if ((v24 + 1) >> 15) {
    unsigned int v25 = 0;
  }
  else {
    unsigned int v25 = v24 + 1;
  }
  *a1 = v25;
  if ((v25 & 0xFFF) == 0)
  {
    unint64_t v26 = v24 >> 12;
    uint64_t v27 = v25 >> 12;
    v28 = &a1[v27];
    unsigned int v30 = v28[10];
    v29 = v28 + 10;
    if (v30)
    {
      uint64_t v31 = 0;
      v32 = a1 + 18;
      do
      {
        uint64_t v33 = v32[v31];
        if (v27 == v33 >> 12)
        {
          *(_DWORD *)(*((void *)a1 + 137) + 16 * v33) |= 0xFFFFF0u;
          v32[v31] = 0x8000;
        }
        ++v31;
      }
      while (v31 != 256);
      a1[v27 + 2] = 0;
      _DWORD *v29 = 3;
    }
    v34 = &a1[v26];
    if (v34[2]) {
      int v35 = 2;
    }
    else {
      int v35 = 3;
    }
    v34[10] = v35;
    sub_1000036D8((uint64_t)a1, __stream);
  }
}

void sub_100003B18(uint64_t a1, unsigned int a2, int a3, FILE *__stream)
{
  uint64_t v4 = a1 + 4 * a2;
  unsigned int v7 = *(_DWORD *)(v4 + 72);
  BOOL v6 = (_DWORD *)(v4 + 72);
  unint64_t v5 = v7;
  if (!(v7 >> 15))
  {
    _DWORD *v6 = 0x8000;
    unsigned int v8 = (unsigned int *)(*(void *)(a1 + 1096) + 16 * v5);
    if ((*v8 & 0xF) != 0xE)
    {
      unint64_t v9 = v5 >> 12;
      unsigned int *v8 = *v8 & 0xFF00000F | (16 * ((((a3 << 8) - 16 * v8[2]) >> 4) & 0xFFFFF));
      uint64_t v10 = a1 + 4 * v9;
      int v13 = *(_DWORD *)(v10 + 8);
      int v11 = (_DWORD *)(v10 + 8);
      int v12 = v13;
      if (v13)
      {
        int v14 = v12 - 1;
        _DWORD *v11 = v14;
        if (!v14)
        {
          uint64_t v15 = a1 + 4 * v9;
          int v17 = *(_DWORD *)(v15 + 40);
          uint64_t v16 = (_DWORD *)(v15 + 40);
          if (v17 == 2)
          {
            *uint64_t v16 = 3;
            sub_1000036D8(a1, __stream);
          }
        }
      }
    }
  }
}

void sub_10000439C(char a1, int a2)
{
  if (a2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    sub_10000466C(v3, 0);
  }
  else
  {
    xpc_object_t v3 = 0;
  }
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10000497C;
  v4[3] = &unk_100090880;
  char v5 = a1;
  SafeXpcActivityRegister("com.apple.nand.aspcarry_iolog", v3, (void *)qword_1000C8868, v4);
}

int main(int argc, const char **argv, const char **envp)
{
  unsetenv("TMPDIR");
  _set_user_dir_suffix();
  _CFPreferencesSetBackupDisabled();
  CFRelease(@"com.apple.ASPCarryLog");
  os_log_t v4 = os_log_create("com.apple.nand.aspcarry", "main");
  char v5 = (void *)oslog;
  oslog = (uint64_t)v4;

  BOOL v6 = oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ASPCarryLog main start", v13, 2u);
  }
  dispatch_queue_t v7 = dispatch_queue_create("com.apple.nand.aspcarry_xpc_activity_serial_q", 0);
  unsigned int v8 = (void *)qword_1000C8868;
  qword_1000C8868 = (uint64_t)v7;

  dispatch_queue_t v9 = dispatch_queue_create("com.apple.nand.aspcarry_xpc_activity_non_nand_serial_q", 0);
  uint64_t v10 = (void *)qword_1000C8870;
  qword_1000C8870 = (uint64_t)v9;

  if ((os_variant_is_darwinos() & 1) == 0 && ASPCarryLog_isDiagnosticPipelineSupported()) {
    id v11 = getDeviceSerialNumber();
  }
  sub_1000045A8();
  checkInNandTelemetry_nandActivities((void *)qword_1000C8868);
  checkInNandTelemetry_nonNandActivities(qword_1000C8870);
  dispatch_main();
}

void sub_1000045A8()
{
  +[Tasking startDpTaskingMonitorOnDispatchQ:qword_1000C8868 andWorkDir:@"/var/log/iolog_unsent"];
  SafeXpcActivityRegister("com.apple.nand.aspcarry_boot", 0, (void *)qword_1000C8868, &stru_1000908C0);
  if ((os_variant_is_darwinos() & 1) == 0 && ASPCarryLog_isDiagnosticPipelineSupported())
  {
    SafeXpcActivityRegister("com.apple.nand.aspcarry_tasking", 0, (void *)qword_1000C8868, &stru_1000908E0);
    xpc_object_t v1 = objc_alloc_init(StateAccess);
    char v2 = checkInternalBuild(v1);
    sub_10000439C(v2, 0);
  }
}

void sub_10000466C(void *a1, int a2)
{
  id v3 = a1;
  long long v14 = 0u;
  long long v15 = 0u;
  os_log_t v4 = objc_alloc_init(StateAccess);
  char v5 = @"extract_upload";
  if (a2) {
    char v5 = @"tasking";
  }
  BOOL v6 = v5;
  BYTE8(v15) = 1;
  if (checkInternalBuild(0))
  {
    dispatch_queue_t v7 = [(StateAccess *)v4 getValueForKey:@"custom_xpc_settings", 2, v14, v15 expectedType];
    unsigned int v8 = [v7 valueForKey:v6];

    if (v8)
    {
      dispatch_queue_t v9 = [v8 objectForKeyedSubscript:@"grace_period"];
      *(void *)&long long v14 = [v9 longLongValue];

      uint64_t v10 = [v8 objectForKeyedSubscript:@"delay"];
      *((void *)&v14 + 1) = [v10 longLongValue];

      id v11 = [v8 objectForKeyedSubscript:@"interval"];
      *(void *)&long long v15 = [v11 longLongValue];

      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
  int64_t v12 = XPC_ACTIVITY_INTERVAL_1_DAY;
  uint64_t v13 = 900;
  if (!a2)
  {
    uint64_t v13 = 600;
    int64_t v12 = 2 * XPC_ACTIVITY_INTERVAL_1_HOUR;
  }
  *(void *)&long long v14 = 600;
  *((void *)&v14 + 1) = v13;
  *(void *)&long long v15 = v12;
LABEL_10:

  ASPCarryLog_SetCriteria_RepeatingActivity(v3, (uint64_t)&v14);
}

void sub_10000486C(_Unwind_Exception *a1)
{
}

void sub_10000497C(uint64_t a1, void *a2)
{
  id v10 = a2;
  os_log_t v4 = [ASPCarryLog_ExtractUpload alloc];
  char v5 = objc_alloc_init(ASPCarryLog_NANDDriver);
  BOOL v6 = objc_alloc_init(ASPCarryLog_UploadDriver);
  dispatch_queue_t v7 = objc_alloc_init(StateAccess);
  unsigned int v8 = [(ASPCarryLog_ExtractUpload *)v4 initWithNandDriver:v5 UploadDriver:v6 StateManager:v7 workDirectory:@"/var/log/iolog_unsent" internalBuild:*(unsigned __int8 *)(a1 + 32)];

  dispatch_queue_t v9 = [[ASPCarryLog_XpcActivityMgr alloc] initWithXpcActivity:v10];
  [(ASPCarryLog_ExtractUpload *)v8 tryExtractUpload:v9];
}

void sub_100004A7C(int a1)
{
  if (a1)
  {
    id v1 = xpc_dictionary_create(0, 0, 0);
    sub_10000466C(v1, 1);
  }
  else
  {
    id v1 = 0;
  }
  SafeXpcActivityRegister("com.apple.nand.aspcarry_tasking", v1, (void *)qword_1000C8868, &stru_1000908E0);
}

void sub_100004AF4(id a1, OS_xpc_object *a2)
{
  char v2 = a2;
  if ((os_variant_is_darwinos() & 1) == 0 && ASPCarryLog_isDiagnosticPipelineSupported())
  {
    os_log_t v4 = [[Tasking alloc] initWithWorkDir:@"/var/log/iolog_unsent"];
    char v5 = objc_alloc_init(ASPCarryLog_NANDDriver);
    BOOL v6 = objc_alloc_init(ASPCarryLog_UploadDriver);
    [(Tasking *)v4 LoadTasking];
    dispatch_queue_t v7 = [ASPCarryMainState alloc];
    unsigned int v8 = objc_alloc_init(StateAccess);
    dispatch_queue_t v9 = [(ASPCarryLogStateMachine *)v7 initWithStateManager:v8 TaskingManager:v4 NANDDriver:v5 UploadDriver:v6 WorkDirectory:@"/var/log/iolog_unsent"];

    [(ASPCarryLogStateMachine *)v9 bootCheck];
    sub_100004A7C(1);
    id v10 = oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "ASPCarryLog daily xpc activity registered", v11, 2u);
    }
  }
}

void sub_100004C54(id a1, OS_xpc_object *a2)
{
  char v2 = a2;
  os_log_t v4 = [[Tasking alloc] initWithWorkDir:@"/var/log/iolog_unsent"];
  char v5 = objc_alloc_init(ASPCarryLog_UploadDriver);
  BOOL v6 = objc_alloc_init(ASPCarryLog_NANDDriver);
  dispatch_queue_t v7 = [[StatsMagezine alloc] initWithNandDriver:v6];
  [(Tasking *)v4 LoadTasking];
  unsigned int v8 = [ASPCarryMainState alloc];
  dispatch_queue_t v9 = objc_alloc_init(StateAccess);
  id v10 = [(ASPCarryLogStateMachine *)v8 initWithStateManager:v9 TaskingManager:v4 NANDDriver:v6 UploadDriver:v5 WorkDirectory:@"/var/log/iolog_unsent"];

  [(ASPCarryLogStateMachine *)v10 dailyCheckWithStatsProvider:v7];
  id v11 = oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "ASPCarryLog daily xpc_activity done", v12, 2u);
  }
}

NSString *uploadInfoKeyFromTaskingId(uint64_t a1)
{
  return +[NSString stringWithFormat:@"%@_%@", @"aspcarry_uploadinfo", a1];
}

void sub_100006F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,long long buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v47 = objc_begin_catch(exception_object);
      v48 = (id)oslog;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        id v49 = [v47 name];
        id v50 = [v49 UTF8String];
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v50;
        _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "ERROR: compression failed with err %s.\n", (uint8_t *)&buf, 0xCu);
      }
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x100006D78);
  }
  _Unwind_Resume(exception_object);
}

void sub_100008830(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

id DateTimeToStr(void *a1)
{
  id v1 = a1;
  id v3 = objc_alloc_init((Class)NSDateFormatter);
  [v3 setDateFormat:@"yyyyMMddHHmmss"];
  id v4 = [objc_alloc((Class)NSLocale) initWithLocaleIdentifier:@"en_US_POSIX"];
  [v3 setLocale:v4];

  char v5 = +[NSTimeZone timeZoneWithName:@"UTC"];
  [v3 setTimeZone:v5];

  BOOL v6 = [v3 stringFromDate:v1];

  return v6;
}

id currentDateTimeStr()
{
  v0 = +[NSDate date];
  id v1 = DateTimeToStr(v0);

  return v1;
}

id StringToDateTime(void *a1)
{
  id v1 = a1;
  id v3 = objc_alloc_init((Class)NSDateFormatter);
  id v4 = v3;
  if (v1)
  {
    [v3 setDateFormat:@"yyyyMMddHHmmss"];
    id v5 = [objc_alloc((Class)NSLocale) initWithLocaleIdentifier:@"en_US_POSIX"];
    [v4 setLocale:v5];

    BOOL v6 = +[NSTimeZone timeZoneWithName:@"UTC"];
    [v4 setTimeZone:v6];

    dispatch_queue_t v7 = [v4 dateFromString:v1];
  }
  else
  {
    dispatch_queue_t v7 = 0;
  }

  return v7;
}

void sub_100008B7C(_Unwind_Exception *a1)
{
}

BOOL diskFreeSpaceBelowLimit(unint64_t a1)
{
  char v2 = (void *)MGCopyAnswer();
  id v3 = v2;
  if (v2)
  {
    id v4 = [v2 objectForKeyedSubscript:kMGQDiskUsageTotalDataAvailable];
    id v5 = [v4 unsignedLongLongValue];
  }
  else
  {
    id v5 = 0;
  }

  return (unint64_t)v5 < a1;
}

id getDeviceSerialNumber()
{
  if (qword_1000C8880 != -1) {
    dispatch_once(&qword_1000C8880, &stru_100090920);
  }
  v0 = (void *)qword_1000C8878;

  return v0;
}

void sub_100008C68(id a1)
{
  uint64_t v1 = MGGetStringAnswer();
  if (v1)
  {
    char v2 = (const void *)v1;
    id v3 = [objc_alloc((Class)NSString) initWithString:v1];
    id v4 = (void *)qword_1000C8878;
    qword_1000C8878 = (uint64_t)v3;

    CFRelease(v2);
  }
}

uint64_t ASPCarryLog_UploadFileToDP(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  if (!&_DRSubmitLog)
  {
    int v17 = oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
      sub_100045DF0(v17);
    }
LABEL_8:
    uint64_t v20 = 0;
    goto LABEL_9;
  }
  unsigned int v18 = +[NSFileManager defaultManager];
  v27[0] = NSFilePosixPermissions;
  v27[1] = NSFileOwnerAccountName;
  v28[0] = &off_1000B0598;
  v28[1] = @"mobile";
  v27[2] = NSFileGroupOwnerAccountName;
  v28[2] = @"mobile";
  uint64_t v19 = +[NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:3];
  [v18 setAttributes:v19 ofItemAtPath:v11 error:0];

  uint64_t v20 = 1;
  DRSubmitLog();
  id v21 = 0;
  if (v21)
  {
    unint64_t v22 = v21;
    id v23 = [v21 localizedDescription];
    id v24 = [v23 UTF8String];

    unsigned int v25 = oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
      sub_100045E34((uint64_t)v24, v25);
    }

    goto LABEL_8;
  }
LABEL_9:

  return v20;
}

void disableFileBackUp(void *a1)
{
  id v1 = a1;
  char v2 = +[NSURL fileURLWithPath:v1];
  id v9 = 0;
  unsigned __int8 v3 = [v2 setResourceValue:&__kCFBooleanTrue forKey:NSURLIsExcludedFromBackupKey error:&v9];
  id v4 = v9;
  id v5 = (void *)oslog;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = v1;
      dispatch_queue_t v7 = v5;
      id v8 = [v6 UTF8String];
      *(_DWORD *)buf = 136315138;
      id v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Excluded %s from backup.", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR))
  {
    sub_100045EAC(v1, v5);
  }
}

void ASPCarryLog_SetCriteria_RepeatingActivity(void *a1, uint64_t a2)
{
  int64_t v3 = *(void *)a2;
  xpc_object_t xdict = a1;
  xpc_dictionary_set_int64(xdict, XPC_ACTIVITY_GRACE_PERIOD, v3);
  xpc_dictionary_set_int64(xdict, XPC_ACTIVITY_DELAY, *(void *)(a2 + 8));
  xpc_dictionary_set_string(xdict, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  xpc_dictionary_set_BOOL(xdict, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_int64(xdict, XPC_ACTIVITY_INTERVAL, *(void *)(a2 + 16));
  xpc_dictionary_set_BOOL(xdict, XPC_ACTIVITY_ALLOW_BATTERY, *(unsigned char *)(a2 + 24));
}

uint64_t CompressFiles()
{
  v0 = (void *)__chkstk_darwin();
  char v2 = v1;
  id v4 = v3;
  id v26 = v0;
  id v5 = v4;
  uint64_t v36 = 0;
  memset(&v35, 0, sizeof(v35));
  v28 = +[NSFileManager defaultManager];
  id v27 = v5;
  int v6 = open((const char *)[v27 fileSystemRepresentation], 514, 438);
  archive_write_new();
  if (archive_write_add_filter_none() || archive_write_set_format_pax())
  {
    CFStringRef v24 = @"SetZipError";
    goto LABEL_37;
  }
  if (v2)
  {
LABEL_4:
    if (!archive_write_open_fd())
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      obint j = v26;
      id v7 = [obj countByEnumeratingWithState:&v31 objects:v37 count:16];
      if (v7)
      {
        id v8 = 0;
        uint64_t v30 = *(void *)v32;
        CFStringRef v9 = @"InputFileError";
        do
        {
          for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v32 != v30) {
              objc_enumerationMutation(obj);
            }
            id v11 = *(id *)(*((void *)&v31 + 1) + 8 * i);

            id v12 = v11;
            if (stat((const char *)[v12 fileSystemRepresentation], &v35))
            {
              id v23 = +[NSException exceptionWithName:@"InputFileStatError" reason:0 userInfo:0];
              objc_exception_throw(v23);
            }
            archive_entry_new();
            archive_entry_copy_stat();
            id v13 = [v12 lastPathComponent];
            [v13 UTF8String];
            archive_entry_set_pathname();

            archive_entry_set_filetype();
            archive_entry_set_perm();
            if (archive_write_header())
            {
              id v22 = +[NSException exceptionWithName:@"ArchiveWriteHeaderError" reason:0 userInfo:0];
              objc_exception_throw(v22);
            }
            id v8 = v12;
            int v14 = open((const char *)[v8 fileSystemRepresentation], 0);
            int v15 = v14;
            if (v14 < 0)
            {
LABEL_32:
              id v21 = +[NSException exceptionWithName:v9 reason:0 userInfo:0];
              objc_exception_throw(v21);
            }
            for (int j = read(v14, v38, 0x2000uLL); j >= 1; int j = read(v15, v38, 0x2000uLL))
            {
              if (j != archive_write_data())
              {
                CFStringRef v9 = @"ArchiveWriteError";
                goto LABEL_32;
              }
            }
            close(v15);
            archive_entry_free();
          }
          id v7 = [obj countByEnumeratingWithState:&v31 objects:v37 count:16];
        }
        while (v7);
      }
      int v17 = 0;
      uint64_t v18 = 1;
      archive_write_close();
      goto LABEL_28;
    }
    CFStringRef v24 = @"OpenDestFileError";
LABEL_37:
    id v25 = +[NSException exceptionWithName:v24 reason:0 userInfo:0];
    objc_exception_throw(v25);
  }
  archive_read_new();
  archive_read_support_filter_all();
  archive_read_support_format_tar();
  if (archive_read_open_fd())
  {
    int v17 = 1;
    goto LABEL_27;
  }
  do
  {
    if (archive_read_next_header())
    {
      off_t header_position = archive_read_header_position();
      archive_read_free();
      lseek(v6, header_position, 0);
      goto LABEL_4;
    }
  }
  while (!archive_filter_code());
  archive_read_free();
  close(v6);
  int v17 = 1;
LABEL_27:
  uint64_t v18 = 1;
LABEL_28:
  archive_write_free();
  if ((v17 | 2) != 2) {
    uint64_t v18 = 0;
  }

  return v18;
}

void sub_100009714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint8_t buf)
{
}

id GetiCloudPlanSizeGB()
{
  if (objc_opt_class() && objc_opt_class())
  {
    v0 = +[ACAccountStore defaultStore];
    char v1 = [v0 aa_primaryAppleAccount];
    if (v1)
    {
      char v2 = v1;
      int64_t v3 = [v1 aa_lastKnownQuota];
      id v4 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (unint64_t)[v3 unsignedLongLongValue] >> 30);
    }
    else
    {
      id v4 = 0;
    }
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void SafeXpcActivityRegister(const char *a1, void *a2, void *a3, void *a4)
{
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100009A48;
  handler[3] = &unk_100090970;
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v7 = v13;
  id v8 = v12;
  id v9 = v11;
  xpc_activity_register(a1, XPC_ACTIVITY_CHECK_IN, handler);
}

void sub_100009A48(uint64_t a1, void *a2)
{
  int64_t v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEBUG)) {
      sub_100046124();
    }
    if (xpc_activity_should_defer(v3))
    {
      if (!xpc_activity_set_state(v3, 3) && os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
        sub_10004604C();
      }
    }
    else if (xpc_activity_set_state(v3, 4))
    {
      id v9 = *(NSObject **)(a1 + 40);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100009C50;
      v10[3] = &unk_100090948;
      id v11 = v3;
      id v12 = *(id *)(a1 + 48);
      dispatch_async(v9, v10);
    }
    else if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR))
    {
      sub_1000460B8();
    }
  }
  else
  {
    uint64_t v5 = state;
    if (state)
    {
      id v8 = oslog;
      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
        sub_100045F50((uint64_t)v3, v5, v8);
      }
    }
    else
    {
      if (*(void *)(a1 + 32))
      {
        xpc_object_t v6 = xpc_activity_copy_criteria(v3);
        id v7 = v6;
        if (!v6 || !xpc_equal(v6, *(xpc_object_t *)(a1 + 32))) {
          xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 32));
        }
      }
      else
      {
        id v7 = 0;
      }
      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEBUG)) {
        sub_100045FD8();
      }
    }
  }
}

void sub_100009C50(uint64_t a1)
{
  char v2 = (uint64_t *)(a1 + 32);
  if (!xpc_activity_should_defer(*(xpc_activity_t *)(a1 + 32)))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    uint64_t v5 = (_xpc_activity_s *)*(id *)(a1 + 32);
    if (xpc_activity_get_state(v5) == 4)
    {
      BOOL v6 = xpc_activity_set_state(v5, 5);
      id v7 = oslog;
      if (!v6)
      {
        if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
          sub_10004620C();
        }
        goto LABEL_14;
      }
      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 134217984;
        id v10 = v5;
        id v8 = "XPC activity %p finished successfully.";
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v9, 0xCu);
      }
    }
    else
    {
      id v7 = oslog;
      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 134217984;
        id v10 = v5;
        id v8 = "XPC activity %p not in CONTINUE state";
        goto LABEL_11;
      }
    }
LABEL_14:

    return;
  }
  if (!xpc_activity_set_state((xpc_activity_t)*v2, 3))
  {
    int64_t v3 = oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
      sub_100046198(v2, v3, v4);
    }
  }
}

void sub_10000A108(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t sub_10000A120()
{
  return v0;
}

void sub_10000A7A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

BOOL ASPCarryLog_isDiagnosticPipelineSupported()
{
  return &_DRShouldEnableLogGathering != 0;
}

void NSDictFromStatsBuffer(uint64_t *a1, unsigned int a2, void *a3)
{
  id v15 = a3;
  if (a2 >> 3)
  {
    uint64_t v5 = a1;
    unint64_t v6 = (unint64_t)&a1[a2 >> 3];
    do
    {
      unint64_t v8 = *v5++;
      uint64_t v7 = v8;
      unint64_t v9 = HIDWORD(v8);
      if (HIDWORD(v8))
      {
        if (v9 == 1)
        {
          uint64_t v5 = a1 + 2;
          id v10 = +[NSNumber numberWithUnsignedLongLong:a1[1]];
          id v11 = +[NSNumber numberWithUnsignedInt:v7];
          [v15 setObject:v10 forKey:v11];
        }
        else
        {
          id v10 = objc_alloc_init((Class)NSMutableArray);
          do
          {
            uint64_t v12 = *v5++;
            id v13 = +[NSNumber numberWithUnsignedLongLong:v12];
            [v10 addObject:v13];

            LODWORD(v9) = v9 - 1;
          }
          while (v9);
          id v11 = +[NSArray arrayWithArray:v10];
          int v14 = +[NSNumber numberWithUnsignedInt:v7];
          [v15 setObject:v11 forKey:v14];
        }
      }
      a1 = v5;
    }
    while ((unint64_t)v5 < v6);
  }
}

id sub_10000C56C(uint64_t a1)
{
  char v2 = oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sigterm was received, Stopping sweeps.", v4, 2u);
  }
  return [*(id *)(a1 + 32) setWasSigtermReceived:1];
}

void sub_10000C9E0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t validateCurTaskingInfo(void *a1)
{
  id v1 = a1;
  char v2 = [v1 objectForKeyedSubscript:@"dsreply_pending"];
  int64_t v3 = [v1 objectForKeyedSubscript:@"endtime"];
  if (!v1) {
    goto LABEL_17;
  }
  uint64_t v4 = [v1 objectForKeyedSubscript:@"id"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v5 = [v1 objectForKeyedSubscript:@"device_id"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_10:

LABEL_11:
    goto LABEL_12;
  }
  unint64_t v6 = [v1 objectForKeyedSubscript:@"upload_size_limit_bytes"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    goto LABEL_10;
  }
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    if ([v2 isEqualToString:@"yes"])
    {
      if (!v3)
      {
LABEL_17:
        uint64_t v9 = 1;
        goto LABEL_18;
      }
    }
    else if ([v2 isEqualToString:@"no"])
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        goto LABEL_17;
      }
    }
  }
LABEL_12:
  unint64_t v8 = (void *)oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
    sub_100046A74(v8, (uint64_t)v1);
  }
  uint64_t v9 = 0;
LABEL_18:

  return v9;
}

uint64_t checkInternalBuild(void *a1)
{
  id v1 = a1;
  uint64_t has_internal_content = os_variant_has_internal_content();
  uint64_t v3 = has_internal_content;
  if (v1 && has_internal_content)
  {
    uint64_t v4 = [v1 getValueForKey:@"test_force_customer_build" expectedType:0];
    uint64_t v3 = [v4 isEqualToString:@"yes"] ^ 1;
  }
  return v3;
}

void setTaskingInfoToLegacyUIDomain(void *a1, void *a2, void *a3, uint64_t a4, void *a5, int a6)
{
  if (a6)
  {
    id v10 = a5;
    id v11 = a3;
    id v12 = a2;
    id v13 = a1;
    int v14 = +[NSNumber numberWithUnsignedLongLong:a4];
    id v15 = +[NSString stringWithFormat:@"Tasking id: %@\nEnd time: %@\nTotal uploaded bytes: %@\nLast upload file: %@\n", v12, v11, v14, v10];

    [v13 setValue:v15 forKey:@"aspcarrylog_tasking_info" inDomain:@"/var/mobile/Library/Preferences/com.apple.nandCarryLogs.plist"];
  }
}

void sub_100010014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100010044(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100010054(uint64_t a1)
{
}

void sub_10001005C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:v3];

  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  unint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
}

void sub_100010EB4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100011734(uint64_t a1)
{
  id v2 = objc_alloc((Class)DRConfigMonitor);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000117FC;
  v6[3] = &unk_100090A88;
  uint64_t v3 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = [v2 initWithTeamID:@"com.apple.coreos.nand" targetQueue:v3 configProcessingBlock:v6];
  uint64_t v5 = (void *)qword_1000C88D8;
  qword_1000C88D8 = (uint64_t)v4;

  [(id)qword_1000C88D8 startMonitoring];
}

void sub_1000117FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) stringByAppendingPathComponent:@"dp_tasking_payload.plist"];
  uint64_t v8 = +[NSURL fileURLWithPath:v7];
  uint64_t v9 = +[NSFileManager defaultManager];
  if (v6)
  {
    uint64_t v10 = (void *)oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
      sub_100046F58(v10, v6);
    }
    uint64_t v11 = 0;
    if (!v5) {
      goto LABEL_28;
    }
    goto LABEL_20;
  }
  if (!v5)
  {
    uint64_t v11 = 0;
    goto LABEL_27;
  }
  id v6 = [v5 payloadDictionaryRepresentation];

  if (!v6)
  {
    uint64_t v11 = 0;
    goto LABEL_20;
  }
  uint64_t v12 = (void *)oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = v7;
    uint64_t v14 = v12;
    *(_DWORD *)buf = 136315138;
    id v32 = [v13 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Got DP tasking payload. Dumping it to file %s", buf, 0xCu);
  }
  if ([v9 fileExistsAtPath:v7])
  {
    id v15 = oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Previous payload exists. Deleting...", buf, 2u);
    }
    [v9 removeItemAtPath:v7 error:0];
  }
  if ([v9 fileExistsAtPath:*(void *)(a1 + 32)])
  {
    id v6 = 0;
LABEL_19:
    v29[0] = @"payload";
    uint64_t v18 = [v5 payloadDictionaryRepresentation];
    v29[1] = @"expire_time";
    v30[0] = v18;
    uint64_t v19 = +[NSDate dateWithTimeIntervalSinceNow:432000.0];
    v30[1] = v19;
    uint64_t v11 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:2];

    [v11 writeToURL:v8 error:0];
LABEL_20:
    uint64_t v20 = [v5 configUUID];

    if (!v20) {
      goto LABEL_28;
    }
    id v21 = oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Marking DP tasking payload complete.", buf, 2u);
    }
    id v22 = (void *)qword_1000C88D8;
    id v23 = [v5 configUUID];
    id v27 = v6;
    [v22 markCompletedConfigUUID:v23 errorOut:&v27];
    id v24 = v27;

    if (v24)
    {
      id v25 = (void *)oslog;
      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
        sub_100046E74(v25, v24);
      }
      id v6 = v24;
      goto LABEL_28;
    }
LABEL_27:
    id v6 = 0;
    goto LABEL_28;
  }
  uint64_t v16 = *(void *)(a1 + 32);
  id v28 = 0;
  unsigned __int8 v17 = [v9 createDirectoryAtPath:v16 withIntermediateDirectories:0 attributes:0 error:&v28];
  id v6 = v28;
  if (v17) {
    goto LABEL_19;
  }
  id v26 = oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
    sub_100046F14(v26);
  }
  uint64_t v11 = 0;
LABEL_28:
}

void sub_100012178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v9 = objc_begin_catch(exception_object);
      uint64_t v10 = (id)oslog;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = [v9 name];
        id v12 = [v11 UTF8String];
        LODWORD(a9) = 136315138;
        *(void *)((char *)&a9 + 4) = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "ERROR: get tasking duration error %s", (uint8_t *)&a9, 0xCu);
      }
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    objc_end_catch();
    JUMPOUT(0x100012144);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000122D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v9 = objc_begin_catch(exception_object);
      uint64_t v10 = (id)oslog;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = [v9 name];
        id v12 = [v11 UTF8String];
        LODWORD(a9) = 136315138;
        *(void *)((char *)&a9 + 4) = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "ERROR: get tasking size limit error %s", (uint8_t *)&a9, 0xCu);
      }
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    objc_end_catch();
    JUMPOUT(0x1000122A0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001351C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    id v7 = 0;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      id v9 = 0;
      uint64_t v10 = v7;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v4);
        }
        id v7 = *(id *)(*((void *)&v13 + 1) + 8 * (void)v9);

        if (!objc_msgSend(*(id *)(a1 + 40), "_elementPassesWhiteListCheck:whiteListRef:forCriteriaDict:", v7, *(void *)(a1 + 48), v3, (void)v13))
        {
          uint64_t v11 = 0;
          goto LABEL_12;
        }
        id v9 = (char *)v9 + 1;
        uint64_t v10 = v7;
      }
      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  id v7 = 0;
  uint64_t v11 = 1;
LABEL_12:

  return v11;
}

uint64_t sub_100013904(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    id v7 = 0;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      id v9 = 0;
      uint64_t v10 = v7;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v4);
        }
        id v7 = *(id *)(*((void *)&v13 + 1) + 8 * (void)v9);

        if (!objc_msgSend(*(id *)(a1 + 40), "_elementExistsInStats:statsProvider:forCriteriaDict:", v7, *(void *)(a1 + 48), v3, (void)v13))
        {
          uint64_t v11 = 0;
          goto LABEL_12;
        }
        id v9 = (char *)v9 + 1;
        uint64_t v10 = v7;
      }
      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  id v7 = 0;
  uint64_t v11 = 1;
LABEL_12:

  return v11;
}

void sub_100013BF8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v18 = objc_begin_catch(a1);
      uint64_t v19 = (id)oslog;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        id v20 = [v18 name];
        id v21 = [v20 UTF8String];
        id v24 = [v17 myTaskingCriteria];
        id v22 = +[NSString stringWithFormat:@"%@"];
        id v23 = [v22 UTF8String];
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = v21;
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v23;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "ERROR: tasking criteria evaluation failed for %s. Criteria array: \n%s", (uint8_t *)&buf, 0x16u);
      }
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(a1);
      objc_end_catch();
    }
    JUMPOUT(0x100013B28);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100013D34(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) getCriteriaValueUsingStatsProvider:*(void *)(a1 + 40) forCriteriaDict:v3];
  float v5 = v4;
  id v6 = [v3 objectForKeyedSubscript:@"START_RANGE"];

  if (v6)
  {
    [*(id *)(a1 + 32) _getElementValue:*(void *)(a1 + 40) forElementName:@"START_RANGE" criteriaDict:v3];
    uint64_t v8 = v5 >= v7;
  }
  else
  {
    uint64_t v8 = 1;
  }
  id v9 = [v3 objectForKeyedSubscript:@"END_RANGE"];

  if (v9)
  {
    [*(id *)(a1 + 32) _getElementValue:*(void *)(a1 + 40) forElementName:@"END_RANGE" criteriaDict:v3];
    if (v5 <= v10) {
      uint64_t v8 = v8;
    }
    else {
      uint64_t v8 = 0;
    }
  }
  uint64_t v11 = (void *)oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = v11;
    id v13 = [v3 descriptionInStringsFileFormat];
    int v15 = 136315394;
    id v16 = [v13 UTF8String];
    __int16 v17 = 2048;
    double v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "criteriaDict %s value %.2f", (uint8_t *)&v15, 0x16u);
  }
  return v8;
}

void sub_100013EE0(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  bzero(__str, 0x400uLL);
  if (!qword_1000C8910)
  {
    qword_1000C8910 = (uint64_t)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
    vsnprintf(__str, 0x400uLL, a1, &a9);
    snprintf((char *)qword_1000C8910, 0x400uLL, "%s", __str);
  }
}

const char *sub_100013FB0()
{
  if (qword_1000C8910) {
    return (const char *)qword_1000C8910;
  }
  else {
    return "NA";
  }
}

uint64_t sub_100013FCC(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 36) = -1;
  if (a3 < 8) {
    return 0;
  }
  unsigned int v6 = a3 >> 3;
  while (2)
  {
    unint64_t v9 = *a2;
    uint64_t v8 = a2 + 1;
    int v7 = v9;
    unint64_t v10 = HIDWORD(v9);
    unsigned int v11 = v6 - 1;
    if (v9 <= 0x30000000 && v11 >= v10)
    {
      switch(v7)
      {
        case 1:
          uint64_t v13 = *v8;
          long long v14 = "version";
          goto LABEL_77;
        case 2:
          uint64_t v13 = *v8;
          long long v14 = "hostWriteXacts";
          goto LABEL_77;
        case 3:
          uint64_t v13 = *v8;
          long long v14 = "hostReadXacts";
          goto LABEL_77;
        case 4:
          uint64_t v13 = *v8;
          *(void *)(a1 + 72) = *v8;
          long long v14 = "hostWrites";
          goto LABEL_77;
        case 5:
          uint64_t v13 = *v8;
          long long v14 = "hostWritesDyn";
          goto LABEL_77;
        case 6:
          uint64_t v13 = *v8;
          long long v14 = "hostWritesStatic";
          goto LABEL_77;
        case 7:
          uint64_t v13 = *v8;
          *(void *)(a1 + 64) = *v8;
          long long v14 = "hostReads";
          goto LABEL_77;
        case 8:
          uint64_t v13 = *v8;
          long long v14 = "validLbas";
          goto LABEL_77;
        case 9:
          uint64_t v13 = *v8;
          long long v14 = "shutdowns";
          goto LABEL_77;
        case 10:
          uint64_t v13 = *v8;
          long long v14 = "boots";
          goto LABEL_77;
        case 11:
          uint64_t v13 = *v8;
          long long v14 = "uncleanBoots";
          goto LABEL_77;
        case 12:
          uint64_t v13 = *v8;
          *(void *)(a1 + 144) = *v8;
          long long v14 = "IND_pool_free";
          goto LABEL_77;
        case 13:
          uint64_t v13 = *v8;
          *(void *)(a1 + 152) = *v8;
          long long v14 = "IND_pool_count";
          goto LABEL_77;
        case 14:
          int v15 = "hostWriteLogHisto";
          uint64_t v16 = a1;
          int v17 = 14;
          goto LABEL_44;
        case 15:
          int v15 = "hostReadLogHisto";
          uint64_t v16 = a1;
          int v17 = 15;
LABEL_44:
          double v18 = v8;
          unsigned int v19 = 10;
          goto LABEL_51;
        case 16:
          uint64_t v13 = *v8;
          long long v14 = "gcWrites";
          goto LABEL_77;
        case 17:
          uint64_t v13 = *v8;
          *(void *)(a1 + 88) = *v8;
          long long v14 = "wearLevMoves";
          goto LABEL_77;
        case 18:
          uint64_t v13 = *v8;
          *(void *)(a1 + 104) = *v8;
          long long v14 = "nandWrites";
          goto LABEL_77;
        case 19:
          uint64_t v13 = *v8;
          *(void *)(a1 + 96) = *v8;
          long long v14 = "nandReads";
          goto LABEL_77;
        case 20:
          uint64_t v13 = *v8;
          *(void *)(a1 + 112) = *v8;
          long long v14 = "bandErases";
          goto LABEL_77;
        case 22:
          uint64_t v13 = *v8;
          long long v14 = "numPfail";
          goto LABEL_77;
        case 23:
          uint64_t v13 = *v8;
          long long v14 = "numEfail";
          goto LABEL_77;
        case 24:
          uint64_t v13 = *v8;
          long long v14 = "numPerformanceRefreshes";
          goto LABEL_77;
        case 27:
          uint64_t v13 = *v8;
          long long v14 = "hostWritesMeta";
          goto LABEL_77;
        case 28:
          uint64_t v13 = *v8;
          *(void *)(a1 + 168) = *v8;
          long long v14 = "numSleepOps";
          goto LABEL_77;
        case 30:
          uint64_t v13 = *v8;
          long long v14 = "cntTimeWentBackWardOnBoot";
          goto LABEL_77;
        case 31:
          uint64_t v13 = *v8;
          long long v14 = "cntTimeWentBackWard";
          goto LABEL_77;
        case 34:
          uint64_t v13 = *v8;
          long long v14 = "powerOnHours";
          goto LABEL_77;
        case 36:
          uint64_t v13 = *v8;
          long long v14 = "smartCritWarnings";
          goto LABEL_77;
        case 37:
          uint64_t v13 = *v8;
          long long v14 = "numFlushes";
          goto LABEL_77;
        case 38:
          uint64_t v13 = *v8;
          long long v14 = "numUnmap";
          goto LABEL_77;
        case 39:
          uint64_t v13 = *v8;
          long long v14 = "numUnmapSec";
          goto LABEL_77;
        case 41:
          uint64_t v13 = *v8;
          long long v14 = "clogProgram";
          goto LABEL_77;
        case 42:
          uint64_t v13 = *v8;
          long long v14 = "clogPFail";
          goto LABEL_77;
        case 43:
          uint64_t v13 = *v8;
          long long v14 = "clogRead";
          goto LABEL_77;
        case 44:
          uint64_t v13 = *v8;
          long long v14 = "clogRFail";
          goto LABEL_77;
        case 45:
          uint64_t v13 = *v8;
          *(void *)(a1 + 176) = *v8;
          long long v14 = "maxHighEnduranceBlockErases";
          goto LABEL_77;
        case 46:
          uint64_t v13 = *v8;
          long long v14 = "numFactoryBad";
          goto LABEL_77;
        case 47:
          uint64_t v13 = *v8;
          long long v14 = "numGrownBad";
          goto LABEL_77;
        case 48:
          uint64_t v13 = *v8;
          *(void *)(a1 + 80) = *v8;
          long long v14 = "numFreeVirtualBlocks";
          goto LABEL_77;
        case 49:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 56) = *v8;
          long long v14 = "bytesPerPage";
          goto LABEL_77;
        case 50:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 52) = *v8;
          long long v14 = "pagesPerVirtualBlock";
          goto LABEL_77;
        case 51:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 48) = *v8;
          long long v14 = "blocksPerVirtualBlock";
          goto LABEL_77;
        case 52:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 44) = *v8;
          long long v14 = "numVirtualBlocks";
          goto LABEL_77;
        case 53:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 32) = *v8;
          long long v14 = "exportVersion";
          goto LABEL_77;
        case 54:
          int v15 = "ECBins";
          uint64_t v16 = a1;
          int v17 = 54;
          goto LABEL_50;
        case 55:
          int v15 = "RCBins";
          uint64_t v16 = a1;
          int v17 = 55;
LABEL_50:
          double v18 = v8;
          unsigned int v19 = 100;
          goto LABEL_51;
        case 56:
          uint64_t v13 = *v8;
          *(void *)(a1 + 160) = *v8;
          long long v14 = "utilFormatTime";
          goto LABEL_77;
        case 57:
          uint64_t v13 = *v8;
          long long v14 = "calendarTime";
          goto LABEL_77;
        case 58:
          uint64_t v13 = *v8;
          long long v14 = "wallTime";
          goto LABEL_77;
        case 59:
          uint64_t v13 = *v8;
          long long v14 = "cmdq_flush_us";
          goto LABEL_77;
        case 60:
          uint64_t v13 = *v8;
          long long v14 = "cmdq_unmap_us";
          goto LABEL_77;
        case 61:
          uint64_t v13 = *v8;
          long long v14 = "cmdq_pri0_r_us";
          goto LABEL_77;
        case 62:
          uint64_t v13 = *v8;
          long long v14 = "cmdq_pri0_w_us";
          goto LABEL_77;
        case 63:
          uint64_t v13 = *v8;
          long long v14 = "cmdq_pri1_r_us";
          goto LABEL_77;
        case 64:
          uint64_t v13 = *v8;
          long long v14 = "cmdq_pri1_w_us";
          goto LABEL_77;
        case 65:
          uint64_t v13 = *v8;
          long long v14 = "cmdq_pri2_r_us";
          goto LABEL_77;
        case 66:
          uint64_t v13 = *v8;
          long long v14 = "cmdq_pri2_w_us";
          goto LABEL_77;
        case 67:
          uint64_t v13 = *v8;
          long long v14 = "cmdq_pri3_r_us";
          goto LABEL_77;
        case 68:
          uint64_t v13 = *v8;
          long long v14 = "cmdq_pri3_w_us";
          goto LABEL_77;
        case 69:
          uint64_t v13 = *v8;
          long long v14 = "host_idle_ms";
          goto LABEL_77;
        case 70:
          uint64_t v13 = *v8;
          long long v14 = "cmd_hysteresis_window_us";
          goto LABEL_77;
        case 71:
          uint64_t v13 = *v8;
          long long v14 = "cmd_lowPriHoldoffDelay_us";
          goto LABEL_77;
        case 72:
          uint64_t v13 = *v8;
          long long v14 = "cmd_lowPriHoldoffEnabled";
LABEL_77:
          id v20 = (void *)a1;
          goto LABEL_78;
        default:
          switch(v7)
          {
            case 73:
              uint64_t v13 = *v8;
              long long v14 = "cmd_expedite_num_success";
              goto LABEL_77;
            case 75:
              uint64_t v13 = *v8;
              long long v14 = "cmd_expedite_num_failures";
              goto LABEL_77;
            case 76:
              uint64_t v13 = *v8;
              long long v14 = "num_trimerase";
              goto LABEL_77;
            case 77:
              uint64_t v13 = *v8;
              long long v14 = "staticSizeInMB";
              goto LABEL_77;
            case 80:
              uint64_t v13 = *v8;
              long long v14 = "slcInvalidations";
              goto LABEL_77;
            case 81:
              uint64_t v13 = *v8;
              long long v14 = "slcGCInvalidations";
              goto LABEL_77;
            case 82:
              uint64_t v13 = *v8;
              long long v14 = "hostSectorsDuringGCon";
              goto LABEL_77;
            case 83:
              uint64_t v13 = *v8;
              long long v14 = "highWaterMarkSLCUsed";
              goto LABEL_77;
            case 84:
              uint64_t v13 = *v8;
              long long v14 = "intermediateBandErases";
              goto LABEL_77;
            case 85:
              uint64_t v13 = *v8;
              long long v14 = "intermediatePartitionStart";
              goto LABEL_77;
            case 86:
              uint64_t v13 = *v8;
              long long v14 = "userPartitionStart";
              goto LABEL_77;
            case 87:
              uint64_t v13 = *v8;
              long long v14 = "iolog_lbas";
              goto LABEL_77;
            case 88:
              int v15 = "bandsAgeBins";
              uint64_t v16 = a1;
              int v17 = 88;
              goto LABEL_44;
            case 89:
              int v15 = "intermediateBandsAgeBins";
              uint64_t v16 = a1;
              int v17 = 89;
              goto LABEL_44;
            case 90:
              int v15 = "qosPerCmdQ";
              uint64_t v16 = a1;
              int v17 = 90;
              double v18 = v8;
              unsigned int v19 = 160;
              goto LABEL_51;
            case 91:
              int v15 = "maxQosPerCmdQ";
              uint64_t v16 = a1;
              int v17 = 91;
              goto LABEL_44;
            case 92:
              uint64_t v13 = *v8;
              long long v14 = "shutdownDuringGC";
              goto LABEL_77;
            case 93:
              int v15 = "numBandsRefreshedForAgePerTier";
              uint64_t v16 = a1;
              int v17 = 93;
LABEL_130:
              double v18 = v8;
              unsigned int v19 = 3;
              goto LABEL_51;
            case 94:
              int v15 = "bdrDeltaHot";
              uint64_t v16 = a1;
              int v17 = 94;
LABEL_93:
              double v18 = v8;
              unsigned int v19 = 20;
              goto LABEL_51;
            case 95:
              uint64_t v13 = *v8;
              long long v14 = "numRefreshOnClockLoss";
              goto LABEL_77;
            case 96:
              uint64_t v13 = *v8;
              long long v14 = "numRefreshOnErrNandRefreshRel";
              goto LABEL_77;
            case 97:
              uint64_t v13 = *v8;
              long long v14 = "numBGRefreshMoves";
              goto LABEL_77;
            case 98:
              uint64_t v13 = *v8;
              long long v14 = "numBGPaddingMoves";
              goto LABEL_77;
            case 99:
              uint64_t v13 = *v8;
              long long v14 = "hostWritesPhoto";
              goto LABEL_77;
            case 100:
              uint64_t v13 = *v8;
              long long v14 = "INDPooldFree";
              goto LABEL_77;
            case 101:
              uint64_t v13 = *v8;
              long long v14 = "INDContigCount";
              goto LABEL_77;
            case 102:
              uint64_t v13 = *v8;
              long long v14 = "INDValidContigCount";
              goto LABEL_77;
            case 103:
              uint64_t v13 = *v8;
              long long v14 = "INDMinContigSize";
              goto LABEL_77;
            case 104:
              uint64_t v13 = *v8;
              long long v14 = "INDMaxContigSize";
              goto LABEL_77;
            case 105:
              uint64_t v13 = *v8;
              long long v14 = "INDAveContigSize";
              goto LABEL_77;
            case 106:
              uint64_t v13 = *v8;
              long long v14 = "INDpoolSize";
              goto LABEL_77;
            case 107:
              uint64_t v13 = *v8;
              long long v14 = "pushSyncWrites";
              goto LABEL_77;
            case 109:
              uint64_t v13 = *v8;
              long long v14 = "cmd_rw_hysteresis_us";
              goto LABEL_77;
            case 110:
              uint64_t v13 = *v8;
              long long v14 = "photoFlowMode";
              goto LABEL_77;
            case 112:
              uint64_t v13 = *v8;
              long long v14 = "numBandsPaddedForAge";
              goto LABEL_77;
            case 113:
              int v15 = "bandsPerHostFlow";
              uint64_t v16 = a1;
              int v17 = 113;
              goto LABEL_144;
            case 114:
              int v15 = "bandsPerSpecialFlow";
              uint64_t v16 = a1;
              int v17 = 114;
              goto LABEL_102;
            case 115:
              int v15 = "secsPerHostFlow";
              uint64_t v16 = a1;
              int v17 = 115;
              goto LABEL_144;
            case 116:
              int v15 = "secsPerSpecialFlow";
              uint64_t v16 = a1;
              int v17 = 116;
              goto LABEL_102;
            case 118:
              int v15 = "overWritesPerHostFlow";
              uint64_t v16 = a1;
              int v17 = 118;
              goto LABEL_144;
            case 119:
              int v15 = "overWritesPerSpecialFlow";
              uint64_t v16 = a1;
              int v17 = 119;
              goto LABEL_102;
            case 120:
              int v15 = "padSectorsPerFlow";
              uint64_t v16 = a1;
              int v17 = 120;
              goto LABEL_44;
            case 121:
              int v15 = "padSizes";
              uint64_t v16 = a1;
              int v17 = 121;
              goto LABEL_144;
            case 122:
              int v15 = "unmapsPerHostFlow";
              uint64_t v16 = a1;
              int v17 = 122;
LABEL_144:
              double v18 = v8;
              unsigned int v19 = 4;
              goto LABEL_51;
            case 123:
              int v15 = "unmapsPerSpecialFlow";
              uint64_t v16 = a1;
              int v17 = 123;
LABEL_102:
              double v18 = v8;
              unsigned int v19 = 5;
              goto LABEL_51;
            case 124:
              int v15 = "coldestCycle";
              uint64_t v16 = a1;
              int v17 = 124;
              goto LABEL_123;
            case 125:
              int v15 = "hottestCycle";
              uint64_t v16 = a1;
              int v17 = 125;
LABEL_123:
              double v18 = v8;
              unsigned int v19 = 2;
              goto LABEL_51;
            case 126:
              uint64_t v13 = *v8;
              long long v14 = "gcLonlyWrites";
              goto LABEL_77;
            case 127:
              uint64_t v13 = *v8;
              long long v14 = "gcPLWrites";
              goto LABEL_77;
            case 129:
              uint64_t v13 = *v8;
              long long v14 = "pagesPerVirtualBlockSlc";
              goto LABEL_77;
            case 130:
              uint64_t v13 = *v8;
              long long v14 = "bdrPadding";
              goto LABEL_77;
            case 131:
              int v15 = "errInjCounters";
              uint64_t v16 = a1;
              int v17 = 131;
LABEL_149:
              double v18 = v8;
              unsigned int v19 = 8;
              goto LABEL_51;
            case 132:
              uint64_t v13 = *v8;
              long long v14 = "raidSuccessfulReconstructionInternal";
              goto LABEL_77;
            case 133:
              uint64_t v13 = *v8;
              long long v14 = "raidSuccessfulReconstructionHost";
              goto LABEL_77;
            case 134:
              uint64_t v13 = *v8;
              long long v14 = "raidFailedReconstructionInternal";
              goto LABEL_77;
            case 135:
              uint64_t v13 = *v8;
              long long v14 = "raidFailedReconstructionHost";
              goto LABEL_77;
            case 136:
              uint64_t v13 = *v8;
              long long v14 = "raidBandsPerHostFlow";
              goto LABEL_77;
            case 137:
              uint64_t v13 = *v8;
              long long v14 = "raidSecsPerHostFlow";
              goto LABEL_77;
            case 138:
              uint64_t v13 = *v8;
              long long v14 = "gcFreeL";
              goto LABEL_77;
            case 139:
              uint64_t v13 = *v8;
              long long v14 = "gcDestinations";
              goto LABEL_77;
            case 140:
              uint64_t v13 = *v8;
              long long v14 = "gcFragments";
              goto LABEL_77;
            case 141:
              uint64_t v13 = *v8;
              long long v14 = "numMemChoke";
              goto LABEL_77;
            case 142:
              uint64_t v13 = *v8;
              long long v14 = "maxMemChokeDuration";
              goto LABEL_77;
            case 143:
              uint64_t v13 = *v8;
              long long v14 = "memChokeDuration";
              goto LABEL_77;
            default:
              switch(v7)
              {
                case 144:
                  uint64_t v13 = *v8;
                  long long v14 = "numMemExtreme";
                  goto LABEL_77;
                case 145:
                  uint64_t v13 = *v8;
                  long long v14 = "maxMemExtremeDuration";
                  goto LABEL_77;
                case 146:
                  uint64_t v13 = *v8;
                  long long v14 = "memExtremeDuration";
                  goto LABEL_77;
                case 147:
                  uint64_t v13 = *v8;
                  long long v14 = "bandGetsExtreme";
                  goto LABEL_77;
                case 148:
                  uint64_t v13 = *v8;
                  long long v14 = "bandGetsLow";
                  goto LABEL_77;
                case 149:
                  uint64_t v13 = *v8;
                  long long v14 = "numHostChoke";
                  goto LABEL_77;
                case 152:
                  uint64_t v13 = *v8;
                  long long v14 = "AbortSkip_ProgramError";
                  goto LABEL_77;
                case 153:
                  uint64_t v13 = *v8;
                  long long v14 = "AbortSkip_ReadErrorOpenBand";
                  goto LABEL_77;
                case 154:
                  uint64_t v13 = *v8;
                  long long v14 = "AbortSkip_FailedRebuildingParity";
                  goto LABEL_77;
                case 155:
                  uint64_t v13 = *v8;
                  long long v14 = "AbortPad_OpenRefreshBand";
                  goto LABEL_77;
                case 156:
                  uint64_t v13 = *v8;
                  long long v14 = "AbortPad_CloseBands";
                  goto LABEL_77;
                case 157:
                  uint64_t v13 = *v8;
                  long long v14 = "AbortPad_SetPhoto";
                  goto LABEL_77;
                case 158:
                  uint64_t v13 = *v8;
                  long long v14 = "AbortPad_GcNoSource";
                  goto LABEL_77;
                case 159:
                  uint64_t v13 = *v8;
                  long long v14 = "AbortPad_Format";
                  goto LABEL_77;
                case 160:
                  uint64_t v13 = *v8;
                  long long v14 = "nandDiscoveryDuration";
                  goto LABEL_77;
                case 161:
                  uint64_t v13 = *v8;
                  long long v14 = "coreCCEnableDuration";
                  goto LABEL_77;
                case 163:
                  uint64_t v13 = *v8;
                  long long v14 = "coreOpenDuration";
                  goto LABEL_77;
                case 164:
                  uint64_t v13 = *v8;
                  long long v14 = "coreWritableDuration";
                  goto LABEL_77;
                case 165:
                  uint64_t v13 = *v8;
                  long long v14 = "coreClogLoadDuration";
                  goto LABEL_77;
                case 167:
                  uint64_t v13 = *v8;
                  long long v14 = "bulkPFail";
                  goto LABEL_77;
                case 169:
                  uint64_t v13 = *v8;
                  long long v14 = "bulkRFail";
                  goto LABEL_77;
                case 172:
                  uint64_t v13 = *v8;
                  long long v14 = "raidSmartErrors";
                  goto LABEL_77;
                case 182:
                  uint64_t v13 = *v8;
                  long long v14 = "internalUeccs";
                  goto LABEL_77;
                case 183:
                  uint64_t v13 = *v8;
                  long long v14 = "e2eFail";
                  goto LABEL_77;
                case 184:
                  uint64_t v13 = *v8;
                  long long v14 = "TempSensorMax";
                  goto LABEL_77;
                case 185:
                  uint64_t v13 = *v8;
                  long long v14 = "TempSensorMin";
                  goto LABEL_77;
                case 186:
                  uint64_t v13 = *v8;
                  long long v14 = "powerUpFromDDR";
                  goto LABEL_77;
                case 187:
                  uint64_t v13 = *v8;
                  long long v14 = "numMemLow";
                  goto LABEL_77;
                case 188:
                  uint64_t v13 = *v8;
                  long long v14 = "maxMemLowDuration";
                  goto LABEL_77;
                case 189:
                  uint64_t v13 = *v8;
                  long long v14 = "memLowDuration";
                  goto LABEL_77;
                case 190:
                  uint64_t v13 = *v8;
                  long long v14 = "numFences";
                  goto LABEL_77;
                case 191:
                  uint64_t v13 = *v8;
                  long long v14 = "hostPassiveIO";
                  goto LABEL_77;
                case 192:
                  uint64_t v13 = *v8;
                  long long v14 = "odtsMax";
                  goto LABEL_77;
                case 193:
                  uint64_t v13 = *v8;
                  long long v14 = "defragMFromOrphans";
                  goto LABEL_77;
                case 194:
                  uint64_t v13 = *v8;
                  long long v14 = "defragMFromFragments";
                  goto LABEL_77;
                case 195:
                  uint64_t v13 = *v8;
                  long long v14 = "defragMTime";
                  goto LABEL_77;
                case 196:
                  uint64_t v13 = *v8;
                  long long v14 = "defragMMaxTime";
                  goto LABEL_77;
                case 197:
                  uint64_t v13 = *v8;
                  long long v14 = "raidFailedLbaMismatch";
                  goto LABEL_77;
                case 198:
                  uint64_t v13 = *v8;
                  long long v14 = "numSyscfgWrites";
                  goto LABEL_77;
                case 199:
                  uint64_t v13 = *v8;
                  long long v14 = "indmbUnitsXfer";
                  goto LABEL_77;
                case 200:
                  uint64_t v13 = *v8;
                  long long v14 = "indmbUnitsCache";
                  goto LABEL_77;
                case 201:
                  uint64_t v13 = *v8;
                  long long v14 = "indmbUnitsInd";
                  goto LABEL_77;
                case 202:
                  uint64_t v13 = *v8;
                  long long v14 = "wcacheFS_Mbytes";
                  goto LABEL_77;
                case 203:
                  uint64_t v13 = *v8;
                  long long v14 = "wcacheDS_Mbytes";
                  goto LABEL_77;
                case 204:
                  uint64_t v13 = *v8;
                  long long v14 = "powerOnSeconds";
                  goto LABEL_77;
                case 205:
                  uint64_t v13 = *v8;
                  long long v14 = "numUnknownTokenHostRead";
                  goto LABEL_77;
                case 206:
                  uint64_t v13 = *v8;
                  long long v14 = "numUnmmapedTokenHostRead";
                  goto LABEL_77;
                case 207:
                  int v15 = "numOfThrottlingEntriesPerLevel";
                  uint64_t v16 = a1;
                  int v17 = 207;
LABEL_213:
                  double v18 = v8;
                  unsigned int v19 = 16;
                  goto LABEL_51;
                case 208:
                  uint64_t v13 = *v8;
                  long long v14 = "wcacheFS_MbytesMin";
                  goto LABEL_77;
                case 209:
                  uint64_t v13 = *v8;
                  long long v14 = "wcacheFS_MbytesMax";
                  goto LABEL_77;
                case 210:
                  uint64_t v13 = *v8;
                  long long v14 = "prepareForShutdownFailCounter";
                  goto LABEL_77;
                case 211:
                  uint64_t v13 = *v8;
                  long long v14 = "lpsrEntry";
                  goto LABEL_77;
                case 212:
                  uint64_t v13 = *v8;
                  long long v14 = "lpsrExit";
                  goto LABEL_77;
                case 213:
                  int v15 = "crcInternalReadFail";
                  uint64_t v16 = a1;
                  int v17 = 213;
                  goto LABEL_149;
                case 214:
                  uint64_t v13 = *v8;
                  long long v14 = "wcacheFSEvictCnt";
                  goto LABEL_77;
                case 215:
                  uint64_t v13 = *v8;
                  long long v14 = "wcacheFSEvictSize";
                  goto LABEL_77;
                case 216:
                  uint64_t v13 = *v8;
                  long long v14 = "wcacheFSWr";
                  goto LABEL_77;
                case 217:
                  uint64_t v13 = *v8;
                  long long v14 = "wcacheDSWr";
                  goto LABEL_77;
                case 218:
                  int v15 = "wcacheFSEvictSizeLogDist";
                  uint64_t v16 = a1;
                  int v17 = 218;
                  goto LABEL_44;
                case 219:
                  uint64_t v13 = *v8;
                  long long v14 = "prepareForShutdownTimeoutCounter";
                  goto LABEL_77;
                case 220:
                  uint64_t v13 = *v8;
                  long long v14 = "prepareForShutdownCancelCounter";
                  goto LABEL_77;
                case 221:
                  uint64_t v13 = *v8;
                  long long v14 = "RD_openBandCount";
                  goto LABEL_77;
                case 222:
                  uint64_t v13 = *v8;
                  long long v14 = "RD_openBandNops";
                  goto LABEL_77;
                case 223:
                  uint64_t v13 = *v8;
                  long long v14 = "RD_closedBandEvictCount";
                  goto LABEL_77;
                default:
                  switch(v7)
                  {
                    case 224:
                      uint64_t v13 = *v8;
                      long long v14 = "RD_closedBandEvictSectors";
                      goto LABEL_77;
                    case 225:
                      uint64_t v13 = *v8;
                      long long v14 = "RD_closedBandFragmentCount";
                      goto LABEL_77;
                    case 226:
                      uint64_t v13 = *v8;
                      long long v14 = "RD_closedBandFragmentSectors";
                      goto LABEL_77;
                    case 227:
                      int v15 = "wcacheFSOverWrLogSizeCnts";
                      uint64_t v16 = a1;
                      int v17 = 227;
                      goto LABEL_44;
                    case 228:
                      int v15 = "wcacheFSOverWrSizeByFlow";
                      uint64_t v16 = a1;
                      int v17 = 228;
                      goto LABEL_144;
                    case 229:
                      int v15 = "indmbXferCountTo";
                      uint64_t v16 = a1;
                      int v17 = 229;
                      goto LABEL_123;
                    case 230:
                      int v15 = "indmbAccumulatedTimeBetweenXfers";
                      uint64_t v16 = a1;
                      int v17 = 230;
                      goto LABEL_123;
                    case 231:
                      uint64_t v13 = *v8;
                      long long v14 = "maxGracefulBootTimeMs";
                      goto LABEL_77;
                    case 232:
                      uint64_t v13 = *v8;
                      long long v14 = "maxUngracefulBootTimeMs";
                      goto LABEL_77;
                    case 233:
                      uint64_t v13 = *v8;
                      long long v14 = "averageGracefulBootTimeMs";
                      goto LABEL_77;
                    case 234:
                      uint64_t v13 = *v8;
                      long long v14 = "averageUngracefulBootTimeMs";
                      goto LABEL_77;
                    case 235:
                      int v15 = "gracefulBootTimeLogMs";
                      uint64_t v16 = a1;
                      int v17 = 235;
                      goto LABEL_149;
                    case 236:
                      int v15 = "ungracefulBootTimeLogMs";
                      uint64_t v16 = a1;
                      int v17 = 236;
                      goto LABEL_149;
                    case 237:
                      int v15 = "CalibrationCount";
                      uint64_t v16 = a1;
                      int v17 = 237;
                      goto LABEL_144;
                    case 238:
                      uint64_t v13 = *v8;
                      long long v14 = "CalibrationLastTmp";
                      goto LABEL_77;
                    case 239:
                      uint64_t v13 = *v8;
                      long long v14 = "CalibrationMaxTmp";
                      goto LABEL_77;
                    case 240:
                      uint64_t v13 = *v8;
                      long long v14 = "CalibrationMinTmp";
                      goto LABEL_77;
                    case 241:
                      uint64_t v13 = *v8;
                      long long v14 = "ungracefulBootWorstIndicator";
                      goto LABEL_77;
                    case 242:
                      uint64_t v13 = *v8;
                      long long v14 = "metaMismatchReread";
                      goto LABEL_77;
                    case 243:
                      uint64_t v13 = *v8;
                      long long v14 = "numS3SleepOps";
                      goto LABEL_77;
                    case 244:
                      uint64_t v13 = *v8;
                      long long v14 = "odtsCurrent";
                      goto LABEL_77;
                    case 245:
                      uint64_t v13 = *v8;
                      long long v14 = "prefetchReads";
                      goto LABEL_77;
                    case 246:
                      uint64_t v13 = *v8;
                      long long v14 = "prefetchHits";
                      goto LABEL_77;
                    case 247:
                      uint64_t v13 = *v8;
                      long long v14 = "prefetchWritesInvalidation";
                      goto LABEL_77;
                    case 248:
                      uint64_t v13 = *v8;
                      long long v14 = "indmbUnitsTotal";
                      goto LABEL_77;
                    case 249:
                      uint64_t v13 = *v8;
                      long long v14 = "selfThrottlingEngage";
                      goto LABEL_77;
                    case 250:
                      uint64_t v13 = *v8;
                      long long v14 = "selfThrottlingDisengage";
                      goto LABEL_77;
                    case 252:
                      uint64_t v13 = *v8;
                      long long v14 = "AbortSkip_WlpMode";
                      goto LABEL_77;
                    case 253:
                      uint64_t v13 = *v8;
                      long long v14 = "hostWritesWlpMode";
                      goto LABEL_77;
                    case 254:
                      uint64_t v13 = *v8;
                      long long v14 = "numClogDoubleUnc";
                      goto LABEL_77;
                    case 256:
                      uint64_t v13 = *v8;
                      long long v14 = "AbortPad_WlpMode";
                      goto LABEL_77;
                    case 257:
                      uint64_t v13 = *v8;
                      long long v14 = "bonfireIntermediateBandErases";
                      goto LABEL_77;
                    case 258:
                      uint64_t v13 = *v8;
                      long long v14 = "bonfireUserBandErases";
                      goto LABEL_77;
                    case 259:
                      uint64_t v13 = *v8;
                      long long v14 = "bonfireIntermediateBandProgs";
                      goto LABEL_77;
                    case 260:
                      uint64_t v13 = *v8;
                      long long v14 = "bonfireUserBandProgs";
                      goto LABEL_77;
                    case 261:
                      uint64_t v13 = *v8;
                      long long v14 = "bonfireIntermediatePageReads";
                      goto LABEL_77;
                    case 262:
                      uint64_t v13 = *v8;
                      long long v14 = "bonfireUserPageReads";
                      goto LABEL_77;
                    case 263:
                      uint64_t v13 = *v8;
                      long long v14 = "refreshUtil00";
                      goto LABEL_77;
                    case 264:
                      uint64_t v13 = *v8;
                      long long v14 = "failToReadUtil00";
                      goto LABEL_77;
                    case 265:
                      int v15 = "readCountHisto";
                      uint64_t v16 = a1;
                      int v17 = 265;
                      goto LABEL_102;
                    case 266:
                      int v15 = "readAmpHisto";
                      uint64_t v16 = a1;
                      int v17 = 266;
                      goto LABEL_213;
                    case 267:
                      uint64_t v13 = *v8;
                      long long v14 = "totalReadAmp";
                      goto LABEL_77;
                    case 268:
                      int v15 = "nvmeModeSelect";
                      uint64_t v16 = a1;
                      int v17 = 268;
                      goto LABEL_144;
                    case 269:
                      int v15 = "numBootBlockRefreshSuccess";
                      uint64_t v16 = a1;
                      int v17 = 269;
                      goto LABEL_149;
                    case 270:
                      int v15 = "numBootBlockRefreshFail";
                      uint64_t v16 = a1;
                      int v17 = 270;
                      goto LABEL_149;
                    case 271:
                      uint64_t v13 = *v8;
                      long long v14 = "numUnsupportedAsi";
                      goto LABEL_77;
                    case 272:
                      uint64_t v13 = *v8;
                      long long v14 = "NumTerminatedProgramSegs";
                      goto LABEL_77;
                    case 273:
                      uint64_t v13 = *v8;
                      long long v14 = "indParityPagesDrops";
                      goto LABEL_77;
                    case 274:
                      uint64_t v13 = *v8;
                      long long v14 = "indFlowPrograms";
                      goto LABEL_77;
                    case 277:
                      int v15 = "powerBudgetSelect";
                      uint64_t v16 = a1;
                      int v17 = 277;
                      goto LABEL_144;
                    case 279:
                      uint64_t v13 = *v8;
                      long long v14 = "RxBurnNandWrites";
                      goto LABEL_77;
                    case 280:
                      int v15 = "E2EDPErrorCounters";
                      uint64_t v16 = a1;
                      int v17 = 280;
LABEL_281:
                      double v18 = v8;
                      unsigned int v19 = 12;
                      goto LABEL_51;
                    case 281:
                      uint64_t v13 = *v8;
                      long long v14 = "wcacheSectorsMax";
                      goto LABEL_77;
                    case 282:
                      uint64_t v13 = *v8;
                      long long v14 = "wcacheSectorsMin";
                      goto LABEL_77;
                    case 283:
                      uint64_t v13 = *v8;
                      long long v14 = "wcacheSectorsCur";
                      goto LABEL_77;
                    case 284:
                      uint64_t v13 = *v8;
                      long long v14 = "wcacheDS_SectorsMax";
                      goto LABEL_77;
                    case 285:
                      uint64_t v13 = *v8;
                      long long v14 = "wcacheDS_SectorsMin";
                      goto LABEL_77;
                    case 286:
                      uint64_t v13 = *v8;
                      long long v14 = "wcacheDS_SectorsCur";
                      goto LABEL_77;
                    case 287:
                      uint64_t v13 = *v8;
                      long long v14 = "wcacheFS_Reads";
                      goto LABEL_77;
                    case 288:
                      uint64_t v13 = *v8;
                      long long v14 = "wcacheDS_Reads";
                      goto LABEL_77;
                    case 289:
                      int v15 = "mspBootBlockReadFail";
                      uint64_t v16 = a1;
                      int v17 = 289;
                      goto LABEL_283;
                    case 290:
                      int v15 = "mspBootBlockProgFail";
                      uint64_t v16 = a1;
                      int v17 = 290;
                      goto LABEL_283;
                    case 291:
                      int v15 = "mspBootBlockEraseFail";
                      uint64_t v16 = a1;
                      int v17 = 291;
                      goto LABEL_283;
                    case 292:
                      uint64_t v13 = *v8;
                      long long v14 = "bandsRefreshedOnError";
                      goto LABEL_77;
                    default:
                      switch(v7)
                      {
                        case 298:
                          int v15 = "perHostReads";
                          uint64_t v16 = a1;
                          int v17 = 298;
                          goto LABEL_123;
                        case 299:
                          int v15 = "perHostReadXacts";
                          uint64_t v16 = a1;
                          int v17 = 299;
                          goto LABEL_123;
                        case 300:
                          int v15 = "perHostWrites";
                          uint64_t v16 = a1;
                          int v17 = 300;
                          goto LABEL_123;
                        case 301:
                          int v15 = "perHostWriteXacts";
                          uint64_t v16 = a1;
                          int v17 = 301;
                          goto LABEL_123;
                        case 302:
                          int v15 = "perHostNumFlushes";
                          uint64_t v16 = a1;
                          int v17 = 302;
                          goto LABEL_123;
                        case 303:
                          int v15 = "perHostNumFences";
                          uint64_t v16 = a1;
                          int v17 = 303;
                          goto LABEL_123;
                        case 304:
                          int v15 = "commitPadSectorsPerFlow";
                          uint64_t v16 = a1;
                          int v17 = 304;
                          goto LABEL_44;
                        case 305:
                          int v15 = "wcacheDSOverWrLogSizeCnts";
                          uint64_t v16 = a1;
                          int v17 = 305;
                          goto LABEL_44;
                        case 306:
                          int v15 = "wcacheDSOverWrSizeByFlow";
                          uint64_t v16 = a1;
                          int v17 = 306;
                          goto LABEL_144;
                        case 307:
                          int v15 = "CmdRaisePrioiryEvents";
                          uint64_t v16 = a1;
                          int v17 = 307;
                          goto LABEL_44;
                        case 308:
                          uint64_t v13 = *v8;
                          long long v14 = "utilNumVerification";
                          goto LABEL_77;
                        case 309:
                          uint64_t v13 = *v8;
                          long long v14 = "utilRefreshes";
                          goto LABEL_77;
                        case 310:
                          uint64_t v13 = *v8;
                          long long v14 = "utilBDRErrors";
                          goto LABEL_77;
                        case 311:
                          uint64_t v13 = *v8;
                          long long v14 = "indBandsPerFlow";
                          goto LABEL_77;
                        case 312:
                          uint64_t v13 = *v8;
                          long long v14 = "secsPerIndFlow";
                          goto LABEL_77;
                        case 313:
                          uint64_t v13 = *v8;
                          long long v14 = "indDecodedECC";
                          goto LABEL_77;
                        case 314:
                          int v15 = "numBootBlockValidateSuccess";
                          uint64_t v16 = a1;
                          int v17 = 314;
                          goto LABEL_149;
                        case 315:
                          int v15 = "numBootBlockValidateFail";
                          uint64_t v16 = a1;
                          int v17 = 315;
                          goto LABEL_149;
                        case 316:
                          int v15 = "clogPagesFillingPercentage";
                          uint64_t v16 = a1;
                          int v17 = 316;
                          goto LABEL_144;
                        case 317:
                          uint64_t v13 = *v8;
                          long long v14 = "bdrCalTimeAccFactor";
                          goto LABEL_77;
                        case 318:
                          uint64_t v13 = *v8;
                          long long v14 = "bootChainRdError";
                          goto LABEL_77;
                        case 319:
                          uint64_t v13 = *v8;
                          long long v14 = "bootChainBlankError";
                          goto LABEL_77;
                        case 320:
                          uint64_t v13 = *v8;
                          long long v14 = "bootChainRefreshError";
                          goto LABEL_77;
                        case 321:
                          uint64_t v13 = *v8;
                          long long v14 = "bootChainVersionError";
                          goto LABEL_77;
                        case 322:
                          uint64_t v13 = *v8;
                          long long v14 = "mspBootBlockMismatch";
                          goto LABEL_77;
                        case 323:
                          uint64_t v13 = *v8;
                          long long v14 = "mspBootBlockMismatchErr";
                          goto LABEL_77;
                        case 324:
                          int v15 = "bitflipAddr";
                          uint64_t v16 = a1;
                          int v17 = 324;
                          goto LABEL_102;
                        case 325:
                          int v15 = "bitflipCount";
                          uint64_t v16 = a1;
                          int v17 = 325;
                          goto LABEL_102;
                        case 326:
                          int v15 = "bitflipDupes";
                          uint64_t v16 = a1;
                          int v17 = 326;
                          goto LABEL_102;
                        case 327:
                          int v15 = "bandsMaxTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 327;
                          goto LABEL_324;
                        case 328:
                          int v15 = "bandsMinTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 328;
                          goto LABEL_324;
                        case 329:
                          int v15 = "bandsLifeTimeTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 329;
LABEL_324:
                          double v18 = v8;
                          unsigned int v19 = 30;
                          goto LABEL_51;
                        case 330:
                          int v15 = "bandsDeltaTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 330;
                          double v18 = v8;
                          unsigned int v19 = 22;
                          goto LABEL_51;
                        case 331:
                          int v15 = "bandsCrossTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 331;
                          double v18 = v8;
                          unsigned int v19 = 45;
                          goto LABEL_51;
                        case 332:
                          int v15 = "wcacheWaitLogMs";
                          uint64_t v16 = a1;
                          int v17 = 332;
                          goto LABEL_44;
                        case 333:
                          int v15 = "wcacheDS_segsSortedLogSize";
                          uint64_t v16 = a1;
                          int v17 = 333;
                          goto LABEL_44;
                        case 334:
                          uint64_t v13 = *v8;
                          long long v14 = "numFirmwareWrites";
                          goto LABEL_77;
                        case 335:
                          uint64_t v13 = *v8;
                          long long v14 = "numBisWrites";
                          goto LABEL_77;
                        case 336:
                          uint64_t v13 = *v8;
                          long long v14 = "numBootChainUpdates";
                          goto LABEL_77;
                        case 337:
                          uint64_t v13 = *v8;
                          long long v14 = "cntCalTimeWentBackWard";
                          goto LABEL_77;
                        case 338:
                          uint64_t v13 = *v8;
                          long long v14 = "indBoRecoveries";
                          goto LABEL_77;
                        case 340:
                          uint64_t v13 = *v8;
                          long long v14 = "numCrossTempUecc";
                          goto LABEL_77;
                        case 341:
                          uint64_t v13 = *v8;
                          long long v14 = "latencyMonitorError";
                          goto LABEL_77;
                        case 343:
                          uint64_t v13 = *v8;
                          long long v14 = "utilUeccReads";
                          goto LABEL_77;
                        case 344:
                          uint64_t v13 = *v8;
                          long long v14 = "numOfAvoidedGCDueToTemp";
                          goto LABEL_77;
                        case 345:
                          uint64_t v13 = *v8;
                          long long v14 = "forceShutdowns";
                          goto LABEL_77;
                        case 346:
                          uint64_t v13 = *v8;
                          long long v14 = "gcSlcDestinations";
                          goto LABEL_77;
                        case 347:
                          uint64_t v13 = *v8;
                          long long v14 = "indReplayExtUsed";
                          goto LABEL_77;
                        case 348:
                          uint64_t v13 = *v8;
                          long long v14 = "defectsPerPackageOverflow";
                          goto LABEL_77;
                        case 349:
                          uint64_t v13 = *v8;
                          long long v14 = "RxBurnIntBandsProgrammed";
                          goto LABEL_77;
                        case 350:
                          uint64_t v13 = *v8;
                          long long v14 = "RxBurnUsrBandsProgrammed";
                          goto LABEL_77;
                        case 351:
                          uint64_t v13 = *v8;
                          long long v14 = "RxBurnIntNandWrites";
                          goto LABEL_77;
                        case 352:
                          uint64_t v13 = *v8;
                          long long v14 = "RxBurnUsrNandWrites";
                          goto LABEL_77;
                        case 353:
                          uint64_t v13 = *v8;
                          long long v14 = "clogLastStripeUeccs";
                          goto LABEL_77;
                        case 354:
                          uint64_t v13 = *v8;
                          long long v14 = "GC_MidDestSrcSwitchSLC2TLC";
                          goto LABEL_77;
                        case 355:
                          uint64_t v13 = *v8;
                          long long v14 = "GC_MidDestSrcSwitchTLC2SLC";
                          goto LABEL_77;
                        case 356:
                          uint64_t v13 = *v8;
                          long long v14 = "nvme_stats_shutdown_count_host0_normal";
                          goto LABEL_77;
                        case 357:
                          uint64_t v13 = *v8;
                          long long v14 = "nvme_stats_shutdown_count_host1_normal";
                          goto LABEL_77;
                        case 358:
                          uint64_t v13 = *v8;
                          long long v14 = "nvme_stats_shutdown_count_host0_s2r";
                          goto LABEL_77;
                        case 359:
                          uint64_t v13 = *v8;
                          long long v14 = "nvme_stats_shutdown_count_host1_s2r";
                          goto LABEL_77;
                        case 360:
                          int v15 = "gcPDusterIntrSrcValidityHisto";
                          uint64_t v16 = a1;
                          int v17 = 360;
                          goto LABEL_213;
                        case 361:
                          int v15 = "gcPDusterUserSrcValidityHisto";
                          uint64_t v16 = a1;
                          int v17 = 361;
                          goto LABEL_213;
                        case 362:
                          uint64_t v13 = *v8;
                          long long v14 = "raidFailedReadParity";
                          goto LABEL_77;
                        case 364:
                          uint64_t v13 = *v8;
                          long long v14 = "lhotNumSkipes";
                          goto LABEL_77;
                        default:
                          switch(v7)
                          {
                            case 365:
                              uint64_t v13 = *v8;
                              long long v14 = "lhotNumIsHotCalls";
                              goto LABEL_77;
                            case 366:
                              uint64_t v13 = *v8;
                              long long v14 = "lhotFullLap";
                              goto LABEL_77;
                            case 367:
                              uint64_t v13 = *v8;
                              long long v14 = "lhotSkipPrecent";
                              goto LABEL_77;
                            case 368:
                              uint64_t v13 = *v8;
                              long long v14 = "eraseSuspendEvents";
                              goto LABEL_77;
                            case 369:
                              uint64_t v13 = *v8;
                              long long v14 = "eraseSuspendedStatuses";
                              goto LABEL_77;
                            case 370:
                              uint64_t v13 = *v8;
                              long long v14 = "eraseSuspendedBands";
                              goto LABEL_77;
                            case 371:
                              uint64_t v13 = *v8;
                              long long v14 = "eraseSuspendSituationsBelowThreshold";
                              goto LABEL_77;
                            case 372:
                              uint64_t v13 = *v8;
                              long long v14 = "eraseSuspendSituationsAboveThreshold";
                              goto LABEL_77;
                            case 373:
                              uint64_t v13 = *v8;
                              long long v14 = "eraseSuspendReadChainsProcessed";
                              goto LABEL_77;
                            case 374:
                              uint64_t v13 = *v8;
                              long long v14 = "bdrLastDoneHr";
                              goto LABEL_77;
                            case 375:
                              uint64_t v13 = *v8;
                              long long v14 = "bdrBackupThreshHrs";
                              goto LABEL_77;
                            case 376:
                              uint64_t v13 = *v8;
                              long long v14 = "clogPortableProgBufs";
                              goto LABEL_77;
                            case 377:
                              uint64_t v13 = *v8;
                              long long v14 = "clogPortableDropBufs";
                              goto LABEL_77;
                            case 378:
                              uint64_t v13 = *v8;
                              long long v14 = "clogPortablePadSectors";
                              goto LABEL_77;
                            case 379:
                              uint64_t v13 = *v8;
                              long long v14 = "numRetiredBlocks";
                              goto LABEL_77;
                            case 381:
                              uint64_t v13 = *v8;
                              long long v14 = "numRefreshOnErrNandRefreshPerf";
                              goto LABEL_77;
                            case 382:
                              uint64_t v13 = *v8;
                              long long v14 = "raidReconstructReads";
                              goto LABEL_77;
                            case 383:
                              uint64_t v13 = *v8;
                              long long v14 = "gcReadsNoBlog";
                              goto LABEL_77;
                            case 384:
                              uint64_t v13 = *v8;
                              long long v14 = "AbortSkip_MPBXReadVerifyClosedBand";
                              goto LABEL_77;
                            case 385:
                              uint64_t v13 = *v8;
                              long long v14 = "openBandReadFail";
                              goto LABEL_77;
                            case 386:
                              uint64_t v13 = *v8;
                              long long v14 = "AbortSkip_MPBXReadVerifyOpenBand";
                              goto LABEL_77;
                            case 387:
                              uint64_t v13 = *v8;
                              long long v14 = "AbortSkip_MBPXFailedRebuildingParity";
                              goto LABEL_77;
                            case 388:
                              uint64_t v13 = *v8;
                              long long v14 = "raidSuccessfulPMXReconstructionInternal";
                              goto LABEL_77;
                            case 389:
                              uint64_t v13 = *v8;
                              long long v14 = "raidSuccessfulPMXReconstructionHost";
                              goto LABEL_77;
                            case 390:
                              uint64_t v13 = *v8;
                              long long v14 = "raidFailedPMXReconstructionInternal";
                              goto LABEL_77;
                            case 391:
                              uint64_t v13 = *v8;
                              long long v14 = "raidFailedPMXReconstructionHost";
                              goto LABEL_77;
                            case 392:
                              uint64_t v13 = *v8;
                              long long v14 = "raidSuccessfulRMXReconstructionInternal";
                              goto LABEL_77;
                            case 393:
                              uint64_t v13 = *v8;
                              long long v14 = "raidSuccessfulRMXReconstructionHost";
                              goto LABEL_77;
                            case 394:
                              uint64_t v13 = *v8;
                              long long v14 = "raidFailedRMXReconstructionInternal";
                              goto LABEL_77;
                            case 395:
                              uint64_t v13 = *v8;
                              long long v14 = "raidFailedRMXReconstructionHost";
                              goto LABEL_77;
                            case 396:
                              uint64_t v13 = *v8;
                              long long v14 = "raidFailedReadParityInternal";
                              goto LABEL_77;
                            case 397:
                              uint64_t v13 = *v8;
                              long long v14 = "raidFailedReadQParityInternal";
                              goto LABEL_77;
                            case 398:
                              uint64_t v13 = *v8;
                              long long v14 = "raidFailedReadQParity";
                              goto LABEL_77;
                            case 399:
                              uint64_t v13 = *v8;
                              long long v14 = "raidFailedReadQCopy";
                              goto LABEL_77;
                            case 400:
                              uint64_t v13 = *v8;
                              long long v14 = "raidFailedReconstructionQParity";
                              goto LABEL_77;
                            case 401:
                              uint64_t v13 = *v8;
                              long long v14 = "offlineBlocksCnt";
                              goto LABEL_77;
                            case 402:
                              uint64_t v13 = *v8;
                              long long v14 = "bork0Revectors";
                              goto LABEL_77;
                            case 403:
                              uint64_t v13 = *v8;
                              long long v14 = "raidFailedReadBlog";
                              goto LABEL_77;
                            case 404:
                              uint64_t v13 = *v8;
                              long long v14 = "numReliabilityRefreshes";
                              goto LABEL_77;
                            case 405:
                              uint64_t v13 = *v8;
                              long long v14 = "raidFailedReadQCopyInternal";
                              goto LABEL_77;
                            case 406:
                              int v15 = "raidReconstructSuccessFlow";
                              uint64_t v16 = a1;
                              int v17 = 406;
                              goto LABEL_102;
                            case 407:
                              int v15 = "raidReconstructFailFlow";
                              uint64_t v16 = a1;
                              int v17 = 407;
                              goto LABEL_102;
                            case 408:
                              uint64_t v13 = *v8;
                              long long v14 = "raidReconstructFailP";
                              goto LABEL_77;
                            case 409:
                              uint64_t v13 = *v8;
                              long long v14 = "raidReconstructFailQ";
                              goto LABEL_77;
                            case 410:
                              uint64_t v13 = *v8;
                              long long v14 = "raidReconstructFailUECC";
                              goto LABEL_77;
                            case 411:
                              uint64_t v13 = *v8;
                              long long v14 = "raidReconstructFailUnsupp";
                              goto LABEL_77;
                            case 412:
                              uint64_t v13 = *v8;
                              long long v14 = "raidUECCOpenBand";
                              goto LABEL_77;
                            case 414:
                              uint64_t v13 = *v8;
                              long long v14 = "ueccReads";
                              goto LABEL_77;
                            case 416:
                              uint64_t v13 = *v8;
                              long long v14 = "raidSuccessfulVerify";
                              goto LABEL_77;
                            case 417:
                              uint64_t v13 = *v8;
                              long long v14 = "raidFailedVerify";
                              goto LABEL_77;
                            case 418:
                              uint64_t v13 = *v8;
                              long long v14 = "numBandsVerified";
                              goto LABEL_77;
                            case 419:
                              uint64_t v13 = *v8;
                              long long v14 = "cache_heads";
                              goto LABEL_77;
                            case 420:
                              uint64_t v13 = *v8;
                              long long v14 = "AbortSkip_RMXtoMPBX";
                              goto LABEL_77;
                            case 421:
                              uint64_t v13 = *v8;
                              long long v14 = "s3eFwVer";
                              goto LABEL_77;
                            case 422:
                              uint64_t v13 = *v8;
                              long long v14 = "readVerifyNative";
                              goto LABEL_77;
                            case 423:
                              uint64_t v13 = *v8;
                              long long v14 = "reducedReadVerifyNative";
                              goto LABEL_77;
                            case 424:
                              uint64_t v13 = *v8;
                              long long v14 = "readVerifySlc";
                              goto LABEL_77;
                            case 425:
                              uint64_t v13 = *v8;
                              long long v14 = "reducedReadVerifySlc";
                              goto LABEL_77;
                            case 426:
                              uint64_t v13 = *v8;
                              long long v14 = "RxBurnEvictions";
                              goto LABEL_77;
                            case 427:
                              uint64_t v13 = *v8;
                              long long v14 = "directToTLCBands";
                              goto LABEL_77;
                            case 428:
                              uint64_t v13 = *v8;
                              long long v14 = "nandDesc";
                              goto LABEL_77;
                            case 429:
                              uint64_t v13 = *v8;
                              long long v14 = "fwUpdatesPercentUsed";
                              goto LABEL_77;
                            case 430:
                              uint64_t v13 = *v8;
                              long long v14 = "slcPercentUsed";
                              goto LABEL_77;
                            case 431:
                              uint64_t v13 = *v8;
                              long long v14 = "percentUsed";
                              goto LABEL_77;
                            default:
                              switch(v7)
                              {
                                case 432:
                                  uint64_t v13 = *v8;
                                  long long v14 = "hostAutoWrites";
                                  goto LABEL_77;
                                case 433:
                                  uint64_t v13 = *v8;
                                  long long v14 = "hostAutoWriteXacts";
                                  goto LABEL_77;
                                case 434:
                                  uint64_t v13 = *v8;
                                  long long v14 = "gcDestDynamic";
                                  goto LABEL_77;
                                case 435:
                                  uint64_t v13 = *v8;
                                  long long v14 = "gcDestStatic";
                                  goto LABEL_77;
                                case 436:
                                  uint64_t v13 = *v8;
                                  long long v14 = "gcDestWearlevel";
                                  goto LABEL_77;
                                case 437:
                                  uint64_t v13 = *v8;
                                  long long v14 = "gcDestParity";
                                  goto LABEL_77;
                                case 438:
                                  uint64_t v13 = *v8;
                                  long long v14 = "AbortSkip_Format";
                                  goto LABEL_77;
                                case 440:
                                  uint64_t v13 = *v8;
                                  long long v14 = "raidSLCPadding";
                                  goto LABEL_77;
                                case 441:
                                  uint64_t v13 = *v8;
                                  long long v14 = "raidGCBands";
                                  goto LABEL_77;
                                case 442:
                                  uint64_t v13 = *v8;
                                  long long v14 = "raidGCSectors";
                                  goto LABEL_77;
                                case 443:
                                  uint64_t v13 = *v8;
                                  long long v14 = "raidGCPadding";
                                  goto LABEL_77;
                                case 444:
                                  uint64_t v13 = *v8;
                                  long long v14 = "raidSLCBandsPerHostFlow";
                                  goto LABEL_77;
                                case 445:
                                  uint64_t v13 = *v8;
                                  long long v14 = "raidSLCSecsPerHostFlow";
                                  goto LABEL_77;
                                case 446:
                                  uint64_t v13 = *v8;
                                  long long v14 = "rxBurnMinCycleRuns";
                                  goto LABEL_77;
                                case 447:
                                  uint64_t v13 = *v8;
                                  long long v14 = "clogNumFastCxt";
                                  goto LABEL_77;
                                case 448:
                                  uint64_t v13 = *v8;
                                  long long v14 = "clogNumRapidReboots";
                                  goto LABEL_77;
                                case 449:
                                  uint64_t v13 = *v8;
                                  long long v14 = "clogFastCxtAbvThr";
                                  goto LABEL_77;
                                case 450:
                                  uint64_t v13 = *v8;
                                  long long v14 = "rxBurnDiffModeRuns";
                                  goto LABEL_77;
                                case 452:
                                  uint64_t v13 = *v8;
                                  long long v14 = "indReadVerifyFail";
                                  goto LABEL_77;
                                case 453:
                                  int v15 = "numOfThrottlingEntriesPerReadLevel";
                                  uint64_t v16 = a1;
                                  int v17 = 453;
                                  goto LABEL_213;
                                case 454:
                                  int v15 = "numOfThrottlingEntriesPerWriteLevel";
                                  uint64_t v16 = a1;
                                  int v17 = 454;
                                  goto LABEL_213;
                                case 456:
                                  int v15 = "slcFifoDepth";
                                  uint64_t v16 = a1;
                                  int v17 = 456;
                                  goto LABEL_44;
                                case 457:
                                  uint64_t v13 = *v8;
                                  long long v14 = "wcacheSectorsDirtyIdle";
                                  goto LABEL_77;
                                case 458:
                                  uint64_t v13 = *v8;
                                  long long v14 = "wcacheDS_SectorsDirtyIdle";
                                  goto LABEL_77;
                                case 459:
                                  uint64_t v13 = *v8;
                                  long long v14 = "wcacheFS_MbytesDirtyIdle";
                                  goto LABEL_77;
                                case 460:
                                  int v15 = "CacheDepthVsThroughput";
                                  uint64_t v16 = a1;
                                  int v17 = 460;
                                  double v18 = v8;
                                  unsigned int v19 = 256;
                                  goto LABEL_51;
                                case 461:
                                  uint64_t v13 = *v8;
                                  long long v14 = "directToTLCSectors";
                                  goto LABEL_77;
                                case 462:
                                  uint64_t v13 = *v8;
                                  long long v14 = "fallbackToWaterfall";
                                  goto LABEL_77;
                                case 463:
                                  int v15 = "balanceProportionBucketsHistogram";
                                  uint64_t v16 = a1;
                                  int v17 = 463;
LABEL_448:
                                  double v18 = v8;
                                  unsigned int v19 = 11;
                                  goto LABEL_51;
                                case 464:
                                  uint64_t v13 = *v8;
                                  long long v14 = "lockToTlc";
                                  goto LABEL_77;
                                case 465:
                                  int v15 = "burstSizeHistogram";
                                  uint64_t v16 = a1;
                                  int v17 = 465;
                                  goto LABEL_44;
                                case 466:
                                  int v15 = "qosDirectToTLC";
                                  uint64_t v16 = a1;
                                  int v17 = 466;
                                  goto LABEL_470;
                                case 467:
                                  int v15 = "maxQosDirectToTLC";
                                  uint64_t v16 = a1;
                                  int v17 = 467;
                                  goto LABEL_144;
                                case 468:
                                  int v15 = "wcacheDirtyAtFlush";
                                  uint64_t v16 = a1;
                                  int v17 = 468;
                                  goto LABEL_213;
                                case 469:
                                  int v15 = "raidReconstructSuccessPartition";
                                  uint64_t v16 = a1;
                                  int v17 = 469;
                                  goto LABEL_123;
                                case 470:
                                  int v15 = "raidReconstructFailPartition";
                                  uint64_t v16 = a1;
                                  int v17 = 470;
                                  goto LABEL_123;
                                case 471:
                                  uint64_t v13 = *v8;
                                  long long v14 = "raidUncleanBootBandFail";
                                  goto LABEL_77;
                                case 472:
                                  uint64_t v13 = *v8;
                                  long long v14 = "raidReconstructFailBandFlowHost";
                                  goto LABEL_77;
                                case 473:
                                  uint64_t v13 = *v8;
                                  long long v14 = "raidReconstructFailBandFlowGC";
                                  goto LABEL_77;
                                case 476:
                                  int v15 = "raidSuccessfulRecoLbaRange";
                                  uint64_t v16 = a1;
                                  int v17 = 476;
                                  goto LABEL_123;
                                case 477:
                                  int v15 = "raidFailedRecoLbaRange";
                                  uint64_t v16 = a1;
                                  int v17 = 477;
                                  goto LABEL_123;
                                case 481:
                                  int v15 = "skinnyBandErases_481";
                                  uint64_t v16 = a1;
                                  int v17 = 481;
                                  goto LABEL_283;
                                case 483:
                                  uint64_t v13 = *v8;
                                  long long v14 = "tlcOverHeatWaterfall";
                                  goto LABEL_77;
                                case 484:
                                  uint64_t v13 = *v8;
                                  long long v14 = "skinnyCyclesConvert";
                                  goto LABEL_77;
                                case 485:
                                  uint64_t v13 = *v8;
                                  long long v14 = "non_proportional_directToTLCSectors";
                                  goto LABEL_77;
                                case 486:
                                  uint64_t v13 = *v8;
                                  long long v14 = "maxFailedFastCxtSync";
                                  goto LABEL_77;
                                case 487:
                                  uint64_t v13 = *v8;
                                  long long v14 = "numFormatUserArea";
                                  goto LABEL_77;
                                case 488:
                                  uint64_t v13 = *v8;
                                  long long v14 = "clogFastCxtSyncAborted";
                                  goto LABEL_77;
                                case 489:
                                  int v15 = "clogOccupationSectors";
                                  uint64_t v16 = a1;
                                  int v17 = 489;
                                  goto LABEL_102;
                                case 490:
                                  int v15 = "bdrTmpHist";
                                  uint64_t v16 = a1;
                                  int v17 = 490;
LABEL_470:
                                  double v18 = v8;
                                  unsigned int v19 = 64;
                                  goto LABEL_51;
                                case 491:
                                  uint64_t v13 = *v8;
                                  long long v14 = "numFWUpdates";
                                  goto LABEL_77;
                                case 492:
                                  uint64_t v13 = *v8;
                                  long long v14 = "numClogLoadFails";
                                  goto LABEL_77;
                                case 493:
                                  uint64_t v13 = *v8;
                                  long long v14 = "rxBurnNumForcedDiffMode";
                                  goto LABEL_77;
                                case 494:
                                  uint64_t v13 = *v8;
                                  long long v14 = "RD_numSaves";
                                  goto LABEL_77;
                                case 495:
                                  uint64_t v13 = *v8;
                                  long long v14 = "eanCompressWrites";
                                  goto LABEL_77;
                                case 496:
                                  uint64_t v13 = *v8;
                                  long long v14 = "eanHostWrites";
                                  goto LABEL_77;
                                case 497:
                                  uint64_t v13 = *v8;
                                  long long v14 = "bandPreErases";
                                  goto LABEL_77;
                                case 498:
                                  uint64_t v13 = *v8;
                                  long long v14 = "eanHostUnmaps";
                                  goto LABEL_77;
                                case 499:
                                  uint64_t v13 = *v8;
                                  long long v14 = "eanHostFlushes";
                                  goto LABEL_77;
                                case 500:
                                  uint64_t v13 = *v8;
                                  long long v14 = "eanFastWrites";
                                  goto LABEL_77;
                                case 501:
                                  uint64_t v13 = *v8;
                                  long long v14 = "autowriteDS2FSCollisions";
                                  goto LABEL_77;
                                case 502:
                                  uint64_t v13 = *v8;
                                  long long v14 = "autowriteWaitTransferTaskBlocks";
                                  goto LABEL_77;
                                case 503:
                                  int v15 = "avgCycle";
                                  uint64_t v16 = a1;
                                  int v17 = 503;
                                  goto LABEL_123;
                                case 504:
                                  uint64_t v13 = *v8;
                                  long long v14 = "RD_DeferredClearsOverflowCnt";
                                  goto LABEL_77;
                                default:
                                  switch(v7)
                                  {
                                    case 505:
                                      uint64_t v13 = *v8;
                                      long long v14 = "maxVerticsInBand";
                                      goto LABEL_77;
                                    case 506:
                                      uint64_t v13 = *v8;
                                      long long v14 = "numVertics";
                                      goto LABEL_77;
                                    case 507:
                                      uint64_t v13 = *v8;
                                      long long v14 = "exceededCVertics";
                                      goto LABEL_77;
                                    case 510:
                                      uint64_t v13 = *v8;
                                      long long v14 = "raidReconstructFailMismatch";
                                      goto LABEL_77;
                                    case 511:
                                      int v15 = "mspbootBlockRefreshCnt";
                                      uint64_t v16 = a1;
                                      int v17 = 511;
                                      goto LABEL_283;
                                    case 516:
                                      int v15 = "mspBootBlockRefreshTime";
                                      uint64_t v16 = a1;
                                      int v17 = 516;
                                      goto LABEL_283;
                                    case 517:
                                      uint64_t v13 = *v8;
                                      long long v14 = "mspBootBlockCountPerMsp";
                                      goto LABEL_77;
                                    case 518:
                                      uint64_t v13 = *v8;
                                      long long v14 = "skinnyRevectorSLC";
                                      goto LABEL_77;
                                    case 519:
                                      uint64_t v13 = *v8;
                                      long long v14 = "skinnyRevectorTLC";
                                      goto LABEL_77;
                                    case 520:
                                      uint64_t v13 = *v8;
                                      long long v14 = "perfSetupAttempts";
                                      goto LABEL_77;
                                    case 521:
                                      uint64_t v13 = *v8;
                                      long long v14 = "perfSetupSuccesses";
                                      goto LABEL_77;
                                    case 522:
                                      uint64_t v13 = *v8;
                                      long long v14 = "perfWriteAttempts";
                                      goto LABEL_77;
                                    case 523:
                                      uint64_t v13 = *v8;
                                      long long v14 = "perfWriteSuccesses";
                                      goto LABEL_77;
                                    case 524:
                                      uint64_t v13 = *v8;
                                      long long v14 = "perfReadAttempts";
                                      goto LABEL_77;
                                    case 525:
                                      uint64_t v13 = *v8;
                                      long long v14 = "perfReadSuccesses";
                                      goto LABEL_77;
                                    case 526:
                                      uint64_t v13 = *v8;
                                      long long v14 = "perfCleanupAttempts";
                                      goto LABEL_77;
                                    case 527:
                                      uint64_t v13 = *v8;
                                      long long v14 = "perfCleanupSuccesses";
                                      goto LABEL_77;
                                    case 530:
                                      uint64_t v13 = *v8;
                                      long long v14 = "firstFailedDieId";
                                      goto LABEL_77;
                                    case 531:
                                      uint64_t v13 = *v8;
                                      long long v14 = "numDieFailures";
                                      goto LABEL_77;
                                    case 532:
                                      uint64_t v13 = *v8;
                                      long long v14 = "spareAvailablePercent";
                                      goto LABEL_77;
                                    case 533:
                                      uint64_t v13 = *v8;
                                      long long v14 = "dataFabricErr";
                                      goto LABEL_77;
                                    case 534:
                                      uint64_t v13 = *v8;
                                      long long v14 = "downlinkFabricErr";
                                      goto LABEL_77;
                                    case 535:
                                      uint64_t v13 = *v8;
                                      long long v14 = "prpAccTimeoutErr";
                                      goto LABEL_77;
                                    case 537:
                                      uint64_t v13 = *v8;
                                      long long v14 = "uplinkFabricErr";
                                      goto LABEL_77;
                                    case 538:
                                      uint64_t v13 = *v8;
                                      long long v14 = "skinnyBandsGBB";
                                      goto LABEL_77;
                                    case 539:
                                      uint64_t v13 = *v8;
                                      long long v14 = "AbortPad_GcMustPadBand";
                                      goto LABEL_77;
                                    case 540:
                                      uint64_t v13 = *v8;
                                      long long v14 = "AbortPad_GcMustPadSkinny";
                                      goto LABEL_77;
                                    case 541:
                                      uint64_t v13 = *v8;
                                      long long v14 = "bdrHostPingInitial";
                                      goto LABEL_77;
                                    case 542:
                                      uint64_t v13 = *v8;
                                      long long v14 = "bdrHostPingMoreNeeded";
                                      goto LABEL_77;
                                    case 543:
                                      uint64_t v13 = *v8;
                                      long long v14 = "bandParityAllocationFailed";
                                      goto LABEL_77;
                                    case 544:
                                      uint64_t v13 = *v8;
                                      long long v14 = "fastHwBurstToSlc";
                                      goto LABEL_77;
                                    case 545:
                                      uint64_t v13 = *v8;
                                      long long v14 = "slowHwToTlc";
                                      goto LABEL_77;
                                    case 546:
                                      int v15 = "slcDemandBurstSizeDetected";
                                      uint64_t v16 = a1;
                                      int v17 = 546;
                                      goto LABEL_44;
                                    case 547:
                                      int v15 = "slcDemandBurstDur";
                                      uint64_t v16 = a1;
                                      int v17 = 547;
                                      goto LABEL_44;
                                    case 548:
                                      uint64_t v13 = *v8;
                                      long long v14 = "fastHwToTlcBurst";
                                      goto LABEL_77;
                                    case 549:
                                      int v15 = "slcDemandBurstSizeSlc";
                                      uint64_t v16 = a1;
                                      int v17 = 549;
                                      goto LABEL_44;
                                    case 551:
                                      int v15 = "balanceProportionBucketsHistogramTlc";
                                      uint64_t v16 = a1;
                                      int v17 = 551;
                                      goto LABEL_448;
                                    case 553:
                                      uint64_t v13 = *v8;
                                      long long v14 = "slowHwFlushToSlc";
                                      goto LABEL_77;
                                    case 557:
                                      uint64_t v13 = *v8;
                                      long long v14 = "slowHwToSlc";
                                      goto LABEL_77;
                                    case 558:
                                      uint64_t v13 = *v8;
                                      long long v14 = "flushNwToSlc";
                                      goto LABEL_77;
                                    case 559:
                                      uint64_t v13 = *v8;
                                      long long v14 = "flushNwToTlc";
                                      goto LABEL_77;
                                    case 560:
                                      uint64_t v13 = *v8;
                                      long long v14 = "oslcHw";
                                      goto LABEL_77;
                                    case 561:
                                      uint64_t v13 = *v8;
                                      long long v14 = "oslcTransitions";
                                      goto LABEL_77;
                                    case 563:
                                      uint64_t v13 = *v8;
                                      long long v14 = "slcDemandFlushCount";
                                      goto LABEL_77;
                                    case 564:
                                      uint64_t v13 = *v8;
                                      long long v14 = "slcDemandBurstCount";
                                      goto LABEL_77;
                                    case 565:
                                      uint64_t v13 = *v8;
                                      long long v14 = "oslcBaseAvgPE";
                                      goto LABEL_77;
                                    case 566:
                                      uint64_t v13 = *v8;
                                      long long v14 = "raidReconstructFailNoSPBX";
                                      goto LABEL_77;
                                    case 567:
                                      uint64_t v13 = *v8;
                                      long long v14 = "raidReconstructFailDouble";
                                      goto LABEL_77;
                                    case 568:
                                      uint64_t v13 = *v8;
                                      long long v14 = "oslcFastWAmpUOnOff";
                                      goto LABEL_77;
                                    case 569:
                                      uint64_t v13 = *v8;
                                      long long v14 = "oslcSlowWAmpUOnOff";
                                      goto LABEL_77;
                                    case 570:
                                      uint64_t v13 = *v8;
                                      long long v14 = "raidReconstructFailInvalid";
                                      goto LABEL_77;
                                    case 572:
                                      uint64_t v13 = *v8;
                                      long long v14 = "oslcLastWAmpUx10";
                                      goto LABEL_77;
                                    case 573:
                                      uint64_t v13 = *v8;
                                      long long v14 = "raidFailedReadNoBlog";
                                      goto LABEL_77;
                                    case 574:
                                      uint64_t v13 = *v8;
                                      long long v14 = "raidReconstructFailBlank";
                                      goto LABEL_77;
                                    case 575:
                                      uint64_t v13 = *v8;
                                      long long v14 = "oslcHotTLCOnOff";
                                      goto LABEL_77;
                                    case 576:
                                      uint64_t v13 = *v8;
                                      long long v14 = "gcVPackDestinations";
                                      goto LABEL_77;
                                    case 581:
                                      uint64_t v13 = *v8;
                                      long long v14 = "averageTLCPECycles";
                                      goto LABEL_77;
                                    case 582:
                                      uint64_t v13 = *v8;
                                      long long v14 = "averageSLCPECycles";
                                      goto LABEL_77;
                                    case 583:
                                      uint64_t v13 = *v8;
                                      long long v14 = "numAtomicBoots";
                                      goto LABEL_77;
                                    case 584:
                                      uint64_t v13 = *v8;
                                      long long v14 = "clogMinorMismatch";
                                      goto LABEL_77;
                                    case 586:
                                      uint64_t v13 = *v8;
                                      long long v14 = "raidExpectedFailRMXReconstructionInternal";
                                      goto LABEL_77;
                                    case 587:
                                      uint64_t v13 = *v8;
                                      long long v14 = "raidExpectedFailRMXReconstructionHost";
                                      goto LABEL_77;
                                    case 588:
                                      uint64_t v13 = *v8;
                                      long long v14 = "oslcGCinvalidations";
                                      goto LABEL_77;
                                    case 589:
                                      uint64_t v13 = *v8;
                                      long long v14 = "oslcGCActivateReason";
                                      goto LABEL_77;
                                    default:
                                      switch(v7)
                                      {
                                        case 590:
                                          uint64_t v13 = *v8;
                                          long long v14 = "oslcLowCleanBandsUOnOff";
                                          goto LABEL_77;
                                        case 591:
                                          uint64_t v13 = *v8;
                                          long long v14 = "oslcTooManyGCMustOnOff";
                                          goto LABEL_77;
                                        case 592:
                                          uint64_t v13 = *v8;
                                          long long v14 = "oslcBaseHostWrites";
                                          goto LABEL_77;
                                        case 593:
                                          uint64_t v13 = *v8;
                                          long long v14 = "oslcBaseBandErases";
                                          goto LABEL_77;
                                        case 594:
                                          uint64_t v13 = *v8;
                                          long long v14 = "oslcBdrBands";
                                          goto LABEL_77;
                                        case 595:
                                          uint64_t v13 = *v8;
                                          long long v14 = "oslcBdrValid";
                                          goto LABEL_77;
                                        case 596:
                                          uint64_t v13 = *v8;
                                          long long v14 = "unexpectedBlanksInternal";
                                          goto LABEL_77;
                                        case 597:
                                          uint64_t v13 = *v8;
                                          long long v14 = "unexpectedBlanksOnRV";
                                          goto LABEL_77;
                                        case 601:
                                          uint64_t v13 = *v8;
                                          long long v14 = "waterfallLockSectors";
                                          goto LABEL_77;
                                        case 602:
                                          uint64_t v13 = *v8;
                                          long long v14 = "oslcGCActiveWrites";
                                          goto LABEL_77;
                                        case 603:
                                          uint64_t v13 = *v8;
                                          long long v14 = "chipIdTemperatureSample";
                                          goto LABEL_77;
                                        case 604:
                                          uint64_t v13 = *v8;
                                          long long v14 = "gcVPackWrites";
                                          goto LABEL_77;
                                        case 605:
                                          int v15 = "gcActiveReasons";
                                          uint64_t v16 = a1;
                                          int v17 = 605;
                                          goto LABEL_44;
                                        case 606:
                                          uint64_t v13 = *v8;
                                          long long v14 = "eanMaxInitTimeMs";
                                          goto LABEL_77;
                                        case 607:
                                          uint64_t v13 = *v8;
                                          long long v14 = "eanMinToFirstReadTimeMs";
                                          goto LABEL_77;
                                        case 608:
                                          uint64_t v13 = *v8;
                                          long long v14 = "skinnyAPGMRetire";
                                          goto LABEL_77;
                                        case 609:
                                          uint64_t v13 = *v8;
                                          long long v14 = "unexpectedBlanksHost";
                                          goto LABEL_77;
                                        case 610:
                                          int v15 = "pcieAerCounters";
                                          uint64_t v16 = a1;
                                          int v17 = 610;
                                          goto LABEL_470;
                                        case 611:
                                          uint64_t v13 = *v8;
                                          long long v14 = "fastHwToTlcBalance";
                                          goto LABEL_77;
                                        case 612:
                                          uint64_t v13 = *v8;
                                          long long v14 = "perfOSLCRuns";
                                          goto LABEL_77;
                                        case 613:
                                          uint64_t v13 = *v8;
                                          long long v14 = "slcDemandBurstWritesInGC";
                                          goto LABEL_77;
                                        case 614:
                                          uint64_t v13 = *v8;
                                          long long v14 = "slcDemandBurstWritesInTT";
                                          goto LABEL_77;
                                        case 615:
                                          uint64_t v13 = *v8;
                                          long long v14 = "slcDemandBurstWritesInNRP";
                                          goto LABEL_77;
                                        case 616:
                                          uint64_t v13 = *v8;
                                          long long v14 = "perfTotalDmaMb";
                                          goto LABEL_77;
                                        case 617:
                                          uint64_t v13 = *v8;
                                          long long v14 = "eanAvgInitTimeMs";
                                          goto LABEL_77;
                                        case 618:
                                          uint64_t v13 = *v8;
                                          long long v14 = "eanAvgToFirstReadTimeMs";
                                          goto LABEL_77;
                                        case 619:
                                          uint64_t v13 = *v8;
                                          long long v14 = "eanMaxBootReadTimeMs";
                                          goto LABEL_77;
                                        case 620:
                                          uint64_t v13 = *v8;
                                          long long v14 = "eanAvgBootReadTimeMs";
                                          goto LABEL_77;
                                        case 621:
                                          int v15 = "eanBootReadsHist";
                                          uint64_t v16 = a1;
                                          int v17 = 621;
                                          goto LABEL_44;
                                        case 622:
                                          uint64_t v13 = *v8;
                                          long long v14 = "maxBgInitTimeMs";
                                          goto LABEL_77;
                                        case 623:
                                          uint64_t v13 = *v8;
                                          long long v14 = "avgBgInitTimeMs";
                                          goto LABEL_77;
                                        case 624:
                                          int v15 = "clogFailReason";
                                          uint64_t v16 = a1;
                                          int v17 = 624;
                                          goto LABEL_213;
                                        case 625:
                                          uint64_t v13 = *v8;
                                          long long v14 = "eanMinBootReadMBPerSec";
                                          goto LABEL_77;
                                        case 626:
                                          uint64_t v13 = *v8;
                                          long long v14 = "eanAvgBootReadMBPerSec";
                                          goto LABEL_77;
                                        case 627:
                                          uint64_t v13 = *v8;
                                          long long v14 = "minSkinnyPECycles";
                                          goto LABEL_77;
                                        case 628:
                                          uint64_t v13 = *v8;
                                          long long v14 = "maxSkinnyPECycles";
                                          goto LABEL_77;
                                        case 629:
                                          uint64_t v13 = *v8;
                                          long long v14 = "averageSkinnyPECycles";
                                          goto LABEL_77;
                                        case 630:
                                          int v15 = "raidSuccessfulRecoEAN";
                                          uint64_t v16 = a1;
                                          int v17 = 630;
                                          goto LABEL_591;
                                        case 631:
                                          int v15 = "raidFailedRecoEAN";
                                          uint64_t v16 = a1;
                                          int v17 = 631;
                                          goto LABEL_591;
                                        case 632:
                                          int v15 = "eanFirstReadMode";
                                          uint64_t v16 = a1;
                                          int v17 = 632;
LABEL_591:
                                          double v18 = v8;
                                          unsigned int v19 = 6;
                                          goto LABEL_51;
                                        case 635:
                                          uint64_t v13 = *v8;
                                          long long v14 = "oslcHwGC";
                                          goto LABEL_77;
                                        case 636:
                                          uint64_t v13 = *v8;
                                          long long v14 = "oslcHwTT";
                                          goto LABEL_77;
                                        case 637:
                                          uint64_t v13 = *v8;
                                          long long v14 = "oslcHwNRP";
                                          goto LABEL_77;
                                        case 638:
                                          int v15 = "oslcDemandBurstSize";
                                          uint64_t v16 = a1;
                                          int v17 = 638;
                                          goto LABEL_44;
                                        case 639:
                                          uint64_t v13 = *v8;
                                          long long v14 = "raidReconstructSuccessBandFlowOslc";
                                          goto LABEL_77;
                                        case 640:
                                          uint64_t v13 = *v8;
                                          long long v14 = "raidReconstructFailBandFlowOslc";
                                          goto LABEL_77;
                                        case 641:
                                          uint64_t v13 = *v8;
                                          long long v14 = "raidFailSectors";
                                          goto LABEL_77;
                                        case 642:
                                          uint64_t v13 = *v8;
                                          long long v14 = "eanFailSectors";
                                          goto LABEL_77;
                                        case 643:
                                          uint64_t v13 = *v8;
                                          long long v14 = "bdrTimeMode";
                                          goto LABEL_77;
                                        case 644:
                                          uint64_t v13 = *v8;
                                          long long v14 = "raidParityNotSavedP";
                                          goto LABEL_77;
                                        case 645:
                                          uint64_t v13 = *v8;
                                          long long v14 = "raidParityNotSavedQ";
                                          goto LABEL_77;
                                        case 646:
                                          uint64_t v13 = *v8;
                                          long long v14 = "raidParityInvalid";
                                          goto LABEL_77;
                                        case 647:
                                          uint64_t v13 = *v8;
                                          long long v14 = "raidParityUnknown";
                                          goto LABEL_77;
                                        case 648:
                                          uint64_t v13 = *v8;
                                          long long v14 = "raidParityUnmapped";
                                          goto LABEL_77;
                                        case 649:
                                          uint64_t v13 = *v8;
                                          long long v14 = "raidParityGCUnc";
                                          goto LABEL_77;
                                        case 657:
                                          uint64_t v13 = *v8;
                                          long long v14 = "AbortSkip_MPBXProbational";
                                          goto LABEL_77;
                                        case 659:
                                          uint64_t v13 = *v8;
                                          long long v14 = "raidVerificationReads";
                                          goto LABEL_77;
                                        case 666:
                                          uint64_t v13 = *v8;
                                          long long v14 = "nofDies";
                                          goto LABEL_77;
                                        case 671:
                                          uint64_t v13 = *v8;
                                          long long v14 = "skinnyBandsNum";
                                          goto LABEL_77;
                                        case 672:
                                          uint64_t v13 = *v8;
                                          long long v14 = "skinnyBandsNumDips";
                                          goto LABEL_77;
                                        case 674:
                                          int v15 = "oslcNoVotesHw";
                                          uint64_t v16 = a1;
                                          int v17 = 674;
                                          goto LABEL_149;
                                        case 675:
                                          uint64_t v13 = *v8;
                                          long long v14 = "totalLbas";
                                          goto LABEL_77;
                                        case 676:
                                          uint64_t v13 = *v8;
                                          long long v14 = "bdrHostPingExtra";
                                          goto LABEL_77;
                                        case 677:
                                          uint64_t v13 = *v8;
                                          long long v14 = "magazineInstanceMeta";
                                          goto LABEL_77;
                                        default:
                                          switch(v7)
                                          {
                                            case 680:
                                              int v15 = "magazineFWVersion";
                                              uint64_t v16 = a1;
                                              int v17 = 680;
                                              goto LABEL_130;
                                            case 681:
                                              uint64_t v13 = *v8;
                                              long long v14 = "raidReconstructFailPMXUnsup";
                                              goto LABEL_77;
                                            case 682:
                                              uint64_t v13 = *v8;
                                              long long v14 = "raidReconstructFailBMXUnsup";
                                              goto LABEL_77;
                                            case 683:
                                              uint64_t v13 = *v8;
                                              long long v14 = "iBootNANDResets";
                                              goto LABEL_77;
                                            case 684:
                                              uint64_t v13 = *v8;
                                              long long v14 = "pcieClkreqHighTimeout";
                                              goto LABEL_77;
                                            case 687:
                                              int v15 = "cbdrInitSent";
                                              uint64_t v16 = a1;
                                              int v17 = 687;
                                              goto LABEL_130;
                                            case 688:
                                              uint64_t v13 = *v8;
                                              long long v14 = "cbdrPauseSent";
                                              goto LABEL_77;
                                            case 689:
                                              uint64_t v13 = *v8;
                                              long long v14 = "cbdrResumeSent";
                                              goto LABEL_77;
                                            case 690:
                                              uint64_t v13 = *v8;
                                              long long v14 = "cbdrGetResultSent";
                                              goto LABEL_77;
                                            case 691:
                                              uint64_t v13 = *v8;
                                              long long v14 = "cbdrEarlyExits";
                                              goto LABEL_77;
                                            case 694:
                                              int v15 = "cbdrRefreshGrades";
                                              uint64_t v16 = a1;
                                              int v17 = 694;
                                              goto LABEL_44;
                                            case 695:
                                              uint64_t v13 = *v8;
                                              long long v14 = "cbdrNotEnoughReads";
                                              goto LABEL_77;
                                            case 696:
                                              uint64_t v13 = *v8;
                                              long long v14 = "cbdrAborts";
                                              goto LABEL_77;
                                            case 697:
                                              uint64_t v13 = *v8;
                                              long long v14 = "TurboRaidHostClassifications";
                                              goto LABEL_77;
                                            case 698:
                                              uint64_t v13 = *v8;
                                              long long v14 = "TurboRaidInternalClassifications";
                                              goto LABEL_77;
                                            case 699:
                                              uint64_t v13 = *v8;
                                              long long v14 = "cbdrFullyDone";
                                              goto LABEL_77;
                                            case 702:
                                              int v15 = "vcurve";
                                              uint64_t v16 = a1;
                                              int v17 = 702;
                                              goto LABEL_283;
                                            case 703:
                                              int v15 = "injDepth";
                                              uint64_t v16 = a1;
                                              int v17 = 703;
                                              goto LABEL_281;
                                            case 704:
                                              uint64_t v13 = *v8;
                                              long long v14 = "logical_disk_occupied_promiles";
                                              goto LABEL_77;
                                            case 711:
                                              uint64_t v13 = *v8;
                                              long long v14 = "raidPrevFailedReconstructSkip";
                                              goto LABEL_77;
                                            case 712:
                                              uint64_t v13 = *v8;
                                              long long v14 = "TurboRaidSuccessfulHostAuxReads";
                                              goto LABEL_77;
                                            case 713:
                                              uint64_t v13 = *v8;
                                              long long v14 = "TurboRaidSuccessfulInternalAuxReads";
                                              goto LABEL_77;
                                            case 714:
                                              uint64_t v13 = *v8;
                                              long long v14 = "turboRaidClassificationReliabilityHost";
                                              goto LABEL_77;
                                            case 715:
                                              uint64_t v13 = *v8;
                                              long long v14 = "turboRaidClassificationReliabilityInternal";
                                              goto LABEL_77;
                                            case 716:
                                              uint64_t v13 = *v8;
                                              long long v14 = "turboRaidClassificationQualityHost";
                                              goto LABEL_77;
                                            case 717:
                                              uint64_t v13 = *v8;
                                              long long v14 = "turboRaidClassificationQualityInternal";
                                              goto LABEL_77;
                                            case 719:
                                              uint64_t v13 = *v8;
                                              long long v14 = "skinnyBandErases";
                                              goto LABEL_77;
                                            case 721:
                                              uint64_t v13 = *v8;
                                              long long v14 = "gcPDusterDestinations";
                                              goto LABEL_77;
                                            case 722:
                                              uint64_t v13 = *v8;
                                              long long v14 = "gcPDusterWrites";
                                              goto LABEL_77;
                                            case 730:
                                              uint64_t v13 = *v8;
                                              long long v14 = "rvFails";
                                              goto LABEL_77;
                                            case 737:
                                              uint64_t v13 = *v8;
                                              long long v14 = "TurboRaidFailedHostAuxReads";
                                              goto LABEL_77;
                                            case 738:
                                              uint64_t v13 = *v8;
                                              long long v14 = "TurboRaidFailedInternalAuxReads";
                                              goto LABEL_77;
                                            case 741:
                                              uint64_t v13 = *v8;
                                              long long v14 = "autoSkipTriggers";
                                              goto LABEL_77;
                                            case 742:
                                              uint64_t v13 = *v8;
                                              long long v14 = "autoSkipPlanes";
                                              goto LABEL_77;
                                            case 744:
                                              int v15 = "raidReconstructDurationHisto";
                                              uint64_t v16 = a1;
                                              int v17 = 744;
                                              goto LABEL_149;
                                            case 745:
                                              int v15 = "failsOnReconstructHisto";
                                              uint64_t v16 = a1;
                                              int v17 = 745;
                                              goto LABEL_149;
                                            case 746:
                                              uint64_t v13 = *v8;
                                              long long v14 = "bandKill_userFlattenExcessive";
                                              goto LABEL_77;
                                            case 747:
                                              uint64_t v13 = *v8;
                                              long long v14 = "bandKill_IntFlattenExcessive";
                                              goto LABEL_77;
                                            case 748:
                                              uint64_t v13 = *v8;
                                              long long v14 = "bandKill_userFlattenBalance";
                                              goto LABEL_77;
                                            case 749:
                                              uint64_t v13 = *v8;
                                              long long v14 = "bandKill_intFlattenBalance";
                                              goto LABEL_77;
                                            case 750:
                                              uint64_t v13 = *v8;
                                              long long v14 = "bandKill_formatVertExcessive";
                                              goto LABEL_77;
                                            case 751:
                                              uint64_t v13 = *v8;
                                              long long v14 = "bandKill_formatVertBalance";
                                              goto LABEL_77;
                                            case 753:
                                              uint64_t v13 = *v8;
                                              long long v14 = "cbdrNumSlowRefreshes";
                                              goto LABEL_77;
                                            case 754:
                                              uint64_t v13 = *v8;
                                              long long v14 = "cbdrNumFastRefreshes";
                                              goto LABEL_77;
                                            case 755:
                                              uint64_t v13 = *v8;
                                              long long v14 = "cbdrTotalRefreshValidity";
                                              goto LABEL_77;
                                            case 756:
                                              int v15 = "cbdrRefreshedAges";
                                              uint64_t v16 = a1;
                                              int v17 = 756;
                                              goto LABEL_673;
                                            case 758:
                                              uint64_t v13 = *v8;
                                              long long v14 = "cbdrSkippedBlocks";
                                              goto LABEL_77;
                                            case 759:
                                              int v15 = "cbdrScanPct";
                                              uint64_t v16 = a1;
                                              int v17 = 759;
                                              goto LABEL_102;
                                            case 760:
                                              uint64_t v13 = *v8;
                                              long long v14 = "raidSuccessfulBMXReconstructionInternal";
                                              goto LABEL_77;
                                            case 761:
                                              uint64_t v13 = *v8;
                                              long long v14 = "raidSuccessfulBMXReconstructionHost";
                                              goto LABEL_77;
                                            case 762:
                                              uint64_t v13 = *v8;
                                              long long v14 = "raidFailedBMXReconstructionInternal";
                                              goto LABEL_77;
                                            case 763:
                                              uint64_t v13 = *v8;
                                              long long v14 = "raidFailedBMXReconstructionHost";
                                              goto LABEL_77;
                                            case 764:
                                              uint64_t v13 = *v8;
                                              long long v14 = "ricSPRVFail";
                                              goto LABEL_77;
                                            case 765:
                                              uint64_t v13 = *v8;
                                              long long v14 = "ricMPRVFail";
                                              goto LABEL_77;
                                            case 767:
                                              int v15 = "cbdrRefreshGradesSLC";
                                              uint64_t v16 = a1;
                                              int v17 = 767;
                                              goto LABEL_44;
                                            case 768:
                                              int v15 = "cbdrRefreshedAgesSLC";
                                              uint64_t v16 = a1;
                                              int v17 = 768;
LABEL_673:
                                              double v18 = v8;
                                              unsigned int v19 = 9;
                                              goto LABEL_51;
                                            case 769:
                                              int v15 = "cbdrScanPctSLC";
                                              uint64_t v16 = a1;
                                              int v17 = 769;
                                              goto LABEL_102;
                                            case 770:
                                              int v15 = "cpuBurstLength";
                                              uint64_t v16 = a1;
                                              int v17 = 770;
                                              goto LABEL_149;
                                            case 771:
                                              uint64_t v13 = *v8;
                                              long long v14 = "autoSkipRaidRecoFail";
                                              goto LABEL_77;
                                            case 772:
                                              int v15 = "dmReasonsSlc";
                                              uint64_t v16 = a1;
                                              int v17 = 772;
                                              goto LABEL_283;
                                            case 773:
                                              int v15 = "dmReasonsTlc";
                                              uint64_t v16 = a1;
                                              int v17 = 773;
                                              goto LABEL_283;
                                            case 774:
                                              uint64_t v13 = *v8;
                                              long long v14 = "raidReconstructFailBMXAbort";
                                              goto LABEL_77;
                                            case 775:
                                              uint64_t v13 = *v8;
                                              long long v14 = "bandKill_fatBindingNoBlocks";
                                              goto LABEL_77;
                                            case 776:
                                              uint64_t v13 = *v8;
                                              long long v14 = "bandKill_fatBindingFewBlocks";
                                              goto LABEL_77;
                                            default:
                                              switch(v7)
                                              {
                                                case 777:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "numBadBootBlocks";
                                                  goto LABEL_77;
                                                case 778:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "snapshotCPUHigh";
                                                  goto LABEL_77;
                                                case 779:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "snapshotCPULow";
                                                  goto LABEL_77;
                                                case 780:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "gcWithoutBMs";
                                                  goto LABEL_77;
                                                case 781:
                                                  int v15 = "gcSearchTimeHistory";
                                                  uint64_t v16 = a1;
                                                  int v17 = 781;
                                                  goto LABEL_44;
                                                case 785:
                                                  int v15 = "gcSearchPortion";
                                                  uint64_t v16 = a1;
                                                  int v17 = 785;
                                                  goto LABEL_213;
                                                case 786:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "raidReconstructFailBmxMp";
                                                  goto LABEL_77;
                                                case 787:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "raidReconstructFailBmx";
                                                  goto LABEL_77;
                                                case 788:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "raidReconstructFailBMXUECC";
                                                  goto LABEL_77;
                                                case 789:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "raidReconstructFailBMXBlank";
                                                  goto LABEL_77;
                                                case 790:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "raidPrevFailedReconstructBmxMpSkip";
                                                  goto LABEL_77;
                                                case 792:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "numTLCFatBands";
                                                  goto LABEL_77;
                                                case 793:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "fatValidity";
                                                  goto LABEL_77;
                                                case 794:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "fatTotal";
                                                  goto LABEL_77;
                                                case 798:
                                                  int v15 = "raidBMXFailP";
                                                  uint64_t v16 = a1;
                                                  int v17 = 798;
                                                  goto LABEL_144;
                                                case 799:
                                                  int v15 = "raidBMXFailUECC";
                                                  uint64_t v16 = a1;
                                                  int v17 = 799;
                                                  goto LABEL_144;
                                                case 804:
                                                  int v15 = "raidBMXFailNoSPBX";
                                                  uint64_t v16 = a1;
                                                  int v17 = 804;
                                                  goto LABEL_144;
                                                case 806:
                                                  int v15 = "raidBMXFailBlank";
                                                  uint64_t v16 = a1;
                                                  int v17 = 806;
                                                  goto LABEL_144;
                                                case 809:
                                                  int v15 = "raidBMXFailUnsup";
                                                  uint64_t v16 = a1;
                                                  int v17 = 809;
                                                  goto LABEL_144;
                                                case 811:
                                                  int v15 = "raidBMXFailMpSkip";
                                                  uint64_t v16 = a1;
                                                  int v17 = 811;
                                                  goto LABEL_144;
                                                case 812:
                                                  int v15 = "raidBMXFailAbort";
                                                  uint64_t v16 = a1;
                                                  int v17 = 812;
                                                  goto LABEL_144;
                                                case 813:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "TurboRaidIsEnabled";
                                                  goto LABEL_77;
                                                case 814:
                                                  int v15 = "raidBMXFailOther";
                                                  uint64_t v16 = a1;
                                                  int v17 = 814;
                                                  goto LABEL_144;
                                                case 815:
                                                  int v15 = "raidBMXSuccess";
                                                  uint64_t v16 = a1;
                                                  int v17 = 815;
                                                  goto LABEL_144;
                                                case 816:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "skinnyBandsExtraDip";
                                                  goto LABEL_77;
                                                case 821:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "writeAmp";
                                                  goto LABEL_77;
                                                case 822:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "ricMaxClogOnlyPages";
                                                  goto LABEL_77;
                                                case 823:
                                                  int v15 = "readClassifyStatusesHisto";
                                                  uint64_t v16 = a1;
                                                  int v17 = 823;
                                                  goto LABEL_130;
                                                case 824:
                                                  int v15 = "readWithAuxStatusesHisto";
                                                  uint64_t v16 = a1;
                                                  int v17 = 824;
                                                  goto LABEL_44;
                                                case 825:
                                                  int v15 = "readReconstructStatusesHisto";
                                                  uint64_t v16 = a1;
                                                  int v17 = 825;
                                                  goto LABEL_44;
                                                case 826:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "bdrBackupChecks";
                                                  goto LABEL_77;
                                                case 827:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "ricExceedClogOnlyPagesTH";
                                                  goto LABEL_77;
                                                case 828:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "numDipFailures";
                                                  goto LABEL_77;
                                                case 831:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "prefetchNextRange";
                                                  goto LABEL_77;
                                                case 862:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "raidSuccessfulSkip";
                                                  goto LABEL_77;
                                                case 863:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "raidFailedSkip";
                                                  goto LABEL_77;
                                                case 864:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "raidSkipAttempts";
                                                  goto LABEL_77;
                                                case 865:
                                                  int v15 = "timeOfThrottlingPerLevel";
                                                  uint64_t v16 = a1;
                                                  int v17 = 865;
                                                  goto LABEL_213;
                                                case 866:
                                                  int v15 = "timeOfThrottlingPerReadLevel";
                                                  uint64_t v16 = a1;
                                                  int v17 = 866;
                                                  goto LABEL_213;
                                                case 867:
                                                  int v15 = "timeOfThrottlingPerWriteLevel";
                                                  uint64_t v16 = a1;
                                                  int v17 = 867;
                                                  goto LABEL_213;
                                                case 868:
                                                  int v15 = "dmReasonsSlc_1bc";
                                                  uint64_t v16 = a1;
                                                  int v17 = 868;
                                                  goto LABEL_283;
                                                case 869:
                                                  int v15 = "dmReasonsTlc_1bc";
                                                  uint64_t v16 = a1;
                                                  int v17 = 869;
                                                  goto LABEL_283;
                                                case 870:
                                                  int v15 = "dmReasonsSlc_1bc_he";
                                                  uint64_t v16 = a1;
                                                  int v17 = 870;
                                                  goto LABEL_283;
                                                case 871:
                                                  int v15 = "dmReasonsTlc_1bc_he";
                                                  uint64_t v16 = a1;
                                                  int v17 = 871;
                                                  goto LABEL_283;
                                                case 876:
                                                  int v15 = "dmReasonsSlc_mbc";
                                                  uint64_t v16 = a1;
                                                  int v17 = 876;
                                                  goto LABEL_283;
                                                case 877:
                                                  int v15 = "dmReasonsTlc_mbc";
                                                  uint64_t v16 = a1;
                                                  int v17 = 877;
                                                  goto LABEL_283;
                                                case 883:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "clogEmptyProgramms";
                                                  goto LABEL_77;
                                                case 884:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "oslcHwCloseBand";
                                                  goto LABEL_77;
                                                case 891:
                                                  int v15 = "turboRaidSuccessAuxPartition";
                                                  uint64_t v16 = a1;
                                                  int v17 = 891;
                                                  goto LABEL_123;
                                                case 892:
                                                  int v15 = "turboRaidFailAuxPartition";
                                                  uint64_t v16 = a1;
                                                  int v17 = 892;
                                                  goto LABEL_123;
                                                case 893:
                                                  int v15 = "turboRaidClassifyQualPartition";
                                                  uint64_t v16 = a1;
                                                  int v17 = 893;
                                                  goto LABEL_123;
                                                case 894:
                                                  int v15 = "turboRaidClassifyRelPartition";
                                                  uint64_t v16 = a1;
                                                  int v17 = 894;
                                                  goto LABEL_123;
                                                case 895:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "IND_pool_freeMinSilo";
                                                  goto LABEL_77;
                                                case 896:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "autoSweepBlocks";
                                                  goto LABEL_77;
                                                case 897:
                                                  int v15 = "wcWrFragSizes";
                                                  uint64_t v16 = a1;
                                                  int v17 = 897;
                                                  goto LABEL_213;
                                                case 898:
                                                  int v15 = "indStateAcrossGcDidNoL";
                                                  uint64_t v16 = a1;
                                                  int v17 = 898;
                                                  goto LABEL_213;
                                                case 899:
                                                  int v15 = "indStateAcrossGcDidL";
                                                  uint64_t v16 = a1;
                                                  int v17 = 899;
                                                  goto LABEL_213;
                                                case 900:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "turboRaidNoClassifyDueToWasRetire";
                                                  goto LABEL_77;
                                                case 901:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "turboRaidNoClassifyDueToOpenBand";
                                                  goto LABEL_77;
                                                case 902:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "turboRaidNoClassifyDueToQualityBlock";
                                                  goto LABEL_77;
                                                case 903:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "turboRaidGbbOpenBand";
                                                  goto LABEL_77;
                                                case 904:
                                                  uint64_t v13 = *v8;
                                                  long long v14 = "turboRaidGbbShouldRetireOnRefresh";
                                                  goto LABEL_77;
                                                case 905:
                                                  int v15 = "turboRaidRelPerBlock";
                                                  uint64_t v16 = a1;
                                                  int v17 = 905;
                                                  goto LABEL_213;
                                                case 906:
                                                  int v15 = "turboRaidRelBetweenRefreshesPerBlock";
                                                  uint64_t v16 = a1;
                                                  int v17 = 906;
                                                  goto LABEL_213;
                                                default:
                                                  if (v7 <= 1039)
                                                  {
                                                    switch(v7)
                                                    {
                                                      case 907:
                                                        int v15 = "turboRaidMaxRelBetweenRefreshesPerBlock";
                                                        uint64_t v16 = a1;
                                                        int v17 = 907;
                                                        goto LABEL_213;
                                                      case 908:
                                                        int v15 = "turboRaidMinRelBetweenRefreshesPerBlock";
                                                        uint64_t v16 = a1;
                                                        int v17 = 908;
                                                        goto LABEL_213;
                                                      case 909:
                                                      case 910:
                                                      case 911:
                                                      case 912:
                                                      case 913:
                                                      case 914:
                                                      case 915:
                                                      case 916:
                                                      case 917:
                                                      case 924:
                                                      case 925:
                                                      case 926:
                                                      case 927:
                                                      case 928:
                                                      case 929:
                                                      case 936:
                                                      case 941:
                                                      case 945:
                                                      case 946:
                                                      case 947:
                                                      case 949:
                                                      case 950:
                                                      case 952:
                                                      case 954:
                                                      case 955:
                                                      case 956:
                                                      case 957:
                                                      case 958:
                                                      case 959:
                                                      case 960:
                                                      case 963:
                                                      case 964:
                                                      case 965:
                                                      case 966:
                                                      case 968:
                                                      case 969:
                                                      case 970:
                                                        goto LABEL_824;
                                                      case 918:
                                                        int v15 = "turboRaidMaxCyclesBetweenRel";
                                                        uint64_t v16 = a1;
                                                        int v17 = 918;
                                                        goto LABEL_213;
                                                      case 919:
                                                        int v15 = "turboRaidMinCyclesBetweenRel";
                                                        uint64_t v16 = a1;
                                                        int v17 = 919;
                                                        goto LABEL_213;
                                                      case 920:
                                                        int v15 = "turboRaidAuxPerBlock";
                                                        uint64_t v16 = a1;
                                                        int v17 = 920;
                                                        goto LABEL_213;
                                                      case 921:
                                                        int v15 = "turboRaidAuxBetweenRefreshesPerBlock";
                                                        uint64_t v16 = a1;
                                                        int v17 = 921;
                                                        goto LABEL_213;
                                                      case 922:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "turboRaidRelLockMark";
                                                        goto LABEL_77;
                                                      case 923:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "turboRaidAuxLockMark";
                                                        goto LABEL_77;
                                                      case 930:
                                                        int v15 = "turboRaidMaxCyclesBetweenAux";
                                                        uint64_t v16 = a1;
                                                        int v17 = 930;
                                                        goto LABEL_213;
                                                      case 931:
                                                        int v15 = "turboRaidMinCyclesBetweenAux";
                                                        uint64_t v16 = a1;
                                                        int v17 = 931;
                                                        goto LABEL_213;
                                                      case 932:
                                                        int v15 = "turboRaidLastRelPECycles";
                                                        uint64_t v16 = a1;
                                                        int v17 = 932;
                                                        goto LABEL_213;
                                                      case 933:
                                                        int v15 = "turboRaidRelQualPECycles";
                                                        uint64_t v16 = a1;
                                                        int v17 = 933;
                                                        goto LABEL_213;
                                                      case 934:
                                                        int v15 = "turboRaidLastAuxPECycles";
                                                        uint64_t v16 = a1;
                                                        int v17 = 934;
                                                        goto LABEL_213;
                                                      case 935:
                                                        int v15 = "turboRaidAuxQualPECycles";
                                                        uint64_t v16 = a1;
                                                        int v17 = 935;
                                                        goto LABEL_213;
                                                      case 937:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "turboRaidPEFailAfterRel";
                                                        goto LABEL_77;
                                                      case 938:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "turboRaidPEFailAfterAux";
                                                        goto LABEL_77;
                                                      case 939:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "dvfmVotesCPU";
                                                        goto LABEL_77;
                                                      case 940:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "dvfmVotesBandwidth";
                                                        goto LABEL_77;
                                                      case 942:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "maxSLCEndurance";
                                                        goto LABEL_77;
                                                      case 943:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "maxMixedEndurance";
                                                        goto LABEL_77;
                                                      case 944:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "maxNativeEndurance";
                                                        goto LABEL_77;
                                                      case 948:
                                                        int v15 = "assertHistory";
                                                        uint64_t v16 = a1;
                                                        int v17 = 948;
                                                        double v18 = v8;
                                                        unsigned int v19 = 40;
                                                        goto LABEL_51;
                                                      case 951:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "asp3Support";
                                                        goto LABEL_77;
                                                      case 953:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "numCrossTempRaidUecc";
                                                        goto LABEL_77;
                                                      case 961:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "osBuildStr";
                                                        goto LABEL_77;
                                                      case 962:
                                                        uint64_t v13 = *v8;
                                                        long long v14 = "raidConfig";
                                                        goto LABEL_77;
                                                      case 967:
                                                        int v15 = "indTrimFrags";
                                                        uint64_t v16 = a1;
                                                        int v17 = 967;
                                                        goto LABEL_281;
                                                      case 971:
                                                        int v15 = "indUsedFrags";
                                                        uint64_t v16 = a1;
                                                        int v17 = 971;
                                                        goto LABEL_281;
                                                      default:
                                                        switch(v7)
                                                        {
                                                          case 996:
                                                            uint64_t v13 = *v8;
                                                            id v20 = (void *)a1;
                                                            long long v14 = "clogFindFail";
                                                            goto LABEL_78;
                                                          case 997:
                                                            uint64_t v13 = *v8;
                                                            id v20 = (void *)a1;
                                                            long long v14 = "clogFindBlank";
                                                            goto LABEL_78;
                                                          case 998:
                                                            uint64_t v13 = *v8;
                                                            id v20 = (void *)a1;
                                                            long long v14 = "clogFindUnc";
                                                            goto LABEL_78;
                                                          case 999:
                                                            uint64_t v13 = *v8;
                                                            id v20 = (void *)a1;
                                                            long long v14 = "clogFindUnexpected";
                                                            goto LABEL_78;
                                                          case 1001:
                                                            uint64_t v16 = a1;
                                                            int v17 = 1001;
                                                            int v15 = "clogReplayFailReason";
                                                            goto LABEL_149;
                                                          case 1002:
                                                            uint64_t v13 = *v8;
                                                            id v20 = (void *)a1;
                                                            long long v14 = "clogReplayTransientError";
                                                            goto LABEL_78;
                                                          case 1003:
                                                            uint64_t v13 = *v8;
                                                            id v20 = (void *)a1;
                                                            long long v14 = "clogReplaySpfError";
                                                            goto LABEL_78;
                                                          case 1015:
                                                            uint64_t v16 = a1;
                                                            int v17 = 1015;
                                                            int v15 = "eanEarlyBootUeccPage";
                                                            goto LABEL_144;
                                                          case 1016:
                                                            uint64_t v13 = *v8;
                                                            id v20 = (void *)a1;
                                                            long long v14 = "eanEarlyBootNumUeccPages";
                                                            goto LABEL_78;
                                                          case 1017:
                                                            uint64_t v13 = *v8;
                                                            id v20 = (void *)a1;
                                                            long long v14 = "eanEarlyBootUeccMultiplane";
                                                            goto LABEL_78;
                                                          default:
                                                            goto LABEL_824;
                                                        }
                                                    }
                                                  }
                                                  if (v7 <= 1137)
                                                  {
                                                    if (v7 > 1104)
                                                    {
                                                      if (v7 > 1115)
                                                      {
                                                        if (v7 == 1116)
                                                        {
                                                          uint64_t v16 = a1;
                                                          int v17 = 1116;
                                                          int v15 = "gcwamp";
LABEL_283:
                                                          double v18 = v8;
                                                          unsigned int v19 = 32;
                                                          goto LABEL_51;
                                                        }
                                                        if (v7 == 1137)
                                                        {
                                                          uint64_t v13 = *v8;
                                                          id v20 = (void *)a1;
                                                          long long v14 = "numOfToUnhappySwitches";
                                                          goto LABEL_78;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if (v7 == 1105)
                                                        {
                                                          uint64_t v16 = a1;
                                                          int v17 = 1105;
                                                          int v15 = "hostReadSequential";
                                                          goto LABEL_831;
                                                        }
                                                        if (v7 == 1106)
                                                        {
                                                          uint64_t v16 = a1;
                                                          int v17 = 1106;
                                                          int v15 = "GCReadSequential";
LABEL_831:
                                                          double v18 = v8;
                                                          unsigned int v19 = 14;
                                                          goto LABEL_51;
                                                        }
                                                      }
                                                    }
                                                    else
                                                    {
                                                      if (v7 <= 1041)
                                                      {
                                                        uint64_t v16 = a1;
                                                        if (v7 == 1040)
                                                        {
                                                          int v17 = 1040;
                                                          int v15 = "bandsAgeBinsV2";
                                                        }
                                                        else
                                                        {
                                                          int v17 = 1041;
                                                          int v15 = "bandsAgeBinsSnapshot";
                                                        }
                                                        double v18 = v8;
                                                        unsigned int v19 = 31;
                                                        goto LABEL_51;
                                                      }
                                                      if (v7 == 1042)
                                                      {
                                                        uint64_t v16 = a1;
                                                        int v17 = 1042;
                                                        int v15 = "bandsAgeBinsReadSectors";
                                                        double v18 = v8;
                                                        unsigned int v19 = 15;
LABEL_51:
                                                        sub_100019C88(v16, v17, v15, v18, v19);
                                                        goto LABEL_79;
                                                      }
                                                      if (v7 == 1080)
                                                      {
                                                        uint64_t v13 = *v8;
                                                        id v20 = (void *)a1;
                                                        long long v14 = "raidForceClogLoad";
                                                        goto LABEL_78;
                                                      }
                                                    }
LABEL_824:
                                                    switch(v7)
                                                    {
                                                      case 1196:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1196;
                                                        int v15 = "poDetectGBBedTotalCost";
                                                        goto LABEL_102;
                                                      case 1197:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1197;
                                                        int v15 = "poDetectGBBedAge";
                                                        goto LABEL_44;
                                                      case 1198:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1198;
                                                        int v15 = "poDetectPERemovalMostSevereCost";
                                                        goto LABEL_130;
                                                      case 1199:
                                                        uint64_t v13 = *v8;
                                                        id v20 = (void *)a1;
                                                        long long v14 = "poDetectCurrentSize";
                                                        goto LABEL_78;
                                                      case 1200:
                                                      case 1203:
                                                      case 1204:
                                                      case 1205:
                                                      case 1206:
                                                      case 1207:
                                                      case 1208:
                                                      case 1209:
                                                      case 1210:
                                                      case 1212:
                                                      case 1213:
                                                      case 1214:
                                                      case 1219:
                                                      case 1220:
                                                      case 1221:
                                                      case 1222:
                                                      case 1223:
                                                        break;
                                                      case 1201:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1201;
                                                        int v15 = "gcVerticalSuccssfulAlignments";
                                                        goto LABEL_144;
                                                      case 1202:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1202;
                                                        int v15 = "gcVerticalNoAlignmentDueToMissingSegs";
                                                        goto LABEL_144;
                                                      case 1211:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1211;
                                                        int v15 = "forcedAllocationSmallEraseQ";
                                                        goto LABEL_844;
                                                      case 1215:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1215;
                                                        int v15 = "hostWritesPerThrottleZone";
                                                        goto LABEL_102;
                                                      case 1216:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1216;
                                                        int v15 = "tlcWLPerDipAvgPEC";
                                                        goto LABEL_844;
                                                      case 1217:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1217;
                                                        int v15 = "tlcWLPerDipMaxPEC";
                                                        goto LABEL_844;
                                                      case 1218:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1218;
                                                        int v15 = "tlcWLPerDipMinPEC";
                                                        goto LABEL_844;
                                                      case 1224:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1224;
                                                        int v15 = "apfsValidLbaOvershoot";
                                                        goto LABEL_93;
                                                      default:
                                                        switch(v7)
                                                        {
                                                          case 1232:
                                                            uint64_t v13 = *v8;
                                                            id v20 = (void *)a1;
                                                            long long v14 = "eanFastSize";
                                                            goto LABEL_78;
                                                          case 1233:
                                                            uint64_t v13 = *v8;
                                                            id v20 = (void *)a1;
                                                            long long v14 = "eanNumSlcEvictions";
                                                            goto LABEL_78;
                                                          case 1234:
                                                            uint64_t v13 = *v8;
                                                            id v20 = (void *)a1;
                                                            long long v14 = "eanNumForcedCompress";
                                                            goto LABEL_78;
                                                          case 1235:
                                                          case 1236:
                                                          case 1237:
                                                          case 1238:
                                                          case 1239:
                                                          case 1240:
                                                          case 1242:
                                                          case 1243:
                                                          case 1245:
                                                            goto LABEL_79;
                                                          case 1241:
                                                            uint64_t v16 = a1;
                                                            int v17 = 1241;
                                                            int v15 = "s2rTimeHisto";
                                                            goto LABEL_44;
                                                          case 1244:
                                                            uint64_t v13 = *v8;
                                                            id v20 = (void *)a1;
                                                            long long v14 = "calendarTimeWentBackward";
                                                            goto LABEL_78;
                                                          case 1246:
                                                            uint64_t v16 = a1;
                                                            int v17 = 1246;
                                                            int v15 = "bandsUeccCrossTempHisto";
                                                            goto LABEL_149;
                                                          default:
                                                            if (v7 != 1190) {
                                                              goto LABEL_79;
                                                            }
                                                            uint64_t v16 = a1;
                                                            int v17 = 1190;
                                                            int v15 = "powerDownTime";
                                                            break;
                                                        }
                                                        goto LABEL_281;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    switch(v7)
                                                    {
                                                      case 1147:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1147;
                                                        int v15 = "gc_concurrent_dw_gc12";
                                                        goto LABEL_844;
                                                      case 1148:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1148;
                                                        int v15 = "gc_concurrent_dw_gc1";
                                                        goto LABEL_844;
                                                      case 1149:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1149;
                                                        int v15 = "gc_concurrent_dw_gc2";
LABEL_844:
                                                        double v18 = v8;
                                                        unsigned int v19 = 24;
                                                        goto LABEL_51;
                                                      case 1150:
                                                      case 1151:
                                                      case 1152:
                                                      case 1153:
                                                      case 1154:
                                                      case 1155:
                                                      case 1156:
                                                      case 1159:
                                                      case 1160:
                                                      case 1161:
                                                      case 1162:
                                                      case 1163:
                                                      case 1164:
                                                      case 1165:
                                                      case 1166:
                                                      case 1167:
                                                      case 1170:
                                                      case 1173:
                                                      case 1174:
                                                      case 1175:
                                                      case 1176:
                                                      case 1177:
                                                      case 1178:
                                                        goto LABEL_824;
                                                      case 1157:
                                                        uint64_t v13 = *v8;
                                                        id v20 = (void *)a1;
                                                        long long v14 = "eanMaxForceROTimeMs";
                                                        break;
                                                      case 1158:
                                                        uint64_t v13 = *v8;
                                                        id v20 = (void *)a1;
                                                        long long v14 = "eanMaxForceRORecoTimeMs";
                                                        break;
                                                      case 1168:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1168;
                                                        int v15 = "poDetectPERemovalTotalCost";
                                                        goto LABEL_123;
                                                      case 1169:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1169;
                                                        int v15 = "poDetectEmptySpotRemovalTotalCost";
                                                        goto LABEL_123;
                                                      case 1171:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1171;
                                                        int v15 = "poDetectEmptySpotRemovalAge";
                                                        goto LABEL_44;
                                                      case 1172:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1172;
                                                        int v15 = "poDetectGBBedMostSevereCost";
                                                        goto LABEL_130;
                                                      case 1179:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1179;
                                                        int v15 = "gc_cur_dw_gc1";
                                                        goto LABEL_144;
                                                      case 1180:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1180;
                                                        int v15 = "gc_cur_dw_gc2";
                                                        goto LABEL_144;
                                                      case 1181:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1181;
                                                        int v15 = "gc_cur_dw_gc3";
                                                        goto LABEL_144;
                                                      case 1182:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1182;
                                                        int v15 = "gc_tot_dw_gc1";
                                                        goto LABEL_144;
                                                      case 1183:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1183;
                                                        int v15 = "gc_tot_dw_gc2";
                                                        goto LABEL_144;
                                                      case 1184:
                                                        uint64_t v13 = *v8;
                                                        id v20 = (void *)a1;
                                                        long long v14 = "unhappy_state";
                                                        break;
                                                      case 1185:
                                                        uint64_t v13 = *v8;
                                                        id v20 = (void *)a1;
                                                        long long v14 = "unhappy_level";
                                                        break;
                                                      default:
                                                        if (v7 == 1138)
                                                        {
                                                          uint64_t v13 = *v8;
                                                          id v20 = (void *)a1;
                                                          long long v14 = "numOfToHappySwitches";
                                                        }
                                                        else
                                                        {
                                                          if (v7 != 1189) {
                                                            goto LABEL_824;
                                                          }
                                                          uint64_t v13 = *v8;
                                                          id v20 = (void *)a1;
                                                          long long v14 = "lastLbaFormatTime";
                                                        }
                                                        break;
                                                    }
LABEL_78:
                                                    sub_10002CC38(v20, "", v14, v13);
                                                  }
LABEL_79:
                                                  a2 = &v8[v10];
                                                  unsigned int v6 = v11 - v10;
                                                  if (v11 != v10) {
                                                    continue;
                                                  }
                                                  uint64_t result = 1;
                                                  break;
                                              }
                                              break;
                                          }
                                          break;
                                      }
                                      break;
                                  }
                                  break;
                              }
                              break;
                          }
                          break;
                      }
                      break;
                  }
                  break;
              }
              break;
          }
          break;
      }
    }
    else
    {
      uint64_t result = 0;
      *(_DWORD *)(a1 + 32) = 0;
    }
    return result;
  }
}

uint64_t sub_100019C88(uint64_t result, int a2, const char *a3, uint64_t *a4, unsigned int a5)
{
  int v7 = (void *)result;
  uint64_t v8 = *a4;
  if (a2 <= 44)
  {
    switch(a2)
    {
      case 4:
        *(void *)(result + 72) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 5:
      case 6:
      case 8:
      case 9:
      case 10:
      case 11:
      case 14:
      case 15:
      case 16:
        goto LABEL_41;
      case 7:
        *(void *)(result + 64) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 12:
        *(void *)(result + 144) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 13:
        *(void *)(result + 152) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 17:
        *(void *)(result + 88) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 18:
        *(void *)(result + 104) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 19:
        *(void *)(result + 96) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 20:
        *(void *)(result + 112) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      default:
        if (a2 != 28) {
          goto LABEL_41;
        }
        *(void *)(result + 168) = v8;
        if (!a5) {
          return result;
        }
        goto LABEL_42;
    }
  }
  switch(a2)
  {
    case '-':
      *(void *)(result + 176) = v8;
      if (a5) {
        goto LABEL_42;
      }
      return result;
    case '.':
    case '/':
    case '6':
    case '7':
      goto LABEL_41;
    case '0':
      *(void *)(result + 80) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '1':
      *(_DWORD *)(result + 56) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '2':
      *(_DWORD *)(result + 52) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '3':
      *(_DWORD *)(result + 48) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '4':
      *(_DWORD *)(result + 44) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '5':
      *(_DWORD *)(result + 32) = v8;
      goto LABEL_41;
    case '8':
      *(void *)(result + 160) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    default:
      if (a2 != 265) {
        goto LABEL_41;
      }
      if (a5)
      {
        uint64_t v9 = a5;
        unint64_t v10 = (void *)(result + 184);
        unsigned int v11 = a4;
        do
        {
          uint64_t v12 = *v11++;
          *v10++ = v12;
          --v9;
        }
        while (v9);
LABEL_41:
        if (a5)
        {
LABEL_42:
          if (a5 == 1)
          {
            return sub_10002CC38((void *)result, "", a3, v8);
          }
          else
          {
            uint64_t v13 = 0;
            uint64_t v14 = a5;
            do
            {
              snprintf(__str, 0x64uLL, "%d", v13);
              __str[100] = 0;
              uint64_t result = sub_10002CC38(v7, a3, __str, a4[v13++]);
            }
            while (v14 != v13);
          }
        }
      }
      return result;
  }
}

double sub_100019F68(uint64_t a1)
{
  id v2 = *(void **)a1;
  if (v2)
  {
    do
    {
      id v3 = (void *)v2[14];
      free(v2);
      id v2 = v3;
    }
    while (v3);
  }
  float v4 = *(void **)(a1 + 16);
  if (v4)
  {
    do
    {
      float v5 = (void *)v4[14];
      free(v4);
      float v4 = v5;
    }
    while (v5);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_100019FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t *)a2;
  uint64_t v10 = 0;
  unsigned int v11 = a3 >> 3;
  *(_OWORD *)__str = 0u;
  long long v23 = 0u;
  do
  {
LABEL_2:
    if (!v11) {
      return v10;
    }
    unint64_t v13 = *v8++;
    int v12 = v13;
    unint64_t v14 = HIDWORD(v13);
    --v11;
  }
  while (!HIDWORD(v13));
  if (v12 == 0xFFFF || v12 > 0x30000000 || v11 < v14) {
    return v10;
  }
  switch(v12)
  {
    case 1:
      if (sub_10002CAAC(a1, "", "version", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: version(1) cannot add 1 element to context";
      goto LABEL_161;
    case 2:
      if (sub_10002CAAC(a1, "", "hostWriteXacts", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWriteXacts(2) cannot add 1 element to context";
      goto LABEL_161;
    case 3:
      if (sub_10002CAAC(a1, "", "hostReadXacts", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostReadXacts(3) cannot add 1 element to context";
      goto LABEL_161;
    case 4:
      if (sub_10002CAAC(a1, "", "hostWrites", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWrites(4) cannot add 1 element to context";
      goto LABEL_161;
    case 5:
      if (sub_10002CAAC(a1, "", "hostWritesDyn", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWritesDyn(5) cannot add 1 element to context";
      goto LABEL_161;
    case 6:
      if (sub_10002CAAC(a1, "", "hostWritesStatic", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWritesStatic(6) cannot add 1 element to context";
      goto LABEL_161;
    case 7:
      if (sub_10002CAAC(a1, "", "hostReads", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostReads(7) cannot add 1 element to context";
      goto LABEL_161;
    case 8:
      if (sub_10002CAAC(a1, "", "validLbas", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: validLbas(8) cannot add 1 element to context";
      goto LABEL_161;
    case 9:
      if (sub_10002CAAC(a1, "", "shutdowns", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: shutdowns(9) cannot add 1 element to context";
      goto LABEL_161;
    case 10:
      if (sub_10002CAAC(a1, "", "boots", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: boots(10) cannot add 1 element to context";
      goto LABEL_161;
    case 11:
      if (sub_10002CAAC(a1, "", "uncleanBoots", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: uncleanBoots(11) cannot add 1 element to context";
      goto LABEL_161;
    case 12:
      if (sub_10002CAAC(a1, "", "IND_pool_free", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: IND_pool_free(12) cannot add 1 element to context";
      goto LABEL_161;
    case 13:
      if (sub_10002CAAC(a1, "", "IND_pool_count", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: IND_pool_count(13) cannot add 1 element to context";
      goto LABEL_161;
    case 14:
      if (v14 != 10) {
        sub_100013EE0("ASPFTLParseBufferToCxt: hostWriteLogHisto(14): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      }
      if (v14 >= 0xA) {
        unsigned int v18 = 10;
      }
      else {
        unsigned int v18 = v14;
      }
      if (sub_100025F08(a1, "hostWriteLogHisto_", (uint64_t)v8, 8u, v18)) {
        goto LABEL_110;
      }
      unsigned int v19 = "ASPFTLParseBufferToCxt: hostWriteLogHisto(14): Cannot add 10 elements to context";
      goto LABEL_2616;
    case 15:
      if (v14 != 10) {
        sub_100013EE0("ASPFTLParseBufferToCxt: hostReadLogHisto(15): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      }
      if (v14 >= 0xA) {
        unsigned int v18 = 10;
      }
      else {
        unsigned int v18 = v14;
      }
      if (sub_100025F08(a1, "hostReadLogHisto_", (uint64_t)v8, 8u, v18)) {
        goto LABEL_110;
      }
      unsigned int v19 = "ASPFTLParseBufferToCxt: hostReadLogHisto(15): Cannot add 10 elements to context";
      goto LABEL_2616;
    case 16:
      if (sub_10002CAAC(a1, "", "gcWrites", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: gcWrites(16) cannot add 1 element to context";
      goto LABEL_161;
    case 17:
      if (sub_10002CAAC(a1, "", "wearLevMoves", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: wearLevMoves(17) cannot add 1 element to context";
      goto LABEL_161;
    case 18:
      if (sub_10002CAAC(a1, "", "nandWrites", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: nandWrites(18) cannot add 1 element to context";
      goto LABEL_161;
    case 19:
      if (sub_10002CAAC(a1, "", "nandReads", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: nandReads(19) cannot add 1 element to context";
      goto LABEL_161;
    case 20:
      if (sub_10002CAAC(a1, "", "bandErases", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: bandErases(20) cannot add 1 element to context";
      goto LABEL_161;
    case 22:
      if (sub_10002CAAC(a1, "", "numPfail", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numPfail(22) cannot add 1 element to context";
      goto LABEL_161;
    case 23:
      if (sub_10002CAAC(a1, "", "numEfail", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numEfail(23) cannot add 1 element to context";
      goto LABEL_161;
    case 24:
      if (sub_10002CAAC(a1, "", "numPerformanceRefreshes", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numPerformanceRefreshes(24) cannot add 1 element to context";
      goto LABEL_161;
    case 27:
      if (sub_10002CAAC(a1, "", "hostWritesMeta", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWritesMeta(27) cannot add 1 element to context";
      goto LABEL_161;
    case 28:
      if (sub_10002CAAC(a1, "", "numSleepOps", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numSleepOps(28) cannot add 1 element to context";
      goto LABEL_161;
    case 30:
      if (sub_10002CAAC(a1, "", "cntTimeWentBackWardOnBoot", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cntTimeWentBackWardOnBoot(30) cannot add 1 element to context";
      goto LABEL_161;
    case 31:
      if (sub_10002CAAC(a1, "", "cntTimeWentBackWard", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cntTimeWentBackWard(31) cannot add 1 element to context";
      goto LABEL_161;
    case 34:
      if (sub_10002CAAC(a1, "", "powerOnHours", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: powerOnHours(34) cannot add 1 element to context";
      goto LABEL_161;
    case 36:
      if (sub_10002CAAC(a1, "", "smartCritWarnings", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: smartCritWarnings(36) cannot add 1 element to context";
      goto LABEL_161;
    case 37:
      if (sub_10002CAAC(a1, "", "numFlushes", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numFlushes(37) cannot add 1 element to context";
      goto LABEL_161;
    case 38:
      if (sub_10002CAAC(a1, "", "numUnmap", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numUnmap(38) cannot add 1 element to context";
      goto LABEL_161;
    case 39:
      if (sub_10002CAAC(a1, "", "numUnmapSec", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numUnmapSec(39) cannot add 1 element to context";
      goto LABEL_161;
    case 41:
      if (sub_10002CAAC(a1, "", "clogProgram", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: clogProgram(41) cannot add 1 element to context";
      goto LABEL_161;
    case 42:
      if (sub_10002CAAC(a1, "", "clogPFail", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: clogPFail(42) cannot add 1 element to context";
      goto LABEL_161;
    case 43:
      if (sub_10002CAAC(a1, "", "clogRead", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: clogRead(43) cannot add 1 element to context";
      goto LABEL_161;
    case 44:
      if (sub_10002CAAC(a1, "", "clogRFail", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: clogRFail(44) cannot add 1 element to context";
      goto LABEL_161;
    case 45:
      if (sub_10002CAAC(a1, "", "maxHighEnduranceBlockErases", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: maxHighEnduranceBlockErases(45) cannot add 1 element to context";
      goto LABEL_161;
    case 46:
      if (sub_10002CAAC(a1, "", "numFactoryBad", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numFactoryBad(46) cannot add 1 element to context";
      goto LABEL_161;
    case 47:
      if (sub_10002CAAC(a1, "", "numGrownBad", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numGrownBad(47) cannot add 1 element to context";
      goto LABEL_161;
    case 48:
      if (sub_10002CAAC(a1, "", "numFreeVirtualBlocks", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numFreeVirtualBlocks(48) cannot add 1 element to context";
      goto LABEL_161;
    case 49:
      if (sub_10002CAAC(a1, "", "bytesPerPage", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: bytesPerPage(49) cannot add 1 element to context";
      goto LABEL_161;
    case 50:
      if (sub_10002CAAC(a1, "", "pagesPerVirtualBlock", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: pagesPerVirtualBlock(50) cannot add 1 element to context";
      goto LABEL_161;
    case 51:
      if (sub_10002CAAC(a1, "", "blocksPerVirtualBlock", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: blocksPerVirtualBlock(51) cannot add 1 element to context";
      goto LABEL_161;
    case 52:
      if (sub_10002CAAC(a1, "", "numVirtualBlocks", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numVirtualBlocks(52) cannot add 1 element to context";
      goto LABEL_161;
    case 53:
      if (sub_10002CAAC(a1, "", "exportVersion", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: exportVersion(53) cannot add 1 element to context";
      goto LABEL_161;
    case 54:
      if (v14 != 100) {
        sub_100013EE0("ASPFTLParseBufferToCxt: ECBins(54): (#100) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      }
      if (v14 >= 0x64) {
        unsigned int v18 = 100;
      }
      else {
        unsigned int v18 = v14;
      }
      if (sub_100025F08(a1, "ECBins_", (uint64_t)v8, 8u, v18)) {
        goto LABEL_110;
      }
      unsigned int v19 = "ASPFTLParseBufferToCxt: ECBins(54): Cannot add 100 elements to context";
      goto LABEL_2616;
    case 55:
      if (v14 != 100) {
        sub_100013EE0("ASPFTLParseBufferToCxt: RCBins(55): (#100) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      }
      if (v14 >= 0x64) {
        unsigned int v18 = 100;
      }
      else {
        unsigned int v18 = v14;
      }
      if (sub_100025F08(a1, "RCBins_", (uint64_t)v8, 8u, v18)) {
        goto LABEL_110;
      }
      unsigned int v19 = "ASPFTLParseBufferToCxt: RCBins(55): Cannot add 100 elements to context";
      goto LABEL_2616;
    case 56:
      if (sub_10002CAAC(a1, "", "utilFormatTime", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: utilFormatTime(56) cannot add 1 element to context";
      goto LABEL_161;
    case 57:
      if (sub_10002CAAC(a1, "", "calendarTime", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: calendarTime(57) cannot add 1 element to context";
      goto LABEL_161;
    case 58:
      if (sub_10002CAAC(a1, "", "wallTime", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: wallTime(58) cannot add 1 element to context";
      goto LABEL_161;
    case 59:
      if (sub_10002CAAC(a1, "", "cmdq_flush_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_flush_us(59) cannot add 1 element to context";
      goto LABEL_161;
    case 60:
      if (sub_10002CAAC(a1, "", "cmdq_unmap_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_unmap_us(60) cannot add 1 element to context";
      goto LABEL_161;
    case 61:
      if (sub_10002CAAC(a1, "", "cmdq_pri0_r_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri0_r_us(61) cannot add 1 element to context";
      goto LABEL_161;
    case 62:
      if (sub_10002CAAC(a1, "", "cmdq_pri0_w_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri0_w_us(62) cannot add 1 element to context";
      goto LABEL_161;
    case 63:
      if (sub_10002CAAC(a1, "", "cmdq_pri1_r_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri1_r_us(63) cannot add 1 element to context";
      goto LABEL_161;
    case 64:
      if (sub_10002CAAC(a1, "", "cmdq_pri1_w_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri1_w_us(64) cannot add 1 element to context";
      goto LABEL_161;
    case 65:
      if (sub_10002CAAC(a1, "", "cmdq_pri2_r_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri2_r_us(65) cannot add 1 element to context";
      goto LABEL_161;
    case 66:
      if (sub_10002CAAC(a1, "", "cmdq_pri2_w_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri2_w_us(66) cannot add 1 element to context";
      goto LABEL_161;
    case 67:
      if (sub_10002CAAC(a1, "", "cmdq_pri3_r_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri3_r_us(67) cannot add 1 element to context";
      goto LABEL_161;
    case 68:
      if (sub_10002CAAC(a1, "", "cmdq_pri3_w_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri3_w_us(68) cannot add 1 element to context";
      goto LABEL_161;
    case 69:
      if (sub_10002CAAC(a1, "", "host_idle_ms", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: host_idle_ms(69) cannot add 1 element to context";
      goto LABEL_161;
    case 70:
      if (sub_10002CAAC(a1, "", "cmd_hysteresis_window_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmd_hysteresis_window_us(70) cannot add 1 element to context";
      goto LABEL_161;
    case 71:
      if (sub_10002CAAC(a1, "", "cmd_lowPriHoldoffDelay_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmd_lowPriHoldoffDelay_us(71) cannot add 1 element to context";
      goto LABEL_161;
    case 72:
      if (sub_10002CAAC(a1, "", "cmd_lowPriHoldoffEnabled", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmd_lowPriHoldoffEnabled(72) cannot add 1 element to context";
      goto LABEL_161;
    default:
      switch(v12)
      {
        case 73:
          if (sub_100025F08(a1, "cmd_expedite_num_success", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: cmd_expedite_num_success(73) cannot add 1 element to context";
          goto LABEL_161;
        case 75:
          if (sub_100025F08(a1, "cmd_expedite_num_failures", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: cmd_expedite_num_failures(75) cannot add 1 element to context";
          goto LABEL_161;
        case 76:
          if (sub_100025F08(a1, "num_trimerase", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: num_trimerase(76) cannot add 1 element to context";
          goto LABEL_161;
        case 77:
          if (sub_100025F08(a1, "staticSizeInMB", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: staticSizeInMB(77) cannot add 1 element to context";
          goto LABEL_161;
        case 80:
          if (sub_100025F08(a1, "slcInvalidations", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: slcInvalidations(80) cannot add 1 element to context";
          goto LABEL_161;
        case 81:
          if (sub_100025F08(a1, "slcGCInvalidations", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: slcGCInvalidations(81) cannot add 1 element to context";
          goto LABEL_161;
        case 82:
          if (sub_100025F08(a1, "hostSectorsDuringGCon", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: hostSectorsDuringGCon(82) cannot add 1 element to context";
          goto LABEL_161;
        case 83:
          if (sub_100025F08(a1, "highWaterMarkSLCUsed", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: highWaterMarkSLCUsed(83) cannot add 1 element to context";
          goto LABEL_161;
        case 84:
          if (sub_100025F08(a1, "intermediateBandErases", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: intermediateBandErases(84) cannot add 1 element to context";
          goto LABEL_161;
        case 85:
          if (sub_100025F08(a1, "intermediatePartitionStart", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: intermediatePartitionStart(85) cannot add 1 element to context";
          goto LABEL_161;
        case 86:
          if (sub_100025F08(a1, "userPartitionStart", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: userPartitionStart(86) cannot add 1 element to context";
          goto LABEL_161;
        case 87:
          if (sub_100025F08(a1, "iolog_lbas", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: iolog_lbas(87) cannot add 1 element to context";
          goto LABEL_161;
        case 88:
          if (v14 != 10) {
            sub_100013EE0("ASPFTLParseBufferToCxt: bandsAgeBins(88): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA) {
            unsigned int v18 = 10;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "bandsAgeBins_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: bandsAgeBins(88): Cannot add 10 elements to context";
          goto LABEL_2616;
        case 89:
          if (v14 != 10) {
            sub_100013EE0("ASPFTLParseBufferToCxt: intermediateBandsAgeBins(89): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA) {
            unsigned int v18 = 10;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "intermediateBandsAgeBins_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: intermediateBandsAgeBins(89): Cannot add 10 elements to context";
          goto LABEL_2616;
        case 90:
          if (v14 != 160) {
            sub_100013EE0("ASPFTLParseBufferToCxt: qosPerCmdQ(90): (#160) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA0) {
            unsigned int v18 = 160;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "qosPerCmdQ_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: qosPerCmdQ(90): Cannot add 160 elements to context";
          goto LABEL_2616;
        case 91:
          if (v14 != 10) {
            sub_100013EE0("ASPFTLParseBufferToCxt: maxQosPerCmdQ(91): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA) {
            unsigned int v18 = 10;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "maxQosPerCmdQ_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: maxQosPerCmdQ(91): Cannot add 10 elements to context";
          goto LABEL_2616;
        case 92:
          if (sub_100025F08(a1, "shutdownDuringGC", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: shutdownDuringGC(92) cannot add 1 element to context";
          goto LABEL_161;
        case 93:
          if (v14 != 3) {
            sub_100013EE0("ASPFTLParseBufferToCxt: numBandsRefreshedForAgePerTier(93): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 3) {
            unsigned int v18 = 3;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "numBandsRefreshedForAgePerTier_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: numBandsRefreshedForAgePerTier(93): Cannot add 3 elements to context";
          goto LABEL_2616;
        case 94:
          if (v14 != 20) {
            sub_100013EE0("ASPFTLParseBufferToCxt: bdrDeltaHot(94): (#20) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0x14) {
            unsigned int v18 = 20;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "bdrDeltaHot_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: bdrDeltaHot(94): Cannot add 20 elements to context";
          goto LABEL_2616;
        case 95:
          if (sub_100025F08(a1, "numRefreshOnClockLoss", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numRefreshOnClockLoss(95) cannot add 1 element to context";
          goto LABEL_161;
        case 96:
          if (sub_100025F08(a1, "numRefreshOnErrNandRefreshRel", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numRefreshOnErrNandRefreshRel(96) cannot add 1 element to context";
          goto LABEL_161;
        case 97:
          if (sub_100025F08(a1, "numBGRefreshMoves", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numBGRefreshMoves(97) cannot add 1 element to context";
          goto LABEL_161;
        case 98:
          if (sub_100025F08(a1, "numBGPaddingMoves", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numBGPaddingMoves(98) cannot add 1 element to context";
          goto LABEL_161;
        case 99:
          if (sub_100025F08(a1, "hostWritesPhoto", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: hostWritesPhoto(99) cannot add 1 element to context";
          goto LABEL_161;
        case 100:
          if (sub_100025F08(a1, "INDPooldFree", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDPooldFree(100) cannot add 1 element to context";
          goto LABEL_161;
        case 101:
          if (sub_100025F08(a1, "INDContigCount", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDContigCount(101) cannot add 1 element to context";
          goto LABEL_161;
        case 102:
          if (sub_100025F08(a1, "INDValidContigCount", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDValidContigCount(102) cannot add 1 element to context";
          goto LABEL_161;
        case 103:
          if (sub_100025F08(a1, "INDMinContigSize", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDMinContigSize(103) cannot add 1 element to context";
          goto LABEL_161;
        case 104:
          if (sub_100025F08(a1, "INDMaxContigSize", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDMaxContigSize(104) cannot add 1 element to context";
          goto LABEL_161;
        case 105:
          if (sub_100025F08(a1, "INDAveContigSize", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDAveContigSize(105) cannot add 1 element to context";
          goto LABEL_161;
        case 106:
          if (sub_100025F08(a1, "INDpoolSize", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDpoolSize(106) cannot add 1 element to context";
          goto LABEL_161;
        case 107:
          if (sub_100025F08(a1, "pushSyncWrites", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: pushSyncWrites(107) cannot add 1 element to context";
          goto LABEL_161;
        case 109:
          if (sub_100025F08(a1, "cmd_rw_hysteresis_us", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: cmd_rw_hysteresis_us(109) cannot add 1 element to context";
          goto LABEL_161;
        case 110:
          if (sub_100025F08(a1, "photoFlowMode", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: photoFlowMode(110) cannot add 1 element to context";
          goto LABEL_161;
        case 112:
          if (sub_100025F08(a1, "numBandsPaddedForAge", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numBandsPaddedForAge(112) cannot add 1 element to context";
          goto LABEL_161;
        case 113:
          if (v14 != 4) {
            sub_100013EE0("ASPFTLParseBufferToCxt: bandsPerHostFlow(113): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "bandsPerHostFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: bandsPerHostFlow(113): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 114:
          if (v14 != 5) {
            sub_100013EE0("ASPFTLParseBufferToCxt: bandsPerSpecialFlow(114): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 5) {
            unsigned int v18 = 5;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "bandsPerSpecialFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: bandsPerSpecialFlow(114): Cannot add 5 elements to context";
          goto LABEL_2616;
        case 115:
          if (v14 != 4) {
            sub_100013EE0("ASPFTLParseBufferToCxt: secsPerHostFlow(115): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "secsPerHostFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: secsPerHostFlow(115): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 116:
          if (v14 != 5) {
            sub_100013EE0("ASPFTLParseBufferToCxt: secsPerSpecialFlow(116): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 5) {
            unsigned int v18 = 5;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "secsPerSpecialFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: secsPerSpecialFlow(116): Cannot add 5 elements to context";
          goto LABEL_2616;
        case 118:
          if (v14 != 4) {
            sub_100013EE0("ASPFTLParseBufferToCxt: overWritesPerHostFlow(118): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "overWritesPerHostFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: overWritesPerHostFlow(118): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 119:
          if (v14 != 5) {
            sub_100013EE0("ASPFTLParseBufferToCxt: overWritesPerSpecialFlow(119): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 5) {
            unsigned int v18 = 5;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "overWritesPerSpecialFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: overWritesPerSpecialFlow(119): Cannot add 5 elements to context";
          goto LABEL_2616;
        case 120:
          if (v14 != 10) {
            sub_100013EE0("ASPFTLParseBufferToCxt: padSectorsPerFlow(120): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA) {
            unsigned int v18 = 10;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "padSectorsPerFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: padSectorsPerFlow(120): Cannot add 10 elements to context";
          goto LABEL_2616;
        case 121:
          if (v14 != 4) {
            sub_100013EE0("ASPFTLParseBufferToCxt: padSizes(121): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "padSizes_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: padSizes(121): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 122:
          if (v14 != 4) {
            sub_100013EE0("ASPFTLParseBufferToCxt: unmapsPerHostFlow(122): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "unmapsPerHostFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: unmapsPerHostFlow(122): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 123:
          if (v14 != 5) {
            sub_100013EE0("ASPFTLParseBufferToCxt: unmapsPerSpecialFlow(123): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 5) {
            unsigned int v18 = 5;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "unmapsPerSpecialFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: unmapsPerSpecialFlow(123): Cannot add 5 elements to context";
          goto LABEL_2616;
        case 124:
          if (v14 != 2) {
            sub_100013EE0("ASPFTLParseBufferToCxt: coldestCycle(124): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 2) {
            unsigned int v18 = 2;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "coldestCycle_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: coldestCycle(124): Cannot add 2 elements to context";
          goto LABEL_2616;
        case 125:
          if (v14 != 2) {
            sub_100013EE0("ASPFTLParseBufferToCxt: hottestCycle(125): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 2) {
            unsigned int v18 = 2;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "hottestCycle_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: hottestCycle(125): Cannot add 2 elements to context";
          goto LABEL_2616;
        case 126:
          if (sub_100025F08(a1, "gcLonlyWrites", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcLonlyWrites(126) cannot add 1 element to context";
          goto LABEL_161;
        case 127:
          if (sub_100025F08(a1, "gcPLWrites", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcPLWrites(127) cannot add 1 element to context";
          goto LABEL_161;
        case 129:
          if (sub_100025F08(a1, "pagesPerVirtualBlockSlc", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: pagesPerVirtualBlockSlc(129) cannot add 1 element to context";
          goto LABEL_161;
        case 130:
          if (sub_100025F08(a1, "bdrPadding", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: bdrPadding(130) cannot add 1 element to context";
          goto LABEL_161;
        case 131:
          if (v14 != 8) {
            sub_100013EE0("ASPFTLParseBufferToCxt: errInjCounters(131): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 8) {
            unsigned int v18 = 8;
          }
          else {
            unsigned int v18 = v14;
          }
          if (sub_100025F08(a1, "errInjCounters_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: errInjCounters(131): Cannot add 8 elements to context";
          goto LABEL_2616;
        case 132:
          if (sub_100025F08(a1, "raidSuccessfulReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulReconstructionInternal(132) cannot add 1 element to context";
          goto LABEL_161;
        case 133:
          if (sub_100025F08(a1, "raidSuccessfulReconstructionHost", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulReconstructionHost(133) cannot add 1 element to context";
          goto LABEL_161;
        case 134:
          if (sub_100025F08(a1, "raidFailedReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidFailedReconstructionInternal(134) cannot add 1 element to context";
          goto LABEL_161;
        case 135:
          if (sub_100025F08(a1, "raidFailedReconstructionHost", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidFailedReconstructionHost(135) cannot add 1 element to context";
          goto LABEL_161;
        case 136:
          if (sub_100025F08(a1, "raidBandsPerHostFlow", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidBandsPerHostFlow(136) cannot add 1 element to context";
          goto LABEL_161;
        case 137:
          if (sub_100025F08(a1, "raidSecsPerHostFlow", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidSecsPerHostFlow(137) cannot add 1 element to context";
          goto LABEL_161;
        case 138:
          if (sub_100025F08(a1, "gcFreeL", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcFreeL(138) cannot add 1 element to context";
          goto LABEL_161;
        case 139:
          if (sub_100025F08(a1, "gcDestinations", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcDestinations(139) cannot add 1 element to context";
          goto LABEL_161;
        case 140:
          if (sub_100025F08(a1, "gcFragments", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcFragments(140) cannot add 1 element to context";
          goto LABEL_161;
        case 141:
          if (sub_100025F08(a1, "numMemChoke", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numMemChoke(141) cannot add 1 element to context";
          goto LABEL_161;
        case 142:
          if (sub_100025F08(a1, "maxMemChokeDuration", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: maxMemChokeDuration(142) cannot add 1 element to context";
          goto LABEL_161;
        case 143:
          if (sub_100025F08(a1, "memChokeDuration", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: memChokeDuration(143) cannot add 1 element to context";
          goto LABEL_161;
        default:
          switch(v12)
          {
            case 144:
              if (sub_100025F08(a1, "numMemExtreme", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numMemExtreme(144) cannot add 1 element to context";
              goto LABEL_161;
            case 145:
              if (sub_100025F08(a1, "maxMemExtremeDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: maxMemExtremeDuration(145) cannot add 1 element to context";
              goto LABEL_161;
            case 146:
              if (sub_100025F08(a1, "memExtremeDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: memExtremeDuration(146) cannot add 1 element to context";
              goto LABEL_161;
            case 147:
              if (sub_100025F08(a1, "bandGetsExtreme", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: bandGetsExtreme(147) cannot add 1 element to context";
              goto LABEL_161;
            case 148:
              if (sub_100025F08(a1, "bandGetsLow", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: bandGetsLow(148) cannot add 1 element to context";
              goto LABEL_161;
            case 149:
              if (sub_100025F08(a1, "numHostChoke", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numHostChoke(149) cannot add 1 element to context";
              goto LABEL_161;
            case 152:
              if (sub_100025F08(a1, "AbortSkip_ProgramError", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortSkip_ProgramError(152) cannot add 1 element to context";
              goto LABEL_161;
            case 153:
              if (sub_100025F08(a1, "AbortSkip_ReadErrorOpenBand", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortSkip_ReadErrorOpenBand(153) cannot add 1 element to context";
              goto LABEL_161;
            case 154:
              if (sub_100025F08(a1, "AbortSkip_FailedRebuildingParity", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortSkip_FailedRebuildingParity(154) cannot add 1 element to context";
              goto LABEL_161;
            case 155:
              if (sub_100025F08(a1, "AbortPad_OpenRefreshBand", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_OpenRefreshBand(155) cannot add 1 element to context";
              goto LABEL_161;
            case 156:
              if (sub_100025F08(a1, "AbortPad_CloseBands", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_CloseBands(156) cannot add 1 element to context";
              goto LABEL_161;
            case 157:
              if (sub_100025F08(a1, "AbortPad_SetPhoto", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_SetPhoto(157) cannot add 1 element to context";
              goto LABEL_161;
            case 158:
              if (sub_100025F08(a1, "AbortPad_GcNoSource", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_GcNoSource(158) cannot add 1 element to context";
              goto LABEL_161;
            case 159:
              if (sub_100025F08(a1, "AbortPad_Format", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_Format(159) cannot add 1 element to context";
              goto LABEL_161;
            case 160:
              if (sub_100025F08(a1, "nandDiscoveryDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: nandDiscoveryDuration(160) cannot add 1 element to context";
              goto LABEL_161;
            case 161:
              if (sub_100025F08(a1, "coreCCEnableDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: coreCCEnableDuration(161) cannot add 1 element to context";
              goto LABEL_161;
            case 163:
              if (sub_100025F08(a1, "coreOpenDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: coreOpenDuration(163) cannot add 1 element to context";
              goto LABEL_161;
            case 164:
              if (sub_100025F08(a1, "coreWritableDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: coreWritableDuration(164) cannot add 1 element to context";
              goto LABEL_161;
            case 165:
              if (sub_100025F08(a1, "coreClogLoadDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: coreClogLoadDuration(165) cannot add 1 element to context";
              goto LABEL_161;
            case 167:
              if (sub_100025F08(a1, "bulkPFail", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: bulkPFail(167) cannot add 1 element to context";
              goto LABEL_161;
            case 169:
              if (sub_100025F08(a1, "bulkRFail", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: bulkRFail(169) cannot add 1 element to context";
              goto LABEL_161;
            case 172:
              if (sub_100025F08(a1, "raidSmartErrors", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: raidSmartErrors(172) cannot add 1 element to context";
              goto LABEL_161;
            case 182:
              if (sub_100025F08(a1, "internalUeccs", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: internalUeccs(182) cannot add 1 element to context";
              goto LABEL_161;
            case 183:
              if (sub_100025F08(a1, "e2eFail", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: e2eFail(183) cannot add 1 element to context";
              goto LABEL_161;
            case 184:
              if (sub_100025F08(a1, "TempSensorMax", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: TempSensorMax(184) cannot add 1 element to context";
              goto LABEL_161;
            case 185:
              if (sub_100025F08(a1, "TempSensorMin", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: TempSensorMin(185) cannot add 1 element to context";
              goto LABEL_161;
            case 186:
              if (sub_100025F08(a1, "powerUpFromDDR", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: powerUpFromDDR(186) cannot add 1 element to context";
              goto LABEL_161;
            case 187:
              if (sub_100025F08(a1, "numMemLow", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numMemLow(187) cannot add 1 element to context";
              goto LABEL_161;
            case 188:
              if (sub_100025F08(a1, "maxMemLowDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: maxMemLowDuration(188) cannot add 1 element to context";
              goto LABEL_161;
            case 189:
              if (sub_100025F08(a1, "memLowDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: memLowDuration(189) cannot add 1 element to context";
              goto LABEL_161;
            case 190:
              if (sub_100025F08(a1, "numFences", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numFences(190) cannot add 1 element to context";
              goto LABEL_161;
            case 191:
              if (sub_100025F08(a1, "hostPassiveIO", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: hostPassiveIO(191) cannot add 1 element to context";
              goto LABEL_161;
            case 192:
              if (sub_100025F08(a1, "odtsMax", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: odtsMax(192) cannot add 1 element to context";
              goto LABEL_161;
            case 193:
              if (sub_100025F08(a1, "defragMFromOrphans", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: defragMFromOrphans(193) cannot add 1 element to context";
              goto LABEL_161;
            case 194:
              if (sub_100025F08(a1, "defragMFromFragments", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: defragMFromFragments(194) cannot add 1 element to context";
              goto LABEL_161;
            case 195:
              if (sub_100025F08(a1, "defragMTime", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: defragMTime(195) cannot add 1 element to context";
              goto LABEL_161;
            case 196:
              if (sub_100025F08(a1, "defragMMaxTime", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: defragMMaxTime(196) cannot add 1 element to context";
              goto LABEL_161;
            case 197:
              if (sub_100025F08(a1, "raidFailedLbaMismatch", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: raidFailedLbaMismatch(197) cannot add 1 element to context";
              goto LABEL_161;
            case 198:
              if (sub_100025F08(a1, "numSyscfgWrites", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numSyscfgWrites(198) cannot add 1 element to context";
              goto LABEL_161;
            case 199:
              if (sub_100025F08(a1, "indmbUnitsXfer", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: indmbUnitsXfer(199) cannot add 1 element to context";
              goto LABEL_161;
            case 200:
              if (sub_100025F08(a1, "indmbUnitsCache", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: indmbUnitsCache(200) cannot add 1 element to context";
              goto LABEL_161;
            case 201:
              if (sub_100025F08(a1, "indmbUnitsInd", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: indmbUnitsInd(201) cannot add 1 element to context";
              goto LABEL_161;
            case 202:
              if (sub_100025F08(a1, "wcacheFS_Mbytes", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFS_Mbytes(202) cannot add 1 element to context";
              goto LABEL_161;
            case 203:
              if (sub_100025F08(a1, "wcacheDS_Mbytes", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheDS_Mbytes(203) cannot add 1 element to context";
              goto LABEL_161;
            case 204:
              if (sub_100025F08(a1, "powerOnSeconds", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: powerOnSeconds(204) cannot add 1 element to context";
              goto LABEL_161;
            case 205:
              if (sub_100025F08(a1, "numUnknownTokenHostRead", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numUnknownTokenHostRead(205) cannot add 1 element to context";
              goto LABEL_161;
            case 206:
              if (sub_100025F08(a1, "numUnmmapedTokenHostRead", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numUnmmapedTokenHostRead(206) cannot add 1 element to context";
              goto LABEL_161;
            case 207:
              if (v14 != 16) {
                sub_100013EE0("ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerLevel(207): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              }
              if (v14 >= 0x10) {
                unsigned int v18 = 16;
              }
              else {
                unsigned int v18 = v14;
              }
              if (sub_100025F08(a1, "numOfThrottlingEntriesPerLevel_", (uint64_t)v8, 8u, v18)) {
                goto LABEL_110;
              }
              unsigned int v19 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerLevel(207): Cannot add 16 elements to context";
              goto LABEL_2616;
            case 208:
              if (sub_100025F08(a1, "wcacheFS_MbytesMin", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesMin(208) cannot add 1 element to context";
              goto LABEL_161;
            case 209:
              if (sub_100025F08(a1, "wcacheFS_MbytesMax", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesMax(209) cannot add 1 element to context";
              goto LABEL_161;
            case 210:
              if (sub_100025F08(a1, "prepareForShutdownFailCounter", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: prepareForShutdownFailCounter(210) cannot add 1 element to context";
              goto LABEL_161;
            case 211:
              if (sub_100025F08(a1, "lpsrEntry", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: lpsrEntry(211) cannot add 1 element to context";
              goto LABEL_161;
            case 212:
              if (sub_100025F08(a1, "lpsrExit", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: lpsrExit(212) cannot add 1 element to context";
              goto LABEL_161;
            case 213:
              if (v14 != 8) {
                sub_100013EE0("ASPFTLParseBufferToCxt: crcInternalReadFail(213): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              }
              if (v14 >= 8) {
                unsigned int v18 = 8;
              }
              else {
                unsigned int v18 = v14;
              }
              if (sub_100025F08(a1, "crcInternalReadFail_", (uint64_t)v8, 8u, v18)) {
                goto LABEL_110;
              }
              unsigned int v19 = "ASPFTLParseBufferToCxt: crcInternalReadFail(213): Cannot add 8 elements to context";
              goto LABEL_2616;
            case 214:
              if (sub_100025F08(a1, "wcacheFSEvictCnt", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFSEvictCnt(214) cannot add 1 element to context";
              goto LABEL_161;
            case 215:
              if (sub_100025F08(a1, "wcacheFSEvictSize", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFSEvictSize(215) cannot add 1 element to context";
              goto LABEL_161;
            case 216:
              if (sub_100025F08(a1, "wcacheFSWr", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFSWr(216) cannot add 1 element to context";
              goto LABEL_161;
            case 217:
              if (sub_100025F08(a1, "wcacheDSWr", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheDSWr(217) cannot add 1 element to context";
              goto LABEL_161;
            case 218:
              if (v14 != 10) {
                sub_100013EE0("ASPFTLParseBufferToCxt: wcacheFSEvictSizeLogDist(218): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              }
              if (v14 >= 0xA) {
                unsigned int v18 = 10;
              }
              else {
                unsigned int v18 = v14;
              }
              if (sub_100025F08(a1, "wcacheFSEvictSizeLogDist_", (uint64_t)v8, 8u, v18)) {
                goto LABEL_110;
              }
              unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheFSEvictSizeLogDist(218): Cannot add 10 elements to context";
              goto LABEL_2616;
            case 219:
              if (sub_100025F08(a1, "prepareForShutdownTimeoutCounter", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: prepareForShutdownTimeoutCounter(219) cannot add 1 element to context";
              goto LABEL_161;
            case 220:
              if (sub_100025F08(a1, "prepareForShutdownCancelCounter", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: prepareForShutdownCancelCounter(220) cannot add 1 element to context";
              goto LABEL_161;
            case 221:
              if (sub_100025F08(a1, "RD_openBandCount", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: RD_openBandCount(221) cannot add 1 element to context";
              goto LABEL_161;
            case 222:
              if (sub_100025F08(a1, "RD_openBandNops", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: RD_openBandNops(222) cannot add 1 element to context";
              goto LABEL_161;
            case 223:
              if (sub_100025F08(a1, "RD_closedBandEvictCount", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: RD_closedBandEvictCount(223) cannot add 1 element to context";
              goto LABEL_161;
            default:
              switch(v12)
              {
                case 224:
                  if (sub_100025F08(a1, "RD_closedBandEvictSectors", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: RD_closedBandEvictSectors(224) cannot add 1 element to context";
                  goto LABEL_161;
                case 225:
                  if (sub_100025F08(a1, "RD_closedBandFragmentCount", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: RD_closedBandFragmentCount(225) cannot add 1 element to context";
                  goto LABEL_161;
                case 226:
                  if (sub_100025F08(a1, "RD_closedBandFragmentSectors", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: RD_closedBandFragmentSectors(226) cannot add 1 element to context";
                  goto LABEL_161;
                case 227:
                  if (v14 != 10) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: wcacheFSOverWrLogSizeCnts(227): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0xA) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "wcacheFSOverWrLogSizeCnts_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheFSOverWrLogSizeCnts(227): Cannot add 10 elements to context";
                  goto LABEL_2616;
                case 228:
                  if (v14 != 4) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: wcacheFSOverWrSizeByFlow(228): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 4) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "wcacheFSOverWrSizeByFlow_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheFSOverWrSizeByFlow(228): Cannot add 4 elements to context";
                  goto LABEL_2616;
                case 229:
                  if (v14 != 2) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: indmbXferCountTo(229): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 2) {
                    unsigned int v18 = 2;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "indmbXferCountTo_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: indmbXferCountTo(229): Cannot add 2 elements to context";
                  goto LABEL_2616;
                case 230:
                  if (v14 != 2) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: indmbAccumulatedTimeBetweenXfers(230): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 2) {
                    unsigned int v18 = 2;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "indmbAccumulatedTimeBetweenXfers_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: indmbAccumulatedTimeBetweenXfers(230): Cannot add 2 elements to context";
                  goto LABEL_2616;
                case 231:
                  if (sub_100025F08(a1, "maxGracefulBootTimeMs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: maxGracefulBootTimeMs(231) cannot add 1 element to context";
                  goto LABEL_161;
                case 232:
                  if (sub_100025F08(a1, "maxUngracefulBootTimeMs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: maxUngracefulBootTimeMs(232) cannot add 1 element to context";
                  goto LABEL_161;
                case 233:
                  if (sub_100025F08(a1, "averageGracefulBootTimeMs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: averageGracefulBootTimeMs(233) cannot add 1 element to context";
                  goto LABEL_161;
                case 234:
                  if (sub_100025F08(a1, "averageUngracefulBootTimeMs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: averageUngracefulBootTimeMs(234) cannot add 1 element to context";
                  goto LABEL_161;
                case 235:
                  if (v14 != 8) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: gracefulBootTimeLogMs(235): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 8) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "gracefulBootTimeLogMs_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: gracefulBootTimeLogMs(235): Cannot add 8 elements to context";
                  goto LABEL_2616;
                case 236:
                  if (v14 != 8) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: ungracefulBootTimeLogMs(236): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 8) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "ungracefulBootTimeLogMs_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: ungracefulBootTimeLogMs(236): Cannot add 8 elements to context";
                  goto LABEL_2616;
                case 237:
                  if (v14 != 4) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: CalibrationCount(237): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 4) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "CalibrationCount_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: CalibrationCount(237): Cannot add 4 elements to context";
                  goto LABEL_2616;
                case 238:
                  if (sub_100025F08(a1, "CalibrationLastTmp", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: CalibrationLastTmp(238) cannot add 1 element to context";
                  goto LABEL_161;
                case 239:
                  if (sub_100025F08(a1, "CalibrationMaxTmp", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: CalibrationMaxTmp(239) cannot add 1 element to context";
                  goto LABEL_161;
                case 240:
                  if (sub_100025F08(a1, "CalibrationMinTmp", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: CalibrationMinTmp(240) cannot add 1 element to context";
                  goto LABEL_161;
                case 241:
                  if (sub_100025F08(a1, "ungracefulBootWorstIndicator", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: ungracefulBootWorstIndicator(241) cannot add 1 element to context";
                  goto LABEL_161;
                case 242:
                  if (sub_100025F08(a1, "metaMismatchReread", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: metaMismatchReread(242) cannot add 1 element to context";
                  goto LABEL_161;
                case 243:
                  if (sub_100025F08(a1, "numS3SleepOps", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: numS3SleepOps(243) cannot add 1 element to context";
                  goto LABEL_161;
                case 244:
                  if (sub_100025F08(a1, "odtsCurrent", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: odtsCurrent(244) cannot add 1 element to context";
                  goto LABEL_161;
                case 245:
                  if (sub_100025F08(a1, "prefetchReads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: prefetchReads(245) cannot add 1 element to context";
                  goto LABEL_161;
                case 246:
                  if (sub_100025F08(a1, "prefetchHits", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: prefetchHits(246) cannot add 1 element to context";
                  goto LABEL_161;
                case 247:
                  if (sub_100025F08(a1, "prefetchWritesInvalidation", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: prefetchWritesInvalidation(247) cannot add 1 element to context";
                  goto LABEL_161;
                case 248:
                  if (sub_100025F08(a1, "indmbUnitsTotal", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: indmbUnitsTotal(248) cannot add 1 element to context";
                  goto LABEL_161;
                case 249:
                  if (sub_100025F08(a1, "selfThrottlingEngage", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: selfThrottlingEngage(249) cannot add 1 element to context";
                  goto LABEL_161;
                case 250:
                  if (sub_100025F08(a1, "selfThrottlingDisengage", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: selfThrottlingDisengage(250) cannot add 1 element to context";
                  goto LABEL_161;
                case 252:
                  if (sub_100025F08(a1, "AbortSkip_WlpMode", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: AbortSkip_WlpMode(252) cannot add 1 element to context";
                  goto LABEL_161;
                case 253:
                  if (sub_100025F08(a1, "hostWritesWlpMode", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: hostWritesWlpMode(253) cannot add 1 element to context";
                  goto LABEL_161;
                case 254:
                  if (sub_100025F08(a1, "numClogDoubleUnc", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: numClogDoubleUnc(254) cannot add 1 element to context";
                  goto LABEL_161;
                case 256:
                  if (sub_100025F08(a1, "AbortPad_WlpMode", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: AbortPad_WlpMode(256) cannot add 1 element to context";
                  goto LABEL_161;
                case 257:
                  if (sub_100025F08(a1, "bonfireIntermediateBandErases", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireIntermediateBandErases(257) cannot add 1 element to context";
                  goto LABEL_161;
                case 258:
                  if (sub_100025F08(a1, "bonfireUserBandErases", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireUserBandErases(258) cannot add 1 element to context";
                  goto LABEL_161;
                case 259:
                  if (sub_100025F08(a1, "bonfireIntermediateBandProgs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireIntermediateBandProgs(259) cannot add 1 element to context";
                  goto LABEL_161;
                case 260:
                  if (sub_100025F08(a1, "bonfireUserBandProgs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireUserBandProgs(260) cannot add 1 element to context";
                  goto LABEL_161;
                case 261:
                  if (sub_100025F08(a1, "bonfireIntermediatePageReads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireIntermediatePageReads(261) cannot add 1 element to context";
                  goto LABEL_161;
                case 262:
                  if (sub_100025F08(a1, "bonfireUserPageReads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireUserPageReads(262) cannot add 1 element to context";
                  goto LABEL_161;
                case 263:
                  if (sub_100025F08(a1, "refreshUtil00", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: refreshUtil00(263) cannot add 1 element to context";
                  goto LABEL_161;
                case 264:
                  if (sub_100025F08(a1, "failToReadUtil00", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: failToReadUtil00(264) cannot add 1 element to context";
                  goto LABEL_161;
                case 265:
                  if (v14 != 5) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: readCountHisto(265): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 5) {
                    unsigned int v18 = 5;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "readCountHisto_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: readCountHisto(265): Cannot add 5 elements to context";
                  goto LABEL_2616;
                case 266:
                  if (v14 != 16) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: readAmpHisto(266): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0x10) {
                    unsigned int v18 = 16;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "readAmpHisto_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: readAmpHisto(266): Cannot add 16 elements to context";
                  goto LABEL_2616;
                case 267:
                  if (sub_100025F08(a1, "totalReadAmp", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: totalReadAmp(267) cannot add 1 element to context";
                  goto LABEL_161;
                case 268:
                  if (v14 != 4) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: nvmeModeSelect(268): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 4) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "nvmeModeSelect_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: nvmeModeSelect(268): Cannot add 4 elements to context";
                  goto LABEL_2616;
                case 269:
                  if (v14 != 8) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: numBootBlockRefreshSuccess(269): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 8) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "numBootBlockRefreshSuccess_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: numBootBlockRefreshSuccess(269): Cannot add 8 elements to context";
                  goto LABEL_2616;
                case 270:
                  if (v14 != 8) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: numBootBlockRefreshFail(270): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 8) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "numBootBlockRefreshFail_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: numBootBlockRefreshFail(270): Cannot add 8 elements to context";
                  goto LABEL_2616;
                case 271:
                  if (sub_100025F08(a1, "numUnsupportedAsi", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: numUnsupportedAsi(271) cannot add 1 element to context";
                  goto LABEL_161;
                case 272:
                  if (sub_100025F08(a1, "NumTerminatedProgramSegs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: NumTerminatedProgramSegs(272) cannot add 1 element to context";
                  goto LABEL_161;
                case 273:
                  if (sub_100025F08(a1, "indParityPagesDrops", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: indParityPagesDrops(273) cannot add 1 element to context";
                  goto LABEL_161;
                case 274:
                  if (sub_100025F08(a1, "indFlowPrograms", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: indFlowPrograms(274) cannot add 1 element to context";
                  goto LABEL_161;
                case 277:
                  if (v14 != 4) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: powerBudgetSelect(277): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 4) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "powerBudgetSelect_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: powerBudgetSelect(277): Cannot add 4 elements to context";
                  goto LABEL_2616;
                case 279:
                  if (sub_100025F08(a1, "RxBurnNandWrites", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: RxBurnNandWrites(279) cannot add 1 element to context";
                  goto LABEL_161;
                case 280:
                  if (v14 != 12) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: E2EDPErrorCounters(280): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0xC) {
                    unsigned int v18 = 12;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "E2EDPErrorCounters_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: E2EDPErrorCounters(280): Cannot add 12 elements to context";
                  goto LABEL_2616;
                case 281:
                  if (sub_100025F08(a1, "wcacheSectorsMax", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheSectorsMax(281) cannot add 1 element to context";
                  goto LABEL_161;
                case 282:
                  if (sub_100025F08(a1, "wcacheSectorsMin", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheSectorsMin(282) cannot add 1 element to context";
                  goto LABEL_161;
                case 283:
                  if (sub_100025F08(a1, "wcacheSectorsCur", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheSectorsCur(283) cannot add 1 element to context";
                  goto LABEL_161;
                case 284:
                  if (sub_100025F08(a1, "wcacheDS_SectorsMax", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsMax(284) cannot add 1 element to context";
                  goto LABEL_161;
                case 285:
                  if (sub_100025F08(a1, "wcacheDS_SectorsMin", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsMin(285) cannot add 1 element to context";
                  goto LABEL_161;
                case 286:
                  if (sub_100025F08(a1, "wcacheDS_SectorsCur", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsCur(286) cannot add 1 element to context";
                  goto LABEL_161;
                case 287:
                  if (sub_100025F08(a1, "wcacheFS_Reads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheFS_Reads(287) cannot add 1 element to context";
                  goto LABEL_161;
                case 288:
                  if (sub_100025F08(a1, "wcacheDS_Reads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheDS_Reads(288) cannot add 1 element to context";
                  goto LABEL_161;
                case 289:
                  if (v14 != 32) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: mspBootBlockReadFail(289): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0x20) {
                    unsigned int v18 = 32;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "mspBootBlockReadFail_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspBootBlockReadFail(289): Cannot add 32 elements to context";
                  goto LABEL_2616;
                case 290:
                  if (v14 != 32) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: mspBootBlockProgFail(290): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0x20) {
                    unsigned int v18 = 32;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "mspBootBlockProgFail_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspBootBlockProgFail(290): Cannot add 32 elements to context";
                  goto LABEL_2616;
                case 291:
                  if (v14 != 32) {
                    sub_100013EE0("ASPFTLParseBufferToCxt: mspBootBlockEraseFail(291): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0x20) {
                    unsigned int v18 = 32;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (sub_100025F08(a1, "mspBootBlockEraseFail_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspBootBlockEraseFail(291): Cannot add 32 elements to context";
                  goto LABEL_2616;
                case 292:
                  if (sub_100025F08(a1, "bandsRefreshedOnError", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bandsRefreshedOnError(292) cannot add 1 element to context";
                  goto LABEL_161;
                default:
                  switch(v12)
                  {
                    case 298:
                      if (v14 != 2) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: perHostReads(298): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "perHostReads_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostReads(298): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 299:
                      if (v14 != 2) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: perHostReadXacts(299): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "perHostReadXacts_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostReadXacts(299): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 300:
                      if (v14 != 2) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: perHostWrites(300): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "perHostWrites_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostWrites(300): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 301:
                      if (v14 != 2) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: perHostWriteXacts(301): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "perHostWriteXacts_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostWriteXacts(301): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 302:
                      if (v14 != 2) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: perHostNumFlushes(302): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "perHostNumFlushes_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostNumFlushes(302): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 303:
                      if (v14 != 2) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: perHostNumFences(303): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "perHostNumFences_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostNumFences(303): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 304:
                      if (v14 != 10) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: commitPadSectorsPerFlow(304): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "commitPadSectorsPerFlow_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: commitPadSectorsPerFlow(304): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 305:
                      if (v14 != 10) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: wcacheDSOverWrLogSizeCnts(305): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "wcacheDSOverWrLogSizeCnts_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheDSOverWrLogSizeCnts(305): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 306:
                      if (v14 != 4) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: wcacheDSOverWrSizeByFlow(306): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 4) {
                        unsigned int v18 = 4;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "wcacheDSOverWrSizeByFlow_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheDSOverWrSizeByFlow(306): Cannot add 4 elements to context";
                      goto LABEL_2616;
                    case 307:
                      if (v14 != 10) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: CmdRaisePrioiryEvents(307): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "CmdRaisePrioiryEvents_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: CmdRaisePrioiryEvents(307): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 308:
                      if (sub_100025F08(a1, "utilNumVerification", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: utilNumVerification(308) cannot add 1 element to context";
                      goto LABEL_161;
                    case 309:
                      if (sub_100025F08(a1, "utilRefreshes", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: utilRefreshes(309) cannot add 1 element to context";
                      goto LABEL_161;
                    case 310:
                      if (sub_100025F08(a1, "utilBDRErrors", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: utilBDRErrors(310) cannot add 1 element to context";
                      goto LABEL_161;
                    case 311:
                      if (sub_100025F08(a1, "indBandsPerFlow", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: indBandsPerFlow(311) cannot add 1 element to context";
                      goto LABEL_161;
                    case 312:
                      if (sub_100025F08(a1, "secsPerIndFlow", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: secsPerIndFlow(312) cannot add 1 element to context";
                      goto LABEL_161;
                    case 313:
                      if (sub_100025F08(a1, "indDecodedECC", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: indDecodedECC(313) cannot add 1 element to context";
                      goto LABEL_161;
                    case 314:
                      if (v14 != 8) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: numBootBlockValidateSuccess(314): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 8) {
                        unsigned int v18 = 8;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "numBootBlockValidateSuccess_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: numBootBlockValidateSuccess(314): Cannot add 8 elements to context";
                      goto LABEL_2616;
                    case 315:
                      if (v14 != 8) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: numBootBlockValidateFail(315): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 8) {
                        unsigned int v18 = 8;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "numBootBlockValidateFail_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: numBootBlockValidateFail(315): Cannot add 8 elements to context";
                      goto LABEL_2616;
                    case 316:
                      if (v14 != 4) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: clogPagesFillingPercentage(316): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 4) {
                        unsigned int v18 = 4;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "clogPagesFillingPercentage_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: clogPagesFillingPercentage(316): Cannot add 4 elements to context";
                      goto LABEL_2616;
                    case 317:
                      if (sub_100025F08(a1, "bdrCalTimeAccFactor", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bdrCalTimeAccFactor(317) cannot add 1 element to context";
                      goto LABEL_161;
                    case 318:
                      if (sub_100025F08(a1, "bootChainRdError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bootChainRdError(318) cannot add 1 element to context";
                      goto LABEL_161;
                    case 319:
                      if (sub_100025F08(a1, "bootChainBlankError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bootChainBlankError(319) cannot add 1 element to context";
                      goto LABEL_161;
                    case 320:
                      if (sub_100025F08(a1, "bootChainRefreshError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bootChainRefreshError(320) cannot add 1 element to context";
                      goto LABEL_161;
                    case 321:
                      if (sub_100025F08(a1, "bootChainVersionError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bootChainVersionError(321) cannot add 1 element to context";
                      goto LABEL_161;
                    case 322:
                      if (sub_100025F08(a1, "mspBootBlockMismatch", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: mspBootBlockMismatch(322) cannot add 1 element to context";
                      goto LABEL_161;
                    case 323:
                      if (sub_100025F08(a1, "mspBootBlockMismatchErr", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: mspBootBlockMismatchErr(323) cannot add 1 element to context";
                      goto LABEL_161;
                    case 324:
                      if (v14 != 5) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: bitflipAddr(324): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 5) {
                        unsigned int v18 = 5;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "bitflipAddr_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bitflipAddr(324): Cannot add 5 elements to context";
                      goto LABEL_2616;
                    case 325:
                      if (v14 != 5) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: bitflipCount(325): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 5) {
                        unsigned int v18 = 5;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "bitflipCount_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bitflipCount(325): Cannot add 5 elements to context";
                      goto LABEL_2616;
                    case 326:
                      if (v14 != 5) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: bitflipDupes(326): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 5) {
                        unsigned int v18 = 5;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "bitflipDupes_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bitflipDupes(326): Cannot add 5 elements to context";
                      goto LABEL_2616;
                    case 327:
                      if (v14 != 30) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: bandsMaxTempHisto(327): (#30) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x1E) {
                        unsigned int v18 = 30;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "bandsMaxTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsMaxTempHisto(327): Cannot add 30 elements to context";
                      goto LABEL_2616;
                    case 328:
                      if (v14 != 30) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: bandsMinTempHisto(328): (#30) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x1E) {
                        unsigned int v18 = 30;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "bandsMinTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsMinTempHisto(328): Cannot add 30 elements to context";
                      goto LABEL_2616;
                    case 329:
                      if (v14 != 30) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: bandsLifeTimeTempHisto(329): (#30) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x1E) {
                        unsigned int v18 = 30;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "bandsLifeTimeTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsLifeTimeTempHisto(329): Cannot add 30 elements to context";
                      goto LABEL_2616;
                    case 330:
                      if (v14 != 22) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: bandsDeltaTempHisto(330): (#22) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x16) {
                        unsigned int v18 = 22;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "bandsDeltaTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsDeltaTempHisto(330): Cannot add 22 elements to context";
                      goto LABEL_2616;
                    case 331:
                      if (v14 != 45) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: bandsCrossTempHisto(331): (#45) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x2D) {
                        unsigned int v18 = 45;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "bandsCrossTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsCrossTempHisto(331): Cannot add 45 elements to context";
                      goto LABEL_2616;
                    case 332:
                      if (v14 != 10) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: wcacheWaitLogMs(332): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "wcacheWaitLogMs_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheWaitLogMs(332): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 333:
                      if (v14 != 10) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: wcacheDS_segsSortedLogSize(333): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "wcacheDS_segsSortedLogSize_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheDS_segsSortedLogSize(333): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 334:
                      if (sub_100025F08(a1, "numFirmwareWrites", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numFirmwareWrites(334) cannot add 1 element to context";
                      goto LABEL_161;
                    case 335:
                      if (sub_100025F08(a1, "numBisWrites", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numBisWrites(335) cannot add 1 element to context";
                      goto LABEL_161;
                    case 336:
                      if (sub_100025F08(a1, "numBootChainUpdates", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numBootChainUpdates(336) cannot add 1 element to context";
                      goto LABEL_161;
                    case 337:
                      if (sub_100025F08(a1, "cntCalTimeWentBackWard", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: cntCalTimeWentBackWard(337) cannot add 1 element to context";
                      goto LABEL_161;
                    case 338:
                      if (sub_100025F08(a1, "indBoRecoveries", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: indBoRecoveries(338) cannot add 1 element to context";
                      goto LABEL_161;
                    case 340:
                      if (sub_100025F08(a1, "numCrossTempUecc", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numCrossTempUecc(340) cannot add 1 element to context";
                      goto LABEL_161;
                    case 341:
                      if (sub_100025F08(a1, "latencyMonitorError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: latencyMonitorError(341) cannot add 1 element to context";
                      goto LABEL_161;
                    case 343:
                      if (sub_100025F08(a1, "utilUeccReads", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: utilUeccReads(343) cannot add 1 element to context";
                      goto LABEL_161;
                    case 344:
                      if (sub_100025F08(a1, "numOfAvoidedGCDueToTemp", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numOfAvoidedGCDueToTemp(344) cannot add 1 element to context";
                      goto LABEL_161;
                    case 345:
                      if (sub_100025F08(a1, "forceShutdowns", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: forceShutdowns(345) cannot add 1 element to context";
                      goto LABEL_161;
                    case 346:
                      if (sub_100025F08(a1, "gcSlcDestinations", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: gcSlcDestinations(346) cannot add 1 element to context";
                      goto LABEL_161;
                    case 347:
                      if (sub_100025F08(a1, "indReplayExtUsed", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: indReplayExtUsed(347) cannot add 1 element to context";
                      goto LABEL_161;
                    case 348:
                      if (sub_100025F08(a1, "defectsPerPackageOverflow", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: defectsPerPackageOverflow(348) cannot add 1 element to context";
                      goto LABEL_161;
                    case 349:
                      if (sub_100025F08(a1, "RxBurnIntBandsProgrammed", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: RxBurnIntBandsProgrammed(349) cannot add 1 element to context";
                      goto LABEL_161;
                    case 350:
                      if (sub_100025F08(a1, "RxBurnUsrBandsProgrammed", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: RxBurnUsrBandsProgrammed(350) cannot add 1 element to context";
                      goto LABEL_161;
                    case 351:
                      if (sub_100025F08(a1, "RxBurnIntNandWrites", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: RxBurnIntNandWrites(351) cannot add 1 element to context";
                      goto LABEL_161;
                    case 352:
                      if (sub_100025F08(a1, "RxBurnUsrNandWrites", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: RxBurnUsrNandWrites(352) cannot add 1 element to context";
                      goto LABEL_161;
                    case 353:
                      if (sub_100025F08(a1, "clogLastStripeUeccs", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: clogLastStripeUeccs(353) cannot add 1 element to context";
                      goto LABEL_161;
                    case 354:
                      if (sub_100025F08(a1, "GC_MidDestSrcSwitchSLC2TLC", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: GC_MidDestSrcSwitchSLC2TLC(354) cannot add 1 element to context";
                      goto LABEL_161;
                    case 355:
                      if (sub_100025F08(a1, "GC_MidDestSrcSwitchTLC2SLC", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: GC_MidDestSrcSwitchTLC2SLC(355) cannot add 1 element to context";
                      goto LABEL_161;
                    case 356:
                      if (sub_100025F08(a1, "nvme_stats_shutdown_count_host0_normal", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host0_normal(356) cannot add 1 element to context";
                      goto LABEL_161;
                    case 357:
                      if (sub_100025F08(a1, "nvme_stats_shutdown_count_host1_normal", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host1_normal(357) cannot add 1 element to context";
                      goto LABEL_161;
                    case 358:
                      if (sub_100025F08(a1, "nvme_stats_shutdown_count_host0_s2r", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host0_s2r(358) cannot add 1 element to context";
                      goto LABEL_161;
                    case 359:
                      if (sub_100025F08(a1, "nvme_stats_shutdown_count_host1_s2r", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host1_s2r(359) cannot add 1 element to context";
                      goto LABEL_161;
                    case 360:
                      if (v14 != 16) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: gcPDusterIntrSrcValidityHisto(360): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x10) {
                        unsigned int v18 = 16;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "gcPDusterIntrSrcValidityHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: gcPDusterIntrSrcValidityHisto(360): Cannot add 16 elements to context";
                      goto LABEL_2616;
                    case 361:
                      if (v14 != 16) {
                        sub_100013EE0("ASPFTLParseBufferToCxt: gcPDusterUserSrcValidityHisto(361): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x10) {
                        unsigned int v18 = 16;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (sub_100025F08(a1, "gcPDusterUserSrcValidityHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: gcPDusterUserSrcValidityHisto(361): Cannot add 16 elements to context";
                      goto LABEL_2616;
                    case 362:
                      if (sub_100025F08(a1, "raidFailedReadParity", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: raidFailedReadParity(362) cannot add 1 element to context";
                      goto LABEL_161;
                    case 364:
                      if (sub_100025F08(a1, "lhotNumSkipes", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: lhotNumSkipes(364) cannot add 1 element to context";
                      goto LABEL_161;
                    default:
                      switch(v12)
                      {
                        case 365:
                          if (sub_100025F08(a1, "lhotNumIsHotCalls", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: lhotNumIsHotCalls(365) cannot add 1 element to context";
                          goto LABEL_161;
                        case 366:
                          if (sub_100025F08(a1, "lhotFullLap", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: lhotFullLap(366) cannot add 1 element to context";
                          goto LABEL_161;
                        case 367:
                          if (sub_100025F08(a1, "lhotSkipPrecent", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: lhotSkipPrecent(367) cannot add 1 element to context";
                          goto LABEL_161;
                        case 368:
                          if (sub_100025F08(a1, "eraseSuspendEvents", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendEvents(368) cannot add 1 element to context";
                          goto LABEL_161;
                        case 369:
                          if (sub_100025F08(a1, "eraseSuspendedStatuses", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendedStatuses(369) cannot add 1 element to context";
                          goto LABEL_161;
                        case 370:
                          if (sub_100025F08(a1, "eraseSuspendedBands", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendedBands(370) cannot add 1 element to context";
                          goto LABEL_161;
                        case 371:
                          if (sub_100025F08(a1, "eraseSuspendSituationsBelowThreshold", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendSituationsBelowThreshold(371) cannot add 1 element to context";
                          goto LABEL_161;
                        case 372:
                          if (sub_100025F08(a1, "eraseSuspendSituationsAboveThreshold", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendSituationsAboveThreshold(372) cannot add 1 element to context";
                          goto LABEL_161;
                        case 373:
                          if (sub_100025F08(a1, "eraseSuspendReadChainsProcessed", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendReadChainsProcessed(373) cannot add 1 element to context";
                          goto LABEL_161;
                        case 374:
                          if (sub_100025F08(a1, "bdrLastDoneHr", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: bdrLastDoneHr(374) cannot add 1 element to context";
                          goto LABEL_161;
                        case 375:
                          if (sub_100025F08(a1, "bdrBackupThreshHrs", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: bdrBackupThreshHrs(375) cannot add 1 element to context";
                          goto LABEL_161;
                        case 376:
                          if (sub_100025F08(a1, "clogPortableProgBufs", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: clogPortableProgBufs(376) cannot add 1 element to context";
                          goto LABEL_161;
                        case 377:
                          if (sub_100025F08(a1, "clogPortableDropBufs", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: clogPortableDropBufs(377) cannot add 1 element to context";
                          goto LABEL_161;
                        case 378:
                          if (sub_100025F08(a1, "clogPortablePadSectors", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: clogPortablePadSectors(378) cannot add 1 element to context";
                          goto LABEL_161;
                        case 379:
                          if (sub_100025F08(a1, "numRetiredBlocks", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: numRetiredBlocks(379) cannot add 1 element to context";
                          goto LABEL_161;
                        case 381:
                          if (sub_100025F08(a1, "numRefreshOnErrNandRefreshPerf", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: numRefreshOnErrNandRefreshPerf(381) cannot add 1 element to context";
                          goto LABEL_161;
                        case 382:
                          if (sub_100025F08(a1, "raidReconstructReads", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructReads(382) cannot add 1 element to context";
                          goto LABEL_161;
                        case 383:
                          if (sub_100025F08(a1, "gcReadsNoBlog", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: gcReadsNoBlog(383) cannot add 1 element to context";
                          goto LABEL_161;
                        case 384:
                          if (sub_100025F08(a1, "AbortSkip_MPBXReadVerifyClosedBand", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXReadVerifyClosedBand(384) cannot add 1 element to context";
                          goto LABEL_161;
                        case 385:
                          if (sub_100025F08(a1, "openBandReadFail", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: openBandReadFail(385) cannot add 1 element to context";
                          goto LABEL_161;
                        case 386:
                          if (sub_100025F08(a1, "AbortSkip_MPBXReadVerifyOpenBand", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXReadVerifyOpenBand(386) cannot add 1 element to context";
                          goto LABEL_161;
                        case 387:
                          if (sub_100025F08(a1, "AbortSkip_MBPXFailedRebuildingParity", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: AbortSkip_MBPXFailedRebuildingParity(387) cannot add 1 element to context";
                          goto LABEL_161;
                        case 388:
                          if (sub_100025F08(a1, "raidSuccessfulPMXReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulPMXReconstructionInternal(388) cannot add 1 element to context";
                          goto LABEL_161;
                        case 389:
                          if (sub_100025F08(a1, "raidSuccessfulPMXReconstructionHost", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulPMXReconstructionHost(389) cannot add 1 element to context";
                          goto LABEL_161;
                        case 390:
                          if (sub_100025F08(a1, "raidFailedPMXReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedPMXReconstructionInternal(390) cannot add 1 element to context";
                          goto LABEL_161;
                        case 391:
                          if (sub_100025F08(a1, "raidFailedPMXReconstructionHost", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedPMXReconstructionHost(391) cannot add 1 element to context";
                          goto LABEL_161;
                        case 392:
                          if (sub_100025F08(a1, "raidSuccessfulRMXReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulRMXReconstructionInternal(392) cannot add 1 element to context";
                          goto LABEL_161;
                        case 393:
                          if (sub_100025F08(a1, "raidSuccessfulRMXReconstructionHost", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulRMXReconstructionHost(393) cannot add 1 element to context";
                          goto LABEL_161;
                        case 394:
                          if (sub_100025F08(a1, "raidFailedRMXReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedRMXReconstructionInternal(394) cannot add 1 element to context";
                          goto LABEL_161;
                        case 395:
                          if (sub_100025F08(a1, "raidFailedRMXReconstructionHost", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedRMXReconstructionHost(395) cannot add 1 element to context";
                          goto LABEL_161;
                        case 396:
                          if (sub_100025F08(a1, "raidFailedReadParityInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadParityInternal(396) cannot add 1 element to context";
                          goto LABEL_161;
                        case 397:
                          if (sub_100025F08(a1, "raidFailedReadQParityInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadQParityInternal(397) cannot add 1 element to context";
                          goto LABEL_161;
                        case 398:
                          if (sub_100025F08(a1, "raidFailedReadQParity", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadQParity(398) cannot add 1 element to context";
                          goto LABEL_161;
                        case 399:
                          if (sub_100025F08(a1, "raidFailedReadQCopy", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadQCopy(399) cannot add 1 element to context";
                          goto LABEL_161;
                        case 400:
                          if (sub_100025F08(a1, "raidFailedReconstructionQParity", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReconstructionQParity(400) cannot add 1 element to context";
                          goto LABEL_161;
                        case 401:
                          if (sub_100025F08(a1, "offlineBlocksCnt", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: offlineBlocksCnt(401) cannot add 1 element to context";
                          goto LABEL_161;
                        case 402:
                          if (sub_100025F08(a1, "bork0Revectors", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: bork0Revectors(402) cannot add 1 element to context";
                          goto LABEL_161;
                        case 403:
                          if (sub_100025F08(a1, "raidFailedReadBlog", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadBlog(403) cannot add 1 element to context";
                          goto LABEL_161;
                        case 404:
                          if (sub_100025F08(a1, "numReliabilityRefreshes", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: numReliabilityRefreshes(404) cannot add 1 element to context";
                          goto LABEL_161;
                        case 405:
                          if (sub_100025F08(a1, "raidFailedReadQCopyInternal", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadQCopyInternal(405) cannot add 1 element to context";
                          goto LABEL_161;
                        case 406:
                          if (v14 != 5) {
                            sub_100013EE0("ASPFTLParseBufferToCxt: raidReconstructSuccessFlow(406): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                          }
                          if (v14 >= 5) {
                            unsigned int v18 = 5;
                          }
                          else {
                            unsigned int v18 = v14;
                          }
                          if (sub_100025F08(a1, "raidReconstructSuccessFlow_", (uint64_t)v8, 8u, v18)) {
                            goto LABEL_110;
                          }
                          unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructSuccessFlow(406): Cannot add 5 elements to context";
                          goto LABEL_2616;
                        case 407:
                          if (v14 != 5) {
                            sub_100013EE0("ASPFTLParseBufferToCxt: raidReconstructFailFlow(407): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                          }
                          if (v14 >= 5) {
                            unsigned int v18 = 5;
                          }
                          else {
                            unsigned int v18 = v14;
                          }
                          if (sub_100025F08(a1, "raidReconstructFailFlow_", (uint64_t)v8, 8u, v18)) {
                            goto LABEL_110;
                          }
                          unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructFailFlow(407): Cannot add 5 elements to context";
                          goto LABEL_2616;
                        case 408:
                          if (sub_100025F08(a1, "raidReconstructFailP", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailP(408) cannot add 1 element to context";
                          goto LABEL_161;
                        case 409:
                          if (sub_100025F08(a1, "raidReconstructFailQ", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailQ(409) cannot add 1 element to context";
                          goto LABEL_161;
                        case 410:
                          if (sub_100025F08(a1, "raidReconstructFailUECC", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailUECC(410) cannot add 1 element to context";
                          goto LABEL_161;
                        case 411:
                          if (sub_100025F08(a1, "raidReconstructFailUnsupp", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailUnsupp(411) cannot add 1 element to context";
                          goto LABEL_161;
                        case 412:
                          if (sub_100025F08(a1, "raidUECCOpenBand", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidUECCOpenBand(412) cannot add 1 element to context";
                          goto LABEL_161;
                        case 414:
                          if (sub_100025F08(a1, "ueccReads", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: ueccReads(414) cannot add 1 element to context";
                          goto LABEL_161;
                        case 416:
                          if (sub_100025F08(a1, "raidSuccessfulVerify", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulVerify(416) cannot add 1 element to context";
                          goto LABEL_161;
                        case 417:
                          if (sub_100025F08(a1, "raidFailedVerify", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedVerify(417) cannot add 1 element to context";
                          goto LABEL_161;
                        case 418:
                          if (sub_100025F08(a1, "numBandsVerified", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: numBandsVerified(418) cannot add 1 element to context";
                          goto LABEL_161;
                        case 419:
                          if (sub_100025F08(a1, "cache_heads", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: cache_heads(419) cannot add 1 element to context";
                          goto LABEL_161;
                        case 420:
                          if (sub_100025F08(a1, "AbortSkip_RMXtoMPBX", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: AbortSkip_RMXtoMPBX(420) cannot add 1 element to context";
                          goto LABEL_161;
                        case 421:
                          if (sub_100025F08(a1, "s3eFwVer", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: s3eFwVer(421) cannot add 1 element to context";
                          goto LABEL_161;
                        case 422:
                          if (sub_100025F08(a1, "readVerifyNative", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: readVerifyNative(422) cannot add 1 element to context";
                          goto LABEL_161;
                        case 423:
                          if (sub_100025F08(a1, "reducedReadVerifyNative", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: reducedReadVerifyNative(423) cannot add 1 element to context";
                          goto LABEL_161;
                        case 424:
                          if (sub_100025F08(a1, "readVerifySlc", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: readVerifySlc(424) cannot add 1 element to context";
                          goto LABEL_161;
                        case 425:
                          if (sub_100025F08(a1, "reducedReadVerifySlc", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: reducedReadVerifySlc(425) cannot add 1 element to context";
                          goto LABEL_161;
                        case 426:
                          if (sub_100025F08(a1, "RxBurnEvictions", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: RxBurnEvictions(426) cannot add 1 element to context";
                          goto LABEL_161;
                        case 427:
                          if (sub_100025F08(a1, "directToTLCBands", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: directToTLCBands(427) cannot add 1 element to context";
                          goto LABEL_161;
                        case 428:
                          if (sub_100025F08(a1, "nandDesc", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: nandDesc(428) cannot add 1 element to context";
                          goto LABEL_161;
                        case 429:
                          if (sub_100025F08(a1, "fwUpdatesPercentUsed", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: fwUpdatesPercentUsed(429) cannot add 1 element to context";
                          goto LABEL_161;
                        case 430:
                          if (sub_100025F08(a1, "slcPercentUsed", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: slcPercentUsed(430) cannot add 1 element to context";
                          goto LABEL_161;
                        case 431:
                          if (sub_100025F08(a1, "percentUsed", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: percentUsed(431) cannot add 1 element to context";
                          goto LABEL_161;
                        default:
                          switch(v12)
                          {
                            case 432:
                              if (sub_100025F08(a1, "hostAutoWrites", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: hostAutoWrites(432) cannot add 1 element to context";
                              goto LABEL_161;
                            case 433:
                              if (sub_100025F08(a1, "hostAutoWriteXacts", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: hostAutoWriteXacts(433) cannot add 1 element to context";
                              goto LABEL_161;
                            case 434:
                              if (sub_100025F08(a1, "gcDestDynamic", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: gcDestDynamic(434) cannot add 1 element to context";
                              goto LABEL_161;
                            case 435:
                              if (sub_100025F08(a1, "gcDestStatic", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: gcDestStatic(435) cannot add 1 element to context";
                              goto LABEL_161;
                            case 436:
                              if (sub_100025F08(a1, "gcDestWearlevel", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: gcDestWearlevel(436) cannot add 1 element to context";
                              goto LABEL_161;
                            case 437:
                              if (sub_100025F08(a1, "gcDestParity", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: gcDestParity(437) cannot add 1 element to context";
                              goto LABEL_161;
                            case 438:
                              if (sub_100025F08(a1, "AbortSkip_Format", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: AbortSkip_Format(438) cannot add 1 element to context";
                              goto LABEL_161;
                            case 440:
                              if (sub_100025F08(a1, "raidSLCPadding", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidSLCPadding(440) cannot add 1 element to context";
                              goto LABEL_161;
                            case 441:
                              if (sub_100025F08(a1, "raidGCBands", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidGCBands(441) cannot add 1 element to context";
                              goto LABEL_161;
                            case 442:
                              if (sub_100025F08(a1, "raidGCSectors", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidGCSectors(442) cannot add 1 element to context";
                              goto LABEL_161;
                            case 443:
                              if (sub_100025F08(a1, "raidGCPadding", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidGCPadding(443) cannot add 1 element to context";
                              goto LABEL_161;
                            case 444:
                              if (sub_100025F08(a1, "raidSLCBandsPerHostFlow", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidSLCBandsPerHostFlow(444) cannot add 1 element to context";
                              goto LABEL_161;
                            case 445:
                              if (sub_100025F08(a1, "raidSLCSecsPerHostFlow", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidSLCSecsPerHostFlow(445) cannot add 1 element to context";
                              goto LABEL_161;
                            case 446:
                              if (sub_100025F08(a1, "rxBurnMinCycleRuns", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: rxBurnMinCycleRuns(446) cannot add 1 element to context";
                              goto LABEL_161;
                            case 447:
                              if (sub_100025F08(a1, "clogNumFastCxt", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: clogNumFastCxt(447) cannot add 1 element to context";
                              goto LABEL_161;
                            case 448:
                              if (sub_100025F08(a1, "clogNumRapidReboots", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: clogNumRapidReboots(448) cannot add 1 element to context";
                              goto LABEL_161;
                            case 449:
                              if (sub_100025F08(a1, "clogFastCxtAbvThr", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: clogFastCxtAbvThr(449) cannot add 1 element to context";
                              goto LABEL_161;
                            case 450:
                              if (sub_100025F08(a1, "rxBurnDiffModeRuns", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: rxBurnDiffModeRuns(450) cannot add 1 element to context";
                              goto LABEL_161;
                            case 452:
                              if (sub_100025F08(a1, "indReadVerifyFail", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: indReadVerifyFail(452) cannot add 1 element to context";
                              goto LABEL_161;
                            case 453:
                              if (v14 != 16) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerReadLevel(453): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x10) {
                                unsigned int v18 = 16;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "numOfThrottlingEntriesPerReadLevel_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerReadLevel(453): Cannot add 16 elements to context";
                              goto LABEL_2616;
                            case 454:
                              if (v14 != 16) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerWriteLevel(454): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x10) {
                                unsigned int v18 = 16;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "numOfThrottlingEntriesPerWriteLevel_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerWriteLevel(454): Cannot add 16 elements to context";
                              goto LABEL_2616;
                            case 456:
                              if (v14 != 10) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: slcFifoDepth(456): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0xA) {
                                unsigned int v18 = 10;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "slcFifoDepth_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: slcFifoDepth(456): Cannot add 10 elements to context";
                              goto LABEL_2616;
                            case 457:
                              if (sub_100025F08(a1, "wcacheSectorsDirtyIdle", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: wcacheSectorsDirtyIdle(457) cannot add 1 element to context";
                              goto LABEL_161;
                            case 458:
                              if (sub_100025F08(a1, "wcacheDS_SectorsDirtyIdle", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsDirtyIdle(458) cannot add 1 element to context";
                              goto LABEL_161;
                            case 459:
                              if (sub_100025F08(a1, "wcacheFS_MbytesDirtyIdle", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesDirtyIdle(459) cannot add 1 element to context";
                              goto LABEL_161;
                            case 460:
                              if (v14 != 256) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: CacheDepthVsThroughput(460): (#256) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x100) {
                                unsigned int v18 = 256;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "CacheDepthVsThroughput_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: CacheDepthVsThroughput(460): Cannot add 256 elements to context";
                              goto LABEL_2616;
                            case 461:
                              if (sub_100025F08(a1, "directToTLCSectors", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: directToTLCSectors(461) cannot add 1 element to context";
                              goto LABEL_161;
                            case 462:
                              if (sub_100025F08(a1, "fallbackToWaterfall", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: fallbackToWaterfall(462) cannot add 1 element to context";
                              goto LABEL_161;
                            case 463:
                              if (v14 != 11) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: balanceProportionBucketsHistogram(463): (#11) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0xB) {
                                unsigned int v18 = 11;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "balanceProportionBucketsHistogram_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: balanceProportionBucketsHistogram(463): Cannot add 11 elements to context";
                              goto LABEL_2616;
                            case 464:
                              if (sub_100025F08(a1, "lockToTlc", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: lockToTlc(464) cannot add 1 element to context";
                              goto LABEL_161;
                            case 465:
                              if (v14 != 10) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: burstSizeHistogram(465): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0xA) {
                                unsigned int v18 = 10;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "burstSizeHistogram_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: burstSizeHistogram(465): Cannot add 10 elements to context";
                              goto LABEL_2616;
                            case 466:
                              if (v14 != 64) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: qosDirectToTLC(466): (#64) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x40) {
                                unsigned int v18 = 64;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "qosDirectToTLC_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: qosDirectToTLC(466): Cannot add 64 elements to context";
                              goto LABEL_2616;
                            case 467:
                              if (v14 != 4) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: maxQosDirectToTLC(467): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 4) {
                                unsigned int v18 = 4;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "maxQosDirectToTLC_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: maxQosDirectToTLC(467): Cannot add 4 elements to context";
                              goto LABEL_2616;
                            case 468:
                              if (v14 != 16) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: wcacheDirtyAtFlush(468): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x10) {
                                unsigned int v18 = 16;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "wcacheDirtyAtFlush_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheDirtyAtFlush(468): Cannot add 16 elements to context";
                              goto LABEL_2616;
                            case 469:
                              if (v14 != 2) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: raidReconstructSuccessPartition(469): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "raidReconstructSuccessPartition_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructSuccessPartition(469): Cannot add 2 elements to context";
                              goto LABEL_2616;
                            case 470:
                              if (v14 != 2) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: raidReconstructFailPartition(470): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "raidReconstructFailPartition_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructFailPartition(470): Cannot add 2 elements to context";
                              goto LABEL_2616;
                            case 471:
                              if (sub_100025F08(a1, "raidUncleanBootBandFail", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidUncleanBootBandFail(471) cannot add 1 element to context";
                              goto LABEL_161;
                            case 472:
                              if (sub_100025F08(a1, "raidReconstructFailBandFlowHost", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowHost(472) cannot add 1 element to context";
                              goto LABEL_161;
                            case 473:
                              if (sub_100025F08(a1, "raidReconstructFailBandFlowGC", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowGC(473) cannot add 1 element to context";
                              goto LABEL_161;
                            case 476:
                              if (v14 != 2) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: raidSuccessfulRecoLbaRange(476): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "raidSuccessfulRecoLbaRange_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidSuccessfulRecoLbaRange(476): Cannot add 2 elements to context";
                              goto LABEL_2616;
                            case 477:
                              if (v14 != 2) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: raidFailedRecoLbaRange(477): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "raidFailedRecoLbaRange_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidFailedRecoLbaRange(477): Cannot add 2 elements to context";
                              goto LABEL_2616;
                            case 481:
                              if (v14 != 32) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: skinnyBandErases_481(481): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x20) {
                                unsigned int v18 = 32;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "skinnyBandErases_481_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: skinnyBandErases_481(481): Cannot add 32 elements to context";
                              goto LABEL_2616;
                            case 483:
                              if (sub_100025F08(a1, "tlcOverHeatWaterfall", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: tlcOverHeatWaterfall(483) cannot add 1 element to context";
                              goto LABEL_161;
                            case 484:
                              if (sub_100025F08(a1, "skinnyCyclesConvert", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: skinnyCyclesConvert(484) cannot add 1 element to context";
                              goto LABEL_161;
                            case 485:
                              if (sub_100025F08(a1, "non_proportional_directToTLCSectors", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: non_proportional_directToTLCSectors(485) cannot add 1 element to context";
                              goto LABEL_161;
                            case 486:
                              if (sub_100025F08(a1, "maxFailedFastCxtSync", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: maxFailedFastCxtSync(486) cannot add 1 element to context";
                              goto LABEL_161;
                            case 487:
                              if (sub_100025F08(a1, "numFormatUserArea", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: numFormatUserArea(487) cannot add 1 element to context";
                              goto LABEL_161;
                            case 488:
                              if (sub_100025F08(a1, "clogFastCxtSyncAborted", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: clogFastCxtSyncAborted(488) cannot add 1 element to context";
                              goto LABEL_161;
                            case 489:
                              if (v14 != 5) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: clogOccupationSectors(489): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 5) {
                                unsigned int v18 = 5;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "clogOccupationSectors_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: clogOccupationSectors(489): Cannot add 5 elements to context";
                              goto LABEL_2616;
                            case 490:
                              if (v14 != 64) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: bdrTmpHist(490): (#64) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x40) {
                                unsigned int v18 = 64;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "bdrTmpHist_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: bdrTmpHist(490): Cannot add 64 elements to context";
                              goto LABEL_2616;
                            case 491:
                              if (sub_100025F08(a1, "numFWUpdates", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: numFWUpdates(491) cannot add 1 element to context";
                              goto LABEL_161;
                            case 492:
                              if (sub_100025F08(a1, "numClogLoadFails", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: numClogLoadFails(492) cannot add 1 element to context";
                              goto LABEL_161;
                            case 493:
                              if (sub_100025F08(a1, "rxBurnNumForcedDiffMode", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: rxBurnNumForcedDiffMode(493) cannot add 1 element to context";
                              goto LABEL_161;
                            case 494:
                              if (sub_100025F08(a1, "RD_numSaves", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: RD_numSaves(494) cannot add 1 element to context";
                              goto LABEL_161;
                            case 495:
                              if (sub_100025F08(a1, "eanCompressWrites", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanCompressWrites(495) cannot add 1 element to context";
                              goto LABEL_161;
                            case 496:
                              if (sub_100025F08(a1, "eanHostWrites", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanHostWrites(496) cannot add 1 element to context";
                              goto LABEL_161;
                            case 497:
                              if (sub_100025F08(a1, "bandPreErases", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: bandPreErases(497) cannot add 1 element to context";
                              goto LABEL_161;
                            case 498:
                              if (sub_100025F08(a1, "eanHostUnmaps", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanHostUnmaps(498) cannot add 1 element to context";
                              goto LABEL_161;
                            case 499:
                              if (sub_100025F08(a1, "eanHostFlushes", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanHostFlushes(499) cannot add 1 element to context";
                              goto LABEL_161;
                            case 500:
                              if (sub_100025F08(a1, "eanFastWrites", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanFastWrites(500) cannot add 1 element to context";
                              goto LABEL_161;
                            case 501:
                              if (sub_100025F08(a1, "autowriteDS2FSCollisions", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: autowriteDS2FSCollisions(501) cannot add 1 element to context";
                              goto LABEL_161;
                            case 502:
                              if (sub_100025F08(a1, "autowriteWaitTransferTaskBlocks", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: autowriteWaitTransferTaskBlocks(502) cannot add 1 element to context";
                              goto LABEL_161;
                            case 503:
                              if (v14 != 2) {
                                sub_100013EE0("ASPFTLParseBufferToCxt: avgCycle(503): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (sub_100025F08(a1, "avgCycle_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: avgCycle(503): Cannot add 2 elements to context";
                              goto LABEL_2616;
                            case 504:
                              if (sub_100025F08(a1, "RD_DeferredClearsOverflowCnt", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: RD_DeferredClearsOverflowCnt(504) cannot add 1 element to context";
                              goto LABEL_161;
                            default:
                              switch(v12)
                              {
                                case 505:
                                  if (sub_100025F08(a1, "maxVerticsInBand", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: maxVerticsInBand(505) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 506:
                                  if (sub_100025F08(a1, "numVertics", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: numVertics(506) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 507:
                                  if (sub_100025F08(a1, "exceededCVertics", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: exceededCVertics(507) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 510:
                                  if (sub_100025F08(a1, "raidReconstructFailMismatch", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailMismatch(510) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 511:
                                  if (v14 != 32) {
                                    sub_100013EE0("ASPFTLParseBufferToCxt: mspbootBlockRefreshCnt(511): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0x20) {
                                    unsigned int v18 = 32;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (sub_100025F08(a1, "mspbootBlockRefreshCnt_", (uint64_t)v8, 8u, v18)) {
                                    goto LABEL_110;
                                  }
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspbootBlockRefreshCnt(511): Cannot add 32 elements to context";
                                  goto LABEL_2616;
                                case 516:
                                  if (v14 != 32) {
                                    sub_100013EE0("ASPFTLParseBufferToCxt: mspBootBlockRefreshTime(516): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0x20) {
                                    unsigned int v18 = 32;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (sub_100025F08(a1, "mspBootBlockRefreshTime_", (uint64_t)v8, 8u, v18)) {
                                    goto LABEL_110;
                                  }
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspBootBlockRefreshTime(516): Cannot add 32 elements to context";
                                  goto LABEL_2616;
                                case 517:
                                  if (sub_100025F08(a1, "mspBootBlockCountPerMsp", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: mspBootBlockCountPerMsp(517) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 518:
                                  if (sub_100025F08(a1, "skinnyRevectorSLC", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: skinnyRevectorSLC(518) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 519:
                                  if (sub_100025F08(a1, "skinnyRevectorTLC", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: skinnyRevectorTLC(519) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 520:
                                  if (sub_100025F08(a1, "perfSetupAttempts", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfSetupAttempts(520) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 521:
                                  if (sub_100025F08(a1, "perfSetupSuccesses", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfSetupSuccesses(521) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 522:
                                  if (sub_100025F08(a1, "perfWriteAttempts", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfWriteAttempts(522) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 523:
                                  if (sub_100025F08(a1, "perfWriteSuccesses", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfWriteSuccesses(523) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 524:
                                  if (sub_100025F08(a1, "perfReadAttempts", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfReadAttempts(524) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 525:
                                  if (sub_100025F08(a1, "perfReadSuccesses", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfReadSuccesses(525) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 526:
                                  if (sub_100025F08(a1, "perfCleanupAttempts", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfCleanupAttempts(526) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 527:
                                  if (sub_100025F08(a1, "perfCleanupSuccesses", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfCleanupSuccesses(527) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 530:
                                  if (sub_100025F08(a1, "firstFailedDieId", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: firstFailedDieId(530) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 531:
                                  if (sub_100025F08(a1, "numDieFailures", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: numDieFailures(531) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 532:
                                  if (sub_100025F08(a1, "spareAvailablePercent", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: spareAvailablePercent(532) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 533:
                                  if (sub_100025F08(a1, "dataFabricErr", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: dataFabricErr(533) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 534:
                                  if (sub_100025F08(a1, "downlinkFabricErr", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: downlinkFabricErr(534) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 535:
                                  if (sub_100025F08(a1, "prpAccTimeoutErr", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: prpAccTimeoutErr(535) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 537:
                                  if (sub_100025F08(a1, "uplinkFabricErr", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: uplinkFabricErr(537) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 538:
                                  if (sub_100025F08(a1, "skinnyBandsGBB", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: skinnyBandsGBB(538) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 539:
                                  if (sub_100025F08(a1, "AbortPad_GcMustPadBand", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: AbortPad_GcMustPadBand(539) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 540:
                                  if (sub_100025F08(a1, "AbortPad_GcMustPadSkinny", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: AbortPad_GcMustPadSkinny(540) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 541:
                                  if (sub_100025F08(a1, "bdrHostPingInitial", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: bdrHostPingInitial(541) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 542:
                                  if (sub_100025F08(a1, "bdrHostPingMoreNeeded", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: bdrHostPingMoreNeeded(542) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 543:
                                  if (sub_100025F08(a1, "bandParityAllocationFailed", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: bandParityAllocationFailed(543) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 544:
                                  if (sub_100025F08(a1, "fastHwBurstToSlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: fastHwBurstToSlc(544) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 545:
                                  if (sub_100025F08(a1, "slowHwToTlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slowHwToTlc(545) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 546:
                                  if (v14 != 10) {
                                    sub_100013EE0("ASPFTLParseBufferToCxt: slcDemandBurstSizeDetected(546): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0xA) {
                                    unsigned int v18 = 10;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (sub_100025F08(a1, "slcDemandBurstSizeDetected_", (uint64_t)v8, 8u, v18)) {
                                    goto LABEL_110;
                                  }
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: slcDemandBurstSizeDetected(546): Cannot add 10 elements to context";
                                  goto LABEL_2616;
                                case 547:
                                  if (v14 != 10) {
                                    sub_100013EE0("ASPFTLParseBufferToCxt: slcDemandBurstDur(547): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0xA) {
                                    unsigned int v18 = 10;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (sub_100025F08(a1, "slcDemandBurstDur_", (uint64_t)v8, 8u, v18)) {
                                    goto LABEL_110;
                                  }
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: slcDemandBurstDur(547): Cannot add 10 elements to context";
                                  goto LABEL_2616;
                                case 548:
                                  if (sub_100025F08(a1, "fastHwToTlcBurst", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: fastHwToTlcBurst(548) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 549:
                                  if (v14 != 10) {
                                    sub_100013EE0("ASPFTLParseBufferToCxt: slcDemandBurstSizeSlc(549): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0xA) {
                                    unsigned int v18 = 10;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (sub_100025F08(a1, "slcDemandBurstSizeSlc_", (uint64_t)v8, 8u, v18)) {
                                    goto LABEL_110;
                                  }
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: slcDemandBurstSizeSlc(549): Cannot add 10 elements to context";
                                  goto LABEL_2616;
                                case 551:
                                  if (v14 != 11) {
                                    sub_100013EE0("ASPFTLParseBufferToCxt: balanceProportionBucketsHistogramTlc(551): (#11) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0xB) {
                                    unsigned int v18 = 11;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (sub_100025F08(a1, "balanceProportionBucketsHistogramTlc_", (uint64_t)v8, 8u, v18)) {
                                    goto LABEL_110;
                                  }
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: balanceProportionBucketsHistogramTlc(551): Cannot add 11"
                                        " elements to context";
                                  goto LABEL_2616;
                                case 553:
                                  if (sub_100025F08(a1, "slowHwFlushToSlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slowHwFlushToSlc(553) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 557:
                                  if (sub_100025F08(a1, "slowHwToSlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slowHwToSlc(557) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 558:
                                  if (sub_100025F08(a1, "flushNwToSlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: flushNwToSlc(558) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 559:
                                  if (sub_100025F08(a1, "flushNwToTlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: flushNwToTlc(559) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 560:
                                  if (sub_100025F08(a1, "oslcHw", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcHw(560) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 561:
                                  if (sub_100025F08(a1, "oslcTransitions", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcTransitions(561) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 563:
                                  if (sub_100025F08(a1, "slcDemandFlushCount", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slcDemandFlushCount(563) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 564:
                                  if (sub_100025F08(a1, "slcDemandBurstCount", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slcDemandBurstCount(564) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 565:
                                  if (sub_100025F08(a1, "oslcBaseAvgPE", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcBaseAvgPE(565) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 566:
                                  if (sub_100025F08(a1, "raidReconstructFailNoSPBX", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailNoSPBX(566) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 567:
                                  if (sub_100025F08(a1, "raidReconstructFailDouble", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailDouble(567) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 568:
                                  if (sub_100025F08(a1, "oslcFastWAmpUOnOff", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcFastWAmpUOnOff(568) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 569:
                                  if (sub_100025F08(a1, "oslcSlowWAmpUOnOff", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcSlowWAmpUOnOff(569) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 570:
                                  if (sub_100025F08(a1, "raidReconstructFailInvalid", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailInvalid(570) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 572:
                                  if (sub_100025F08(a1, "oslcLastWAmpUx10", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcLastWAmpUx10(572) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 573:
                                  if (sub_100025F08(a1, "raidFailedReadNoBlog", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidFailedReadNoBlog(573) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 574:
                                  if (sub_100025F08(a1, "raidReconstructFailBlank", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBlank(574) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 575:
                                  if (sub_100025F08(a1, "oslcHotTLCOnOff", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcHotTLCOnOff(575) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 576:
                                  if (sub_100025F08(a1, "gcVPackDestinations", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: gcVPackDestinations(576) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 581:
                                  if (sub_100025F08(a1, "averageTLCPECycles", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: averageTLCPECycles(581) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 582:
                                  if (sub_100025F08(a1, "averageSLCPECycles", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: averageSLCPECycles(582) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 583:
                                  if (sub_100025F08(a1, "numAtomicBoots", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: numAtomicBoots(583) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 584:
                                  if (sub_100025F08(a1, "clogMinorMismatch", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: clogMinorMismatch(584) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 586:
                                  if (sub_100025F08(a1, "raidExpectedFailRMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: raidExpectedFailRMXReconstructionInternal(586) cannot ad"
                                  }
                                        "d 1 element to context";
                                  goto LABEL_161;
                                case 587:
                                  if (sub_100025F08(a1, "raidExpectedFailRMXReconstructionHost", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: raidExpectedFailRMXReconstructionHost(587) cannot add 1 "
                                        "element to context";
                                  goto LABEL_161;
                                case 588:
                                  if (sub_100025F08(a1, "oslcGCinvalidations", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcGCinvalidations(588) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 589:
                                  if (sub_100025F08(a1, "oslcGCActivateReason", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcGCActivateReason(589) cannot add 1 element to context";
                                  goto LABEL_161;
                                default:
                                  switch(v12)
                                  {
                                    case 590:
                                      if (sub_100025F08(a1, "oslcLowCleanBandsUOnOff", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcLowCleanBandsUOnOff(590) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 591:
                                      if (sub_100025F08(a1, "oslcTooManyGCMustOnOff", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcTooManyGCMustOnOff(591) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 592:
                                      if (sub_100025F08(a1, "oslcBaseHostWrites", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcBaseHostWrites(592) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 593:
                                      if (sub_100025F08(a1, "oslcBaseBandErases", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcBaseBandErases(593) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 594:
                                      if (sub_100025F08(a1, "oslcBdrBands", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcBdrBands(594) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 595:
                                      if (sub_100025F08(a1, "oslcBdrValid", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcBdrValid(595) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 596:
                                      if (sub_100025F08(a1, "unexpectedBlanksInternal", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: unexpectedBlanksInternal(596) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 597:
                                      if (sub_100025F08(a1, "unexpectedBlanksOnRV", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: unexpectedBlanksOnRV(597) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 601:
                                      if (sub_100025F08(a1, "waterfallLockSectors", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: waterfallLockSectors(601) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 602:
                                      if (sub_100025F08(a1, "oslcGCActiveWrites", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcGCActiveWrites(602) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 603:
                                      if (sub_100025F08(a1, "chipIdTemperatureSample", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: chipIdTemperatureSample(603) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 604:
                                      if (sub_100025F08(a1, "gcVPackWrites", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: gcVPackWrites(604) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 605:
                                      if (v14 != 10) {
                                        sub_100013EE0("ASPFTLParseBufferToCxt: gcActiveReasons(605): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0xA) {
                                        unsigned int v18 = 10;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_100025F08(a1, "gcActiveReasons_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: gcActiveReasons(605): Cannot add 10 elements to context";
                                      goto LABEL_2616;
                                    case 606:
                                      if (sub_100025F08(a1, "eanMaxInitTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanMaxInitTimeMs(606) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 607:
                                      if (sub_100025F08(a1, "eanMinToFirstReadTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanMinToFirstReadTimeMs(607) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 608:
                                      if (sub_100025F08(a1, "skinnyAPGMRetire", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: skinnyAPGMRetire(608) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 609:
                                      if (sub_100025F08(a1, "unexpectedBlanksHost", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: unexpectedBlanksHost(609) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 610:
                                      if (v14 != 64) {
                                        sub_100013EE0("ASPFTLParseBufferToCxt: pcieAerCounters(610): (#64) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0x40) {
                                        unsigned int v18 = 64;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_100025F08(a1, "pcieAerCounters_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: pcieAerCounters(610): Cannot add 64 elements to context";
                                      goto LABEL_2616;
                                    case 611:
                                      if (sub_100025F08(a1, "fastHwToTlcBalance", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: fastHwToTlcBalance(611) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 612:
                                      if (sub_100025F08(a1, "perfOSLCRuns", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: perfOSLCRuns(612) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 613:
                                      if (sub_100025F08(a1, "slcDemandBurstWritesInGC", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInGC(613) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 614:
                                      if (sub_100025F08(a1, "slcDemandBurstWritesInTT", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInTT(614) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 615:
                                      if (sub_100025F08(a1, "slcDemandBurstWritesInNRP", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInNRP(615) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 616:
                                      if (sub_100025F08(a1, "perfTotalDmaMb", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: perfTotalDmaMb(616) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 617:
                                      if (sub_100025F08(a1, "eanAvgInitTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanAvgInitTimeMs(617) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 618:
                                      if (sub_100025F08(a1, "eanAvgToFirstReadTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanAvgToFirstReadTimeMs(618) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 619:
                                      if (sub_100025F08(a1, "eanMaxBootReadTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanMaxBootReadTimeMs(619) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 620:
                                      if (sub_100025F08(a1, "eanAvgBootReadTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanAvgBootReadTimeMs(620) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 621:
                                      if (v14 != 10) {
                                        sub_100013EE0("ASPFTLParseBufferToCxt: eanBootReadsHist(621): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0xA) {
                                        unsigned int v18 = 10;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_100025F08(a1, "eanBootReadsHist_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: eanBootReadsHist(621): Cannot add 10 elements to context";
                                      goto LABEL_2616;
                                    case 622:
                                      if (sub_100025F08(a1, "maxBgInitTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: maxBgInitTimeMs(622) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 623:
                                      if (sub_100025F08(a1, "avgBgInitTimeMs", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: avgBgInitTimeMs(623) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 624:
                                      if (v14 != 16) {
                                        sub_100013EE0("ASPFTLParseBufferToCxt: clogFailReason(624): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0x10) {
                                        unsigned int v18 = 16;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_100025F08(a1, "clogFailReason_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: clogFailReason(624): Cannot add 16 elements to context";
                                      goto LABEL_2616;
                                    case 625:
                                      if (sub_100025F08(a1, "eanMinBootReadMBPerSec", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanMinBootReadMBPerSec(625) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 626:
                                      if (sub_100025F08(a1, "eanAvgBootReadMBPerSec", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanAvgBootReadMBPerSec(626) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 627:
                                      if (sub_100025F08(a1, "minSkinnyPECycles", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: minSkinnyPECycles(627) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 628:
                                      if (sub_100025F08(a1, "maxSkinnyPECycles", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: maxSkinnyPECycles(628) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 629:
                                      if (sub_100025F08(a1, "averageSkinnyPECycles", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: averageSkinnyPECycles(629) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 630:
                                      if (v14 != 6) {
                                        sub_100013EE0("ASPFTLParseBufferToCxt: raidSuccessfulRecoEAN(630): (#6) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 6) {
                                        unsigned int v18 = 6;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_100025F08(a1, "raidSuccessfulRecoEAN_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: raidSuccessfulRecoEAN(630): Cannot add 6 elements to context";
                                      goto LABEL_2616;
                                    case 631:
                                      if (v14 != 6) {
                                        sub_100013EE0("ASPFTLParseBufferToCxt: raidFailedRecoEAN(631): (#6) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 6) {
                                        unsigned int v18 = 6;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_100025F08(a1, "raidFailedRecoEAN_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: raidFailedRecoEAN(631): Cannot add 6 elements to context";
                                      goto LABEL_2616;
                                    case 632:
                                      if (v14 != 6) {
                                        sub_100013EE0("ASPFTLParseBufferToCxt: eanFirstReadMode(632): (#6) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 6) {
                                        unsigned int v18 = 6;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_100025F08(a1, "eanFirstReadMode_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: eanFirstReadMode(632): Cannot add 6 elements to context";
                                      goto LABEL_2616;
                                    case 635:
                                      if (sub_100025F08(a1, "oslcHwGC", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcHwGC(635) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 636:
                                      if (sub_100025F08(a1, "oslcHwTT", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcHwTT(636) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 637:
                                      if (sub_100025F08(a1, "oslcHwNRP", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcHwNRP(637) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 638:
                                      if (v14 != 10) {
                                        sub_100013EE0("ASPFTLParseBufferToCxt: oslcDemandBurstSize(638): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0xA) {
                                        unsigned int v18 = 10;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_100025F08(a1, "oslcDemandBurstSize_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: oslcDemandBurstSize(638): Cannot add 10 elements to context";
                                      goto LABEL_2616;
                                    case 639:
                                      if (sub_100025F08(a1, "raidReconstructSuccessBandFlowOslc", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidReconstructSuccessBandFlowOslc(639) cannot add 1"
                                            " element to context";
                                      goto LABEL_161;
                                    case 640:
                                      if (sub_100025F08(a1, "raidReconstructFailBandFlowOslc", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowOslc(640) cannot add 1 el"
                                            "ement to context";
                                      goto LABEL_161;
                                    case 641:
                                      if (sub_100025F08(a1, "raidFailSectors", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidFailSectors(641) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 642:
                                      if (sub_100025F08(a1, "eanFailSectors", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanFailSectors(642) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 643:
                                      if (sub_100025F08(a1, "bdrTimeMode", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: bdrTimeMode(643) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 644:
                                      if (sub_100025F08(a1, "raidParityNotSavedP", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityNotSavedP(644) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 645:
                                      if (sub_100025F08(a1, "raidParityNotSavedQ", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityNotSavedQ(645) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 646:
                                      if (sub_100025F08(a1, "raidParityInvalid", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityInvalid(646) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 647:
                                      if (sub_100025F08(a1, "raidParityUnknown", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityUnknown(647) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 648:
                                      if (sub_100025F08(a1, "raidParityUnmapped", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityUnmapped(648) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 649:
                                      if (sub_100025F08(a1, "raidParityGCUnc", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityGCUnc(649) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 657:
                                      if (sub_100025F08(a1, "AbortSkip_MPBXProbational", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXProbational(657) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 659:
                                      if (sub_100025F08(a1, "raidVerificationReads", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: raidVerificationReads(659) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 666:
                                      if (sub_100025F08(a1, "nofDies", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: nofDies(666) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 671:
                                      if (sub_100025F08(a1, "skinnyBandsNum", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: skinnyBandsNum(671) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 672:
                                      if (sub_100025F08(a1, "skinnyBandsNumDips", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: skinnyBandsNumDips(672) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 674:
                                      if (v14 != 8) {
                                        sub_100013EE0("ASPFTLParseBufferToCxt: oslcNoVotesHw(674): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 8) {
                                        unsigned int v18 = 8;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (sub_100025F08(a1, "oslcNoVotesHw_", (uint64_t)v8, 8u, v18)) {
                                        goto LABEL_110;
                                      }
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: oslcNoVotesHw(674): Cannot add 8 elements to context";
                                      goto LABEL_2616;
                                    case 675:
                                      if (sub_100025F08(a1, "totalLbas", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: totalLbas(675) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 676:
                                      if (sub_100025F08(a1, "bdrHostPingExtra", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: bdrHostPingExtra(676) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 677:
                                      if (sub_100025F08(a1, "magazineInstanceMeta", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: magazineInstanceMeta(677) cannot add 1 element to context";
                                      goto LABEL_161;
                                    default:
                                      switch(v12)
                                      {
                                        case 680:
                                          if (v14 != 3) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: magazineFWVersion(680): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 3) {
                                            unsigned int v18 = 3;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "magazineFWVersion_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: magazineFWVersion(680): Cannot add 3 elements to context";
                                          goto LABEL_2616;
                                        case 681:
                                          if (sub_100025F08(a1, "raidReconstructFailPMXUnsup", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailPMXUnsup(681) cannot add 1 el"
                                                "ement to context";
                                          goto LABEL_161;
                                        case 682:
                                          if (sub_100025F08(a1, "raidReconstructFailBMXUnsup", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXUnsup(682) cannot add 1 el"
                                                "ement to context";
                                          goto LABEL_161;
                                        case 683:
                                          if (sub_100025F08(a1, "iBootNANDResets", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: iBootNANDResets(683) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 684:
                                          if (sub_100025F08(a1, "pcieClkreqHighTimeout", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: pcieClkreqHighTimeout(684) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 687:
                                          if (v14 != 3) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: cbdrInitSent(687): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 3) {
                                            unsigned int v18 = 3;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "cbdrInitSent_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrInitSent(687): Cannot add 3 elements to context";
                                          goto LABEL_2616;
                                        case 688:
                                          if (sub_100025F08(a1, "cbdrPauseSent", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrPauseSent(688) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 689:
                                          if (sub_100025F08(a1, "cbdrResumeSent", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrResumeSent(689) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 690:
                                          if (sub_100025F08(a1, "cbdrGetResultSent", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrGetResultSent(690) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 691:
                                          if (sub_100025F08(a1, "cbdrEarlyExits", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrEarlyExits(691) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 694:
                                          if (v14 != 10) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: cbdrRefreshGrades(694): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0xA) {
                                            unsigned int v18 = 10;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "cbdrRefreshGrades_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrRefreshGrades(694): Cannot add 10 elements to context";
                                          goto LABEL_2616;
                                        case 695:
                                          if (sub_100025F08(a1, "cbdrNotEnoughReads", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrNotEnoughReads(695) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 696:
                                          if (sub_100025F08(a1, "cbdrAborts", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrAborts(696) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 697:
                                          if (sub_100025F08(a1, "TurboRaidHostClassifications", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidHostClassifications(697) cannot add 1 e"
                                                "lement to context";
                                          goto LABEL_161;
                                        case 698:
                                          if (sub_100025F08(a1, "TurboRaidInternalClassifications", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidInternalClassifications(698) cannot add"
                                          }
                                                " 1 element to context";
                                          goto LABEL_161;
                                        case 699:
                                          if (sub_100025F08(a1, "cbdrFullyDone", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrFullyDone(699) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 702:
                                          if (v14 != 32) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: vcurve(702): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0x20) {
                                            unsigned int v18 = 32;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "vcurve_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: vcurve(702): Cannot add 32 elements to context";
                                          goto LABEL_2616;
                                        case 703:
                                          if (v14 != 12) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: injDepth(703): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0xC) {
                                            unsigned int v18 = 12;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "injDepth_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: injDepth(703): Cannot add 12 elements to context";
                                          goto LABEL_2616;
                                        case 704:
                                          if (sub_100025F08(a1, "logical_disk_occupied_promiles", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: logical_disk_occupied_promiles(704) cannot add 1"
                                                " element to context";
                                          goto LABEL_161;
                                        case 711:
                                          if (sub_100025F08(a1, "raidPrevFailedReconstructSkip", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: raidPrevFailedReconstructSkip(711) cannot add 1 "
                                                "element to context";
                                          goto LABEL_161;
                                        case 712:
                                          if (sub_100025F08(a1, "TurboRaidSuccessfulHostAuxReads", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidSuccessfulHostAuxReads(712) cannot add "
                                          }
                                                "1 element to context";
                                          goto LABEL_161;
                                        case 713:
                                          if (sub_100025F08(a1, "TurboRaidSuccessfulInternalAuxReads", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidSuccessfulInternalAuxReads(713) cannot "
                                          }
                                                "add 1 element to context";
                                          goto LABEL_161;
                                        case 714:
                                          if (sub_100025F08(a1, "turboRaidClassificationReliabilityHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: turboRaidClassificationReliabilityHost(714) cann"
                                          }
                                                "ot add 1 element to context";
                                          goto LABEL_161;
                                        case 715:
                                          if (sub_100025F08(a1, "turboRaidClassificationReliabilityInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: turboRaidClassificationReliabilityInternal(715) "
                                          }
                                                "cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 716:
                                          if (sub_100025F08(a1, "turboRaidClassificationQualityHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: turboRaidClassificationQualityHost(716) cannot a"
                                          }
                                                "dd 1 element to context";
                                          goto LABEL_161;
                                        case 717:
                                          if (sub_100025F08(a1, "turboRaidClassificationQualityInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: turboRaidClassificationQualityInternal(717) cann"
                                          }
                                                "ot add 1 element to context";
                                          goto LABEL_161;
                                        case 719:
                                          if (sub_100025F08(a1, "skinnyBandErases", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: skinnyBandErases(719) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 721:
                                          if (sub_100025F08(a1, "gcPDusterDestinations", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: gcPDusterDestinations(721) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 722:
                                          if (sub_100025F08(a1, "gcPDusterWrites", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: gcPDusterWrites(722) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 730:
                                          if (sub_100025F08(a1, "rvFails", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: rvFails(730) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 737:
                                          if (sub_100025F08(a1, "TurboRaidFailedHostAuxReads", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidFailedHostAuxReads(737) cannot add 1 el"
                                                "ement to context";
                                          goto LABEL_161;
                                        case 738:
                                          if (sub_100025F08(a1, "TurboRaidFailedInternalAuxReads", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidFailedInternalAuxReads(738) cannot add "
                                          }
                                                "1 element to context";
                                          goto LABEL_161;
                                        case 741:
                                          if (sub_100025F08(a1, "autoSkipTriggers", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: autoSkipTriggers(741) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 742:
                                          if (sub_100025F08(a1, "autoSkipPlanes", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: autoSkipPlanes(742) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 744:
                                          if (v14 != 8) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: raidReconstructDurationHisto(744): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 8) {
                                            unsigned int v18 = 8;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "raidReconstructDurationHisto_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructDurationHisto(744): Cannot add 8 "
                                                "elements to context";
                                          goto LABEL_2616;
                                        case 745:
                                          if (v14 != 8) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: failsOnReconstructHisto(745): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 8) {
                                            unsigned int v18 = 8;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "failsOnReconstructHisto_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: failsOnReconstructHisto(745): Cannot add 8 elements to context";
                                          goto LABEL_2616;
                                        case 746:
                                          if (sub_100025F08(a1, "bandKill_userFlattenExcessive", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_userFlattenExcessive(746) cannot add 1 "
                                                "element to context";
                                          goto LABEL_161;
                                        case 747:
                                          if (sub_100025F08(a1, "bandKill_IntFlattenExcessive", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_IntFlattenExcessive(747) cannot add 1 e"
                                                "lement to context";
                                          goto LABEL_161;
                                        case 748:
                                          if (sub_100025F08(a1, "bandKill_userFlattenBalance", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_userFlattenBalance(748) cannot add 1 el"
                                                "ement to context";
                                          goto LABEL_161;
                                        case 749:
                                          if (sub_100025F08(a1, "bandKill_intFlattenBalance", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_intFlattenBalance(749) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 750:
                                          if (sub_100025F08(a1, "bandKill_formatVertExcessive", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_formatVertExcessive(750) cannot add 1 e"
                                                "lement to context";
                                          goto LABEL_161;
                                        case 751:
                                          if (sub_100025F08(a1, "bandKill_formatVertBalance", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_formatVertBalance(751) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 753:
                                          if (sub_100025F08(a1, "cbdrNumSlowRefreshes", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrNumSlowRefreshes(753) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 754:
                                          if (sub_100025F08(a1, "cbdrNumFastRefreshes", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrNumFastRefreshes(754) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 755:
                                          if (sub_100025F08(a1, "cbdrTotalRefreshValidity", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrTotalRefreshValidity(755) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 756:
                                          if (v14 != 9) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: cbdrRefreshedAges(756): (#9) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 9) {
                                            unsigned int v18 = 9;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "cbdrRefreshedAges_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrRefreshedAges(756): Cannot add 9 elements to context";
                                          goto LABEL_2616;
                                        case 758:
                                          if (sub_100025F08(a1, "cbdrSkippedBlocks", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrSkippedBlocks(758) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 759:
                                          if (v14 != 5) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: cbdrScanPct(759): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 5) {
                                            unsigned int v18 = 5;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "cbdrScanPct_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrScanPct(759): Cannot add 5 elements to context";
                                          goto LABEL_2616;
                                        case 760:
                                          if (sub_100025F08(a1, "raidSuccessfulBMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulBMXReconstructionInternal(760) can"
                                          }
                                                "not add 1 element to context";
                                          goto LABEL_161;
                                        case 761:
                                          if (sub_100025F08(a1, "raidSuccessfulBMXReconstructionHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulBMXReconstructionHost(761) cannot "
                                          }
                                                "add 1 element to context";
                                          goto LABEL_161;
                                        case 762:
                                          if (sub_100025F08(a1, "raidFailedBMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidFailedBMXReconstructionInternal(762) cannot "
                                          }
                                                "add 1 element to context";
                                          goto LABEL_161;
                                        case 763:
                                          if (sub_100025F08(a1, "raidFailedBMXReconstructionHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidFailedBMXReconstructionHost(763) cannot add "
                                          }
                                                "1 element to context";
                                          goto LABEL_161;
                                        case 764:
                                          if (sub_100025F08(a1, "ricSPRVFail", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: ricSPRVFail(764) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 765:
                                          if (sub_100025F08(a1, "ricMPRVFail", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: ricMPRVFail(765) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 767:
                                          if (v14 != 10) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: cbdrRefreshGradesSLC(767): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0xA) {
                                            unsigned int v18 = 10;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "cbdrRefreshGradesSLC_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrRefreshGradesSLC(767): Cannot add 10 elements to context";
                                          goto LABEL_2616;
                                        case 768:
                                          if (v14 != 9) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: cbdrRefreshedAgesSLC(768): (#9) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 9) {
                                            unsigned int v18 = 9;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "cbdrRefreshedAgesSLC_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrRefreshedAgesSLC(768): Cannot add 9 elements to context";
                                          goto LABEL_2616;
                                        case 769:
                                          if (v14 != 5) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: cbdrScanPctSLC(769): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 5) {
                                            unsigned int v18 = 5;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "cbdrScanPctSLC_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrScanPctSLC(769): Cannot add 5 elements to context";
                                          goto LABEL_2616;
                                        case 770:
                                          if (v14 != 8) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: cpuBurstLength(770): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 8) {
                                            unsigned int v18 = 8;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "cpuBurstLength_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cpuBurstLength(770): Cannot add 8 elements to context";
                                          goto LABEL_2616;
                                        case 771:
                                          if (sub_100025F08(a1, "autoSkipRaidRecoFail", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: autoSkipRaidRecoFail(771) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 772:
                                          if (v14 != 32) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: dmReasonsSlc(772): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0x20) {
                                            unsigned int v18 = 32;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "dmReasonsSlc_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsSlc(772): Cannot add 32 elements to context";
                                          goto LABEL_2616;
                                        case 773:
                                          if (v14 != 32) {
                                            sub_100013EE0("ASPFTLParseBufferToCxt: dmReasonsTlc(773): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0x20) {
                                            unsigned int v18 = 32;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (sub_100025F08(a1, "dmReasonsTlc_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsTlc(773): Cannot add 32 elements to context";
                                          goto LABEL_2616;
                                        case 774:
                                          if (sub_100025F08(a1, "raidReconstructFailBMXAbort", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXAbort(774) cannot add 1 el"
                                                "ement to context";
                                          goto LABEL_161;
                                        case 775:
                                          if (sub_100025F08(a1, "bandKill_fatBindingNoBlocks", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_fatBindingNoBlocks(775) cannot add 1 el"
                                                "ement to context";
                                          goto LABEL_161;
                                        case 776:
                                          if (sub_100025F08(a1, "bandKill_fatBindingFewBlocks", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_fatBindingFewBlocks(776) cannot add 1 e"
                                                "lement to context";
                                          goto LABEL_161;
                                        default:
                                          switch(v12)
                                          {
                                            case 777:
                                              if (sub_100025F08(a1, "numBadBootBlocks", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: numBadBootBlocks(777) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 778:
                                              if (sub_100025F08(a1, "snapshotCPUHigh", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: snapshotCPUHigh(778) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 779:
                                              if (sub_100025F08(a1, "snapshotCPULow", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: snapshotCPULow(779) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 780:
                                              if (sub_100025F08(a1, "gcWithoutBMs", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: gcWithoutBMs(780) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 781:
                                              if (v14 != 10) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: gcSearchTimeHistory(781): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0xA) {
                                                unsigned int v18 = 10;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "gcSearchTimeHistory_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: gcSearchTimeHistory(781): Cannot add 10 elements to context";
                                              goto LABEL_2616;
                                            case 785:
                                              if (v14 != 16) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: gcSearchPortion(785): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "gcSearchPortion_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: gcSearchPortion(785): Cannot add 16 elements to context";
                                              goto LABEL_2616;
                                            case 786:
                                              if (sub_100025F08(a1, "raidReconstructFailBmxMp", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBmxMp(786) cannot add 1 e"
                                                    "lement to context";
                                              goto LABEL_161;
                                            case 787:
                                              if (sub_100025F08(a1, "raidReconstructFailBmx", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBmx(787) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 788:
                                              if (sub_100025F08(a1, "raidReconstructFailBMXUECC", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXUECC(788) cannot add 1"
                                                    " element to context";
                                              goto LABEL_161;
                                            case 789:
                                              if (sub_100025F08(a1, "raidReconstructFailBMXBlank", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXBlank(789) cannot add "
                                              }
                                                    "1 element to context";
                                              goto LABEL_161;
                                            case 790:
                                              if (sub_100025F08(a1, "raidPrevFailedReconstructBmxMpSkip", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: raidPrevFailedReconstructBmxMpSkip(790) cann"
                                              }
                                                    "ot add 1 element to context";
                                              goto LABEL_161;
                                            case 792:
                                              if (sub_100025F08(a1, "numTLCFatBands", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: numTLCFatBands(792) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 793:
                                              if (sub_100025F08(a1, "fatValidity", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: fatValidity(793) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 794:
                                              if (sub_100025F08(a1, "fatTotal", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: fatTotal(794) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 798:
                                              if (v14 != 4) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: raidBMXFailP(798): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "raidBMXFailP_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailP(798): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 799:
                                              if (v14 != 4) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: raidBMXFailUECC(799): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "raidBMXFailUECC_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailUECC(799): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 804:
                                              if (v14 != 4) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: raidBMXFailNoSPBX(804): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "raidBMXFailNoSPBX_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailNoSPBX(804): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 806:
                                              if (v14 != 4) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: raidBMXFailBlank(806): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "raidBMXFailBlank_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailBlank(806): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 809:
                                              if (v14 != 4) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: raidBMXFailUnsup(809): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "raidBMXFailUnsup_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailUnsup(809): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 811:
                                              if (v14 != 4) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: raidBMXFailMpSkip(811): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "raidBMXFailMpSkip_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailMpSkip(811): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 812:
                                              if (v14 != 4) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: raidBMXFailAbort(812): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "raidBMXFailAbort_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailAbort(812): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 813:
                                              if (sub_100025F08(a1, "TurboRaidIsEnabled", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: TurboRaidIsEnabled(813) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 814:
                                              if (v14 != 4) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: raidBMXFailOther(814): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "raidBMXFailOther_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailOther(814): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 815:
                                              if (v14 != 4) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: raidBMXSuccess(815): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "raidBMXSuccess_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXSuccess(815): Cannot add 4 elements to context";
                                              goto LABEL_2616;
                                            case 816:
                                              if (sub_100025F08(a1, "skinnyBandsExtraDip", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: skinnyBandsExtraDip(816) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 821:
                                              if (sub_100025F08(a1, "writeAmp", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: writeAmp(821) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 822:
                                              if (sub_100025F08(a1, "ricMaxClogOnlyPages", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: ricMaxClogOnlyPages(822) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 823:
                                              if (v14 != 3) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: readClassifyStatusesHisto(823): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 3) {
                                                unsigned int v18 = 3;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "readClassifyStatusesHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: readClassifyStatusesHisto(823): Cannot add 3"
                                              }
                                                    " elements to context";
                                              goto LABEL_2616;
                                            case 824:
                                              if (v14 != 10) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: readWithAuxStatusesHisto(824): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0xA) {
                                                unsigned int v18 = 10;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "readWithAuxStatusesHisto_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: readWithAuxStatusesHisto(824): Cannot add 10"
                                                    " elements to context";
                                              goto LABEL_2616;
                                            case 825:
                                              if (v14 != 10) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: readReconstructStatusesHisto(825): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0xA) {
                                                unsigned int v18 = 10;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "readReconstructStatusesHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: readReconstructStatusesHisto(825): Cannot ad"
                                              }
                                                    "d 10 elements to context";
                                              goto LABEL_2616;
                                            case 826:
                                              if (sub_100025F08(a1, "bdrBackupChecks", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: bdrBackupChecks(826) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 827:
                                              if (sub_100025F08(a1, "ricExceedClogOnlyPagesTH", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: ricExceedClogOnlyPagesTH(827) cannot add 1 e"
                                                    "lement to context";
                                              goto LABEL_161;
                                            case 828:
                                              if (sub_100025F08(a1, "numDipFailures", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: numDipFailures(828) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 831:
                                              if (sub_100025F08(a1, "prefetchNextRange", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: prefetchNextRange(831) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 862:
                                              if (sub_100025F08(a1, "raidSuccessfulSkip", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulSkip(862) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 863:
                                              if (sub_100025F08(a1, "raidFailedSkip", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: raidFailedSkip(863) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 864:
                                              if (sub_100025F08(a1, "raidSkipAttempts", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: raidSkipAttempts(864) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 865:
                                              if (v14 != 16) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: timeOfThrottlingPerLevel(865): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "timeOfThrottlingPerLevel_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerLevel(865): Cannot add 16"
                                                    " elements to context";
                                              goto LABEL_2616;
                                            case 866:
                                              if (v14 != 16) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: timeOfThrottlingPerReadLevel(866): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "timeOfThrottlingPerReadLevel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerReadLevel(866): Cannot ad"
                                              }
                                                    "d 16 elements to context";
                                              goto LABEL_2616;
                                            case 867:
                                              if (v14 != 16) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: timeOfThrottlingPerWriteLevel(867): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "timeOfThrottlingPerWriteLevel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerWriteLevel(867): Cannot a"
                                              }
                                                    "dd 16 elements to context";
                                              goto LABEL_2616;
                                            case 868:
                                              if (v14 != 32) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: dmReasonsSlc_1bc(868): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "dmReasonsSlc_1bc_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsSlc_1bc(868): Cannot add 32 elements to context";
                                              goto LABEL_2616;
                                            case 869:
                                              if (v14 != 32) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: dmReasonsTlc_1bc(869): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "dmReasonsTlc_1bc_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsTlc_1bc(869): Cannot add 32 elements to context";
                                              goto LABEL_2616;
                                            case 870:
                                              if (v14 != 32) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: dmReasonsSlc_1bc_he(870): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "dmReasonsSlc_1bc_he_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsSlc_1bc_he(870): Cannot add 32 elements to context";
                                              goto LABEL_2616;
                                            case 871:
                                              if (v14 != 32) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: dmReasonsTlc_1bc_he(871): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "dmReasonsTlc_1bc_he_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsTlc_1bc_he(871): Cannot add 32 elements to context";
                                              goto LABEL_2616;
                                            case 876:
                                              if (v14 != 32) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: dmReasonsSlc_mbc(876): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "dmReasonsSlc_mbc_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsSlc_mbc(876): Cannot add 32 elements to context";
                                              goto LABEL_2616;
                                            case 877:
                                              if (v14 != 32) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: dmReasonsTlc_mbc(877): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "dmReasonsTlc_mbc_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsTlc_mbc(877): Cannot add 32 elements to context";
                                              goto LABEL_2616;
                                            case 883:
                                              if (sub_100025F08(a1, "clogEmptyProgramms", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: clogEmptyProgramms(883) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 884:
                                              if (sub_100025F08(a1, "oslcHwCloseBand", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: oslcHwCloseBand(884) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 891:
                                              if (v14 != 2) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidSuccessAuxPartition(891): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 2) {
                                                unsigned int v18 = 2;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "turboRaidSuccessAuxPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidSuccessAuxPartition(891): Cannot ad"
                                              }
                                                    "d 2 elements to context";
                                              goto LABEL_2616;
                                            case 892:
                                              if (v14 != 2) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidFailAuxPartition(892): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 2) {
                                                unsigned int v18 = 2;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "turboRaidFailAuxPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidFailAuxPartition(892): Cannot add 2"
                                              }
                                                    " elements to context";
                                              goto LABEL_2616;
                                            case 893:
                                              if (v14 != 2) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidClassifyQualPartition(893): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 2) {
                                                unsigned int v18 = 2;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "turboRaidClassifyQualPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidClassifyQualPartition(893): Cannot "
                                              }
                                                    "add 2 elements to context";
                                              goto LABEL_2616;
                                            case 894:
                                              if (v14 != 2) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidClassifyRelPartition(894): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 2) {
                                                unsigned int v18 = 2;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "turboRaidClassifyRelPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidClassifyRelPartition(894): Cannot a"
                                              }
                                                    "dd 2 elements to context";
                                              goto LABEL_2616;
                                            case 895:
                                              if (sub_100025F08(a1, "IND_pool_freeMinSilo", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: IND_pool_freeMinSilo(895) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 896:
                                              if (sub_100025F08(a1, "autoSweepBlocks", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: autoSweepBlocks(896) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 897:
                                              if (v14 != 16) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: wcWrFragSizes(897): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "wcWrFragSizes_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: wcWrFragSizes(897): Cannot add 16 elements to context";
                                              goto LABEL_2616;
                                            case 898:
                                              if (v14 != 16) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: indStateAcrossGcDidNoL(898): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "indStateAcrossGcDidNoL_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: indStateAcrossGcDidNoL(898): Cannot add 16 e"
                                                    "lements to context";
                                              goto LABEL_2616;
                                            case 899:
                                              if (v14 != 16) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: indStateAcrossGcDidL(899): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "indStateAcrossGcDidL_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: indStateAcrossGcDidL(899): Cannot add 16 ele"
                                                    "ments to context";
                                              goto LABEL_2616;
                                            case 900:
                                              if (sub_100025F08(a1, "turboRaidNoClassifyDueToWasRetire", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToWasRetire(900) canno"
                                              }
                                                    "t add 1 element to context";
                                              goto LABEL_161;
                                            case 901:
                                              if (sub_100025F08(a1, "turboRaidNoClassifyDueToOpenBand", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToOpenBand(901) cannot"
                                              }
                                                    " add 1 element to context";
                                              goto LABEL_161;
                                            case 902:
                                              if (sub_100025F08(a1, "turboRaidNoClassifyDueToQualityBlock", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToQualityBlock(902) ca"
                                              }
                                                    "nnot add 1 element to context";
                                              goto LABEL_161;
                                            case 903:
                                              if (sub_100025F08(a1, "turboRaidGbbOpenBand", (uint64_t)v8, 8u, 1u)) {
                                                goto LABEL_162;
                                              }
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidGbbOpenBand(903) cannot add 1 element to context";
                                              goto LABEL_161;
                                            case 904:
                                              if (sub_100025F08(a1, "turboRaidGbbShouldRetireOnRefresh", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidGbbShouldRetireOnRefresh(904) canno"
                                              }
                                                    "t add 1 element to context";
                                              goto LABEL_161;
                                            case 905:
                                              if (v14 != 16) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidRelPerBlock(905): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "turboRaidRelPerBlock_", (uint64_t)v8, 8u, v18)) {
                                                goto LABEL_110;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidRelPerBlock(905): Cannot add 16 ele"
                                                    "ments to context";
                                              goto LABEL_2616;
                                            case 906:
                                              if (v14 != 16) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidRelBetweenRefreshesPerBlock(906): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "turboRaidRelBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidRelBetweenRefreshesPerBlock(906): C"
                                              }
                                                    "annot add 16 elements to context";
                                              goto LABEL_2616;
                                            default:
                                              if (v12 <= 1039)
                                              {
                                                switch(v12)
                                                {
                                                  case 907:
                                                    if (v14 != 16) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidMaxRelBetweenRefreshesPerBlock(907): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "turboRaidMaxRelBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMaxRelBetweenRefreshesPerBloc"
                                                    }
                                                          "k(907): Cannot add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 908:
                                                    if (v14 != 16) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidMinRelBetweenRefreshesPerBlock(908): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "turboRaidMinRelBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMinRelBetweenRefreshesPerBloc"
                                                    }
                                                          "k(908): Cannot add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 909:
                                                  case 910:
                                                  case 911:
                                                  case 912:
                                                  case 913:
                                                  case 914:
                                                  case 915:
                                                  case 916:
                                                  case 917:
                                                  case 924:
                                                  case 925:
                                                  case 926:
                                                  case 927:
                                                  case 928:
                                                  case 929:
                                                  case 936:
                                                  case 941:
                                                  case 945:
                                                  case 946:
                                                  case 947:
                                                  case 949:
                                                  case 950:
                                                  case 952:
                                                  case 954:
                                                  case 955:
                                                  case 956:
                                                  case 957:
                                                  case 958:
                                                  case 959:
                                                  case 960:
                                                  case 963:
                                                  case 964:
                                                  case 965:
                                                  case 966:
                                                  case 968:
                                                  case 969:
                                                  case 970:
                                                    goto LABEL_2478;
                                                  case 918:
                                                    if (v14 != 16) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenRel(918): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "turboRaidMaxCyclesBetweenRel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenRel(918): Can"
                                                    }
                                                          "not add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 919:
                                                    if (v14 != 16) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenRel(919): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "turboRaidMinCyclesBetweenRel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenRel(919): Can"
                                                    }
                                                          "not add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 920:
                                                    if (v14 != 16) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidAuxPerBlock(920): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "turboRaidAuxPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidAuxPerBlock(920): Cannot add "
                                                    }
                                                          "16 elements to context";
                                                    goto LABEL_2616;
                                                  case 921:
                                                    if (v14 != 16) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidAuxBetweenRefreshesPerBlock(921): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "turboRaidAuxBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidAuxBetweenRefreshesPerBlock(9"
                                                    }
                                                          "21): Cannot add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 922:
                                                    if (sub_100025F08(a1, "turboRaidRelLockMark", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: turboRaidRelLockMark(922) cannot add 1"
                                                          " element to context";
                                                    goto LABEL_161;
                                                  case 923:
                                                    if (sub_100025F08(a1, "turboRaidAuxLockMark", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: turboRaidAuxLockMark(923) cannot add 1"
                                                          " element to context";
                                                    goto LABEL_161;
                                                  case 930:
                                                    if (v14 != 16) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenAux(930): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "turboRaidMaxCyclesBetweenAux_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenAux(930): Can"
                                                    }
                                                          "not add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 931:
                                                    if (v14 != 16) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenAux(931): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "turboRaidMinCyclesBetweenAux_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenAux(931): Can"
                                                    }
                                                          "not add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 932:
                                                    if (v14 != 16) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidLastRelPECycles(932): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "turboRaidLastRelPECycles_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidLastRelPECycles(932): Cannot "
                                                    }
                                                          "add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 933:
                                                    if (v14 != 16) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidRelQualPECycles(933): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "turboRaidRelQualPECycles_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidRelQualPECycles(933): Cannot "
                                                    }
                                                          "add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 934:
                                                    if (v14 != 16) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidLastAuxPECycles(934): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "turboRaidLastAuxPECycles_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidLastAuxPECycles(934): Cannot "
                                                    }
                                                          "add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 935:
                                                    if (v14 != 16) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: turboRaidAuxQualPECycles(935): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "turboRaidAuxQualPECycles_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidAuxQualPECycles(935): Cannot "
                                                    }
                                                          "add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 937:
                                                    if (sub_100025F08(a1, "turboRaidPEFailAfterRel", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: turboRaidPEFailAfterRel(937) cannot ad"
                                                    }
                                                          "d 1 element to context";
                                                    goto LABEL_161;
                                                  case 938:
                                                    if (sub_100025F08(a1, "turboRaidPEFailAfterAux", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: turboRaidPEFailAfterAux(938) cannot ad"
                                                    }
                                                          "d 1 element to context";
                                                    goto LABEL_161;
                                                  case 939:
                                                    if (sub_100025F08(a1, "dvfmVotesCPU", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: dvfmVotesCPU(939) cannot add 1 element to context";
                                                    goto LABEL_161;
                                                  case 940:
                                                    if (sub_100025F08(a1, "dvfmVotesBandwidth", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: dvfmVotesBandwidth(940) cannot add 1 e"
                                                          "lement to context";
                                                    goto LABEL_161;
                                                  case 942:
                                                    if (sub_100025F08(a1, "maxSLCEndurance", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: maxSLCEndurance(942) cannot add 1 element to context";
                                                    goto LABEL_161;
                                                  case 943:
                                                    if (sub_100025F08(a1, "maxMixedEndurance", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: maxMixedEndurance(943) cannot add 1 el"
                                                          "ement to context";
                                                    goto LABEL_161;
                                                  case 944:
                                                    if (sub_100025F08(a1, "maxNativeEndurance", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: maxNativeEndurance(944) cannot add 1 e"
                                                          "lement to context";
                                                    goto LABEL_161;
                                                  case 948:
                                                    if (v14 != 40) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: assertHistory(948): (#40) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x28) {
                                                      unsigned int v18 = 40;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "assertHistory_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: assertHistory(948): Cannot add 40 elements to context";
                                                    goto LABEL_2616;
                                                  case 951:
                                                    if (sub_100025F08(a1, "asp3Support", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: asp3Support(951) cannot add 1 element to context";
                                                    goto LABEL_161;
                                                  case 953:
                                                    if (sub_100025F08(a1, "numCrossTempRaidUecc", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: numCrossTempRaidUecc(953) cannot add 1"
                                                          " element to context";
                                                    goto LABEL_161;
                                                  case 961:
                                                    if (sub_100025F08(a1, "osBuildStr", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: osBuildStr(961) cannot add 1 element to context";
                                                    goto LABEL_161;
                                                  case 962:
                                                    if (sub_100025F08(a1, "raidConfig", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: raidConfig(962) cannot add 1 element to context";
                                                    goto LABEL_161;
                                                  case 967:
                                                    if (v14 != 12) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: indTrimFrags(967): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0xC) {
                                                      unsigned int v18 = 12;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "indTrimFrags_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: indTrimFrags(967): Cannot add 12 elements to context";
                                                    goto LABEL_2616;
                                                  case 971:
                                                    if (v14 != 12) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: indUsedFrags(971): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0xC) {
                                                      unsigned int v18 = 12;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "indUsedFrags_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: indUsedFrags(971): Cannot add 12 elements to context";
                                                    goto LABEL_2616;
                                                  default:
                                                    switch(v12)
                                                    {
                                                      case 996:
                                                        if (sub_100025F08(a1, "clogFindFail", (uint64_t)v8, 8u, 1u)) {
                                                          goto LABEL_162;
                                                        }
                                                        int v17 = "ASPFTLParseBufferToCxt: clogFindFail(996) cannot add 1 element to context";
                                                        goto LABEL_161;
                                                      case 997:
                                                        if (sub_100025F08(a1, "clogFindBlank", (uint64_t)v8, 8u, 1u)) {
                                                          goto LABEL_162;
                                                        }
                                                        int v17 = "ASPFTLParseBufferToCxt: clogFindBlank(997) cannot add 1 el"
                                                              "ement to context";
                                                        goto LABEL_161;
                                                      case 998:
                                                        if (sub_100025F08(a1, "clogFindUnc", (uint64_t)v8, 8u, 1u)) {
                                                          goto LABEL_162;
                                                        }
                                                        int v17 = "ASPFTLParseBufferToCxt: clogFindUnc(998) cannot add 1 element to context";
                                                        goto LABEL_161;
                                                      case 999:
                                                        if (sub_100025F08(a1, "clogFindUnexpected", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: clogFindUnexpected(999) cannot add"
                                                        }
                                                              " 1 element to context";
                                                        goto LABEL_161;
                                                      case 1001:
                                                        if (v14 != 8) {
                                                          sub_100013EE0("ASPFTLParseBufferToCxt: clogReplayFailReason(1001): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 8) {
                                                          unsigned int v18 = 8;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (sub_100025F08(a1, "clogReplayFailReason_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: clogReplayFailReason(1001): Cannot"
                                                        }
                                                              " add 8 elements to context";
                                                        goto LABEL_2616;
                                                      case 1002:
                                                        if (sub_100025F08(a1, "clogReplayTransientError", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: clogReplayTransientError(1002) can"
                                                        }
                                                              "not add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1003:
                                                        if (sub_100025F08(a1, "clogReplaySpfError", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: clogReplaySpfError(1003) cannot ad"
                                                        }
                                                              "d 1 element to context";
                                                        goto LABEL_161;
                                                      case 1015:
                                                        if (v14 != 4) {
                                                          sub_100013EE0("ASPFTLParseBufferToCxt: eanEarlyBootUeccPage(1015): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 4) {
                                                          unsigned int v18 = 4;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (sub_100025F08(a1, "eanEarlyBootUeccPage_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: eanEarlyBootUeccPage(1015): Cannot"
                                                        }
                                                              " add 4 elements to context";
                                                        goto LABEL_2616;
                                                      case 1016:
                                                        if (sub_100025F08(a1, "eanEarlyBootNumUeccPages", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanEarlyBootNumUeccPages(1016) can"
                                                        }
                                                              "not add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1017:
                                                        if (sub_100025F08(a1, "eanEarlyBootUeccMultiplane", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanEarlyBootUeccMultiplane(1017) c"
                                                        }
                                                              "annot add 1 element to context";
                                                        goto LABEL_161;
                                                      default:
                                                        goto LABEL_2478;
                                                    }
                                                }
                                              }
                                              if (v12 > 1137)
                                              {
                                                switch(v12)
                                                {
                                                  case 1147:
                                                    if (v14 != 24) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: gc_concurrent_dw_gc12(1147): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "gc_concurrent_dw_gc12_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc12(1147): Cannot ad"
                                                    }
                                                          "d 24 elements to context";
                                                    goto LABEL_2616;
                                                  case 1148:
                                                    if (v14 != 24) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: gc_concurrent_dw_gc1(1148): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "gc_concurrent_dw_gc1_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc1(1148): Cannot add"
                                                    }
                                                          " 24 elements to context";
                                                    goto LABEL_2616;
                                                  case 1149:
                                                    if (v14 != 24) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: gc_concurrent_dw_gc2(1149): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "gc_concurrent_dw_gc2_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc2(1149): Cannot add"
                                                    }
                                                          " 24 elements to context";
                                                    goto LABEL_2616;
                                                  case 1150:
                                                  case 1151:
                                                  case 1152:
                                                  case 1153:
                                                  case 1154:
                                                  case 1155:
                                                  case 1156:
                                                  case 1159:
                                                  case 1160:
                                                  case 1161:
                                                  case 1162:
                                                  case 1163:
                                                  case 1164:
                                                  case 1165:
                                                  case 1166:
                                                  case 1167:
                                                  case 1170:
                                                  case 1173:
                                                  case 1174:
                                                  case 1175:
                                                  case 1176:
                                                  case 1177:
                                                  case 1178:
                                                    goto LABEL_2478;
                                                  case 1157:
                                                    if (sub_100025F08(a1, "eanMaxForceROTimeMs", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: eanMaxForceROTimeMs(1157) cannot add 1"
                                                          " element to context";
                                                    break;
                                                  case 1158:
                                                    if (sub_100025F08(a1, "eanMaxForceRORecoTimeMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: eanMaxForceRORecoTimeMs(1158) cannot a"
                                                    }
                                                          "dd 1 element to context";
                                                    break;
                                                  case 1168:
                                                    if (v14 != 2) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: poDetectPERemovalTotalCost(1168): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 2) {
                                                      unsigned int v18 = 2;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "poDetectPERemovalTotalCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectPERemovalTotalCost(1168): Cann"
                                                    }
                                                          "ot add 2 elements to context";
                                                    goto LABEL_2616;
                                                  case 1169:
                                                    if (v14 != 2) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalTotalCost(1169): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 2) {
                                                      unsigned int v18 = 2;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "poDetectEmptySpotRemovalTotalCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalTotalCost(1169"
                                                    }
                                                          "): Cannot add 2 elements to context";
                                                    goto LABEL_2616;
                                                  case 1171:
                                                    if (v14 != 10) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalAge(1171): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0xA) {
                                                      unsigned int v18 = 10;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "poDetectEmptySpotRemovalAge_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalAge(1171): Can"
                                                    }
                                                          "not add 10 elements to context";
                                                    goto LABEL_2616;
                                                  case 1172:
                                                    if (v14 != 3) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: poDetectGBBedMostSevereCost(1172): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 3) {
                                                      unsigned int v18 = 3;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "poDetectGBBedMostSevereCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectGBBedMostSevereCost(1172): Can"
                                                    }
                                                          "not add 3 elements to context";
                                                    goto LABEL_2616;
                                                  case 1179:
                                                    if (v14 != 4) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: gc_cur_dw_gc1(1179): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "gc_cur_dw_gc1_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc1(1179): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1180:
                                                    if (v14 != 4) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: gc_cur_dw_gc2(1180): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "gc_cur_dw_gc2_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc2(1180): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1181:
                                                    if (v14 != 4) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: gc_cur_dw_gc3(1181): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "gc_cur_dw_gc3_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc3(1181): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1182:
                                                    if (v14 != 4) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: gc_tot_dw_gc1(1182): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "gc_tot_dw_gc1_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_tot_dw_gc1(1182): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1183:
                                                    if (v14 != 4) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: gc_tot_dw_gc2(1183): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "gc_tot_dw_gc2_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_tot_dw_gc2(1183): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1184:
                                                    if (sub_100025F08(a1, "unhappy_state", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: unhappy_state(1184) cannot add 1 element to context";
                                                    break;
                                                  case 1185:
                                                    if (sub_100025F08(a1, "unhappy_level", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: unhappy_level(1185) cannot add 1 element to context";
                                                    break;
                                                  default:
                                                    if (v12 != 1138)
                                                    {
                                                      if (v12 != 1189) {
                                                        goto LABEL_2478;
                                                      }
                                                      if ((sub_100025F08(a1, "lastLbaFormatTime", (uint64_t)v8, 8u, 1u) & 1) == 0)
                                                      {
                                                        int v17 = "ASPFTLParseBufferToCxt: lastLbaFormatTime(1189) cannot add"
                                                              " 1 element to context";
                                                        break;
                                                      }
                                                      goto LABEL_162;
                                                    }
                                                    if (sub_100025F08(a1, "numOfToHappySwitches", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: numOfToHappySwitches(1138) cannot add "
                                                          "1 element to context";
                                                    break;
                                                }
LABEL_161:
                                                sub_100013EE0(v17, a2, a3, a4, a5, a6, a7, a8, v21);
                                                goto LABEL_162;
                                              }
                                              if (v12 <= 1104)
                                              {
                                                if (v12 <= 1041)
                                                {
                                                  if (v12 == 1040)
                                                  {
                                                    if (v14 != 31) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: bandsAgeBinsV2(1040): (#31) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x1F) {
                                                      unsigned int v18 = 31;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if ((sub_100025F08(a1, "bandsAgeBinsV2_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                    {
                                                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsAgeBinsV2(1040): Cannot add 31 "
                                                            "elements to context";
                                                      goto LABEL_2616;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (v14 != 31) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: bandsAgeBinsSnapshot(1041): (#31) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x1F) {
                                                      unsigned int v18 = 31;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if ((sub_100025F08(a1, "bandsAgeBinsSnapshot_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                    {
                                                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsAgeBinsSnapshot(1041): Cannot a"
                                                            "dd 31 elements to context";
                                                      goto LABEL_2616;
                                                    }
                                                  }
                                                  goto LABEL_110;
                                                }
                                                if (v12 == 1042)
                                                {
                                                  if (v14 != 15) {
                                                    sub_100013EE0("ASPFTLParseBufferToCxt: bandsAgeBinsReadSectors(1042): (#15) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                  }
                                                  if (v14 >= 0xF) {
                                                    unsigned int v18 = 15;
                                                  }
                                                  else {
                                                    unsigned int v18 = v14;
                                                  }
                                                  if ((sub_100025F08(a1, "bandsAgeBinsReadSectors_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                  {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: bandsAgeBinsReadSectors(1042): Cannot "
                                                          "add 15 elements to context";
                                                    goto LABEL_2616;
                                                  }
                                                  goto LABEL_110;
                                                }
                                                if (v12 == 1080)
                                                {
                                                  if ((sub_100025F08(a1, "raidForceClogLoad", (uint64_t)v8, 8u, 1u) & 1) == 0)
                                                  {
                                                    int v17 = "ASPFTLParseBufferToCxt: raidForceClogLoad(1080) cannot add 1 e"
                                                          "lement to context";
                                                    goto LABEL_161;
                                                  }
LABEL_162:
                                                  uint64_t v10 = (v10 + 1);
                                                  goto LABEL_163;
                                                }
                                                goto LABEL_2478;
                                              }
                                              if (v12 > 1115)
                                              {
                                                if (v12 == 1116)
                                                {
                                                  if (v14 != 32) {
                                                    sub_100013EE0("ASPFTLParseBufferToCxt: gcwamp(1116): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                  }
                                                  if (v14 >= 0x20) {
                                                    unsigned int v18 = 32;
                                                  }
                                                  else {
                                                    unsigned int v18 = v14;
                                                  }
                                                  if ((sub_100025F08(a1, "gcwamp_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                  {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gcwamp(1116): Cannot add 32 elements to context";
                                                    goto LABEL_2616;
                                                  }
                                                  goto LABEL_110;
                                                }
                                                if (v12 == 1137)
                                                {
                                                  if (sub_100025F08(a1, "numOfToUnhappySwitches", (uint64_t)v8, 8u, 1u)) {
                                                    goto LABEL_162;
                                                  }
                                                  int v17 = "ASPFTLParseBufferToCxt: numOfToUnhappySwitches(1137) cannot add "
                                                        "1 element to context";
                                                  goto LABEL_161;
                                                }
LABEL_2478:
                                                switch(v12)
                                                {
                                                  case 1196:
                                                    if (v14 != 5) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: poDetectGBBedTotalCost(1196): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 5) {
                                                      unsigned int v18 = 5;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "poDetectGBBedTotalCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectGBBedTotalCost(1196): Cannot a"
                                                    }
                                                          "dd 5 elements to context";
                                                    goto LABEL_2616;
                                                  case 1197:
                                                    if (v14 != 10) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: poDetectGBBedAge(1197): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0xA) {
                                                      unsigned int v18 = 10;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "poDetectGBBedAge_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectGBBedAge(1197): Cannot add 10 "
                                                          "elements to context";
                                                    goto LABEL_2616;
                                                  case 1198:
                                                    if (v14 != 3) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: poDetectPERemovalMostSevereCost(1198): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 3) {
                                                      unsigned int v18 = 3;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "poDetectPERemovalMostSevereCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectPERemovalMostSevereCost(1198):"
                                                    }
                                                          " Cannot add 3 elements to context";
                                                    goto LABEL_2616;
                                                  case 1199:
                                                    if (sub_100025F08(a1, "poDetectCurrentSize", (uint64_t)v8, 8u, 1u)) {
                                                      goto LABEL_162;
                                                    }
                                                    int v17 = "ASPFTLParseBufferToCxt: poDetectCurrentSize(1199) cannot add 1"
                                                          " element to context";
                                                    goto LABEL_161;
                                                  case 1200:
                                                  case 1203:
                                                  case 1204:
                                                  case 1205:
                                                  case 1206:
                                                  case 1207:
                                                  case 1208:
                                                  case 1209:
                                                  case 1210:
                                                  case 1212:
                                                  case 1213:
                                                  case 1214:
                                                  case 1219:
                                                  case 1220:
                                                  case 1221:
                                                  case 1222:
                                                  case 1223:
LABEL_2610:
                                                    if (v14 <= 1) {
                                                      snprintf(__str, 0x20uLL, "Stat_%d");
                                                    }
                                                    else {
                                                      snprintf(__str, 0x20uLL, "Stat_%d_");
                                                    }
                                                    if ((sub_100025F08(a1, __str, (uint64_t)v8, 8u, v14) & 1) == 0)
                                                    {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt %d: Cannot add %d elements to context", a2, a3, a4, a5, a6, a7, a8, v12);
                                                      return v10;
                                                    }
                                                    uint64_t v10 = (v10 + v14);
                                                    break;
                                                  case 1201:
                                                    if (v14 != 4) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: gcVerticalSuccssfulAlignments(1201): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "gcVerticalSuccssfulAlignments_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gcVerticalSuccssfulAlignments(1201): C"
                                                    }
                                                          "annot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1202:
                                                    if (v14 != 4) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: gcVerticalNoAlignmentDueToMissingSegs(1202): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "gcVerticalNoAlignmentDueToMissingSegs_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gcVerticalNoAlignmentDueToMissingSegs("
                                                    }
                                                          "1202): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1211:
                                                    if (v14 != 24) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: forcedAllocationSmallEraseQ(1211): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "forcedAllocationSmallEraseQ_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: forcedAllocationSmallEraseQ(1211): Can"
                                                    }
                                                          "not add 24 elements to context";
                                                    goto LABEL_2616;
                                                  case 1215:
                                                    if (v14 != 5) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: hostWritesPerThrottleZone(1215): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 5) {
                                                      unsigned int v18 = 5;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "hostWritesPerThrottleZone_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: hostWritesPerThrottleZone(1215): Canno"
                                                    }
                                                          "t add 5 elements to context";
                                                    goto LABEL_2616;
                                                  case 1216:
                                                    if (v14 != 24) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: tlcWLPerDipAvgPEC(1216): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "tlcWLPerDipAvgPEC_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: tlcWLPerDipAvgPEC(1216): Cannot add 24"
                                                          " elements to context";
                                                    goto LABEL_2616;
                                                  case 1217:
                                                    if (v14 != 24) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: tlcWLPerDipMaxPEC(1217): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "tlcWLPerDipMaxPEC_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: tlcWLPerDipMaxPEC(1217): Cannot add 24"
                                                          " elements to context";
                                                    goto LABEL_2616;
                                                  case 1218:
                                                    if (v14 != 24) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: tlcWLPerDipMinPEC(1218): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "tlcWLPerDipMinPEC_", (uint64_t)v8, 8u, v18)) {
                                                      goto LABEL_110;
                                                    }
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: tlcWLPerDipMinPEC(1218): Cannot add 24"
                                                          " elements to context";
                                                    goto LABEL_2616;
                                                  case 1224:
                                                    if (v14 != 20) {
                                                      sub_100013EE0("ASPFTLParseBufferToCxt: apfsValidLbaOvershoot(1224): (#20) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x14) {
                                                      unsigned int v18 = 20;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (sub_100025F08(a1, "apfsValidLbaOvershoot_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: apfsValidLbaOvershoot(1224): Cannot ad"
                                                    }
                                                          "d 20 elements to context";
                                                    goto LABEL_2616;
                                                  default:
                                                    switch(v12)
                                                    {
                                                      case 1232:
                                                        if (sub_100025F08(a1, "eanFastSize", (uint64_t)v8, 8u, 1u)) {
                                                          goto LABEL_162;
                                                        }
                                                        int v17 = "ASPFTLParseBufferToCxt: eanFastSize(1232) cannot add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1233:
                                                        if (sub_100025F08(a1, "eanNumSlcEvictions", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanNumSlcEvictions(1233) cannot ad"
                                                        }
                                                              "d 1 element to context";
                                                        goto LABEL_161;
                                                      case 1234:
                                                        if (sub_100025F08(a1, "eanNumForcedCompress", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanNumForcedCompress(1234) cannot "
                                                        }
                                                              "add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1235:
                                                      case 1236:
                                                      case 1237:
                                                      case 1238:
                                                      case 1239:
                                                      case 1240:
                                                      case 1242:
                                                      case 1243:
                                                      case 1245:
                                                        goto LABEL_2610;
                                                      case 1241:
                                                        if (v14 != 10) {
                                                          sub_100013EE0("ASPFTLParseBufferToCxt: s2rTimeHisto(1241): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 0xA) {
                                                          unsigned int v18 = 10;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (sub_100025F08(a1, "s2rTimeHisto_", (uint64_t)v8, 8u, v18)) {
                                                          goto LABEL_110;
                                                        }
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: s2rTimeHisto(1241): Cannot add 10 "
                                                              "elements to context";
                                                        goto LABEL_2616;
                                                      case 1244:
                                                        if (sub_100025F08(a1, "calendarTimeWentBackward", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: calendarTimeWentBackward(1244) can"
                                                        }
                                                              "not add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1246:
                                                        if (v14 != 8) {
                                                          sub_100013EE0("ASPFTLParseBufferToCxt: bandsUeccCrossTempHisto(1246): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 8) {
                                                          unsigned int v18 = 8;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (sub_100025F08(a1, "bandsUeccCrossTempHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: bandsUeccCrossTempHisto(1246): Can"
                                                        }
                                                              "not add 8 elements to context";
                                                        goto LABEL_2616;
                                                      default:
                                                        if (v12 != 1190) {
                                                          goto LABEL_2610;
                                                        }
                                                        if (v14 != 12) {
                                                          sub_100013EE0("ASPFTLParseBufferToCxt: powerDownTime(1190): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 0xC) {
                                                          unsigned int v18 = 12;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (sub_100025F08(a1, "powerDownTime_", (uint64_t)v8, 8u, v18)) {
                                                          goto LABEL_110;
                                                        }
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: powerDownTime(1190): Cannot add 12"
                                                              " elements to context";
                                                        break;
                                                    }
                                                    goto LABEL_2616;
                                                }
LABEL_163:
                                                v8 += v14;
                                                v11 -= v14;
                                                goto LABEL_2;
                                              }
                                              if (v12 == 1105)
                                              {
                                                if (v14 != 14) {
                                                  sub_100013EE0("ASPFTLParseBufferToCxt: hostReadSequential(1105): (#14) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                }
                                                if (v14 >= 0xE) {
                                                  unsigned int v18 = 14;
                                                }
                                                else {
                                                  unsigned int v18 = v14;
                                                }
                                                if ((sub_100025F08(a1, "hostReadSequential_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                {
                                                  unsigned int v19 = "ASPFTLParseBufferToCxt: hostReadSequential(1105): Cannot add 14 "
                                                        "elements to context";
                                                  goto LABEL_2616;
                                                }
                                                goto LABEL_110;
                                              }
                                              if (v12 != 1106) {
                                                goto LABEL_2478;
                                              }
                                              if (v14 != 14) {
                                                sub_100013EE0("ASPFTLParseBufferToCxt: GCReadSequential(1106): (#14) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0xE) {
                                                unsigned int v18 = 14;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (sub_100025F08(a1, "GCReadSequential_", (uint64_t)v8, 8u, v18))
                                              {
LABEL_110:
                                                uint64_t v10 = v18 + v10;
                                                goto LABEL_163;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: GCReadSequential(1106): Cannot add 14 elements to context";
LABEL_2616:
                                              sub_100013EE0(v19, a2, a3, a4, a5, a6, a7, a8, v21);
                                              return v10;
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
  }
}

uint64_t sub_100025F08(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = 1;
  if (a4 && a5)
  {
    if (a5 == 1)
    {
      if (a4 <= 8)
      {
        __memmove_chk();
        return sub_10002CAAC(a1, "", a2, 0);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      int v10 = 0;
      int v11 = 0;
      do
      {
        if (a4 <= 8)
        {
          __memmove_chk();
          snprintf(__str, 0x64uLL, "%d", v10);
          __str[100] = 0;
          uint64_t v5 = sub_10002CAAC(a1, a2, __str, 0) & v5;
        }
        else
        {
          uint64_t v5 = 0;
        }
        int v10 = (unsigned __int16)++v11;
      }
      while ((unsigned __int16)v11 < a5);
    }
  }
  return v5;
}

uint64_t sub_10002606C(uint64_t a1, unint64_t *a2, unsigned int a3)
{
  uint64_t v5 = 0;
  unsigned int v6 = a3 >> 3;
  *(_OWORD *)__str = 0u;
  long long v22 = 0u;
LABEL_2:
  int v7 = -v6;
  while (v7)
  {
    unint64_t v9 = *a2++;
    unsigned int v8 = v9;
    unint64_t v10 = HIDWORD(v9);
    ++v7;
    if (HIDWORD(v9))
    {
      if (v8 != 0xFFFF && v8 <= 0x30000000 && -v7 >= v10)
      {
        if (v10 <= 1) {
          snprintf(__str, 0x20uLL, "Stat_%d");
        }
        else {
          snprintf(__str, 0x20uLL, "Stat_%d_");
        }
        if (sub_100025F08(a1, __str, (uint64_t)a2, 8u, v10))
        {
          uint64_t v5 = (v5 + v10);
          a2 += v10;
          unsigned int v6 = -v7 - v10;
          goto LABEL_2;
        }
        sub_100013EE0("ASPFTLParseBufferToCxt %d: Cannot add %d elements to context", v13, v14, v15, v16, v17, v18, v19, v8);
      }
      return v5;
    }
  }
  return v5;
}

uint64_t sub_100026198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0;
  unint64_t v9 = "ASPMSPParseBufferToCxt: Passed in invalid buffer or empty buffer";
  if (!a2) {
    goto LABEL_1980;
  }
  unsigned int v10 = a3;
  if (!a3) {
    goto LABEL_1980;
  }
  uint64_t v11 = a2;
  uint64_t v8 = 0;
  unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_5(4256): Error adding 10 elements to context";
  while (1)
  {
    do
    {
      if (!v10) {
        return v8;
      }
      uint64_t v13 = (unsigned __int16 *)v11;
      uint64_t v14 = *(unsigned __int16 *)(v11 + 2);
      v11 += 4;
      v10 -= 4;
    }
    while (!v14);
    int v15 = *v13;
    if (v15 != 12286) {
      break;
    }
LABEL_461:
    v11 += v14;
    v10 -= v14;
  }
  if (v15 == 12287 || v10 < v14) {
    return v8;
  }
  switch(v15)
  {
    case 4096:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: passWithTmodeHard(4096): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "passWithTmodeHard", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeHard(4096): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4097:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: passWithTmodeFS1_2b(4097): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "passWithTmodeFS1_2b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_2b(4097): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4098:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: passWithTmodeFS1_4b(4098): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "passWithTmodeFS1_4b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_4b(4098): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4099:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: passWithTmodeHard_fast(4099): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "passWithTmodeHard_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeHard_fast(4099): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4100:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: passWithTmodeFS1_2b_fast(4100): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "passWithTmodeFS1_2b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_2b_fast(4100): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4101:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: passWithTmodeFS1_4b_fast(4101): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "passWithTmodeFS1_4b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_4b_fast(4101): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4102:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_EOL(4102): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "numOfCwFailedInTmodeFS2_EOL", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_EOL(4102): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4103:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_DSP_EOL(4103): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "numOfCwFailedInTmodeFS2_DSP_EOL", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_DSP_EOL(4103): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4104:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterAcq(4104): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassWithHardAfterAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterAcq(4104): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4105:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDBFastRead(4105): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "firstReadWasHardWithDefaultBDBFastRead", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDBFastRead(4105): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4106:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readalgoPassWithDS1(4106): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readalgoPassWithDS1", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS1(4106): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4107:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readalgoPassWithDYCE1(4107): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readalgoPassWithDYCE1", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE1(4107): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4108:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readalgoPassWithDS2(4108): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readalgoPassWithDS2", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS2(4108): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4109:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readalgoPassWithDYCE2(4109): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readalgoPassWithDYCE2", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE2(4109): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4110:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: firstReadWasHardWithAcq(4110): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "firstReadWasHardWithAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithAcq(4110): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4111:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_LSB(4111): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "bdbDynamicMovedToEOL_LSB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_LSB(4111): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4112:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_MSB(4112): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "bdbDynamicMovedToEOL_MSB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_MSB(4112): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4113:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_USB(4113): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "bdbDynamicMovedToEOL_USB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_USB(4113): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4114:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_LSB(4114): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "bdbDynamicMovedToSOL_LSB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_LSB(4114): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4115:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_MSB(4115): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "bdbDynamicMovedToSOL_MSB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_MSB(4115): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4116:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_USB(4116): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "bdbDynamicMovedToSOL_USB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_USB(4116): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4117:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDB(4117): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "firstReadWasHardWithDefaultBDB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDB(4117): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4118:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition(4118): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassedThroughSyndSumAcquisition", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition(4118): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4119:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip(4119): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassedThroughSlip", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip(4119): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4120:
      if (v14 != 44) {
        sub_100013EE0("ASPMSPParseBufferToCxt: FS2decodedBitFlips(4120): cfg 11 elements; (11*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x30) {
        unsigned int v17 = 11;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "FS2decodedBitFlips", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: FS2decodedBitFlips(4120): Error adding 11 elements to context";
      goto LABEL_1980;
    case 4121:
      if (v14 != 16) {
        sub_100013EE0("ASPMSPParseBufferToCxt: slipTrackingAfterFs1ForceFailChangedVthInTicksHist(4121): cfg 4 elements; (4*4) cfg by"
      }
          "tes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x14) {
        unsigned int v17 = 4;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "slipTrackingAfterFs1ForceFailChangedVthInTicksHist", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: slipTrackingAfterFs1ForceFailChangedVthInTicksHist(4121): Error adding 4 elements to context";
      goto LABEL_1980;
    case 4122:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b_fast(4122): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassWithFS2_4b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b_fast(4122): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4123:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip_fast(4123): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassWithHardAfterSlip_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip_fast(4123): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4124:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip_fast(4124): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassWithFS12BitAfterSlip_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip_fast(4124): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4125:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip_fast(4125): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassWithFS14BitAfterSlip_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip_fast(4125): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4126:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithFS3_fast(4126): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassWithFS3_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS3_fast(4126): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4127:
      if (v14 != 40) {
        sub_100013EE0("ASPMSPParseBufferToCxt: deepSoft1Decoded(4127): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x2C) {
        unsigned int v17 = 10;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "deepSoft1Decoded", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: deepSoft1Decoded(4127): Error adding 10 elements to context";
      goto LABEL_1980;
    case 4128:
      if (v14 != 40) {
        sub_100013EE0("ASPMSPParseBufferToCxt: deepSoft2Decoded(4128): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x2C) {
        unsigned int v17 = 10;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "deepSoft2Decoded", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: deepSoft2Decoded(4128): Error adding 10 elements to context";
      goto LABEL_1980;
    case 4129:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b_fast(4129): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassedThroughFS2_2b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b_fast(4129): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4130:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b_fast(4130): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassedThroughFS2_4b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b_fast(4130): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4131:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip_fast(4131): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassedThroughSlip_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip_fast(4131): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4132:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3_fast(4132): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassedThroughFS3_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3_fast(4132): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4133:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readalgoPassWithEXH(4133): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readalgoPassWithEXH", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithEXH(4133): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4134:
      if (v14 != 44) {
        sub_100013EE0("ASPMSPParseBufferToCxt: FS1decodedbitflips(4134): cfg 11 elements; (11*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x30) {
        unsigned int v17 = 11;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "FS1decodedbitflips", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: FS1decodedbitflips(4134): Error adding 11 elements to context";
      goto LABEL_1980;
    case 4135:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readZeroPage(4135): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readZeroPage", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readZeroPage(4135): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4136:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readErasedPage(4136): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readErasedPage", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readErasedPage(4136): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4137:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readFail(4137): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readFail", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readFail(4137): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4138:
      if (v14 != 20) {
        sub_100013EE0("ASPMSPParseBufferToCxt: numOfSensesWereSentDuringSyndSumAcq(4138): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x18) {
        unsigned int v17 = 5;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "numOfSensesWereSentDuringSyndSumAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfSensesWereSentDuringSyndSumAcq(4138): Error adding 5 elements to context";
      goto LABEL_1980;
    case 4139:
      if (v14 != 12) {
        sub_100013EE0("ASPMSPParseBufferToCxt: numOfSensesWereSentDuringMiniAcq(4139): cfg 3 elements; (3*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x10) {
        unsigned int v17 = 3;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "numOfSensesWereSentDuringMiniAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfSensesWereSentDuringMiniAcq(4139): Error adding 3 elements to context";
      goto LABEL_1980;
    case 4140:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: bdbDefaultMoveFastToNormal(4140): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "bdbDefaultMoveFastToNormal", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDefaultMoveFastToNormal(4140): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4141:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: bdbDefaultMoveNormalToFast(4141): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "bdbDefaultMoveNormalToFast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDefaultMoveNormalToFast(4141): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4142:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readalgoPassWithEXH_DSP(4142): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readalgoPassWithEXH_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithEXH_DSP(4142): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4143:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readalgoPassWithDS1_DSP(4143): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readalgoPassWithDS1_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS1_DSP(4143): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4144:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readalgoPassWithDYCE1_DSP(4144): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readalgoPassWithDYCE1_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE1_DSP(4144): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4145:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: firstReadWasFS2EOL_DSP(4145): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "firstReadWasFS2EOL_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasFS2EOL_DSP(4145): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4146:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: firstReadWasFS2EOL(4146): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "firstReadWasFS2EOL", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasFS2EOL(4146): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4147:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b(4147): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassedThroughFS2_4b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b(4147): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4148:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b(4148): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassWithFS2_4b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b(4148): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4149:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b(4149): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassedThroughFS2_2b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b(4149): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4150:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3(4150): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassedThroughFS3", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3(4150): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4151:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1(4151): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassedThroughDS1", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1(4151): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4152:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughDS2(4152): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassedThroughDS2", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS2(4152): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4153:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip(4153): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassWithHardAfterSlip", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip(4153): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4154:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip(4154): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassWithFS12BitAfterSlip", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip(4154): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4155:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip(4155): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassWithFS14BitAfterSlip", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip(4155): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4156:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithFS3(4156): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassWithFS3", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS3(4156): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4157:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition_DSP(4157): cfg 1 elements; (1*4) cfg bytes != "
      }
          "(%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassedThroughSyndSumAcquisition_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition_DSP(4157): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4158:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterAcq(4158): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (sub_100025F08(a1, "readAlgoPassWithFS12BitAfterAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterAcq(4158): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4159:
      if (v14 != 4) {
        sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterAcq(4159): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (!sub_100025F08(a1, "readAlgoPassWithFS14BitAfterAcq", v11, 4u, v17))
      {
        unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterAcq(4159): Error adding 1 elements to context";
        goto LABEL_1980;
      }
LABEL_460:
      uint64_t v8 = v8 + v17;
      goto LABEL_461;
    default:
      switch(v15)
      {
        case 4160:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1_DSP(4160): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readAlgoPassedThroughDS1_DSP", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1_DSP(4160): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4161:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: numOfSlipTracking(4161): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "numOfSlipTracking", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: numOfSlipTracking(4161): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4162:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_QSB(4162): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "bdbDynamicMovedToEOL_QSB", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_QSB(4162): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4163:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_QSB(4163): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "bdbDynamicMovedToSOL_QSB", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_QSB(4163): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4196:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails100(4196): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStageNumOfFails100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails100(4196): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4197:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails101(4197): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStageNumOfFails101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails101(4197): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4198:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStage100(4198): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStage100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage100(4198): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4199:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStage101(4199): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStage101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage101(4199): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4200:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage100(4200): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "initialReadStage100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage100(4200): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4201:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStage102(4201): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStage102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage102(4201): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4202:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage101(4202): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "initialReadStage101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage101(4202): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4203:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: nandStageOfLife100(4203): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "nandStageOfLife100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife100(4203): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4204:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: nandStageOfLife101(4204): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "nandStageOfLife101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife101(4204): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4205:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails102(4205): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStageNumOfFails102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails102(4205): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4206:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage102(4206): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "initialReadStage102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage102(4206): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4207:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStage103(4207): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStage103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage103(4207): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4208:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStage104(4208): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStage104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage104(4208): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4209:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStage105(4209): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStage105", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage105(4209): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4210:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStage106(4210): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStage106", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage106(4210): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4211:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter100(4211): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter100(4211): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4212:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter101(4212): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter101(4212): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4213:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage103(4213): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "initialReadStage103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage103(4213): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4214:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage104(4214): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "initialReadStage104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage104(4214): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4215:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStage107(4215): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStage107", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage107(4215): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4216:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStage108(4216): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStage108", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage108(4216): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4217:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: nandStageOfLife102(4217): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "nandStageOfLife102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife102(4217): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4218:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: nandStageOfLife103(4218): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "nandStageOfLife103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife103(4218): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4219:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: nandStageOfLife104(4219): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "nandStageOfLife104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife104(4219): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4220:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter102(4220): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter102(4220): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4221:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter103(4221): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter103(4221): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4222:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter104(4222): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter104(4222): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4223:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter105(4223): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter105", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter105(4223): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4224:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter106(4224): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter106", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter106(4224): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4225:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter107(4225): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter107", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter107(4225): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4226:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter108(4226): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter108", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter108(4226): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4227:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter109(4227): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter109", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter109(4227): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4228:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter110(4228): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter110", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter110(4228): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4229:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter111(4229): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter111", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter111(4229): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4230:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter112(4230): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter112", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter112(4230): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4231:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter113(4231): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter113", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter113(4231): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4232:
          if (v14 != 256) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails108(4232): cfg 64 elements; (64*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x104) {
            unsigned int v17 = 64;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStageNumOfFails108", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails108(4232): Error adding 64 elements to context";
          goto LABEL_1980;
        case 4233:
          if (v14 != 256) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails103(4233): cfg 64 elements; (64*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x104) {
            unsigned int v17 = 64;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStageNumOfFails103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails103(4233): Error adding 64 elements to context";
          goto LABEL_1980;
        case 4234:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails104(4234): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStageNumOfFails104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails104(4234): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4235:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails105(4235): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStageNumOfFails105", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails105(4235): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4236:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails106(4236): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStageNumOfFails106", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails106(4236): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4237:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails107(4237): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStageNumOfFails107", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails107(4237): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4238:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStage109(4238): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStage109", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage109(4238): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4239:
          if (v14 != 16) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStage110(4239): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStage110", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage110(4239): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4240:
          if (v14 != 80) {
            sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfErrorsBin100(4240): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x54) {
            unsigned int v17 = 20;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "readStageNumOfErrorsBin100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfErrorsBin100(4240): Error adding 20 elements to context";
          goto LABEL_1980;
        case 4241:
          if (v14 != 80) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter114(4241): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x54) {
            unsigned int v17 = 20;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter114", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter114(4241): Error adding 20 elements to context";
          goto LABEL_1980;
        case 4242:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter115(4242): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter115", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter115(4242): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4243:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter116(4243): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter116", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter116(4243): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4244:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter117(4244): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter117", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter117(4244): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4245:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter118(4245): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter118", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter118(4245): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4246:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter119(4246): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter119", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter119(4246): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4247:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter120(4247): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter120", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter120(4247): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4248:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter121(4248): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "dspExceptionParameter121", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter121(4248): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4249:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: cbdr_ref_1(4249): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "cbdr_ref_1", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_ref_1(4249): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4250:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: cbdr_ref_2(4250): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "cbdr_ref_2", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_ref_2(4250): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4251:
          if (v14 != 4) {
            sub_100013EE0("ASPMSPParseBufferToCxt: cbdr_outlier(4251): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "cbdr_outlier", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_outlier(4251): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4252:
          if (v14 != 40) {
            sub_100013EE0("ASPMSPParseBufferToCxt: cbdr_step_1(4252): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x2C) {
            unsigned int v17 = 10;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "cbdr_step_1", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_1(4252): Error adding 10 elements to context";
          goto LABEL_1980;
        case 4253:
          if (v14 != 40) {
            sub_100013EE0("ASPMSPParseBufferToCxt: cbdr_step_2(4253): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x2C) {
            unsigned int v17 = 10;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "cbdr_step_2", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_2(4253): Error adding 10 elements to context";
          goto LABEL_1980;
        case 4254:
          if (v14 != 40) {
            sub_100013EE0("ASPMSPParseBufferToCxt: cbdr_step_3(4254): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x2C) {
            unsigned int v17 = 10;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "cbdr_step_3", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_3(4254): Error adding 10 elements to context";
          goto LABEL_1980;
        case 4255:
          if (v14 != 40) {
            sub_100013EE0("ASPMSPParseBufferToCxt: cbdr_step_4(4255): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x2C) {
            unsigned int v17 = 10;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (sub_100025F08(a1, "cbdr_step_4", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_4(4255): Error adding 10 elements to context";
          goto LABEL_1980;
        default:
          switch(v15)
          {
            case 12288:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails200(12288): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStageNumOfFails200", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails200(12288): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12289:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage200(12289): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage200", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage200(12289): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12290:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage201(12290): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage201", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage201(12290): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12291:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails201(12291): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStageNumOfFails201", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails201(12291): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12292:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage202(12292): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage202", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage202(12292): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12293:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage203(12293): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage203", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage203(12293): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12294:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails202(12294): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStageNumOfFails202", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails202(12294): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12295:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStageNumOfFails203(12295): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStageNumOfFails203", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails203(12295): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12296:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage204(12296): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage204", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage204(12296): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12297:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage205(12297): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage205", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage205(12297): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12298:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage206(12298): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage206", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage206(12298): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12299:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage207(12299): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage207", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage207(12299): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12300:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage208(12300): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage208", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage208(12300): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12301:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage209(12301): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage209", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage209(12301): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12302:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage200(12302): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage200", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage200(12302): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12303:
              if (v14 != 32) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage201(12303): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x28) {
                unsigned int v18 = 4;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage201", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage201(12303): Error adding 4 elements to context";
              goto LABEL_1980;
            case 12304:
              if (v14 != 32) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage202(12304): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x28) {
                unsigned int v18 = 4;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage202", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage202(12304): Error adding 4 elements to context";
              goto LABEL_1980;
            case 12305:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage210(12305): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage210", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage210(12305): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12306:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage211(12306): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage211", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage211(12306): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12307:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage203(12307): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage203", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage203(12307): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12308:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage204(12308): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage204", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage204(12308): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12309:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage205(12309): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage205", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage205(12309): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12310:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage206(12310): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage206", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage206(12310): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12311:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage207(12311): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage207", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage207(12311): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12312:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage208(12312): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage208", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage208(12312): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12313:
              if (v14 != 32) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage209(12313): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x28) {
                unsigned int v18 = 4;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage209", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage209(12313): Error adding 4 elements to context";
              goto LABEL_1980;
            case 12314:
              if (v14 != 32) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage210(12314): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x28) {
                unsigned int v18 = 4;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage210", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage210(12314): Error adding 4 elements to context";
              goto LABEL_1980;
            case 12315:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage212(12315): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage212", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage212(12315): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12316:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStage213(12316): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "initialReadStage213", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage213(12316): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12317:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage211(12317): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage211", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage211(12317): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12318:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage212(12318): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage212", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage212(12318): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12319:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage213(12319): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage213", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage213(12319): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12320:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage214(12320): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage214", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage214(12320): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12321:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: readStage215(12321): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "readStage215", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage215(12321): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12322:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter142(12322): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "dspExceptionParameter142", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter142(12322): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12323:
              if (v14 != 8) {
                sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter143(12323): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (sub_100025F08(a1, "dspExceptionParameter143", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter143(12323): Error adding 1 elements to context";
              goto LABEL_1980;
            default:
              switch(v15)
              {
                case 4256:
                  if (v14 != 40) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: cbdr_step_5(4256): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (!sub_100025F08(a1, "cbdr_step_5", v11, 4u, v18)) {
                    goto LABEL_1980;
                  }
                  goto LABEL_1372;
                case 4257:
                  if (v14 != 40) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: cbdr_step_6(4257): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "cbdr_step_6", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_6(4257): Error adding 10 elements to context";
                  goto LABEL_1980;
                case 4258:
                  if (v14 != 40) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: cbdr_step_7(4258): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "cbdr_step_7", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_7(4258): Error adding 10 elements to context";
                  goto LABEL_1980;
                case 4259:
                  if (v14 != 80) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter122(4259): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x54) {
                    unsigned int v18 = 20;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter122", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter122(4259): Error adding 20 elements to context";
                  goto LABEL_1980;
                case 4260:
                  if (v14 != 32) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter123(4260): cfg 8 elements; (8*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x24) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter123", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter123(4260): Error adding 8 elements to context";
                  goto LABEL_1980;
                case 4261:
                  if (v14 != 4) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter124(4261): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter124", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter124(4261): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4262:
                  if (v14 != 4) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter125(4262): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter125", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter125(4262): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4263:
                  if (v14 != 4) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter126(4263): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter126", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter126(4263): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4264:
                  if (v14 != 16) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter127(4264): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter127", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter127(4264): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4265:
                  if (v14 != 16) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter128(4265): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter128", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter128(4265): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4266:
                  if (v14 != 16) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter129(4266): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter129", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter129(4266): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4267:
                  if (v14 != 16) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter130(4267): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter130", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter130(4267): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4268:
                  if (v14 != 16) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter131(4268): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter131", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter131(4268): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4269:
                  if (v14 != 40) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter132(4269): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter132", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter132(4269): Error adding 10 elements to context";
                  goto LABEL_1980;
                case 4270:
                  if (v14 != 40) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter133(4270): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter133", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter133(4270): Error adding 10 elements to context";
                  goto LABEL_1980;
                case 4271:
                  if (v14 != 4) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter134(4271): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter134", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter134(4271): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4272:
                  if (v14 != 4) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter135(4272): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter135", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter135(4272): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4273:
                  if (v14 != 4) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter136(4273): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter136", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter136(4273): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4274:
                  if (v14 != 4) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter137(4274): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter137", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter137(4274): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4275:
                  if (v14 != 4) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter138(4275): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter138", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter138(4275): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4276:
                  if (v14 != 16) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter139(4276): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter139", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter139(4276): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4277:
                  if (v14 != 4) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter140(4277): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter140", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter140(4277): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4278:
                  if (v14 != 4) {
                    sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter141(4278): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (sub_100025F08(a1, "dspExceptionParameter141", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter141(4278): Error adding 1 elements to context";
                  goto LABEL_1980;
                default:
                  switch(v15)
                  {
                    case 4164:
                      if (v14 != 4) {
                        sub_100013EE0("ASPMSPParseBufferToCxt: syndSumAcqConvergedToStaticWalls(4164): cfg 1 elements; (1*4) cfg byte"
                      }
                          "s != (%d) buffer bytes",
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 8) {
                        unsigned int v18 = 1;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (sub_100025F08(a1, "syndSumAcqConvergedToStaticWalls", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: syndSumAcqConvergedToStaticWalls(4164): Error adding 1 elements to context";
                      goto LABEL_1980;
                    case 4165:
                      if (v14 != 60) {
                        sub_100013EE0("ASPMSPParseBufferToCxt: DYCE1_Decoded_Bitflips(4165): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x40) {
                        unsigned int v18 = 15;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (sub_100025F08(a1, "DYCE1_Decoded_Bitflips", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE1_Decoded_Bitflips(4165): Error adding 15 elements to context";
                      goto LABEL_1980;
                    case 4166:
                      if (v14 != 80) {
                        sub_100013EE0("ASPMSPParseBufferToCxt: DYCE1_Target_Bitflips(4166): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x54) {
                        unsigned int v18 = 20;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (sub_100025F08(a1, "DYCE1_Target_Bitflips", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE1_Target_Bitflips(4166): Error adding 20 elements to context";
                      goto LABEL_1980;
                    case 4167:
                      if (v14 != 60) {
                        sub_100013EE0("ASPMSPParseBufferToCxt: DYCE2_Decoded_Bitflips(4167): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x40) {
                        unsigned int v18 = 15;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (sub_100025F08(a1, "DYCE2_Decoded_Bitflips", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE2_Decoded_Bitflips(4167): Error adding 15 elements to context";
                      goto LABEL_1980;
                    case 4168:
                      if (v14 != 80) {
                        sub_100013EE0("ASPMSPParseBufferToCxt: DYCE2_Target_Bitflips(4168): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x54) {
                        unsigned int v18 = 20;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (sub_100025F08(a1, "DYCE2_Target_Bitflips", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE2_Target_Bitflips(4168): Error adding 20 elements to context";
                      goto LABEL_1980;
                    default:
                      if (v15 <= 12323)
                      {
                        switch(v15)
                        {
                          case 8193:
                            if (v14 != 20) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: avg_rd_window_size(8193): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "avg_rd_window_size", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: avg_rd_window_size(8193): Error adding 5 elements to context";
                            break;
                          case 8194:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: num_zq_failures(8194): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "num_zq_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: num_zq_failures(8194): Error adding 1 elements to context";
                            break;
                          case 8195:
                            if (v14 != 64) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: lower_die_temperature(8195): cfg 16 elements; (16*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x44) {
                              unsigned int v18 = 16;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "lower_die_temperature", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8195): Error adding 16 elements to context";
                            break;
                          case 8196:
                            if (v14 != 64) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: higher_die_temperature(8196): cfg 16 elements; (16*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x44) {
                              unsigned int v18 = 16;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "higher_die_temperature", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8196): Error adding 16 elements to context";
                            break;
                          case 8197:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: number_of_sram_flips(8197): cfg 1 elements; (1*4) cfg bytes != ("
                            }
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "number_of_sram_flips", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_sram_flips(8197): Error adding 1 elements to context";
                            break;
                          case 8198:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: number_of_reset_failures(8198): cfg 1 elements; (1*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "number_of_reset_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_reset_failures(8198): Error adding 1 elements to context";
                            break;
                          case 8199:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: device_config(8199): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "device_config", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: device_config(8199): Error adding 1 elements to context";
                            break;
                          case 8200:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: number_of_throttling_events(8200): cfg 1 elements; (1*4) cfg byt"
                            }
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "number_of_throttling_events", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_throttling_events(8200): Error adding 1 elements to context";
                            break;
                          case 8201:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: link_speed_recoveries(8201): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "link_speed_recoveries", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: link_speed_recoveries(8201): Error adding 1 elements to context";
                            break;
                          case 8202:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: fw_updates(8202): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "fw_updates", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: fw_updates(8202): Error adding 1 elements to context";
                            break;
                          case 8203:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: maintenance_backup_to_main(8203): cfg 1 elements; (1*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "maintenance_backup_to_main", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: maintenance_backup_to_main(8203): Error adding 1 elements to context";
                            break;
                          case 8204:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: maintenance_main_to_backup(8204): cfg 1 elements; (1*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "maintenance_main_to_backup", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: maintenance_main_to_backup(8204): Error adding 1 elements to context";
                            break;
                          case 8205:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: boot_block_erase_failures(8205): cfg 1 elements; (1*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "boot_block_erase_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_erase_failures(8205): Error adding 1 elements to context";
                            break;
                          case 8206:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: boot_block_program_failures(8206): cfg 1 elements; (1*4) cfg byt"
                            }
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "boot_block_program_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_program_failures(8206): Error adding 1 elements to context";
                            break;
                          case 8207:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: boot_block_read_verify_failures(8207): cfg 1 elements; (1*4) cfg"
                            }
                                " bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "boot_block_read_verify_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_read_verify_failures(8207): Error adding 1 elements to context";
                            break;
                          case 8208:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: boot_block_read_failures(8208): cfg 1 elements; (1*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "boot_block_read_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_read_failures(8208): Error adding 1 elements to context";
                            break;
                          case 8209:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: boot_block_refresh(8209): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "boot_block_refresh", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_refresh(8209): Error adding 1 elements to context";
                            break;
                          case 8210:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: boot_block_convert_to_main(8210): cfg 1 elements; (1*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "boot_block_convert_to_main", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_convert_to_main(8210): Error adding 1 elements to context";
                            break;
                          case 8211:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: boot_block_read_source_changed(8211): cfg 1 elements; (1*4) cfg "
                            }
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "boot_block_read_source_changed", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_read_source_changed(8211): Error adding 1 elements to context";
                            break;
                          case 8212:
                            if (v14 != 16) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: open_blocks_hist(8212): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x14) {
                              unsigned int v18 = 4;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "open_blocks_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: open_blocks_hist(8212): Error adding 4 elements to context";
                            break;
                          case 8213:
                            if (v14 != 24) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8213): cfg 6 elements; (6*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x1C) {
                              unsigned int v18 = 6;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "random_read_hit_ratio_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8213): Error adding 6 elements to context";
                            break;
                          case 8214:
                            if (v14 != 20) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: active_time_hist(8214): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "active_time_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_hist(8214): Error adding 5 elements to context";
                            break;
                          case 8215:
                            if (v14 != 8) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: rd_retraining_failures(8215): cfg 2 elements; (2*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0xC) {
                              unsigned int v18 = 2;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "rd_retraining_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_retraining_failures(8215): Error adding 2 elements to context";
                            break;
                          case 8216:
                            if (v14 != 8) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: wr_retraining_failures(8216): cfg 2 elements; (2*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0xC) {
                              unsigned int v18 = 2;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "wr_retraining_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: wr_retraining_failures(8216): Error adding 2 elements to context";
                            break;
                          case 8217:
                            if (v14 != 20) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: auto_skip(8217): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "auto_skip", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: auto_skip(8217): Error adding 5 elements to context";
                            break;
                          case 8218:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: number_of_dcc_pass_after_retry(8218): cfg 1 elements; (1*4) cfg "
                            }
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "number_of_dcc_pass_after_retry", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_dcc_pass_after_retry(8218): Error adding 1 elements to context";
                            break;
                          case 8219:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: number_of_dcc_failures(8219): cfg 1 elements; (1*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "number_of_dcc_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_dcc_failures(8219): Error adding 1 elements to context";
                            break;
                          case 8220:
                            if (v14 != 28) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: open_blocks_hist(8220): cfg 7 elements; (7*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x20) {
                              unsigned int v18 = 7;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "open_blocks_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: open_blocks_hist(8220): Error adding 7 elements to context";
                            break;
                          case 8221:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: max_size_open_blocks_list(8221): cfg 1 elements; (1*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "max_size_open_blocks_list", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: max_size_open_blocks_list(8221): Error adding 1 elements to context";
                            break;
                          case 8222:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: gps_max_num_of_failures(8222): cfg 1 elements; (1*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "gps_max_num_of_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: gps_max_num_of_failures(8222): Error adding 1 elements to context";
                            break;
                          case 8223:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: gps_num_of_failures_max_overflow(8223): cfg 1 elements; (1*4) cf"
                            }
                                "g bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "gps_num_of_failures_max_overflow", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: gps_num_of_failures_max_overflow(8223): Error adding 1 elements to context";
                            break;
                          case 8224:
                            if (v14 != 32) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: active_time_hist(8224): cfg 8 elements; (8*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x24) {
                              unsigned int v18 = 8;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "active_time_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_hist(8224): Error adding 8 elements to context";
                            break;
                          case 8225:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: num_auto_program_cache_terminations(8225): cfg 1 elements; (1*4)"
                            }
                                " cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "num_auto_program_cache_terminations", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: num_auto_program_cache_terminations(8225): Error adding 1 elements to context";
                            break;
                          case 8226:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: number_of_read_cache_auto_terminations(8226): cfg 1 elements; (1"
                            }
                                "*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "number_of_read_cache_auto_terminations", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_read_cache_auto_terminations(8226): Error adding 1 el"
                                 "ements to context";
                            break;
                          case 8227:
                            if (v14 != 28) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: external_etags_usage_hist(8227): cfg 7 elements; (7*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x20) {
                              unsigned int v18 = 7;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "external_etags_usage_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: external_etags_usage_hist(8227): Error adding 7 elements to context";
                            break;
                          case 8228:
                            if (v14 != 16) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: internal_etags_usage_hist(8228): cfg 4 elements; (4*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x14) {
                              unsigned int v18 = 4;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "internal_etags_usage_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: internal_etags_usage_hist(8228): Error adding 4 elements to context";
                            break;
                          case 8229:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: max_heap_usage(8229): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "max_heap_usage", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: max_heap_usage(8229): Error adding 1 elements to context";
                            break;
                          case 8230:
                            if (v14 != 24) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: rom_num_hard_resets(8230): cfg 6 elements; (6*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x1C) {
                              unsigned int v18 = 6;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "rom_num_hard_resets", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rom_num_hard_resets(8230): Error adding 6 elements to context";
                            break;
                          case 8231:
                            if (v14 != 64) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: lower_die_temperature(8231): cfg 16 elements; (16*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x44) {
                              unsigned int v18 = 16;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "lower_die_temperature", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8231): Error adding 16 elements to context";
                            break;
                          case 8232:
                            if (v14 != 64) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: higher_die_temperature(8232): cfg 16 elements; (16*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x44) {
                              unsigned int v18 = 16;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "higher_die_temperature", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8232): Error adding 16 elements to context";
                            break;
                          case 8233:
                            if (v14 != 24) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8233): cfg 6 elements; (6*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x1C) {
                              unsigned int v18 = 6;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "random_read_hit_ratio_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8233): Error adding 6 elements to context";
                            break;
                          case 8234:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: msp_number_sram_flips(8234): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "msp_number_sram_flips", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: msp_number_sram_flips(8234): Error adding 1 elements to context";
                            break;
                          case 8235:
                            if (v14 != 28) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: boot_time_normal_power(8235): cfg 7 elements; (7*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x20) {
                              unsigned int v18 = 7;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "boot_time_normal_power", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_time_normal_power(8235): Error adding 7 elements to context";
                            break;
                          case 8236:
                            if (v14 != 28) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: boot_time_low_power(8236): cfg 7 elements; (7*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x20) {
                              unsigned int v18 = 7;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "boot_time_low_power", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_time_low_power(8236): Error adding 7 elements to context";
                            break;
                          case 8237:
                            if (v14 != 40) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: active_time_bw_pg_hist(8237): cfg 10 elements; (10*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x2C) {
                              unsigned int v18 = 10;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "active_time_bw_pg_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_hist(8237): Error adding 10 elements to context";
                            break;
                          case 8238:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: active_time_bw_pg_min(8238): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "active_time_bw_pg_min", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_min(8238): Error adding 1 elements to context";
                            break;
                          case 8239:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: active_time_bw_pg_max(8239): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "active_time_bw_pg_max", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_max(8239): Error adding 1 elements to context";
                            break;
                          case 8240:
                            if (v14 != 20) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: mdll_relative_offset(8240): cfg 5 elements; (5*4) cfg bytes != ("
                            }
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "mdll_relative_offset", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: mdll_relative_offset(8240): Error adding 5 elements to context";
                            break;
                          case 8241:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: num_pg_regrets(8241): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "num_pg_regrets", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: num_pg_regrets(8241): Error adding 1 elements to context";
                            break;
                          case 8242:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: spi_image_overall_duration_acc(8242): cfg 1 elements; (1*4) cfg "
                            }
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "spi_image_overall_duration_acc", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_image_overall_duration_acc(8242): Error adding 1 elements to context";
                            break;
                          case 8243:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_acc(8243): cfg 1 elements; (1*4) cfg"
                            }
                                " bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "spi_image_cw_fetch_duration_acc", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_acc(8243): Error adding 1 elements to context";
                            break;
                          case 8244:
                            if (v14 != 20) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_hist(8244): cfg 5 elements; (5*4) cf"
                            }
                                "g bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "spi_image_cw_fetch_duration_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_hist(8244): Error adding 5 elements to context";
                            break;
                          default:
                            switch(v15)
                            {
                              case 4279:
                                if (v14 != 16) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: fs1_4b_fail(4279): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x14) {
                                  unsigned int v18 = 4;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_100025F08(a1, "fs1_4b_fail_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: fs1_4b_fail(4279): Error adding 4 elements to context";
                                break;
                              case 4280:
                                if (v14 != 16) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: fs1_4b_fast_fail(4280): cfg 4 elements; (4*4) cfg bytes != ("
                                }
                                    "%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x14) {
                                  unsigned int v18 = 4;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_100025F08(a1, "fs1_4b_fast_fail_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: fs1_4b_fast_fail(4280): Error adding 4 elements to context";
                                break;
                              case 4281:
                                if (v14 != 40) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: dyce_decoded_bit_flips(4281): cfg 10 elements; (10*4) cfg by"
                                }
                                    "tes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x2C) {
                                  unsigned int v18 = 10;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_100025F08(a1, "dyce_decoded_bit_flips_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: dyce_decoded_bit_flips(4281): Error adding 10 elements to context";
                                break;
                              case 4282:
                                if (v14 != 60) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: slip_bch(4282): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x40) {
                                  unsigned int v18 = 15;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_100025F08(a1, "slip_bch_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: slip_bch(4282): Error adding 15 elements to context";
                                break;
                              case 4283:
                                if (v14 != 40) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: read_fail(4283): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x2C) {
                                  unsigned int v18 = 10;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_100025F08(a1, "read_fail_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: read_fail(4283): Error adding 10 elements to context";
                                break;
                              case 4284:
                                if (v14 != 40) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: tr_read_fail(4284): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x2C) {
                                  unsigned int v18 = 10;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_100025F08(a1, "tr_read_fail_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_read_fail(4284): Error adding 10 elements to context";
                                break;
                              case 4285:
                                if (v14 != 40) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: tr_aux_bfs_percent(4285): cfg 10 elements; (10*4) cfg bytes "
                                }
                                    "!= (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x2C) {
                                  unsigned int v18 = 10;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_100025F08(a1, "tr_aux_bfs_percent_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_aux_bfs_percent(4285): Error adding 10 elements to context";
                                break;
                              case 4286:
                                if (v14 != 20) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: tr_reconstruct_pass_step(4286): cfg 5 elements; (5*4) cfg by"
                                }
                                    "tes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x18) {
                                  unsigned int v18 = 5;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_100025F08(a1, "tr_reconstruct_pass_step_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_reconstruct_pass_step(4286): Error adding 5 elements to context";
                                break;
                              case 4287:
                                if (v14 != 4) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: tr_reconstruct_num(4287): cfg 1 elements; (1*4) cfg bytes !="
                                }
                                    " (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 8) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (sub_100025F08(a1, "tr_reconstruct_num", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_reconstruct_num(4287): Error adding 1 elements to context";
                                break;
                              default:
                                goto LABEL_1403;
                            }
                            goto LABEL_1980;
                        }
                        goto LABEL_1980;
                      }
                      if (v15 == 12326)
                      {
                        if (v14 != 8) {
                          sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStageParameter2(12326): cfg 1 elements; (1*8) cfg bytes !"
                        }
                            "= (%d) buffer bytes",
                            a2,
                            a3,
                            a4,
                            a5,
                            a6,
                            a7,
                            a8,
                            v14);
                        if (v14 >= 0x10) {
                          unsigned int v18 = 1;
                        }
                        else {
                          unsigned int v18 = v14 >> 3;
                        }
                        if (!sub_100025F08(a1, "initialReadStageParameter2", v11, 8u, v18))
                        {
                          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStageParameter2(12326): Error adding 1 elements to context";
                          goto LABEL_1980;
                        }
                        goto LABEL_1372;
                      }
                      if (v15 == 12325)
                      {
                        if (v14 != 8) {
                          sub_100013EE0("ASPMSPParseBufferToCxt: initialReadStageParameter1(12325): cfg 1 elements; (1*8) cfg bytes !"
                        }
                            "= (%d) buffer bytes",
                            a2,
                            a3,
                            a4,
                            a5,
                            a6,
                            a7,
                            a8,
                            v14);
                        if (v14 >= 0x10) {
                          unsigned int v18 = 1;
                        }
                        else {
                          unsigned int v18 = v14 >> 3;
                        }
                        if (!sub_100025F08(a1, "initialReadStageParameter1", v11, 8u, v18))
                        {
                          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStageParameter1(12325): Error adding 1 elements to context";
                          goto LABEL_1980;
                        }
                        goto LABEL_1372;
                      }
                      if (v15 != 12324)
                      {
LABEL_1403:
                        switch(v15)
                        {
                          case 8245:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: spi_num_uses(8245): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "spi_num_uses", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_num_uses(8245): Error adding 1 elements to context";
                            break;
                          case 8246:
                            if (v14 != 20) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: e2e_error_count_tmode(8246): cfg 5 elements; (5*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "e2e_error_count_tmode", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: e2e_error_count_tmode(8246): Error adding 5 elements to context";
                            break;
                          case 8247:
                            if (v14 != 36) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: rd_window_dist(8247): cfg 9 elements; (9*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x28) {
                              unsigned int v18 = 9;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "rd_window_dist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_window_dist(8247): Error adding 9 elements to context";
                            break;
                          case 8248:
                            if (v14 != 36) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: extended_rd_window_diff_dist(8248): cfg 9 elements; (9*4) cfg by"
                            }
                                "tes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x28) {
                              unsigned int v18 = 9;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "extended_rd_window_diff_dist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: extended_rd_window_diff_dist(8248): Error adding 9 elements to context";
                            break;
                          case 8249:
                            if (v14 != 8) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: rd_retraining_failures_v2(8249): cfg 2 elements; (2*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0xC) {
                              unsigned int v18 = 2;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "rd_retraining_failures_v2", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_retraining_failures_v2(8249): Error adding 2 elements to context";
                            break;
                          case 8250:
                            if (v14 != 120) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: lower_die_temperature(8250): cfg 30 elements; (30*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x7C) {
                              unsigned int v18 = 30;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "lower_die_temperature", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8250): Error adding 30 elements to context";
                            break;
                          case 8251:
                            if (v14 != 120) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: higher_die_temperature(8251): cfg 30 elements; (30*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x7C) {
                              unsigned int v18 = 30;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "higher_die_temperature", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8251): Error adding 30 elements to context";
                            break;
                          case 8252:
                            if (v14 != 36) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: rd_window_dist_single_die(8252): cfg 9 elements; (9*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x28) {
                              unsigned int v18 = 9;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "rd_window_dist_single_die", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_window_dist_single_die(8252): Error adding 9 elements to context";
                            break;
                          case 8253:
                            if (v14 != 16) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: parallel_slip_drops_hist(8253): cfg 4 elements; (4*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x14) {
                              unsigned int v18 = 4;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "parallel_slip_drops_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: parallel_slip_drops_hist(8253): Error adding 4 elements to context";
                            break;
                          case 8254:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: sys_halt_max_latency(8254): cfg 1 elements; (1*4) cfg bytes != ("
                            }
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "sys_halt_max_latency", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: sys_halt_max_latency(8254): Error adding 1 elements to context";
                            break;
                          case 8255:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: sys_halt_max_latency_opcode(8255): cfg 1 elements; (1*4) cfg byt"
                            }
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "sys_halt_max_latency_opcode", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: sys_halt_max_latency_opcode(8255): Error adding 1 elements to context";
                            break;
                          case 8256:
                            if (v14 != 4) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: channel_halt_max_latency(8256): cfg 1 elements; (1*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "channel_halt_max_latency", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: channel_halt_max_latency(8256): Error adding 1 elements to context";
                            break;
                          case 8257:
                            if (v14 != 8) {
                              sub_100013EE0("ASPMSPParseBufferToCxt: max_heap_usage_v2(8257): cfg 2 elements; (2*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0xC) {
                              unsigned int v18 = 2;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (sub_100025F08(a1, "max_heap_usage_v2", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: max_heap_usage_v2(8257): Error adding 2 elements to context";
                            break;
                          default:
                            switch(v15)
                            {
                              case 16384:
                                if (v14 != 8) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: fw_version_identifier(16384): cfg 1 elements; (1*8) cfg byte"
                                }
                                    "s != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_100025F08(a1, "fw_version_identifier", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: fw_version_identifier(16384): Error adding 1 elements to context";
                                break;
                              case 16385:
                                if (v14 != 40) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: random_read_size_ratio(16385): cfg 5 elements; (5*8) cfg byt"
                                }
                                    "es != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x30) {
                                  unsigned int v18 = 5;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_100025F08(a1, "random_read_size_ratio", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: random_read_size_ratio(16385): Error adding 5 elements to context";
                                break;
                              case 16386:
                                if (v14 != 8) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: number_gracefull_read_terminations(16386): cfg 1 elements; ("
                                }
                                    "1*8) cfg bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_100025F08(a1, "number_gracefull_read_terminations", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: number_gracefull_read_terminations(16386): Error adding 1 e"
                                     "lements to context";
                                break;
                              case 16387:
                                if (v14 != 8) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: active_time_bw_pg_acc(16387): cfg 1 elements; (1*8) cfg byte"
                                }
                                    "s != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_100025F08(a1, "active_time_bw_pg_acc", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_acc(16387): Error adding 1 elements to context";
                                break;
                              case 16388:
                                if (v14 != 8) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: num_pg_events(16388): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_100025F08(a1, "num_pg_events", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: num_pg_events(16388): Error adding 1 elements to context";
                                break;
                              case 16389:
                                if (v14 != 128) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: algo_queue_depth(16389): cfg 16 elements; (16*8) cfg bytes !"
                                }
                                    "= (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x88) {
                                  unsigned int v18 = 16;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_100025F08(a1, "algo_queue_depth", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: algo_queue_depth(16389): Error adding 16 elements to context";
                                break;
                              case 16390:
                                if (v14 != 128) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: parallel_slip_hist(16390): cfg 16 elements; (16*8) cfg bytes"
                                }
                                    " != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x88) {
                                  unsigned int v18 = 16;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_100025F08(a1, "parallel_slip_hist", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: parallel_slip_hist(16390): Error adding 16 elements to context";
                                break;
                              case 16391:
                                if (v14 != 48) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: sys_halt_latency_hist(16391): cfg 6 elements; (6*8) cfg byte"
                                }
                                    "s != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x38) {
                                  unsigned int v18 = 6;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_100025F08(a1, "sys_halt_latency_hist", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: sys_halt_latency_hist(16391): Error adding 6 elements to context";
                                break;
                              case 16392:
                                if (v14 != 48) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: channel_halt_latency_hist(16392): cfg 6 elements; (6*8) cfg "
                                }
                                    "bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x38) {
                                  unsigned int v18 = 6;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_100025F08(a1, "channel_halt_latency_hist", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: channel_halt_latency_hist(16392): Error adding 6 elements to context";
                                break;
                              case 16393:
                                if (v14 != 8) {
                                  sub_100013EE0("ASPMSPParseBufferToCxt: num_idle_die_read_cache_terminate(16393): cfg 1 elements; (1"
                                }
                                    "*8) cfg bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (sub_100025F08(a1, "num_idle_die_read_cache_terminate", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: num_idle_die_read_cache_terminate(16393): Error adding 1 el"
                                     "ements to context";
                                break;
                              default:
                                goto LABEL_461;
                            }
                            goto LABEL_1980;
                        }
                        goto LABEL_1980;
                      }
                      if (v14 != 8) {
                        sub_100013EE0("ASPMSPParseBufferToCxt: dspExceptionParameter144(12324): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x10) {
                        unsigned int v18 = 1;
                      }
                      else {
                        unsigned int v18 = v14 >> 3;
                      }
                      if (sub_100025F08(a1, "dspExceptionParameter144", v11, 8u, v18))
                      {
LABEL_1372:
                        uint64_t v8 = v8 + v18;
                        goto LABEL_461;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter144(12324): Error adding 1 elements to context";
LABEL_1980:
                      sub_100013EE0(v9, a2, a3, a4, a5, a6, a7, a8, v20);
                      return v8;
                  }
              }
          }
      }
  }
}

uint64_t sub_10002CAAC(uint64_t result, const char *a2, const char *a3, uint64_t a4)
{
  if (result)
  {
    int v7 = (void *)result;
    uint64_t v8 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x102004060B2607BuLL);
    unint64_t v9 = malloc_type_calloc(1uLL, 0x78uLL, 0x102004060B2607BuLL);
    unsigned int v10 = v9;
    if (v8 && v9)
    {
      uint64_t v11 = v7[1];
      if (v11 && (uint64_t v12 = v7[3]) != 0)
      {
        *(void *)(v11 + 112) = v9;
        uint64_t v13 = (char **)(v12 + 112);
      }
      else
      {
        *int v7 = v9;
        uint64_t v13 = (char **)(v7 + 2);
      }
      *uint64_t v13 = v8;
      v7[1] = v9;
      v7[3] = v8;
      *((void *)v8 + 14) = 0;
      *((void *)v9 + 14) = 0;
      snprintf(v9, 0x63uLL, "%s%s", a2, a3);
      v10[99] = 0;
      snprintf(v8, 0x63uLL, "%llu", a4);
      v8[99] = 0;
      *((void *)v8 + 13) = a4;
      return 1;
    }
    else
    {
      if (v8) {
        free(v8);
      }
      if (v10) {
        free(v10);
      }
      return 0;
    }
  }
  return result;
}

double sub_10002CBD8(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(void **)a1;
    if (v2)
    {
      do
      {
        id v3 = (void *)v2[14];
        free(v2);
        id v2 = v3;
      }
      while (v3);
    }
    float v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v5 = (void *)v4[14];
        free(v4);
        float v4 = v5;
      }
      while (v5);
    }
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10002CC38(void *a1, const char *a2, const char *a3, uint64_t a4)
{
  uint64_t v8 = (char *)malloc_type_malloc(0x78uLL, 0x102004060B2607BuLL);
  unint64_t v9 = malloc_type_malloc(0x78uLL, 0x102004060B2607BuLL);
  unsigned int v10 = v9;
  uint64_t v11 = a1[1];
  if (v11 && (uint64_t v12 = a1[3]) != 0)
  {
    *(void *)(v11 + 112) = v9;
    uint64_t v13 = (char **)(v12 + 112);
  }
  else
  {
    *a1 = v9;
    uint64_t v13 = (char **)(a1 + 2);
  }
  *uint64_t v13 = v8;
  a1[1] = v9;
  a1[3] = v8;
  *((void *)v8 + 14) = 0;
  v9[14] = 0;
  snprintf((char *)v9, 0x63uLL, "%s%s", a2, a3);
  *((unsigned char *)v10 + 99) = 0;
  uint64_t result = snprintf(v8, 0x63uLL, "%llu", a4);
  v8[99] = 0;
  *((void *)v8 + 13) = a4;
  return result;
}

uint64_t sub_10002CD28(unsigned int a1, void *a2, void *a3)
{
  uint64_t v12 = 0;
  if (!a2 || !a3)
  {
    float v4 = __stderrp;
    uint64_t v5 = "Error: Exporting data must output to buffer externally!\n";
    size_t v6 = 56;
    goto LABEL_6;
  }
  if (a1 <= 1)
  {
    float v4 = __stderrp;
    uint64_t v5 = "Error: system counters only supported on OSX\n";
    size_t v6 = 45;
LABEL_6:
    fwrite(v5, v6, 1uLL, v4);
    return 0;
  }
  signed int v8 = a1 - 3;
  if (a1 - 3 >= 7)
  {
    fprintf(__stderrp, "Error: Not supported option %d\n", a1);
    return 0;
  }
  int v10 = dword_10008A3E0[v8];
  uint64_t v11 = sub_10003AE7C(0, v10, qword_10008A3A8[v8], &v12, 0, 0);
  *a2 = v11;
  if (v11)
  {
    *a3 = v12;
    return 1;
  }
  else
  {
    fprintf(__stderrp, "Error: Failed to get tunnel buffer for cmd option %d.\n", v10);
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t sub_10002CE50(int a1, uint64_t a2, unint64_t *a3)
{
  size_t __nbyte = 0x100000;
  uint64_t v12 = 0;
  if (!sub_10003B2C4(&v12) || !v12 || !*((_DWORD *)v12 + 4))
  {
    fwrite("Unable to get nand connection\n", 0x1EuLL, 1uLL, __stderrp);
    size_t v6 = 0;
LABEL_11:
    unint64_t v7 = 0;
    goto LABEL_12;
  }
  size_t v6 = malloc_type_malloc(0x100000uLL, 0x84F50E21uLL);
  if (!v6)
  {
    fprintf(__stderrp, "Error: failed to malloc %u bytes for iolog export.\n", 0x100000);
    goto LABEL_11;
  }
  unint64_t v7 = 0;
  unint64_t v8 = a2 - 1;
  while (1)
  {
    size_t __nbyte = 0x100000;
    bzero(v6, 0x100000uLL);
    if (!sub_10003AECC((uint64_t)v12, v6, &__nbyte, 36, 0, 0, 1, 1)) {
      break;
    }
    if (__nbyte)
    {
      write(a1, v6, __nbyte);
      v7 += __nbyte;
      if (v8 >= v7) {
        continue;
      }
    }
    uint64_t v9 = 1;
    goto LABEL_13;
  }
  fwrite("Error: Tunnel command IOLog extraction failed\n", 0x2EuLL, 1uLL, __stderrp);
LABEL_12:
  uint64_t v9 = 0;
LABEL_13:
  if (v12) {
    sub_10003B410((uint64_t)v12);
  }
  if (v6) {
    free(v6);
  }
  if (a3) {
    *a3 = v7;
  }
  return v9;
}

uint64_t sub_10002CFD4(int a1, _DWORD *a2, int a3)
{
  int outputStruct = 0;
  *(void *)uint64_t v11 = 0;
  if (!sub_10003B2C4((char ***)v11) || !*(void *)v11 || !*(_DWORD *)(*(void *)v11 + 16))
  {
    unint64_t v7 = __stderrp;
    unint64_t v8 = "Unable to get nand connection\n";
    size_t v9 = 30;
LABEL_12:
    fwrite(v8, v9, 1uLL, v7);
    uint64_t v6 = 0;
    goto LABEL_13;
  }
  if ((sub_10003B140(*(char ***)v11, 34, a1, &outputStruct) & 1) == 0) {
    goto LABEL_11;
  }
  if (a2) {
    *a2 = outputStruct;
  }
  if (a3 && (sub_10003B140(*(char ***)v11, 34, outputStruct, &outputStruct) & 1) == 0)
  {
LABEL_11:
    unint64_t v7 = __stderrp;
    unint64_t v8 = "Error calling CoreDebugTunnel method to get/set iolog level!\n";
    size_t v9 = 61;
    goto LABEL_12;
  }
  uint64_t v6 = 1;
LABEL_13:
  sub_10003B410(*(uint64_t *)v11);
  return v6;
}

uint64_t sub_10002D0C0(void **a1, size_t *a2, BOOL *a3, void *a4, _DWORD *a5)
{
  if (!a3 || !a4 || !sub_10002D244(0, a1, a2, 1, 0)) {
    goto LABEL_33;
  }
  int v10 = (unsigned int *)*a1;
  if (!*a1) {
    return 1;
  }
  size_t v11 = *a2;
  if (!*a2) {
    return 1;
  }
  if (a5)
  {
    char v12 = 0;
    char v13 = 0;
    char v14 = 0;
    unint64_t v15 = (unint64_t)v10 + v11;
    while (1)
    {
      uint64_t v16 = v10 + 2;
      if ((unint64_t)(v10 + 2) > v15) {
        break;
      }
      int v17 = *((unsigned __int8 *)v10 + 6);
      int v18 = *v10;
      unint64_t v19 = *v10 * (unint64_t)*((unsigned __int8 *)v10 + 6);
      BOOL v20 = v19 >= v11;
      char v21 = (unsigned int *)((char *)v16 + v19);
      if (v20 || (unint64_t)v21 > v15) {
        break;
      }
      int v23 = *((unsigned __int16 *)v10 + 2);
      switch(v23)
      {
        case 1:
          if (v17 != 8 || v18 != 1) {
            goto LABEL_29;
          }
          *a4 = *v16;
          char v13 = 1;
          break;
        case 4:
          if (v17 != 4 || v18 != 1) {
            goto LABEL_29;
          }
          *a5 = *(_DWORD *)v16;
          char v14 = 1;
          break;
        case 10:
          if (v17 != 1 || v18 != 1) {
            goto LABEL_29;
          }
          *a3 = *(unsigned char *)v16 == 0;
          char v12 = 1;
          break;
      }
      int v10 = v21;
      if (v12)
      {
        int v10 = v21;
        if (v13)
        {
          int v10 = v21;
          if (v14)
          {
            char v14 = 1;
            char v13 = 1;
            goto LABEL_30;
          }
        }
      }
    }
LABEL_29:
    if ((v12 & 1) == 0) {
      goto LABEL_33;
    }
LABEL_30:
    if (v13 & 1) != 0 && (v14) {
      return 1;
    }
LABEL_33:
    if (!a1) {
      goto LABEL_36;
    }
    int v10 = (unsigned int *)*a1;
    if (!*a1) {
      goto LABEL_36;
    }
  }
  free(v10);
  *a1 = 0;
LABEL_36:
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_10002D244(char **a1, void **a2, size_t *a3, int a4, int a5)
{
  if (!a2 || !a3)
  {
    *a3 = 0;
    int v7 = -1;
    if (a2)
    {
LABEL_18:
      if (*a2)
      {
        free(*a2);
        *a2 = 0;
      }
    }
LABEL_20:
    fprintf(__stderrp, "get IOLog SPD buffer with opcode 0x%x failed", v7);
    return 0;
  }
  if (a4 == 1)
  {
    int v7 = 265;
    goto LABEL_8;
  }
  if (a4 != 2)
  {
    if (a4 != 3)
    {
      fprintf(__stderrp, "Wrong IOLog SPD get buffer option %d", a4);
      int v7 = -1;
LABEL_17:
      *a3 = 0;
      goto LABEL_18;
    }
    int v7 = 267;
LABEL_8:
    unint64_t v8 = sub_10003AAE8(a1, v7, 0, 0, a3, 0, 0);
    *a2 = v8;
    if (v8 && *a3) {
      return 1;
    }
    goto LABEL_17;
  }
  if (!a1 || !*a2 || !*a3 || (uint64_t v9 = 1, (sub_10003B124(a1, 266, a5, *a2, *a3, 1, 1) & 1) == 0))
  {
    *a3 = 0;
    int v7 = 266;
    goto LABEL_20;
  }
  return v9;
}

uint64_t sub_10002D380(void **a1, size_t *a2)
{
  return sub_10002D244(0, a1, a2, 3, 0);
}

uint64_t sub_10002D398(FILE *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = 0;
  __ptr = 0;
  unint64_t v25 = a3;
  size_t v22 = 0;
  *(void *)int v23 = 0;
  uint64_t v21 = 0;
  if (!a1 || a2 > 0xFFFFFFFE) {
    goto LABEL_26;
  }
  unsigned int v7 = sub_10003B2C4((char ***)v23);
  uint64_t v3 = 0;
  unint64_t v8 = *(char ***)v23;
  if (v7 && *(void *)v23)
  {
    if (*(_DWORD *)(*(void *)v23 + 16))
    {
      __ptr = malloc_type_calloc(1uLL, 0x80000uLL, 0x6CFEDFE9uLL);
      if (__ptr)
      {
        unint64_t v9 = 0;
        unint64_t v10 = 0;
LABEL_8:
        if (v9 >= a2)
        {
LABEL_24:
          uint64_t v3 = 1;
LABEL_26:
          unint64_t v8 = *(char ***)v23;
          goto LABEL_27;
        }
        size_t v22 = 0x80000;
        bzero(__ptr, 0x80000uLL);
        if (sub_10002D244(*(char ***)v23, &__ptr, &v22, 2, v9)) {
          BOOL v11 = v22 == 0;
        }
        else {
          BOOL v11 = 1;
        }
        if (!v11)
        {
          char v12 = (unsigned int *)((char *)__ptr + v22);
          char v13 = (unsigned int *)__ptr;
          while (1)
          {
            char v14 = (unint64_t *)(v13 + 2);
            if (v13 + 2 > v12) {
              break;
            }
            int v15 = *((unsigned __int8 *)v13 + 6);
            int v16 = *v13;
            unint64_t v17 = *v13 * (unint64_t)*((unsigned __int8 *)v13 + 6);
            if (v17 >= v22) {
              break;
            }
            int v18 = (char *)v14 + v17;
            if (v18 > (char *)v12) {
              break;
            }
            int v19 = *((unsigned __int16 *)v13 + 2);
            char v13 = (unsigned int *)v18;
            if (v19 == 9)
            {
              uint64_t v3 = 0;
              if (v15 != 8 || v16 != 1) {
                goto LABEL_26;
              }
              unint64_t v9 = *v14;
              size_t v22 = v18 - (unsigned char *)__ptr;
              if (!fwrite(__ptr, v18 - (unsigned char *)__ptr, 1uLL, a1)) {
                break;
              }
              v10 += v22;
              if (v10 > a3)
              {
                uint64_t v21 = 0x8FC0000000001;
                if (!fwrite(&v21, 8uLL, 1uLL, a1) || !fwrite(&v25, 8uLL, 1uLL, a1)) {
                  break;
                }
                goto LABEL_24;
              }
              goto LABEL_8;
            }
          }
        }
      }
    }
    uint64_t v3 = 0;
    goto LABEL_26;
  }
LABEL_27:
  if (v8)
  {
    sub_10003B410((uint64_t)v8);
    *(void *)int v23 = 0;
  }
  if (__ptr) {
    free(__ptr);
  }
  return v3;
}

uint64_t sub_10002D574(char **a1, int a2, int a3, void *a4, void *a5)
{
  if (a3) {
    int v6 = 10;
  }
  else {
    int v6 = 13;
  }
  uint64_t v10 = 0;
  if (a4 && a5)
  {
    unint64_t v8 = sub_10003AAE8(a1, v6, 0, a2, &v10, 0, 0);
    *a4 = v8;
    if (v8)
    {
      *a5 = v10;
      return 1;
    }
    else
    {
      fprintf(__stderrp, "Error: Failed to get tunnel buffer for cmd option %d.\n", v6);
      uint64_t result = 0;
      *a5 = 0;
    }
  }
  else
  {
    fwrite("Error: Exporting data must output to buffer externally!\n", 0x38uLL, 1uLL, __stderrp);
    return 0;
  }
  return result;
}

uint64_t print_asp_magazine_stats(char *a1, int a2, int a3)
{
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  if (sub_10002D574(0, a2, a3, &v9, &v8))
  {
    if (a3) {
      int v5 = 1;
    }
    else {
      int v5 = 3;
    }
    sub_10002D6F0(a1, (unint64_t *)v9, v8 >> 3, v5);
    free(v9);
    return 1;
  }
  else
  {
    unsigned int v7 = "all";
    if (a3) {
      unsigned int v7 = "perm";
    }
    fprintf(__stderrp, "Error: IO NVMe Smart cmd failed to extract ASP %s stats!\n", v7);
    return 0;
  }
}

uint64_t sub_10002D6F0(char *__filename, unint64_t *a2, int a3, int a4)
{
  unsigned int v7 = __filename;
  if (__filename)
  {
    uint64_t v8 = fopen(__filename, "a");
    if (!v8) {
      return fprintf(__stderrp, "Unable to open %s\n", v7);
    }
  }
  else
  {
    uint64_t v8 = __stdoutp;
  }
  fwrite("NAND stats:\n", 0xCuLL, 1uLL, v8);
  uint64_t result = fwrite("===========\n", 0xCuLL, 1uLL, v8);
  if (!a3) {
    goto LABEL_3139;
  }
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v436 = 0;
  unint64_t v437 = 0;
  *(void *)v435 = a4 & 3;
  while (1)
  {
    unint64_t v16 = *a2;
    int v15 = a2 + 1;
    int v14 = v16;
    unsigned int v17 = a3 - 1;
    unint64_t v438 = HIDWORD(v16);
    if (v17 < HIDWORD(v16)) {
      break;
    }
    if (v14 > 49)
    {
      if (v14 > 128)
      {
        if (v14 == 129)
        {
          unint64_t v11 = *v15;
          goto LABEL_31;
        }
        if (v14 == 677)
        {
          unint64_t v10 = *v15;
          goto LABEL_31;
        }
      }
      else
      {
        if (v14 == 50)
        {
          *(void *)&v435[4] = *v15;
          goto LABEL_31;
        }
        if (v14 == 84)
        {
          unint64_t v12 = *v15;
          goto LABEL_31;
        }
      }
    }
    else if (v14 > 19)
    {
      if (v14 == 20)
      {
        unint64_t v436 = *v15;
        goto LABEL_31;
      }
      if (v14 == 49)
      {
        unint64_t v13 = *v15;
        goto LABEL_31;
      }
    }
    else
    {
      if (v14 == 1)
      {
        uint64_t result = fprintf(v8, "%20s:\t0x%llx\n");
        goto LABEL_32;
      }
      if (v14 == 4)
      {
        unint64_t v437 = *v15;
LABEL_31:
        uint64_t result = fprintf(v8, "%20s:\t%llu\n");
        goto LABEL_32;
      }
    }
    if ((a4 & 1) != 0 && v14 == 678 || (a4 & 1) != 0 && v14 == 679) {
      goto LABEL_31;
    }
    if ((a4 & 1) != 0 && v14 == 680)
    {
      unsigned int v433 = v17;
      unint64_t v18 = v13;
      unint64_t v19 = v11;
      uint64_t result = fprintf(v8, "%20s:\n", "magazineFWVersion");
      if (v438 >= 3) {
        uint64_t v20 = 3;
      }
      else {
        uint64_t v20 = v438;
      }
      if (v20)
      {
        unint64_t v431 = v10;
        for (uint64_t i = 0; i != v20; ++i)
          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i, v15[i]);
        unint64_t v10 = v431;
      }
      unint64_t v11 = v19;
      unint64_t v13 = v18;
      unsigned int v17 = v433;
      goto LABEL_32;
    }
    if ((a4 & 1) != 0 && v14 == 2
      || (a4 & 1) != 0 && v14 == 3
      || (a4 & 1) != 0 && v14 == 5
      || (a4 & 1) != 0 && v14 == 6
      || (a4 & 1) != 0 && v14 == 27
      || (a4 & 1) != 0 && v14 == 99
      || (a4 & 1) != 0 && v14 == 107
      || (a4 & 1) != 0 && v14 == 1066
      || (a4 & 1) != 0 && v14 == 191
      || (a4 & 1) != 0 && v14 == 7)
    {
      goto LABEL_31;
    }
    unint64_t v434 = v11;
    int v432 = a4;
    if ((a4 & 1) == 0 || v14 != 8)
    {
      size_t v22 = v7;
      unint64_t v23 = v10;
      if ((v432 & 1) != 0 && v14 == 9
        || (v432 & 1) != 0 && v14 == 10
        || (v432 & 1) != 0 && v14 == 11
        || (v432 & 1) != 0 && v14 == 12
        || (v432 & 1) != 0 && v14 == 895
        || (v432 & 1) != 0 && v14 == 13
        || (v432 & 2) != 0 && v14 == 739)
      {
LABEL_81:
        uint64_t result = fprintf(v8, "%20s:\t%llu\n");
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 14)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "hostWriteLogHisto");
        if (v438 >= 0xA) {
          uint64_t v24 = 10;
        }
        else {
          uint64_t v24 = v438;
        }
        if (v24)
        {
          for (uint64_t j = 0; j != v24; ++j)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", j, v15[j]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 15)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "hostReadLogHisto");
        if (v438 >= 0xA) {
          uint64_t v26 = 10;
        }
        else {
          uint64_t v26 = v438;
        }
        if (v26)
        {
          for (uint64_t k = 0; k != v26; ++k)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", k, v15[k]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 17
        || (v432 & 1) != 0 && v14 == 18
        || (v432 & 1) != 0 && v14 == 19
        || (v432 & 1) != 0 && v14 == 916
        || (v432 & 1) != 0 && v14 == 917
        || (v432 & 1) != 0 && v14 == 1024
        || (v432 & 1) != 0 && v14 == 414
        || (v432 & 1) != 0 && v14 == 22
        || (v432 & 1) != 0 && v14 == 23
        || (v432 & 1) != 0 && v14 == 24
        || (v432 & 1) != 0 && v14 == 404
        || (v432 & 1) != 0 && v14 == 817
        || (v432 & 1) != 0 && v14 == 818
        || (v432 & 1) != 0 && v14 == 819
        || (v432 & 1) != 0 && v14 == 820
        || (v432 & 1) != 0 && v14 == 28
        || (v432 & 1) != 0 && v14 == 30
        || (v432 & 1) != 0 && v14 == 31
        || (v432 & 1) != 0 && v14 == 337
        || (v432 & 1) != 0 && v14 == 34
        || (v432 & 1) != 0 && v14 == 92
        || (v432 & 1) != 0 && v14 == 36
        || (v432 & 1) != 0 && v14 == 37
        || (v432 & 1) != 0 && v14 == 190
        || (v432 & 1) != 0 && v14 == 38
        || (v432 & 1) != 0 && v14 == 39
        || (v432 & 1) != 0 && v14 == 41
        || (v432 & 1) != 0 && v14 == 42
        || (v432 & 1) != 0 && v14 == 43
        || (v432 & 1) != 0 && v14 == 44
        || (v432 & 1) != 0 && v14 == 996
        || (v432 & 1) != 0 && v14 == 997
        || (v432 & 1) != 0 && v14 == 998
        || (v432 & 1) != 0 && v14 == 999
        || (v432 & 1) != 0 && v14 == 45
        || (v432 & 1) != 0 && v14 == 334
        || (v432 & 2) != 0 && v14 == 198
        || (v432 & 2) != 0 && v14 == 46
        || (v432 & 1) != 0 && v14 == 47
        || (v432 & 1) != 0 && v14 == 379
        || (v432 & 1) != 0 && v14 == 48
        || (v432 & 2) != 0 && v14 == 51
        || (v432 & 2) != 0 && v14 == 52
        || (v432 & 2) != 0 && v14 == 53)
      {
        goto LABEL_81;
      }
      if ((v432 & 2) != 0 && v14 == 54)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "ECBins");
        if (v438 >= 0x64) {
          uint64_t v28 = 100;
        }
        else {
          uint64_t v28 = v438;
        }
        if (v28)
        {
          for (uint64_t m = 0; m != v28; ++m)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", m, v15[m]);
        }
        goto LABEL_82;
      }
      if ((v432 & 2) != 0 && v14 == 55)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "RCBins");
        if (v438 >= 0x64) {
          uint64_t v30 = 100;
        }
        else {
          uint64_t v30 = v438;
        }
        if (v30)
        {
          for (uint64_t n = 0; n != v30; ++n)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", n, v15[n]);
        }
        goto LABEL_82;
      }
      if ((v432 & 2) != 0 && v14 == 56
        || (v432 & 2) != 0 && v14 == 57
        || (v432 & 2) != 0 && v14 == 58
        || (v432 & 2) != 0 && v14 == 791
        || (v432 & 1) != 0 && v14 == 1189)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 1190)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "powerDownTime");
        if (v438 >= 0xB) {
          uint64_t v32 = 11;
        }
        else {
          uint64_t v32 = v438;
        }
        if (v32)
        {
          for (iuint64_t i = 0; ii != v32; ++ii)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", ii, v15[ii]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 1244) {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 90)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "qosPerCmdQ");
        if (v438 >= 0xA0) {
          uint64_t v34 = 160;
        }
        else {
          uint64_t v34 = v438;
        }
        if (v34)
        {
          for (juint64_t j = 0; jj != v34; ++jj)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", jj, v15[jj]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 91)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "maxQosPerCmdQ");
        if (v438 >= 0xA) {
          uint64_t v36 = 10;
        }
        else {
          uint64_t v36 = v438;
        }
        if (v36)
        {
          for (kuint64_t k = 0; kk != v36; ++kk)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", kk, v15[kk]);
        }
        goto LABEL_82;
      }
      if ((v432 & 2) != 0 && v14 == 59
        || (v432 & 2) != 0 && v14 == 60
        || (v432 & 2) != 0 && v14 == 61
        || (v432 & 2) != 0 && v14 == 62
        || (v432 & 2) != 0 && v14 == 63
        || (v432 & 2) != 0 && v14 == 64
        || (v432 & 2) != 0 && v14 == 65
        || (v432 & 2) != 0 && v14 == 66
        || (v432 & 2) != 0 && v14 == 67
        || (v432 & 2) != 0 && v14 == 68
        || (v432 & 2) != 0 && v14 == 69
        || (v432 & 2) != 0 && v14 == 70
        || (v432 & 2) != 0 && v14 == 109
        || (v432 & 2) != 0 && v14 == 71
        || (v432 & 2) != 0 && v14 == 72
        || (v432 & 1) != 0 && v14 == 73
        || (v432 & 1) != 0 && v14 == 75
        || (v432 & 1) != 0 && v14 == 76
        || (v432 & 1) != 0 && v14 == 77)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 265)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "readCountHisto");
        if (v438 >= 5) {
          uint64_t v38 = 5;
        }
        else {
          uint64_t v38 = v438;
        }
        if (v38)
        {
          for (muint64_t m = 0; mm != v38; ++mm)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", mm, v15[mm]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 80
        || (v432 & 1) != 0 && v14 == 81
        || (v432 & 1) != 0 && v14 == 82
        || (v432 & 1) != 0 && v14 == 1019
        || (v432 & 2) != 0 && v14 == 85
        || (v432 & 2) != 0 && v14 == 86
        || (v432 & 1) != 0 && v14 == 87)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 1215)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "hostWritesPerThrottleZone");
        if (v438 >= 5) {
          uint64_t v40 = 5;
        }
        else {
          uint64_t v40 = v438;
        }
        if (v40)
        {
          for (nuint64_t n = 0; nn != v40; ++nn)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", nn, v15[nn]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 93)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "numBandsRefreshedForAgePerTier");
        if (v438 >= 3) {
          uint64_t v42 = 3;
        }
        else {
          uint64_t v42 = v438;
        }
        if (v42)
        {
          for (uint64_t i1 = 0; i1 != v42; ++i1)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i1, v15[i1]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 94)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "bdrDeltaHot");
        if (v438 >= 0x14) {
          uint64_t v44 = 20;
        }
        else {
          uint64_t v44 = v438;
        }
        if (v44)
        {
          for (uint64_t i2 = 0; i2 != v44; ++i2)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i2, v15[i2]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 112
        || (v432 & 1) != 0 && v14 == 95
        || (v432 & 1) != 0 && v14 == 96
        || (v432 & 1) != 0 && v14 == 381
        || (v432 & 1) != 0 && v14 == 130
        || (v432 & 1) != 0 && v14 == 97
        || (v432 & 1) != 0 && v14 == 98
        || (v432 & 4) != 0 && v14 == 106
        || (v432 & 4) != 0 && v14 == 100
        || (v432 & 4) != 0 && v14 == 101
        || (v432 & 4) != 0 && v14 == 102
        || (v432 & 4) != 0 && v14 == 103
        || (v432 & 4) != 0 && v14 == 104
        || (v432 & 4) != 0 && v14 == 105
        || (v432 & 2) != 0 && v14 == 110)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 113)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "bandsPerHostFlow");
        if (v438 >= 4) {
          uint64_t v46 = 4;
        }
        else {
          uint64_t v46 = v438;
        }
        if (v46)
        {
          for (uint64_t i3 = 0; i3 != v46; ++i3)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i3, v15[i3]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 114)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "bandsPerSpecialFlow");
        if (v438 >= 5) {
          uint64_t v48 = 5;
        }
        else {
          uint64_t v48 = v438;
        }
        if (v48)
        {
          for (uint64_t i4 = 0; i4 != v48; ++i4)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i4, v15[i4]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 115)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "secsPerHostFlow");
        if (v438 >= 4) {
          uint64_t v50 = 4;
        }
        else {
          uint64_t v50 = v438;
        }
        if (v50)
        {
          for (uint64_t i5 = 0; i5 != v50; ++i5)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i5, v15[i5]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 116)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "secsPerSpecialFlow");
        if (v438 >= 5) {
          uint64_t v52 = 5;
        }
        else {
          uint64_t v52 = v438;
        }
        if (v52)
        {
          for (uint64_t i6 = 0; i6 != v52; ++i6)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i6, v15[i6]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 118)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "overWritesPerHostFlow");
        if (v438 >= 4) {
          uint64_t v54 = 4;
        }
        else {
          uint64_t v54 = v438;
        }
        if (v54)
        {
          for (uint64_t i7 = 0; i7 != v54; ++i7)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i7, v15[i7]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 119)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "overWritesPerSpecialFlow");
        if (v438 >= 5) {
          uint64_t v56 = 5;
        }
        else {
          uint64_t v56 = v438;
        }
        if (v56)
        {
          for (uint64_t i8 = 0; i8 != v56; ++i8)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i8, v15[i8]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 120)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "padSectorsPerFlow");
        if (v438 >= 0xA) {
          uint64_t v58 = 10;
        }
        else {
          uint64_t v58 = v438;
        }
        if (v58)
        {
          for (uint64_t i9 = 0; i9 != v58; ++i9)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i9, v15[i9]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 121)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "padSizes");
        if (v438 >= 4) {
          uint64_t v60 = 4;
        }
        else {
          uint64_t v60 = v438;
        }
        if (v60)
        {
          for (uint64_t i10 = 0; i10 != v60; ++i10)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i10, v15[i10]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 740) {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 122)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "unmapsPerHostFlow");
        if (v438 >= 4) {
          uint64_t v62 = 4;
        }
        else {
          uint64_t v62 = v438;
        }
        if (v62)
        {
          for (uint64_t i11 = 0; i11 != v62; ++i11)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i11, v15[i11]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 123)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "unmapsPerSpecialFlow");
        if (v438 >= 5) {
          uint64_t v64 = 5;
        }
        else {
          uint64_t v64 = v438;
        }
        if (v64)
        {
          for (uint64_t i12 = 0; i12 != v64; ++i12)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i12, v15[i12]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 124)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "coldestCycle");
        if (v438 >= 2) {
          uint64_t v66 = 2;
        }
        else {
          uint64_t v66 = v438;
        }
        if (v66)
        {
          for (uint64_t i13 = 0; i13 != v66; ++i13)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i13, v15[i13]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 503)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "avgCycle");
        if (v438 >= 2) {
          uint64_t v68 = 2;
        }
        else {
          uint64_t v68 = v438;
        }
        if (v68)
        {
          for (uint64_t i14 = 0; i14 != v68; ++i14)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i14, v15[i14]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 125)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "hottestCycle");
        if (v438 >= 2) {
          uint64_t v70 = 2;
        }
        else {
          uint64_t v70 = v438;
        }
        if (v70)
        {
          for (uint64_t i15 = 0; i15 != v70; ++i15)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i15, v15[i15]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 16
        || (v432 & 1) != 0 && v14 == 126
        || (v432 & 1) != 0 && v14 == 139
        || (v432 & 1) != 0 && v14 == 576
        || (v432 & 1) != 0 && v14 == 604
        || (v432 & 1) != 0 && v14 == 721
        || (v432 & 1) != 0 && v14 == 722
        || (v432 & 1) != 0 && v14 == 723
        || (v432 & 1) != 0 && v14 == 724
        || (v432 & 1) != 0 && v14 == 726
        || (v432 & 1) != 0 && v14 == 140
        || (v432 & 1) != 0 && v14 == 346)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 131)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "errInjCounters");
        if (v438 >= 8) {
          uint64_t v72 = 8;
        }
        else {
          uint64_t v72 = v438;
        }
        if (v72)
        {
          for (uint64_t i16 = 0; i16 != v72; ++i16)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i16, v15[i16]);
        }
        goto LABEL_82;
      }
      if ((v432 & 2) != 0 && v14 == 962
        || (v432 & 1) != 0 && v14 == 132
        || (v432 & 1) != 0 && v14 == 133
        || (v432 & 1) != 0 && v14 == 135
        || (v432 & 1) != 0 && v14 == 388
        || (v432 & 1) != 0 && v14 == 389
        || (v432 & 1) != 0 && v14 == 390
        || (v432 & 1) != 0 && v14 == 391
        || (v432 & 1) != 0 && v14 == 392
        || (v432 & 1) != 0 && v14 == 393
        || (v432 & 1) != 0 && v14 == 394
        || (v432 & 1) != 0 && v14 == 395
        || (v432 & 1) != 0 && v14 == 586
        || (v432 & 1) != 0 && v14 == 587
        || (v432 & 1) != 0 && v14 == 760
        || (v432 & 1) != 0 && v14 == 761
        || (v432 & 1) != 0 && v14 == 762
        || (v432 & 1) != 0 && v14 == 763
        || (v432 & 1) != 0 && v14 == 134
        || (v432 & 1) != 0 && v14 == 400)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 476)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidSuccessfulRecoLbaRange");
        if (v438 >= 2) {
          uint64_t v74 = 2;
        }
        else {
          uint64_t v74 = v438;
        }
        if (v74)
        {
          for (uint64_t i17 = 0; i17 != v74; ++i17)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i17, v15[i17]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 477)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidFailedRecoLbaRange");
        if (v438 >= 2) {
          uint64_t v76 = 2;
        }
        else {
          uint64_t v76 = v438;
        }
        if (v76)
        {
          for (uint64_t i18 = 0; i18 != v76; ++i18)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i18, v15[i18]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 630)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidSuccessfulRecoEAN");
        if (v438 >= 6) {
          uint64_t v78 = 6;
        }
        else {
          uint64_t v78 = v438;
        }
        if (v78)
        {
          for (uint64_t i19 = 0; i19 != v78; ++i19)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i19, v15[i19]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 631)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidFailedRecoEAN");
        if (v438 >= 6) {
          uint64_t v80 = 6;
        }
        else {
          uint64_t v80 = v438;
        }
        if (v80)
        {
          for (uint64_t i20 = 0; i20 != v80; ++i20)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i20, v15[i20]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 644
        || (v432 & 1) != 0 && v14 == 645
        || (v432 & 1) != 0 && v14 == 646
        || (v432 & 1) != 0 && v14 == 647
        || (v432 & 1) != 0 && v14 == 648
        || (v432 & 1) != 0 && v14 == 649
        || (v432 & 1) != 0 && v14 == 864
        || (v432 & 1) != 0 && v14 == 862
        || (v432 & 1) != 0 && v14 == 863
        || (v432 & 2) != 0 && v14 == 813
        || (v432 & 1) != 0 && v14 == 697
        || (v432 & 1) != 0 && v14 == 698
        || (v432 & 1) != 0 && v14 == 712
        || (v432 & 1) != 0 && v14 == 713
        || (v432 & 1) != 0 && v14 == 737
        || (v432 & 1) != 0 && v14 == 738
        || (v432 & 1) != 0 && v14 == 714
        || (v432 & 1) != 0 && v14 == 715
        || (v432 & 1) != 0 && v14 == 716
        || (v432 & 1) != 0 && v14 == 717
        || (v432 & 1) != 0 && v14 == 829)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 891)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "turboRaidSuccessAuxPartition");
        if (v438 >= 2) {
          uint64_t v82 = 2;
        }
        else {
          uint64_t v82 = v438;
        }
        if (v82)
        {
          for (uint64_t i21 = 0; i21 != v82; ++i21)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i21, v15[i21]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 892)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "turboRaidFailAuxPartition");
        if (v438 >= 2) {
          uint64_t v84 = 2;
        }
        else {
          uint64_t v84 = v438;
        }
        if (v84)
        {
          for (uint64_t i22 = 0; i22 != v84; ++i22)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i22, v15[i22]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 893)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "turboRaidClassifyQualPartition");
        if (v438 >= 2) {
          uint64_t v86 = 2;
        }
        else {
          uint64_t v86 = v438;
        }
        if (v86)
        {
          for (uint64_t i23 = 0; i23 != v86; ++i23)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i23, v15[i23]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 894)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "turboRaidClassifyRelPartition");
        if (v438 >= 2) {
          uint64_t v88 = 2;
        }
        else {
          uint64_t v88 = v438;
        }
        if (v88)
        {
          for (uint64_t i24 = 0; i24 != v88; ++i24)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i24, v15[i24]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 900
        || (v432 & 1) != 0 && v14 == 901
        || (v432 & 1) != 0 && v14 == 902
        || (v432 & 1) != 0 && v14 == 903
        || (v432 & 1) != 0 && v14 == 904
        || (v432 & 1) != 0 && v14 == 947
        || (v432 & 1) != 0 && v14 == 1133
        || (v432 & 1) != 0 && v14 == 1134
        || (v432 & 1) != 0 && v14 == 1135
        || (v432 & 1) != 0 && v14 == 1136
        || (v432 & 1) != 0 && v14 == 362
        || (v432 & 1) != 0 && v14 == 396
        || (v432 & 1) != 0 && v14 == 398
        || (v432 & 1) != 0 && v14 == 397
        || (v432 & 1) != 0 && v14 == 399
        || (v432 & 1) != 0 && v14 == 405
        || (v432 & 1) != 0 && v14 == 403
        || (v432 & 1) != 0 && v14 == 573
        || (v432 & 1) != 0 && v14 == 197
        || (v432 & 1) != 0 && v14 == 136
        || (v432 & 1) != 0 && v14 == 137
        || (v432 & 1) != 0 && v14 == 444
        || (v432 & 1) != 0 && v14 == 445
        || (v432 & 1) != 0 && v14 == 964
        || (v432 & 1) != 0 && v14 == 965
        || (v432 & 1) != 0 && v14 == 440
        || (v432 & 1) != 0 && v14 == 960
        || (v432 & 1) != 0 && v14 == 441
        || (v432 & 1) != 0 && v14 == 442
        || (v432 & 1) != 0 && v14 == 443
        || (v432 & 1) != 0 && v14 == 382
        || (v432 & 1) != 0 && v14 == 659
        || (v432 & 1) != 0 && v14 == 172
        || (v432 & 1) != 0 && v14 == 416
        || (v432 & 1) != 0 && v14 == 417)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 406)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructSuccessFlow");
        if (v438 >= 5) {
          uint64_t v90 = 5;
        }
        else {
          uint64_t v90 = v438;
        }
        if (v90)
        {
          for (uint64_t i25 = 0; i25 != v90; ++i25)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i25, v15[i25]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 407)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructFailFlow");
        if (v438 >= 5) {
          uint64_t v92 = 5;
        }
        else {
          uint64_t v92 = v438;
        }
        if (v92)
        {
          for (uint64_t i26 = 0; i26 != v92; ++i26)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i26, v15[i26]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 472
        || (v432 & 1) != 0 && v14 == 473
        || (v432 & 1) != 0 && v14 == 639
        || (v432 & 1) != 0 && v14 == 640)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 469)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructSuccessPartition");
        if (v438 >= 2) {
          uint64_t v94 = 2;
        }
        else {
          uint64_t v94 = v438;
        }
        if (v94)
        {
          for (uint64_t i27 = 0; i27 != v94; ++i27)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i27, v15[i27]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 470)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructFailPartition");
        if (v438 >= 2) {
          uint64_t v96 = 2;
        }
        else {
          uint64_t v96 = v438;
        }
        if (v96)
        {
          for (uint64_t i28 = 0; i28 != v96; ++i28)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i28, v15[i28]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 408
        || (v432 & 1) != 0 && v14 == 409
        || (v432 & 1) != 0 && v14 == 786
        || (v432 & 1) != 0 && v14 == 787
        || (v432 & 1) != 0 && v14 == 410
        || (v432 & 1) != 0 && v14 == 788
        || (v432 & 1) != 0 && v14 == 411
        || (v432 & 1) != 0 && v14 == 510
        || (v432 & 1) != 0 && v14 == 566
        || (v432 & 1) != 0 && v14 == 567
        || (v432 & 1) != 0 && v14 == 570
        || (v432 & 1) != 0 && v14 == 574
        || (v432 & 1) != 0 && v14 == 789
        || (v432 & 1) != 0 && v14 == 681
        || (v432 & 1) != 0 && v14 == 682
        || (v432 & 1) != 0 && v14 == 711
        || (v432 & 1) != 0 && v14 == 790
        || (v432 & 1) != 0 && v14 == 774
        || (v432 & 1) != 0 && v14 == 412
        || (v432 & 1) != 0 && v14 == 471
        || (v432 & 1) != 0 && v14 == 641)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 798)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailP");
        if (v438 >= 4) {
          uint64_t v98 = 4;
        }
        else {
          uint64_t v98 = v438;
        }
        if (v98)
        {
          for (uint64_t i29 = 0; i29 != v98; ++i29)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i29, v15[i29]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 799)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailUECC");
        if (v438 >= 4) {
          uint64_t v100 = 4;
        }
        else {
          uint64_t v100 = v438;
        }
        if (v100)
        {
          for (uint64_t i30 = 0; i30 != v100; ++i30)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i30, v15[i30]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 804)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailNoSPBX");
        if (v438 >= 4) {
          uint64_t v102 = 4;
        }
        else {
          uint64_t v102 = v438;
        }
        if (v102)
        {
          for (uint64_t i31 = 0; i31 != v102; ++i31)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i31, v15[i31]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 806)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailBlank");
        if (v438 >= 4) {
          uint64_t v104 = 4;
        }
        else {
          uint64_t v104 = v438;
        }
        if (v104)
        {
          for (uint64_t i32 = 0; i32 != v104; ++i32)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i32, v15[i32]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 809)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailUnsup");
        if (v438 >= 4) {
          uint64_t v106 = 4;
        }
        else {
          uint64_t v106 = v438;
        }
        if (v106)
        {
          for (uint64_t i33 = 0; i33 != v106; ++i33)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i33, v15[i33]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 811)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailMpSkip");
        if (v438 >= 4) {
          uint64_t v108 = 4;
        }
        else {
          uint64_t v108 = v438;
        }
        if (v108)
        {
          for (uint64_t i34 = 0; i34 != v108; ++i34)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i34, v15[i34]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 812)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailAbort");
        if (v438 >= 4) {
          uint64_t v110 = 4;
        }
        else {
          uint64_t v110 = v438;
        }
        if (v110)
        {
          for (uint64_t i35 = 0; i35 != v110; ++i35)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i35, v15[i35]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 814)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailOther");
        if (v438 >= 4) {
          uint64_t v112 = 4;
        }
        else {
          uint64_t v112 = v438;
        }
        if (v112)
        {
          for (uint64_t i36 = 0; i36 != v112; ++i36)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i36, v15[i36]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 815)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXSuccess");
        if (v438 >= 4) {
          uint64_t v114 = 4;
        }
        else {
          uint64_t v114 = v438;
        }
        if (v114)
        {
          for (uint64_t i37 = 0; i37 != v114; ++i37)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i37, v15[i37]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 184)
      {
        v116 = "TempSensorMax";
      }
      else
      {
        if ((v432 & 1) == 0 || v14 != 185)
        {
          if ((v432 & 1) != 0 && v14 == 182
            || (v432 & 1) != 0 && v14 == 353
            || (v432 & 1) != 0 && v14 == 609
            || (v432 & 1) != 0 && v14 == 596
            || (v432 & 1) != 0 && v14 == 597
            || (v432 & 1) != 0 && v14 == 152
            || (v432 & 1) != 0 && v14 == 153
            || (v432 & 1) != 0 && v14 == 154
            || (v432 & 1) != 0 && v14 == 384
            || (v432 & 1) != 0 && v14 == 386
            || (v432 & 1) != 0 && v14 == 657
            || (v432 & 1) != 0 && v14 == 387
            || (v432 & 1) != 0 && v14 == 420
            || (v432 & 1) != 0 && v14 == 438
            || (v432 & 1) != 0 && v14 == 155
            || (v432 & 1) != 0 && v14 == 156
            || (v432 & 1) != 0 && v14 == 158
            || (v432 & 1) != 0 && v14 == 159
            || (v432 & 1) != 0 && v14 == 539
            || (v432 & 1) != 0 && v14 == 540
            || (v432 & 2) != 0 && v14 == 160
            || (v432 & 2) != 0 && v14 == 161
            || (v432 & 2) != 0 && v14 == 163
            || (v432 & 2) != 0 && v14 == 164
            || (v432 & 2) != 0 && v14 == 165
            || (v432 & 1) != 0 && v14 == 141
            || (v432 & 1) != 0 && v14 == 142
            || (v432 & 1) != 0 && v14 == 143
            || (v432 & 1) != 0 && v14 == 144
            || (v432 & 1) != 0 && v14 == 145
            || (v432 & 1) != 0 && v14 == 146
            || (v432 & 1) != 0 && v14 == 187
            || (v432 & 1) != 0 && v14 == 188
            || (v432 & 1) != 0 && v14 == 189
            || (v432 & 1) != 0 && v14 == 147
            || (v432 & 1) != 0 && v14 == 148
            || (v432 & 1) != 0 && v14 == 149
            || (v432 & 1) != 0 && v14 == 183
            || (v432 & 1) != 0 && v14 == 204
            || (v432 & 1) != 0 && v14 == 205
            || (v432 & 1) != 0 && v14 == 206
            || (v432 & 2) != 0 && v14 == 248
            || (v432 & 2) != 0 && v14 == 199
            || (v432 & 1) != 0 && v14 == 200
            || (v432 & 1) != 0 && v14 == 201
            || (v432 & 2) != 0 && v14 == 203)
          {
            goto LABEL_81;
          }
          if ((v432 & 1) != 0 && v14 == 207)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "numOfThrottlingEntriesPerLevel");
            if (v438 >= 0x10) {
              uint64_t v117 = 16;
            }
            else {
              uint64_t v117 = v438;
            }
            if (v117)
            {
              for (uint64_t i38 = 0; i38 != v117; ++i38)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i38, v15[i38]);
            }
          }
          else if ((v432 & 1) != 0 && v14 == 865)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "timeOfThrottlingPerLevel");
            if (v438 >= 0x10) {
              uint64_t v119 = 16;
            }
            else {
              uint64_t v119 = v438;
            }
            if (v119)
            {
              for (uint64_t i39 = 0; i39 != v119; ++i39)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i39, v15[i39]);
            }
          }
          else if ((v432 & 2) != 0 && v14 == 453)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "numOfThrottlingEntriesPerReadLevel");
            if (v438 >= 0x10) {
              uint64_t v121 = 16;
            }
            else {
              uint64_t v121 = v438;
            }
            if (v121)
            {
              for (uint64_t i40 = 0; i40 != v121; ++i40)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i40, v15[i40]);
            }
          }
          else if ((v432 & 2) != 0 && v14 == 866)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "timeOfThrottlingPerReadLevel");
            if (v438 >= 0x10) {
              uint64_t v123 = 16;
            }
            else {
              uint64_t v123 = v438;
            }
            if (v123)
            {
              for (uint64_t i41 = 0; i41 != v123; ++i41)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i41, v15[i41]);
            }
          }
          else if ((v432 & 2) != 0 && v14 == 454)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "numOfThrottlingEntriesPerWriteLevel");
            if (v438 >= 0x10) {
              uint64_t v125 = 16;
            }
            else {
              uint64_t v125 = v438;
            }
            if (v125)
            {
              for (uint64_t i42 = 0; i42 != v125; ++i42)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i42, v15[i42]);
            }
          }
          else if ((v432 & 2) != 0 && v14 == 867)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "timeOfThrottlingPerWriteLevel");
            if (v438 >= 0x10) {
              uint64_t v127 = 16;
            }
            else {
              uint64_t v127 = v438;
            }
            if (v127)
            {
              for (uint64_t i43 = 0; i43 != v127; ++i43)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i43, v15[i43]);
            }
          }
          else if ((v432 & 1) != 0 && v14 == 213)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "crcInternalReadFail");
            if (v438 >= 8) {
              uint64_t v129 = 8;
            }
            else {
              uint64_t v129 = v438;
            }
            if (v129)
            {
              for (uint64_t i44 = 0; i44 != v129; ++i44)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i44, v15[i44]);
            }
          }
          else
          {
            if ((v432 & 1) != 0 && v14 == 217
              || (v432 & 1) != 0 && v14 == 1067
              || (v432 & 1) != 0 && v14 == 221
              || (v432 & 1) != 0 && v14 == 222
              || (v432 & 1) != 0 && v14 == 1221
              || (v432 & 1) != 0 && v14 == 223
              || (v432 & 1) != 0 && v14 == 224
              || (v432 & 1) != 0 && v14 == 1222
              || (v432 & 1) != 0 && v14 == 494)
            {
              goto LABEL_81;
            }
            if ((v432 & 1) != 0 && v14 == 1223)
            {
              uint64_t result = fprintf(v8, "%20s:\n", "RD_closedBlocksTHHist");
              if (v438 >= 0xA) {
                uint64_t v131 = 10;
              }
              else {
                uint64_t v131 = v438;
              }
              if (v131)
              {
                for (uint64_t i45 = 0; i45 != v131; ++i45)
                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i45, v15[i45]);
              }
            }
            else if ((v432 & 1) != 0 && v14 == 229)
            {
              uint64_t result = fprintf(v8, "%20s:\n", "indmbXferCountTo");
              if (v438 >= 2) {
                uint64_t v133 = 2;
              }
              else {
                uint64_t v133 = v438;
              }
              if (v133)
              {
                for (uint64_t i46 = 0; i46 != v133; ++i46)
                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i46, v15[i46]);
              }
            }
            else if ((v432 & 1) != 0 && v14 == 230)
            {
              uint64_t result = fprintf(v8, "%20s:\n", "indmbAccumulatedTimeBetweenXfers");
              if (v438 >= 2) {
                uint64_t v135 = 2;
              }
              else {
                uint64_t v135 = v438;
              }
              if (v135)
              {
                for (uint64_t i47 = 0; i47 != v135; ++i47)
                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i47, v15[i47]);
              }
            }
            else
            {
              if ((v432 & 1) != 0 && v14 == 231
                || (v432 & 1) != 0 && v14 == 232
                || (v432 & 1) != 0 && v14 == 233
                || (v432 & 1) != 0 && v14 == 234)
              {
                goto LABEL_81;
              }
              if ((v432 & 1) != 0 && v14 == 235)
              {
                uint64_t result = fprintf(v8, "%20s:\n", "gracefulBootTimeLogMs");
                if (v438 >= 8) {
                  uint64_t v137 = 8;
                }
                else {
                  uint64_t v137 = v438;
                }
                if (v137)
                {
                  for (uint64_t i48 = 0; i48 != v137; ++i48)
                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i48, v15[i48]);
                }
              }
              else if ((v432 & 1) != 0 && v14 == 236)
              {
                uint64_t result = fprintf(v8, "%20s:\n", "ungracefulBootTimeLogMs");
                if (v438 >= 8) {
                  uint64_t v139 = 8;
                }
                else {
                  uint64_t v139 = v438;
                }
                if (v139)
                {
                  for (uint64_t i49 = 0; i49 != v139; ++i49)
                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i49, v15[i49]);
                }
              }
              else
              {
                if ((v432 & 1) != 0 && v14 == 245
                  || (v432 & 1) != 0 && v14 == 246
                  || (v432 & 1) != 0 && v14 == 247
                  || (v432 & 1) != 0 && v14 == 254)
                {
                  goto LABEL_81;
                }
                if ((v432 & 1) != 0 && v14 == 266)
                {
                  uint64_t result = fprintf(v8, "%20s:\n", "readAmpHisto");
                  if (v438 >= 0x10) {
                    uint64_t v141 = 16;
                  }
                  else {
                    uint64_t v141 = v438;
                  }
                  if (v141)
                  {
                    for (uint64_t i50 = 0; i50 != v141; ++i50)
                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i50, v15[i50]);
                  }
                }
                else
                {
                  if ((v432 & 1) != 0 && v14 == 267) {
                    goto LABEL_81;
                  }
                  if ((v432 & 1) != 0 && v14 == 269)
                  {
                    uint64_t result = fprintf(v8, "%20s:\n", "numBootBlockRefreshSuccess");
                    if (v438 >= 8) {
                      uint64_t v143 = 8;
                    }
                    else {
                      uint64_t v143 = v438;
                    }
                    if (v143)
                    {
                      for (uint64_t i51 = 0; i51 != v143; ++i51)
                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i51, v15[i51]);
                    }
                  }
                  else if ((v432 & 1) != 0 && v14 == 270)
                  {
                    uint64_t result = fprintf(v8, "%20s:\n", "numBootBlockRefreshFail");
                    if (v438 >= 8) {
                      uint64_t v145 = 8;
                    }
                    else {
                      uint64_t v145 = v438;
                    }
                    if (v145)
                    {
                      for (uint64_t i52 = 0; i52 != v145; ++i52)
                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i52, v15[i52]);
                    }
                  }
                  else
                  {
                    if ((v432 & 1) != 0 && v14 == 322
                      || (v432 & 1) != 0 && v14 == 323
                      || (v432 & 1) != 0 && v14 == 271
                      || (v432 & 1) != 0 && v14 == 272
                      || (v432 & 1) != 0 && v14 == 274)
                    {
                      goto LABEL_81;
                    }
                    if ((v432 & 1) != 0 && v14 == 277)
                    {
                      uint64_t result = fprintf(v8, "%20s:\n", "powerBudgetSelect");
                      if (v438 >= 4) {
                        uint64_t v147 = 4;
                      }
                      else {
                        uint64_t v147 = v438;
                      }
                      if (v147)
                      {
                        for (uint64_t i53 = 0; i53 != v147; ++i53)
                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i53, v15[i53]);
                      }
                    }
                    else
                    {
                      if ((v432 & 1) != 0 && v14 == 279) {
                        goto LABEL_81;
                      }
                      if ((v432 & 1) != 0 && v14 == 280)
                      {
                        uint64_t result = fprintf(v8, "%20s:\n", "E2EDPErrorCounters");
                        if (v438 >= 0xC) {
                          uint64_t v149 = 12;
                        }
                        else {
                          uint64_t v149 = v438;
                        }
                        if (v149)
                        {
                          for (uint64_t i54 = 0; i54 != v149; ++i54)
                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i54, v15[i54]);
                        }
                      }
                      else
                      {
                        if ((v432 & 2) != 0 && v14 == 281
                          || (v432 & 2) != 0 && v14 == 282
                          || (v432 & 2) != 0 && v14 == 283
                          || (v432 & 2) != 0 && v14 == 284
                          || (v432 & 2) != 0 && v14 == 285
                          || (v432 & 2) != 0 && v14 == 286
                          || (v432 & 1) != 0 && v14 == 288)
                        {
                          goto LABEL_81;
                        }
                        if ((v432 & 1) != 0 && v14 == 289)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspBootBlockReadFail");
                          if (v438 >= 0x20) {
                            uint64_t v151 = 32;
                          }
                          else {
                            uint64_t v151 = v438;
                          }
                          if (v151)
                          {
                            for (uint64_t i55 = 0; i55 != v151; ++i55)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i55, v15[i55]);
                          }
                        }
                        else if ((v432 & 1) != 0 && v14 == 290)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspBootBlockProgFail");
                          if (v438 >= 0x20) {
                            uint64_t v153 = 32;
                          }
                          else {
                            uint64_t v153 = v438;
                          }
                          if (v153)
                          {
                            for (uint64_t i56 = 0; i56 != v153; ++i56)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i56, v15[i56]);
                          }
                        }
                        else if ((v432 & 1) != 0 && v14 == 291)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspBootBlockEraseFail");
                          if (v438 >= 0x20) {
                            uint64_t v155 = 32;
                          }
                          else {
                            uint64_t v155 = v438;
                          }
                          if (v155)
                          {
                            for (uint64_t i57 = 0; i57 != v155; ++i57)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i57, v15[i57]);
                          }
                        }
                        else if ((v432 & 2) != 0 && v14 == 511)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspbootBlockRefreshCnt");
                          if (v438 >= 0x20) {
                            uint64_t v157 = 32;
                          }
                          else {
                            uint64_t v157 = v438;
                          }
                          if (v157)
                          {
                            for (uint64_t i58 = 0; i58 != v157; ++i58)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i58, v15[i58]);
                          }
                        }
                        else if ((v432 & 2) != 0 && v14 == 516)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspBootBlockRefreshTime");
                          if (v438 >= 0x20) {
                            uint64_t v159 = 32;
                          }
                          else {
                            uint64_t v159 = v438;
                          }
                          if (v159)
                          {
                            for (uint64_t i59 = 0; i59 != v159; ++i59)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i59, v15[i59]);
                          }
                        }
                        else
                        {
                          if ((v432 & 2) != 0 && v14 == 517
                            || (v432 & 2) != 0 && v14 == 777
                            || (v432 & 1) != 0 && v14 == 292)
                          {
                            goto LABEL_81;
                          }
                          if ((v432 & 1) != 0 && v14 == 298)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostReads");
                            if (v438 >= 2) {
                              uint64_t v161 = 2;
                            }
                            else {
                              uint64_t v161 = v438;
                            }
                            if (v161)
                            {
                              for (uint64_t i60 = 0; i60 != v161; ++i60)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i60, v15[i60]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 299)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostReadXacts");
                            if (v438 >= 2) {
                              uint64_t v163 = 2;
                            }
                            else {
                              uint64_t v163 = v438;
                            }
                            if (v163)
                            {
                              for (uint64_t i61 = 0; i61 != v163; ++i61)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i61, v15[i61]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 300)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostWrites");
                            if (v438 >= 2) {
                              uint64_t v165 = 2;
                            }
                            else {
                              uint64_t v165 = v438;
                            }
                            if (v165)
                            {
                              for (uint64_t i62 = 0; i62 != v165; ++i62)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i62, v15[i62]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 301)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostWriteXacts");
                            if (v438 >= 2) {
                              uint64_t v167 = 2;
                            }
                            else {
                              uint64_t v167 = v438;
                            }
                            if (v167)
                            {
                              for (uint64_t i63 = 0; i63 != v167; ++i63)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i63, v15[i63]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 302)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostNumFlushes");
                            if (v438 >= 2) {
                              uint64_t v169 = 2;
                            }
                            else {
                              uint64_t v169 = v438;
                            }
                            if (v169)
                            {
                              for (uint64_t i64 = 0; i64 != v169; ++i64)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i64, v15[i64]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 303)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostNumFences");
                            if (v438 >= 2) {
                              uint64_t v171 = 2;
                            }
                            else {
                              uint64_t v171 = v438;
                            }
                            if (v171)
                            {
                              for (uint64_t i65 = 0; i65 != v171; ++i65)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i65, v15[i65]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 304)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "commitPadSectorsPerFlow");
                            if (v438 >= 0xA) {
                              uint64_t v173 = 10;
                            }
                            else {
                              uint64_t v173 = v438;
                            }
                            if (v173)
                            {
                              for (uint64_t i66 = 0; i66 != v173; ++i66)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i66, v15[i66]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 305)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "wcacheDSOverWrLogSizeCnts");
                            if (v438 >= 0xA) {
                              uint64_t v175 = 10;
                            }
                            else {
                              uint64_t v175 = v438;
                            }
                            if (v175)
                            {
                              for (uint64_t i67 = 0; i67 != v175; ++i67)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i67, v15[i67]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 306)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "wcacheDSOverWrSizeByFlow");
                            if (v438 >= 4) {
                              uint64_t v177 = 4;
                            }
                            else {
                              uint64_t v177 = v438;
                            }
                            if (v177)
                            {
                              for (uint64_t i68 = 0; i68 != v177; ++i68)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i68, v15[i68]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 307)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "CmdRaisePrioiryEvents");
                            if (v438 >= 0xA) {
                              uint64_t v179 = 10;
                            }
                            else {
                              uint64_t v179 = v438;
                            }
                            if (v179)
                            {
                              for (uint64_t i69 = 0; i69 != v179; ++i69)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i69, v15[i69]);
                            }
                          }
                          else
                          {
                            if ((v432 & 1) != 0 && v14 == 308
                              || (v432 & 1) != 0 && v14 == 309
                              || (v432 & 1) != 0 && v14 == 310
                              || (v432 & 1) != 0 && v14 == 347)
                            {
                              goto LABEL_81;
                            }
                            if ((v432 & 1) != 0 && v14 == 314)
                            {
                              uint64_t result = fprintf(v8, "%20s:\n", "numBootBlockValidateSuccess");
                              if (v438 >= 8) {
                                uint64_t v181 = 8;
                              }
                              else {
                                uint64_t v181 = v438;
                              }
                              if (v181)
                              {
                                for (uint64_t i70 = 0; i70 != v181; ++i70)
                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i70, v15[i70]);
                              }
                            }
                            else if ((v432 & 1) != 0 && v14 == 315)
                            {
                              uint64_t result = fprintf(v8, "%20s:\n", "numBootBlockValidateFail");
                              if (v438 >= 8) {
                                uint64_t v183 = 8;
                              }
                              else {
                                uint64_t v183 = v438;
                              }
                              if (v183)
                              {
                                for (uint64_t i71 = 0; i71 != v183; ++i71)
                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i71, v15[i71]);
                              }
                            }
                            else if ((v432 & 1) != 0 && v14 == 316)
                            {
                              uint64_t result = fprintf(v8, "%20s:\n", "clogPagesFillingPercentage");
                              if (v438 >= 4) {
                                uint64_t v185 = 4;
                              }
                              else {
                                uint64_t v185 = v438;
                              }
                              if (v185)
                              {
                                for (uint64_t i72 = 0; i72 != v185; ++i72)
                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i72, v15[i72]);
                              }
                            }
                            else
                            {
                              if ((v432 & 2) != 0 && v14 == 317
                                || (v432 & 2) != 0 && v14 == 643
                                || (v432 & 1) != 0 && v14 == 336
                                || (v432 & 1) != 0 && v14 == 318
                                || (v432 & 1) != 0 && v14 == 319
                                || (v432 & 1) != 0 && v14 == 320
                                || (v432 & 1) != 0 && v14 == 321)
                              {
                                goto LABEL_81;
                              }
                              if ((v432 & 1) != 0 && v14 == 324)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bitflipAddr");
                                if (v438 >= 5) {
                                  uint64_t v187 = 5;
                                }
                                else {
                                  uint64_t v187 = v438;
                                }
                                if (v187)
                                {
                                  for (uint64_t i73 = 0; i73 != v187; ++i73)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i73, v15[i73]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 325)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bitflipCount");
                                if (v438 >= 5) {
                                  uint64_t v189 = 5;
                                }
                                else {
                                  uint64_t v189 = v438;
                                }
                                if (v189)
                                {
                                  for (uint64_t i74 = 0; i74 != v189; ++i74)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i74, v15[i74]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 326)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bitflipDupes");
                                if (v438 >= 5) {
                                  uint64_t v191 = 5;
                                }
                                else {
                                  uint64_t v191 = v438;
                                }
                                if (v191)
                                {
                                  for (uint64_t i75 = 0; i75 != v191; ++i75)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i75, v15[i75]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 327)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsMaxTempHisto");
                                if (v438 >= 0x1E) {
                                  uint64_t v193 = 30;
                                }
                                else {
                                  uint64_t v193 = v438;
                                }
                                if (v193)
                                {
                                  for (uint64_t i76 = 0; i76 != v193; ++i76)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i76, v15[i76]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 328)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsMinTempHisto");
                                if (v438 >= 0x1E) {
                                  uint64_t v195 = 30;
                                }
                                else {
                                  uint64_t v195 = v438;
                                }
                                if (v195)
                                {
                                  for (uint64_t i77 = 0; i77 != v195; ++i77)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i77, v15[i77]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 329)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsLifeTimeTempHisto");
                                if (v438 >= 0x1E) {
                                  uint64_t v197 = 30;
                                }
                                else {
                                  uint64_t v197 = v438;
                                }
                                if (v197)
                                {
                                  for (uint64_t i78 = 0; i78 != v197; ++i78)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i78, v15[i78]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 330)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsDeltaTempHisto");
                                if (v438 >= 0x16) {
                                  uint64_t v199 = 22;
                                }
                                else {
                                  uint64_t v199 = v438;
                                }
                                if (v199)
                                {
                                  for (uint64_t i79 = 0; i79 != v199; ++i79)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i79, v15[i79]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 331)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsCrossTempHisto");
                                if (v438 >= 0x2D) {
                                  uint64_t v201 = 45;
                                }
                                else {
                                  uint64_t v201 = v438;
                                }
                                if (v201)
                                {
                                  for (uint64_t i80 = 0; i80 != v201; ++i80)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i80, v15[i80]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 1031)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsUeccTempHisto");
                                if (v438 >= 0x16) {
                                  uint64_t v203 = 22;
                                }
                                else {
                                  uint64_t v203 = v438;
                                }
                                if (v203)
                                {
                                  for (uint64_t i81 = 0; i81 != v203; ++i81)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i81, v15[i81]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 1246)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsUeccCrossTempHisto");
                                if (v438 >= 8) {
                                  uint64_t v205 = 8;
                                }
                                else {
                                  uint64_t v205 = v438;
                                }
                                if (v205)
                                {
                                  for (uint64_t i82 = 0; i82 != v205; ++i82)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i82, v15[i82]);
                                }
                              }
                              else
                              {
                                if ((v432 & 2) != 0 && v14 == 603) {
                                  goto LABEL_81;
                                }
                                if ((v432 & 1) != 0 && v14 == 332)
                                {
                                  uint64_t result = fprintf(v8, "%20s:\n", "wcacheWaitLogMs");
                                  if (v438 >= 0xA) {
                                    uint64_t v207 = 10;
                                  }
                                  else {
                                    uint64_t v207 = v438;
                                  }
                                  if (v207)
                                  {
                                    for (uint64_t i83 = 0; i83 != v207; ++i83)
                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i83, v15[i83]);
                                  }
                                }
                                else if ((v432 & 1) != 0 && v14 == 333)
                                {
                                  uint64_t result = fprintf(v8, "%20s:\n", "wcacheDS_segsSortedLogSize");
                                  if (v438 >= 0xA) {
                                    uint64_t v209 = 10;
                                  }
                                  else {
                                    uint64_t v209 = v438;
                                  }
                                  if (v209)
                                  {
                                    for (uint64_t i84 = 0; i84 != v209; ++i84)
                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i84, v15[i84]);
                                  }
                                }
                                else if ((v432 & 1) != 0 && v14 == 468)
                                {
                                  uint64_t result = fprintf(v8, "%20s:\n", "wcacheDirtyAtFlush");
                                  if (v438 >= 0x10) {
                                    uint64_t v211 = 16;
                                  }
                                  else {
                                    uint64_t v211 = v438;
                                  }
                                  if (v211)
                                  {
                                    for (uint64_t i85 = 0; i85 != v211; ++i85)
                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i85, v15[i85]);
                                  }
                                }
                                else
                                {
                                  if ((v432 & 2) != 0 && v14 == 457
                                    || (v432 & 2) != 0 && v14 == 458
                                    || (v432 & 1) != 0 && v14 == 340
                                    || (v432 & 1) != 0 && v14 == 953
                                    || (v432 & 1) != 0 && v14 == 343
                                    || (v432 & 1) != 0 && v14 == 344
                                    || (v432 & 1) != 0 && v14 == 349
                                    || (v432 & 1) != 0 && v14 == 350
                                    || (v432 & 1) != 0 && v14 == 351
                                    || (v432 & 1) != 0 && v14 == 352
                                    || (v432 & 1) != 0 && v14 == 356
                                    || (v432 & 1) != 0 && v14 == 358
                                    || (v432 & 1) != 0 && v14 == 368
                                    || (v432 & 1) != 0 && v14 == 369
                                    || (v432 & 1) != 0 && v14 == 370
                                    || (v432 & 1) != 0 && v14 == 371
                                    || (v432 & 1) != 0 && v14 == 372
                                    || (v432 & 1) != 0 && v14 == 374
                                    || (v432 & 1) != 0 && v14 == 375
                                    || (v432 & 1) != 0 && v14 == 385
                                    || (v432 & 1) != 0 && v14 == 401
                                    || (v432 & 1) != 0 && v14 == 837
                                    || (v432 & 2) != 0 && v14 == 419
                                    || (v432 & 1) != 0 && v14 == 422
                                    || (v432 & 1) != 0 && v14 == 423
                                    || (v432 & 1) != 0 && v14 == 424
                                    || (v432 & 1) != 0 && v14 == 425
                                    || (v432 & 1) != 0 && v14 == 427
                                    || (v432 & 1) != 0 && v14 == 461
                                    || (v432 & 1) != 0 && v14 == 485
                                    || (v432 & 1) != 0 && v14 == 462
                                    || (v432 & 1) != 0 && v14 == 784)
                                  {
                                    goto LABEL_81;
                                  }
                                  if ((v432 & 1) != 0 && v14 == 463)
                                  {
                                    uint64_t result = fprintf(v8, "%20s:\n", "balanceProportionBucketsHistogram");
                                    if (v438 >= 0xB) {
                                      uint64_t v213 = 11;
                                    }
                                    else {
                                      uint64_t v213 = v438;
                                    }
                                    if (v213)
                                    {
                                      for (uint64_t i86 = 0; i86 != v213; ++i86)
                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i86, v15[i86]);
                                    }
                                  }
                                  else if ((v432 & 1) != 0 && v14 == 551)
                                  {
                                    uint64_t result = fprintf(v8, "%20s:\n", "balanceProportionBucketsHistogramTlc");
                                    if (v438 >= 0xB) {
                                      uint64_t v215 = 11;
                                    }
                                    else {
                                      uint64_t v215 = v438;
                                    }
                                    if (v215)
                                    {
                                      for (uint64_t i87 = 0; i87 != v215; ++i87)
                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i87, v15[i87]);
                                    }
                                  }
                                  else
                                  {
                                    if ((v432 & 1) != 0 && v14 == 464) {
                                      goto LABEL_81;
                                    }
                                    if ((v432 & 1) != 0 && v14 == 465)
                                    {
                                      uint64_t result = fprintf(v8, "%20s:\n", "burstSizeHistogram");
                                      if (v438 >= 0xA) {
                                        uint64_t v217 = 10;
                                      }
                                      else {
                                        uint64_t v217 = v438;
                                      }
                                      if (v217)
                                      {
                                        for (uint64_t i88 = 0; i88 != v217; ++i88)
                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i88, v15[i88]);
                                      }
                                    }
                                    else if ((v432 & 1) != 0 && v14 == 913)
                                    {
                                      uint64_t result = fprintf(v8, "%20s:\n", "fwaHistogram");
                                      if (v438 >= 0xA) {
                                        uint64_t v219 = 10;
                                      }
                                      else {
                                        uint64_t v219 = v438;
                                      }
                                      if (v219)
                                      {
                                        for (uint64_t i89 = 0; i89 != v219; ++i89)
                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i89, v15[i89]);
                                      }
                                    }
                                    else
                                    {
                                      if ((v432 & 1) != 0 && v14 == 483
                                        || (v432 & 2) != 0 && v14 == 428
                                        || (v432 & 1) != 0 && v14 == 429
                                        || (v432 & 1) != 0 && v14 == 430
                                        || (v432 & 1) != 0 && v14 == 431
                                        || (v432 & 1) != 0 && v14 == 432
                                        || (v432 & 1) != 0 && v14 == 433
                                        || (v432 & 1) != 0 && v14 == 434
                                        || (v432 & 1) != 0 && v14 == 435
                                        || (v432 & 1) != 0 && v14 == 436
                                        || (v432 & 1) != 0 && v14 == 437
                                        || (v432 & 1) != 0 && v14 == 447
                                        || (v432 & 1) != 0 && v14 == 448
                                        || (v432 & 1) != 0 && v14 == 449
                                        || (v432 & 1) != 0 && v14 == 488
                                        || (v432 & 1) != 0 && v14 == 486
                                        || (v432 & 1) != 0 && v14 == 450)
                                      {
                                        goto LABEL_81;
                                      }
                                      if ((v432 & 1) != 0 && v14 == 460)
                                      {
                                        uint64_t result = fprintf(v8, "%20s:\n", "CacheDepthVsThroughput");
                                        if (v438 >= 0x100) {
                                          uint64_t v221 = 256;
                                        }
                                        else {
                                          uint64_t v221 = v438;
                                        }
                                        if (v221)
                                        {
                                          for (uint64_t i90 = 0; i90 != v221; ++i90)
                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i90, v15[i90]);
                                        }
                                      }
                                      else if ((v432 & 1) != 0 && v14 == 466)
                                      {
                                        uint64_t result = fprintf(v8, "%20s:\n", "qosDirectToTLC");
                                        if (v438 >= 0x40) {
                                          uint64_t v223 = 64;
                                        }
                                        else {
                                          uint64_t v223 = v438;
                                        }
                                        if (v223)
                                        {
                                          for (uint64_t i91 = 0; i91 != v223; ++i91)
                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i91, v15[i91]);
                                        }
                                      }
                                      else if ((v432 & 1) != 0 && v14 == 467)
                                      {
                                        uint64_t result = fprintf(v8, "%20s:\n", "maxQosDirectToTLC");
                                        if (v438 >= 4) {
                                          uint64_t v225 = 4;
                                        }
                                        else {
                                          uint64_t v225 = v438;
                                        }
                                        if (v225)
                                        {
                                          for (uint64_t i92 = 0; i92 != v225; ++i92)
                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i92, v15[i92]);
                                        }
                                      }
                                      else
                                      {
                                        if ((v432 & 1) != 0 && v14 == 518
                                          || (v432 & 1) != 0 && v14 == 519
                                          || (v432 & 2) != 0 && v14 == 627
                                          || (v432 & 2) != 0 && v14 == 628
                                          || (v432 & 2) != 0 && v14 == 629
                                          || (v432 & 2) != 0 && v14 == 671
                                          || (v432 & 2) != 0 && v14 == 672
                                          || (v432 & 2) != 0 && v14 == 816
                                          || (v432 & 1) != 0 && v14 == 538
                                          || (v432 & 1) != 0 && v14 == 487)
                                        {
                                          goto LABEL_81;
                                        }
                                        if ((v432 & 1) != 0 && v14 == 490)
                                        {
                                          uint64_t result = fprintf(v8, "%20s:\n", "bdrTmpHist");
                                          if (v438 >= 0x40) {
                                            uint64_t v227 = 64;
                                          }
                                          else {
                                            uint64_t v227 = v438;
                                          }
                                          if (v227)
                                          {
                                            for (uint64_t i93 = 0; i93 != v227; ++i93)
                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i93, v15[i93]);
                                          }
                                        }
                                        else
                                        {
                                          if ((v432 & 1) != 0 && v14 == 491 || (v432 & 1) != 0 && v14 == 492) {
                                            goto LABEL_81;
                                          }
                                          if ((v432 & 1) != 0 && v14 == 624)
                                          {
                                            uint64_t result = fprintf(v8, "%20s:\n", "clogFailReason");
                                            if (v438 >= 0x10) {
                                              uint64_t v229 = 16;
                                            }
                                            else {
                                              uint64_t v229 = v438;
                                            }
                                            if (v229)
                                            {
                                              for (uint64_t i94 = 0; i94 != v229; ++i94)
                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i94, v15[i94]);
                                            }
                                          }
                                          else if ((v432 & 1) != 0 && v14 == 1001)
                                          {
                                            uint64_t result = fprintf(v8, "%20s:\n", "clogReplayFailReason");
                                            if (v438 >= 8) {
                                              uint64_t v231 = 8;
                                            }
                                            else {
                                              uint64_t v231 = v438;
                                            }
                                            if (v231)
                                            {
                                              for (uint64_t i95 = 0; i95 != v231; ++i95)
                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i95, v15[i95]);
                                            }
                                          }
                                          else
                                          {
                                            if ((v432 & 1) != 0 && v14 == 1002
                                              || (v432 & 1) != 0 && v14 == 1003
                                              || (v432 & 1) != 0 && v14 == 493
                                              || (v432 & 1) != 0 && v14 == 497
                                              || (v432 & 1) != 0 && v14 == 495
                                              || (v432 & 1) != 0 && v14 == 496
                                              || (v432 & 1) != 0 && v14 == 498
                                              || (v432 & 1) != 0 && v14 == 499
                                              || (v432 & 1) != 0 && v14 == 500
                                              || (v432 & 1) != 0 && v14 == 606
                                              || (v432 & 1) != 0 && v14 == 617
                                              || (v432 & 1) != 0 && v14 == 607
                                              || (v432 & 1) != 0 && v14 == 618
                                              || (v432 & 1) != 0 && v14 == 619
                                              || (v432 & 1) != 0 && v14 == 620
                                              || (v432 & 1) != 0 && v14 == 625
                                              || (v432 & 1) != 0 && v14 == 626
                                              || (v432 & 1) != 0 && v14 == 1009
                                              || (v432 & 1) != 0 && v14 == 1010)
                                            {
                                              goto LABEL_81;
                                            }
                                            if ((v432 & 1) != 0 && v14 == 621)
                                            {
                                              uint64_t result = fprintf(v8, "%20s:\n", "eanBootReadsHist");
                                              if (v438 >= 0xA) {
                                                uint64_t v233 = 10;
                                              }
                                              else {
                                                uint64_t v233 = v438;
                                              }
                                              if (v233)
                                              {
                                                for (uint64_t i96 = 0; i96 != v233; ++i96)
                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i96, v15[i96]);
                                              }
                                            }
                                            else if ((v432 & 1) != 0 && v14 == 632)
                                            {
                                              uint64_t result = fprintf(v8, "%20s:\n", "eanFirstReadMode");
                                              if (v438 >= 6) {
                                                uint64_t v235 = 6;
                                              }
                                              else {
                                                uint64_t v235 = v438;
                                              }
                                              if (v235)
                                              {
                                                for (uint64_t i97 = 0; i97 != v235; ++i97)
                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i97, v15[i97]);
                                              }
                                            }
                                            else
                                            {
                                              if ((v432 & 1) != 0 && v14 == 642
                                                || (v432 & 1) != 0 && v14 == 502
                                                || (v432 & 1) != 0 && v14 == 505
                                                || (v432 & 1) != 0 && v14 == 506
                                                || (v432 & 1) != 0 && v14 == 507
                                                || (v432 & 1) != 0 && v14 == 520
                                                || (v432 & 1) != 0 && v14 == 521
                                                || (v432 & 1) != 0 && v14 == 522
                                                || (v432 & 1) != 0 && v14 == 523
                                                || (v432 & 1) != 0 && v14 == 524
                                                || (v432 & 1) != 0 && v14 == 525
                                                || (v432 & 1) != 0 && v14 == 526
                                                || (v432 & 1) != 0 && v14 == 527
                                                || (v432 & 1) != 0 && v14 == 612
                                                || (v432 & 1) != 0 && v14 == 616
                                                || (v432 & 1) != 0 && v14 == 664
                                                || (v432 & 1) != 0 && v14 == 665
                                                || (v432 & 1) != 0 && v14 == 707
                                                || (v432 & 1) != 0 && v14 == 708
                                                || (v432 & 2) != 0 && v14 == 530
                                                || (v432 & 1) != 0 && v14 == 531
                                                || (v432 & 1) != 0 && v14 == 828
                                                || (v432 & 1) != 0 && v14 == 532
                                                || (v432 & 1) != 0 && v14 == 533
                                                || (v432 & 1) != 0 && v14 == 534
                                                || (v432 & 1) != 0 && v14 == 535
                                                || (v432 & 1) != 0 && v14 == 537
                                                || (v432 & 1) != 0 && v14 == 543
                                                || (v432 & 2) != 0 && v14 == 581
                                                || (v432 & 2) != 0 && v14 == 582
                                                || (v432 & 1) != 0 && v14 == 583
                                                || (v432 & 1) != 0 && v14 == 584
                                                || (v432 & 1) != 0 && v14 == 544
                                                || (v432 & 1) != 0 && v14 == 553
                                                || (v432 & 1) != 0 && v14 == 557
                                                || (v432 & 1) != 0 && v14 == 1117
                                                || (v432 & 1) != 0 && v14 == 548
                                                || (v432 & 1) != 0 && v14 == 611
                                                || (v432 & 1) != 0 && v14 == 545
                                                || (v432 & 1) != 0 && v14 == 558
                                                || (v432 & 1) != 0 && v14 == 559
                                                || (v432 & 1) != 0 && v14 == 1112
                                                || (v432 & 1) != 0 && v14 == 563
                                                || (v432 & 1) != 0 && v14 == 564
                                                || (v432 & 1) != 0 && v14 == 613
                                                || (v432 & 1) != 0 && v14 == 614
                                                || (v432 & 1) != 0 && v14 == 615)
                                              {
                                                goto LABEL_81;
                                              }
                                              if ((v432 & 1) != 0 && v14 == 546)
                                              {
                                                uint64_t result = fprintf(v8, "%20s:\n", "slcDemandBurstSizeDetected");
                                                if (v438 >= 0xA) {
                                                  uint64_t v237 = 10;
                                                }
                                                else {
                                                  uint64_t v237 = v438;
                                                }
                                                if (v237)
                                                {
                                                  for (uint64_t i98 = 0; i98 != v237; ++i98)
                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i98, v15[i98]);
                                                }
                                              }
                                              else if ((v432 & 1) != 0 && v14 == 549)
                                              {
                                                uint64_t result = fprintf(v8, "%20s:\n", "slcDemandBurstSizeSlc");
                                                if (v438 >= 0xA) {
                                                  uint64_t v239 = 10;
                                                }
                                                else {
                                                  uint64_t v239 = v438;
                                                }
                                                if (v239)
                                                {
                                                  for (uint64_t i99 = 0; i99 != v239; ++i99)
                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i99, v15[i99]);
                                                }
                                              }
                                              else if ((v432 & 1) != 0 && v14 == 547)
                                              {
                                                uint64_t result = fprintf(v8, "%20s:\n", "slcDemandBurstDur");
                                                if (v438 >= 0xA) {
                                                  uint64_t v241 = 10;
                                                }
                                                else {
                                                  uint64_t v241 = v438;
                                                }
                                                if (v241)
                                                {
                                                  for (uint64_t i100 = 0; i100 != v241; ++i100)
                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i100, v15[i100]);
                                                }
                                              }
                                              else
                                              {
                                                if ((v432 & 1) != 0 && v14 == 560
                                                  || (v432 & 1) != 0 && v14 == 635
                                                  || (v432 & 1) != 0 && v14 == 636
                                                  || (v432 & 1) != 0 && v14 == 637
                                                  || (v432 & 1) != 0 && v14 == 561
                                                  || (v432 & 1) != 0 && v14 == 565
                                                  || (v432 & 1) != 0 && v14 == 568
                                                  || (v432 & 1) != 0 && v14 == 575
                                                  || (v432 & 1) != 0 && v14 == 588
                                                  || (v432 & 1) != 0 && v14 == 589
                                                  || (v432 & 1) != 0 && v14 == 590
                                                  || (v432 & 1) != 0 && v14 == 591
                                                  || (v432 & 1) != 0 && v14 == 594
                                                  || (v432 & 1) != 0 && v14 == 595
                                                  || (v432 & 1) != 0 && v14 == 602)
                                                {
                                                  goto LABEL_81;
                                                }
                                                if ((v432 & 1) != 0 && v14 == 638)
                                                {
                                                  uint64_t result = fprintf(v8, "%20s:\n", "oslcDemandBurstSize");
                                                  if (v438 >= 0xA) {
                                                    uint64_t v243 = 10;
                                                  }
                                                  else {
                                                    uint64_t v243 = v438;
                                                  }
                                                  if (v243)
                                                  {
                                                    for (uint64_t i101 = 0; i101 != v243; ++i101)
                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i101, v15[i101]);
                                                  }
                                                }
                                                else if ((v432 & 1) != 0 && v14 == 674)
                                                {
                                                  uint64_t result = fprintf(v8, "%20s:\n", "oslcNoVotesHw");
                                                  if (v438 >= 8) {
                                                    uint64_t v245 = 8;
                                                  }
                                                  else {
                                                    uint64_t v245 = v438;
                                                  }
                                                  if (v245)
                                                  {
                                                    for (uint64_t i102 = 0; i102 != v245; ++i102)
                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i102, v15[i102]);
                                                  }
                                                }
                                                else
                                                {
                                                  if ((v432 & 1) != 0 && v14 == 884 || (v432 & 1) != 0 && v14 == 601) {
                                                    goto LABEL_81;
                                                  }
                                                  if ((v432 & 2) != 0 && v14 == 1174)
                                                  {
                                                    uint64_t result = fprintf(v8, "%20s:\n", "nandWritesByMode");
                                                    if (v438 >= 6) {
                                                      uint64_t v247 = 6;
                                                    }
                                                    else {
                                                      uint64_t v247 = v438;
                                                    }
                                                    if (v247)
                                                    {
                                                      for (uint64_t i103 = 0; i103 != v247; ++i103)
                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i103, v15[i103]);
                                                    }
                                                  }
                                                  else if ((v432 & 2) != 0 && v14 == 1175)
                                                  {
                                                    uint64_t result = fprintf(v8, "%20s:\n", "nandReadsByMode");
                                                    if (v438 >= 6) {
                                                      uint64_t v249 = 6;
                                                    }
                                                    else {
                                                      uint64_t v249 = v438;
                                                    }
                                                    if (v249)
                                                    {
                                                      for (uint64_t i104 = 0; i104 != v249; ++i104)
                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i104, v15[i104]);
                                                    }
                                                  }
                                                  else if ((v432 & 1) != 0 && v14 == 605)
                                                  {
                                                    uint64_t result = fprintf(v8, "%20s:\n", "gcActiveReasons");
                                                    if (v438 >= 0xA) {
                                                      uint64_t v251 = 10;
                                                    }
                                                    else {
                                                      uint64_t v251 = v438;
                                                    }
                                                    if (v251)
                                                    {
                                                      for (uint64_t i105 = 0; i105 != v251; ++i105)
                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i105, v15[i105]);
                                                    }
                                                  }
                                                  else if ((v432 & 1) != 0 && v14 == 610)
                                                  {
                                                    uint64_t result = fprintf(v8, "%20s:\n", "pcieAerCounters");
                                                    if (v438 >= 0x40) {
                                                      uint64_t v253 = 64;
                                                    }
                                                    else {
                                                      uint64_t v253 = v438;
                                                    }
                                                    if (v253)
                                                    {
                                                      for (uint64_t i106 = 0; i106 != v253; ++i106)
                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i106, v15[i106]);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if ((v432 & 1) != 0 && v14 == 622
                                                      || (v432 & 1) != 0 && v14 == 623
                                                      || (v432 & 1) != 0 && v14 == 633
                                                      || (v432 & 1) != 0 && v14 == 634
                                                      || (v432 & 1) != 0 && v14 == 541
                                                      || (v432 & 1) != 0 && v14 == 542
                                                      || (v432 & 1) != 0 && v14 == 667
                                                      || (v432 & 1) != 0 && v14 == 676
                                                      || (v432 & 1) != 0 && v14 == 826)
                                                    {
                                                      goto LABEL_81;
                                                    }
                                                    if ((v432 & 1) != 0 && v14 == 660)
                                                    {
                                                      uint64_t result = fprintf(v8, "%20s:\n", "gcMustReasons");
                                                      if (v438 >= 0x14) {
                                                        uint64_t v255 = 20;
                                                      }
                                                      else {
                                                        uint64_t v255 = v438;
                                                      }
                                                      if (v255)
                                                      {
                                                        for (uint64_t i107 = 0; i107 != v255; ++i107)
                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i107, v15[i107]);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      if ((v432 & 2) != 0 && v14 == 666
                                                        || (v432 & 2) != 0 && v14 == 675
                                                        || (v432 & 1) != 0 && v14 == 684)
                                                      {
                                                        goto LABEL_81;
                                                      }
                                                      if ((v432 & 1) != 0 && v14 == 687)
                                                      {
                                                        uint64_t result = fprintf(v8, "%20s:\n", "cbdrInitSent");
                                                        if (v438 >= 3) {
                                                          uint64_t v257 = 3;
                                                        }
                                                        else {
                                                          uint64_t v257 = v438;
                                                        }
                                                        if (v257)
                                                        {
                                                          for (uint64_t i108 = 0; i108 != v257; ++i108)
                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i108, v15[i108]);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if ((v432 & 1) != 0 && v14 == 688
                                                          || (v432 & 1) != 0 && v14 == 689
                                                          || (v432 & 1) != 0 && v14 == 690
                                                          || (v432 & 1) != 0 && v14 == 691)
                                                        {
                                                          goto LABEL_81;
                                                        }
                                                        if ((v432 & 1) != 0 && v14 == 694)
                                                        {
                                                          uint64_t result = fprintf(v8, "%20s:\n", "cbdrRefreshGrades");
                                                          if (v438 >= 0xA) {
                                                            uint64_t v259 = 10;
                                                          }
                                                          else {
                                                            uint64_t v259 = v438;
                                                          }
                                                          if (v259)
                                                          {
                                                            for (uint64_t i109 = 0; i109 != v259; ++i109)
                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i109, v15[i109]);
                                                          }
                                                        }
                                                        else
                                                        {
                                                          if ((v432 & 1) != 0 && v14 == 695
                                                            || (v432 & 1) != 0 && v14 == 696
                                                            || (v432 & 1) != 0 && v14 == 699)
                                                          {
                                                            goto LABEL_81;
                                                          }
                                                          if ((v432 & 1) != 0 && v14 == 731)
                                                          {
                                                            uint64_t result = fprintf(v8, "%20s:\n", "cbdrLastScannedHr");
                                                            if (v438 >= 3) {
                                                              uint64_t v261 = 3;
                                                            }
                                                            else {
                                                              uint64_t v261 = v438;
                                                            }
                                                            if (v261)
                                                            {
                                                              for (uint64_t i110 = 0; i110 != v261; ++i110)
                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i110, v15[i110]);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            if ((v432 & 1) != 0 && v14 == 753
                                                              || (v432 & 1) != 0 && v14 == 754
                                                              || (v432 & 1) != 0 && v14 == 755)
                                                            {
                                                              goto LABEL_81;
                                                            }
                                                            if ((v432 & 1) != 0 && v14 == 756)
                                                            {
                                                              uint64_t result = fprintf(v8, "%20s:\n", "cbdrRefreshedAges");
                                                              if (v438 >= 9) {
                                                                uint64_t v263 = 9;
                                                              }
                                                              else {
                                                                uint64_t v263 = v438;
                                                              }
                                                              if (v263)
                                                              {
                                                                for (uint64_t i111 = 0; i111 != v263; ++i111)
                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i111, v15[i111]);
                                                              }
                                                            }
                                                            else
                                                            {
                                                              if ((v432 & 1) != 0 && v14 == 757
                                                                || (v432 & 1) != 0 && v14 == 758)
                                                              {
                                                                goto LABEL_81;
                                                              }
                                                              if ((v432 & 1) != 0 && v14 == 759)
                                                              {
                                                                uint64_t result = fprintf(v8, "%20s:\n", "cbdrScanPct");
                                                                if (v438 >= 5) {
                                                                  uint64_t v265 = 5;
                                                                }
                                                                else {
                                                                  uint64_t v265 = v438;
                                                                }
                                                                if (v265)
                                                                {
                                                                  for (uint64_t i112 = 0; i112 != v265; ++i112)
                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i112, v15[i112]);
                                                                }
                                                              }
                                                              else
                                                              {
                                                                if ((v432 & 1) != 0 && v14 == 766) {
                                                                  goto LABEL_81;
                                                                }
                                                                if ((v432 & 1) != 0 && v14 == 767)
                                                                {
                                                                  uint64_t result = fprintf(v8, "%20s:\n", "cbdrRefreshGradesSLC");
                                                                  if (v438 >= 0xA) {
                                                                    uint64_t v267 = 10;
                                                                  }
                                                                  else {
                                                                    uint64_t v267 = v438;
                                                                  }
                                                                  if (v267)
                                                                  {
                                                                    for (uint64_t i113 = 0; i113 != v267; ++i113)
                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i113, v15[i113]);
                                                                  }
                                                                }
                                                                else if ((v432 & 1) != 0 && v14 == 768)
                                                                {
                                                                  uint64_t result = fprintf(v8, "%20s:\n", "cbdrRefreshedAgesSLC");
                                                                  if (v438 >= 9) {
                                                                    uint64_t v269 = 9;
                                                                  }
                                                                  else {
                                                                    uint64_t v269 = v438;
                                                                  }
                                                                  if (v269)
                                                                  {
                                                                    for (uint64_t i114 = 0; i114 != v269; ++i114)
                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i114, v15[i114]);
                                                                  }
                                                                }
                                                                else if ((v432 & 1) != 0 && v14 == 769)
                                                                {
                                                                  uint64_t result = fprintf(v8, "%20s:\n", "cbdrScanPctSLC");
                                                                  if (v438 >= 5) {
                                                                    uint64_t v271 = 5;
                                                                  }
                                                                  else {
                                                                    uint64_t v271 = v438;
                                                                  }
                                                                  if (v271)
                                                                  {
                                                                    for (uint64_t i115 = 0; i115 != v271; ++i115)
                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i115, v15[i115]);
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  if ((v432 & 2) != 0 && v14 == 970
                                                                    || (v432 & 1) != 0 && v14 == 683
                                                                    || (v432 & 1) != 0 && v14 == 693
                                                                    || (v432 & 1) != 0 && v14 == 718
                                                                    || (v432 & 1) != 0 && v14 == 709
                                                                    || (v432 & 1) != 0 && v14 == 710
                                                                    || (v432 & 1) != 0 && v14 == 719
                                                                    || (v432 & 1) != 0 && v14 == 720)
                                                                  {
                                                                    goto LABEL_81;
                                                                  }
                                                                  if ((v432 & 1) != 0 && v14 == 702)
                                                                  {
                                                                    uint64_t result = fprintf(v8, "%20s:\n", "vcurve");
                                                                    if (v438 >= 0x20) {
                                                                      uint64_t v273 = 32;
                                                                    }
                                                                    else {
                                                                      uint64_t v273 = v438;
                                                                    }
                                                                    if (v273)
                                                                    {
                                                                      for (uint64_t i116 = 0; i116 != v273; ++i116)
                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i116, v15[i116]);
                                                                    }
                                                                  }
                                                                  else if ((v432 & 1) != 0 && v14 == 703)
                                                                  {
                                                                    uint64_t result = fprintf(v8, "%20s:\n", "injDepth");
                                                                    if (v438 >= 0xC) {
                                                                      uint64_t v275 = 12;
                                                                    }
                                                                    else {
                                                                      uint64_t v275 = v438;
                                                                    }
                                                                    if (v275)
                                                                    {
                                                                      for (uint64_t i117 = 0; i117 != v275; ++i117)
                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i117, v15[i117]);
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    if ((v432 & 1) != 0 && v14 == 704
                                                                      || (v432 & 1) != 0 && v14 == 728
                                                                      || (v432 & 1) != 0 && v14 == 729
                                                                      || (v432 & 1) != 0 && v14 == 730
                                                                      || (v432 & 1) != 0 && v14 == 732
                                                                      || (v432 & 1) != 0 && v14 == 741
                                                                      || (v432 & 1) != 0 && v14 == 742
                                                                      || (v432 & 1) != 0 && v14 == 743
                                                                      || (v432 & 1) != 0 && v14 == 746
                                                                      || (v432 & 1) != 0 && v14 == 747
                                                                      || (v432 & 1) != 0 && v14 == 748
                                                                      || (v432 & 1) != 0 && v14 == 749
                                                                      || (v432 & 1) != 0 && v14 == 750
                                                                      || (v432 & 1) != 0 && v14 == 751
                                                                      || (v432 & 1) != 0 && v14 == 752)
                                                                    {
                                                                      goto LABEL_81;
                                                                    }
                                                                    if ((v432 & 1) != 0 && v14 == 744)
                                                                    {
                                                                      uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructDurationHisto");
                                                                      if (v438 >= 8) {
                                                                        uint64_t v277 = 8;
                                                                      }
                                                                      else {
                                                                        uint64_t v277 = v438;
                                                                      }
                                                                      if (v277)
                                                                      {
                                                                        for (uint64_t i118 = 0; i118 != v277; ++i118)
                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i118, v15[i118]);
                                                                      }
                                                                    }
                                                                    else if ((v432 & 1) != 0 && v14 == 745)
                                                                    {
                                                                      uint64_t result = fprintf(v8, "%20s:\n", "failsOnReconstructHisto");
                                                                      if (v438 >= 8) {
                                                                        uint64_t v279 = 8;
                                                                      }
                                                                      else {
                                                                        uint64_t v279 = v438;
                                                                      }
                                                                      if (v279)
                                                                      {
                                                                        for (uint64_t i119 = 0; i119 != v279; ++i119)
                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i119, v15[i119]);
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      if ((v432 & 1) != 0 && v14 == 776
                                                                        || (v432 & 1) != 0 && v14 == 764
                                                                        || (v432 & 1) != 0 && v14 == 765)
                                                                      {
                                                                        goto LABEL_81;
                                                                      }
                                                                      if ((v432 & 1) != 0 && v14 == 770)
                                                                      {
                                                                        uint64_t result = fprintf(v8, "%20s:\n", "cpuBurstLength");
                                                                        if (v438 >= 8) {
                                                                          uint64_t v281 = 8;
                                                                        }
                                                                        else {
                                                                          uint64_t v281 = v438;
                                                                        }
                                                                        if (v281)
                                                                        {
                                                                          for (uint64_t i120 = 0; i120 != v281; ++i120)
                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i120, v15[i120]);
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        if ((v432 & 1) != 0 && v14 == 778
                                                                          || (v432 & 1) != 0 && v14 == 779
                                                                          || (v432 & 1) != 0 && v14 == 780)
                                                                        {
                                                                          goto LABEL_81;
                                                                        }
                                                                        if ((v432 & 1) != 0 && v14 == 781)
                                                                        {
                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gcSearchTimeHistory");
                                                                          if (v438 >= 0xA) {
                                                                            uint64_t v283 = 10;
                                                                          }
                                                                          else {
                                                                            uint64_t v283 = v438;
                                                                          }
                                                                          if (v283)
                                                                          {
                                                                            for (uint64_t i121 = 0; i121 != v283; ++i121)
                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i121, v15[i121]);
                                                                          }
                                                                        }
                                                                        else if ((v432 & 1) != 0 && v14 == 785)
                                                                        {
                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gcSearchPortion");
                                                                          if (v438 >= 0x10) {
                                                                            uint64_t v285 = 16;
                                                                          }
                                                                          else {
                                                                            uint64_t v285 = v438;
                                                                          }
                                                                          if (v285)
                                                                          {
                                                                            for (uint64_t i122 = 0; i122 != v285; ++i122)
                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i122, v15[i122]);
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          if ((v432 & 1) != 0 && v14 == 792
                                                                            || (v432 & 1) != 0 && v14 == 793
                                                                            || (v432 & 1) != 0 && v14 == 794
                                                                            || (v432 & 2) != 0 && v14 == 821
                                                                            || (v432 & 1) != 0 && v14 == 822
                                                                            || (v432 & 1) != 0 && v14 == 827)
                                                                          {
                                                                            goto LABEL_81;
                                                                          }
                                                                          if ((v432 & 1) != 0 && v14 == 823)
                                                                          {
                                                                            uint64_t result = fprintf(v8, "%20s:\n", "readClassifyStatusesHisto");
                                                                            if (v438 >= 3) {
                                                                              uint64_t v287 = 3;
                                                                            }
                                                                            else {
                                                                              uint64_t v287 = v438;
                                                                            }
                                                                            if (v287)
                                                                            {
                                                                              for (uint64_t i123 = 0; i123 != v287; ++i123)
                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i123, v15[i123]);
                                                                            }
                                                                          }
                                                                          else if ((v432 & 1) != 0 && v14 == 824)
                                                                          {
                                                                            uint64_t result = fprintf(v8, "%20s:\n", "readWithAuxStatusesHisto");
                                                                            if (v438 >= 0xA) {
                                                                              uint64_t v289 = 10;
                                                                            }
                                                                            else {
                                                                              uint64_t v289 = v438;
                                                                            }
                                                                            if (v289)
                                                                            {
                                                                              for (uint64_t i124 = 0; i124 != v289; ++i124)
                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i124, v15[i124]);
                                                                            }
                                                                          }
                                                                          else if ((v432 & 1) != 0 && v14 == 825)
                                                                          {
                                                                            uint64_t result = fprintf(v8, "%20s:\n", "readReconstructStatusesHisto");
                                                                            if (v438 >= 0xA) {
                                                                              uint64_t v291 = 10;
                                                                            }
                                                                            else {
                                                                              uint64_t v291 = v438;
                                                                            }
                                                                            if (v291)
                                                                            {
                                                                              for (uint64_t i125 = 0; i125 != v291; ++i125)
                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i125, v15[i125]);
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            if ((v432 & 1) != 0 && v14 == 830
                                                                              || (v432 & 1) != 0 && v14 == 831
                                                                              || (v432 & 2) != 0 && v14 == 832)
                                                                            {
                                                                              goto LABEL_81;
                                                                            }
                                                                            if ((v432 & 2) != 0 && v14 == 855)
                                                                            {
                                                                              uint64_t result = fprintf(v8, "%20s:\n", "fwFormatVersion");
                                                                              if (v438 >= 3) {
                                                                                uint64_t v293 = 3;
                                                                              }
                                                                              else {
                                                                                uint64_t v293 = v438;
                                                                              }
                                                                              if (v293)
                                                                              {
                                                                                for (uint64_t i126 = 0; i126 != v293; ++i126)
                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i126, v15[i126]);
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              if ((v432 & 1) != 0 && v14 == 883) {
                                                                                goto LABEL_81;
                                                                              }
                                                                              if ((v432 & 2) != 0 && v14 == 868)
                                                                              {
                                                                                uint64_t result = fprintf(v8, "%20s:\n", "dmReasonsSlc_1bc");
                                                                                if (v438 >= 0x20) {
                                                                                  uint64_t v295 = 32;
                                                                                }
                                                                                else {
                                                                                  uint64_t v295 = v438;
                                                                                }
                                                                                if (v295)
                                                                                {
                                                                                  for (uint64_t i127 = 0; i127 != v295; ++i127)
                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i127, v15[i127]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 869)
                                                                              {
                                                                                uint64_t result = fprintf(v8, "%20s:\n", "dmReasonsTlc_1bc");
                                                                                if (v438 >= 0x20) {
                                                                                  uint64_t v297 = 32;
                                                                                }
                                                                                else {
                                                                                  uint64_t v297 = v438;
                                                                                }
                                                                                if (v297)
                                                                                {
                                                                                  for (uint64_t i128 = 0; i128 != v297; ++i128)
                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i128, v15[i128]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 870)
                                                                              {
                                                                                uint64_t result = fprintf(v8, "%20s:\n", "dmReasonsSlc_1bc_he");
                                                                                if (v438 >= 0x20) {
                                                                                  uint64_t v299 = 32;
                                                                                }
                                                                                else {
                                                                                  uint64_t v299 = v438;
                                                                                }
                                                                                if (v299)
                                                                                {
                                                                                  for (uint64_t i129 = 0; i129 != v299; ++i129)
                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i129, v15[i129]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 871)
                                                                              {
                                                                                uint64_t result = fprintf(v8, "%20s:\n", "dmReasonsTlc_1bc_he");
                                                                                if (v438 >= 0x20) {
                                                                                  uint64_t v301 = 32;
                                                                                }
                                                                                else {
                                                                                  uint64_t v301 = v438;
                                                                                }
                                                                                if (v301)
                                                                                {
                                                                                  for (uint64_t i130 = 0; i130 != v301; ++i130)
                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i130, v15[i130]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 876)
                                                                              {
                                                                                uint64_t result = fprintf(v8, "%20s:\n", "dmReasonsSlc_mbc");
                                                                                if (v438 >= 0x20) {
                                                                                  uint64_t v303 = 32;
                                                                                }
                                                                                else {
                                                                                  uint64_t v303 = v438;
                                                                                }
                                                                                if (v303)
                                                                                {
                                                                                  for (uint64_t i131 = 0; i131 != v303; ++i131)
                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i131, v15[i131]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 877)
                                                                              {
                                                                                uint64_t result = fprintf(v8, "%20s:\n", "dmReasonsTlc_mbc");
                                                                                if (v438 >= 0x20) {
                                                                                  uint64_t v305 = 32;
                                                                                }
                                                                                else {
                                                                                  uint64_t v305 = v438;
                                                                                }
                                                                                if (v305)
                                                                                {
                                                                                  for (uint64_t i132 = 0; i132 != v305; ++i132)
                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i132, v15[i132]);
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                if ((v432 & 1) != 0 && v14 == 896) {
                                                                                  goto LABEL_81;
                                                                                }
                                                                                if ((v432 & 1) != 0 && v14 == 897)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "wcWrFragSizes");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v307 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v307 = v438;
                                                                                  }
                                                                                  if (v307)
                                                                                  {
                                                                                    for (uint64_t i133 = 0; i133 != v307; ++i133)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i133, v15[i133]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 905)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidRelPerBlock");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v309 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v309 = v438;
                                                                                  }
                                                                                  if (v309)
                                                                                  {
                                                                                    for (uint64_t i134 = 0; i134 != v309; ++i134)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i134, v15[i134]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 906)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidRelBetweenRefreshesPerBlock");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v311 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v311 = v438;
                                                                                  }
                                                                                  if (v311)
                                                                                  {
                                                                                    for (uint64_t i135 = 0; i135 != v311; ++i135)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i135, v15[i135]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 907)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidMaxRelBetweenRefreshesPerBlock");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v313 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v313 = v438;
                                                                                  }
                                                                                  if (v313)
                                                                                  {
                                                                                    for (uint64_t i136 = 0; i136 != v313; ++i136)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i136, v15[i136]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 908)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidMinRelBetweenRefreshesPerBlock");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v315 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v315 = v438;
                                                                                  }
                                                                                  if (v315)
                                                                                  {
                                                                                    for (uint64_t i137 = 0; i137 != v315; ++i137)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i137, v15[i137]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 918)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidMaxCyclesBetweenRel");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v317 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v317 = v438;
                                                                                  }
                                                                                  if (v317)
                                                                                  {
                                                                                    for (uint64_t i138 = 0; i138 != v317; ++i138)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i138, v15[i138]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 919)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidMinCyclesBetweenRel");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v319 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v319 = v438;
                                                                                  }
                                                                                  if (v319)
                                                                                  {
                                                                                    for (uint64_t i139 = 0; i139 != v319; ++i139)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i139, v15[i139]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 932)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidLastRelPECycles");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v321 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v321 = v438;
                                                                                  }
                                                                                  if (v321)
                                                                                  {
                                                                                    for (uint64_t i140 = 0; i140 != v321; ++i140)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i140, v15[i140]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 933)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidRelQualPECycles");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v323 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v323 = v438;
                                                                                  }
                                                                                  if (v323)
                                                                                  {
                                                                                    for (uint64_t i141 = 0; i141 != v323; ++i141)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i141, v15[i141]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 920)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidAuxPerBlock");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v325 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v325 = v438;
                                                                                  }
                                                                                  if (v325)
                                                                                  {
                                                                                    for (uint64_t i142 = 0; i142 != v325; ++i142)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i142, v15[i142]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 921)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidAuxBetweenRefreshesPerBlock");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v327 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v327 = v438;
                                                                                  }
                                                                                  if (v327)
                                                                                  {
                                                                                    for (uint64_t i143 = 0; i143 != v327; ++i143)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i143, v15[i143]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 930)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidMaxCyclesBetweenAux");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v329 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v329 = v438;
                                                                                  }
                                                                                  if (v329)
                                                                                  {
                                                                                    for (uint64_t i144 = 0; i144 != v329; ++i144)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i144, v15[i144]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 931)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidMinCyclesBetweenAux");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v331 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v331 = v438;
                                                                                  }
                                                                                  if (v331)
                                                                                  {
                                                                                    for (uint64_t i145 = 0; i145 != v331; ++i145)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i145, v15[i145]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 934)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidLastAuxPECycles");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v333 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v333 = v438;
                                                                                  }
                                                                                  if (v333)
                                                                                  {
                                                                                    for (uint64_t i146 = 0; i146 != v333; ++i146)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i146, v15[i146]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 935)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidAuxQualPECycles");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v335 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v335 = v438;
                                                                                  }
                                                                                  if (v335)
                                                                                  {
                                                                                    for (uint64_t i147 = 0; i147 != v335; ++i147)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i147, v15[i147]);
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  if ((v432 & 1) != 0 && v14 == 922
                                                                                    || (v432 & 1) != 0 && v14 == 923)
                                                                                  {
                                                                                    goto LABEL_81;
                                                                                  }
                                                                                  if ((v432 & 1) != 0 && v14 == 910)
                                                                                  {
                                                                                    uint64_t result = fprintf(v8, "%20s:\n", "pgBelowMinBands");
                                                                                    if (v438 >= 2) {
                                                                                      uint64_t v337 = 2;
                                                                                    }
                                                                                    else {
                                                                                      uint64_t v337 = v438;
                                                                                    }
                                                                                    if (v337)
                                                                                    {
                                                                                      for (uint64_t i148 = 0; i148 != v337; ++i148)
                                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i148, v15[i148]);
                                                                                    }
                                                                                  }
                                                                                  else if ((v432 & 1) != 0 {
                                                                                         && v14 == 911)
                                                                                  }
                                                                                  {
                                                                                    uint64_t result = fprintf(v8, "%20s:\n", "pgNoBands");
                                                                                    if (v438 >= 2) {
                                                                                      uint64_t v339 = 2;
                                                                                    }
                                                                                    else {
                                                                                      uint64_t v339 = v438;
                                                                                    }
                                                                                    if (v339)
                                                                                    {
                                                                                      for (uint64_t i149 = 0; i149 != v339; ++i149)
                                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i149, v15[i149]);
                                                                                    }
                                                                                  }
                                                                                  else if ((v432 & 1) != 0 {
                                                                                         && v14 == 912)
                                                                                  }
                                                                                  {
                                                                                    uint64_t result = fprintf(v8, "%20s:\n", "pgBelowMinBlocks");
                                                                                    if (v438 >= 2) {
                                                                                      uint64_t v341 = 2;
                                                                                    }
                                                                                    else {
                                                                                      uint64_t v341 = v438;
                                                                                    }
                                                                                    if (v341)
                                                                                    {
                                                                                      for (uint64_t i150 = 0; i150 != v341; ++i150)
                                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i150, v15[i150]);
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    if ((v432 & 1) != 0 && v14 == 915
                                                                                      || (v432 & 1) != 0 && v14 == 925
                                                                                      || (v432 & 1) != 0 && v14 == 946
                                                                                      || (v432 & 1) != 0 && v14 == 936
                                                                                      || (v432 & 1) != 0 && v14 == 937
                                                                                      || (v432 & 1) != 0 && v14 == 938
                                                                                      || (v432 & 1) != 0 && v14 == 939
                                                                                      || (v432 & 1) != 0 && v14 == 940
                                                                                      || (v432 & 2) != 0 && v14 == 954
                                                                                      || (v432 & 2) != 0 && v14 == 942
                                                                                      || (v432 & 2) != 0 && v14 == 943
                                                                                      || (v432 & 2) != 0 && v14 == 944
                                                                                      || (v432 & 1) != 0 && v14 == 957
                                                                                      || (v432 & 1) != 0 && v14 == 958)
                                                                                    {
                                                                                      goto LABEL_81;
                                                                                    }
                                                                                    if ((v432 & 2) != 0 && v14 == 948)
                                                                                    {
                                                                                      uint64_t result = fprintf(v8, "%20s:\n", "assertHistory");
                                                                                      if (v438 >= 0x28) {
                                                                                        uint64_t v343 = 40;
                                                                                      }
                                                                                      else {
                                                                                        uint64_t v343 = v438;
                                                                                      }
                                                                                      if (v343)
                                                                                      {
                                                                                        for (uint64_t i151 = 0;
                                                                                              i151 != v343;
                                                                                              ++i151)
                                                                                        {
                                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i151, v15[i151]);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      if ((v432 & 2) != 0 && v14 == 951
                                                                                        || (v432 & 2) != 0 && v14 == 952
                                                                                        || (v432 & 1) != 0 && v14 == 955
                                                                                        || (v432 & 1) != 0 && v14 == 966
                                                                                        || (v432 & 1) != 0 && v14 == 968
                                                                                        || (v432 & 1) != 0 && v14 == 969)
                                                                                      {
                                                                                        goto LABEL_81;
                                                                                      }
                                                                                      if ((v432 & 1) != 0 && v14 == 961)
                                                                                      {
                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "osBuildStr");
                                                                                        if (v438 >= 2) {
                                                                                          uint64_t v345 = 2;
                                                                                        }
                                                                                        else {
                                                                                          uint64_t v345 = v438;
                                                                                        }
                                                                                        if (v345)
                                                                                        {
                                                                                          for (uint64_t i152 = 0;
                                                                                                i152 != v345;
                                                                                                ++i152)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i152, v15[i152]);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      else if ((v432 & 1) != 0 {
                                                                                             && v14 == 967)
                                                                                      }
                                                                                      {
                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "indTrimFrags");
                                                                                        if (v438 >= 0xC) {
                                                                                          uint64_t v347 = 12;
                                                                                        }
                                                                                        else {
                                                                                          uint64_t v347 = v438;
                                                                                        }
                                                                                        if (v347)
                                                                                        {
                                                                                          for (uint64_t i153 = 0;
                                                                                                i153 != v347;
                                                                                                ++i153)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i153, v15[i153]);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      else if ((v432 & 1) != 0 {
                                                                                             && v14 == 971)
                                                                                      }
                                                                                      {
                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "indUsedFrags");
                                                                                        if (v438 >= 0xC) {
                                                                                          uint64_t v349 = 12;
                                                                                        }
                                                                                        else {
                                                                                          uint64_t v349 = v438;
                                                                                        }
                                                                                        if (v349)
                                                                                        {
                                                                                          for (uint64_t i154 = 0;
                                                                                                i154 != v349;
                                                                                                ++i154)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i154, v15[i154]);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        if ((v432 & 1) != 0
                                                                                          && v14 == 985
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 973
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 976
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 980
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 981
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 982
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 984
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 990
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 992
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 993
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 994
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 986
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 987
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 1000
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 1013)
                                                                                        {
                                                                                          goto LABEL_81;
                                                                                        }
                                                                                        if ((v432 & 1) != 0
                                                                                          && v14 == 1015)
                                                                                        {
                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "eanEarlyBootUeccPage");
                                                                                          if (v438 >= 4) {
                                                                                            uint64_t v351 = 4;
                                                                                          }
                                                                                          else {
                                                                                            uint64_t v351 = v438;
                                                                                          }
                                                                                          if (v351)
                                                                                          {
                                                                                            for (uint64_t i155 = 0;
                                                                                                  i155 != v351;
                                                                                                  ++i155)
                                                                                            {
                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i155, v15[i155]);
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          if ((v432 & 1) != 0
                                                                                            && v14 == 1016
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1017
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1020
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1021
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1027
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1028
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1029
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1022
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1023
                                                                                            || (v432 & 2) != 0
                                                                                            && v14 == 1025
                                                                                            || (v432 & 2) != 0
                                                                                            && v14 == 1026
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1030)
                                                                                          {
                                                                                            goto LABEL_81;
                                                                                          }
                                                                                          if ((v432 & 1) != 0
                                                                                            && v14 == 1040)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "bandsAgeBinsV2");
                                                                                            if (v438 >= 0x1F) {
                                                                                              uint64_t v353 = 31;
                                                                                            }
                                                                                            else {
                                                                                              uint64_t v353 = v438;
                                                                                            }
                                                                                            if (v353)
                                                                                            {
                                                                                              for (uint64_t i156 = 0;
                                                                                                    i156 != v353;
                                                                                                    ++i156)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i156, v15[i156]);
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          else if ((v432 & 1) != 0 && v14 == 1041)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "bandsAgeBinsSnapshot");
                                                                                            if (v438 >= 0x1F) {
                                                                                              uint64_t v355 = 31;
                                                                                            }
                                                                                            else {
                                                                                              uint64_t v355 = v438;
                                                                                            }
                                                                                            if (v355)
                                                                                            {
                                                                                              for (uint64_t i157 = 0;
                                                                                                    i157 != v355;
                                                                                                    ++i157)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i157, v15[i157]);
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          else if ((v432 & 1) != 0 && v14 == 1042)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "bandsAgeBinsReadSectors");
                                                                                            if (v438 >= 0xF) {
                                                                                              uint64_t v357 = 15;
                                                                                            }
                                                                                            else {
                                                                                              uint64_t v357 = v438;
                                                                                            }
                                                                                            if (v357)
                                                                                            {
                                                                                              for (uint64_t i158 = 0;
                                                                                                    i158 != v357;
                                                                                                    ++i158)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i158, v15[i158]);
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            if ((v432 & 2) != 0
                                                                                              && v14 == 1050
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1051
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1052
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1053
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1061)
                                                                                            {
                                                                                              goto LABEL_81;
                                                                                            }
                                                                                            if ((v432 & 1) != 0
                                                                                              && v14 == 1057)
                                                                                            {
                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "hostReadsVerticalByFlow");
                                                                                              if (v438 >= 3) {
                                                                                                uint64_t v359 = 3;
                                                                                              }
                                                                                              else {
                                                                                                uint64_t v359 = v438;
                                                                                              }
                                                                                              if (v359)
                                                                                              {
                                                                                                for (uint64_t i159 = 0;
                                                                                                      i159 != v359;
                                                                                                      ++i159)
                                                                                                {
                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i159, v15[i159]);
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                            else if ((v432 & 1) != 0 && v14 == 1058)
                                                                                            {
                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "hostReadsByFlow");
                                                                                              if (v438 >= 7) {
                                                                                                uint64_t v361 = 7;
                                                                                              }
                                                                                              else {
                                                                                                uint64_t v361 = v438;
                                                                                              }
                                                                                              if (v361)
                                                                                              {
                                                                                                for (uint64_t i160 = 0;
                                                                                                      i160 != v361;
                                                                                                      ++i160)
                                                                                                {
                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i160, v15[i160]);
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              if ((v432 & 1) != 0
                                                                                                && v14 == 1036
                                                                                                || (v432 & 1) != 0
                                                                                                && v14 == 1037
                                                                                                || (v432 & 1) != 0
                                                                                                && v14 == 1076
                                                                                                || (v432 & 1) != 0
                                                                                                && v14 == 1098)
                                                                                              {
                                                                                                goto LABEL_81;
                                                                                              }
                                                                                              if ((v432 & 1) != 0
                                                                                                && v14 == 1099)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "%20s:\n", "pgCompressionBlocksInDip");
                                                                                                if (v438 >= 4) {
                                                                                                  uint64_t v363 = 4;
                                                                                                }
                                                                                                else {
                                                                                                  uint64_t v363 = v438;
                                                                                                }
                                                                                                if (v363)
                                                                                                {
                                                                                                  for (uint64_t i161 = 0;
                                                                                                        i161 != v363;
                                                                                                        ++i161)
                                                                                                  {
                                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i161, v15[i161]);
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                              else if ((v432 & 1) != 0 && v14 == 1139)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "%20s:\n", "pgCompressionBlocksInPG");
                                                                                                if (v438 >= 4) {
                                                                                                  uint64_t v365 = 4;
                                                                                                }
                                                                                                else {
                                                                                                  uint64_t v365 = v438;
                                                                                                }
                                                                                                if (v365)
                                                                                                {
                                                                                                  for (uint64_t i162 = 0;
                                                                                                        i162 != v365;
                                                                                                        ++i162)
                                                                                                  {
                                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i162, v15[i162]);
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                if ((v432 & 1) != 0 && v14 == 1140 || (v432 & 1) != 0 && v14 == 1141 || (v432 & 1) != 0 && v14 == 1200 || (v432 & 1) != 0 && v14 == 1080) {
                                                                                                  goto LABEL_81;
                                                                                                }
                                                                                                if ((v432 & 1) != 0 && v14 == 1105)
                                                                                                {
                                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "hostReadSequential");
                                                                                                  if (v438 >= 0xE) {
                                                                                                    uint64_t v367 = 14;
                                                                                                  }
                                                                                                  else {
                                                                                                    uint64_t v367 = v438;
                                                                                                  }
                                                                                                  if (v367)
                                                                                                  {
                                                                                                    for (uint64_t i163 = 0;
                                                                                                          i163 != v367;
                                                                                                          ++i163)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i163, v15[i163]);
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                                else if ((v432 & 1) != 0 && v14 == 1106)
                                                                                                {
                                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "GCReadSequential");
                                                                                                  if (v438 >= 0xE) {
                                                                                                    uint64_t v369 = 14;
                                                                                                  }
                                                                                                  else {
                                                                                                    uint64_t v369 = v438;
                                                                                                  }
                                                                                                  if (v369)
                                                                                                  {
                                                                                                    for (uint64_t i164 = 0;
                                                                                                          i164 != v369;
                                                                                                          ++i164)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i164, v15[i164]);
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  if ((v432 & 2) != 0 && v14 == 1118 || (v432 & 2) != 0 && v14 == 1121 || (v432 & 1) != 0 && v14 == 1123 || (v432 & 1) != 0 && v14 == 1124 || (v432 & 1) != 0 && v14 == 1125 || (v432 & 1) != 0 && v14 == 1126 || (v432 & 1) != 0 && v14 == 1137 || (v432 & 1) != 0 && v14 == 1138 || (v432 & 1) != 0 && v14 == 1156) {
                                                                                                    goto LABEL_81;
                                                                                                  }
                                                                                                  if ((v432 & 1) != 0 && v14 == 1116)
                                                                                                  {
                                                                                                    uint64_t result = fprintf(v8, "%20s:\n", "gcwamp");
                                                                                                    if (v438 >= 0x20) {
                                                                                                      uint64_t v371 = 32;
                                                                                                    }
                                                                                                    else {
                                                                                                      uint64_t v371 = v438;
                                                                                                    }
                                                                                                    if (v371)
                                                                                                    {
                                                                                                      for (uint64_t i165 = 0;
                                                                                                            i165 != v371;
                                                                                                            ++i165)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i165, v15[i165]);
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    if ((v432 & 1) != 0 && v14 == 1157 || (v432 & 1) != 0 && v14 == 1158 || (v432 & 1) != 0 && v14 == 1164) {
                                                                                                      goto LABEL_81;
                                                                                                    }
                                                                                                    if ((v432 & 2) != 0 && v14 == 1159)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "%20s:\n", "slcWLPerDipDelta");
                                                                                                      if (v438 >= 0x18) {
                                                                                                        uint64_t v373 = 24;
                                                                                                      }
                                                                                                      else {
                                                                                                        uint64_t v373 = v438;
                                                                                                      }
                                                                                                      if (v373)
                                                                                                      {
                                                                                                        for (uint64_t i166 = 0;
                                                                                                              i166 != v373;
                                                                                                              ++i166)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i166, v15[i166]);
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    else if ((v432 & 2) != 0 && v14 == 1160)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "%20s:\n", "slcWLPerDipAvgPEC");
                                                                                                      if (v438 >= 0x18) {
                                                                                                        uint64_t v375 = 24;
                                                                                                      }
                                                                                                      else {
                                                                                                        uint64_t v375 = v438;
                                                                                                      }
                                                                                                      if (v375)
                                                                                                      {
                                                                                                        for (uint64_t i167 = 0;
                                                                                                              i167 != v375;
                                                                                                              ++i167)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i167, v15[i167]);
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    else if ((v432 & 2) != 0 && v14 == 1161)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "%20s:\n", "slcWLPerDipSlack");
                                                                                                      if (v438 >= 0x18) {
                                                                                                        uint64_t v377 = 24;
                                                                                                      }
                                                                                                      else {
                                                                                                        uint64_t v377 = v438;
                                                                                                      }
                                                                                                      if (v377)
                                                                                                      {
                                                                                                        for (uint64_t i168 = 0;
                                                                                                              i168 != v377;
                                                                                                              ++i168)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i168, v15[i168]);
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      if ((v432 & 2) != 0 && v14 == 1162 || (v432 & 2) != 0 && v14 == 1163) {
                                                                                                        goto LABEL_81;
                                                                                                      }
                                                                                                      if ((v432 & 2) != 0 && v14 == 1216)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "tlcWLPerDipAvgPEC");
                                                                                                        if (v438 >= 0x18) {
                                                                                                          uint64_t v379 = 24;
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v379 = v438;
                                                                                                        }
                                                                                                        if (v379)
                                                                                                        {
                                                                                                          for (uint64_t i169 = 0;
                                                                                                                i169 != v379;
                                                                                                                ++i169)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i169, v15[i169]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 2) != 0 && v14 == 1217)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "tlcWLPerDipMaxPEC");
                                                                                                        if (v438 >= 0x18) {
                                                                                                          uint64_t v381 = 24;
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v381 = v438;
                                                                                                        }
                                                                                                        if (v381)
                                                                                                        {
                                                                                                          for (uint64_t i170 = 0;
                                                                                                                i170 != v381;
                                                                                                                ++i170)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i170, v15[i170]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 2) != 0 && v14 == 1218)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "tlcWLPerDipMinPEC");
                                                                                                        if (v438 >= 0x18) {
                                                                                                          uint64_t v383 = 24;
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v383 = v438;
                                                                                                        }
                                                                                                        if (v383)
                                                                                                        {
                                                                                                          for (uint64_t i171 = 0;
                                                                                                                i171 != v383;
                                                                                                                ++i171)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i171, v15[i171]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 1) != 0 && v14 == 1147)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "gc_concurrent_dw_gc12");
                                                                                                        if (v438 >= 0x18) {
                                                                                                          uint64_t v385 = 24;
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v385 = v438;
                                                                                                        }
                                                                                                        if (v385)
                                                                                                        {
                                                                                                          for (uint64_t i172 = 0;
                                                                                                                i172 != v385;
                                                                                                                ++i172)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i172, v15[i172]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 1) != 0 && v14 == 1148)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "gc_concurrent_dw_gc1");
                                                                                                        if (v438 >= 0x18) {
                                                                                                          uint64_t v387 = 24;
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v387 = v438;
                                                                                                        }
                                                                                                        if (v387)
                                                                                                        {
                                                                                                          for (uint64_t i173 = 0;
                                                                                                                i173 != v387;
                                                                                                                ++i173)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i173, v15[i173]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 1) != 0 && v14 == 1149)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "gc_concurrent_dw_gc2");
                                                                                                        if (v438 >= 0x18) {
                                                                                                          uint64_t v389 = 24;
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v389 = v438;
                                                                                                        }
                                                                                                        if (v389)
                                                                                                        {
                                                                                                          for (uint64_t i174 = 0;
                                                                                                                i174 != v389;
                                                                                                                ++i174)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i174, v15[i174]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        if ((v432 & 1) != 0 && v14 == 1178) {
                                                                                                          goto LABEL_81;
                                                                                                        }
                                                                                                        if ((v432 & 2) != 0 && v14 == 1179)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_cur_dw_gc1");
                                                                                                          if (v438 >= 4) {
                                                                                                            uint64_t v391 = 4;
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v391 = v438;
                                                                                                          }
                                                                                                          if (v391)
                                                                                                          {
                                                                                                            for (uint64_t i175 = 0;
                                                                                                                  i175 != v391;
                                                                                                                  ++i175)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i175, v15[i175]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else if ((v432 & 2) != 0 && v14 == 1180)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_cur_dw_gc2");
                                                                                                          if (v438 >= 4) {
                                                                                                            uint64_t v393 = 4;
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v393 = v438;
                                                                                                          }
                                                                                                          if (v393)
                                                                                                          {
                                                                                                            for (uint64_t i176 = 0;
                                                                                                                  i176 != v393;
                                                                                                                  ++i176)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i176, v15[i176]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else if ((v432 & 2) != 0 && v14 == 1181)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_cur_dw_gc3");
                                                                                                          if (v438 >= 4) {
                                                                                                            uint64_t v395 = 4;
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v395 = v438;
                                                                                                          }
                                                                                                          if (v395)
                                                                                                          {
                                                                                                            for (uint64_t i177 = 0;
                                                                                                                  i177 != v395;
                                                                                                                  ++i177)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i177, v15[i177]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else if ((v432 & 1) != 0 && v14 == 1182)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_tot_dw_gc1");
                                                                                                          if (v438 >= 4) {
                                                                                                            uint64_t v397 = 4;
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v397 = v438;
                                                                                                          }
                                                                                                          if (v397)
                                                                                                          {
                                                                                                            for (uint64_t i178 = 0;
                                                                                                                  i178 != v397;
                                                                                                                  ++i178)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i178, v15[i178]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else if ((v432 & 1) != 0 && v14 == 1183)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_tot_dw_gc2");
                                                                                                          if (v438 >= 4) {
                                                                                                            uint64_t v399 = 4;
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v399 = v438;
                                                                                                          }
                                                                                                          if (v399)
                                                                                                          {
                                                                                                            for (uint64_t i179 = 0;
                                                                                                                  i179 != v399;
                                                                                                                  ++i179)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i179, v15[i179]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          if ((v432 & 2) != 0 && v14 == 1184 || (v432 & 2) != 0 && v14 == 1185 || (v432 & 2) != 0 && v14 == 1186 || (v432 & 1) != 0 && v14 == 1187) {
                                                                                                            goto LABEL_81;
                                                                                                          }
                                                                                                          if ((v432 & 1) != 0 && v14 == 1168)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectPERemovalTotalCost");
                                                                                                            if (v438 >= 2) {
                                                                                                              uint64_t v401 = 2;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v401 = v438;
                                                                                                            }
                                                                                                            if (v401)
                                                                                                            {
                                                                                                              for (uint64_t i180 = 0;
                                                                                                                    i180 != v401;
                                                                                                                    ++i180)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i180, v15[i180]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1198)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectPERemovalMostSevereCost");
                                                                                                            if (v438 >= 3) {
                                                                                                              uint64_t v403 = 3;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v403 = v438;
                                                                                                            }
                                                                                                            if (v403)
                                                                                                            {
                                                                                                              for (uint64_t i181 = 0;
                                                                                                                    i181 != v403;
                                                                                                                    ++i181)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i181, v15[i181]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1169)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectEmptySpotRemovalTotalCost");
                                                                                                            if (v438 >= 2) {
                                                                                                              uint64_t v405 = 2;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v405 = v438;
                                                                                                            }
                                                                                                            if (v405)
                                                                                                            {
                                                                                                              for (uint64_t i182 = 0;
                                                                                                                    i182 != v405;
                                                                                                                    ++i182)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i182, v15[i182]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1171)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectEmptySpotRemovalAge");
                                                                                                            if (v438 >= 0xA) {
                                                                                                              uint64_t v407 = 10;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v407 = v438;
                                                                                                            }
                                                                                                            if (v407)
                                                                                                            {
                                                                                                              for (uint64_t i183 = 0;
                                                                                                                    i183 != v407;
                                                                                                                    ++i183)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i183, v15[i183]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1172)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectGBBedMostSevereCost");
                                                                                                            if (v438 >= 3) {
                                                                                                              uint64_t v409 = 3;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v409 = v438;
                                                                                                            }
                                                                                                            if (v409)
                                                                                                            {
                                                                                                              for (uint64_t i184 = 0;
                                                                                                                    i184 != v409;
                                                                                                                    ++i184)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i184, v15[i184]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1196)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectGBBedTotalCost");
                                                                                                            if (v438 >= 5) {
                                                                                                              uint64_t v411 = 5;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v411 = v438;
                                                                                                            }
                                                                                                            if (v411)
                                                                                                            {
                                                                                                              for (uint64_t i185 = 0;
                                                                                                                    i185 != v411;
                                                                                                                    ++i185)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i185, v15[i185]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1197)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectGBBedAge");
                                                                                                            if (v438 >= 0xA) {
                                                                                                              uint64_t v413 = 10;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v413 = v438;
                                                                                                            }
                                                                                                            if (v413)
                                                                                                            {
                                                                                                              for (uint64_t i186 = 0;
                                                                                                                    i186 != v413;
                                                                                                                    ++i186)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i186, v15[i186]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            if ((v432 & 1) != 0 && v14 == 1199 || (v432 & 1) != 0 && v14 == 1191 || (v432 & 1) != 0 && v14 == 1192 || (v432 & 1) != 0 && v14 == 1205) {
                                                                                                              goto LABEL_81;
                                                                                                            }
                                                                                                            if ((v432 & 1) != 0 && v14 == 1211)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "forcedAllocationSmallEraseQ");
                                                                                                              if (v438 >= 0x18) {
                                                                                                                uint64_t v415 = 24;
                                                                                                              }
                                                                                                              else {
                                                                                                                uint64_t v415 = v438;
                                                                                                              }
                                                                                                              if (v415)
                                                                                                              {
                                                                                                                for (uint64_t i187 = 0;
                                                                                                                      i187 != v415;
                                                                                                                      ++i187)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i187, v15[i187]);
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            else if ((v432 & 1) != 0 && v14 == 1201)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "gcVerticalSuccssfulAlignments");
                                                                                                              if (v438 >= 4) {
                                                                                                                uint64_t v417 = 4;
                                                                                                              }
                                                                                                              else {
                                                                                                                uint64_t v417 = v438;
                                                                                                              }
                                                                                                              if (v417)
                                                                                                              {
                                                                                                                for (uint64_t i188 = 0;
                                                                                                                      i188 != v417;
                                                                                                                      ++i188)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i188, v15[i188]);
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            else if ((v432 & 1) != 0 && v14 == 1202)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "gcVerticalNoAlignmentDueToMissingSegs");
                                                                                                              if (v438 >= 4) {
                                                                                                                uint64_t v419 = 4;
                                                                                                              }
                                                                                                              else {
                                                                                                                uint64_t v419 = v438;
                                                                                                              }
                                                                                                              if (v419)
                                                                                                              {
                                                                                                                for (uint64_t i189 = 0;
                                                                                                                      i189 != v419;
                                                                                                                      ++i189)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i189, v15[i189]);
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if ((v432 & 2) != 0 && v14 == 1225 || (v432 & 2) != 0 && v14 == 1226 || (v432 & 2) != 0 && v14 == 1227) {
                                                                                                                goto LABEL_81;
                                                                                                              }
                                                                                                              if ((v432 & 1) != 0 && v14 == 1228)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "%20s:\n", "HUPolicyWidthDown");
                                                                                                                if (v438 >= 6) {
                                                                                                                  uint64_t v421 = 6;
                                                                                                                }
                                                                                                                else {
                                                                                                                  uint64_t v421 = v438;
                                                                                                                }
                                                                                                                if (v421)
                                                                                                                {
                                                                                                                  for (uint64_t i190 = 0;
                                                                                                                        i190 != v421;
                                                                                                                        ++i190)
                                                                                                                  {
                                                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i190, v15[i190]);
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                              else if ((v432 & 1) != 0 && v14 == 1229)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "%20s:\n", "HUPolicyWidthUp");
                                                                                                                if (v438 >= 6) {
                                                                                                                  uint64_t v423 = 6;
                                                                                                                }
                                                                                                                else {
                                                                                                                  uint64_t v423 = v438;
                                                                                                                }
                                                                                                                if (v423)
                                                                                                                {
                                                                                                                  for (uint64_t i191 = 0;
                                                                                                                        i191 != v423;
                                                                                                                        ++i191)
                                                                                                                  {
                                                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i191, v15[i191]);
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                if ((v432 & 2) != 0 && v14 == 1230 || (v432 & 2) != 0 && v14 == 1231 || (v432 & 1) != 0 && v14 == 1235 || (v432 & 1) != 0 && v14 == 1236 || (v432 & 1) != 0 && v14 == 1232 || (v432 & 1) != 0 && v14 == 1233 || (v432 & 1) != 0 && v14 == 1234) {
                                                                                                                  goto LABEL_81;
                                                                                                                }
                                                                                                                if ((v432 & 1) != 0 && v14 == 1224)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "apfsValidLbaOvershoot");
                                                                                                                  if (v438 >= 0x14) {
                                                                                                                    uint64_t v425 = 20;
                                                                                                                  }
                                                                                                                  else {
                                                                                                                    uint64_t v425 = v438;
                                                                                                                  }
                                                                                                                  if (v425)
                                                                                                                  {
                                                                                                                    for (uint64_t i192 = 0;
                                                                                                                          i192 != v425;
                                                                                                                          ++i192)
                                                                                                                    {
                                                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i192, v15[i192]);
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                                else if ((v432 & 1) != 0 && v14 == 1241)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "s2rTimeHisto");
                                                                                                                  if (v438 >= 0xA) {
                                                                                                                    uint64_t v427 = 10;
                                                                                                                  }
                                                                                                                  else {
                                                                                                                    uint64_t v427 = v438;
                                                                                                                  }
                                                                                                                  if (v427)
                                                                                                                  {
                                                                                                                    for (uint64_t i193 = 0;
                                                                                                                          i193 != v427;
                                                                                                                          ++i193)
                                                                                                                    {
                                                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i193, v15[i193]);
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  if ((v432 & 2) != 0 && v14 == 1247 || (v432 & 2) != 0 && v14 == 1248 || (v432 & 1) != 0 && v14 == 1254 || (v432 & 1) != 0 && v14 == 1255 || (v432 & 1) != 0 && v14 == 1256) {
                                                                                                                    goto LABEL_81;
                                                                                                                  }
                                                                                                                  if (*(_DWORD *)v435 && v438)
                                                                                                                  {
                                                                                                                    if (v438 == 1)
                                                                                                                    {
                                                                                                                      uint64_t result = fprintf(v8, "                KEY_%u:\t%llu\n");
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      printf("KEY_%u:\n", v14);
                                                                                                                      uint64_t v429 = 0;
                                                                                                                      if (v438 >= 0x100) {
                                                                                                                        uint64_t v430 = 256;
                                                                                                                      }
                                                                                                                      else {
                                                                                                                        uint64_t v430 = v438;
                                                                                                                      }
                                                                                                                      do
                                                                                                                      {
                                                                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", v429, v15[v429]);
                                                                                                                        ++v429;
                                                                                                                      }
                                                                                                                      while (v430 != v429);
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_82:
          unint64_t v10 = v23;
          a4 = v432;
          unsigned int v7 = v22;
          unint64_t v11 = v434;
          goto LABEL_32;
        }
        v116 = "TempSensorMin";
      }
      uint64_t result = fprintf(v8, "%20s:\n", v116);
      if (v438) {
        uint64_t result = fprintf(v8, "                      [%d] = %llu\n");
      }
      goto LABEL_82;
    }
    uint64_t result = fprintf(v8, "%20s:\t%llu\n", "validLbas", *v15);
LABEL_32:
    a2 = &v15[v438];
    a3 = v17 - v438;
    if (!a3) {
      goto LABEL_3133;
    }
  }
  uint64_t result = fwrite("ASPUserClient: maxEl < elements", 0x1FuLL, 1uLL, v8);
LABEL_3133:
  if (v437)
  {
    uint64_t result = fprintf(v8, "%20s:\t%f\n", "WriteAmp", (double)v436 * (double)((v13 * *(_DWORD *)&v435[4]) >> 12) / (double)v437);
    if (v12)
    {
      if (v11) {
        uint64_t result = fprintf(v8, "%20s:\t%f\n", "IntermediateWriteAmp", (double)v12 * (double)((v11 * v13) >> 12) / (double)v437);
      }
    }
  }
  if (v10) {
    uint64_t result = fprintf(v8, "%20s:\t%llu\n", "statsMagCalTime", (v10 >> 24));
  }
LABEL_3139:
  if (v7)
  {
    return fclose(v8);
  }
  return result;
}

uint64_t print_all_stats(char *a1)
{
  return print_asp_magazine_stats(a1, 0, 0);
}

uint64_t print_band_stats(char *a1)
{
  return print_band_stats_v2(a1, 0);
}

uint64_t print_band_stats_v2(char *a1, int a2)
{
  LODWORD(outputStruct) = 0;
  int v4 = sub_10003B140(0, 299, 0, &outputStruct);
  int v5 = outputStruct & 0xF;
  if (!v4) {
    int v5 = 1;
  }
  uint64_t v13 = 0;
  int outputStruct = 0;
  if (v5 != 2)
  {
    if (v5 == 3)
    {
      int v6 = (unsigned int *)sub_10003AE94(0, 297, &v13, 0, 1);
      int outputStruct = v6;
      if (v6)
      {
        unsigned int v7 = v6;
        sub_100038AD0(a1, (uint64_t)v6, v13);
LABEL_12:
        free(v7);
        return 1;
      }
      unint64_t v10 = __stderrp;
      unint64_t v11 = "Error: Cannot Extract Band Stats for ASP3\n";
      size_t v12 = 42;
      goto LABEL_16;
    }
LABEL_10:
    if (sub_10002CD28(7u, &outputStruct, &v13))
    {
      sub_100038EFC(a1, outputStruct, v13, a2);
      unsigned int v7 = outputStruct;
      goto LABEL_12;
    }
    unint64_t v10 = __stderrp;
    unint64_t v11 = "Error: IO NVMe Smart cmd failed to extract ASP excport stats!\n";
    size_t v12 = 62;
    goto LABEL_16;
  }
  if (!a2) {
    goto LABEL_10;
  }
  uint64_t v8 = (unsigned int *)sub_10003AE94(0, 262, &v13, 0, 1);
  int outputStruct = v8;
  if (v8)
  {
    unsigned int v7 = v8;
    sub_100038EFC(a1, v8, v13, 1);
    goto LABEL_12;
  }
  unint64_t v10 = __stderrp;
  unint64_t v11 = "Error: Cannot Extract Band Stats and Validity\n";
  size_t v12 = 46;
LABEL_16:
  fwrite(v11, v12, 1uLL, v10);
  return 0;
}

void sub_100038AD0(char *__filename, uint64_t a2, unsigned int a3)
{
  int v33 = 0;
  uint64_t v32 = 0;
  int v31 = -1;
  uint64_t v30 = -1;
  int v29 = 0;
  uint64_t v28 = 0;
  int v27 = 0;
  uint64_t v26 = 0;
  int v25 = 0;
  uint64_t v24 = 0;
  unint64_t v21 = 0;
  if (__filename)
  {
    int v6 = fopen(__filename, "a");
    if (!v6)
    {
      fprintf(__stderrp, "Unable to open %s\n", __filename);
      return;
    }
  }
  else
  {
    int v6 = __stdoutp;
  }
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    fprintf(__stderrp, "Version mismatch, expected 1 got %d\n");
LABEL_9:
    if (__filename)
    {
      fclose(v6);
    }
    return;
  }
  if (*(_DWORD *)a2 > a3)
  {
    fprintf(__stderrp, "Insufficient size, expected %d got %d\n");
    goto LABEL_9;
  }
  unsigned int v7 = *(_DWORD *)(a2 + 4);
  uint64_t v8 = (unsigned __int16 *)sub_10003AE94(0, 264, &v21, 0, 1);
  if (v8)
  {
    unint64_t v9 = v8;
    if (v21 >= 2 && 21 * (unint64_t)*v8 + 2 <= v21)
    {
      unint64_t v11 = (const char *)&xmmword_1000C8918;
      strcpy((char *)&xmmword_1000C8918, "USER PARTITION");
      strcpy((char *)qword_1000C8936, "INTERMEDIATE PARTITION");
      strcpy(byte_1000C8954, "SKINNY PARTITION");
      fwrite("Band stats:\n", 0xCuLL, 1uLL, v6);
      fwrite("Flags: Bits/Cell (1 or 3), r: retrace, C: GCcan, M: GCmust, S: Special, R: GCrd, E: erased, I: toInvalidate\n", 0x6CuLL, 1uLL, v6);
      int32x2_t v12 = *(int32x2_t *)(a2 + 12);
      __int32 v23 = v12.i32[0];
      int32x2_t v22 = vrev64_s32(v12);
      uint64_t v20 = v9;
      uint64_t v13 = (uint64_t)(v9 + 1);
      int v14 = sub_100039BA8(v6, (unsigned int *)(a2 + 20), v7, 1u, (uint64_t)&v22, (uint64_t)&v24, (uint64_t)&v32, (uint64_t)&v30, (uint64_t)&v28, (uint64_t)&v26, v13);
      int v15 = sub_100039BA8(v6, v14, v7, 0, (uint64_t)&v22, (uint64_t)&v24, (uint64_t)&v32, (uint64_t)&v30, (uint64_t)&v28, (uint64_t)&v26, v13);
      sub_100039BA8(v6, v15, v7, 2u, (uint64_t)&v22, (uint64_t)&v24, (uint64_t)&v32, (uint64_t)&v30, (uint64_t)&v28, (uint64_t)&v26, v13);
      for (unint64_t i = 0; i != 12; i += 4)
      {
        unsigned int v17 = *(_DWORD *)((char *)&v26 + i);
        if (v17)
        {
          int v18 = *(_DWORD *)((char *)&v28 + i) / v17;
          *(_DWORD *)((char *)&v28 + i) = v18;
          unsigned __int32 v19 = v22.u32[i / 4];
          fprintf(v6, "%-23s: Erase Cycles: Max(%d, %d%% of EoL) Min(%d, %d%% of EoL) Avg(%d, %d%% of EoL)\n", v11, *(_DWORD *)((char *)&v32 + i), 100 * *(_DWORD *)((char *)&v32 + i) / v19, *(_DWORD *)((char *)&v30 + i), 100 * *(_DWORD *)((char *)&v30 + i) / v19, v18, 100 * v18 / v19);
          fprintf(v6, "%24s Max band age:    (%d)\n", " ", *(_DWORD *)((char *)&v24 + i));
          fprintf(v6, "%24s EoL erase cycles:(%d)\n", " ", v19);
        }
        v11 += 30;
      }
      if (__filename) {
        fclose(v6);
      }
      unint64_t v10 = v20;
    }
    else
    {
      fwrite("Flow list too small", 0x13uLL, 1uLL, __stderrp);
      if (__filename) {
        fclose(v6);
      }
      unint64_t v10 = v9;
    }
    free(v10);
  }
  else
  {
    fwrite("Can't get flow list", 0x13uLL, 1uLL, __stderrp);
    if (__filename) {
      fclose(v6);
    }
  }
}

void sub_100038EFC(char *__filename, unsigned int *a2, unsigned int a3, int a4)
{
  int v101 = 0;
  uint64_t v100 = 0;
  int v99 = -1;
  uint64_t v98 = -1;
  int v97 = 0;
  uint64_t v96 = 0;
  int v95 = 0;
  uint64_t v94 = 0;
  memset(v89, 0, sizeof(v89));
  v90[0] = 0;
  if (__filename)
  {
    unsigned int v7 = fopen(__filename, "a");
    if (!v7)
    {
      fprintf(__stderrp, "Unable to open %s\n", __filename);
      return;
    }
  }
  else
  {
    unsigned int v7 = __stdoutp;
  }
  fwrite("Band stats:\n", 0xCuLL, 1uLL, v7);
  fwrite("===========\n", 0xCuLL, 1uLL, v7);
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  fprintf(v7, "numBands: %d\n", *a2);
  if (a4) {
    int v10 = 8;
  }
  else {
    int v10 = 5;
  }
  if (v9)
  {
    unsigned int v11 = v9 * v10 + 2 * v8 + 2;
    if (v11 <= a3)
    {
      int v12 = v11 + v8;
      unsigned int v13 = a3 >> 2;
      uint64_t v14 = (uint64_t)&a2[v11 + 2];
      int v15 = (int *)&a2[v11];
      if (a3 >> 2 == v12) {
        unint64_t v16 = v15;
      }
      else {
        unint64_t v16 = 0;
      }
      if (v8 == 2)
      {
        unsigned int v18 = a2[2];
        unsigned int v20 = a2[3];
        v93[0] = v18;
        v92[0] = v20;
        if (v13 == v12) {
          int v21 = *v15;
        }
        else {
          int v21 = 30000;
        }
        LODWORD(v91[0]) = v21;
        strcpy((char *)&xmmword_1000C8918, "INTERMEDIATE PARTITION");
        unsigned int v22 = a2[5];
        v93[1] = a2[4];
        unsigned __int32 v19 = a2 + 6;
        v92[1] = v22;
        if (v13 == v12) {
          int v23 = *(_DWORD *)(v14 - 4);
        }
        else {
          int v23 = 750;
        }
        HIDWORD(v91[0]) = v23;
        strcpy((char *)qword_1000C8936, "USER PARTITION");
        if (!v21 || !v23)
        {
          unint64_t v16 = 0;
          v91[0] = 0x2EE00007530;
        }
      }
      else
      {
        if (v8 != 1)
        {
          fprintf(v7, "ASP returned %d partitions, the tool does not know how to handle this many partitions\n");
          goto LABEL_69;
        }
        unsigned int v18 = a2[2];
        unsigned int v17 = a2[3];
        v93[0] = v18;
        unsigned __int32 v19 = a2 + 4;
        v92[0] = v17;
        if (v13 == v12)
        {
          LODWORD(v91[0]) = *v15;
          strcpy((char *)&xmmword_1000C8918, "USER PARTITION");
          if (LODWORD(v91[0]))
          {
            unint64_t v16 = v15;
          }
          else
          {
            unint64_t v16 = 0;
            LODWORD(v91[0]) = 3000;
          }
        }
        else
        {
          unint64_t v16 = 0;
          LODWORD(v91[0]) = 3000;
          strcpy((char *)&xmmword_1000C8918, "USER PARTITION");
        }
      }
      v83 = malloc_type_malloc(4 * v9, 0x100004052888210uLL);
      if (v83)
      {
        uint64_t v72 = v16;
        v73 = __filename;
        __streauint64_t m = v7;
        unint64_t v24 = 0;
        int v78 = 0;
        int v79 = 0;
        int v80 = 0;
        uint64_t v81 = v9;
        while (1)
        {
          if (a4)
          {
            int v80 = v19[5];
            int v79 = v19[6];
            v87 = v19 + 8;
            int v78 = v19[7];
          }
          else
          {
            v87 = v19 + 5;
          }
          uint64_t v25 = 0;
          unsigned int v26 = *v19;
          int v27 = v19[1];
          unsigned int v28 = v19[2];
          unsigned int v29 = v19[3];
          int v30 = (*v19 >> 1) & 1;
          int v31 = (*v19 >> 2) & 1;
          int v32 = (*v19 >> 3) & 1;
          unsigned int v33 = v19[4];
          int v34 = v26 & 1;
          int v35 = (v26 >> 4) & 3;
          v83[v24] = v29;
          uint64_t v36 = (const char *)&xmmword_1000C8918;
          do
          {
            unint64_t v37 = v93[v25];
            if (v24 >= v37 && v24 <= v92[v25])
            {
              if (v24 == v37)
              {
                int v75 = v27;
                int v76 = v31;
                int v77 = v30;
                int v74 = v35;
                fprintf(__stream, "\n%s:\n", v36);
                int v35 = v74;
                int v27 = v75;
                int v31 = v76;
                int v30 = v77;
              }
              if (v24 >= v18)
              {
                unsigned int v39 = *((_DWORD *)&v94 + v25);
                if (v39 <= v33) {
                  unsigned int v39 = v33;
                }
                *((_DWORD *)&v94 + v25) = v39;
                unsigned int v40 = *((_DWORD *)&v100 + v25);
                if (v40 <= v29) {
                  unsigned int v40 = v29;
                }
                *((_DWORD *)&v100 + v25) = v40;
                unsigned int v41 = *((_DWORD *)&v98 + v25);
                if (v41 >= v29) {
                  unsigned int v41 = v29;
                }
                *((_DWORD *)&v98 + v25) = v41;
                uint64_t v38 = v25;
                *((_DWORD *)&v96 + v25) += v29;
                goto LABEL_52;
              }
LABEL_44:
              fprintf(__stream, "band: %4d\tUtility Band\n", v24);
              goto LABEL_58;
            }
            ++v25;
            v36 += 30;
          }
          while (v8 != v25);
          if (v24 < v18) {
            goto LABEL_44;
          }
          uint64_t v38 = 0;
LABEL_52:
          unsigned int v42 = 100 * v29;
          if (v28 == -1)
          {
            v43 = __stream;
            fprintf(__stream, "band:%4d\tflow:%2d\tvalid:    NA\terases:%5d [%3d%%] \tage:%5d\tGCcan:%d GCmust:%d GCrd: %d Special: %d mode:%d ", v24, v27, v29, v42 / *((_DWORD *)v91 + v38), v33, v34, v30, v31, v32, v35);
            if (a4) {
              fwrite("Valid Sectors: NA Parity Sectors: NA Total Sectors: NA", 0x36uLL, 1uLL, __stream);
            }
          }
          else
          {
            double v71 = (float)v28 / 10.0;
            v43 = __stream;
            fprintf(__stream, "band:%4d\tflow:%2d\tvalid:%6.1f\terases:%5d [%3d%%] \tage:%5d\tGCcan:%d GCmust:%d GCrd: %d Special: %d mode:%d ", v24, v27, v71, v29, v42 / *((_DWORD *)v91 + v38), v33, v34, v30, v31, v32, v35);
            if (a4) {
              fprintf(__stream, "Valid Sectors: %d Parity Sectors: %d Total Sectors: %d", v79, v78, v80);
            }
          }
          fputc(10, v43);
LABEL_58:
          unsigned __int32 v19 = v87;
          if (++v24 == v81)
          {
            uint64_t v44 = "";
            if (!v72) {
              uint64_t v44 = "*using kASPNand constants!";
            }
            uint64_t v82 = v44;
            v45 = v92;
            uint64_t v46 = v93;
            id v47 = (unsigned int *)&v96;
            uint64_t v48 = (const char *)&xmmword_1000C8918;
            id v49 = &v100;
            uint64_t v50 = (unsigned int *)v91;
            v51 = &v98;
            uint64_t v52 = &v94;
            uint64_t v53 = v8;
            do
            {
              unsigned int v55 = *v45++;
              unsigned int v54 = v55;
              unsigned int v56 = *v46++;
              BOOL v57 = v54 >= v56;
              unsigned int v58 = v54 - v56;
              if (v57)
              {
                unsigned int v59 = *v47 / (v58 + 1);
                *id v47 = v59;
                uint64_t v86 = v46;
                uint64_t v88 = v45;
                unsigned int v60 = *v50;
                fprintf(__stream, "%-23s: Erase Cycles: Max(%d, %d%% of EoL) Min(%d, %d%% of EoL) Avg(%d, %d%% of EoL)\n", v48, *(_DWORD *)v49, 100 * *(_DWORD *)v49 / v60, *(_DWORD *)v51, 100 * *(_DWORD *)v51 / v60, v59, 100 * v59 / v60);
                fprintf(__stream, "%24s Max band age:    (%d)\n", " ", *(_DWORD *)v52);
                fprintf(__stream, "%24s EoL erase cycles:(%d) %s\n", " ", v60, v82);
                uint64_t v46 = v86;
                v45 = v88;
              }
              ++v47;
              v48 += 30;
              id v49 = (uint64_t *)((char *)v49 + 4);
              ++v50;
              v51 = (uint64_t *)((char *)v51 + 4);
              uint64_t v52 = (uint64_t *)((char *)v52 + 4);
              --v53;
            }
            while (v53);
            BOOL v61 = v8 != 1;
            unsigned int v62 = v93[v61];
            unsigned int v63 = v92[v61];
            if (v62 <= v63)
            {
              float v67 = (float)*(unsigned int *)((unint64_t)&v100 | (4 * v61));
              v65 = v73;
              uint64_t v66 = __stream;
              do
              {
                uint64_t v68 = &dword_100000018;
                while ((float)(*(float *)((char *)&unk_1000C7D80 + v68) * v67) > (float)v83[v62])
                {
                  v68 -= 4;
                  if (v68 == -4) {
                    goto LABEL_80;
                  }
                }
                ++*(_DWORD *)((char *)v89 + v68);
LABEL_80:
                ++v62;
              }
              while (v62 <= v63);
              int v64 = v90[0];
            }
            else
            {
              int v64 = 0;
              v65 = v73;
              uint64_t v66 = __stream;
            }
            fwrite("USER PARTITION:\n", 0x10uLL, 1uLL, v66);
            unint64_t v69 = 0;
            uint64_t v70 = (unsigned int *)((unint64_t)&v100 | (4 * v61));
            do
            {
              if (v69) {
                fprintf(v66, "Erase Quantile [  %3.2f (%.2f - %.2f erases) ] = %d bands\n", *(float *)((char *)&unk_1000C7D80 + v69 + 24) * 100.0, (float)(*(float *)((char *)&unk_1000C7D80 + v69 + 24) * (float)*v70), (float)(*(float *)((char *)&unk_1000C7D80 + v69 + 28) * (float)*v70), v90[v69 / 4]);
              }
              else {
                fprintf(v66, "Erase Quantile [  %3.2f (%.2f - %.2f erases) ] = %d bands\n", *(float *)&dword_1000C7D98 * 100.0, (float)(*(float *)&dword_1000C7D98 * (float)*v70), (float)(*(float *)&dword_1000C7D98 * (float)*v70), v64);
              }
              v69 -= 4;
            }
            while (v69 != -28);
            if (v65) {
              fclose(v66);
            }
            free(v83);
            return;
          }
        }
      }
      fprintf(v7, "could not allocate %d bytes\n");
LABEL_69:
      if (__filename)
      {
        fclose(v7);
      }
    }
  }
}

uint64_t sub_1000397B8(char *a1, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v9 = 0;
  int v10 = 0;
  if (sub_10002CD28(8u, &v10, &v9))
  {
    if (a2) {
      *a3 = sub_10003986C(a1, (uint64_t)v10, 1, a4);
    }
    else {
      sub_10003986C(a1, (uint64_t)v10, 0, a4);
    }
    free(v10);
    return 1;
  }
  else
  {
    fwrite("Error: IO NVMe Smart cmd failed to extract ASP NAND defects!\n", 0x3DuLL, 1uLL, __stderrp);
    return 0;
  }
}

uint64_t sub_10003986C(char *__filename, uint64_t a2, char a3, uint64_t a4)
{
  strcpy(v29, "InvalidPage");
  strcpy(v28, "InvalidTemp");
  strcpy(v26, "Unknown");
  int v27 = 0;
  if (__filename)
  {
    __streauint64_t m = fopen(__filename, "a");
    if (!__stream)
    {
      fprintf(__stderrp, "Unable to open %s\n", __filename);
      return 0;
    }
  }
  else
  {
    __streauint64_t m = __stdoutp;
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (a3) {
    goto LABEL_10;
  }
  uint64_t v9 = (unsigned __int16 *)(a2 + 12);
  if (a4)
  {
    if (v8)
    {
      int v10 = (_DWORD *)(a4 + 16);
      uint64_t v11 = *(unsigned int *)(a2 + 8);
      do
      {
        *(v10 - 4) = *(_DWORD *)v9;
        *(v10 - 3) = *((_DWORD *)v9 + 1);
        *(v10 - 2) = *((_DWORD *)v9 + 2);
        *(v10 - 1) = *((_DWORD *)v9 + 3);
        *int v10 = *((_DWORD *)v9 + 4);
        v10[1] = *((_DWORD *)v9 + 5);
        v10[2] = *((_DWORD *)v9 + 6);
        v10[3] = *((_DWORD *)v9 + 7);
        v10 += 8;
        v9 += 16;
        --v11;
      }
      while (v11);
    }
LABEL_10:
    if (!__filename) {
      return v8;
    }
LABEL_11:
    fclose(__stream);
    return v8;
  }
  int v22 = *(_DWORD *)(a2 + 4);
  int v23 = __filename;
  fwrite("===Grown Bad Blocks===\n", 0x17uLL, 1uLL, __stream);
  uint64_t v24 = v8;
  if (v8)
  {
    int v13 = v8;
    do
    {
      int v14 = *v9;
      int v15 = v9[1];
      int v17 = *((_DWORD *)v9 + 1);
      int v16 = *((_DWORD *)v9 + 2);
      int v18 = *((_DWORD *)v9 + 6);
      uint64_t v19 = *((int *)v9 + 7);
      int v21 = *((_DWORD *)v9 + 3);
      int v20 = *((_DWORD *)v9 + 4);
      if (*((_DWORD *)v9 + 5) == 4095) {
        __sprintf_chk(v29, 0, 0xCuLL, "%s");
      }
      else {
        __sprintf_chk(v29, 0, 0xCuLL, "%u");
      }
      if (v18 << 24 == -2130706432) {
        __sprintf_chk(v28, 0, 0xCuLL, "%s");
      }
      else {
        __sprintf_chk(v28, 0, 0xCuLL, "%d");
      }
      if (v19 <= 3) {
        __sprintf_chk(v26, 0, 0xCuLL, "%s", off_100090B20[v19]);
      }
      fprintf(__stream, "Bus: %u CE: %u CAU: %u Block: %u Cycles: %u Reason: %u Page: %s Temp: %s mode: %s\n", v14, v15, v17, v16, v21, v20, v29, v28, v26);
      v9 += 16;
      --v13;
    }
    while (v13);
  }
  uint64_t v8 = v24;
  fprintf(__stream, "Grown Bad Blocks Count: %u\n", v24);
  fprintf(__stream, "Factory Bad Blocks Count: %u\n", v22);
  if (v23) {
    goto LABEL_11;
  }
  return v8;
}

uint64_t print_grown_defects_ext(char *a1)
{
  return sub_1000397B8(a1, 0, 0, 0);
}

unsigned int *sub_100039BA8(FILE *__stream, unsigned int *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = a2;
  int v12 = __stream;
  unsigned int v13 = *a2;
  if (a4 == HIBYTE(*a2))
  {
    uint64_t v11 = a2 + 1;
    int v14 = v13 & 0xFFFFFF;
    if ((v13 & 0xFFFFFF) != 0)
    {
      uint64_t v16 = a11;
      uint64_t v17 = a4;
      fprintf(__stream, "==== %s ====\n", (const char *)&xmmword_1000C8918 + 30 * a4);
      fprintf(v12, "\t%d bands\n", v14);
      int v18 = 0;
      unsigned int v54 = v12;
      int v47 = v14;
      do
      {
        unsigned int v51 = v11[3];
        unsigned int v20 = v11[4];
        int v19 = v11[5];
        int v21 = v12;
        unsigned int v22 = v11[1];
        uint64_t v23 = 73;
        uint64_t v24 = 45;
        if ((v22 & 0x40) == 0) {
          uint64_t v23 = 45;
        }
        uint64_t v46 = v23;
        uint64_t v25 = 114;
        if ((v22 & 0x100) == 0) {
          uint64_t v25 = 45;
        }
        uint64_t v26 = 67;
        if ((v22 & 1) == 0) {
          uint64_t v26 = 45;
        }
        uint64_t v27 = 77;
        if ((v22 & 2) == 0) {
          uint64_t v27 = 45;
        }
        uint64_t v28 = 82;
        if ((v22 & 4) == 0) {
          uint64_t v28 = 45;
        }
        uint64_t v29 = 83;
        if ((v22 & 8) == 0) {
          uint64_t v29 = 45;
        }
        if ((v22 & 0x10) != 0) {
          uint64_t v24 = 69;
        }
        uint64_t v45 = v25;
        uint64_t v30 = 49;
        if ((v22 & 0x10) == 0) {
          uint64_t v30 = 51;
        }
        fprintf(v21, "Band:%4d  Flow:%s [%d]  Flags:%c%c%c%c%c%c%c%c  ", *v11, (const char *)(v16 + 21 * v11[2]), v11[2], v30, v45, v26, v27, v28, v29, v24, v46);
        if (v51 == -1 || !v20) {
          fwrite("Valid Sectors: NA   Total Sectors: NA  ", 0x27uLL, 1uLL, v54);
        }
        else {
          fprintf(v54, "Valid Sectors: %5d  Total Sectors: %5d [%d%%]  ", v19, v20, 100 * v19 / v20);
        }
        int v52 = v18;
        unsigned int v31 = v11[6];
        if ((v22 & 0x80) != 0)
        {
          v11 += 7;
          if (v31)
          {
            do
            {
              unsigned int v37 = *v11;
              unsigned int v38 = v11[1];
              unsigned int v39 = v11[2];
              unsigned int v40 = *(_DWORD *)(a6 + 4 * v17);
              if (v40 <= v39) {
                unsigned int v40 = v11[2];
              }
              *(_DWORD *)(a6 + 4 * v17) = v40;
              unsigned int v41 = *(_DWORD *)(a7 + 4 * v17);
              if (v41 <= v38) {
                unsigned int v41 = v38;
              }
              *(_DWORD *)(a7 + 4 * v17) = v41;
              unsigned int v42 = *(_DWORD *)(a8 + 4 * v17);
              if (v42 >= v38) {
                unsigned int v42 = v38;
              }
              *(_DWORD *)(a8 + 4 * v17) = v42;
              *(_DWORD *)(a9 + 4 * v17) += v38;
              v43 = v11 + 3;
              ++*(_DWORD *)(a10 + 4 * v17);
              fprintf(v54, "\n\tBlock:%4d [Bork:%4d Dip: %4d Age:%5d Cycles:%5d EOL%%:%3d]", v37, v37 / a3, v37 % a3, v39, v38, 100 * v38 / *(_DWORD *)(a5 + 4 * v17));
              v11 += 3;
              --v31;
            }
            while (v31);
            uint64_t v11 = v43;
            int v12 = v54;
            uint64_t v16 = a11;
            int v14 = v47;
          }
          else
          {
            int v12 = v54;
          }
        }
        else
        {
          int v32 = v11 + 8;
          unsigned int v33 = v11[7];
          fprintf(v54, "Age:%5d Cycles:%5d EOL%%:%3d\n", v33, v31, 100 * v31 / *(_DWORD *)(a5 + 4 * v17));
          unsigned int v34 = *(_DWORD *)(a6 + 4 * v17);
          if (v34 <= v33) {
            unsigned int v34 = v33;
          }
          *(_DWORD *)(a6 + 4 * v17) = v34;
          unsigned int v35 = *(_DWORD *)(a7 + 4 * v17);
          if (v35 <= v31) {
            unsigned int v35 = v31;
          }
          *(_DWORD *)(a7 + 4 * v17) = v35;
          unsigned int v36 = *(_DWORD *)(a8 + 4 * v17);
          if (v36 >= v31) {
            unsigned int v36 = v31;
          }
          *(_DWORD *)(a8 + 4 * v17) = v36;
          *(_DWORD *)(a9 + 4 * v17) += v31;
          ++*(_DWORD *)(a10 + 4 * v17);
          uint64_t v11 = v32;
          int v12 = v54;
        }
        fputc(10, v12);
        ++v18;
      }
      while (v52 + 1 != v14);
      fputc(10, v12);
    }
  }
  else
  {
    fwrite("Error parsing! missing header", 0x1DuLL, 1uLL, __stream);
  }
  return v11;
}

BOOL sub_100039F24(char **a1, int a2, void *a3, size_t a4, char a5)
{
  size_t v11 = 0;
  unsigned int v7 = sub_10003AAE8(a1, a2, 0, 0, &v11, 0, a5);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  BOOL v9 = v11 >= a4;
  if (v11 >= a4) {
    memcpy(a3, v7, a4);
  }
  free(v8);
  return v9;
}

BOOL sub_100039FB0(char **a1, uint64_t a2)
{
  BOOL v4 = 1;
  if (!sub_100039F24(a1, 186, (void *)a2, 0x180uLL, 1))
  {
    *(_OWORD *)__c = 0u;
    memset(v23, 0, 56);
    BOOL v4 = sub_100039F24(a1, 55, __c, 0x48uLL, 0);
    if (v4)
    {
      *(_OWORD *)(a2 + 352) = 0u;
      *(_OWORD *)(a2 + 368) = 0u;
      *(_OWORD *)(a2 + 320) = 0u;
      *(_OWORD *)(a2 + 336) = 0u;
      *(_OWORD *)(a2 + 288) = 0u;
      *(_OWORD *)(a2 + 304) = 0u;
      *(_OWORD *)(a2 + 256) = 0u;
      *(_OWORD *)(a2 + 272) = 0u;
      *(_OWORD *)(a2 + 224) = 0u;
      *(_OWORD *)(a2 + 240) = 0u;
      *(_OWORD *)(a2 + 192) = 0u;
      *(_OWORD *)(a2 + 208) = 0u;
      *(_OWORD *)(a2 + 160) = 0u;
      *(_OWORD *)(a2 + 176) = 0u;
      *(_OWORD *)(a2 + 128) = 0u;
      *(_OWORD *)(a2 + 144) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 80) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_DWORD *)a2 = 1;
      uint64_t v5 = *(void *)&__c[1];
      unsigned int v6 = v23[0];
      *(void *)&long long v7 = *(void *)&__c[1];
      *((void *)&v7 + 1) = *(void *)&v23[0];
      *(_OWORD *)(a2 + 4) = v7;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)((char *)v23 + 8);
      *(_OWORD *)(a2 + 36) = *(_OWORD *)((char *)&v23[1] + 8);
      *(_OWORD *)(a2 + 52) = *(_OWORD *)((char *)&v23[2] + 8);
      *(void *)(a2 + 72) = 0;
      *(_DWORD *)(a2 + 68) = 0;
      uint64_t v8 = HIDWORD(v5);
      if (HIDWORD(v5) >= 2)
      {
        uint64_t v9 = 0;
        do
        {
          *(unsigned char *)(a2 + 80 + v9) = 2 * v9;
          ++v9;
        }
        while (HIDWORD(v5) >> 1 != v9);
        unint64_t v10 = 0;
        do
        {
          *(unsigned char *)(a2 + 112 + v10) = v10 >> 1;
          ++v10;
        }
        while (HIDWORD(v5) != v10);
      }
      if (HIDWORD(v5))
      {
        int v20 = v5;
        unsigned int v21 = v6;
        memset((void *)(a2 + 96), __c[3], HIDWORD(v5));
        LODWORD(v5) = v20;
        unsigned int v6 = v21;
      }
      if (v5 <= v6)
      {
        unint64_t v11 = 0;
        int v12 = 0;
        LODWORD(v13) = v6 / v5;
        if (v6 / v5 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v13;
        }
        int v14 = (unsigned char *)(a2 + 128);
        do
        {
          uint64_t v15 = v8;
          uint64_t v16 = v14;
          uint64_t v17 = (unsigned __int8 *)(a2 + 96);
          if (v8)
          {
            do
            {
              unsigned int v18 = *v17++;
              if (v11 < v18) {
                *uint64_t v16 = v12++;
              }
              v16 += 16;
              --v15;
            }
            while (v15);
          }
          ++v11;
          ++v14;
        }
        while (v11 != v13);
      }
    }
  }
  return v4;
}

BOOL sub_10003A17C(char **a1, char *a2, uint64_t a3)
{
  BOOL v6 = 1;
  if (!sub_100039F24(a1, 187, a2, 0x28uLL, 1))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    BOOL v6 = sub_100039F24(a1, 158, &v9, 0x20uLL, 0);
    if (v6)
    {
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      *((void *)a2 + 4) = 0;
      *(_DWORD *)a2 = 1;
      *(_OWORD *)(a2 + 4) = v9;
      *(void *)(a2 + 20) = v10;
      *((_DWORD *)a2 + 7) = HIDWORD(v10);
      int v7 = *(unsigned __int8 *)(a3 + 96);
      *((_DWORD *)a2 + 8) = v7;
      *((_DWORD *)a2 + 9) = v7 << (*(_DWORD *)(a3 + 8) > 1u);
    }
  }
  return v6;
}

BOOL print_geometry(char *__filename)
{
  if (__filename)
  {
    id v2 = fopen(__filename, "a");
    if (!v2)
    {
      fprintf(__stderrp, "Unable to open %s\n", __filename);
      return 0;
    }
  }
  else
  {
    id v2 = __stdoutp;
  }
  memset(v19, 0, sizeof(v19));
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  BOOL result = sub_100039FB0(0, (uint64_t)&v13);
  if (result)
  {
    BOOL result = sub_10003A17C(0, (char *)&v10, (uint64_t)&v13);
    if (result)
    {
      fwrite("===NAND Geometry===\n", 0x14uLL, 1uLL, v2);
      fprintf(v2, "cau_per_die: %d\n", DWORD1(v13));
      fprintf(v2, "num_bus: %d\n", DWORD2(v13));
      uint64_t v4 = 0;
      int v5 = 0;
      int v6 = -1;
      do
      {
        int v7 = (char *)&v13 + v4;
        int v8 = *((unsigned __int8 *)v19 + v4);
        if (!*((unsigned char *)v19 + v4)) {
          break;
        }
        int v9 = v7[112];
        if (v6 != v9)
        {
          fprintf(v2, "MSP %d:\n", v7[112]);
          int v5 = 0;
          int v8 = v7[96];
          int v6 = v9;
        }
        fprintf(v2, "   Dies in Ch %d: %d\n", v5++, v8);
        ++v4;
      }
      while (v4 != 16);
      fprintf(v2, "num_dip: %d\n", HIDWORD(v13));
      fprintf(v2, "num_bands: %d\n", v14);
      fprintf(v2, "sec_per_page: %d\n", DWORD1(v14));
      fprintf(v2, "sec_per_full_band: %d\n", DWORD2(v14));
      fprintf(v2, "sec_per_full_band_slc: %d\n", HIDWORD(v14));
      fprintf(v2, "bytes_per_sec_meta: %d\n", v15);
      fprintf(v2, "pages_per_block: %d\n", DWORD1(v15));
      fprintf(v2, "pages_per_block_slc: %d\n", DWORD2(v15));
      fprintf(v2, "pages_per_block0: %d\n", HIDWORD(v15));
      fprintf(v2, "cell_type: %d\n", v16);
      fprintf(v2, "pages_in_read_verify: %d\n", DWORD1(v16));
      fprintf(v2, "eol_blocks: %d\n", DWORD2(v16));
      fprintf(v2, "block_pairing_scheme: %d\n", HIDWORD(v16));
      fprintf(v2, "sec_per_die_multiplane : %d\n", DWORD2(v10));
      fprintf(v2, "num_die : %d\n", v11);
      fprintf(v2, "sol_eol_per_die : %d\n", DWORD1(v11));
      fprintf(v2, "technology : %d\n", HIDWORD(v11));
      fprintf(v2, "max_tlc_gbb : %d\n", DWORD2(v11));
      if (__filename) {
        fclose(v2);
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_10003A5E4(const char *a1)
{
  uint64_t v16 = 0;
  v22[0] = unk_10008A32C;
  strcpy((char *)v22 + 11, "_ERR_PAYLOAD   ");
  strcpy(v21, "NAND_GEOM_ERR_BLOCK_INFO");
  qmemcpy(&v21[25], "NAND_GEOM_ERR_HEADER   ", 23);
  strcpy(v19, "NAND_GEOM_ERR_UNC     ");
  strcpy(v20, "NAND_GEOM_ERR_REFRESH ");
  strcpy(v17, "NAND_GEOM_ERR_NO_ERROR");
  strcpy(v18, "NAND_GEOM_ERR_BLANK   ");
  uint64_t result = (uint64_t)sub_10003AE94(0, 255, &v16, 0, 1);
  if (result)
  {
    uint64_t v3 = (unsigned __int16 *)result;
    if (a1)
    {
      uint64_t v4 = fopen(a1, "a");
      if (!v4)
      {
        fprintf(__stderrp, "Unable to open %s\n", a1);
        return 0;
      }
    }
    else
    {
      uint64_t v4 = __stdoutp;
    }
    long long v14 = v3;
    int v5 = *(_DWORD *)v3;
    fprintf(v4, "num of errors in log: %d\n", v5);
    fwrite("======================\n", 0x17uLL, 1uLL, v4);
    if (v5)
    {
      int v6 = v14 + 2;
      do
      {
        fprintf(v4, "type: %s, length: %d\n", &v21[25 * *v6], v6[1]);
        fprintf(v4, "type: %s, length: %d\n", &v21[25 * v6[2]], v6[3]);
        fwrite("===========new error==============\n", 0x23uLL, 1uLL, v4);
        fprintf(v4, "MSP: %d\n", *((_DWORD *)v6 + 2) & 0xF);
        fprintf(v4, "channel: %d\n", (*((_DWORD *)v6 + 2) >> 4) & 1);
        fprintf(v4, "die: %d\n", (*((_DWORD *)v6 + 2) >> 5) & 0xF);
        fprintf(v4, "plane: %d\n", (*((_DWORD *)v6 + 2) >> 9) & 7);
        fprintf(v4, "block: %d\n", (*((_DWORD *)v6 + 2) >> 12) & 0x7FFF);
        fprintf(v4, "reason: %d\n", *((_DWORD *)v6 + 2) >> 27);
        fprintf(v4, "failPage: %d\n", *(unsigned __int16 *)((char *)v6 + 13));
        fprintf(v4, "numOfPages: %d\n", *(unsigned __int16 *)((char *)v6 + 15));
        fprintf(v4, "blockMode: %d\n", *((unsigned __int8 *)v6 + 17));
        fprintf(v4, "isReliabilty: %d\n", (*((unsigned __int8 *)v6 + 12) >> 1) & 1);
        unsigned int v7 = *((unsigned __int8 *)v6 + 12);
        int v15 = v5;
        if (v7 >> 4)
        {
          fprintf(v4, "cycles: %d\n", *(_DWORD *)((char *)v6 + 25));
          fprintf(v4, "age: %d\n", *(_DWORD *)((char *)v6 + 29));
          fprintf(v4, "timeStamp: %d\n", *(_DWORD *)((char *)v6 + 33));
          fprintf(v4, "readDisturbCounter: %d\n", *(unsigned __int16 *)((char *)v6 + 69));
          fprintf(v4, "flow: %d\n", *((unsigned __int8 *)v6 + 71));
          fprintf(v4, "minTemp: %d\n", *((unsigned __int8 *)v6 + 72));
          fprintf(v4, "maxTemp: %d\n", *((unsigned __int8 *)v6 + 73));
          unsigned int v8 = *((unsigned __int8 *)v6 + 12) >> 2;
        }
        else
        {
          unsigned int v8 = v7 >> 2;
        }
        if (v8 >= 3)
        {
          fprintf(v4, "numScannedPages: %d\n", v6[10]);
          fprintf(v4, "numFailures: %d\n", v6[11]);
        }
        int v9 = *(unsigned __int16 *)((char *)v6 + 15);
        long long v10 = (unsigned __int16 *)((char *)v6 + v6[3] + 8);
        fprintf(v4, "type: %s, length: %d\n", &v21[25 * *v10], v10[1]);
        fwrite("============page status===========\n", 0x23uLL, 1uLL, v4);
        if (v9)
        {
          int v11 = 0;
          unsigned int v12 = 0;
          long long v13 = v10 + 2;
          do
          {
            fprintf(v4, "page: %d, status: 0x%x, (%s)\n", v12, ((3 << (v11 & 6)) & *((unsigned __int8 *)v13 + ((unint64_t)v12 >> 2))) >> (v11 & 6), &v17[23* (((3 << (v11 & 6)) & *((unsigned __int8 *)v13 + ((unint64_t)v12 >> 2))) >> (v11 & 6))]);
            ++v12;
            v11 += 2;
          }
          while (v9 != v12);
        }
        int v6 = (unsigned __int16 *)((char *)v6 + v6[1] + 4);
        int v5 = v15 - 1;
        fwrite("======================\n", 0x17uLL, 1uLL, v4);
        fwrite("======================\n", 0x17uLL, 1uLL, v4);
      }
      while (v15 != 1);
    }
    free(v14);
    if (__stdoutp != v4) {
      fclose(v4);
    }
    return 1;
  }
  return result;
}

void *sub_10003AAE8(char **a1, int a2, int a3, int a4, void *a5, char a6, char a7)
{
  long long v13 = a1;
  unsigned int v21 = 0;
  *a5 = 0;
  if (!a1 && (!sub_10003B2C4(&v21) || (long long v13 = v21) == 0 || !*((_DWORD *)v21 + 4)))
  {
    fwrite("Err: Finding internal NAND exporter failed for fetch tunnel buffer.\n", 0x44uLL, 1uLL, __stderrp);
LABEL_11:
    int v19 = 0;
    goto LABEL_14;
  }
  int v14 = a3;
  unsigned int v15 = sub_10003AC90((uint64_t)v13, a2, a3, a4, a7);
  if (!v15)
  {
    fprintf(__stderrp, "failed to get data size for cmd option %d\n", a2);
    goto LABEL_11;
  }
  uint64_t v16 = v15;
  size_t v17 = (vm_page_size + v15 - 1) / vm_page_size * vm_page_size;
  long long v18 = malloc_type_valloc(v17, 0x7C7CDE6BuLL);
  int v19 = v18;
  if (v18)
  {
    bzero(v18, v17);
    if (sub_10003AD58((uint64_t)v13, a2, v14, a4, v19, v17, a6, a7))
    {
      *a5 = v16;
    }
    else
    {
      free(v19);
      int v19 = 0;
      *a5 = 0;
    }
  }
  else
  {
    fwrite("can't allocate buffer!\n", 0x17uLL, 1uLL, __stderrp);
  }
LABEL_14:
  if (v21) {
    sub_10003B410((uint64_t)v21);
  }
  return v19;
}

uint64_t sub_10003AC90(uint64_t a1, int a2, int a3, int a4, char a5)
{
  kern_return_t v7;
  uint64_t result;
  size_t outputStructCnt;
  unsigned int outputStruct;
  _DWORD inputStruct[3];
  uint64_t v12;
  int v13;

  long long v13 = 0;
  unsigned int v12 = 0;
  int outputStruct = 0;
  inputStruct[0] = a2;
  outputStructCnt = 4;
  inputStruct[2] = a4;
  inputStruct[1] = a3 | 1;
  unsigned int v7 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 28), inputStruct, 0x18uLL, &outputStruct, &outputStructCnt);
  if (v7)
  {
    if ((a5 & 1) == 0) {
      fprintf(__stderrp, "Error calling CoreDebugTunnel method! - 0x%X\n", v7);
    }
    return 0;
  }
  else
  {
    uint64_t result = outputStruct;
    if (!outputStruct && (a5 & 1) == 0)
    {
      fprintf(__stderrp, "SizeOnly for tunnel command 0x%x returned 0\n", a2);
      return outputStruct;
    }
  }
  return result;
}

uint64_t sub_10003AD58(uint64_t a1, int a2, int a3, int a4, void *outputStruct, size_t a6, char a7, char a8)
{
  kern_return_t v15;
  size_t v16;
  _DWORD inputStruct[3];
  uint64_t v19;
  int v20;
  size_t outputStructCnt;

  LOBYTE(v9) = a7;
  outputStructCnt = a6;
  int v20 = 0;
  int v19 = 0;
  while (1)
  {
    inputStruct[0] = a2;
    inputStruct[1] = a3;
    inputStruct[2] = a4;
    unsigned int v15 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 28), inputStruct, 0x18uLL, outputStruct, &outputStructCnt);
    if (v15 != -536870211) {
      break;
    }
    if ((v9 & 1) == 0) {
      goto LABEL_10;
    }
    if ((a8 & 1) == 0) {
      fprintf(__stderrp, "CoreDebugTunnel 0x%x returned kIOReturnNoMemory\n", a2);
    }
    uint64_t v16 = outputStructCnt;
    outputStructCnt = vm_page_size;
    uint64_t v9 = 1;
    if (vm_page_size == v16) {
      return v9;
    }
  }
  if (!v15) {
    return 1;
  }
LABEL_10:
  if ((a8 & 1) == 0) {
    fprintf(__stderrp, "Error calling CoreDebugTunnel method! - 0x%X\n", v15);
  }
  return 0;
}

void *sub_10003AE7C(char **a1, int a2, int a3, void *a4, char a5, char a6)
{
  return sub_10003AAE8(a1, a2, a3, 0, a4, a5, a6);
}

void *sub_10003AE94(char **a1, int a2, void *a3, char a4, char a5)
{
  return sub_10003AAE8(a1, a2, 0, 0, a3, a4, a5);
}

void *sub_10003AEAC(int a1, void *a2)
{
  return sub_10003AAE8(0, a1, 0, 0, a2, 0, 0);
}

uint64_t sub_10003AECC(uint64_t a1, void *a2, void *a3, int a4, int a5, int a6, char a7, char a8)
{
  if (!a1)
  {
    long long v18 = __stderrp;
    int v19 = "Err: Need a valid nand exporter here.\n";
    size_t v20 = 38;
    goto LABEL_10;
  }
  if (!a2 || !a3)
  {
    long long v18 = __stderrp;
    int v19 = "Err: Need a valid outputbuffer and bufferSize";
    size_t v20 = 45;
    goto LABEL_10;
  }
  unsigned int v16 = sub_10003AC90(a1, a4, a5, a6, a8);
  if (!v16)
  {
    uint64_t v21 = 0;
    goto LABEL_16;
  }
  unsigned int v17 = v16;
  if (!*a3 || v16 <= *a3)
  {
    size_t v23 = (vm_page_size + v16 - 1) / vm_page_size * vm_page_size;
    bzero(a2, v23);
    if ((sub_10003AD58(a1, a4, a5, a6, a2, v23, a7, a8) & 1) == 0) {
      goto LABEL_11;
    }
    uint64_t v21 = v17;
LABEL_16:
    uint64_t result = 1;
    goto LABEL_12;
  }
  long long v18 = __stderrp;
  int v19 = "Err: Allocated buffer not large enough for the command.\n";
  size_t v20 = 56;
LABEL_10:
  fwrite(v19, v20, 1uLL, v18);
LABEL_11:
  uint64_t v21 = 0;
  uint64_t result = 0;
LABEL_12:
  *a3 = v21;
  return result;
}

uint64_t sub_10003B028(char **a1, int a2, int a3, int a4, void *outputStruct, size_t a6, char a7, char a8)
{
  unsigned int v17 = 0;
  if (a1 || sub_10003B2C4(&v17) && (a1 = v17) != 0 && *((_DWORD *)v17 + 4))
  {
    if (sub_10003AD58((uint64_t)a1, a2, a3, a4, outputStruct, a6, a7, a8))
    {
      uint64_t v15 = 1;
      goto LABEL_10;
    }
    fprintf(__stderrp, "Error fetching the tunnel output buffer for opcode [%d]\n", a2);
  }
  else
  {
    fwrite("Err: Finding internal NAND exporter failed.\n", 0x2CuLL, 1uLL, __stderrp);
  }
  uint64_t v15 = 0;
LABEL_10:
  if (v17) {
    sub_10003B410((uint64_t)v17);
  }
  return v15;
}

uint64_t sub_10003B124(char **a1, int a2, int a3, void *outputStruct, size_t a5, char a6, char a7)
{
  return sub_10003B028(a1, a2, 0, a3, outputStruct, a5, a6, a7);
}

uint64_t sub_10003B140(char **a1, int a2, int a3, void *outputStruct)
{
  kern_return_t v7;
  uint64_t v8;
  size_t outputStructCnt;
  char **v11;
  _DWORD inputStruct[3];
  uint64_t v13;
  int v14;

  long long v13 = 0;
  int v14 = 0;
  outputStructCnt = 4;
  int v11 = 0;
  inputStruct[0] = a2;
  inputStruct[1] = 1;
  inputStruct[2] = a3;
  if (!outputStruct)
  {
    syslog(3, "Error: must provide valid pointer for output value");
    goto LABEL_11;
  }
  if (a1)
  {
    mach_port_t v6 = *((_DWORD *)a1 + 4);
  }
  else if (!sub_10003B2C4(&v11) || (a1 = v11) == 0 || (mach_port_t v6 = *((_DWORD *)v11 + 4)) == 0)
  {
    fwrite("Err: Finding internal NAND exporter failed.\n", 0x2CuLL, 1uLL, __stderrp);
    goto LABEL_11;
  }
  unsigned int v7 = IOConnectCallStructMethod(v6, *((_DWORD *)a1 + 8), inputStruct, 0x18uLL, outputStruct, &outputStructCnt);
  if (v7)
  {
    fprintf(__stderrp, "Error fetching the tunnel output buffer for opcode [%d], Result [0x%X]\n", a2, v7);
LABEL_11:
    unsigned int v8 = 0;
    goto LABEL_12;
  }
  unsigned int v8 = 1;
LABEL_12:
  if (v11) {
    sub_10003B410((uint64_t)v11);
  }
  return v8;
}

void *sub_10003B24C()
{
  return &unk_1000C7DA0;
}

void *sub_10003B258()
{
  return &unk_1000C7DA8;
}

void *sub_10003B264()
{
  return &unk_1000C7DB0;
}

void *sub_10003B270()
{
  return &unk_1000C7DC0;
}

void *sub_10003B27C()
{
  return &unk_1000C7DC8;
}

void *sub_10003B288()
{
  return &unk_1000C7DD0;
}

void *sub_10003B294()
{
  return &unk_1000C7DD8;
}

void *sub_10003B2A0()
{
  return &unk_1000C7DE0;
}

void *sub_10003B2AC()
{
  return &unk_1000C7DB8;
}

void *sub_10003B2B8()
{
  return &unk_1000C7DE8;
}

char *sub_10003B2C4(char ***a1)
{
  io_connect_t connect = 0;
  *a1 = 0;
  int v2 = pthread_mutex_trylock(&stru_1000C7DF0);
  if (v2)
  {
    if (v2 != 16
      || (syslog(4, "Warning: NANDInfo: NANDExporter: serializeAccess already locked. waiting for lock !\n"),
          pthread_mutex_lock(&stru_1000C7DF0)))
    {
      uint64_t v3 = __error();
      syslog(3, "Error: NANDInfo: NANDExporter: pthread_mutex_trylock() (%d) failed \n", *v3);
      return 0;
    }
  }
  syslog(5, "NANDInfo: NANDExporter object locked ! \n");
  int v5 = &off_1000C7E30;
  uint64_t result = off_1000C7E30;
  if (!off_1000C7E30)
  {
LABEL_11:
    io_object_t v8 = 0;
    goto LABEL_12;
  }
  while (1)
  {
    CFDictionaryRef v6 = IOServiceMatching(result);
    if (!v6) {
      goto LABEL_10;
    }
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
    if (!MatchingService) {
      goto LABEL_10;
    }
    io_object_t v8 = MatchingService;
    if (!IOServiceOpen(MatchingService, mach_task_self_, 0, &connect)) {
      break;
    }
    IOServiceClose(connect);
    io_connect_t connect = 0;
    IOObjectRelease(v8);
LABEL_10:
    uint64_t v9 = v5[21];
    v5 += 21;
    uint64_t result = (char *)v9;
    if (!v9) {
      goto LABEL_11;
    }
  }
  syslog(5, "NANDInfo: findNandExporter_tunnel: Controller found: %s\n", *v5);
  uint64_t result = (char *)1;
LABEL_12:
  *((_DWORD *)v5 + 4) = connect;
  *((_DWORD *)v5 + 5) = v8;
  *a1 = v5;
  return result;
}

uint64_t sub_10003B410(uint64_t a1)
{
  io_connect_t v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    IOServiceClose(v2);
    *(_DWORD *)(a1 + 16) = 0;
  }
  io_object_t v3 = *(_DWORD *)(a1 + 20);
  if (v3)
  {
    IOObjectRelease(v3);
    *(_DWORD *)(a1 + 20) = 0;
  }
  syslog(5, "NANDInfo: NANDExporter object unlocked ! \n");

  return pthread_mutex_unlock(&stru_1000C7DF0);
}

void sub_10003B478(const __CFDictionary *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = 0;
  uint64_t valuePtr = 0;
  do
  {
    int v5 = off_1000C8178[v4];
    if (!strncmp(v5, "USBVendorString", 0xFuLL) || !strncmp(v5, "USBProductString", 0x10uLL))
    {
      CFStringRef v10 = CFStringCreateWithCString(0, v5, 0);
      Value = CFDictionaryGetValue(a1, v10);
      if (Value)
      {
        unsigned int v12 = Value;
        long long v13 = +[NSString stringWithUTF8String:off_1000C8178[v4]];
        [v3 setObject:v12 forKey:v13];

        goto LABEL_9;
      }
    }
    else
    {
      CFStringRef v6 = CFStringCreateWithCString(0, v5, 0);
      CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(a1, v6);
      if (v7)
      {
        CFNumberGetValue(v7, kCFNumberLongType, &valuePtr);
        io_object_t v8 = +[NSNumber numberWithUnsignedLongLong:valuePtr];
        uint64_t v9 = +[NSString stringWithUTF8String:off_1000C8178[v4]];
        [v3 setObject:v8 forKey:v9];

        goto LABEL_9;
      }
    }
    NSLog(@"%@: %s property not found", off_1000C8620, off_1000C8178[v4]);
LABEL_9:
    ++v4;
  }
  while (v4 != 149);
}

id sub_10003B620()
{
  *(void *)io_connect_t connect = 0;
  id v0 = objc_alloc_init((Class)NSMutableArray);
  CFDictionaryRef v1 = IOServiceMatching("IOUSBMassStorageResource");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (MatchingService)
  {
    io_service_t v3 = MatchingService;
    CFDictionaryRef v4 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"Device Stats", kCFAllocatorDefault, 0);
    if (v4)
    {
      CFDictionaryRef v5 = v4;
      unsigned __int8 Count = CFDictionaryGetCount(v4);
      uint64_t v7 = Count;
      if (Count)
      {
        uint64_t v8 = IOServiceOpen(v3, mach_task_self_, 1u, &connect[1]);
        if (v8)
        {
          NSLog(@"%@: IOServiceOpen error 0x%x", off_1000C8620, v8);
        }
        else
        {
          uint64_t v9 = IOConnectCallScalarMethod(connect[1], 0x55534201u, 0, 0, 0, connect);
          if (v9)
          {
            NSLog(@"%@: IOConnectCallScalarMethod error 0x%x", off_1000C8620, v9);
          }
          else
          {
            CFStringRef v10 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
            if (v10)
            {
              int v11 = v10;
              CFDictionaryGetKeysAndValues(v5, v10, 0);
              unint64_t v12 = 0;
              uint64_t v13 = 8 * Count;
              do
              {
                int v14 = +[NSMutableDictionary dictionaryWithCapacity:8];
                CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v5, v11[v12 / 8]);
                if (Value)
                {
                  sub_10003B478(Value, v14);
                  [v0 addObject:v14];
                }

                v12 += 8;
              }
              while (v13 != v12);
              free(v11);
              NSLog(@"%@: Successfully collected stats for %d devices", off_1000C8620, v7);
            }
            else
            {
              NSLog(@"%@: malloc error", off_1000C8620);
            }
          }
          IOServiceClose(connect[1]);
        }
      }
      else
      {
        NSLog(@"%@: No devices!", off_1000C8620);
      }
      CFRelease(v5);
    }
    else
    {
      NSLog(@"%@: IORegistryEntrySearchCFProperty error", off_1000C8620);
    }
    IOObjectRelease(v3);
  }
  else
  {
    NSLog(@"%@: IOServiceGetMatchingService error", off_1000C8620);
  }

  return v0;
}

id sub_10003B898()
{
  id v0 = +[NSMutableDictionary dictionaryWithCapacity:4];
  CFDictionaryRef v1 = IOServiceMatching("IODTNVRAMDiags");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (MatchingService)
  {
    io_registry_entry_t v3 = MatchingService;
    CFTypeRef v4 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"CommonUsed", kCFAllocatorDefault, 1u);
    BOOL v5 = v4 != 0;
    if (v4)
    {
      CFStringRef v6 = v4;
      [v0 setObject:v4 forKey:@"commonused"];
      CFRelease(v6);
    }
    CFTypeRef v7 = IORegistryEntrySearchCFProperty(v3, "IOService", @"SystemUsed", kCFAllocatorDefault, 1u);
    if (v7)
    {
      uint64_t v8 = v7;
      [v0 setObject:v7 forKey:@"systemused"];
      CFRelease(v8);
      BOOL v5 = 1;
    }
    CFTypeRef v9 = IORegistryEntrySearchCFProperty(v3, "IOService", @"Generation", kCFAllocatorDefault, 1u);
    if (v9)
    {
      CFStringRef v10 = v9;
      [v0 setObject:v9 forKey:@"norwrites"];
      CFRelease(v10);
      BOOL v5 = 1;
    }
    CFTypeRef v11 = IORegistryEntrySearchCFProperty(v3, "IOService", @"Version", kCFAllocatorDefault, 1u);
    if (v11)
    {
      unint64_t v12 = v11;
      [v0 setObject:v11 forKey:@"version"];
      CFRelease(v12);
      BOOL v5 = 1;
    }
    IOObjectRelease(v3);
    if (v5 && v0 != 0)
    {
      id v15 = v0;
      AnalyticsSendEventLazy();
    }
  }

  return v0;
}

id sub_10003BAC8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id NandInfoExtractToCA_runAllSteps(int a1)
{
  if (a1) {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
  }
  else {
    id v2 = 0;
  }
  if (sub_10003B2C4((char ***)&qword_1000C88F0))
  {
    for (uint64_t i = 0; i != 9; ++i)
    {
      unint64_t v12 = sub_10003BC38(i);
      if (v12 && v2)
      {
        uint64_t v13 = [&off_1000C16C0 objectAtIndexedSubscript:i];
        [v2 setObject:v12 forKeyedSubscript:v13];
      }
    }
    int v14 = (void *)qword_1000C88E0;
    qword_1000C88E0 = 0;

    id v15 = (void *)qword_1000C88E8;
    qword_1000C88E8 = 0;

    if (qword_1000C88F0)
    {
      sub_10003B410(qword_1000C88F0);
      qword_1000C88F0 = 0;
    }
    if (!a1)
    {
      id v17 = 0;
      goto LABEL_17;
    }
    unsigned int v16 = +[NSString stringWithUTF8String:sub_100013FB0()];
    [v2 setObject:v16 forKeyedSubscript:@"com.apple.NANDInfo.ErrorMessage"];
  }
  else
  {
    sub_100013EE0("NandInfoExtractToCA_runAllSteps: Could not get nand_exporter_t", v3, v4, v5, v6, v7, v8, v9, v19);
  }
  id v17 = v2;
LABEL_17:

  return v17;
}

id sub_10003BC38(uint64_t a1)
{
  if (!&_AnalyticsSendEventLazy)
  {
    CFStringRef v238 = @"com.apple.NANDInfo.ErrorMessage";
    CFStringRef v239 = @"Unable call CA API AnalyticsSendEventLazy";
    id v1 = +[NSDictionary dictionaryWithObjects:&v239 forKeys:&v238 count:1];
    goto LABEL_183;
  }
  if ((unint64_t)[&off_1000C16C0 count] <= a1)
  {
    uint64_t v45 = +[NSNumber numberWithUnsignedInt:a1];
    NSLog(@"Invalid extraction step %@", v45);

    id v1 = 0;
  }
  else
  {
    uint64_t v3 = a1;
    uint64_t v4 = [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent];
    uint64_t v5 = +[NSString stringWithUTF8String:"NandInfoExtractToCA_runStep"];
    uint64_t v6 = [&off_1000C16C0 objectAtIndexedSubscript:a1];
    NSLog(@"%@: %@: logging %@\n", v4, v5, v6);

    switch((int)a1)
    {
      case 0:
        id v1 = objc_alloc_init((Class)NSMutableDictionary);
        uint64_t v21 = CopyWhitelistedNANDFTLInfo(0, v14, v15, v16, v17, v18, v19, v20);
        unsigned int v22 = off_1000C8768;
        if (!v21)
        {
          [v1 setObject:&__kCFBooleanFalse forKeyedSubscript:off_1000C8768];
          [v1 setObject:&__kCFBooleanFalse forKeyedSubscript:off_1000C8770];
          v174 = off_1000C8778;
          uint64_t v175 = v1;
          goto LABEL_162;
        }
        unsigned int IsEventUsed = AnalyticsIsEventUsed();
        NSLog(@"NANDInfo: %@ enabled=%d\n", v22, IsEventUsed);
        uint64_t v24 = off_1000C8768;
        uint64_t v257 = _NSConcreteStackBlock;
        uint64_t v258 = 3221225472;
        uint64_t v259 = sub_100041F18;
        v260 = &unk_100090B48;
        id v25 = v21;
        id v261 = v25;
        int v26 = sub_100040F8C((uint64_t)v24, &v257);
        BOOL v27 = v26 == 0;
        if (v26) {
          uint64_t v28 = @"NANDInfo: SUCCESS in logging massStorage_NANDInfo_FTLCounters_1 using AnalyticsSendEventLazy\n";
        }
        else {
          uint64_t v28 = @"NANDInfo: FAILED to log massStorage_NANDInfo_FTLCounters_1 using AnalyticsSendEventLazy\n";
        }
        if (v27) {
          uint64_t v29 = &__kCFBooleanFalse;
        }
        else {
          uint64_t v29 = &__kCFBooleanTrue;
        }
        NSLog(&v28->isa);
        [v1 setObject:v29 forKeyedSubscript:off_1000C8768];

        uint64_t v30 = off_1000C8770;
        unsigned int v31 = AnalyticsIsEventUsed();
        NSLog(@"NANDInfo: %@ enabled=%d\n", v30, v31);
        int v32 = off_1000C8770;
        *(void *)&long long v251 = _NSConcreteStackBlock;
        *((void *)&v251 + 1) = 3221225472;
        *(void *)&long long v252 = sub_100041F20;
        *((void *)&v252 + 1) = &unk_100090B48;
        id v33 = v25;
        *(void *)&long long v253 = v33;
        int v34 = sub_100040F8C((uint64_t)v32, &v251);
        BOOL v35 = v34 == 0;
        if (v34) {
          unsigned int v36 = @"NANDInfo: SUCCESS in logging massStorage_NANDInfo_FTLHistograms_1 using AnalyticsSendEventLazy\n";
        }
        else {
          unsigned int v36 = @"NANDInfo: FAILED to log massStorage_NANDInfo_FTLHistograms_1 using AnalyticsSendEventLazy\n";
        }
        if (v35) {
          unsigned int v37 = &__kCFBooleanFalse;
        }
        else {
          unsigned int v37 = &__kCFBooleanTrue;
        }
        NSLog(&v36->isa);
        [v1 setObject:v37 forKeyedSubscript:off_1000C8770];

        unsigned int v38 = off_1000C8778;
        unsigned int v39 = AnalyticsIsEventUsed();
        NSLog(@"NANDInfo: %@ enabled=%d\n", v38, v39);
        unsigned int v40 = off_1000C8778;
        *(void *)&long long v234 = _NSConcreteStackBlock;
        *((void *)&v234 + 1) = 3221225472;
        *(void *)&long long v235 = sub_100041F28;
        *((void *)&v235 + 1) = &unk_100090B48;
        *(void *)&long long v236 = v33;
        int v41 = sub_100040F8C((uint64_t)v40, &v234);
        BOOL v42 = v41 == 0;
        if (v41) {
          v43 = @"NANDInfo: SUCCESS in logging kEventName_massStorage_NANDInfo_FTLHistograms_2 using AnalyticsSendEventLazy\n";
        }
        else {
          v43 = @"NANDInfo: FAILED to log kEventName_massStorage_NANDInfo_FTLHistograms_2 using AnalyticsSendEventLazy\n";
        }
        if (v42) {
          uint64_t v44 = &__kCFBooleanFalse;
        }
        else {
          uint64_t v44 = &__kCFBooleanTrue;
        }
        NSLog(&v43->isa);
        [v1 setObject:v44 forKeyedSubscript:off_1000C8778];

        goto LABEL_163;
      case 1:
        id v1 = objc_alloc_init((Class)NSMutableDictionary);
        v240 = off_1000C8780;
        uint64_t v241 = off_1000C8790;
        v216 = +[NSArray arrayWithObjects:&v240 count:2];
        id v48 = CopyWhitelistedNANDMSPInfo();
        id v49 = v48;
        if (v48)
        {
          uint64_t v50 = [v48 objectForKey:off_1000C8640[0]];

          if (v50) {
            [v49 removeObjectForKey:off_1000C8640[0]];
          }
          uint64_t v200 = v3;
          id v212 = [v49 count];
          long long v234 = 0u;
          long long v235 = 0u;
          long long v236 = 0u;
          long long v237 = 0u;
          obuint64_t j = v49;
          uint64_t v219 = (char *)[obj countByEnumeratingWithState:&v234 objects:&v257 count:16];
          unsigned int v51 = 0;
          if (v219)
          {
            uint64_t v211 = *(void *)v235;
            do
            {
              int v52 = 0;
              uint64_t v53 = v51;
              do
              {
                if (*(void *)v235 != v211) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v225 = v52;
                uint64_t v54 = *(void *)(*((void *)&v234 + 1) + 8 * (void)v52);
                unsigned int v51 = [obj objectForKeyedSubscript:v54];

                [v51 setObject:v54 forKeyedSubscript:off_1000C8800];
                unsigned int v55 = +[NSNumber numberWithUnsignedInteger:v212];
                [v51 setObject:v55 forKeyedSubscript:off_1000C8808];

                long long v232 = 0u;
                long long v233 = 0u;
                long long v230 = 0u;
                long long v231 = 0u;
                id v228 = v216;
                id v56 = [v228 countByEnumeratingWithState:&v230 objects:&v251 count:16];
                if (v56)
                {
                  id v57 = v56;
                  uint64_t v58 = *(void *)v231;
                  do
                  {
                    for (uint64_t i = 0; i != v57; uint64_t i = (char *)i + 1)
                    {
                      if (*(void *)v231 != v58) {
                        objc_enumerationMutation(v228);
                      }
                      uint64_t v60 = *(void *)(*((void *)&v230 + 1) + 8 * i);
                      unsigned int v61 = AnalyticsIsEventUsed();
                      NSLog(@"NANDInfo: %@ enabled=%d\n", v60, v61);
                      uint64_t v245 = (__CFString *)_NSConcreteStackBlock;
                      uint64_t v246 = 3221225472;
                      uint64_t v247 = sub_100041F30;
                      v248 = (__CFString *)&unk_100090B48;
                      uint64_t v249 = v51;
                      if (sub_100040F8C(v60, &v245))
                      {
                        NSLog(@"NANDInfo: SUCCESS in logging %@ using AnalyticsSendEventLazy\n", v60);
                        unsigned int v62 = [v1 objectForKey:v60];

                        if (!v62)
                        {
                          id v63 = objc_alloc_init((Class)NSMutableDictionary);
                          [v1 setObject:v63 forKeyedSubscript:v60];
                        }
                        int v64 = [v1 objectForKeyedSubscript:v60];
                        v65 = v64;
                        uint64_t v66 = &__kCFBooleanTrue;
                      }
                      else
                      {
                        NSLog(@"NANDInfo: FAILED to log %@ using AnalyticsSendEventLazy\n", v60);
                        float v67 = [v1 objectForKey:v60];

                        if (!v67)
                        {
                          id v68 = objc_alloc_init((Class)NSMutableDictionary);
                          [v1 setObject:v68 forKeyedSubscript:v60];
                        }
                        int v64 = [v1 objectForKeyedSubscript:v60];
                        v65 = v64;
                        uint64_t v66 = &__kCFBooleanFalse;
                      }
                      [v64 setObject:v66 forKeyedSubscript:v54];
                    }
                    id v57 = [v228 countByEnumeratingWithState:&v230 objects:&v251 count:16];
                  }
                  while (v57);
                }

                int v52 = v225 + 1;
                uint64_t v53 = v51;
              }
              while (v225 + 1 != v219);
              uint64_t v219 = (char *)[obj countByEnumeratingWithState:&v234 objects:&v257 count:16];
            }
            while (v219);
          }

          NSLog(@"NANDInfo: %@ completed (total_nof_msps:%lu)\n", off_1000C8780, v212);
          NSLog(@"NANDInfo: %@ completed (total_nof_msps:%lu)\n", off_1000C8790, v212);

          uint64_t v3 = v200;
        }
        else
        {
          [v1 setObject:&__kCFBooleanFalse forKeyedSubscript:off_1000C8780];
          [v1 setObject:&__kCFBooleanFalse forKeyedSubscript:off_1000C8790];
        }

        goto LABEL_176;
      case 2:
        id v1 = objc_alloc_init((Class)NSMutableDictionary);
        unint64_t v69 = CopyWhitelistedStorageStats();
        uint64_t v70 = off_1000C8788;
        if (!v69)
        {
          uint64_t v185 = v1;
          v176 = off_1000C8788;
          goto LABEL_172;
        }
        unsigned int v71 = AnalyticsIsEventUsed();
        NSLog(@"NANDInfo: %@ enabled=%d\n", v70, v71);
        uint64_t v72 = off_1000C8788;
        uint64_t v257 = _NSConcreteStackBlock;
        uint64_t v258 = 3221225472;
        uint64_t v259 = sub_100041F38;
        v260 = &unk_100090B48;
        id v261 = v69;
        int v73 = sub_100040F8C((uint64_t)v72, &v257);
        BOOL v74 = v73 == 0;
        if (v73) {
          int v75 = @"NANDInfo: SUCCESS in logging massStorage_NANDInfo_StorageStats_1 using AnalyticsSendEventLazy\n";
        }
        else {
          int v75 = @"NANDInfo: FAILED to log massStorage_NANDInfo_StorageStats_1 using AnalyticsSendEventLazy\n";
        }
        if (v74) {
          int v76 = &__kCFBooleanFalse;
        }
        else {
          int v76 = &__kCFBooleanTrue;
        }
        NSLog(&v75->isa);
        [v1 setObject:v76 forKeyedSubscript:off_1000C8788];

        goto LABEL_180;
      case 3:
        sub_10003B898();
        id v1 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_176;
      case 4:
        id v1 = objc_alloc_init((Class)NSMutableDictionary);
        uint64_t v245 = off_1000C87A0;
        uint64_t v246 = (uint64_t)off_1000C87A8;
        uint64_t v247 = (id (*)(uint64_t))off_1000C87B0;
        v248 = off_1000C87B8;
        uint64_t v249 = off_1000C87C0;
        v250 = off_1000C87C8;
        uint64_t v217 = +[NSArray arrayWithObjects:&v245 count:6];
        long long v234 = 0u;
        long long v235 = 0u;
        long long v236 = 0u;
        long long v237 = 0u;
        v220 = (char *)[&off_1000C1620 countByEnumeratingWithState:&v234 objects:&v257 count:16];
        if (!v220) {
          goto LABEL_94;
        }
        uint64_t v201 = a1;
        id v77 = 0;
        uint64_t v213 = *(void *)v235;
        while (1)
        {
          int v78 = 0;
          int v79 = v77;
          do
          {
            if (*(void *)v235 != v213) {
              objc_enumerationMutation(&off_1000C1620);
            }
            obja = v78;
            int v80 = *(void **)(*((void *)&v234 + 1) + 8 * (void)v78);
            uint64_t v81 = [&off_1000C1620 objectForKeyedSubscript:v80];
            id v82 = [v81 intValue];

            id v77 = CopySMagHistoryNANDFTLInfo(0, (uint64_t)v82, 2);
            long long v232 = 0u;
            long long v233 = 0u;
            long long v230 = 0u;
            long long v231 = 0u;
            id v226 = v217;
            id v83 = [v226 countByEnumeratingWithState:&v230 objects:&v251 count:16];
            if (v83)
            {
              id v84 = v83;
              uint64_t v85 = *(void *)v231;
              do
              {
                uint64_t v86 = 0;
                do
                {
                  v87 = v1;
                  if (*(void *)v231 != v85) {
                    objc_enumerationMutation(v226);
                  }
                  uint64_t v88 = *(void *)(*((void *)&v230 + 1) + 8 * (void)v86);
                  v89 = [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent];
                  uint64_t v90 = +[NSString stringWithUTF8String:"createAndLogSMagFTLFieldsToCoreAnalyticsForEvent"];
                  unsigned int v91 = AnalyticsIsEventUsed();
                  NSLog(@"%@: %@: %@ enabled=%d\n", v89, v90, v88, v91);

                  if (v77) {
                    goto LABEL_75;
                  }
                  uint64_t v92 = [0 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"];
                  if ([v92 intValue])
                  {

LABEL_75:
                    id v95 = CopySMagNANDFTLCustomHistoryInfo(0);
                    if (v95) {
                      [v77 addEntriesFromDictionary:v95];
                    }

                    [v77 setObject:v80 forKeyedSubscript:@"ESR_Cadence"];
                    v240 = (__CFString *)_NSConcreteStackBlock;
                    uint64_t v241 = (__CFString *)3221225472;
                    v242 = sub_100041F40;
                    uint64_t v243 = &unk_100090B48;
                    id v244 = v77;
                    char v96 = sub_100040F8C(v88, &v240);
                    int v97 = [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent];
                    uint64_t v98 = +[NSString stringWithUTF8String:"createAndLogSMagFTLFieldsToCoreAnalyticsForEvent"];
                    int v99 = (void *)v98;
                    if (v96)
                    {
                      NSLog(@"%@: %@: SUCCESS in logging (%@) %@ using AnalyticsSendEventLazy\n", v97, v98, v80, v88);

                      id v1 = v87;
                      uint64_t v100 = [v87 objectForKey:v88];

                      if (!v100)
                      {
                        id v101 = objc_alloc_init((Class)NSMutableDictionary);
                        [v87 setObject:v101 forKeyedSubscript:v88];
                      }
                      uint64_t v102 = [v87 objectForKeyedSubscript:v88];
                      v103 = v102;
                      uint64_t v104 = &__kCFBooleanTrue;
                    }
                    else
                    {
                      NSLog(@"%@: %@: FAILED to log (%@) %@ using AnalyticsSendEventLazy\n", v97, v98, v80, v88);

                      id v1 = v87;
                      v105 = [v87 objectForKey:v88];

                      if (!v105)
                      {
                        id v106 = objc_alloc_init((Class)NSMutableDictionary);
                        [v87 setObject:v106 forKeyedSubscript:v88];
                      }
                      uint64_t v102 = [v87 objectForKeyedSubscript:v88];
                      v103 = v102;
                      uint64_t v104 = &__kCFBooleanFalse;
                    }
                    [v102 setObject:v104 forKeyedSubscript:v80];

                    v107 = v244;
                    goto LABEL_85;
                  }
                  unsigned __int8 v93 = [v80 isEqualToString:@"current"];

                  if (v93) {
                    goto LABEL_75;
                  }
                  id v1 = v87;
                  uint64_t v108 = [v87 objectForKey:v88];

                  if (!v108)
                  {
                    id v109 = objc_alloc_init((Class)NSMutableDictionary);
                    [v87 setObject:v109 forKeyedSubscript:v88];
                  }
                  v107 = [v87 objectForKeyedSubscript:v88];
                  [v107 setObject:&__kCFBooleanFalse forKeyedSubscript:v80];
LABEL_85:

                  uint64_t v86 = (char *)v86 + 1;
                }
                while (v84 != v86);
                id v110 = [v226 countByEnumeratingWithState:&v230 objects:&v251 count:16];
                id v84 = v110;
              }
              while (v110);
            }

            int v78 = obja + 1;
            int v79 = v77;
          }
          while (obja + 1 != v220);
          v220 = (char *)[&off_1000C1620 countByEnumeratingWithState:&v234 objects:&v257 count:16];
          if (!v220)
          {

            uint64_t v3 = v201;
LABEL_94:

LABEL_176:
            int v47 = &AnalyticsIsEventUsed_ptr;
            if (v1) {
              goto LABEL_177;
            }
LABEL_181:
            id v190 = [&off_1000C16C0 objectAtIndexedSubscript:v3];
            [v190 UTF8String];
            sub_100013EE0("%s: unable to log %s to CA", v191, v192, v193, v194, v195, v196, v197, (char)"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m");

            v186 = [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent];
            uint64_t v187 = [v47[228] stringWithUTF8String:"NandInfoExtractToCA_runStep"];
            v188 = [&off_1000C16C0 objectAtIndexedSubscript:v3];
            NSLog(@"%@: %@: unable to log %@\n", v186, v187, v188);
            id v1 = 0;
            goto LABEL_182;
          }
        }
      case 5:
        uint64_t v202 = a1;
        id v214 = objc_alloc_init((Class)NSMutableDictionary);
        id v111 = objc_alloc_init((Class)NSMutableDictionary);
        [v111 setObject:&off_1000C1930 forKeyedSubscript:@"current"];
        uint64_t v112 = 0;
        uint64_t v113 = 0;
        uint64_t v114 = 0xFFFFFFFFLL;
        do
        {
          v115 = (void *)v113;
          v116 = +[NSNumber numberWithInt:v114];
          uint64_t v113 = +[NSString stringWithFormat:@"%@ 2-months", v116];

          uint64_t v117 = +[NSNumber numberWithInt:v112];
          v256[0] = v117;
          uint64_t v112 = (v112 + 1440);
          v118 = +[NSNumber numberWithInt:v112];
          v256[1] = v118;
          uint64_t v119 = +[NSArray arrayWithObjects:v256 count:2];
          [v111 setObject:v119 forKeyedSubscript:v113];

          uint64_t v114 = (v114 - 1);
        }
        while (v114 != -7);
        uint64_t v120 = 0;
        uint64_t v121 = 0xFFFFFFFFLL;
        do
        {
          v122 = (void *)v113;
          uint64_t v123 = +[NSNumber numberWithInt:v121];
          uint64_t v113 = +[NSString stringWithFormat:@"%@ 6-months", v123];

          v124 = +[NSNumber numberWithInt:v120];
          v255[0] = v124;
          uint64_t v120 = (v120 + 4320);
          uint64_t v125 = +[NSNumber numberWithInt:v120];
          v255[1] = v125;
          v126 = +[NSArray arrayWithObjects:v255 count:2];
          [v111 setObject:v126 forKeyedSubscript:v113];

          uint64_t v121 = (v121 - 1);
        }
        while (v121 != -8);
        uint64_t v199 = (void *)v113;
        v240 = off_1000C87E0;
        uint64_t v241 = off_1000C87E8;
        v242 = (id (*)(uint64_t))off_1000C87F0;
        v206 = +[NSArray arrayWithObjects:&v240 count:3];
        long long v234 = 0u;
        long long v235 = 0u;
        long long v236 = 0u;
        long long v237 = 0u;
        id v208 = v111;
        id v207 = [v208 countByEnumeratingWithState:&v234 objects:&v257 count:16];
        if (v207)
        {
          id v229 = 0;
          uint64_t v205 = *(void *)v235;
          id v1 = v214;
          while (1)
          {
            uint64_t v127 = 0;
            do
            {
              if (*(void *)v235 != v205) {
                objc_enumerationMutation(v208);
              }
              uint64_t v209 = v127;
              v128 = *(void **)(*((void *)&v234 + 1) + 8 * v127);
              uint64_t v129 = [v208 objectForKeyedSubscript:v128];
              v130 = [v129 objectAtIndexedSubscript:0];
              unsigned int objb = [v130 unsignedIntValue];

              uint64_t v131 = [v208 objectForKeyedSubscript:v128];
              v132 = [v131 objectAtIndexedSubscript:1];
              unsigned int v221 = [v132 unsignedIntValue];

              long long v232 = 0u;
              long long v233 = 0u;
              long long v230 = 0u;
              long long v231 = 0u;
              id v210 = v206;
              id v227 = [v210 countByEnumeratingWithState:&v230 objects:&v251 count:16];
              if (v227)
              {
                uint64_t v218 = *(void *)v231;
                do
                {
                  uint64_t v133 = 0;
                  do
                  {
                    if (*(void *)v231 != v218) {
                      objc_enumerationMutation(v210);
                    }
                    uint64_t v134 = *(void *)(*((void *)&v230 + 1) + 8 * (void)v133);
                    uint64_t v135 = [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent];
                    v136 = +[NSString stringWithUTF8String:"createAndLogSMagHistoryFTLFieldsToCoreAnalyticsForEvent"];
                    unsigned int v137 = AnalyticsIsEventUsed();
                    NSLog(@"%@: %@: %@ enabled=%d\n", v135, v136, v134, v137);

                    id v139 = CopySMagHistoryNANDFTLInfo(objb, v221, 2);

                    id v229 = v139;
                    if (v139) {
                      goto LABEL_113;
                    }
                    v140 = [0 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"];
                    if ([v140 intValue])
                    {

                      id v139 = 0;
LABEL_113:
                      [v139 setObject:v128 forKeyedSubscript:@"ESR_Cadence"];
                      uint64_t v245 = (__CFString *)_NSConcreteStackBlock;
                      uint64_t v246 = 3221225472;
                      uint64_t v247 = sub_100041F48;
                      v248 = (__CFString *)&unk_100090B48;
                      uint64_t v249 = (__CFString *)v139;
                      char v142 = sub_100040F8C(v134, &v245);
                      uint64_t v143 = [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent];
                      uint64_t v144 = +[NSString stringWithUTF8String:"createAndLogSMagHistoryFTLFieldsToCoreAnalyticsForEvent"];
                      uint64_t v145 = (void *)v144;
                      if (v142)
                      {
                        NSLog(@"%@: %@: SUCCESS in logging (%@) %@ using AnalyticsSendEventLazy\n", v143, v144, v128, v134);

                        id v1 = v214;
                        v146 = [v214 objectForKey:v134];

                        if (!v146)
                        {
                          id v147 = objc_alloc_init((Class)NSMutableDictionary);
                          [v214 setObject:v147 forKeyedSubscript:v134];
                        }
                        v148 = [v214 objectForKeyedSubscript:v134];
                        uint64_t v149 = v148;
                        v150 = &__kCFBooleanTrue;
                      }
                      else
                      {
                        NSLog(@"%@: %@: FAILED in logging (%@) %@ using AnalyticsSendEventLazy\n", v143, v144, v128, v134);

                        id v1 = v214;
                        uint64_t v151 = [v214 objectForKey:v134];

                        if (!v151)
                        {
                          id v152 = objc_alloc_init((Class)NSMutableDictionary);
                          [v214 setObject:v152 forKeyedSubscript:v134];
                        }
                        v148 = [v214 objectForKeyedSubscript:v134];
                        uint64_t v149 = v148;
                        v150 = &__kCFBooleanFalse;
                      }
                      [v148 setObject:v150 forKeyedSubscript:v128];

                      id v153 = v249;
                      goto LABEL_121;
                    }
                    unsigned __int8 v141 = [v128 isEqualToString:@"current"];

                    id v139 = 0;
                    if (v141) {
                      goto LABEL_113;
                    }
                    v154 = [v214 objectForKey:v134];

                    if (!v154)
                    {
                      id v155 = objc_alloc_init((Class)NSMutableDictionary);
                      [v214 setObject:v155 forKeyedSubscript:v134];
                    }
                    id v153 = [v214 objectForKeyedSubscript:v134];
                    [v153 setObject:&__kCFBooleanFalse forKeyedSubscript:v128];
                    id v1 = v214;
LABEL_121:

                    uint64_t v133 = (char *)v133 + 1;
                  }
                  while (v227 != v133);
                  id v156 = [v210 countByEnumeratingWithState:&v230 objects:&v251 count:16];
                  id v227 = v156;
                }
                while (v156);
              }

              uint64_t v127 = v209 + 1;
              int v47 = &AnalyticsIsEventUsed_ptr;
            }
            while ((id)(v209 + 1) != v207);
            id v207 = [v208 countByEnumeratingWithState:&v234 objects:&v257 count:16];
            if (!v207) {
              goto LABEL_168;
            }
          }
        }
        id v229 = 0;
        int v47 = &AnalyticsIsEventUsed_ptr;
        id v1 = v214;
LABEL_168:

        uint64_t v3 = v202;
        if (!v1) {
          goto LABEL_181;
        }
LABEL_177:
        v186 = [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent];
        uint64_t v187 = [v47[228] stringWithUTF8String:"NandInfoExtractToCA_runStep"];
        v188 = [&off_1000C16C0 objectAtIndexedSubscript:v3];
        NSLog(@"%@: %@: successfully logged %@\n", v186, v187, v188);
LABEL_182:

        break;
      case 6:
        id v157 = objc_alloc_init((Class)NSMutableDictionary);
        id v1 = objc_alloc_init((Class)NSMutableDictionary);
        v158 = sub_100041050();
        if (v158)
        {
          uint64_t v215 = v1;
          uint64_t v203 = v3;
          unsigned int v159 = AnalyticsIsEventUsed();
          NSLog(@"NANDInfo: kEventName_massStorage_NANDInfo_XNUStats_NANDViews_1 enabled=%d\n", v159);
          long long v253 = 0u;
          long long v254 = 0u;
          long long v251 = 0u;
          long long v252 = 0u;
          id v160 = v158;
          id v161 = [v160 countByEnumeratingWithState:&v251 objects:&v257 count:16];
          if (v161)
          {
            id v162 = v161;
            id v163 = 0;
            uint64_t v164 = *(void *)v252;
            do
            {
              for (uint64_t j = 0; j != v162; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v252 != v164) {
                  objc_enumerationMutation(v160);
                }
                uint64_t v166 = *(void *)(*((void *)&v251 + 1) + 8 * (void)j);
                uint64_t v167 = [v160 objectForKey:v166];

                v168 = off_1000C8798;
                *(void *)&long long v234 = _NSConcreteStackBlock;
                *((void *)&v234 + 1) = 3221225472;
                *(void *)&long long v235 = sub_100041F50;
                *((void *)&v235 + 1) = &unk_100090B48;
                id v163 = v167;
                *(void *)&long long v236 = v163;
                int v169 = sub_100040F8C((uint64_t)v168, &v234);
                BOOL v170 = v169 == 0;
                if (v169) {
                  uint64_t v171 = @"NANDInfo: SUCCESS in logging kEventName_massStorage_NANDInfo_XNUStats_NANDViews_1 using AnalyticsSendEventLazy\n";
                }
                else {
                  uint64_t v171 = @"NANDInfo: FAILED to log kEventName_massStorage_NANDInfo_XNUStats_NANDViews_1 using AnalyticsSendEventLazy\n";
                }
                if (v170) {
                  v172 = &__kCFBooleanFalse;
                }
                else {
                  v172 = &__kCFBooleanTrue;
                }
                NSLog(&v171->isa);
                [v157 setObject:v172 forKeyedSubscript:v166];
              }
              id v162 = [v160 countByEnumeratingWithState:&v251 objects:&v257 count:16];
            }
            while (v162);
          }
          else
          {
            id v163 = 0;
          }

          id v1 = v215;
          [v215 setObject:v157 forKeyedSubscript:off_1000C8798];

          uint64_t v3 = v203;
        }
        else
        {
          [v157 setObject:&__kCFBooleanFalse forKeyedSubscript:@"current"];
          [v1 setObject:v157 forKeyedSubscript:off_1000C8798];
        }

        goto LABEL_176;
      case 7:
        uint64_t v21 = sub_10003D770(dword_1000C88F8, v7, v8, v9, v10, v11, v12, v13);
        id v1 = objc_alloc_init((Class)NSMutableDictionary);
        if (!v21
          || ![v21 hasNewErrors]
          || (dword_1000C88F8 = [v21 curNumErrorsInPayload],
              unsigned int v173 = AnalyticsIsEventUsed(),
              NSLog(@"NANDInfo: kEventName_massStorage_NANDInfo_GeomErrorPayload enabled=%d\n", v173),
              [v1 setObject:&__kCFBooleanTrue forKeyedSubscript:off_1000C87D8],
              ([v21 iteratePerPageDictsForMaxPagesWithStatus:12 iteratorCallBack:&stru_100090BB0] & 1) == 0))
        {
          v174 = off_1000C87D8;
          uint64_t v175 = v1;
LABEL_162:
          [v175 setObject:&__kCFBooleanFalse forKeyedSubscript:v174];
        }
LABEL_163:

        goto LABEL_176;
      case 8:
        id v1 = objc_alloc_init((Class)NSMutableDictionary);
        unint64_t v69 = sub_10003B620();
        v176 = off_1000C87F8;
        if (v69)
        {
          unsigned int v177 = AnalyticsIsEventUsed();
          NSLog(@"NANDInfo: createAndLogUSBStorageTelemetryToCoreAnalyticsForEvent: kEventName_massStorage_USBStorageInfo_Counters_1 enabled=%d\n", v177);
          long long v253 = 0u;
          long long v254 = 0u;
          long long v251 = 0u;
          long long v252 = 0u;
          id v178 = v69;
          id v179 = [v178 countByEnumeratingWithState:&v251 objects:&v257 count:16];
          if (v179)
          {
            id v180 = v179;
            uint64_t v204 = v3;
            uint64_t v181 = *(void *)v252;
            do
            {
              for (uint64_t k = 0; k != v180; uint64_t k = (char *)k + 1)
              {
                if (*(void *)v252 != v181) {
                  objc_enumerationMutation(v178);
                }
                uint64_t v183 = *(void *)(*((void *)&v251 + 1) + 8 * (void)k);
                *(void *)&long long v234 = _NSConcreteStackBlock;
                *((void *)&v234 + 1) = 3221225472;
                *(void *)&long long v235 = sub_100042000;
                *((void *)&v235 + 1) = &unk_100090B48;
                *(void *)&long long v236 = v183;
                uint64_t v184 = sub_100040F8C((uint64_t)off_1000C87F8, &v234);
                if (v184) {
                  NSLog(@"NANDInfo: SUCCESS in logging kEventName_massStorage_USBStorageInfo_Counters using AnalyticsSendEventLazy\n");
                }
                else {
                  NSLog(@"NANDInfo: FAILED to log kEventName_massStorage_USBStorageInfo_Counters using AnalyticsSendEventLazy\n");
                }
              }
              id v180 = [v178 countByEnumeratingWithState:&v251 objects:&v257 count:16];
            }
            while (v180);
            uint64_t v3 = v204;
          }
          else
          {
            uint64_t v184 = 1;
          }

          uint64_t v189 = +[NSNumber numberWithBool:v184];
          [v1 setObject:v189 forKeyedSubscript:off_1000C87F8];
        }
        else
        {
          uint64_t v185 = v1;
LABEL_172:
          [v185 setObject:&__kCFBooleanFalse forKeyedSubscript:v176];
        }
LABEL_180:
        int v47 = &AnalyticsIsEventUsed_ptr;

        if (!v1) {
          goto LABEL_181;
        }
        goto LABEL_177;
      default:
        uint64_t v46 = [&off_1000C16C0 objectAtIndexedSubscript:a1];
        NSLog(@"Unexpected step %@", v46);

        int v47 = &AnalyticsIsEventUsed_ptr;
        goto LABEL_181;
    }
  }
LABEL_183:

  return v1;
}

NANDInfo_GeomErrorPayloadManager *sub_10003D770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = 0;
  int v32 = 0;
  uint64_t v9 = (char **)qword_1000C88F0;
  if (qword_1000C88F0)
  {
    int v32 = (char **)qword_1000C88F0;
  }
  else
  {
    if (!sub_10003B2C4(&v32))
    {
      uint64_t v21 = "_getGeomErrorPayloadBuffer: Could not get nand_exporter_t";
      goto LABEL_11;
    }
    uint64_t v9 = v32;
  }
  if (!*((_DWORD *)v9 + 4))
  {
    uint64_t v21 = "_getGeomErrorPayloadBuffer: No io_connection exist";
LABEL_11:
    sub_100013EE0(v21, a2, a3, a4, a5, a6, a7, a8, v31);
    uint64_t v20 = 0;
    uint64_t v19 = 0;
    goto LABEL_12;
  }
  uint64_t v10 = (uint64_t (*)(void))v9[14];
  if (!v10)
  {
    uint64_t v21 = "_getGeomErrorPayloadBuffer: No getGeomErrPayloadSelectors exist";
    goto LABEL_11;
  }
  uint64_t v11 = v10();
  uint64_t v19 = sub_10003AAE8(v9, *(_DWORD *)(v11 + 4), 0, 0, &v31, 0, 1);
  uint64_t v20 = v31;
LABEL_12:
  if (v32 && !qword_1000C88F0) {
    sub_10003B410((uint64_t)v32);
  }
  if (v19 && v20)
  {
    unsigned int v22 = [[NANDInfo_GeomErrorPayloadManager alloc] initWithPayloadBuf:v19 bufSize:v20 prevNumErrors:a1];
    size_t v23 = v22;
    if (v22 && [(NANDInfo_GeomErrorPayloadManager *)v22 hasNewErrors])
    {
      [(NANDInfo_GeomErrorPayloadManager *)v23 parseErrorPayloadBuf:v19 bufSize:v20];
      uint64_t v29 = sub_10003D9CC(0, 1, 0, v24, v25, v26, v27, v28);
      [(NANDInfo_GeomErrorPayloadManager *)v23 populateOtherStats:v29];
    }
  }
  else
  {
    sub_100013EE0("gatherGeomErrorPayloadData: invalid geom error payload buffer", v12, v13, v14, v15, v16, v17, v18, v31);
    size_t v23 = 0;
    if (!v19) {
      goto LABEL_22;
    }
  }
  free(v19);
LABEL_22:

  return v23;
}

void *CopyWhitelistedNANDFTLInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = sub_10003D9CC(0, 1, 0, a4, a5, a6, a7, a8);
  if (v15)
  {
    size_t v23 = sub_10003DC64();
    if (v23) {
      [v15 addEntriesFromDictionary:v23];
    }
    else {
      sub_100013EE0("CopyWhitelistedNANDFTLInfo: Unable to gather ESR FTL fields", v16, v17, v18, v19, v20, v21, v22, v27);
    }
    uint64_t v24 = sub_10003DE70(v15);

    if (v24)
    {
      [v15 addEntriesFromDictionary:v24];
    }
  }
  else
  {
    sub_100013EE0("CopyWhitelistedNANDFTLInfo: Unable to gather other FTL fields", v8, v9, v10, v11, v12, v13, v14, v27);
  }
  uint64_t v25 = +[NSString stringWithUTF8String:sub_100013FB0()];
  [v15 setObject:v25 forKeyedSubscript:off_1000C8640[0]];

  return v15;
}

id sub_10003D9CC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  int v9 = a2;
  unsigned int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v11 = (char **)qword_1000C88F0;
  if (qword_1000C88F0)
  {
    unsigned int v51 = (char **)qword_1000C88F0;
  }
  else
  {
    if (!sub_10003B2C4(&v51))
    {
      uint64_t v13 = "gatherASPFTLData: Could not get nand_exporter_t";
      goto LABEL_19;
    }
    uint64_t v11 = v51;
  }
  if (!*((_DWORD *)v11 + 4))
  {
    uint64_t v13 = "gatherASPFTLData: No io_connection exist";
LABEL_19:
    sub_100013EE0(v13, a2, a3, a4, a5, a6, a7, a8, (char)v51);
    uint64_t v18 = 0;
    goto LABEL_42;
  }
  uint64_t v52 = 0;
  if (!v9)
  {
    uint64_t v12 = (uint64_t (*)(void))v11[6];
    if (v12) {
      goto LABEL_11;
    }
    unsigned int v36 = "gatherASPFTLData: No getReadStatsSelectors exist";
LABEL_25:
    sub_100013EE0(v36, a2, a3, a4, a5, a6, a7, a8, (char)v51);
    uint64_t v18 = 0;
    goto LABEL_45;
  }
  uint64_t v12 = (uint64_t (*)(void))v11[5];
  if (!v12)
  {
    unsigned int v36 = "gatherASPFTLData: No getStatsSelectors exist";
    goto LABEL_25;
  }
  int v8 = 0;
LABEL_11:
  uint64_t v14 = v12();
  uint64_t v15 = sub_10003AAE8(v51, *(_DWORD *)(v14 + 4), 0, v8, &v52, 0, 0);
  uint64_t v16 = v15;
  if (v15) {
    BOOL v17 = v52 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    if (!v15) {
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v19 = (uint64_t *)malloc_type_calloc(1uLL, 0x20uLL, 0x20040DC1BFBCFuLL);
    if (v19)
    {
      char v27 = v19;
      if (a1) {
        int v28 = ((uint64_t (*)(uint64_t *, void *, void))v51[19])(v19, v16, v52);
      }
      else {
        int v28 = ((uint64_t (*)(uint64_t *, void *, void))v51[18])(v19, v16, v52);
      }
      if (v28)
      {
        uint64_t v18 = sub_100044230(v27, 0);
        unsigned int v37 = +[NSString stringWithUTF8String:*v51];
        unsigned int v38 = [v37 isEqualToString:@"ASPStorage"];

        if (v38) {
          unsigned int v39 = &off_1000B1468;
        }
        else {
          unsigned int v39 = &off_1000B13C0;
        }
        [v18 setObject:v39 forKeyedSubscript:@"com.apple.NANDInfo.IsANS1Controller"
        if (v18
          && ([v18 objectForKey:@"magazineFWVersion_1"],
              int v47 = objc_claimAutoreleasedReturnValue(),
              v47,
              v47))
        {
          id v48 = &off_1000B1468;
        }
        else
        {
          sub_100013EE0("Stat Magazine not supported", v40, v41, v42, v43, v44, v45, v46, (char)v51);
          id v48 = &off_1000B13C0;
        }
        [v18 setObject:v48 forKeyedSubscript:@"com.apple.NANDInfo.IsStatMagSupported"];
      }
      else
      {
        sub_100013EE0("gatherASPFTLData: parseFTL failed", v29, v30, v31, v32, v33, v34, v35, (char)v51);
        uint64_t v18 = 0;
      }
      id v49 = v51[20];
      if (v49) {
        ((void (*)(uint64_t *))v49)(v27);
      }
      free(v27);
    }
    else
    {
      sub_100013EE0("gatherASPFTLData: Could not allocate memory for pcxt.ftlData", v20, v21, v22, v23, v24, v25, v26, (char)v51);
      uint64_t v18 = 0;
    }
  }
  free(v16);
LABEL_42:
  if (!qword_1000C88F0 && v51) {
    sub_10003B410((uint64_t)v51);
  }
LABEL_45:

  return v18;
}

id sub_10003DC64()
{
  id v0 = objc_alloc_init((Class)NSMutableDictionary);
  if (qword_1000C88E0)
  {
    +[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:");
    id v1 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = objc_alloc_init((Class)NSMutableDictionary);
    if (&_CacheDeleteCopyItemizedPurgeableSpaceWithInfo)
    {
      CFDictionaryRef v3 = (const __CFDictionary *)CacheDeleteCopyItemizedPurgeableSpaceWithInfo();
      if (v3)
      {
        CFDictionaryRef v11 = v3;
        if (!CFDictionaryGetValue(v3, @"com.apple.NANDInfo.CacheDelete.Error"))
        {
          CFDictionaryRef v12 = v11;
          uint64_t v13 = [(__CFDictionary *)v12 objectForKey:@"CACHE_DELETE_TOTAL_AVAILABLE"];

          if (v13)
          {
            uint64_t v14 = [(__CFDictionary *)v12 objectForKeyedSubscript:@"CACHE_DELETE_TOTAL_AVAILABLE"];
            [v1 setObject:v14 forKeyedSubscript:off_1000C8678[0]];
          }
          uint64_t v15 = [(__CFDictionary *)v12 objectForKey:@"CACHE_DELETE_NONPURGEABLE_AMOUNT"];

          if (v15)
          {
            uint64_t v16 = [(__CFDictionary *)v12 objectForKeyedSubscript:@"CACHE_DELETE_NONPURGEABLE_AMOUNT"];
            [v1 setObject:v16 forKeyedSubscript:off_1000C8680[0]];
          }
        }
        CFRelease(v11);
      }
      else
      {
        sub_100013EE0("getCacheDeleteInfo: unable to get output from CacheDeleteCopyItemizedPurgeableSpaceWithInfo", v4, v5, v6, v7, v8, v9, v10, v22);
      }
      BOOL v17 = (void *)qword_1000C88E0;
      qword_1000C88E0 = (uint64_t)v1;
      id v18 = v1;

      id v1 = +[NSDictionary dictionaryWithDictionary:qword_1000C88E0];
    }
  }
  if (v1) {
    [v0 addEntriesFromDictionary:v1];
  }
  uint64_t v19 = sub_100040ADC();

  if (v19) {
    [v0 addEntriesFromDictionary:v19];
  }
  uint64_t v20 = sub_1000422F0();

  if (v20) {
    [v0 addEntriesFromDictionary:v20];
  }

  return v0;
}

id sub_10003DE70(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  Boolean keyExistsAndHasValidFormat = 0;
  AppBooleanCFDictionaryRef Value = CFPreferencesGetAppBooleanValue(@"StoreDemoMode", @"com.apple.demo-settings", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v4 = AppBooleanValue == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v5 = !v4;
  uint64_t v6 = +[NSNumber numberWithInt:v5];
  [v2 setObject:v6 forKeyedSubscript:off_1000C8638[0]];

  if (v1)
  {
    uint64_t v14 = [v1 objectForKey:@"nandDesc"];

    if (v14)
    {
      uint64_t v15 = [v1 objectForKey:@"nandDesc"];
      unint64_t v16 = (unint64_t)[v15 unsignedLongLongValue];

      BOOL v17 = +[NSNumber numberWithUnsignedLongLong:(unsigned __int16)v16];
      id v18 = [off_1000C8710 objectAtIndexedSubscript:0];
      [v2 setObject:v17 forKeyedSubscript:v18];

      uint64_t v19 = +[NSNumber numberWithUnsignedLongLong:WORD1(v16)];
      uint64_t v20 = [off_1000C8710 objectAtIndexedSubscript:1];
      [v2 setObject:v19 forKeyedSubscript:v20];

      uint64_t v21 = +[NSNumber numberWithUnsignedLongLong:WORD2(v16)];
      char v22 = [off_1000C8710 objectAtIndexedSubscript:2];
      [v2 setObject:v21 forKeyedSubscript:v22];

      uint64_t v23 = +[NSNumber numberWithUnsignedLongLong:HIWORD(v16)];
      uint64_t v24 = [off_1000C8710 objectAtIndexedSubscript:3];
      [v2 setObject:v23 forKeyedSubscript:v24];

      uint64_t v25 = [v1 objectForKeyedSubscript:@"nandDesc"];
      [v2 setObject:v25 forKeyedSubscript:@"nandDesc"];
    }
    uint64_t v26 = [v1 objectForKey:@"userPartitionStart"];
    if (v26)
    {
      char v27 = (void *)v26;
      int v28 = [v1 objectForKey:@"intermediatePartitionStart"];

      if (v28)
      {
        uint64_t v29 = [v1 objectForKey:@"userPartitionStart"];
        signed int v30 = [v29 intValue];

        uint64_t v31 = [v1 objectForKey:@"intermediatePartitionStart"];
        signed int v32 = [v31 intValue];

        uint64_t v33 = +[NSNumber numberWithUnsignedLongLong:v30 - (uint64_t)v32];
        [v2 setObject:v33 forKeyedSubscript:off_1000C86C0[0]];
      }
    }
    uint64_t v34 = [v1 objectForKey:@"utilFormatTime"];

    if (v34)
    {
      uint64_t v35 = [v1 objectForKey:@"utilFormatTime"];
      unsigned int v36 = [v35 intValue];

      if (v36 <= 0x386D4380) {
        unint64_t v37 = 0;
      }
      else {
        unint64_t v37 = ((int)v36 - 946684800) / 0x93A80uLL;
      }
      unsigned int v38 = +[NSNumber numberWithUnsignedLongLong:v37];
      [v2 setObject:v38 forKeyedSubscript:off_1000C8670[0]];
    }
    unsigned int v39 = [v1 objectForKey:@"averageSLCPECycles"];

    if (v39)
    {
      uint64_t v40 = [v1 objectForKeyedSubscript:@"averageSLCPECycles"];
      [v2 setObject:v40 forKeyedSubscript:off_1000C8660[0]];
    }
    uint64_t v41 = [v1 objectForKey:@"averageTLCPECycles"];

    if (v41)
    {
      uint64_t v42 = [v1 objectForKeyedSubscript:@"averageTLCPECycles"];
      [v2 setObject:v42 forKeyedSubscript:off_1000C8658[0]];
    }
    uint64_t v43 = [v1 objectForKey:@"hostWrites"];

    if (v43)
    {
      uint64_t v44 = [v1 objectForKeyedSubscript:@"hostWrites"];
      [v2 setObject:v44 forKeyedSubscript:off_1000C8668[0]];
    }
    uint64_t v45 = [v1 objectForKey:@"powerOnHours"];

    if (v45)
    {
      uint64_t v46 = [v1 objectForKeyedSubscript:@"powerOnHours"];
      [v2 setObject:v46 forKeyedSubscript:off_1000C86D0[0]];
    }
    int v47 = [v1 objectForKey:@"powerOnSeconds"];

    if (v47)
    {
      id v48 = [v1 objectForKeyedSubscript:@"powerOnSeconds"];
      [v2 setObject:v48 forKeyedSubscript:off_1000C86D8[0]];
    }
    id v49 = [v1 objectForKey:@"IND_pool_free"];

    if (v49)
    {
      uint64_t v50 = [v1 objectForKeyedSubscript:@"IND_pool_free"];
      [v2 setObject:v50 forKeyedSubscript:off_1000C8700];
    }
    unsigned int v51 = [v1 objectForKey:@"IND_pool_count"];

    if (v51)
    {
      uint64_t v52 = [v1 objectForKeyedSubscript:@"IND_pool_count"];
      [v2 setObject:v52 forKeyedSubscript:off_1000C86F8[0]];
    }
    unint64_t v53 = 0;
    uint64_t v54 = 0;
    do
    {
      unsigned int v55 = +[NSString stringWithFormat:@"numBootBlockRefreshSuccess_%d", v54];
      id v56 = [v1 objectForKey:v55];

      if (v56)
      {
        id v57 = +[NSString stringWithFormat:@"numBootBlockRefreshSuccess_%d", v54];
        uint64_t v58 = [v1 objectForKey:v57];
        unint64_t v59 = (int)[v58 intValue];
      }
      else
      {
        unint64_t v59 = 0;
      }
      uint64_t v60 = +[NSString stringWithFormat:@"numBootBlockRefreshFail_%d", v54];
      unsigned int v61 = [v1 objectForKey:v60];

      if (v61)
      {
        unsigned int v62 = +[NSString stringWithFormat:@"numBootBlockRefreshFail_%d", v54];
        id v63 = [v1 objectForKey:v62];
        v59 += (int)[v63 intValue];
      }
      if (v59 > v53) {
        unint64_t v53 = v59;
      }
      uint64_t v54 = (v54 + 1);
    }
    while (v54 != 8);
    int v64 = +[NSNumber numberWithUnsignedLongLong:v53];
    [v2 setObject:v64 forKeyedSubscript:off_1000C86B8[0]];

    v65 = [v1 objectForKey:@"mspBootBlockCountPerMsp"];

    if (v65)
    {
      uint64_t v66 = [v1 objectForKey:@"mspBootBlockCountPerMsp"];
      uint64_t v67 = (int)[v66 intValue];

      uint64_t v68 = 0;
      uint64_t v69 = 0;
      uint64_t v70 = 8;
      do
      {
        unsigned int v71 = +[NSString stringWithFormat:@"mspBootBlockReadFails_%llu", v68];
        uint64_t v72 = [v1 objectForKey:v71];

        if (v72)
        {
          int v73 = +[NSString stringWithFormat:@"mspBootBlockReadFails_%llu", v68];
          BOOL v74 = [v1 objectForKey:v73];
          v69 += (int)[v74 intValue];
        }
        v68 += v67;
        --v70;
      }
      while (v70);
      int v75 = +[NSNumber numberWithUnsignedLongLong:v69];
      [v2 setObject:v75 forKeyedSubscript:off_1000C8688[0]];

      uint64_t v76 = 0;
      uint64_t v77 = 8;
      do
      {
        int v78 = +[NSString stringWithFormat:@"mspBootBlockReadFails_%llu", v70 + 1];
        int v79 = [v1 objectForKey:v78];

        if (v79)
        {
          int v80 = +[NSString stringWithFormat:@"mspBootBlockReadFails_%llu", v70];
          uint64_t v81 = [v1 objectForKey:v80];
          v76 += (int)[v81 intValue];
        }
        id v82 = +[NSString stringWithFormat:@"mspBootBlockReadFails_%llu", v70 + 2];
        id v83 = [v1 objectForKey:v82];

        if (v83)
        {
          id v84 = +[NSString stringWithFormat:@"mspBootBlockReadFails_%llu", v70];
          uint64_t v85 = [v1 objectForKey:v84];
          v76 += (int)[v85 intValue];
        }
        uint64_t v86 = +[NSString stringWithFormat:@"mspBootBlockReadFails_%llu", v70 + 3];
        v87 = [v1 objectForKey:v86];

        if (v87)
        {
          uint64_t v88 = +[NSString stringWithFormat:@"mspBootBlockReadFails_%llu", v70];
          v89 = [v1 objectForKey:v88];
          v76 += (int)[v89 intValue];
        }
        v70 += v67;
        --v77;
      }
      while (v77);
      uint64_t v90 = +[NSNumber numberWithUnsignedLongLong:v76];
      [v2 setObject:v90 forKeyedSubscript:off_1000C8690[0]];

      uint64_t v91 = 0;
      uint64_t v92 = 8;
      do
      {
        unsigned __int8 v93 = +[NSString stringWithFormat:@"mspBootBlockProgFails_%llu", v77];
        uint64_t v94 = [v1 objectForKey:v93];

        if (v94)
        {
          id v95 = +[NSString stringWithFormat:@"mspBootBlockProgFails_%llu", v77];
          char v96 = [v1 objectForKey:v95];
          v91 += (int)[v96 intValue];
        }
        v77 += v67;
        --v92;
      }
      while (v92);
      int v97 = +[NSNumber numberWithUnsignedLongLong:v91];
      [v2 setObject:v97 forKeyedSubscript:off_1000C8698[0]];

      uint64_t v98 = 0;
      uint64_t v99 = 8;
      do
      {
        uint64_t v100 = +[NSString stringWithFormat:@"mspBootBlockProgFails_%llu", v92 + 1];
        id v101 = [v1 objectForKey:v100];

        if (v101)
        {
          uint64_t v102 = +[NSString stringWithFormat:@"mspBootBlockProgFails_%llu", v92];
          v103 = [v1 objectForKey:v102];
          v98 += (int)[v103 intValue];
        }
        uint64_t v104 = +[NSString stringWithFormat:@"mspBootBlockProgFails_%llu", v92 + 2];
        v105 = [v1 objectForKey:v104];

        if (v105)
        {
          id v106 = +[NSString stringWithFormat:@"mspBootBlockProgFails_%llu", v92];
          v107 = [v1 objectForKey:v106];
          v98 += (int)[v107 intValue];
        }
        uint64_t v108 = +[NSString stringWithFormat:@"mspBootBlockProgFails_%llu", v92 + 3];
        id v109 = [v1 objectForKey:v108];

        if (v109)
        {
          id v110 = +[NSString stringWithFormat:@"mspBootBlockProgFails_%llu", v92];
          id v111 = [v1 objectForKey:v110];
          v98 += (int)[v111 intValue];
        }
        v92 += v67;
        --v99;
      }
      while (v99);
      uint64_t v112 = +[NSNumber numberWithUnsignedLongLong:v98];
      [v2 setObject:v112 forKeyedSubscript:off_1000C86A0[0]];

      uint64_t v113 = 0;
      uint64_t v114 = 8;
      do
      {
        v115 = +[NSString stringWithFormat:@"mspBootBlockEraseFails_%llu", v99];
        v116 = [v1 objectForKey:v115];

        if (v116)
        {
          uint64_t v117 = +[NSString stringWithFormat:@"mspBootBlockEraseFails_%llu", v99];
          v118 = [v1 objectForKey:v117];
          v113 += (int)[v118 intValue];
        }
        v99 += v67;
        --v114;
      }
      while (v114);
      uint64_t v119 = +[NSNumber numberWithUnsignedLongLong:v113];
      [v2 setObject:v119 forKeyedSubscript:off_1000C86A8[0]];

      uint64_t v120 = 0;
      uint64_t v121 = 8;
      do
      {
        v122 = +[NSString stringWithFormat:@"mspBootBlockEraseFails_%llu", v114 + 1];
        uint64_t v123 = [v1 objectForKey:v122];

        if (v123)
        {
          v124 = +[NSString stringWithFormat:@"mspBootBlockEraseFails_%llu", v114];
          uint64_t v125 = [v1 objectForKey:v124];
          v120 += (int)[v125 intValue];
        }
        v126 = +[NSString stringWithFormat:@"mspBootBlockEraseFails_%llu", v114 + 2];
        uint64_t v127 = [v1 objectForKey:v126];

        if (v127)
        {
          v128 = +[NSString stringWithFormat:@"mspBootBlockEraseFails_%llu", v114];
          uint64_t v129 = [v1 objectForKey:v128];
          v120 += (int)[v129 intValue];
        }
        v130 = +[NSString stringWithFormat:@"mspBootBlockEraseFails_%llu", v114 + 3];
        uint64_t v131 = [v1 objectForKey:v130];

        if (v131)
        {
          v132 = +[NSString stringWithFormat:@"mspBootBlockEraseFails_%llu", v114];
          uint64_t v133 = [v1 objectForKey:v132];
          v120 += (int)[v133 intValue];
        }
        v114 += v67;
        --v121;
      }
      while (v121);
      uint64_t v134 = +[NSNumber numberWithUnsignedLongLong:v120];
      [v2 setObject:v134 forKeyedSubscript:off_1000C86B0[0]];
    }
  }
  else
  {
    sub_100013EE0("gatherASPFTLOtherData_Stats: ftlDict is NULL", v7, v8, v9, v10, v11, v12, v13, v136);
  }

  return v2;
}

id CopySMagHistoryNANDFTLInfo(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = &AnalyticsIsEventUsed_ptr;
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  [v7 setObject:&off_1000B13C0 forKeyedSubscript:@"com.apple.NANDInfo.IsStatMagSupported"];
  [v7 setObject:@"NA" forKeyedSubscript:@"BuildInSM"];
  uint64_t v13 = sub_10003D9CC(0, 1, 0, v8, v9, v10, v11, v12);
  uint64_t v19 = v13;
  if (a2 | a1)
  {
    sub_10003D9CC(0, 0, a1, v14, v15, v16, v17, v18);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v20 = v13;
  }
  id v28 = v20;
  id v138 = v7;
  if (a1 >= a2)
  {
    sub_100013EE0("CopySMagHistoryNANDFTLInfo: parameters must satisfy lookBackTimeHours1 < lookBackTimeHours2 for deltas", v21, v22, v23, v24, v25, v26, v27, v134);
    id v81 = v28;
  }
  else
  {
    uint64_t v29 = sub_10003D9CC(0, 0, a2, v23, v24, v25, v26, v27);
    signed int v30 = v29;
    char v136 = v19;
    if (v29)
    {
      uint64_t v31 = [v29 objectForKey:@"osBuildStr"];

      if (v31)
      {
        signed int v32 = [v30 objectForKey:@"osBuildStr"];
        uint64_t v33 = sub_100042E7C((uint64_t)[v32 unsignedLongLongValue]);
        [v7 setObject:v33 forKeyedSubscript:@"BuildInSM"];
      }
      uint64_t v34 = [v30 objectForKey:@"magazineInstanceMeta"];

      if (v34)
      {
        uint64_t v35 = [v30 objectForKey:@"magazineInstanceMeta"];
        unsigned int v36 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", ((unint64_t)[v35 unsignedLongLongValue] >> 24));
        [v30 setObject:v36 forKeyedSubscript:@"ESR_magazineTimeStamp"];
      }
    }
    if (!v28) {
      goto LABEL_46;
    }
    unint64_t v37 = [v28 objectForKey:@"magazineInstanceMeta"];

    if (v37)
    {
      unsigned int v38 = [v28 objectForKey:@"magazineInstanceMeta"];
      unsigned int v39 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", ((unint64_t)[v38 unsignedLongLongValue] >> 24));
      [v28 setObject:v39 forKeyedSubscript:@"ESR_magazineTimeStamp"];

      uint64_t v40 = [v28 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"];

      if (v40)
      {
        uint64_t v41 = [v28 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"];
        [v7 setObject:v41 forKeyedSubscript:@"com.apple.NANDInfo.IsStatMagSupported"];
      }
    }
    if (v30)
    {
      uint64_t v42 = [v28 objectForKey:@"ESR_magazineTimeStamp"];
      if (v42)
      {
        uint64_t v50 = (void *)v42;
        unsigned int v51 = [v30 objectForKey:@"ESR_magazineTimeStamp"];

        if (v51)
        {
          uint64_t v52 = [v28 objectForKey:@"ESR_magazineTimeStamp"];
          unint64_t v53 = [v52 unsignedLongLongValue];
          uint64_t v54 = [v30 objectForKey:@"ESR_magazineTimeStamp"];
          double v55 = (double)(unint64_t)(v53 - (unsigned char *)[v54 unsignedLongLongValue]) / 86400.0;

          id v56 = +[NSNumber numberWithDouble:v55];
          [v7 setObject:v56 forKeyedSubscript:off_1000C86C8[0]];

          long long v142 = 0u;
          long long v143 = 0u;
          long long v140 = 0u;
          long long v141 = 0u;
          id v135 = v28;
          id v57 = v28;
          id v58 = [v57 countByEnumeratingWithState:&v140 objects:v144 count:16];
          if (!v58) {
            goto LABEL_44;
          }
          id v59 = v58;
          uint64_t v60 = *(void *)v141;
          unsigned int v137 = a3 & 0xFFFFFFFD;
          unsigned int v139 = a3 - 1;
          while (1)
          {
            for (uint64_t i = 0; i != v59; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v141 != v60) {
                objc_enumerationMutation(v57);
              }
              uint64_t v62 = *(void *)(*((void *)&v140 + 1) + 8 * i);
              id v63 = [v30 objectForKey:v62];
              if (v63) {
                goto LABEL_25;
              }
              int v64 = [v57 objectForKey:v62];
              objc_opt_class();
              char isKindOfClass = objc_opt_isKindOfClass();

              if (isKindOfClass)
              {
                id v63 = [v57 objectForKey:v62];
                [v7 setObject:v63 forKeyedSubscript:v62];
LABEL_25:
              }
              uint64_t v66 = [v30 objectForKey:v62];
              if (v66)
              {
                uint64_t v67 = (void *)v66;
                uint64_t v68 = [off_1000C8630 objectForKey:v62];
                if (!v68) {
                  goto LABEL_34;
                }
                uint64_t v69 = (void *)v68;
                uint64_t v70 = [v30 objectForKey:v62];
                objc_opt_class();
                char v71 = objc_opt_isKindOfClass();

                id v7 = v138;
                if (v71)
                {
                  if (v55 <= 0.0)
                  {
                    uint64_t v72 = [v30 objectForKey:v62];
                    id v75 = [v72 unsignedLongLongValue];
                  }
                  else
                  {
                    uint64_t v72 = [v57 objectForKey:v62];
                    int v73 = [v72 unsignedLongLongValue];
                    BOOL v74 = [v30 objectForKey:v62];
                    id v75 = (id)(v73 - (unsigned char *)[v74 unsignedLongLongValue]);

                    id v7 = v138;
                  }

                  if (!v137)
                  {
                    uint64_t v67 = +[NSNumber numberWithDouble:(double)(unint64_t)v75];
                    [v7 setObject:v67 forKeyedSubscript:v62];
LABEL_34:
                  }
                }
              }
              uint64_t v76 = [off_1000C8628[0] objectForKey:v62];
              if (v76)
              {

                if (v139 <= 1)
                {
                  uint64_t v77 = [v30 objectForKey:v62];

                  if (v77)
                  {
                    int v78 = v30;
                  }
                  else
                  {
                    int v79 = [v57 objectForKey:v62];

                    if (!v79) {
                      continue;
                    }
                    int v78 = v57;
                  }
                  int v80 = [v78 objectForKey:v62];
                  [v7 setObject:v80 forKeyedSubscript:v62];
                }
              }
            }
            id v59 = [v57 countByEnumeratingWithState:&v140 objects:v144 count:16];
            if (!v59)
            {
LABEL_44:

              id v28 = v135;
              uint64_t v6 = &AnalyticsIsEventUsed_ptr;
              goto LABEL_48;
            }
          }
        }
      }
      sub_100013EE0("CopySMagHistoryNANDFTLInfo: Unable to gather other stats magazine deltas", v43, v44, v45, v46, v47, v48, v49, v134);
    }
    else
    {
LABEL_46:
      [v7 addEntriesFromDictionary:v30];
    }
LABEL_48:
    id v81 = v7;

    uint64_t v19 = v136;
  }
  v89 = sub_10003DC64();
  if (v89) {
    [v81 addEntriesFromDictionary:v89];
  }
  else {
    sub_100013EE0("CopySMagHistoryNANDFTLInfo: Unable to gather ESR FTL fields", v82, v83, v84, v85, v86, v87, v88, v134);
  }
  uint64_t v90 = sub_10003DE70(v19);

  if (v90) {
    [v81 addEntriesFromDictionary:v90];
  }
  else {
    sub_100013EE0("CopySMagHistoryNANDFTLInfo: Unable to gather ESR FTL fields", v91, v92, v93, v94, v95, v96, v97, v134);
  }
  id v98 = v81;
  id v99 = v19;
  id v100 = objc_alloc_init((Class)v6[224]);
  if ((!v98 || [v98 count]) && (!v99 || objc_msgSend(v99, "count")))
  {
    uint64_t v101 = [v98 objectForKey:@"bandErases"];
    if (!v101) {
      goto LABEL_66;
    }
    uint64_t v102 = (void *)v101;
    uint64_t v103 = [v99 objectForKey:@"numVirtualBlocks"];
    if (v103)
    {
      uint64_t v104 = (void *)v103;
      v105 = [v99 objectForKey:@"userPartitionStart"];

      if (!v105) {
        goto LABEL_66;
      }
      id v106 = [v99 objectForKey:@"numVirtualBlocks"];
      v107 = [v106 unsignedLongLongValue];
      uint64_t v108 = [v99 objectForKey:@"userPartitionStart"];
      id v109 = [v108 unsignedLongLongValue];

      double v110 = 0.0;
      if (v107 != v109)
      {
        id v111 = [v98 objectForKey:@"bandErases"];
        double v110 = (double)(unint64_t)[v111 unsignedLongLongValue]
             / (double)(unint64_t)(v107 - v109);
      }
      uint64_t v102 = +[NSNumber numberWithDouble:v110];
      [v100 setObject:v102 forKeyedSubscript:@"averageTLCPECycles"];
      id v7 = v138;
    }

LABEL_66:
    uint64_t v112 = [v98 objectForKey:@"intermediateBandErases"];
    if (v112)
    {
      uint64_t v113 = (void *)v112;
      uint64_t v114 = [v99 objectForKey:@"userPartitionStart"];
      if (!v114)
      {
LABEL_72:

        goto LABEL_73;
      }
      v115 = (void *)v114;
      v116 = [v99 objectForKey:@"intermediatePartitionStart"];

      if (v116)
      {
        uint64_t v117 = [v99 objectForKey:@"userPartitionStart"];
        v118 = [v117 unsignedLongLongValue];
        uint64_t v119 = [v99 objectForKey:@"intermediatePartitionStart"];
        uint64_t v120 = [v119 unsignedLongLongValue];

        double v121 = 0.0;
        if (v118 != v120)
        {
          v122 = [v98 objectForKey:@"intermediateBandErases"];
          double v121 = (double)(unint64_t)[v122 unsignedLongLongValue]
               / (double)(unint64_t)(v118 - v120);
        }
        uint64_t v113 = +[NSNumber numberWithDouble:v121];
        [v100 setObject:v113 forKeyedSubscript:@"averageSLCPECycles"];
        id v7 = v138;
        goto LABEL_72;
      }
    }
LABEL_73:
    id v123 = v100;
    goto LABEL_75;
  }
  id v123 = 0;
LABEL_75:

  if (v123) {
    [v98 addEntriesFromDictionary:v123];
  }
  else {
    sub_100013EE0("CopySMagHistoryNANDFTLInfo: Unable to gather new delta fields", v124, v125, v126, v127, v128, v129, v130, v134);
  }
  uint64_t v131 = +[NSString stringWithUTF8String:sub_100013FB0()];
  [v98 setObject:v131 forKeyedSubscript:off_1000C8640[0]];

  id v132 = v98;
  return v132;
}

id CopySMagNANDFTLCustomHistoryInfo(int a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v8 = sub_10003D9CC(0, 0, 0, v3, v4, v5, v6, v7);
  uint64_t v9 = [v8 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"];

  if (v9)
  {
    uint64_t v10 = [v8 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"];
    id v11 = [v10 unsignedLongLongValue];

    if (!v11)
    {
      id v12 = +[NSString stringWithUTF8String:sub_100013FB0()];
      [v2 setObject:v12 forKeyedSubscript:@"com.apple.NANDInfo.ErrorMessage"];
      goto LABEL_50;
    }
  }
  if (a1 || ![off_1000C8708[0] count])
  {
    id v12 = 0;
    id v13 = 0;
    uint64_t v14 = 0;
    goto LABEL_48;
  }
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  id v13 = 0;
  id v12 = 0;
  id v66 = v2;
  do
  {
    uint64_t v69 = v13;
    uint64_t v70 = [off_1000C8708[0] objectAtIndexedSubscript:v15];

    uint64_t v22 = sub_10003D9CC(0, 0, (4 * ++v15), v17, v18, v19, v20, v21);

    id v23 = v8;
    id v24 = v22;
    id v13 = objc_alloc_init((Class)NSMutableDictionary);
    [v13 setObject:&off_1000B13C0 forKeyedSubscript:@"com.apple.NANDInfo.IsStatMagSupported"];
    char v71 = v23;
    uint64_t v72 = v24;
    if (!v23)
    {
      uint64_t v16 = (void *)v70;
      uint64_t v26 = &AnalyticsIsEventUsed_ptr;
      if (!v24) {
        goto LABEL_36;
      }
LABEL_13:
      uint64_t v27 = [v24 objectForKey:@"magazineInstanceMeta"];

      if (!v27) {
        goto LABEL_36;
      }
      goto LABEL_14;
    }
    uint64_t v25 = [v23 objectForKey:@"magazineInstanceMeta"];
    uint64_t v26 = &AnalyticsIsEventUsed_ptr;
    if (!v25)
    {
      uint64_t v16 = (void *)v70;
      if (!v24) {
        goto LABEL_36;
      }
      goto LABEL_13;
    }

LABEL_14:
    unint64_t v67 = v15;
    id v28 = [v71 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"];

    if (v28)
    {
      uint64_t v29 = [v71 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"];
      [v13 setObject:v29 forKeyedSubscript:@"com.apple.NANDInfo.IsStatMagSupported"];
    }
    id v30 = v71;
    id v31 = v24;
    if (v71
      && ([v30 objectForKey:@"magazineInstanceMeta"],
          signed int v32 = objc_claimAutoreleasedReturnValue(),
          v32,
          v32))
    {
      uint64_t v33 = [v30 objectForKey:@"magazineInstanceMeta"];
      uint64_t v34 = ((unint64_t)[v33 unsignedLongLongValue] >> 24);
    }
    else
    {
      uint64_t v34 = 0;
    }
    double v35 = 0.0;
    uint64_t v68 = v14;
    if (v31)
    {
      unsigned int v36 = [v31 objectForKey:@"magazineInstanceMeta"];

      if (v36)
      {
        unint64_t v37 = [v31 objectForKey:@"magazineInstanceMeta"];
        unint64_t v38 = (unint64_t)[v37 unsignedLongLongValue] >> 24;

        double v35 = (double)(v34 - v38) / 86400.0;
      }
    }

    unsigned int v39 = [v26[226] numberWithDouble:v35];
    [v13 setObject:v39 forKeyedSubscript:off_1000C86C8[0]];

    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    id v40 = v31;
    id v41 = [v40 countByEnumeratingWithState:&v73 objects:v77 count:16];
    if (v41)
    {
      id v42 = v41;
      uint64_t v43 = *(void *)v74;
      do
      {
        for (uint64_t i = 0; i != v42; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v74 != v43) {
            objc_enumerationMutation(v40);
          }
          uint64_t v45 = *(void *)(*((void *)&v73 + 1) + 8 * i);
          uint64_t v46 = [v30 objectForKey:v45];

          if (v46)
          {
            double v47 = 0.0;
            if (v35 > 0.0)
            {
              uint64_t v48 = [v30 objectForKey:v45];
              objc_opt_class();
              char isKindOfClass = objc_opt_isKindOfClass();

              if (isKindOfClass)
              {
                uint64_t v50 = [v30 objectForKey:v45];
                unsigned int v51 = [v50 unsignedLongLongValue];
                uint64_t v52 = [v40 objectForKey:v45];
                double v47 = (double)(unint64_t)(v51 - (unsigned char *)[v52 unsignedLongLongValue]);

                uint64_t v26 = &AnalyticsIsEventUsed_ptr;
              }
            }
            unint64_t v53 = [v26[226] numberWithDouble:v47];
            [v13 setObject:v53 forKeyedSubscript:v45];
          }
        }
        id v42 = [v40 countByEnumeratingWithState:&v73 objects:v77 count:16];
      }
      while (v42);
    }

    uint64_t v54 = +[NSString stringWithUTF8String:sub_100013FB0()];
    [v13 setObject:v54 forKeyedSubscript:off_1000C8640[0]];

    id v2 = v66;
    unint64_t v15 = v67;
    uint64_t v14 = v68;
    uint64_t v16 = (void *)v70;
LABEL_36:

    [v2 setObject:&off_1000B13C0 forKeyedSubscript:v16];
    double v55 = [v13 objectForKey:@"gcWrites"];

    if (v55)
    {
      id v56 = [v13 objectForKey:@"gcWrites"];
      id v57 = [v56 unsignedLongLongValue];

      if (v57)
      {
        double v58 = 1.0;
        uint64_t v59 = 1;
        while (1)
        {
          uint64_t v60 = v14;
          uint64_t v14 = +[NSString stringWithFormat:@"vcurve_%d", v59];

          unsigned int v61 = [v72 objectForKey:v14];

          if (v61)
          {
            uint64_t v62 = [v72 objectForKey:v14];
            id v63 = [v62 unsignedLongLongValue];

            if (v14) {
              double v58 = v58 - (double)(uint64_t)v63 * ((double)(int)v59 * -0.033 + 1.0);
            }
          }
          if (v58 <= 0.0) {
            break;
          }
          uint64_t v59 = (v59 + 1);
          if (v59 == 32)
          {
            LODWORD(v59) = 32;
            break;
          }
        }
        int v64 = [v26[226] numberWithDouble:1.0 / ((double)(int)v59 * -0.033 + 1.0)];
        [v2 setObject:v64 forKeyedSubscript:v16];
      }
    }
    id v12 = v72;

    uint64_t v8 = v12;
  }
  while ((unint64_t)[off_1000C8708[0] count] > v15);

  uint64_t v8 = v12;
LABEL_48:

LABEL_50:
  return v2;
}

id CopyWhitelistedNANDMSPInfo()
{
  id v113 = objc_alloc_init((Class)NSMutableDictionary);
  v118 = 0;
  uint64_t v119 = 0;
  uint64_t v7 = &off_1000C8000;
  uint64_t v8 = (char **)qword_1000C88F0;
  uint64_t v9 = &AnalyticsIsEventUsed_ptr;
  if (qword_1000C88F0)
  {
    v118 = (char **)qword_1000C88F0;
  }
  else
  {
    if (!sub_10003B2C4(&v118))
    {
      signed int v32 = "gatherASPMSPData: Could not get nand_exporter_t";
      goto LABEL_16;
    }
    uint64_t v8 = v118;
  }
  uint64_t v10 = (uint64_t (*)(void))v8[7];
  if (!v10 || !v8[17])
  {
    signed int v32 = "gatherASPMSPData: Controller does not support MSP data";
LABEL_16:
    sub_100013EE0(v32, v0, v1, v2, v3, v4, v5, v6, v109);
    id v13 = 0;
    goto LABEL_17;
  }
  uint64_t v11 = v10();
  if (!*((_DWORD *)v118 + 4))
  {
    signed int v32 = "gatherASPMSPData: No io_connection exist";
    goto LABEL_16;
  }
  uint64_t v12 = v11;
  id v13 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v14 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405F07FB98uLL);
  if (!v14)
  {
    sub_100013EE0("gatherASPMSPData: Memory allocation issue!", v15, v16, v17, v18, v19, v20, v21, v109);
    goto LABEL_17;
  }
  uint64_t v22 = v14;
  unsigned int v23 = 0;
  v14[8] = 0;
  while (1)
  {
    uint64_t v119 = 0;
    id v24 = sub_10003AAE8(v118, *(_DWORD *)(v12 + 4), 0, v23, &v119, 0, 1);
    if (!v24) {
      break;
    }
    free(v24);
    if (++v23 == 9)
    {
      v22[8] = 9;
      goto LABEL_48;
    }
  }
  v22[8] = v23;
  if (v23)
  {
LABEL_48:
    int v79 = (char *)malloc_type_calloc(v23, 0x20uLL, 0x20040DC1BFBCFuLL);
    if (v79)
    {
      int v80 = v79;
      *(void *)uint64_t v22 = v79;
      if (!v22[8])
      {
        uint64_t v101 = 0;
LABEL_72:
        free(v80);
        goto LABEL_73;
      }
      id v111 = v13;
      uint64_t v81 = 0;
      unint64_t v82 = 0;
      uint64_t v83 = 0;
      while (1)
      {
        uint64_t v119 = 0;
        uint64_t v84 = sub_10003AAE8(v118, *(_DWORD *)(v12 + 4), 0, v82, &v119, 0, 0);
        if (!v84)
        {
          sub_100013EE0("gatherASPMSPData: getNANDMSPBuffer tunnel command failed !", v85, v86, v87, v88, v89, v90, v91, v109);
          goto LABEL_63;
        }
        uint64_t v92 = v84;
        if (!((unsigned int (*)(char *, void *, void))v118[17])(v80, v84, v119)) {
          break;
        }
        BOOL v100 = v82 < v22[8];
        uint64_t v101 = sub_100044230((uint64_t *)(*(void *)v22 + v81), 0);

        char v109 = v82;
        uint64_t v102 = +[NSString stringWithFormat:@"%d"];
        [v111 setObject:v101 forKeyedSubscript:v102];

        uint64_t v103 = v118[20];
        if (v103) {
          ((void (*)(uint64_t))v103)(*(void *)v22 + v81);
        }
        v80 += 32 * v100;
        free(v92);
        ++v82;
        unint64_t v104 = v22[8];
        v81 += 32;
        uint64_t v83 = v101;
        if (v82 >= v104)
        {
          uint64_t v7 = &off_1000C8000;
          goto LABEL_65;
        }
      }
      sub_100013EE0("gatherASPMSPData: parseMSP failed !", v93, v94, v95, v96, v97, v98, v99, v109);
      free(v92);
LABEL_63:
      uint64_t v7 = &off_1000C8000;
      goto LABEL_64;
    }
    id v111 = v13;
    v105 = "gatherASPMSPData: Could not allocate memory for genericPCxt";
  }
  else
  {
    id v111 = v13;
    v105 = "gatherASPMSPData: Unable to gather any NAND MSP fields";
  }
  sub_100013EE0(v105, v25, v26, v27, v28, v29, v30, v31, v109);
  uint64_t v83 = 0;
LABEL_64:
  LODWORD(v104) = v22[8];
  uint64_t v101 = v83;
LABEL_65:
  id v13 = v111;
  if (v104)
  {
    uint64_t v106 = 0;
    unint64_t v107 = 0;
    do
    {
      if (*(void *)v22)
      {
        uint64_t v108 = v118[20];
        if (v108)
        {
          ((void (*)(uint64_t))v108)(*(void *)v22 + v106);
          LODWORD(v104) = v22[8];
        }
      }
      ++v107;
      v106 += 32;
    }
    while (v107 < v104);
  }
  int v80 = *(char **)v22;
  uint64_t v9 = &AnalyticsIsEventUsed_ptr;
  if (*(void *)v22) {
    goto LABEL_72;
  }
LABEL_73:
  free(v22);

LABEL_17:
  if (!v7[286] && v118) {
    sub_10003B410((uint64_t)v118);
  }
  if (v13)
  {
    double v47 = sub_1000404CC();
    if (!v47) {
      sub_100013EE0("CopyWhitelistedNANDMSPInfo: Unable to gather ESR MSP fields", v40, v41, v42, v43, v44, v45, v46, v109);
    }
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    id v110 = v13;
    id v48 = v13;
    id v49 = [v48 countByEnumeratingWithState:&v114 objects:v120 count:16];
    if (v49)
    {
      id v50 = v49;
      id v51 = 0;
      uint64_t v52 = *(void *)v115;
      uint64_t v112 = v47;
      do
      {
        for (uint64_t i = 0; i != v50; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v115 != v52) {
            objc_enumerationMutation(v48);
          }
          uint64_t v54 = *(void *)(*((void *)&v114 + 1) + 8 * i);
          double v55 = [v48 objectForKey:v54];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v56 = [v48 objectForKey:v54];
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();

            if (isKindOfClass)
            {
              id v58 = objc_alloc((Class)NSMutableDictionary);
              uint64_t v59 = [v48 objectForKey:v54];
              id v60 = [v58 initWithDictionary:v59];

              id v51 = v60;
              id v68 = objc_alloc_init((Class)NSMutableDictionary);
              if (v51)
              {
                uint64_t v69 = [v51 objectForKey:off_1000C8810];

                if (v69)
                {
                  uint64_t v70 = [v51 objectForKey:off_1000C8810];
                  unint64_t v71 = (unint64_t)[v70 unsignedLongLongValue];

                  uint64_t v72 = +[NSNumber numberWithUnsignedLongLong:(unsigned __int16)v71];
                  [v68 setObject:v72 forKeyedSubscript:off_1000C8818];

                  long long v73 = +[NSNumber numberWithUnsignedLongLong:WORD1(v71)];
                  [v68 setObject:v73 forKeyedSubscript:off_1000C8820];

                  long long v74 = +[NSNumber numberWithUnsignedLongLong:WORD2(v71)];
                  [v68 setObject:v74 forKeyedSubscript:off_1000C8828];

                  double v47 = v112;
                  long long v75 = +[NSNumber numberWithUnsignedLongLong:HIWORD(v71)];
                  [v68 setObject:v75 forKeyedSubscript:off_1000C8830];
                }
              }
              else
              {
                sub_100013EE0("gatherMSPOtherData: Unable to gather other MSP data", v61, v62, v63, v64, v65, v66, v67, v109);
              }

              [v51 addEntriesFromDictionary:v68];
              if (v47 && v51) {
                [v51 addEntriesFromDictionary:v47];
              }
              [v113 setObject:v51 forKeyedSubscript:v54];
            }
          }
          else
          {
          }
        }
        id v50 = [v48 countByEnumeratingWithState:&v114 objects:v120 count:16];
      }
      while (v50);
    }
    else
    {
      id v51 = 0;
    }

    uint64_t v9 = &AnalyticsIsEventUsed_ptr;
    id v13 = v110;
  }
  else
  {
    sub_100013EE0("CopyWhitelistedNANDMSPInfo: Unable to gather MSP fields", v33, v34, v35, v36, v37, v38, v39, v109);
    id v51 = 0;
  }
  long long v76 = [v9[228] stringWithUTF8String:sub_100013FB0()];
  [v113 setObject:v76 forKeyedSubscript:off_1000C8640[0]];

  id v77 = v113;
  return v77;
}

id sub_1000404CC()
{
  id v0 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v6 = sub_10003D9CC(0, 1, 0, v1, v2, v3, v4, v5);
  uint64_t v14 = v6;
  if (v6)
  {
    uint64_t v15 = sub_10003DE70(v6);
    if (v15)
    {
      uint64_t v16 = (void *)v15;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      uint64_t v17 = off_1000C8760;
      id v18 = [v17 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v27;
        do
        {
          for (uint64_t i = 0; i != v19; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v27 != v20) {
              objc_enumerationMutation(v17);
            }
            uint64_t v22 = *(void *)(*((void *)&v26 + 1) + 8 * i);
            unsigned int v23 = [v16 objectForKey:v22];

            if (v23)
            {
              id v24 = [v16 objectForKeyedSubscript:v22];
              [v0 setObject:v24 forKeyedSubscript:v22];
            }
          }
          id v19 = [v17 countByEnumeratingWithState:&v26 objects:v30 count:16];
        }
        while (v19);
      }
    }
  }
  else
  {
    sub_100013EE0("gatherASPOtherData: Unable to get FTL stats", v7, v8, v9, v10, v11, v12, v13, v26);
  }

  return v0;
}

id CopyWhitelistedStorageStats()
{
  id v0 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v1 = sub_1000404CC();
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = [v1 objectForKey:off_1000C8670[0]];

    if (v3)
    {
      uint64_t v4 = [v2 objectForKeyedSubscript:off_1000C8670[0]];
      [v0 setObject:v4 forKeyedSubscript:off_1000C8670[0]];
    }
    uint64_t v5 = [v2 objectForKey:off_1000C8650[0]];

    if (v5)
    {
      uint64_t v6 = [v2 objectForKeyedSubscript:off_1000C8650[0]];
      [v0 setObject:v6 forKeyedSubscript:off_1000C8650[0]];
    }
    uint64_t v7 = [v2 objectForKey:off_1000C8660[0]];

    if (v7)
    {
      uint64_t v8 = [v2 objectForKeyedSubscript:off_1000C8660[0]];
      [v0 setObject:v8 forKeyedSubscript:off_1000C8660[0]];
    }
    uint64_t v9 = [v2 objectForKey:off_1000C8658[0]];

    if (v9)
    {
      uint64_t v10 = [v2 objectForKeyedSubscript:off_1000C8658[0]];
      [v0 setObject:v10 forKeyedSubscript:off_1000C8658[0]];
    }
    uint64_t v11 = [v2 objectForKey:off_1000C8668[0]];

    if (v11)
    {
      uint64_t v12 = [v2 objectForKeyedSubscript:off_1000C8668[0]];
      [v0 setObject:v12 forKeyedSubscript:off_1000C8668[0]];
    }
    uint64_t v13 = [v2 objectForKey:off_1000C8648[0]];

    if (v13)
    {
      uint64_t v14 = [v2 objectForKeyedSubscript:off_1000C8648[0]];
      [v0 setObject:v14 forKeyedSubscript:off_1000C8648[0]];
    }
  }
  uint64_t v15 = +[NSNumber numberWithUnsignedLongLong:sub_100042008(1682065731)];
  [v0 setObject:v15 forKeyedSubscript:off_1000C8718[0]];

  uint64_t v16 = +[NSNumber numberWithUnsignedLongLong:sub_100042008(1682723912)];
  [v0 setObject:v16 forKeyedSubscript:off_1000C8720[0]];

  uint64_t v17 = +[NSNumber numberWithUnsignedLongLong:sub_1000421C8(1768322865)];
  [v0 setObject:v17 forKeyedSubscript:off_1000C8740[0]];

  id v18 = +[NSNumber numberWithUnsignedLongLong:sub_1000421C8(1682065731)];
  [v0 setObject:v18 forKeyedSubscript:off_1000C8728[0]];

  id v19 = +[NSNumber numberWithUnsignedLongLong:sub_1000421C8(1682723912)];
  [v0 setObject:v19 forKeyedSubscript:off_1000C8750[0]];

  uint64_t v20 = +[NSNumber numberWithUnsignedLongLong:sub_1000421C8(1682138727)];
  [v0 setObject:v20 forKeyedSubscript:off_1000C8730[0]];

  uint64_t v21 = +[NSNumber numberWithUnsignedLongLong:sub_1000421C8(1715693159)];
  [v0 setObject:v21 forKeyedSubscript:off_1000C8738[0]];

  uint64_t v22 = +[NSNumber numberWithUnsignedLongLong:sub_1000421C8(1852139127)];
  [v0 setObject:v22 forKeyedSubscript:off_1000C8758];

  unsigned int v23 = +[NSNumber numberWithUnsignedLongLong:sub_1000421C8(1280329037)];
  [v0 setObject:v23 forKeyedSubscript:off_1000C8748[0]];

  if (!v0) {
    sub_100013EE0("CopyWhitelistedNANDFTLInfo: Unable to gather other FTL fields", v24, v25, v26, v27, v28, v29, v30, v33);
  }
  uint64_t v31 = +[NSString stringWithUTF8String:sub_100013FB0()];
  [v0 setObject:v31 forKeyedSubscript:off_1000C8640[0]];

  return v0;
}

id sub_100040ADC()
{
  if (qword_1000C88E8)
  {
    id v0 = +[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:");
  }
  else
  {
    uint64_t v1 = sub_100042A74();
    uint64_t v2 = [v1 objectForKey:@"swapins"];
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      uint64_t v4 = [v1 objectForKey:@"vm.pagesize"];

      if (v4)
      {
        uint64_t v5 = [v1 objectForKey:@"swapins"];
        id v6 = [v5 longLongValue];
        uint64_t v7 = [v1 objectForKey:@"vm.pagesize"];
        uint64_t v8 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", (void)[v7 longLongValue] * (void)v6);
        [v1 setObject:v8 forKeyedSubscript:off_1000C86E0[0]];
      }
    }
    uint64_t v9 = [v1 objectForKey:@"swapouts"];
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      uint64_t v11 = [v1 objectForKey:@"vm.pagesize"];

      if (v11)
      {
        uint64_t v12 = [v1 objectForKey:@"swapouts"];
        id v13 = [v12 longLongValue];
        uint64_t v14 = [v1 objectForKey:@"vm.pagesize"];
        uint64_t v15 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", (void)[v14 longLongValue] * (void)v13);
        [v1 setObject:v15 forKeyedSubscript:off_1000C86E8[0]];
      }
    }
    uint64_t v16 = sub_100042868();
    uint64_t v17 = +[NSNumber numberWithUnsignedInt:v16];
    [v1 setObject:v17 forKeyedSubscript:@"ESR_DaysSinceLastSWUpdate"];

    if (v16 <= 0xD) {
      id v18 = &off_1000B13C0;
    }
    else {
      id v18 = &off_1000B1468;
    }
    [v1 setObject:v18 forKeyedSubscript:@"ESR_Gt2WeeksSinceSWUpdate"];
    sub_100042928();
    id v19 = +[NSNumber numberWithInt:sub_100042928()];
    [v1 setObject:v19 forKeyedSubscript:@"ESR_WeeksSinceLastSWRestore"];

    uint64_t v20 = (void *)qword_1000C88E8;
    qword_1000C88E8 = (uint64_t)v1;
    id v21 = v1;

    id v0 = +[NSDictionary dictionaryWithDictionary:qword_1000C88E8];
  }

  return v0;
}

id LogStorageUIDatatoCA(void *a1, int a2)
{
  uint64_t v2 = sub_100042EF4(a1);
  uint64_t v14 = objc_opt_new();
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_100041048;
        v16[3] = &unk_100090B48;
        v16[4] = v8;
        if (sub_100040F8C((uint64_t)off_1000C87D0, v16))
        {
          if (a2) {
            [v14 addObject:v8];
          }
        }
        else
        {
          uint64_t v9 = [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent];
          uint64_t v10 = +[NSString stringWithUTF8String:"LogStorageUIDatatoCA"];
          NSLog(@"%@: %@: FAILED to log %@ using AnalyticsSendEventLazy\n", v9, v10, off_1000C87D0);
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v5);
  }

  if (a2)
  {
    uint64_t v11 = v14;
    id v12 = v14;
  }
  else
  {
    id v12 = 0;
    uint64_t v11 = v14;
  }

  return v12;
}

uint64_t sub_100040F8C(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v10 = v2;
  if (&_AnalyticsSendEventLazy)
  {
    id v14 = v2;
    uint64_t v11 = AnalyticsSendEventLazy();
  }
  else
  {
    sub_100013EE0("AnalyticsSendEventLazy SPI does not exist", v3, v4, v5, v6, v7, v8, v9, v13);
    uint64_t v11 = 0;
  }

  return v11;
}

id sub_100041048(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100041050()
{
  id v0 = +[NSUserDefaults standardUserDefaults];
  id v1 = objc_alloc_init((Class)NSMutableDictionary);
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  id v114 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v3 = sub_100042A74();
  uint64_t v4 = [v0 objectForKey:@"previous_xnustats_dict"];

  if (v4)
  {
    long long v116 = [v0 objectForKey:@"previous_xnustats_dict"];
  }
  else
  {
    [v0 setObject:v3 forKey:@"previous_xnustats_dict"];
    [v0 synchronize];
    long long v116 = 0;
  }
  long long v115 = v2;
  if (!v3)
  {
    uint64_t v7 = 0;
    goto LABEL_88;
  }
  id v109 = v1;
  id v110 = v0;
  [v2 setObject:@"current" forKeyedSubscript:@"ESR_Cadence"];
  long long v139 = 0u;
  long long v140 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  id v5 = [&off_1000C1708 countByEnumeratingWithState:&v137 objects:v146 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)v138;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v138 != v8) {
          objc_enumerationMutation(&off_1000C1708);
        }
        uint64_t v10 = *(void **)(*((void *)&v137 + 1) + 8 * i);
        uint64_t v11 = [v3 objectForKey:v10];
        if (v11)
        {
          id v12 = (void *)v11;
          char v13 = [v3 objectForKey:v10];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          if (isKindOfClass)
          {
            uint64_t v15 = [v10 stringByReplacingOccurrencesOfString:@"." withString:@"_"];
            uint64_t v16 = +[NSString stringWithFormat:@"host_vm_info64_%@", v15];

            long long v17 = [v3 objectForKey:v10];
            [v115 setObject:v17 forKeyedSubscript:v16];

            uint64_t v7 = (void *)v16;
          }
        }
      }
      id v6 = [&off_1000C1708 countByEnumeratingWithState:&v137 objects:v146 count:16];
    }
    while (v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v135 = 0u;
  long long v136 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  id v18 = [&off_1000C16F0 countByEnumeratingWithState:&v133 objects:v145 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v134;
    do
    {
      for (uint64_t j = 0; j != v19; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v134 != v20) {
          objc_enumerationMutation(&off_1000C16F0);
        }
        uint64_t v22 = *(void **)(*((void *)&v133 + 1) + 8 * (void)j);
        unsigned int v23 = [v3 objectForKey:v22];
        objc_opt_class();
        char v24 = objc_opt_isKindOfClass();

        if (v24)
        {
          uint64_t v25 = [v22 stringByReplacingOccurrencesOfString:@"." withString:@"_"];
          uint64_t v26 = +[NSString stringWithFormat:@"sysctl_%@", v25];

          uint64_t v27 = [v3 objectForKey:v22];
          [v115 setObject:v27 forKeyedSubscript:v26];

          uint64_t v7 = (void *)v26;
        }
      }
      id v19 = [&off_1000C16F0 countByEnumeratingWithState:&v133 objects:v145 count:16];
    }
    while (v19);
  }
  long long v131 = 0u;
  long long v132 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  id v28 = [&off_1000C16D8 countByEnumeratingWithState:&v129 objects:v144 count:16];
  if (v28)
  {
    id v29 = v28;
    uint64_t v30 = *(void *)v130;
    do
    {
      for (uint64_t k = 0; k != v29; uint64_t k = (char *)k + 1)
      {
        if (*(void *)v130 != v30) {
          objc_enumerationMutation(&off_1000C16D8);
        }
        signed int v32 = *(void **)(*((void *)&v129 + 1) + 8 * (void)k);
        char v33 = [v3 objectForKey:v32];

        if (v33)
        {
          uint64_t v34 = [v32 stringByReplacingOccurrencesOfString:@"." withString:@"_"];
          uint64_t v35 = +[NSString stringWithFormat:@"sysctl_%@", v34];

          uint64_t v36 = [v3 objectForKey:v32];
          [v115 setObject:v36 forKeyedSubscript:v35];

          uint64_t v7 = (void *)v35;
        }
      }
      id v29 = [&off_1000C16D8 countByEnumeratingWithState:&v129 objects:v144 count:16];
    }
    while (v29);
  }
  [v115 setObject:&off_1000B13C0 forKeyedSubscript:@"ESR_deltaDays"];
  if (!v116)
  {
    id v1 = v109;
    goto LABEL_64;
  }
  uint64_t v112 = v7;
  [v114 setObject:@"daily" forKeyedSubscript:@"ESR_Cadence"];
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  id v37 = [&off_1000C1708 countByEnumeratingWithState:&v125 objects:v143 count:16];
  if (v37)
  {
    id v38 = v37;
    uint64_t v39 = *(void *)v126;
    do
    {
      for (uint64_t m = 0; m != v38; uint64_t m = (char *)m + 1)
      {
        if (*(void *)v126 != v39) {
          objc_enumerationMutation(&off_1000C1708);
        }
        uint64_t v41 = *(void **)(*((void *)&v125 + 1) + 8 * (void)m);
        uint64_t v42 = [v116 objectForKey:v41];
        if (v42)
        {
          uint64_t v43 = (void *)v42;
          uint64_t v44 = [v3 objectForKey:v41];
          if (v44)
          {
            uint64_t v45 = (void *)v44;
            uint64_t v46 = [v3 objectForKey:v41];
            objc_opt_class();
            char v47 = objc_opt_isKindOfClass();

            if ((v47 & 1) == 0) {
              continue;
            }
            id v48 = [v41 stringByReplacingOccurrencesOfString:@"." withString:@"_"];
            uint64_t v49 = +[NSString stringWithFormat:@"host_vm_info64_%@", v48];

            uint64_t v43 = [v3 objectForKey:v41];
            id v50 = [v43 unsignedLongLongValue];
            id v51 = [v116 objectForKey:v41];
            uint64_t v52 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v50 - (unsigned char *)[v51 unsignedLongLongValue]);
            [v114 setObject:v52 forKeyedSubscript:v49];

            uint64_t v112 = (void *)v49;
          }
        }
      }
      id v38 = [&off_1000C1708 countByEnumeratingWithState:&v125 objects:v143 count:16];
    }
    while (v38);
  }
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  id v53 = [&off_1000C16F0 countByEnumeratingWithState:&v121 objects:v142 count:16];
  if (!v53)
  {
    uint64_t v7 = v112;
    goto LABEL_66;
  }
  id v54 = v53;
  uint64_t v55 = *(void *)v122;
  uint64_t v7 = v112;
  do
  {
    id v56 = 0;
    id v113 = v54;
    do
    {
      if (*(void *)v122 != v55) {
        objc_enumerationMutation(&off_1000C16F0);
      }
      id v57 = *(void **)(*((void *)&v121 + 1) + 8 * (void)v56);
      uint64_t v58 = [v116 objectForKey:v57];
      if (v58)
      {
        uint64_t v59 = (void *)v58;
        uint64_t v60 = [v3 objectForKey:v57];
        if (!v60) {
          goto LABEL_58;
        }
        uint64_t v61 = (void *)v60;
        uint64_t v62 = [v3 objectForKey:v57];
        objc_opt_class();
        char v63 = objc_opt_isKindOfClass();

        if (v63)
        {
          uint64_t v64 = [v57 stringByReplacingOccurrencesOfString:@"." withString:@"_"];
          uint64_t v65 = +[NSString stringWithFormat:@"sysctl_%@", v64];

          uint64_t v59 = [v3 objectForKey:v57];
          uint64_t v66 = [v59 unsignedLongLongValue];
          uint64_t v67 = [v116 objectForKey:v57];
          id v68 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v66 - (unsigned char *)[v67 unsignedLongLongValue]);
          [v114 setObject:v68 forKeyedSubscript:v65];

          uint64_t v7 = (void *)v65;
          id v54 = v113;
LABEL_58:

          goto LABEL_60;
        }
        id v54 = v113;
      }
LABEL_60:
      id v56 = (char *)v56 + 1;
    }
    while (v54 != v56);
    id v54 = [&off_1000C16F0 countByEnumeratingWithState:&v121 objects:v142 count:16];
  }
  while (v54);
LABEL_66:
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  id v69 = [&off_1000C16D8 countByEnumeratingWithState:&v117 objects:v141 count:16];
  if (v69)
  {
    id v70 = v69;
    uint64_t v71 = *(void *)v118;
    do
    {
      for (uint64_t n = 0; n != v70; uint64_t n = (char *)n + 1)
      {
        if (*(void *)v118 != v71) {
          objc_enumerationMutation(&off_1000C16D8);
        }
        long long v73 = *(void **)(*((void *)&v117 + 1) + 8 * (void)n);
        long long v74 = [v3 objectForKey:v73];

        if (v74)
        {
          long long v75 = [v73 stringByReplacingOccurrencesOfString:@"." withString:@"_"];
          uint64_t v76 = +[NSString stringWithFormat:@"sysctl_%@", v75];

          id v77 = [v3 objectForKey:v73];
          [v114 setObject:v77 forKeyedSubscript:v76];

          uint64_t v7 = (void *)v76;
        }
      }
      id v70 = [&off_1000C16D8 countByEnumeratingWithState:&v117 objects:v141 count:16];
    }
    while (v70);
  }
  [v114 setObject:&off_1000B13C0 forKeyedSubscript:@"ESR_onSameBuild"];
  uint64_t v78 = [v116 objectForKey:@"kern.osrevision"];
  if (v78)
  {
    int v79 = (void *)v78;
    int v80 = [v3 objectForKey:@"kern.osrevision"];

    if (v80)
    {
      uint64_t v81 = [v116 objectForKey:@"kern.osrevision"];
      unint64_t v82 = [v3 objectForKey:@"kern.osrevision"];

      if (v81 == v82) {
        [v114 setObject:&off_1000B1468 forKeyedSubscript:@"ESR_onSameBuild"];
      }
    }
  }
  [v114 setObject:&off_1000B13C0 forKeyedSubscript:@"ESR_didReset"];
  uint64_t v83 = [v116 objectForKey:@"unix_epoch"];
  id v1 = v109;
  id v0 = v110;
  if (v83)
  {
    uint64_t v84 = (void *)v83;
    uint64_t v85 = [v3 objectForKey:@"unix_epoch"];

    if (v85)
    {
      uint64_t v86 = [v3 objectForKey:@"unix_epoch"];
      uint64_t v87 = [v86 unsignedLongLongValue];
      uint64_t v88 = [v116 objectForKey:@"unix_epoch"];
      uint64_t v89 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(unint64_t)(v87 - (unsigned char *)[v88 unsignedLongLongValue]) / 86400.0);
      [v114 setObject:v89 forKeyedSubscript:@"ESR_deltaDays"];

      uint64_t v90 = [v114 objectForKeyedSubscript:@"ESR_deltaDays"];
      LODWORD(v88) = [v90 intValue];

      if ((int)v88 >= 3) {
        [v114 setObject:&off_1000B1408 forKeyedSubscript:@"ESR_deltaDays"];
      }
      uint64_t v91 = [v3 objectForKey:@"bootTime"];

      if (v91)
      {
        uint64_t v92 = [v3 objectForKey:@"bootTime"];
        id v93 = [v92 unsignedLongLongValue];
        uint64_t v94 = [v116 objectForKey:@"unix_epoch"];
        if (v93 <= [v94 unsignedLongLongValue])
        {
        }
        else
        {
          uint64_t v95 = [v3 objectForKey:@"bootTime"];
          id v96 = [v95 unsignedLongLongValue];
          uint64_t v97 = [v3 objectForKey:@"unix_epoch"];
          id v98 = [v97 unsignedLongLongValue];

          if (v96 < v98) {
            [v114 setObject:&off_1000B1468 forKeyedSubscript:@"ESR_didReset"];
          }
LABEL_64:
          id v0 = v110;
        }
      }
    }
  }
LABEL_88:
  id v99 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v100 = sub_100042868();
  uint64_t v101 = +[NSNumber numberWithUnsignedInt:v100];
  [v99 setObject:v101 forKeyedSubscript:@"ESR_DaysSinceLastSWUpdate"];

  if (v100 <= 0xD) {
    uint64_t v102 = &off_1000B13C0;
  }
  else {
    uint64_t v102 = &off_1000B1468;
  }
  [v99 setObject:v102 forKeyedSubscript:@"ESR_Gt2WeeksSinceSWUpdate"];
  sub_100042928();
  uint64_t v103 = +[NSNumber numberWithInt:sub_100042928()];
  [v99 setObject:v103 forKeyedSubscript:@"ESR_WeeksSinceLastSWRestore"];

  if (v114)
  {
    if (v99)
    {
      [v114 addEntriesFromDictionary:v99];
      [v1 setObject:v114 forKeyedSubscript:@"daily"];
      unint64_t v104 = [v3 objectForKey:off_1000C86F0[0]];

      if (v104)
      {
        v105 = [v3 objectForKey:off_1000C86F0[0]];
        [v114 setObject:v105 forKeyedSubscript:off_1000C86F0[0]];
      }
    }
  }
  if (v115)
  {
    if (v99)
    {
      [v115 addEntriesFromDictionary:v99];
      [v1 setObject:v115 forKeyedSubscript:@"current"];
      uint64_t v106 = [v3 objectForKey:off_1000C86F0[0]];

      if (v106)
      {
        unint64_t v107 = [v3 objectForKey:off_1000C86F0[0]];
        [v115 setObject:v107 forKeyedSubscript:off_1000C86F0[0]];
      }
    }
  }
  [v0 setObject:v3 forKey:@"previous_xnustats_dict"];
  [v0 synchronize];

  return v1;
}

uint64_t sub_100041EF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t SetGeomErrorPayloadCnt(uint64_t result)
{
  dword_1000C88F8 = result;
  return result;
}

uint64_t GetGeomErrorPayloadCnt()
{
  return dword_1000C88F8;
}

id sub_100041F18(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100041F20(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100041F28(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100041F30(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100041F38(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100041F40(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100041F48(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100041F50(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

BOOL sub_100041F58(id a1, NSDictionary *a2)
{
  id v2 = a2;
  uint64_t v3 = off_1000C87D8;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100041FF8;
  v6[3] = &unk_100090B48;
  uint64_t v7 = v2;
  uint64_t v4 = v2;
  LOBYTE(v3) = sub_100040F8C((uint64_t)v3, v6);

  return (char)v3;
}

id sub_100041FF8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100042000(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_100042008(uint64_t a1)
{
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  *(void *)connectiouint64_t n = 0;
  uint64_t v6 = 0;
  if (sub_100042130(connection))
  {
    uint64_t input = a1;
    uint64_t v2 = IOConnectCallMethod(connection[1], 3u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
    if (v2)
    {
      NSLog(@"GetImageSize: IOConnectCallMethod failed (key (%u): %c%c%c%c) kernResult:%x\n", a1, BYTE3(a1), BYTE2(a1), BYTE1(a1), a1, v2);
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v3 = output;
    }
    if (connection[1])
    {
      IOServiceClose(connection[1]);
      connection[1] = 0;
    }
    if (connection[0]) {
      IOObjectRelease(connection[0]);
    }
  }
  else
  {
    NSLog(@"GetEANImageSize: Unable to get EAN Io service connection for key (%u): %c%c%c%c\n", a1, BYTE3(a1), BYTE2(a1), BYTE1(a1), a1);
    return 0;
  }
  return v3;
}

uint64_t sub_100042130(io_service_t *a1)
{
  CFDictionaryRef v2 = IOServiceMatching("AppleNVMeEAN");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v2);
  *a1 = MatchingService;
  if (!MatchingService)
  {
    NSLog(@"getEANConnection: Couldn't find AppleNVMeEAN object\n");
    return 0;
  }
  uint64_t v4 = IOServiceOpen(MatchingService, mach_task_self_, 0, a1 + 1);
  if (v4)
  {
    NSLog(@"getEANConnection: IOServiceOpen on AppleNVMeEAN failed kernResult:%x\n", v4);
    return 0;
  }
  return 1;
}

uint64_t sub_1000421C8(uint64_t a1)
{
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  *(void *)connectiouint64_t n = 0;
  uint64_t v6 = 0;
  if (sub_100042130(connection))
  {
    uint64_t input = a1;
    uint64_t v2 = IOConnectCallMethod(connection[1], 7u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
    if (v2)
    {
      NSLog(@"GetUpdateCount: IOConnectCallMethod failed (key (%u): %c%c%c%c) kernResult:%x\n", a1, BYTE3(a1), BYTE2(a1), BYTE1(a1), a1, v2);
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v3 = output;
    }
    if (connection[1])
    {
      IOServiceClose(connection[1]);
      connection[1] = 0;
    }
    if (connection[0]) {
      IOObjectRelease(connection[0]);
    }
  }
  else
  {
    NSLog(@"GetEANUpdateCount: Unable to get EAN Io service connection for key (%u): %c%c%c%c\n", a1, BYTE3(a1), BYTE2(a1), BYTE1(a1), a1);
    return 0;
  }
  return v3;
}

id sub_1000422F0()
{
  id v0 = objc_alloc_init((Class)NSMutableDictionary);
  memset(&v48, 0, 512);
  if (statfs("/private/var", &v48))
  {
    unint64_t v1 = 0;
    LODWORD(v2) = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = v48.f_bavail * v48.f_bsize;
    uint64_t v6 = v48.f_blocks * v48.f_bsize;
    uint64_t v4 = v6 >> 20;
    unint64_t v1 = 10000 * (v6 - v5) / v6;
    uint64_t v3 = v5 >> 20;
    uint64_t v2 = v6 >> 30;
  }
  uint64_t v7 = +[NSNumber numberWithUnsignedLongLong:v3];
  [v0 setObject:v7 forKeyedSubscript:off_1000C8848];

  uint64_t v8 = +[NSNumber numberWithUnsignedLongLong:v1];
  [v0 setObject:v8 forKeyedSubscript:off_1000C8840];

  unsigned int v9 = 1 << -(char)__clz(v2 - 1);
  if (v2 == 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t v11 = +[NSNumber numberWithUnsignedInt:v10];
  [v0 setObject:v11 forKeyedSubscript:off_1000C8838];

  id v12 = +[NSNumber numberWithUnsignedInt:v10];
  [v0 setObject:v12 forKeyedSubscript:off_1000C8850];

  char v13 = +[NSNumber numberWithUnsignedLongLong:v1];
  [v0 setObject:v13 forKeyedSubscript:off_1000C8858];

  id v14 = +[NSNumber numberWithUnsignedLongLong:v4];
  [v0 setObject:v14 forKeyedSubscript:off_1000C8860];

  uint64_t v15 = [v0 objectForKey:off_1000C8838];
  if (!v15) {
    goto LABEL_14;
  }
  uint64_t v16 = (void *)v15;
  uint64_t v17 = [v0 objectForKey:off_1000C8840];
  if (!v17) {
    goto LABEL_13;
  }
  id v18 = (void *)v17;
  id v19 = [v0 objectForKey:off_1000C8838];
  if ((int)[v19 intValue] <= 0)
  {

LABEL_13:
    goto LABEL_14;
  }
  uint64_t v20 = [v0 objectForKey:off_1000C8840];
  int v21 = [v20 intValue];

  if (v21 >= 1)
  {
    id v22 = v0;
    goto LABEL_32;
  }
LABEL_14:
  id v22 = objc_alloc_init((Class)NSMutableDictionary);
  unsigned int v23 = (void *)MGCopyAnswer();
  char v24 = v23;
  if (v23)
  {
    uint64_t v25 = kMGQDiskUsageTotalDiskCapacity;
    uint64_t v26 = [v23 objectForKeyedSubscript:kMGQDiskUsageTotalDiskCapacity];

    if (v26)
    {
      uint64_t v27 = [v24 objectForKeyedSubscript:v25];
      uint64_t v28 = (uint64_t)[v27 longLongValue];

      uint64_t v29 = v28 >> 20;
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
    }
    uint64_t v31 = kMGQDiskUsageTotalDataAvailable;
    signed int v32 = [v24 objectForKeyedSubscript:kMGQDiskUsageTotalDataAvailable];

    if (v32)
    {
      char v33 = [v24 objectForKeyedSubscript:v31];
      uint64_t v47 = (uint64_t)[v33 longLongValue] >> 20;
    }
    else
    {
      uint64_t v47 = 0;
    }
    uint64_t v34 = kMGQDiskUsageAmountDataAvailable;
    uint64_t v35 = [v24 objectForKeyedSubscript:kMGQDiskUsageAmountDataAvailable];

    if (v35)
    {
      uint64_t v36 = [v24 objectForKeyedSubscript:v34];
      uint64_t v30 = (uint64_t)[v36 longLongValue] >> 20;
    }
    else
    {
      uint64_t v30 = 0;
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v47 = 0;
  }
  unsigned int v37 = 1 << -(char)__clz(((unint64_t)v28 >> 30) - 1);
  if (((unint64_t)v28 >> 30) == 1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = v37;
  }
  uint64_t v39 = +[NSNumber numberWithUnsignedInt:v38];
  [v22 setObject:v39 forKeyedSubscript:off_1000C8838];

  uint64_t v40 = +[NSNumber numberWithUnsignedInt:v38];
  [v22 setObject:v40 forKeyedSubscript:off_1000C8850];

  [v22 setObject:&off_1000B14F8 forKeyedSubscript:off_1000C8860];
  if (v29 < 1)
  {
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = 10000 * (v29 - v47) / v29;
    uint64_t v42 = +[NSNumber numberWithLongLong:v29];
    [v22 setObject:v42 forKeyedSubscript:off_1000C8860];
  }
  uint64_t v43 = +[NSNumber numberWithUnsignedLongLong:v41];
  [v22 setObject:v43 forKeyedSubscript:off_1000C8840];

  uint64_t v44 = +[NSNumber numberWithLongLong:v30];
  [v22 setObject:v44 forKeyedSubscript:off_1000C8848];

  uint64_t v45 = +[NSNumber numberWithUnsignedLongLong:v41];
  [v22 setObject:v45 forKeyedSubscript:off_1000C8858];

LABEL_32:

  return v22;
}

uint64_t sub_100042868()
{
  if (&_MSURetrievePreviousUpdateDate)
  {
    if (MSURetrievePreviousUpdateDate())
    {
      id v1 = 0;
      uint64_t v2 = +[NSDate date];
      [v2 timeIntervalSinceDate:v1];
      uint64_t v4 = (int)(v3 / 86400.0);
    }
    else
    {
      id v1 = 0;
      uint64_t v4 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    id v1 = 0;
    uint64_t v4 = 0xFFFFFFFFLL;
  }

  return v4;
}

uint64_t sub_100042928()
{
  if (&_MSURetrievePreviousRestoreDate)
  {
    if (MSURetrievePreviousRestoreDate())
    {
      id v1 = 0;
      uint64_t v2 = +[NSDate date];
      [v2 timeIntervalSinceDate:v1];
      uint64_t v4 = (int)(v3 / 604800.0);
    }
    else
    {
      id v1 = 0;
      uint64_t v4 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    id v1 = 0;
    uint64_t v4 = 0xFFFFFFFFLL;
  }

  return v4;
}

uint64_t sub_1000429E8()
{
  v3[0] = 0;
  v3[1] = 0;
  time_t v1 = 0;
  time(&v1);
  *(void *)uint64_t v4 = 0x1500000001;
  size_t v2 = 16;
  sysctl(v4, 2u, v3, &v2, 0, 0);
  return v3[0];
}

id sub_100042A74()
{
  id v0 = objc_alloc_init((Class)NSMutableDictionary);
  size_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  *(_OWORD *)host_info64_out = 0u;
  mach_msg_type_number_t host_info64_outCnt = 38;
  mach_port_t v1 = mach_host_self();
  time_t v32 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v2 = [&off_1000C1990 countByEnumeratingWithState:&v28 objects:v48 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v29 != v4) {
          objc_enumerationMutation(&off_1000C1990);
        }
        uint64_t v6 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        size_t v44 = 8;
        uint64_t v45 = 0;
        id v7 = v6;
        if (!sysctlbyname((const char *)[v7 UTF8String], &v45, &v44, 0, 0))
        {
          uint64_t v8 = +[NSNumber numberWithUnsignedLongLong:v45];
          [v0 setObject:v8 forKeyedSubscript:v7];
        }
      }
      id v3 = [&off_1000C1990 countByEnumeratingWithState:&v28 objects:v48 count:16];
    }
    while (v3);
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v9 = [&off_1000C1978 countByEnumeratingWithState:&v24 objects:v47 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v25;
    do
    {
      for (uint64_t j = 0; j != v10; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v25 != v11) {
          objc_enumerationMutation(&off_1000C1978);
        }
        char v13 = *(void **)(*((void *)&v24 + 1) + 8 * (void)j);
        size_t v44 = 8;
        uint64_t v45 = 0;
        id v14 = v13;
        if (!sysctlbyname((const char *)[v14 UTF8String], &v45, &v44, 0, 0))
        {
          uint64_t v15 = +[NSNumber numberWithUnsignedLongLong:v45];
          [v0 setObject:v15 forKeyedSubscript:v14];
        }
      }
      id v10 = [&off_1000C1978 countByEnumeratingWithState:&v24 objects:v47 count:16];
    }
    while (v10);
  }
  if (!host_statistics64(v1, 4, host_info64_out, &host_info64_outCnt))
  {
    uint64_t v16 = +[NSNumber numberWithUnsignedLongLong:(void)v41];
    [v0 setObject:v16 forKeyedSubscript:@"swapins"];

    uint64_t v17 = +[NSNumber numberWithUnsignedLongLong:*((void *)&v41 + 1)];
    [v0 setObject:v17 forKeyedSubscript:@"swapouts"];

    id v18 = +[NSNumber numberWithUnsignedLongLong:(void)v40];
    [v0 setObject:v18 forKeyedSubscript:@"decompressions"];

    id v19 = +[NSNumber numberWithUnsignedLongLong:*((void *)&v40 + 1)];
    [v0 setObject:v19 forKeyedSubscript:@"compressions"];
  }
  time(&v32);
  uint64_t v20 = +[NSNumber numberWithLong:v32];
  [v0 setObject:v20 forKeyedSubscript:@"unix_epoch"];

  time_t v46 = 0;
  time(&v46);
  int v21 = +[NSNumber numberWithDouble:(double)(v46 - sub_1000429E8()) / 3600.0];
  [v0 setObject:v21 forKeyedSubscript:@"ESR_UptimeInHrs"];

  id v22 = +[NSNumber numberWithLong:sub_1000429E8()];
  [v0 setObject:v22 forKeyedSubscript:@"bootTime"];

  return v0;
}

id sub_100042E7C(uint64_t a1)
{
  uint64_t v4 = a1;
  mach_port_t v1 = +[NSData dataWithBytes:&v4 length:8];
  id v2 = [objc_alloc((Class)NSString) initWithData:v1 encoding:1];

  return v2;
}

id sub_100042EF4(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  id v135 = (id)objc_opt_new();
  long long v119 = objc_opt_new();
  uint64_t v3 = [v1 objectForKeyedSubscript:@"icloudPlanSize"];
  [v2 setObject:@"device" forKeyedSubscript:@"s_type"];
  long long v136 = (void *)v3;
  [v2 setObject:v3 forKeyedSubscript:@"icloud_plan"];
  uint64_t v4 = [v1 objectForKey:@"execMilliseconds"];

  if (v4)
  {
    uint64_t v5 = [v1 objectForKeyedSubscript:@"execMilliseconds"];
    [v2 setObject:v5 forKeyedSubscript:@"time_to_complete"];
  }
  uint64_t v6 = [v1 objectForKey:@"numDefers"];

  if (v6)
  {
    id v7 = [v1 objectForKeyedSubscript:@"numDefers"];
    [v2 setObject:v7 forKeyedSubscript:@"nof_deferred"];
  }
  uint64_t v8 = [v1 objectForKey:@"finished"];

  if (v8)
  {
    id v9 = [v1 objectForKeyedSubscript:@"finished"];
    [v2 setObject:v9 forKeyedSubscript:@"is_finished"];
  }
  id v10 = [v1 objectForKey:@"device-purgeable"];

  if (v10)
  {
    uint64_t v11 = [v1 objectForKeyedSubscript:@"device-purgeable"];
    [v2 setObject:v11 forKeyedSubscript:@"purgeable_space"];
  }
  id v12 = [v1 objectForKey:@"device-used"];

  if (v12)
  {
    char v13 = [v1 objectForKeyedSubscript:@"device-used"];
    [v2 setObject:v13 forKeyedSubscript:@"used_space"];
  }
  id v14 = [v1 objectForKey:@"inconsistent"];

  if (v14)
  {
    uint64_t v15 = [v1 objectForKeyedSubscript:@"inconsistent"];
    [v2 setObject:v15 forKeyedSubscript:@"inconsistent"];
  }
  [v135 addObject:v2];
  long long v163 = 0u;
  long long v164 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  id v16 = v1;
  obuint64_t j = v16;
  id v115 = [v16 countByEnumeratingWithState:&v161 objects:v172 count:16];
  if (!v115)
  {
    id v101 = 0;
    goto LABEL_139;
  }
  uint64_t v17 = 0;
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  uint64_t v131 = 0;
  uint64_t v132 = 0;
  uint64_t v140 = 0;
  long long v123 = 0;
  uint64_t v114 = *(void *)v162;
  do
  {
    uint64_t v18 = 0;
    do
    {
      if (*(void *)v162 != v114)
      {
        uint64_t v19 = v18;
        objc_enumerationMutation(obj);
        uint64_t v18 = v19;
      }
      uint64_t v116 = v18;
      uint64_t v20 = *(void **)(*((void *)&v161 + 1) + 8 * v18);
      long long v137 = v20;
      if ((objc_msgSend(v20, "isEqualToString:", @"apps", v114) & 1) != 0
        || [v20 isEqualToString:@"categories"])
      {
        unsigned int v126 = v17;
        unsigned int v138 = [v20 isEqualToString:@"apps"];
        long long v157 = 0u;
        long long v158 = 0u;
        long long v159 = 0u;
        long long v160 = 0u;
        id v121 = [obj objectForKeyedSubscript:v20];
        id v133 = [v121 countByEnumeratingWithState:&v157 objects:v171 count:16];
        if (!v133) {
          goto LABEL_95;
        }
        uint64_t v124 = *(void *)v158;
        while (1)
        {
          uint64_t v21 = 0;
          do
          {
            id v22 = v2;
            if (*(void *)v158 != v124) {
              objc_enumerationMutation(v121);
            }
            uint64_t v23 = v21;
            long long v24 = *(void **)(*((void *)&v157 + 1) + 8 * v21);
            if (v138)
            {
              long long v25 = [v24 objectForKeyedSubscript:@"vendor"];
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                long long v26 = [v24 objectForKeyedSubscript:@"vendor"];
                unsigned int v27 = [v26 isEqualToString:@"Apple Inc."] ^ 1;
              }
              else
              {
                unsigned int v27 = 1;
              }
            }
            else
            {
              unsigned int v27 = 0;
            }
            id v2 = objc_alloc_init((Class)NSMutableDictionary);

            [v2 setObject:v136 forKeyedSubscript:@"icloud_plan"];
            [v2 setObject:v137 forKeyedSubscript:@"s_type"];
            long long v28 = [v24 objectForKey:@"vendor"];

            if (v28)
            {
              long long v29 = [v24 objectForKeyedSubscript:@"vendor"];
              [v2 setObject:v29 forKeyedSubscript:@"vendor"];
            }
            long long v30 = [v24 objectForKey:@"name"];

            if (v30)
            {
              long long v31 = [v24 objectForKeyedSubscript:@"name"];
              [v2 setObject:v31 forKeyedSubscript:@"s_name"];
            }
            time_t v32 = [v24 objectForKey:@"bundleID"];

            if (v32)
            {
              char v33 = [v24 objectForKeyedSubscript:@"bundleID"];
              [v2 setObject:v33 forKeyedSubscript:@"s_id"];
            }
            uint64_t v34 = [v24 objectForKey:@"id"];

            if (v34)
            {
              long long v35 = [v24 objectForKeyedSubscript:@"id"];
              [v2 setObject:v35 forKeyedSubscript:@"s_id"];
            }
            long long v36 = [v24 objectForKey:@"isAppClip"];

            if (v36)
            {
              long long v37 = [v24 objectForKeyedSubscript:@"isAppClip"];
              [v2 setObject:v37 forKeyedSubscript:@"is_app_clip"];
            }
            long long v38 = [v24 objectForKey:@"total"];

            if (v38)
            {
              long long v39 = [v24 objectForKeyedSubscript:@"total"];
              [v2 setObject:v39 forKeyedSubscript:@"total_space"];
            }
            long long v40 = [v24 objectForKey:@"has-error"];
            if (v40) {
              char v41 = v138;
            }
            else {
              char v41 = 1;
            }

            if ((v41 & 1) == 0)
            {
              long long v42 = [v24 objectForKeyedSubscript:@"has-error"];
              uint64_t v43 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v42 BOOLValue] ^ 1);
              [v2 setObject:v43 forKeyedSubscript:@"is_finished"];
            }
            size_t v44 = [v24 objectForKey:@"sizes"];

            if (v44)
            {
              uint64_t v45 = [v24 objectForKeyedSubscript:@"sizes"];
              long long v153 = 0u;
              long long v154 = 0u;
              long long v155 = 0u;
              long long v156 = 0u;
              id v46 = v45;
              id v47 = [v46 countByEnumeratingWithState:&v153 objects:v170 count:16];
              if (!v47)
              {
                uint64_t v49 = 0;
                goto LABEL_88;
              }
              id v48 = v47;
              uint64_t v49 = 0;
              uint64_t v50 = *(void *)v154;
              while (1)
              {
                id v51 = 0;
                do
                {
                  if (*(void *)v154 != v50) {
                    objc_enumerationMutation(v46);
                  }
                  uint64_t v52 = *(void **)(*((void *)&v153 + 1) + 8 * (void)v51);
                  if (([v52 isEqualToString:@"app"] & 1) != 0
                    || [v52 isEqualToString:@"fixed"])
                  {
                    if (v27)
                    {
                      id v53 = [v46 objectForKeyedSubscript:v52];
                      v140 += (uint64_t)[v53 unsignedLongLongValue];
                    }
                    id v54 = [v46 objectForKeyedSubscript:v52];
                    v49 += (uint64_t)[v54 unsignedLongLongValue];

                    uint64_t v55 = [v46 objectForKeyedSubscript:v52];
                    id v56 = v2;
                    id v57 = v55;
                    CFStringRef v58 = @"app_space";
LABEL_59:
                    [v56 setObject:v57 forKeyedSubscript:v58];

                    goto LABEL_60;
                  }
                  if (([v52 isEqualToString:@"data"] & 1) != 0
                    || [v52 isEqualToString:@"dynamic"])
                  {
                    if (v27)
                    {
                      uint64_t v59 = [v46 objectForKeyedSubscript:v52];
                      v132 += (uint64_t)[v59 unsignedLongLongValue];
                    }
                    uint64_t v60 = [v46 objectForKeyedSubscript:v52];
                    v49 += (uint64_t)[v60 unsignedLongLongValue];

                    uint64_t v55 = [v46 objectForKeyedSubscript:v52];
                    id v56 = v2;
                    id v57 = v55;
                    CFStringRef v58 = @"data_space";
                    goto LABEL_59;
                  }
                  if ([v52 isEqualToString:@"purgeable"])
                  {
                    if (v27)
                    {
                      uint64_t v61 = [v46 objectForKeyedSubscript:v52];
                      v131 += (uint64_t)[v61 unsignedLongLongValue];
                    }
                    uint64_t v55 = [v46 objectForKeyedSubscript:v52];
                    id v56 = v2;
                    id v57 = v55;
                    CFStringRef v58 = @"purgeable_space";
                    goto LABEL_59;
                  }
                  if ([v52 isEqualToString:@"total"])
                  {
                    if (v27)
                    {
                      uint64_t v62 = [v46 objectForKeyedSubscript:v52];
                      v130 += (uint64_t)[v62 unsignedLongLongValue];
                    }
                    uint64_t v55 = [v46 objectForKeyedSubscript:v52];
                    id v56 = v2;
                    id v57 = v55;
                    CFStringRef v58 = @"total_space";
                    goto LABEL_59;
                  }
                  if ([v52 isEqualToString:@"extPurgeable"])
                  {
                    if (v27)
                    {
                      char v63 = [v46 objectForKeyedSubscript:v52];
                      v129 += (uint64_t)[v63 unsignedLongLongValue];
                    }
                    uint64_t v55 = [v46 objectForKeyedSubscript:v52];
                    id v56 = v2;
                    id v57 = v55;
                    CFStringRef v58 = @"ext_purgeable_space";
                    goto LABEL_59;
                  }
                  if ([v52 isEqualToString:@"external"])
                  {
                    if (v27)
                    {
                      uint64_t v64 = [v46 objectForKeyedSubscript:v52];
                      v128 += (uint64_t)[v64 unsignedLongLongValue];
                    }
                    uint64_t v55 = [v46 objectForKeyedSubscript:v52];
                    id v56 = v2;
                    id v57 = v55;
                    CFStringRef v58 = @"ext_total_space";
                    goto LABEL_59;
                  }
LABEL_60:
                  id v51 = (char *)v51 + 1;
                }
                while (v48 != v51);
                id v65 = [v46 countByEnumeratingWithState:&v153 objects:v170 count:16];
                id v48 = v65;
                if (!v65)
                {
LABEL_88:

                  if (v27)
                  {
LABEL_89:
                    ++v126;
                    uint64_t v66 = +[NSNumber numberWithLong:v49];
                    [v2 setObject:v66 forKeyedSubscript:@"third_party_sorting_key"];

                    uint64_t v67 = v119;
                  }
                  else
                  {
                    uint64_t v67 = v135;
                  }
                  goto LABEL_91;
                }
              }
            }
            if (v27)
            {
              uint64_t v49 = 0;
              goto LABEL_89;
            }
            uint64_t v67 = v135;
LABEL_91:
            [v67 addObject:v2];
            uint64_t v21 = v23 + 1;
          }
          while ((id)(v23 + 1) != v133);
          id v68 = [v121 countByEnumeratingWithState:&v157 objects:v171 count:16];
          id v133 = v68;
          if (!v68)
          {
LABEL_95:

            uint64_t v17 = v126;
            break;
          }
        }
      }
      if ([v137 isEqualToString:@"device-disks"])
      {
        long long v151 = 0u;
        long long v152 = 0u;
        long long v149 = 0u;
        long long v150 = 0u;
        id v118 = [obj objectForKeyedSubscript:v137];
        id v122 = [v118 countByEnumeratingWithState:&v149 objects:v169 count:16];
        if (v122)
        {
          unsigned int v139 = 0;
          uint64_t v120 = *(void *)v150;
          unsigned int v127 = v17;
          do
          {
            for (uint64_t i = 0; i != v122; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v150 != v120) {
                objc_enumerationMutation(v118);
              }
              id v70 = *(void **)(*((void *)&v149 + 1) + 8 * i);
              uint64_t v71 = [v70 objectForKey:@"device-volumes"];

              if (v71)
              {
                long long v125 = i;
                id v72 = [objc_alloc((Class)NSSortDescriptor) initWithKey:@"device-used" ascending:0];

                long long v147 = 0u;
                long long v148 = 0u;
                long long v145 = 0u;
                long long v146 = 0u;
                long long v73 = [v70 objectForKeyedSubscript:@"device-volumes"];
                long long v123 = v72;
                id v167 = v72;
                long long v74 = +[NSArray arrayWithObjects:&v167 count:1];
                long long v75 = [v73 sortedArrayUsingDescriptors:v74];

                id v134 = v75;
                id v76 = [v75 countByEnumeratingWithState:&v145 objects:v168 count:16];
                if (v76)
                {
                  id v77 = v76;
                  uint64_t v78 = 0;
                  uint64_t v79 = *(void *)v146;
                  do
                  {
                    int v80 = 0;
                    uint64_t v81 = v2;
                    do
                    {
                      if (*(void *)v146 != v79) {
                        objc_enumerationMutation(v134);
                      }
                      unint64_t v82 = *(void **)(*((void *)&v145 + 1) + 8 * (void)v80);
                      id v2 = objc_alloc_init((Class)NSMutableDictionary);

                      uint64_t v83 = [v70 objectForKey:@"device-disk-internal"];

                      if (v83)
                      {
                        uint64_t v84 = [v70 objectForKeyedSubscript:@"device-disk-internal"];
                        [v2 setObject:v84 forKeyedSubscript:@"is_app_clip"];
                      }
                      else
                      {
                        [v2 setObject:&off_1000B14F8 forKeyedSubscript:@"is_app_clip"];
                      }
                      [v2 setObject:v137 forKeyedSubscript:@"s_type"];
                      uint64_t v85 = +[NSNumber numberWithInt:v139];
                      [v2 setObject:v85 forKeyedSubscript:@"s_name"];

                      uint64_t v86 = +[NSNumber numberWithInt:(char *)v80 + v78];
                      [v2 setObject:v86 forKeyedSubscript:@"s_id"];

                      [v2 setObject:v136 forKeyedSubscript:@"icloud_plan"];
                      uint64_t v87 = [v82 objectForKey:@"device-used"];

                      if (v87)
                      {
                        uint64_t v88 = [v82 objectForKeyedSubscript:@"device-used"];
                        [v2 setObject:v88 forKeyedSubscript:@"used_space"];
                      }
                      uint64_t v89 = [v82 objectForKey:@"device-available"];

                      if (v89)
                      {
                        uint64_t v90 = [v82 objectForKeyedSubscript:@"device-available"];
                        [v2 setObject:v90 forKeyedSubscript:@"available_space"];
                      }
                      uint64_t v91 = [v82 objectForKey:@"device-available"];

                      if (v91)
                      {
                        uint64_t v92 = [v82 objectForKeyedSubscript:@"device-purgeable"];
                        [v2 setObject:v92 forKeyedSubscript:@"purgeable_space"];
                      }
                      [v135 addObject:v2];
                      int v80 = (char *)v80 + 1;
                      uint64_t v81 = v2;
                    }
                    while (v77 != v80);
                    id v77 = [v134 countByEnumeratingWithState:&v145 objects:v168 count:16];
                    uint64_t v78 = (v78 + v80);
                  }
                  while (v77);
                }

                uint64_t v17 = v127;
                uint64_t i = v125;
              }
              ++v139;
            }
            id v122 = [v118 countByEnumeratingWithState:&v149 objects:v169 count:16];
          }
          while (v122);
        }
      }
      uint64_t v18 = v116 + 1;
    }
    while ((id)(v116 + 1) != v115);
    id v115 = [obj countByEnumeratingWithState:&v161 objects:v172 count:16];
  }
  while (v115);

  if (v17)
  {
    id v93 = objc_alloc_init((Class)NSMutableDictionary);

    [v93 setObject:@"categories" forKeyedSubscript:@"s_type"];
    [v93 setObject:@"third_party_sum" forKeyedSubscript:@"s_name"];
    [v93 setObject:@"third_party_sum" forKeyedSubscript:@"s_id"];
    [v93 setObject:@"third_party_sum" forKeyedSubscript:@"vendor"];
    uint64_t v94 = +[NSNumber numberWithUnsignedLongLong:v140];
    [v93 setObject:v94 forKeyedSubscript:@"app_space"];

    uint64_t v95 = +[NSNumber numberWithUnsignedLongLong:v132];
    [v93 setObject:v95 forKeyedSubscript:@"data_space"];

    id v96 = +[NSNumber numberWithUnsignedLongLong:v131];
    [v93 setObject:v96 forKeyedSubscript:@"purgeable_space"];

    uint64_t v97 = +[NSNumber numberWithUnsignedLongLong:v130];
    [v93 setObject:v97 forKeyedSubscript:@"total_space"];

    id v98 = +[NSNumber numberWithUnsignedLongLong:v129];
    [v93 setObject:v98 forKeyedSubscript:@"ext_purgeable_space"];

    id v99 = +[NSNumber numberWithUnsignedLongLong:v128];
    [v93 setObject:v99 forKeyedSubscript:@"ext_total_space"];

    uint64_t v100 = +[NSNumber numberWithUnsignedInt:v17];
    [v93 setObject:v100 forKeyedSubscript:@"nof_deferred"];

    [v135 addObject:v93];
    id v101 = [objc_alloc((Class)NSSortDescriptor) initWithKey:@"third_party_sorting_key" ascending:0];

    long long v143 = 0u;
    long long v144 = 0u;
    long long v141 = 0u;
    long long v142 = 0u;
    id v165 = v101;
    uint64_t v102 = +[NSArray arrayWithObjects:&v165 count:1];
    id v16 = [v119 sortedArrayUsingDescriptors:v102];

    id v103 = [v16 countByEnumeratingWithState:&v141 objects:v166 count:16];
    if (v103)
    {
      id v104 = v103;
      int v105 = 0;
      uint64_t v106 = *(void *)v142;
LABEL_128:
      uint64_t v107 = 0;
      if (v105 <= 10) {
        int v108 = 10;
      }
      else {
        int v108 = v105;
      }
      uint64_t v109 = (v108 - v105);
      while (1)
      {
        if (*(void *)v142 != v106) {
          objc_enumerationMutation(v16);
        }
        if (v109 == v107) {
          break;
        }
        id v110 = *(void **)(*((void *)&v141 + 1) + 8 * v107);
        [v110 removeObjectForKey:@"third_party_sorting_key"];
        [v135 addObject:v110];
        if (v104 == (id)++v107)
        {
          id v104 = [v16 countByEnumeratingWithState:&v141 objects:v166 count:16];
          v105 += v107;
          if (v104) {
            goto LABEL_128;
          }
          break;
        }
      }
    }
    id v2 = v93;
LABEL_139:

    id v111 = v101;
  }
  else
  {
    id v111 = v123;
  }
  id v112 = v135;

  return v112;
}

id sub_100044230(uint64_t *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[2];
  if (*a1) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    do
    {
      if (!v3
        || (+[NSString stringWithUTF8String:v5],
            uint64_t v8 = objc_claimAutoreleasedReturnValue(),
            unsigned int v9 = [v3 containsObject:v8],
            v8,
            v9))
      {
        id v10 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v6 + 104)];
        uint64_t v11 = +[NSString stringWithUTF8String:v5];
        [v4 setObject:v10 forKeyedSubscript:v11];
      }
      uint64_t v5 = *(void *)(v5 + 112);
      if (!v5) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 112);
    }
    while (v6);
  }

  return v4;
}

void sub_100045744(void *a1)
{
  id v1 = __cxa_begin_catch(a1);
  printf("Failed connecting to the passthrough driver. Error=0x%x\n", *v1);

  __cxa_end_catch();
}

void sub_100045788(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = [a2 plistPath];
  int v5 = 136315138;
  id v6 = [v4 UTF8String];
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Cannot load plist from %s! Deleting it.", (uint8_t *)&v5, 0xCu);
}

void sub_100045838(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = [@"/private/var/db/NANDTelemetryServices" UTF8String];
  id v5 = [a2 localizedFailureReason];
  int v6 = 136315394;
  id v7 = v4;
  __int16 v8 = 2080;
  id v9 = [v5 UTF8String];
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Creating NAND telemetry plist directory %s failed for %s", (uint8_t *)&v6, 0x16u);
}

void sub_10004590C(void *a1)
{
  id v1 = a1;
  int v2 = 136315138;
  id v3 = [@"/private/var/db/NANDTelemetryServices" UTF8String];
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Error: plist directory %s exists but is a file! Deleting it.", (uint8_t *)&v2, 0xCu);
}

void sub_1000459A8()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "ERROR: tar in progress directory creation failed!\n", v2, v3, v4, v5, v6);
}

void sub_1000459DC()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "ERROR: Unsent IOLog directory creation failed!\n", v2, v3, v4, v5, v6);
}

void sub_100045A10()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "ERROR: failed to save nand counters.\n", v2, v3, v4, v5, v6);
}

void sub_100045A44()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "ERROR: failed to save nand stats.\n", v2, v3, v4, v5, v6);
}

void sub_100045A78()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "ERROR: failed to disable iologging before extraction.\n", v2, v3, v4, v5, v6);
}

void sub_100045AAC()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "ERROR: iolog content tar file cannot be created.\n", v2, v3, v4, v5, v6);
}

void sub_100045AE0()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Should not prepare upload content if file pending upload!", v2, v3, v4, v5, v6);
}

void sub_100045B14()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "ERROR: Do not support collecting iolog after tasking terminated!", v2, v3, v4, v5, v6);
}

void sub_100045B48()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "ERROR: Upload failed.\n", v2, v3, v4, v5, v6);
}

void sub_100045B7C(void *a1, void *a2)
{
  uint64_t v3 = a1;
  v4[0] = 67109120;
  v4[1] = [a2 spdState];
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid SPD state %u", (uint8_t *)v4, 8u);
}

void sub_100045C18()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Did not get good-to-upload SPD file. Deleting it...", v2, v3, v4, v5, v6);
}

void sub_100045C4C()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Failed extract SPD header. No SPD work", v2, v3, v4, v5, v6);
}

void sub_100045C80(void *a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = [a2 spdFilePath];
  int v5 = 136315138;
  id v6 = [v4 UTF8String];
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to open file path %s", (uint8_t *)&v5, 0xCu);
}

void sub_100045D30(int *a1, NSObject *a2)
{
  int v2 = *a1;
  v3[0] = 67109376;
  v3[1] = v2;
  __int16 v4 = 1024;
  int v5 = 209715200;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Estimated SPD size (%u bytes) larger than allowed (%u bytes)", (uint8_t *)v3, 0xEu);
}

void sub_100045DBC()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Error during extracting SPD data and writing to file", v2, v3, v4, v5, v6);
}

void sub_100045DF0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "DiagnosticPipeline not supported!", v1, 2u);
}

void sub_100045E34(uint64_t a1, NSObject *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Upload error: %s", (uint8_t *)&v2, 0xCu);
}

void sub_100045EAC(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  int v5 = 136315138;
  id v6 = [v3 UTF8String];
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to exclude user defaults %s from backup.", (uint8_t *)&v5, 0xCu);
}

void sub_100045F50(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 134218240;
  uint64_t v4 = a2;
  __int16 v5 = 2048;
  uint64_t v6 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "ERROR: Unexpected state %ld for XPC activity %p", (uint8_t *)&v3, 0x16u);
}

void sub_100045FD8()
{
  sub_10000A0FC();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Checking in XPC activity %p", v1, 0xCu);
}

void sub_10004604C()
{
  sub_10000A0FC();
  sub_10000A108((void *)&_mh_execute_header, v0, v1, "XPC activity %p cannot be deferred!", v2);
}

void sub_1000460B8()
{
  sub_10000A0FC();
  sub_10000A108((void *)&_mh_execute_header, v0, v1, "Cannot set XPC activity %p state to CONTINUE", v2);
}

void sub_100046124()
{
  sub_10000A0FC();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Running XPC activity %p", v1, 0xCu);
}

void sub_100046198(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  int v4 = 134217984;
  uint64_t v5 = v3;
  sub_10000A108((void *)&_mh_execute_header, a2, a3, "XPC activity %p cannot be deferred!", (uint8_t *)&v4);
}

void sub_10004620C()
{
  sub_10000A0FC();
  sub_10000A108((void *)&_mh_execute_header, v0, v1, "Unable to set XPC activity %p state to DONE.", v2);
}

void sub_100046278(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_10000A120() xpcActivity];
  sub_10000A0FC();
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "xpc_activity %p already deferred", v4, 0xCu);
}

void sub_100046318(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_10000A120() xpcActivity];
  sub_10000A0FC();
  sub_10000A108((void *)&_mh_execute_header, v1, v4, "xpc_activity %p deferred!", v5);
}

void sub_1000463B0(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_10000A120() xpcActivity];
  sub_10000A0FC();
  sub_10000A108((void *)&_mh_execute_header, v1, v4, "xpc_activity %p cannot be deferred", v5);
}

void sub_100046448(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_10000A120() xpcActivity];
  sub_10000A0FC();
  sub_10000A108((void *)&_mh_execute_header, v1, v4, "xpc_activity %p cannot be force deferred", v5);
}

void sub_1000464E0()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Error: Could not enable iologging\n", v2, v3, v4, v5, v6);
}

void sub_100046514()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Error: Could not disable iologging\n", v2, v3, v4, v5, v6);
}

void sub_100046548(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000465B4()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Err: Fetch IO log header failed!\n", v2, v3, v4, v5, v6);
}

void sub_1000465E8()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Err: Extract IO log data failed!\n", v2, v3, v4, v5, v6);
}

void sub_10004661C()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Err: NAND counter extraction failed.\n", v2, v3, v4, v5, v6);
}

void sub_100046650()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Writing NAND counters to file failed", v2, v3, v4, v5, v6);
}

void sub_100046684()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Error: IO NVMe Smart cmd failed to extract ASP export stats!\n", v2, v3, v4, v5, v6);
}

void sub_1000466B8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100046724(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100046790(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  int v5 = 136315138;
  id v6 = [v3 UTF8String];
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to open Directory at %s", (uint8_t *)&v5, 0xCu);
}

void sub_100046834(void *a1, void *a2)
{
  id v3 = a1;
  v4[0] = 67109120;
  v4[1] = [a2 sweepError];
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Sweep Failed with error %d.", (uint8_t *)v4, 8u);
}

void sub_1000468D0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = [a2 blockPath];
  [v4 UTF8String];
  sub_10000C9E0((void *)&_mh_execute_header, v5, v6, "Failed to create directory \"%s\".", v7, v8, v9, v10, 2u);
}

void sub_100046970()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Cannot perform sweep - No Geometry!\n", v2, v3, v4, v5, v6);
}

void sub_1000469A4()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Fail to Init NVMeCTL Connection", v2, v3, v4, v5, v6);
}

void sub_1000469D8()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Could not allocate memory for sweep buffer", v2, v3, v4, v5, v6);
}

void sub_100046A0C()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Failed to Get Defect list for today", v2, v3, v4, v5, v6);
}

void sub_100046A40()
{
  sub_10000884C();
  sub_100008830((void *)&_mh_execute_header, v0, v1, "Failed to Get Defect list", v2, v3, v4, v5, v6);
}

void sub_100046A74(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  id v4 = +[NSString stringWithFormat:@"%@", a2];
  *(_DWORD *)buf = 136315138;
  id v6 = [v4 UTF8String];
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ERROR: tasking info validation failed! info details:\n%s", buf, 0xCu);
}

void sub_100046B40(char a1, char a2, os_log_t log)
{
  uint64_t v3 = "True";
  if (a1) {
    id v4 = "False";
  }
  else {
    id v4 = "True";
  }
  if ((a2 & 1) == 0) {
    uint64_t v3 = "False";
  }
  int v5 = 136315394;
  id v6 = v4;
  __int16 v7 = 2080;
  uint64_t v8 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Device tasked: %s taskingId in Hist:%s.\n", (uint8_t *)&v5, 0x16u);
}

void sub_100046BE8(uint64_t a1, int a2, os_log_t log)
{
  int v3 = 136315394;
  uint64_t v4 = a1;
  __int16 v5 = 1024;
  int v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "DA taskingId %s unexpected decision server reply %d", (uint8_t *)&v3, 0x12u);
}

void sub_100046C70(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "STMTelemetryController not supported on this device", v1, 2u);
}

void sub_100046CB4(os_log_t log)
{
  v1[0] = 67109120;
  v1[1] = dword_1000C88CC;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%d defers for app space dict extraction! No more today...", (uint8_t *)v1, 8u);
}

void sub_100046D38(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  [v3 UTF8String];
  sub_10000A0FC();
  sub_100010EB4((void *)&_mh_execute_header, v5, v6, "Raw dict inconsistency: %s", v7, v8, v9, v10, v11);
}

void sub_100046DC8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = [a2 localizedDescription];
  [v4 UTF8String];
  sub_10000A0FC();
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error creating radar draft: %s", v5, 0xCu);
}

void sub_100046E74(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = [a2 localizedDescription];
  [v4 UTF8String];
  sub_10000C9E0((void *)&_mh_execute_header, v5, v6, "DP tasking mark complete error %s", v7, v8, v9, v10, 2u);
}

void sub_100046F14(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "ERROR: Unsent IOLog directory creation failed!\n", v1, 2u);
}

void sub_100046F58(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = [a2 localizedDescription];
  [v4 UTF8String];
  sub_10000C9E0((void *)&_mh_execute_header, v5, v6, "DP tasking payload fetch error %s", v7, v8, v9, v10, 2u);
}

void sub_100046FF8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = [a2 myTaskingDict];
  id v5 = [v4 description];
  int v6 = 136315138;
  id v7 = [v5 UTF8String];
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Tasking Dict: %s", (uint8_t *)&v6, 0xCu);
}

uint64_t AnalyticsIsEventUsed()
{
  return _AnalyticsIsEventUsed();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA1(data, len, md);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyValue(key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

uint64_t CacheDeleteCopyItemizedPurgeableSpaceWithInfo()
{
  return _CacheDeleteCopyItemizedPurgeableSpaceWithInfo();
}

uint64_t DRShouldEnableLogGathering()
{
  return _DRShouldEnableLogGathering();
}

uint64_t DRSubmitLog()
{
  return _DRSubmitLog();
}

uint64_t DeleteNVMeCTL()
{
  return _DeleteNVMeCTL();
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallMethod(connection, selector, input, inputCnt, inputStruct, inputStructCnt, output, outputCnt, outputStruct, outputStructCnt);
}

kern_return_t IOConnectCallScalarMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return _IOConnectCallScalarMethod(connection, selector, input, inputCnt, output, outputCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallStructMethod(connection, selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntrySearchCFProperty(entry, plane, key, allocator, options);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetStringAnswer()
{
  return _MGGetStringAnswer();
}

uint64_t MSURetrievePreviousRestoreDate()
{
  return _MSURetrievePreviousRestoreDate();
}

uint64_t MSURetrievePreviousUpdateDate()
{
  return _MSURetrievePreviousUpdateDate();
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

uint64_t NVMeCTLGetANS2Sweep()
{
  return _NVMeCTLGetANS2Sweep();
}

uint64_t NVMeCTLTunnel()
{
  return _NVMeCTLTunnel();
}

uint64_t NewNVMeCTLFirst()
{
  return _NewNVMeCTLFirst();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFPreferencesSetBackupDisabled()
{
  return __CFPreferencesSetBackupDisabled();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_end_catch(void)
{
}

int *__error(void)
{
  return ___error();
}

uint64_t __memmove_chk()
{
  return ___memmove_chk();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return ___sprintf_chk(a1, a2, a3, a4);
}

uint64_t __strcpy_chk()
{
  return ___strcpy_chk();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t archive_entry_copy_stat()
{
  return _archive_entry_copy_stat();
}

uint64_t archive_entry_free()
{
  return _archive_entry_free();
}

uint64_t archive_entry_new()
{
  return _archive_entry_new();
}

uint64_t archive_entry_set_filetype()
{
  return _archive_entry_set_filetype();
}

uint64_t archive_entry_set_pathname()
{
  return _archive_entry_set_pathname();
}

uint64_t archive_entry_set_perm()
{
  return _archive_entry_set_perm();
}

uint64_t archive_filter_code()
{
  return _archive_filter_code();
}

uint64_t archive_read_free()
{
  return _archive_read_free();
}

uint64_t archive_read_header_position()
{
  return _archive_read_header_position();
}

uint64_t archive_read_new()
{
  return _archive_read_new();
}

uint64_t archive_read_next_header()
{
  return _archive_read_next_header();
}

uint64_t archive_read_open_fd()
{
  return _archive_read_open_fd();
}

uint64_t archive_read_support_filter_all()
{
  return _archive_read_support_filter_all();
}

uint64_t archive_read_support_format_tar()
{
  return _archive_read_support_format_tar();
}

uint64_t archive_write_add_filter_gzip()
{
  return _archive_write_add_filter_gzip();
}

uint64_t archive_write_add_filter_none()
{
  return _archive_write_add_filter_none();
}

uint64_t archive_write_close()
{
  return _archive_write_close();
}

uint64_t archive_write_data()
{
  return _archive_write_data();
}

uint64_t archive_write_free()
{
  return _archive_write_free();
}

uint64_t archive_write_header()
{
  return _archive_write_header();
}

uint64_t archive_write_new()
{
  return _archive_write_new();
}

uint64_t archive_write_open_fd()
{
  return _archive_write_open_fd();
}

uint64_t archive_write_open_filename()
{
  return _archive_write_open_filename();
}

uint64_t archive_write_set_format_pax()
{
  return _archive_write_set_format_pax();
}

uint64_t archive_write_set_options()
{
  return _archive_write_set_options();
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return _close(a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void dispatch_main(void)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

int fclose(FILE *a1)
{
  return _fclose(a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return _fputc(a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fread(__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return _fseek(a1, a2, a3);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fwrite(__ptr, __size, __nitems, __stream);
}

kern_return_t host_statistics64(host_t host_priv, host_flavor_t flavor, host_info64_t host_info64_out, mach_msg_type_number_t *host_info64_outCnt)
{
  return _host_statistics64(host_priv, flavor, host_info64_out, host_info64_outCnt);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return _lseek(a1, a2, a3);
}

mach_port_t mach_host_self(void)
{
  return _mach_host_self();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_valloc(size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_parse_boot_arg_int()
{
  return _os_parse_boot_arg_int();
}

uint64_t os_variant_has_factory_content()
{
  return _os_variant_has_factory_content();
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

uint64_t os_variant_has_internal_ui()
{
  return _os_variant_has_internal_ui();
}

uint64_t os_variant_is_darwinos()
{
  return _os_variant_is_darwinos();
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return _pthread_mutex_lock(a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return _pthread_mutex_trylock(a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return _pthread_mutex_unlock(a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return _read(a1, a2, a3);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return _statfs(a1, a2);
}

int statvfs(const char *a1, statvfs *a2)
{
  return _statvfs(a1, a2);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
}

time_t time(time_t *a1)
{
  return _time(a1);
}

int unsetenv(const char *a1)
{
  return _unsetenv(a1);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return _vsnprintf(__str, __size, __format, a4);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return _xpc_activity_copy_criteria(activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return _xpc_activity_should_defer(activity);
}

void xpc_activity_unregister(const char *identifier)
{
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return _xpc_equal(object1, object2);
}

id objc_msgSend_DATaskingID(void *a1, const char *a2, ...)
{
  return [a1 DATaskingID];
}

id objc_msgSend_DATaskingMgr(void *a1, const char *a2, ...)
{
  return [a1 DATaskingMgr];
}

id objc_msgSend_LoadTasking(void *a1, const char *a2, ...)
{
  return [a1 LoadTasking];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return [a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return [a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return [a1 UUIDString];
}

id objc_msgSend__DATaskingNotInHist(void *a1, const char *a2, ...)
{
  return [a1 _DATaskingNotInHist];
}

id objc_msgSend__activeLegacyTaskingDisabled(void *a1, const char *a2, ...)
{
  return [a1 _activeLegacyTaskingDisabled];
}

id objc_msgSend__activeTaskingExpired(void *a1, const char *a2, ...)
{
  return [a1 _activeTaskingExpired];
}

id objc_msgSend__addDATaskingToHist(void *a1, const char *a2, ...)
{
  return [a1 _addDATaskingToHist];
}

id objc_msgSend__canInspectNewDATasking(void *a1, const char *a2, ...)
{
  return [a1 _canInspectNewDATasking];
}

id objc_msgSend__checkAndCompressFiles(void *a1, const char *a2, ...)
{
  return [a1 _checkAndCompressFiles];
}

id objc_msgSend__checkAndConvertIOLog(void *a1, const char *a2, ...)
{
  return [a1 _checkAndConvertIOLog];
}

id objc_msgSend__checkAndExtractFiles(void *a1, const char *a2, ...)
{
  return [a1 _checkAndExtractFiles];
}

id objc_msgSend__checkAndHandleExcessiveCompressionErrors(void *a1, const char *a2, ...)
{
  return [a1 _checkAndHandleExcessiveCompressionErrors];
}

id objc_msgSend__checkLegacyUI(void *a1, const char *a2, ...)
{
  return [a1 _checkLegacyUI];
}

id objc_msgSend__checkSnBuildVariantMatch(void *a1, const char *a2, ...)
{
  return [a1 _checkSnBuildVariantMatch];
}

id objc_msgSend__checkTestHook(void *a1, const char *a2, ...)
{
  return [a1 _checkTestHook];
}

id objc_msgSend__cleanUpAfterTasking(void *a1, const char *a2, ...)
{
  return [a1 _cleanUpAfterTasking];
}

id objc_msgSend__cleanUpWorkDir(void *a1, const char *a2, ...)
{
  return [a1 _cleanUpWorkDir];
}

id objc_msgSend__cleanUpinProgressFiles(void *a1, const char *a2, ...)
{
  return [a1 _cleanUpinProgressFiles];
}

id objc_msgSend__curTaskingisActiveOnServer(void *a1, const char *a2, ...)
{
  return [a1 _curTaskingisActiveOnServer];
}

id objc_msgSend__deleteUploadInfo(void *a1, const char *a2, ...)
{
  return [a1 _deleteUploadInfo];
}

id objc_msgSend__extractFiles(void *a1, const char *a2, ...)
{
  return [a1 _extractFiles];
}

id objc_msgSend__fillSweepParams(void *a1, const char *a2, ...)
{
  return [a1 _fillSweepParams];
}

id objc_msgSend__forceDeferXpcActivity(void *a1, const char *a2, ...)
{
  return [a1 _forceDeferXpcActivity];
}

id objc_msgSend__gatherRadarInfo(void *a1, const char *a2, ...)
{
  return [a1 _gatherRadarInfo];
}

id objc_msgSend__genUniqueDeviceId(void *a1, const char *a2, ...)
{
  return [a1 _genUniqueDeviceId];
}

id objc_msgSend__getDeviceId(void *a1, const char *a2, ...)
{
  return [a1 _getDeviceId];
}

id objc_msgSend__getDiskSpaceFlag(void *a1, const char *a2, ...)
{
  return [a1 _getDiskSpaceFlag];
}

id objc_msgSend__getNextSpdExtractTime(void *a1, const char *a2, ...)
{
  return [a1 _getNextSpdExtractTime];
}

id objc_msgSend__getNumB2BZipErrors(void *a1, const char *a2, ...)
{
  return [a1 _getNumB2BZipErrors];
}

id objc_msgSend__getPendingUploadFile(void *a1, const char *a2, ...)
{
  return [a1 _getPendingUploadFile];
}

id objc_msgSend__getSpdState(void *a1, const char *a2, ...)
{
  return [a1 _getSpdState];
}

id objc_msgSend__getStage(void *a1, const char *a2, ...)
{
  return [a1 _getStage];
}

id objc_msgSend__getUploadContentPath(void *a1, const char *a2, ...)
{
  return [a1 _getUploadContentPath];
}

id objc_msgSend__getUploadIdx(void *a1, const char *a2, ...)
{
  return [a1 _getUploadIdx];
}

id objc_msgSend__getlastTotalUploadSize(void *a1, const char *a2, ...)
{
  return [a1 _getlastTotalUploadSize];
}

id objc_msgSend__hasActiveTasking(void *a1, const char *a2, ...)
{
  return [a1 _hasActiveTasking];
}

id objc_msgSend__hasPendingDSReplyTasking(void *a1, const char *a2, ...)
{
  return [a1 _hasPendingDSReplyTasking];
}

id objc_msgSend__internalCheckNextSpdExtract(void *a1, const char *a2, ...)
{
  return [a1 _internalCheckNextSpdExtract];
}

id objc_msgSend__internalSetNextSpdExtractionTime(void *a1, const char *a2, ...)
{
  return [a1 _internalSetNextSpdExtractionTime];
}

id objc_msgSend__isAfterNotificationCoolDown(void *a1, const char *a2, ...)
{
  return [a1 _isAfterNotificationCoolDown];
}

id objc_msgSend__isAfterTaskingInspectionCoolDown(void *a1, const char *a2, ...)
{
  return [a1 _isAfterTaskingInspectionCoolDown];
}

id objc_msgSend__isGBBSweepEnabled(void *a1, const char *a2, ...)
{
  return [a1 _isGBBSweepEnabled];
}

id objc_msgSend__isIOLogFromHwLogger(void *a1, const char *a2, ...)
{
  return [a1 _isIOLogFromHwLogger];
}

id objc_msgSend__isLastExtractionTooLongAgo(void *a1, const char *a2, ...)
{
  return [a1 _isLastExtractionTooLongAgo];
}

id objc_msgSend__isPendingSpdHandling(void *a1, const char *a2, ...)
{
  return [a1 _isPendingSpdHandling];
}

id objc_msgSend__isXpcActivityDeferred(void *a1, const char *a2, ...)
{
  return [a1 _isXpcActivityDeferred];
}

id objc_msgSend__markTaskingActive(void *a1, const char *a2, ...)
{
  return [a1 _markTaskingActive];
}

id objc_msgSend__populatePerAppDiskSpaceDict(void *a1, const char *a2, ...)
{
  return [a1 _populatePerAppDiskSpaceDict];
}

id objc_msgSend__prepareContentsToUpload(void *a1, const char *a2, ...)
{
  return [a1 _prepareContentsToUpload];
}

id objc_msgSend__removeConvertedIOLog(void *a1, const char *a2, ...)
{
  return [a1 _removeConvertedIOLog];
}

id objc_msgSend__removeExtractedFiles(void *a1, const char *a2, ...)
{
  return [a1 _removeExtractedFiles];
}

id objc_msgSend__removePendingUploadFilePath(void *a1, const char *a2, ...)
{
  return [a1 _removePendingUploadFilePath];
}

id objc_msgSend__resetDaemonUserDefaults(void *a1, const char *a2, ...)
{
  return [a1 _resetDaemonUserDefaults];
}

id objc_msgSend__setNextTaskingInspectionMinTime(void *a1, const char *a2, ...)
{
  return [a1 _setNextTaskingInspectionMinTime];
}

id objc_msgSend__tryActivateTasking(void *a1, const char *a2, ...)
{
  return [a1 _tryActivateTasking];
}

id objc_msgSend__tryCreateWorkDirectories(void *a1, const char *a2, ...)
{
  return [a1 _tryCreateWorkDirectories];
}

id objc_msgSend__tryDeferXpcActivity(void *a1, const char *a2, ...)
{
  return [a1 _tryDeferXpcActivity];
}

id objc_msgSend__tryExtractSpdToNextState(void *a1, const char *a2, ...)
{
  return [a1 _tryExtractSpdToNextState];
}

id objc_msgSend__tryExtractUploadSpd(void *a1, const char *a2, ...)
{
  return [a1 _tryExtractUploadSpd];
}

id objc_msgSend__tryInitializePlistDir(void *a1, const char *a2, ...)
{
  return [a1 _tryInitializePlistDir];
}

id objc_msgSend__unmarkCurrentTasking(void *a1, const char *a2, ...)
{
  return [a1 _unmarkCurrentTasking];
}

id objc_msgSend__updateLastExtractTime(void *a1, const char *a2, ...)
{
  return [a1 _updateLastExtractTime];
}

id objc_msgSend__updateLastUserNotificationDate(void *a1, const char *a2, ...)
{
  return [a1 _updateLastUserNotificationDate];
}

id objc_msgSend_activityMgr(void *a1, const char *a2, ...)
{
  return [a1 activityMgr];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return [a1 allKeys];
}

id objc_msgSend_allowTelemetry(void *a1, const char *a2, ...)
{
  return [a1 allowTelemetry];
}

id objc_msgSend_aspCarryDefaults(void *a1, const char *a2, ...)
{
  return [a1 aspCarryDefaults];
}

id objc_msgSend_blockPath(void *a1, const char *a2, ...)
{
  return [a1 blockPath];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return [a1 BOOLValue];
}

id objc_msgSend_bootCheck(void *a1, const char *a2, ...)
{
  return [a1 bootCheck];
}

id objc_msgSend_cleanUpForTelemetryDisable(void *a1, const char *a2, ...)
{
  return [a1 cleanUpForTelemetryDisable];
}

id objc_msgSend_compressedPath(void *a1, const char *a2, ...)
{
  return [a1 compressedPath];
}

id objc_msgSend_configUUID(void *a1, const char *a2, ...)
{
  return [a1 configUUID];
}

id objc_msgSend_convertedIologPath(void *a1, const char *a2, ...)
{
  return [a1 convertedIologPath];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return [a1 count];
}

id objc_msgSend_ctl(void *a1, const char *a2, ...)
{
  return [a1 ctl];
}

id objc_msgSend_curNumErrorsInPayload(void *a1, const char *a2, ...)
{
  return [a1 curNumErrorsInPayload];
}

id objc_msgSend_currBlock(void *a1, const char *a2, ...)
{
  return [a1 currBlock];
}

id objc_msgSend_currentTaskingInfo(void *a1, const char *a2, ...)
{
  return [a1 currentTaskingInfo];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return [a1 date];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return [a1 defaultManager];
}

id objc_msgSend_defaultStore(void *a1, const char *a2, ...)
{
  return [a1 defaultStore];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return [a1 description];
}

id objc_msgSend_descriptionInStringsFileFormat(void *a1, const char *a2, ...)
{
  return [a1 descriptionInStringsFileFormat];
}

id objc_msgSend_deviceId(void *a1, const char *a2, ...)
{
  return [a1 deviceId];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return [a1 dictionaryRepresentation];
}

id objc_msgSend_endTimeStr(void *a1, const char *a2, ...)
{
  return [a1 endTimeStr];
}

id objc_msgSend_fileManager(void *a1, const char *a2, ...)
{
  return [a1 fileManager];
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return [a1 fileSize];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return [a1 fileSystemRepresentation];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return [a1 floatValue];
}

id objc_msgSend_forceDeferXpcActivity(void *a1, const char *a2, ...)
{
  return [a1 forceDeferXpcActivity];
}

id objc_msgSend_getAllKeys(void *a1, const char *a2, ...)
{
  return [a1 getAllKeys];
}

id objc_msgSend_getTaskingCriteria(void *a1, const char *a2, ...)
{
  return [a1 getTaskingCriteria];
}

id objc_msgSend_getTaskingDurationInSeconds(void *a1, const char *a2, ...)
{
  return [a1 getTaskingDurationInSeconds];
}

id objc_msgSend_getTaskingID(void *a1, const char *a2, ...)
{
  return [a1 getTaskingID];
}

id objc_msgSend_getTaskingSizeLimitInBytes(void *a1, const char *a2, ...)
{
  return [a1 getTaskingSizeLimitInBytes];
}

id objc_msgSend_hasNewErrors(void *a1, const char *a2, ...)
{
  return [a1 hasNewErrors];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return [a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return [a1 integerValue];
}

id objc_msgSend_iologPath(void *a1, const char *a2, ...)
{
  return [a1 iologPath];
}

id objc_msgSend_isActivityDeferred(void *a1, const char *a2, ...)
{
  return [a1 isActivityDeferred];
}

id objc_msgSend_isDeviceTasked(void *a1, const char *a2, ...)
{
  return [a1 isDeviceTasked];
}

id objc_msgSend_isEnoughDiskSpace(void *a1, const char *a2, ...)
{
  return [a1 isEnoughDiskSpace];
}

id objc_msgSend_isIOLogEnableNeeded(void *a1, const char *a2, ...)
{
  return [a1 isIOLogEnableNeeded];
}

id objc_msgSend_isInternalBuild(void *a1, const char *a2, ...)
{
  return [a1 isInternalBuild];
}

id objc_msgSend_isPeriodicSpd(void *a1, const char *a2, ...)
{
  return [a1 isPeriodicSpd];
}

id objc_msgSend_isXpcActivityDeferred(void *a1, const char *a2, ...)
{
  return [a1 isXpcActivityDeferred];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return [a1 lastPathComponent];
}

id objc_msgSend_lastTotalUploadSize(void *a1, const char *a2, ...)
{
  return [a1 lastTotalUploadSize];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return [a1 length];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return [a1 localizedDescription];
}

id objc_msgSend_localizedFailureReason(void *a1, const char *a2, ...)
{
  return [a1 localizedFailureReason];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return [a1 longLongValue];
}

id objc_msgSend_markGBBAsSwept(void *a1, const char *a2, ...)
{
  return [a1 markGBBAsSwept];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return [a1 mutableCopy];
}

id objc_msgSend_myTaskingCriteria(void *a1, const char *a2, ...)
{
  return [a1 myTaskingCriteria];
}

id objc_msgSend_myTaskingDict(void *a1, const char *a2, ...)
{
  return [a1 myTaskingDict];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return [a1 name];
}

id objc_msgSend_nandDriver(void *a1, const char *a2, ...)
{
  return [a1 nandDriver];
}

id objc_msgSend_nandcounterPath(void *a1, const char *a2, ...)
{
  return [a1 nandcounterPath];
}

id objc_msgSend_nandstatsPath(void *a1, const char *a2, ...)
{
  return [a1 nandstatsPath];
}

id objc_msgSend_nextSpdExtractTime(void *a1, const char *a2, ...)
{
  return [a1 nextSpdExtractTime];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return [a1 now];
}

id objc_msgSend_numB2BZipErrors(void *a1, const char *a2, ...)
{
  return [a1 numB2BZipErrors];
}

id objc_msgSend_passWhiteListCheck(void *a1, const char *a2, ...)
{
  return [a1 passWhiteListCheck];
}

id objc_msgSend_payloadDictionaryRepresentation(void *a1, const char *a2, ...)
{
  return [a1 payloadDictionaryRepresentation];
}

id objc_msgSend_pendingUploadFile(void *a1, const char *a2, ...)
{
  return [a1 pendingUploadFile];
}

id objc_msgSend_plistPath(void *a1, const char *a2, ...)
{
  return [a1 plistPath];
}

id objc_msgSend_plistUrl(void *a1, const char *a2, ...)
{
  return [a1 plistUrl];
}

id objc_msgSend_privacyMgr(void *a1, const char *a2, ...)
{
  return [a1 privacyMgr];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return [a1 removeAllObjects];
}

id objc_msgSend_runActivity(void *a1, const char *a2, ...)
{
  return [a1 runActivity];
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return [a1 shared];
}

id objc_msgSend_shouldCollectNandCounters(void *a1, const char *a2, ...)
{
  return [a1 shouldCollectNandCounters];
}

id objc_msgSend_shouldDeferXpcActivity(void *a1, const char *a2, ...)
{
  return [a1 shouldDeferXpcActivity];
}

id objc_msgSend_shouldRegisterActivity(void *a1, const char *a2, ...)
{
  return [a1 shouldRegisterActivity];
}

id objc_msgSend_spdFilePath(void *a1, const char *a2, ...)
{
  return [a1 spdFilePath];
}

id objc_msgSend_spdState(void *a1, const char *a2, ...)
{
  return [a1 spdState];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return [a1 standardUserDefaults];
}

id objc_msgSend_startMonitoring(void *a1, const char *a2, ...)
{
  return [a1 startMonitoring];
}

id objc_msgSend_stateDict(void *a1, const char *a2, ...)
{
  return [a1 stateDict];
}

id objc_msgSend_stateMgr(void *a1, const char *a2, ...)
{
  return [a1 stateMgr];
}

id objc_msgSend_statsDictDict(void *a1, const char *a2, ...)
{
  return [a1 statsDictDict];
}

id objc_msgSend_stopService(void *a1, const char *a2, ...)
{
  return [a1 stopService];
}

id objc_msgSend_sweepBuf(void *a1, const char *a2, ...)
{
  return [a1 sweepBuf];
}

id objc_msgSend_sweepBufSize(void *a1, const char *a2, ...)
{
  return [a1 sweepBufSize];
}

id objc_msgSend_sweepError(void *a1, const char *a2, ...)
{
  return [a1 sweepError];
}

id objc_msgSend_sweepInfo(void *a1, const char *a2, ...)
{
  return [a1 sweepInfo];
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return [a1 synchronize];
}

id objc_msgSend_tarInProgressDir(void *a1, const char *a2, ...)
{
  return [a1 tarInProgressDir];
}

id objc_msgSend_taskingDuration(void *a1, const char *a2, ...)
{
  return [a1 taskingDuration];
}

id objc_msgSend_taskingId(void *a1, const char *a2, ...)
{
  return [a1 taskingId];
}

id objc_msgSend_taskingIdHistory(void *a1, const char *a2, ...)
{
  return [a1 taskingIdHistory];
}

id objc_msgSend_taskingSizeLimit(void *a1, const char *a2, ...)
{
  return [a1 taskingSizeLimit];
}

id objc_msgSend_tryDeferXpcActivity(void *a1, const char *a2, ...)
{
  return [a1 tryDeferXpcActivity];
}

id objc_msgSend_tryLoadDPTasking(void *a1, const char *a2, ...)
{
  return [a1 tryLoadDPTasking];
}

id objc_msgSend_unregisterIOLoggingXPC(void *a1, const char *a2, ...)
{
  return [a1 unregisterIOLoggingXPC];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongValue];
}

id objc_msgSend_uploadDriver(void *a1, const char *a2, ...)
{
  return [a1 uploadDriver];
}

id objc_msgSend_uploadIdx(void *a1, const char *a2, ...)
{
  return [a1 uploadIdx];
}

id objc_msgSend_uploadInfo(void *a1, const char *a2, ...)
{
  return [a1 uploadInfo];
}

id objc_msgSend_uploadInfoKey(void *a1, const char *a2, ...)
{
  return [a1 uploadInfoKey];
}

id objc_msgSend_uploadSizeLimit(void *a1, const char *a2, ...)
{
  return [a1 uploadSizeLimit];
}

id objc_msgSend_validate(void *a1, const char *a2, ...)
{
  return [a1 validate];
}

id objc_msgSend_validateCriteria(void *a1, const char *a2, ...)
{
  return [a1 validateCriteria];
}

id objc_msgSend_wasSigtermReceived(void *a1, const char *a2, ...)
{
  return [a1 wasSigtermReceived];
}

id objc_msgSend_workDir(void *a1, const char *a2, ...)
{
  return [a1 workDir];
}

id objc_msgSend_xpcActivity(void *a1, const char *a2, ...)
{
  return [a1 xpcActivity];
}

id objc_msgSend_xpcActivityMgr(void *a1, const char *a2, ...)
{
  return [a1 xpcActivityMgr];
}